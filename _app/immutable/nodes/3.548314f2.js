var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var _a, _b;
import { s as safe_not_equal, r as create_slot, u as assign$1, f as element, g as claim_element, h as children, d as detach, v as set_attributes, i as insert_hydration, x as action_destroyer, w as listen, y as update_slot_base, z as get_all_dirty_from_scope, A as get_slot_changes, B as is_function, C as run_all, D as compute_rest_props, E as get_current_component, G as setContext, o as onMount, R as onDestroy, F as exclude_internal_props, p as binding_callbacks, q as construct_svelte_component, e as empty, J as add_flush_callback, K as createEventDispatcher, a as space, c as claim_space, l as text, m as claim_text, n as set_data, S as init_binding_group, Q as get_svelte_dataset, j as attr, N as append_hydration, H as noop$1, P as getContext, T as bubble, U as svg_element, V as claim_svg_element, W as set_data_maybe_contenteditable, X as compute_slots, M as component_subscribe, Y as set_store_value, O as destroy_each, k as set_style, Z as to_number, _ as set_input_value, $ as src_url_equal, a0 as toggle_class, a1 as current_component, b as afterUpdate } from "../chunks/scheduler.8ee754c3.js";
import { S as SvelteComponent, i as init, a as transition_in, t as transition_out, b as create_component, d as claim_component, m as mount_component, g as group_outros, e as destroy_component, c as check_outros, f as bind } from "../chunks/index.09d54507.js";
import { _ as __extends, a as __assign, M as MDCFoundation, c as classMap, u as useActions, g as get_spread_update, f as forwardEventsBuilder, d as dispatch, b as classAdderBuilder, e as get_spread_object, S as SmuiElement, B as Button, C as CommonLabel, p as prefixFilter, m as exclude, R as Ripple, s as normalizeKey, K as KEY, F as FloatingLabel, N as NotchedOutline, t as LineRipple, L as List, I as Item, k as ensure_array_like, j as Text, l as __values, w as __spreadArray, n as __read, v as v4, T as Textfield, q as update_keyed_each, r as outro_and_destroy_block, h as dashboards, i as CircularProgress } from "../chunks/Textfield.6dc24502.js";
import { g as devices, s as scopes, b as homey, j as advancedFlows, i as basicFlows, k as insights, w as webhookUrl, m as webhookId, e as dashboards$1, l as goto } from "../chunks/homey.dcb48ed1.js";
import { w as writable, e as base } from "../chunks/singletons.0aae1b48.js";
import { p as page } from "../chunks/stores.2bbe4c5c.js";
import { b as domFocusTrap, D as Dialog, T as Title$2, C as Content$1, A as Actions, c as Corner, M as Menu, I as IconButton, f as AnimationFrame, e as editing, a as CommonIcon, G as Graphic, h as grid, d as dashboard } from "../chunks/Actions.9e42e5d8.js";
import { h as handle_promise, u as update_await_block_branch, C as Card } from "../chunks/ActionIcons.876507b2.js";
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var cssPropertyNameMap = {
  animation: {
    prefixed: "-webkit-animation",
    standard: "animation"
  },
  transform: {
    prefixed: "-webkit-transform",
    standard: "transform"
  },
  transition: {
    prefixed: "-webkit-transition",
    standard: "transition"
  }
};
function isWindow(windowObj) {
  return Boolean(windowObj.document) && typeof windowObj.document.createElement === "function";
}
function getCorrectPropertyName(windowObj, cssProperty) {
  if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {
    var el = windowObj.document.createElement("div");
    var _a2 = cssPropertyNameMap[cssProperty], standard = _a2.standard, prefixed = _a2.prefixed;
    var isStandard = standard in el.style;
    return isStandard ? standard : prefixed;
  }
  return cssProperty;
}
function Anchor(node, { addClass = (className) => node.classList.add(className), removeClass = (className) => node.classList.remove(className) } = {}) {
  addClass("mdc-menu-surface--anchor");
  return {
    destroy() {
      removeClass("mdc-menu-surface--anchor");
    }
  };
}
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var cssClasses$6 = {
  ANIMATE: "mdc-drawer--animate",
  CLOSING: "mdc-drawer--closing",
  DISMISSIBLE: "mdc-drawer--dismissible",
  MODAL: "mdc-drawer--modal",
  OPEN: "mdc-drawer--open",
  OPENING: "mdc-drawer--opening",
  ROOT: "mdc-drawer"
};
var strings$6 = {
  APP_CONTENT_SELECTOR: ".mdc-drawer-app-content",
  CLOSE_EVENT: "MDCDrawer:closed",
  OPEN_EVENT: "MDCDrawer:opened",
  SCRIM_SELECTOR: ".mdc-drawer-scrim",
  LIST_SELECTOR: ".mdc-list,.mdc-deprecated-list",
  LIST_ITEM_ACTIVATED_SELECTOR: ".mdc-list-item--activated,.mdc-deprecated-list-item--activated"
};
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCDismissibleDrawerFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCDismissibleDrawerFoundation2, _super);
    function MDCDismissibleDrawerFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCDismissibleDrawerFoundation2.defaultAdapter), adapter)) || this;
      _this.animationFrame = 0;
      _this.animationTimer = 0;
      return _this;
    }
    Object.defineProperty(MDCDismissibleDrawerFoundation2, "strings", {
      get: function() {
        return strings$6;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCDismissibleDrawerFoundation2, "cssClasses", {
      get: function() {
        return cssClasses$6;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCDismissibleDrawerFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          elementHasClass: function() {
            return false;
          },
          notifyClose: function() {
            return void 0;
          },
          notifyOpen: function() {
            return void 0;
          },
          saveFocus: function() {
            return void 0;
          },
          restoreFocus: function() {
            return void 0;
          },
          focusActiveNavigationItem: function() {
            return void 0;
          },
          trapFocus: function() {
            return void 0;
          },
          releaseFocus: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCDismissibleDrawerFoundation2.prototype.destroy = function() {
      if (this.animationFrame) {
        cancelAnimationFrame(this.animationFrame);
      }
      if (this.animationTimer) {
        clearTimeout(this.animationTimer);
      }
    };
    MDCDismissibleDrawerFoundation2.prototype.open = function() {
      var _this = this;
      if (this.isOpen() || this.isOpening() || this.isClosing()) {
        return;
      }
      this.adapter.addClass(cssClasses$6.OPEN);
      this.adapter.addClass(cssClasses$6.ANIMATE);
      this.runNextAnimationFrame(function() {
        _this.adapter.addClass(cssClasses$6.OPENING);
      });
      this.adapter.saveFocus();
    };
    MDCDismissibleDrawerFoundation2.prototype.close = function() {
      if (!this.isOpen() || this.isOpening() || this.isClosing()) {
        return;
      }
      this.adapter.addClass(cssClasses$6.CLOSING);
    };
    MDCDismissibleDrawerFoundation2.prototype.isOpen = function() {
      return this.adapter.hasClass(cssClasses$6.OPEN);
    };
    MDCDismissibleDrawerFoundation2.prototype.isOpening = function() {
      return this.adapter.hasClass(cssClasses$6.OPENING) || this.adapter.hasClass(cssClasses$6.ANIMATE);
    };
    MDCDismissibleDrawerFoundation2.prototype.isClosing = function() {
      return this.adapter.hasClass(cssClasses$6.CLOSING);
    };
    MDCDismissibleDrawerFoundation2.prototype.handleKeydown = function(evt) {
      var keyCode = evt.keyCode, key = evt.key;
      var isEscape = key === "Escape" || keyCode === 27;
      if (isEscape) {
        this.close();
      }
    };
    MDCDismissibleDrawerFoundation2.prototype.handleTransitionEnd = function(evt) {
      var OPENING = cssClasses$6.OPENING, CLOSING = cssClasses$6.CLOSING, OPEN = cssClasses$6.OPEN, ANIMATE = cssClasses$6.ANIMATE, ROOT = cssClasses$6.ROOT;
      var isRootElement = this.isElement(evt.target) && this.adapter.elementHasClass(evt.target, ROOT);
      if (!isRootElement) {
        return;
      }
      if (this.isClosing()) {
        this.adapter.removeClass(OPEN);
        this.closed();
        this.adapter.restoreFocus();
        this.adapter.notifyClose();
      } else {
        this.adapter.focusActiveNavigationItem();
        this.opened();
        this.adapter.notifyOpen();
      }
      this.adapter.removeClass(ANIMATE);
      this.adapter.removeClass(OPENING);
      this.adapter.removeClass(CLOSING);
    };
    MDCDismissibleDrawerFoundation2.prototype.opened = function() {
    };
    MDCDismissibleDrawerFoundation2.prototype.closed = function() {
    };
    MDCDismissibleDrawerFoundation2.prototype.runNextAnimationFrame = function(callback2) {
      var _this = this;
      cancelAnimationFrame(this.animationFrame);
      this.animationFrame = requestAnimationFrame(function() {
        _this.animationFrame = 0;
        clearTimeout(_this.animationTimer);
        _this.animationTimer = setTimeout(callback2, 0);
      });
    };
    MDCDismissibleDrawerFoundation2.prototype.isElement = function(element2) {
      return Boolean(element2.classList);
    };
    return MDCDismissibleDrawerFoundation2;
  }(MDCFoundation)
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCModalDrawerFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCModalDrawerFoundation2, _super);
    function MDCModalDrawerFoundation2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCModalDrawerFoundation2.prototype.handleScrimClick = function() {
      this.close();
    };
    MDCModalDrawerFoundation2.prototype.opened = function() {
      this.adapter.trapFocus();
    };
    MDCModalDrawerFoundation2.prototype.closed = function() {
      this.adapter.releaseFocus();
    };
    return MDCModalDrawerFoundation2;
  }(MDCDismissibleDrawerFoundation)
);
function create_fragment$y(ctx) {
  let aside;
  let aside_class_value;
  let useActions_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[15].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[14],
    null
  );
  let aside_levels = [
    {
      class: aside_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-drawer": true,
        "mdc-drawer--dismissible": (
          /*variant*/
          ctx[2] === "dismissible"
        ),
        "mdc-drawer--modal": (
          /*variant*/
          ctx[2] === "modal"
        ),
        "smui-drawer__absolute": (
          /*variant*/
          ctx[2] === "modal" && !/*fixed*/
          ctx[3]
        ),
        .../*internalClasses*/
        ctx[6]
      })
    },
    /*$$restProps*/
    ctx[8]
  ];
  let aside_data = {};
  for (let i2 = 0; i2 < aside_levels.length; i2 += 1) {
    aside_data = assign$1(aside_data, aside_levels[i2]);
  }
  return {
    c() {
      aside = element("aside");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l(nodes) {
      aside = claim_element(nodes, "ASIDE", { class: true });
      var aside_nodes = children(aside);
      if (default_slot)
        default_slot.l(aside_nodes);
      aside_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_attributes(aside, aside_data);
    },
    m(target, anchor) {
      insert_hydration(target, aside, anchor);
      if (default_slot) {
        default_slot.m(aside, null);
      }
      ctx[16](aside);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            aside,
            /*use*/
            ctx[0]
          )),
          action_destroyer(
            /*forwardEvents*/
            ctx[7].call(null, aside)
          ),
          listen(aside, "keydown", function() {
            if (is_function(
              /*instance*/
              ctx[4] && /*instance*/
              ctx[4].handleKeydown.bind(
                /*instance*/
                ctx[4]
              )
            ))
              /*instance*/
              (ctx[4] && /*instance*/
              ctx[4].handleKeydown.bind(
                /*instance*/
                ctx[4]
              )).apply(this, arguments);
          }),
          listen(aside, "transitionend", function() {
            if (is_function(
              /*instance*/
              ctx[4] && /*instance*/
              ctx[4].handleTransitionEnd.bind(
                /*instance*/
                ctx[4]
              )
            ))
              /*instance*/
              (ctx[4] && /*instance*/
              ctx[4].handleTransitionEnd.bind(
                /*instance*/
                ctx[4]
              )).apply(this, arguments);
          })
        ];
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16384)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[14],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[14]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx[14],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(aside, aside_data = get_spread_update(aside_levels, [
        (!current || dirty & /*className, variant, fixed, internalClasses*/
        78 && aside_class_value !== (aside_class_value = classMap({
          [
            /*className*/
            ctx[1]
          ]: true,
          "mdc-drawer": true,
          "mdc-drawer--dismissible": (
            /*variant*/
            ctx[2] === "dismissible"
          ),
          "mdc-drawer--modal": (
            /*variant*/
            ctx[2] === "modal"
          ),
          "smui-drawer__absolute": (
            /*variant*/
            ctx[2] === "modal" && !/*fixed*/
            ctx[3]
          ),
          .../*internalClasses*/
          ctx[6]
        }))) && { class: aside_class_value },
        dirty & /*$$restProps*/
        256 && /*$$restProps*/
        ctx[8]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx[0]
        );
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(aside);
      }
      if (default_slot)
        default_slot.d(detaching);
      ctx[16](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance_1$7($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "variant", "open", "fixed", "setOpen", "isOpen", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  const { FocusTrap } = domFocusTrap;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { variant = void 0 } = $$props;
  let { open = false } = $$props;
  let { fixed = true } = $$props;
  let element2;
  let instance2 = void 0;
  let internalClasses = {};
  let previousFocus = null;
  let focusTrap;
  let scrim = false;
  setContext("SMUI:list:nav", true);
  setContext("SMUI:list:item:nav", true);
  setContext("SMUI:list:wrapFocus", true);
  let oldVariant = variant;
  onMount(() => {
    focusTrap = new FocusTrap(
      element2,
      {
        // Component handles focusing on active nav item.
        skipInitialFocus: true
      }
    );
    $$invalidate(4, instance2 = getInstance());
    instance2 && instance2.init();
  });
  onDestroy(() => {
    instance2 && instance2.destroy();
    scrim && scrim.removeEventListener("SMUIDrawerScrim:click", handleScrimClick);
  });
  function getInstance() {
    var _a2, _b2;
    if (scrim) {
      scrim.removeEventListener("SMUIDrawerScrim:click", handleScrimClick);
    }
    if (variant === "modal") {
      scrim = (_b2 = (_a2 = element2.parentNode) === null || _a2 === void 0 ? void 0 : _a2.querySelector(".mdc-drawer-scrim")) !== null && _b2 !== void 0 ? _b2 : false;
      if (scrim) {
        scrim.addEventListener("SMUIDrawerScrim:click", handleScrimClick);
      }
    }
    const Foundation = variant === "dismissible" ? MDCDismissibleDrawerFoundation : variant === "modal" ? MDCModalDrawerFoundation : void 0;
    return Foundation ? new Foundation({
      addClass,
      removeClass,
      hasClass,
      elementHasClass: (element3, className2) => element3.classList.contains(className2),
      saveFocus: () => previousFocus = document.activeElement,
      restoreFocus: () => {
        if (previousFocus && "focus" in previousFocus && element2.contains(document.activeElement)) {
          previousFocus.focus();
        }
      },
      focusActiveNavigationItem: () => {
        const activeNavItemEl = element2.querySelector(".mdc-list-item--activated,.mdc-deprecated-list-item--activated");
        if (activeNavItemEl) {
          activeNavItemEl.focus();
        }
      },
      notifyClose: () => {
        $$invalidate(9, open = false);
        dispatch(element2, "SMUIDrawer:closed", void 0, void 0, true);
      },
      notifyOpen: () => {
        $$invalidate(9, open = true);
        dispatch(element2, "SMUIDrawer:opened", void 0, void 0, true);
      },
      trapFocus: () => focusTrap.trapFocus(),
      releaseFocus: () => focusTrap.releaseFocus()
    }) : void 0;
  }
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(6, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(6, internalClasses[className2] = false, internalClasses);
    }
  }
  function handleScrimClick() {
    instance2 && "handleScrimClick" in instance2 && instance2.handleScrimClick();
  }
  function setOpen(value) {
    $$invalidate(9, open = value);
  }
  function isOpen() {
    return open;
  }
  function getElement() {
    return element2;
  }
  function aside_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(5, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("variant" in $$new_props)
      $$invalidate(2, variant = $$new_props.variant);
    if ("open" in $$new_props)
      $$invalidate(9, open = $$new_props.open);
    if ("fixed" in $$new_props)
      $$invalidate(3, fixed = $$new_props.fixed);
    if ("$$scope" in $$new_props)
      $$invalidate(14, $$scope = $$new_props.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*oldVariant, variant, instance*/
    8212) {
      if (oldVariant !== variant) {
        $$invalidate(13, oldVariant = variant);
        instance2 && instance2.destroy();
        $$invalidate(6, internalClasses = {});
        $$invalidate(4, instance2 = getInstance());
        instance2 && instance2.init();
      }
    }
    if ($$self.$$.dirty & /*instance, open*/
    528) {
      if (instance2 && instance2.isOpen() !== open) {
        if (open) {
          instance2.open();
        } else {
          instance2.close();
        }
      }
    }
  };
  return [
    use,
    className,
    variant,
    fixed,
    instance2,
    element2,
    internalClasses,
    forwardEvents,
    $$restProps,
    open,
    setOpen,
    isOpen,
    getElement,
    oldVariant,
    $$scope,
    slots,
    aside_binding
  ];
}
class Drawer extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance_1$7, create_fragment$y, safe_not_equal, {
      use: 0,
      class: 1,
      variant: 2,
      open: 9,
      fixed: 3,
      setOpen: 10,
      isOpen: 11,
      getElement: 12
    });
  }
  get setOpen() {
    return this.$$.ctx[10];
  }
  get isOpen() {
    return this.$$.ctx[11];
  }
  get getElement() {
    return this.$$.ctx[12];
  }
}
const AppContent = classAdderBuilder({
  class: "mdc-drawer-app-content",
  tag: "div"
});
const Content = classAdderBuilder({
  class: "mdc-drawer__content",
  tag: "div"
});
const Header = classAdderBuilder({
  class: "mdc-drawer__header",
  tag: "div"
});
const Title$1 = classAdderBuilder({
  class: "mdc-drawer__title",
  tag: "h1"
});
const Subtitle = classAdderBuilder({
  class: "mdc-drawer__subtitle",
  tag: "h2"
});
function create_default_slot$h(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    null
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    l(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4096)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment$x(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
    { tag: (
      /*tag*/
      ctx[4]
    ) },
    {
      use: [
        /*forwardEvents*/
        ctx[6],
        .../*use*/
        ctx[0]
      ]
    },
    {
      class: classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-drawer-scrim": true,
        "smui-drawer-scrim__absolute": !/*fixed*/
        ctx[2]
      })
    },
    /*$$restProps*/
    ctx[8]
  ];
  var switch_value = (
    /*component*/
    ctx[3]
  );
  function switch_props(ctx2) {
    let switch_instance_props = {
      $$slots: { default: [create_default_slot$h] },
      $$scope: { ctx: ctx2 }
    };
    for (let i2 = 0; i2 < switch_instance_spread_levels.length; i2 += 1) {
      switch_instance_props = assign$1(switch_instance_props, switch_instance_spread_levels[i2]);
    }
    return { props: switch_instance_props };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    ctx[11](switch_instance);
    switch_instance.$on(
      "click",
      /*handleClick*/
      ctx[7]
    );
  }
  return {
    c() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const switch_instance_changes = dirty & /*tag, forwardEvents, use, classMap, className, fixed, $$restProps*/
      343 ? get_spread_update(switch_instance_spread_levels, [
        dirty & /*tag*/
        16 && { tag: (
          /*tag*/
          ctx2[4]
        ) },
        dirty & /*forwardEvents, use*/
        65 && {
          use: [
            /*forwardEvents*/
            ctx2[6],
            .../*use*/
            ctx2[0]
          ]
        },
        dirty & /*classMap, className, fixed*/
        6 && {
          class: classMap({
            [
              /*className*/
              ctx2[1]
            ]: true,
            "mdc-drawer-scrim": true,
            "smui-drawer-scrim__absolute": !/*fixed*/
            ctx2[2]
          })
        },
        dirty & /*$$restProps*/
        256 && get_spread_object(
          /*$$restProps*/
          ctx2[8]
        )
      ]) : {};
      if (dirty & /*$$scope*/
      4096) {
        switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (dirty & /*component*/
      8 && switch_value !== (switch_value = /*component*/
      ctx2[3])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          ctx2[11](switch_instance);
          switch_instance.$on(
            "click",
            /*handleClick*/
            ctx2[7]
          );
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(switch_instance_anchor);
      }
      ctx[11](null);
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function instance$o($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "fixed", "component", "tag", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { fixed = true } = $$props;
  let element2;
  let { component = SmuiElement } = $$props;
  let { tag = component === SmuiElement ? "div" : void 0 } = $$props;
  function handleClick(event) {
    dispatch(getElement(), "SMUIDrawerScrim:click", event);
  }
  function getElement() {
    return element2.getElement();
  }
  function switch_instance_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(5, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("fixed" in $$new_props)
      $$invalidate(2, fixed = $$new_props.fixed);
    if ("component" in $$new_props)
      $$invalidate(3, component = $$new_props.component);
    if ("tag" in $$new_props)
      $$invalidate(4, tag = $$new_props.tag);
    if ("$$scope" in $$new_props)
      $$invalidate(12, $$scope = $$new_props.$$scope);
  };
  return [
    use,
    className,
    fixed,
    component,
    tag,
    element2,
    forwardEvents,
    handleClick,
    $$restProps,
    getElement,
    slots,
    switch_instance_binding,
    $$scope
  ];
}
class Scrim extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$o, create_fragment$x, safe_not_equal, {
      use: 0,
      class: 1,
      fixed: 2,
      component: 3,
      tag: 4,
      getElement: 9
    });
  }
  get getElement() {
    return this.$$.ctx[9];
  }
}
function create_default_slot_7$6(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Create local dashboard");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Create local dashboard");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_6$7(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*text*/
        ctx[1]
      );
    },
    l(nodes) {
      t2 = claim_text(
        nodes,
        /*text*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_5$8(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*cancelText*/
        ctx[2]
      );
    },
    l(nodes) {
      t2 = claim_text(
        nodes,
        /*cancelText*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*cancelText*/
      4)
        set_data(
          t2,
          /*cancelText*/
          ctx2[2]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_4$8(ctx) {
  let label;
  let current;
  label = new CommonLabel({
    props: {
      $$slots: { default: [create_default_slot_5$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(label.$$.fragment);
    },
    l(nodes) {
      claim_component(label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const label_changes = {};
      if (dirty & /*$$scope, cancelText*/
      132) {
        label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      label.$set(label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(label, detaching);
    }
  };
}
function create_default_slot_3$8(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*confirmText*/
        ctx[3]
      );
    },
    l(nodes) {
      t2 = claim_text(
        nodes,
        /*confirmText*/
        ctx[3]
      );
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*confirmText*/
      8)
        set_data(
          t2,
          /*confirmText*/
          ctx2[3]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_2$a(ctx) {
  let label;
  let current;
  label = new CommonLabel({
    props: {
      $$slots: { default: [create_default_slot_3$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(label.$$.fragment);
    },
    l(nodes) {
      claim_component(label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const label_changes = {};
      if (dirty & /*$$scope, confirmText*/
      136) {
        label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      label.$set(label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(label, detaching);
    }
  };
}
function create_default_slot_1$d(ctx) {
  let button0;
  let t2;
  let button1;
  let current;
  button0 = new Button({
    props: {
      action: "cancel",
      $$slots: { default: [create_default_slot_4$8] },
      $$scope: { ctx }
    }
  });
  button1 = new Button({
    props: {
      action: "confirm",
      $$slots: { default: [create_default_slot_2$a] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(button0.$$.fragment);
      t2 = space();
      create_component(button1.$$.fragment);
    },
    l(nodes) {
      claim_component(button0.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(button1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button0, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(button1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$$scope, cancelText*/
      132) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope, confirmText*/
      136) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(button0, detaching);
      destroy_component(button1, detaching);
    }
  };
}
function create_default_slot$g(ctx) {
  let title;
  let t0;
  let content;
  let t1;
  let actions;
  let current;
  title = new Title$2({
    props: {
      $$slots: { default: [create_default_slot_7$6] },
      $$scope: { ctx }
    }
  });
  content = new Content$1({
    props: {
      style: "margin: 5px;",
      $$slots: { default: [create_default_slot_6$7] },
      $$scope: { ctx }
    }
  });
  actions = new Actions({
    props: {
      $$slots: { default: [create_default_slot_1$d] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(title.$$.fragment);
      t0 = space();
      create_component(content.$$.fragment);
      t1 = space();
      create_component(actions.$$.fragment);
    },
    l(nodes) {
      claim_component(title.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(content.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(actions.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(title, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(content, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(actions, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const title_changes = {};
      if (dirty & /*$$scope*/
      128) {
        title_changes.$$scope = { dirty, ctx: ctx2 };
      }
      title.$set(title_changes);
      const content_changes = {};
      if (dirty & /*$$scope, text*/
      130) {
        content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      content.$set(content_changes);
      const actions_changes = {};
      if (dirty & /*$$scope, confirmText, cancelText*/
      140) {
        actions_changes.$$scope = { dirty, ctx: ctx2 };
      }
      actions.$set(actions_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(title.$$.fragment, local);
      transition_in(content.$$.fragment, local);
      transition_in(actions.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(title.$$.fragment, local);
      transition_out(content.$$.fragment, local);
      transition_out(actions.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(title, detaching);
      destroy_component(content, detaching);
      destroy_component(actions, detaching);
    }
  };
}
function create_fragment$w(ctx) {
  let dialog;
  let updating_open;
  let current;
  function dialog_open_binding(value) {
    ctx[5](value);
  }
  let dialog_props = {
    selection: true,
    $$slots: { default: [create_default_slot$g] },
    $$scope: { ctx }
  };
  if (
    /*open*/
    ctx[0] !== void 0
  ) {
    dialog_props.open = /*open*/
    ctx[0];
  }
  dialog = new Dialog({ props: dialog_props });
  binding_callbacks.push(() => bind(dialog, "open", dialog_open_binding));
  dialog.$on(
    "SMUIDialog:closed",
    /*closeHandler*/
    ctx[4]
  );
  return {
    c() {
      create_component(dialog.$$.fragment);
    },
    l(nodes) {
      claim_component(dialog.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(dialog, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dialog_changes = {};
      if (dirty & /*$$scope, confirmText, cancelText, text*/
      142) {
        dialog_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_open && dirty & /*open*/
      1) {
        updating_open = true;
        dialog_changes.open = /*open*/
        ctx2[0];
        add_flush_callback(() => updating_open = false);
      }
      dialog.$set(dialog_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dialog.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dialog.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dialog, detaching);
    }
  };
}
function instance$n($$self, $$props, $$invalidate) {
  let { open } = $$props;
  let { text: text2 } = $$props;
  let { cancelText = "Cancel" } = $$props;
  let { confirmText = "Confirm" } = $$props;
  const dispatch2 = createEventDispatcher();
  function closeHandler(e2) {
    dispatch2(e2.detail.action, true);
  }
  function dialog_open_binding(value) {
    open = value;
    $$invalidate(0, open);
  }
  $$self.$$set = ($$props2) => {
    if ("open" in $$props2)
      $$invalidate(0, open = $$props2.open);
    if ("text" in $$props2)
      $$invalidate(1, text2 = $$props2.text);
    if ("cancelText" in $$props2)
      $$invalidate(2, cancelText = $$props2.cancelText);
    if ("confirmText" in $$props2)
      $$invalidate(3, confirmText = $$props2.confirmText);
  };
  return [open, text2, cancelText, confirmText, closeHandler, dialog_open_binding];
}
class ConfirmDialog extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$n, create_fragment$w, safe_not_equal, {
      open: 0,
      text: 1,
      cancelText: 2,
      confirmText: 3
    });
  }
}
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var strings$5 = {
  NATIVE_CONTROL_SELECTOR: ".mdc-radio__native-control"
};
var cssClasses$5 = {
  DISABLED: "mdc-radio--disabled",
  ROOT: "mdc-radio"
};
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCRadioFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCRadioFoundation2, _super);
    function MDCRadioFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCRadioFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCRadioFoundation2, "cssClasses", {
      get: function() {
        return cssClasses$5;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCRadioFoundation2, "strings", {
      get: function() {
        return strings$5;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCRadioFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          setNativeControlDisabled: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCRadioFoundation2.prototype.setDisabled = function(disabled) {
      var DISABLED = MDCRadioFoundation2.cssClasses.DISABLED;
      this.adapter.setNativeControlDisabled(disabled);
      if (disabled) {
        this.adapter.addClass(DISABLED);
      } else {
        this.adapter.removeClass(DISABLED);
      }
    };
    return MDCRadioFoundation2;
  }(MDCFoundation)
);
function create_fragment$v(ctx) {
  let div4;
  let input;
  let input_class_value;
  let input_value_value;
  let useActions_action;
  let t0;
  let div2;
  let textContent = `<div class="mdc-radio__outer-circle"></div> <div class="mdc-radio__inner-circle"></div>`;
  let t2;
  let div3;
  let div4_class_value;
  let div4_style_value;
  let Ripple_action;
  let useActions_action_1;
  let binding_group;
  let mounted;
  let dispose;
  let input_levels = [
    {
      class: input_class_value = classMap({
        [
          /*input$class*/
          ctx[9]
        ]: true,
        "mdc-radio__native-control": true
      })
    },
    { type: "radio" },
    /*inputProps*/
    ctx[16],
    { disabled: (
      /*disabled*/
      ctx[0]
    ) },
    {
      __value: input_value_value = /*isUninitializedValue*/
      ctx[15](
        /*valueKey*/
        ctx[7]
      ) ? (
        /*value*/
        ctx[6]
      ) : (
        /*valueKey*/
        ctx[7]
      )
    },
    prefixFilter(
      /*$$restProps*/
      ctx[20],
      "input$"
    )
  ];
  let input_data = {};
  for (let i2 = 0; i2 < input_levels.length; i2 += 1) {
    input_data = assign$1(input_data, input_levels[i2]);
  }
  let div4_levels = [
    {
      class: div4_class_value = classMap({
        [
          /*className*/
          ctx[3]
        ]: true,
        "mdc-radio": true,
        "mdc-radio--disabled": (
          /*disabled*/
          ctx[0]
        ),
        "mdc-radio--touch": (
          /*touch*/
          ctx[5]
        ),
        .../*internalClasses*/
        ctx[11]
      })
    },
    {
      style: div4_style_value = Object.entries(
        /*internalStyles*/
        ctx[12]
      ).map(func$4).concat([
        /*style*/
        ctx[4]
      ]).join(" ")
    },
    exclude(
      /*$$restProps*/
      ctx[20],
      ["input$"]
    )
  ];
  let div_data_4 = {};
  for (let i2 = 0; i2 < div4_levels.length; i2 += 1) {
    div_data_4 = assign$1(div_data_4, div4_levels[i2]);
  }
  binding_group = init_binding_group(
    /*$$binding_groups*/
    ctx[26][0]
  );
  return {
    c() {
      div4 = element("div");
      input = element("input");
      t0 = space();
      div2 = element("div");
      div2.innerHTML = textContent;
      t2 = space();
      div3 = element("div");
      this.h();
    },
    l(nodes) {
      div4 = claim_element(nodes, "DIV", { class: true, style: true });
      var div4_nodes = children(div4);
      input = claim_element(div4_nodes, "INPUT", { class: true, type: true });
      t0 = claim_space(div4_nodes);
      div2 = claim_element(div4_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div2) !== "svelte-14iudo4")
        div2.innerHTML = textContent;
      t2 = claim_space(div4_nodes);
      div3 = claim_element(div4_nodes, "DIV", { class: true });
      children(div3).forEach(detach);
      div4_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_attributes(input, input_data);
      attr(div2, "class", "mdc-radio__background");
      attr(div3, "class", "mdc-radio__ripple");
      set_attributes(div4, div_data_4);
      binding_group.p(input);
    },
    m(target, anchor) {
      insert_hydration(target, div4, anchor);
      append_hydration(div4, input);
      if (input.autofocus)
        input.focus();
      input.checked = input.__value === /*group*/
      ctx[1];
      append_hydration(div4, t0);
      append_hydration(div4, div2);
      append_hydration(div4, t2);
      append_hydration(div4, div3);
      ctx[27](div4);
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            input,
            /*input$use*/
            ctx[8]
          )),
          listen(
            input,
            "change",
            /*input_change_handler*/
            ctx[25]
          ),
          listen(
            input,
            "blur",
            /*blur_handler*/
            ctx[23]
          ),
          listen(
            input,
            "focus",
            /*focus_handler*/
            ctx[24]
          ),
          action_destroyer(Ripple_action = Ripple.call(null, div4, {
            unbounded: true,
            active: (
              /*rippleActive*/
              ctx[13]
            ),
            addClass: (
              /*addClass*/
              ctx[17]
            ),
            removeClass: (
              /*removeClass*/
              ctx[18]
            ),
            addStyle: (
              /*addStyle*/
              ctx[19]
            )
          })),
          action_destroyer(useActions_action_1 = useActions.call(
            null,
            div4,
            /*use*/
            ctx[2]
          )),
          action_destroyer(
            /*forwardEvents*/
            ctx[14].call(null, div4)
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      set_attributes(input, input_data = get_spread_update(input_levels, [
        dirty & /*input$class*/
        512 && input_class_value !== (input_class_value = classMap({
          [
            /*input$class*/
            ctx2[9]
          ]: true,
          "mdc-radio__native-control": true
        })) && { class: input_class_value },
        { type: "radio" },
        /*inputProps*/
        ctx2[16],
        dirty & /*disabled*/
        1 && { disabled: (
          /*disabled*/
          ctx2[0]
        ) },
        dirty & /*valueKey, value*/
        192 && input_value_value !== (input_value_value = /*isUninitializedValue*/
        ctx2[15](
          /*valueKey*/
          ctx2[7]
        ) ? (
          /*value*/
          ctx2[6]
        ) : (
          /*valueKey*/
          ctx2[7]
        )) && { __value: input_value_value },
        dirty & /*$$restProps*/
        1048576 && prefixFilter(
          /*$$restProps*/
          ctx2[20],
          "input$"
        )
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*input$use*/
      256)
        useActions_action.update.call(
          null,
          /*input$use*/
          ctx2[8]
        );
      if (dirty & /*group*/
      2) {
        input.checked = input.__value === /*group*/
        ctx2[1];
      }
      set_attributes(div4, div_data_4 = get_spread_update(div4_levels, [
        dirty & /*className, disabled, touch, internalClasses*/
        2089 && div4_class_value !== (div4_class_value = classMap({
          [
            /*className*/
            ctx2[3]
          ]: true,
          "mdc-radio": true,
          "mdc-radio--disabled": (
            /*disabled*/
            ctx2[0]
          ),
          "mdc-radio--touch": (
            /*touch*/
            ctx2[5]
          ),
          .../*internalClasses*/
          ctx2[11]
        })) && { class: div4_class_value },
        dirty & /*internalStyles, style*/
        4112 && div4_style_value !== (div4_style_value = Object.entries(
          /*internalStyles*/
          ctx2[12]
        ).map(func$4).concat([
          /*style*/
          ctx2[4]
        ]).join(" ")) && { style: div4_style_value },
        dirty & /*$$restProps*/
        1048576 && exclude(
          /*$$restProps*/
          ctx2[20],
          ["input$"]
        )
      ]));
      if (Ripple_action && is_function(Ripple_action.update) && dirty & /*rippleActive*/
      8192)
        Ripple_action.update.call(null, {
          unbounded: true,
          active: (
            /*rippleActive*/
            ctx2[13]
          ),
          addClass: (
            /*addClass*/
            ctx2[17]
          ),
          removeClass: (
            /*removeClass*/
            ctx2[18]
          ),
          addStyle: (
            /*addStyle*/
            ctx2[19]
          )
        });
      if (useActions_action_1 && is_function(useActions_action_1.update) && dirty & /*use*/
      4)
        useActions_action_1.update.call(
          null,
          /*use*/
          ctx2[2]
        );
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div4);
      }
      ctx[27](null);
      binding_group.r();
      mounted = false;
      run_all(dispose);
    }
  };
}
const func$4 = ([name, value]) => `${name}: ${value};`;
function instance_1$6($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "use",
    "class",
    "style",
    "disabled",
    "touch",
    "group",
    "value",
    "valueKey",
    "input$use",
    "input$class",
    "getId",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  var _a2;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let uninitializedValue = () => {
  };
  function isUninitializedValue(value2) {
    return value2 === uninitializedValue;
  }
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { disabled = false } = $$props;
  let { touch = false } = $$props;
  let { group = void 0 } = $$props;
  let { value = null } = $$props;
  let { valueKey = uninitializedValue } = $$props;
  let { input$use = [] } = $$props;
  let { input$class = "" } = $$props;
  let element2;
  let instance2;
  let internalClasses = {};
  let internalStyles = {};
  let rippleActive = false;
  let inputProps = (_a2 = getContext("SMUI:generic:input:props")) !== null && _a2 !== void 0 ? _a2 : {};
  onMount(() => {
    instance2 = new MDCRadioFoundation({
      addClass,
      removeClass,
      setNativeControlDisabled: (value2) => $$invalidate(0, disabled = value2)
    });
    const accessor = {
      _smui_radio_accessor: true,
      get element() {
        return getElement();
      },
      get checked() {
        return group === value;
      },
      set checked(checked) {
        if (checked && group !== value) {
          $$invalidate(1, group = value);
        } else if (!checked && group === value) {
          $$invalidate(1, group = void 0);
        }
      },
      activateRipple() {
        if (!disabled) {
          $$invalidate(13, rippleActive = true);
        }
      },
      deactivateRipple() {
        $$invalidate(13, rippleActive = false);
      }
    };
    dispatch(element2, "SMUIGenericInput:mount", accessor);
    instance2.init();
    return () => {
      dispatch(element2, "SMUIGenericInput:unmount", accessor);
      instance2.destroy();
    };
  });
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(11, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(11, internalClasses[className2] = false, internalClasses);
    }
  }
  function addStyle(name, value2) {
    if (internalStyles[name] != value2) {
      if (value2 === "" || value2 == null) {
        delete internalStyles[name];
        $$invalidate(12, internalStyles);
      } else {
        $$invalidate(12, internalStyles[name] = value2, internalStyles);
      }
    }
  }
  function getId() {
    return inputProps && inputProps.id;
  }
  function getElement() {
    return element2;
  }
  const $$binding_groups = [[]];
  function blur_handler(event) {
    bubble.call(this, $$self, event);
  }
  function focus_handler(event) {
    bubble.call(this, $$self, event);
  }
  function input_change_handler() {
    group = this.__value;
    $$invalidate(1, group);
  }
  function div4_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(10, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(20, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(2, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(3, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(4, style = $$new_props.style);
    if ("disabled" in $$new_props)
      $$invalidate(0, disabled = $$new_props.disabled);
    if ("touch" in $$new_props)
      $$invalidate(5, touch = $$new_props.touch);
    if ("group" in $$new_props)
      $$invalidate(1, group = $$new_props.group);
    if ("value" in $$new_props)
      $$invalidate(6, value = $$new_props.value);
    if ("valueKey" in $$new_props)
      $$invalidate(7, valueKey = $$new_props.valueKey);
    if ("input$use" in $$new_props)
      $$invalidate(8, input$use = $$new_props.input$use);
    if ("input$class" in $$new_props)
      $$invalidate(9, input$class = $$new_props.input$class);
  };
  return [
    disabled,
    group,
    use,
    className,
    style,
    touch,
    value,
    valueKey,
    input$use,
    input$class,
    element2,
    internalClasses,
    internalStyles,
    rippleActive,
    forwardEvents,
    isUninitializedValue,
    inputProps,
    addClass,
    removeClass,
    addStyle,
    $$restProps,
    getId,
    getElement,
    blur_handler,
    focus_handler,
    input_change_handler,
    $$binding_groups,
    div4_binding
  ];
}
class Radio extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance_1$6, create_fragment$v, safe_not_equal, {
      use: 2,
      class: 3,
      style: 4,
      disabled: 0,
      touch: 5,
      group: 1,
      value: 6,
      valueKey: 7,
      input$use: 8,
      input$class: 9,
      getId: 21,
      getElement: 22
    });
  }
  get getId() {
    return this.$$.ctx[21];
  }
  get getElement() {
    return this.$$.ctx[22];
  }
}
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var cssClasses$4 = {
  ACTIVATED: "mdc-select--activated",
  DISABLED: "mdc-select--disabled",
  FOCUSED: "mdc-select--focused",
  INVALID: "mdc-select--invalid",
  MENU_INVALID: "mdc-select__menu--invalid",
  OUTLINED: "mdc-select--outlined",
  REQUIRED: "mdc-select--required",
  ROOT: "mdc-select",
  WITH_LEADING_ICON: "mdc-select--with-leading-icon"
};
var strings$4 = {
  ARIA_CONTROLS: "aria-controls",
  ARIA_DESCRIBEDBY: "aria-describedby",
  ARIA_SELECTED_ATTR: "aria-selected",
  CHANGE_EVENT: "MDCSelect:change",
  HIDDEN_INPUT_SELECTOR: 'input[type="hidden"]',
  LABEL_SELECTOR: ".mdc-floating-label",
  LEADING_ICON_SELECTOR: ".mdc-select__icon",
  LINE_RIPPLE_SELECTOR: ".mdc-line-ripple",
  MENU_SELECTOR: ".mdc-select__menu",
  OUTLINE_SELECTOR: ".mdc-notched-outline",
  SELECTED_TEXT_SELECTOR: ".mdc-select__selected-text",
  SELECT_ANCHOR_SELECTOR: ".mdc-select__anchor",
  VALUE_ATTR: "data-value"
};
var numbers$3 = {
  LABEL_SCALE: 0.75,
  UNSET_INDEX: -1,
  CLICK_DEBOUNCE_TIMEOUT_MS: 330
};
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCSelectFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSelectFoundation2, _super);
    function MDCSelectFoundation2(adapter, foundationMap) {
      if (foundationMap === void 0) {
        foundationMap = {};
      }
      var _this = _super.call(this, __assign(__assign({}, MDCSelectFoundation2.defaultAdapter), adapter)) || this;
      _this.disabled = false;
      _this.isMenuOpen = false;
      _this.useDefaultValidation = true;
      _this.customValidity = true;
      _this.lastSelectedIndex = numbers$3.UNSET_INDEX;
      _this.clickDebounceTimeout = 0;
      _this.recentlyClicked = false;
      _this.leadingIcon = foundationMap.leadingIcon;
      _this.helperText = foundationMap.helperText;
      return _this;
    }
    Object.defineProperty(MDCSelectFoundation2, "cssClasses", {
      get: function() {
        return cssClasses$4;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelectFoundation2, "numbers", {
      get: function() {
        return numbers$3;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelectFoundation2, "strings", {
      get: function() {
        return strings$4;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelectFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCSelectAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          activateBottomLine: function() {
            return void 0;
          },
          deactivateBottomLine: function() {
            return void 0;
          },
          getSelectedIndex: function() {
            return -1;
          },
          setSelectedIndex: function() {
            return void 0;
          },
          hasLabel: function() {
            return false;
          },
          floatLabel: function() {
            return void 0;
          },
          getLabelWidth: function() {
            return 0;
          },
          setLabelRequired: function() {
            return void 0;
          },
          hasOutline: function() {
            return false;
          },
          notchOutline: function() {
            return void 0;
          },
          closeOutline: function() {
            return void 0;
          },
          setRippleCenter: function() {
            return void 0;
          },
          notifyChange: function() {
            return void 0;
          },
          setSelectedText: function() {
            return void 0;
          },
          isSelectAnchorFocused: function() {
            return false;
          },
          getSelectAnchorAttr: function() {
            return "";
          },
          setSelectAnchorAttr: function() {
            return void 0;
          },
          removeSelectAnchorAttr: function() {
            return void 0;
          },
          addMenuClass: function() {
            return void 0;
          },
          removeMenuClass: function() {
            return void 0;
          },
          openMenu: function() {
            return void 0;
          },
          closeMenu: function() {
            return void 0;
          },
          getAnchorElement: function() {
            return null;
          },
          setMenuAnchorElement: function() {
            return void 0;
          },
          setMenuAnchorCorner: function() {
            return void 0;
          },
          setMenuWrapFocus: function() {
            return void 0;
          },
          focusMenuItemAtIndex: function() {
            return void 0;
          },
          getMenuItemCount: function() {
            return 0;
          },
          getMenuItemValues: function() {
            return [];
          },
          getMenuItemTextAtIndex: function() {
            return "";
          },
          isTypeaheadInProgress: function() {
            return false;
          },
          typeaheadMatchItem: function() {
            return -1;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSelectFoundation2.prototype.getSelectedIndex = function() {
      return this.adapter.getSelectedIndex();
    };
    MDCSelectFoundation2.prototype.setSelectedIndex = function(index2, closeMenu, skipNotify) {
      if (closeMenu === void 0) {
        closeMenu = false;
      }
      if (skipNotify === void 0) {
        skipNotify = false;
      }
      if (index2 >= this.adapter.getMenuItemCount()) {
        return;
      }
      if (index2 === numbers$3.UNSET_INDEX) {
        this.adapter.setSelectedText("");
      } else {
        this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index2).trim());
      }
      this.adapter.setSelectedIndex(index2);
      if (closeMenu) {
        this.adapter.closeMenu();
      }
      if (!skipNotify && this.lastSelectedIndex !== index2) {
        this.handleChange();
      }
      this.lastSelectedIndex = index2;
    };
    MDCSelectFoundation2.prototype.setValue = function(value, skipNotify) {
      if (skipNotify === void 0) {
        skipNotify = false;
      }
      var index2 = this.adapter.getMenuItemValues().indexOf(value);
      this.setSelectedIndex(
        index2,
        /** closeMenu */
        false,
        skipNotify
      );
    };
    MDCSelectFoundation2.prototype.getValue = function() {
      var index2 = this.adapter.getSelectedIndex();
      var menuItemValues = this.adapter.getMenuItemValues();
      return index2 !== numbers$3.UNSET_INDEX ? menuItemValues[index2] : "";
    };
    MDCSelectFoundation2.prototype.getDisabled = function() {
      return this.disabled;
    };
    MDCSelectFoundation2.prototype.setDisabled = function(isDisabled) {
      this.disabled = isDisabled;
      if (this.disabled) {
        this.adapter.addClass(cssClasses$4.DISABLED);
        this.adapter.closeMenu();
      } else {
        this.adapter.removeClass(cssClasses$4.DISABLED);
      }
      if (this.leadingIcon) {
        this.leadingIcon.setDisabled(this.disabled);
      }
      if (this.disabled) {
        this.adapter.removeSelectAnchorAttr("tabindex");
      } else {
        this.adapter.setSelectAnchorAttr("tabindex", "0");
      }
      this.adapter.setSelectAnchorAttr("aria-disabled", this.disabled.toString());
    };
    MDCSelectFoundation2.prototype.openMenu = function() {
      this.adapter.addClass(cssClasses$4.ACTIVATED);
      this.adapter.openMenu();
      this.isMenuOpen = true;
      this.adapter.setSelectAnchorAttr("aria-expanded", "true");
    };
    MDCSelectFoundation2.prototype.setHelperTextContent = function(content) {
      if (this.helperText) {
        this.helperText.setContent(content);
      }
    };
    MDCSelectFoundation2.prototype.layout = function() {
      if (this.adapter.hasLabel()) {
        var optionHasValue = this.getValue().length > 0;
        var isFocused = this.adapter.hasClass(cssClasses$4.FOCUSED);
        var shouldFloatAndNotch = optionHasValue || isFocused;
        var isRequired = this.adapter.hasClass(cssClasses$4.REQUIRED);
        this.notchOutline(shouldFloatAndNotch);
        this.adapter.floatLabel(shouldFloatAndNotch);
        this.adapter.setLabelRequired(isRequired);
      }
    };
    MDCSelectFoundation2.prototype.layoutOptions = function() {
      var menuItemValues = this.adapter.getMenuItemValues();
      var selectedIndex = menuItemValues.indexOf(this.getValue());
      this.setSelectedIndex(
        selectedIndex,
        /** closeMenu */
        false,
        /** skipNotify */
        true
      );
    };
    MDCSelectFoundation2.prototype.handleMenuOpened = function() {
      if (this.adapter.getMenuItemValues().length === 0) {
        return;
      }
      var selectedIndex = this.getSelectedIndex();
      var focusItemIndex = selectedIndex >= 0 ? selectedIndex : 0;
      this.adapter.focusMenuItemAtIndex(focusItemIndex);
    };
    MDCSelectFoundation2.prototype.handleMenuClosing = function() {
      this.adapter.setSelectAnchorAttr("aria-expanded", "false");
    };
    MDCSelectFoundation2.prototype.handleMenuClosed = function() {
      this.adapter.removeClass(cssClasses$4.ACTIVATED);
      this.isMenuOpen = false;
      if (!this.adapter.isSelectAnchorFocused()) {
        this.blur();
      }
    };
    MDCSelectFoundation2.prototype.handleChange = function() {
      this.layout();
      this.adapter.notifyChange(this.getValue());
      var isRequired = this.adapter.hasClass(cssClasses$4.REQUIRED);
      if (isRequired && this.useDefaultValidation) {
        this.setValid(this.isValid());
      }
    };
    MDCSelectFoundation2.prototype.handleMenuItemAction = function(index2) {
      this.setSelectedIndex(
        index2,
        /** closeMenu */
        true
      );
    };
    MDCSelectFoundation2.prototype.handleFocus = function() {
      this.adapter.addClass(cssClasses$4.FOCUSED);
      this.layout();
      this.adapter.activateBottomLine();
    };
    MDCSelectFoundation2.prototype.handleBlur = function() {
      if (this.isMenuOpen) {
        return;
      }
      this.blur();
    };
    MDCSelectFoundation2.prototype.handleClick = function(normalizedX) {
      if (this.disabled || this.recentlyClicked) {
        return;
      }
      this.setClickDebounceTimeout();
      if (this.isMenuOpen) {
        this.adapter.closeMenu();
        return;
      }
      this.adapter.setRippleCenter(normalizedX);
      this.openMenu();
    };
    MDCSelectFoundation2.prototype.handleKeydown = function(event) {
      if (this.isMenuOpen || !this.adapter.hasClass(cssClasses$4.FOCUSED)) {
        return;
      }
      var isEnter = normalizeKey(event) === KEY.ENTER;
      var isSpace = normalizeKey(event) === KEY.SPACEBAR;
      var arrowUp = normalizeKey(event) === KEY.ARROW_UP;
      var arrowDown = normalizeKey(event) === KEY.ARROW_DOWN;
      var isModifier = event.ctrlKey || event.metaKey;
      if (!isModifier && (!isSpace && event.key && event.key.length === 1 || isSpace && this.adapter.isTypeaheadInProgress())) {
        var key = isSpace ? " " : event.key;
        var typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.getSelectedIndex());
        if (typeaheadNextIndex >= 0) {
          this.setSelectedIndex(typeaheadNextIndex);
        }
        event.preventDefault();
        return;
      }
      if (!isEnter && !isSpace && !arrowUp && !arrowDown) {
        return;
      }
      this.openMenu();
      event.preventDefault();
    };
    MDCSelectFoundation2.prototype.notchOutline = function(openNotch) {
      if (!this.adapter.hasOutline()) {
        return;
      }
      var isFocused = this.adapter.hasClass(cssClasses$4.FOCUSED);
      if (openNotch) {
        var labelScale = numbers$3.LABEL_SCALE;
        var labelWidth = this.adapter.getLabelWidth() * labelScale;
        this.adapter.notchOutline(labelWidth);
      } else if (!isFocused) {
        this.adapter.closeOutline();
      }
    };
    MDCSelectFoundation2.prototype.setLeadingIconAriaLabel = function(label) {
      if (this.leadingIcon) {
        this.leadingIcon.setAriaLabel(label);
      }
    };
    MDCSelectFoundation2.prototype.setLeadingIconContent = function(content) {
      if (this.leadingIcon) {
        this.leadingIcon.setContent(content);
      }
    };
    MDCSelectFoundation2.prototype.getUseDefaultValidation = function() {
      return this.useDefaultValidation;
    };
    MDCSelectFoundation2.prototype.setUseDefaultValidation = function(useDefaultValidation) {
      this.useDefaultValidation = useDefaultValidation;
    };
    MDCSelectFoundation2.prototype.setValid = function(isValid2) {
      if (!this.useDefaultValidation) {
        this.customValidity = isValid2;
      }
      this.adapter.setSelectAnchorAttr("aria-invalid", (!isValid2).toString());
      if (isValid2) {
        this.adapter.removeClass(cssClasses$4.INVALID);
        this.adapter.removeMenuClass(cssClasses$4.MENU_INVALID);
      } else {
        this.adapter.addClass(cssClasses$4.INVALID);
        this.adapter.addMenuClass(cssClasses$4.MENU_INVALID);
      }
      this.syncHelperTextValidity(isValid2);
    };
    MDCSelectFoundation2.prototype.isValid = function() {
      if (this.useDefaultValidation && this.adapter.hasClass(cssClasses$4.REQUIRED) && !this.adapter.hasClass(cssClasses$4.DISABLED)) {
        return this.getSelectedIndex() !== numbers$3.UNSET_INDEX && (this.getSelectedIndex() !== 0 || Boolean(this.getValue()));
      }
      return this.customValidity;
    };
    MDCSelectFoundation2.prototype.setRequired = function(isRequired) {
      if (isRequired) {
        this.adapter.addClass(cssClasses$4.REQUIRED);
      } else {
        this.adapter.removeClass(cssClasses$4.REQUIRED);
      }
      this.adapter.setSelectAnchorAttr("aria-required", isRequired.toString());
      this.adapter.setLabelRequired(isRequired);
    };
    MDCSelectFoundation2.prototype.getRequired = function() {
      return this.adapter.getSelectAnchorAttr("aria-required") === "true";
    };
    MDCSelectFoundation2.prototype.init = function() {
      var anchorEl = this.adapter.getAnchorElement();
      if (anchorEl) {
        this.adapter.setMenuAnchorElement(anchorEl);
        this.adapter.setMenuAnchorCorner(Corner.BOTTOM_START);
      }
      this.adapter.setMenuWrapFocus(false);
      this.setDisabled(this.adapter.hasClass(cssClasses$4.DISABLED));
      this.syncHelperTextValidity(!this.adapter.hasClass(cssClasses$4.INVALID));
      this.layout();
      this.layoutOptions();
    };
    MDCSelectFoundation2.prototype.blur = function() {
      this.adapter.removeClass(cssClasses$4.FOCUSED);
      this.layout();
      this.adapter.deactivateBottomLine();
      var isRequired = this.adapter.hasClass(cssClasses$4.REQUIRED);
      if (isRequired && this.useDefaultValidation) {
        this.setValid(this.isValid());
      }
    };
    MDCSelectFoundation2.prototype.syncHelperTextValidity = function(isValid2) {
      if (!this.helperText) {
        return;
      }
      this.helperText.setValidity(isValid2);
      var helperTextVisible = this.helperText.isVisible();
      var helperTextId = this.helperText.getId();
      if (helperTextVisible && helperTextId) {
        this.adapter.setSelectAnchorAttr(strings$4.ARIA_DESCRIBEDBY, helperTextId);
      } else {
        this.adapter.removeSelectAnchorAttr(strings$4.ARIA_DESCRIBEDBY);
      }
    };
    MDCSelectFoundation2.prototype.setClickDebounceTimeout = function() {
      var _this = this;
      clearTimeout(this.clickDebounceTimeout);
      this.clickDebounceTimeout = setTimeout(function() {
        _this.recentlyClicked = false;
      }, numbers$3.CLICK_DEBOUNCE_TIMEOUT_MS);
      this.recentlyClicked = true;
    };
    return MDCSelectFoundation2;
  }(MDCFoundation)
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var strings$3 = {
  ARIA_HIDDEN: "aria-hidden",
  ROLE: "role"
};
var cssClasses$3 = {
  HELPER_TEXT_VALIDATION_MSG: "mdc-select-helper-text--validation-msg",
  HELPER_TEXT_VALIDATION_MSG_PERSISTENT: "mdc-select-helper-text--validation-msg-persistent"
};
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCSelectHelperTextFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSelectHelperTextFoundation2, _super);
    function MDCSelectHelperTextFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCSelectHelperTextFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCSelectHelperTextFoundation2, "cssClasses", {
      get: function() {
        return cssClasses$3;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelectHelperTextFoundation2, "strings", {
      get: function() {
        return strings$3;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelectHelperTextFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          setAttr: function() {
            return void 0;
          },
          getAttr: function() {
            return null;
          },
          removeAttr: function() {
            return void 0;
          },
          setContent: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSelectHelperTextFoundation2.prototype.getId = function() {
      return this.adapter.getAttr("id");
    };
    MDCSelectHelperTextFoundation2.prototype.isVisible = function() {
      return this.adapter.getAttr(strings$3.ARIA_HIDDEN) !== "true";
    };
    MDCSelectHelperTextFoundation2.prototype.setContent = function(content) {
      this.adapter.setContent(content);
    };
    MDCSelectHelperTextFoundation2.prototype.setValidation = function(isValidation) {
      if (isValidation) {
        this.adapter.addClass(cssClasses$3.HELPER_TEXT_VALIDATION_MSG);
      } else {
        this.adapter.removeClass(cssClasses$3.HELPER_TEXT_VALIDATION_MSG);
      }
    };
    MDCSelectHelperTextFoundation2.prototype.setValidationMsgPersistent = function(isPersistent) {
      if (isPersistent) {
        this.adapter.addClass(cssClasses$3.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
      } else {
        this.adapter.removeClass(cssClasses$3.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
      }
    };
    MDCSelectHelperTextFoundation2.prototype.getIsValidation = function() {
      return this.adapter.hasClass(cssClasses$3.HELPER_TEXT_VALIDATION_MSG);
    };
    MDCSelectHelperTextFoundation2.prototype.getIsValidationMsgPersistent = function() {
      return this.adapter.hasClass(cssClasses$3.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
    };
    MDCSelectHelperTextFoundation2.prototype.setValidity = function(selectIsValid) {
      var isValidationMsg = this.adapter.hasClass(cssClasses$3.HELPER_TEXT_VALIDATION_MSG);
      if (!isValidationMsg) {
        return;
      }
      var isPersistentValidationMsg = this.adapter.hasClass(cssClasses$3.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
      var msgShouldDisplay = !selectIsValid || isPersistentValidationMsg;
      if (msgShouldDisplay) {
        this.showToScreenReader();
        if (!selectIsValid) {
          this.adapter.setAttr(strings$3.ROLE, "alert");
        } else {
          this.adapter.removeAttr(strings$3.ROLE);
        }
        return;
      }
      this.adapter.removeAttr(strings$3.ROLE);
      this.hide();
    };
    MDCSelectHelperTextFoundation2.prototype.showToScreenReader = function() {
      this.adapter.removeAttr(strings$3.ARIA_HIDDEN);
    };
    MDCSelectHelperTextFoundation2.prototype.hide = function() {
      this.adapter.setAttr(strings$3.ARIA_HIDDEN, "true");
    };
    return MDCSelectHelperTextFoundation2;
  }(MDCFoundation)
);
function create_else_block$a(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*content*/
        ctx[8]
      );
    },
    l(nodes) {
      t2 = claim_text(
        nodes,
        /*content*/
        ctx[8]
      );
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*content*/
      256)
        set_data(
          t2,
          /*content*/
          ctx2[8]
        );
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block$m(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[13].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    null
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    l(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4096)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment$u(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let div_class_value;
  let div_aria_hidden_value;
  let useActions_action;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block$m, create_else_block$a];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*content*/
      ctx2[8] == null
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let div_levels = [
    {
      class: div_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-select-helper-text": true,
        "mdc-select-helper-text--validation-msg": (
          /*validationMsg*/
          ctx[4]
        ),
        "mdc-select-helper-text--validation-msg-persistent": (
          /*persistent*/
          ctx[3]
        ),
        .../*internalClasses*/
        ctx[6]
      })
    },
    {
      "aria-hidden": div_aria_hidden_value = /*persistent*/
      ctx[3] ? void 0 : "true"
    },
    { id: (
      /*id*/
      ctx[2]
    ) },
    /*internalAttrs*/
    ctx[7],
    /*$$restProps*/
    ctx[10]
  ];
  let div_data = {};
  for (let i2 = 0; i2 < div_levels.length; i2 += 1) {
    div_data = assign$1(div_data, div_levels[i2]);
  }
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true,
        "aria-hidden": true,
        id: true
      });
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_attributes(div, div_data);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      ctx[14](div);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            div,
            /*use*/
            ctx[0]
          )),
          action_destroyer(
            /*forwardEvents*/
            ctx[9].call(null, div)
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      set_attributes(div, div_data = get_spread_update(div_levels, [
        (!current || dirty & /*className, validationMsg, persistent, internalClasses*/
        90 && div_class_value !== (div_class_value = classMap({
          [
            /*className*/
            ctx2[1]
          ]: true,
          "mdc-select-helper-text": true,
          "mdc-select-helper-text--validation-msg": (
            /*validationMsg*/
            ctx2[4]
          ),
          "mdc-select-helper-text--validation-msg-persistent": (
            /*persistent*/
            ctx2[3]
          ),
          .../*internalClasses*/
          ctx2[6]
        }))) && { class: div_class_value },
        (!current || dirty & /*persistent*/
        8 && div_aria_hidden_value !== (div_aria_hidden_value = /*persistent*/
        ctx2[3] ? void 0 : "true")) && { "aria-hidden": div_aria_hidden_value },
        (!current || dirty & /*id*/
        4) && { id: (
          /*id*/
          ctx2[2]
        ) },
        dirty & /*internalAttrs*/
        128 && /*internalAttrs*/
        ctx2[7],
        dirty & /*$$restProps*/
        1024 && /*$$restProps*/
        ctx2[10]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[0]
        );
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      ctx[14](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
let counter$2 = 0;
function instance_1$5($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "id", "persistent", "validationMsg", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { id = "SMUI-select-helper-text-" + counter$2++ } = $$props;
  let { persistent = false } = $$props;
  let { validationMsg = false } = $$props;
  let element2;
  let instance2;
  let internalClasses = {};
  let internalAttrs = {};
  let content = void 0;
  onMount(() => {
    instance2 = new MDCSelectHelperTextFoundation({
      addClass,
      removeClass,
      hasClass,
      getAttr,
      setAttr: addAttr,
      removeAttr,
      setContent: (value) => {
        $$invalidate(8, content = value);
      }
    });
    if (id.startsWith("SMUI-select-helper-text-")) {
      dispatch(getElement(), "SMUISelectHelperText:id", id);
    }
    dispatch(getElement(), "SMUISelectHelperText:mount", instance2);
    instance2.init();
    return () => {
      dispatch(getElement(), "SMUISelectHelperText:unmount", instance2);
      instance2.destroy();
    };
  });
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(6, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(6, internalClasses[className2] = false, internalClasses);
    }
  }
  function getAttr(name) {
    var _a2;
    return name in internalAttrs ? (_a2 = internalAttrs[name]) !== null && _a2 !== void 0 ? _a2 : null : getElement().getAttribute(name);
  }
  function addAttr(name, value) {
    if (internalAttrs[name] !== value) {
      $$invalidate(7, internalAttrs[name] = value, internalAttrs);
    }
  }
  function removeAttr(name) {
    if (!(name in internalAttrs) || internalAttrs[name] != null) {
      $$invalidate(7, internalAttrs[name] = void 0, internalAttrs);
    }
  }
  function getElement() {
    return element2;
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(5, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("id" in $$new_props)
      $$invalidate(2, id = $$new_props.id);
    if ("persistent" in $$new_props)
      $$invalidate(3, persistent = $$new_props.persistent);
    if ("validationMsg" in $$new_props)
      $$invalidate(4, validationMsg = $$new_props.validationMsg);
    if ("$$scope" in $$new_props)
      $$invalidate(12, $$scope = $$new_props.$$scope);
  };
  return [
    use,
    className,
    id,
    persistent,
    validationMsg,
    element2,
    internalClasses,
    internalAttrs,
    content,
    forwardEvents,
    $$restProps,
    getElement,
    $$scope,
    slots,
    div_binding
  ];
}
class HelperText extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance_1$5, create_fragment$u, safe_not_equal, {
      use: 0,
      class: 1,
      id: 2,
      persistent: 3,
      validationMsg: 4,
      getElement: 11
    });
  }
  get getElement() {
    return this.$$.ctx[11];
  }
}
const get_helperText_slot_changes = (dirty) => ({});
const get_helperText_slot_context = (ctx) => ({});
const get_leadingIcon_slot_changes = (dirty) => ({});
const get_leadingIcon_slot_context = (ctx) => ({});
const get_label_slot_changes_1 = (dirty) => ({});
const get_label_slot_context_1 = (ctx) => ({});
const get_label_slot_changes$1 = (dirty) => ({});
const get_label_slot_context$1 = (ctx) => ({});
function create_if_block_6(ctx) {
  let input;
  let input_levels = [
    { type: "hidden" },
    { required: (
      /*required*/
      ctx[10]
    ) },
    { disabled: (
      /*disabled*/
      ctx[6]
    ) },
    { value: (
      /*value*/
      ctx[0]
    ) },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "input$"
    )
  ];
  let input_data = {};
  for (let i2 = 0; i2 < input_levels.length; i2 += 1) {
    input_data = assign$1(input_data, input_levels[i2]);
  }
  return {
    c() {
      input = element("input");
      this.h();
    },
    l(nodes) {
      input = claim_element(nodes, "INPUT", { type: true });
      this.h();
    },
    h() {
      set_attributes(input, input_data);
    },
    m(target, anchor) {
      insert_hydration(target, input, anchor);
      if (input.autofocus)
        input.focus();
    },
    p(ctx2, dirty) {
      set_attributes(input, input_data = get_spread_update(input_levels, [
        { type: "hidden" },
        dirty[0] & /*required*/
        1024 && { required: (
          /*required*/
          ctx2[10]
        ) },
        dirty[0] & /*disabled*/
        64 && { disabled: (
          /*disabled*/
          ctx2[6]
        ) },
        dirty[0] & /*value*/
        1 && { value: (
          /*value*/
          ctx2[0]
        ) },
        dirty[1] & /*$$restProps*/
        4194304 && prefixFilter(
          /*$$restProps*/
          ctx2[53],
          "input$"
        )
      ]));
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
    }
  };
}
function create_if_block_5$3(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      children(span).forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "mdc-select__ripple");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_4$4(ctx) {
  let floatinglabel;
  let current;
  const floatinglabel_spread_levels = [
    { id: (
      /*inputId*/
      ctx[11] + "-smui-label"
    ) },
    {
      floatAbove: (
        /*$selectedTextStore*/
        ctx[42] !== ""
      )
    },
    { required: (
      /*required*/
      ctx[10]
    ) },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "label$"
    )
  ];
  let floatinglabel_props = {
    $$slots: { default: [create_default_slot_5$7] },
    $$scope: { ctx }
  };
  for (let i2 = 0; i2 < floatinglabel_spread_levels.length; i2 += 1) {
    floatinglabel_props = assign$1(floatinglabel_props, floatinglabel_spread_levels[i2]);
  }
  floatinglabel = new FloatingLabel({ props: floatinglabel_props });
  ctx[66](floatinglabel);
  return {
    c() {
      create_component(floatinglabel.$$.fragment);
    },
    l(nodes) {
      claim_component(floatinglabel.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(floatinglabel, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const floatinglabel_changes = dirty[0] & /*inputId, required*/
      3072 | dirty[1] & /*$selectedTextStore, $$restProps*/
      4196352 ? get_spread_update(floatinglabel_spread_levels, [
        dirty[0] & /*inputId*/
        2048 && { id: (
          /*inputId*/
          ctx2[11] + "-smui-label"
        ) },
        dirty[1] & /*$selectedTextStore*/
        2048 && {
          floatAbove: (
            /*$selectedTextStore*/
            ctx2[42] !== ""
          )
        },
        dirty[0] & /*required*/
        1024 && { required: (
          /*required*/
          ctx2[10]
        ) },
        dirty[1] & /*$$restProps*/
        4194304 && get_spread_object(prefixFilter(
          /*$$restProps*/
          ctx2[53],
          "label$"
        ))
      ]) : {};
      if (dirty[0] & /*label*/
      512 | dirty[2] & /*$$scope*/
      16777216) {
        floatinglabel_changes.$$scope = { dirty, ctx: ctx2 };
      }
      floatinglabel.$set(floatinglabel_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(floatinglabel.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(floatinglabel.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      ctx[66](null);
      destroy_component(floatinglabel, detaching);
    }
  };
}
function create_default_slot_5$7(ctx) {
  let t_value = (
    /*label*/
    (ctx[9] == null ? "" : (
      /*label*/
      ctx[9]
    )) + ""
  );
  let t2;
  let current;
  const label_slot_template = (
    /*#slots*/
    ctx[63].label
  );
  const label_slot = create_slot(
    label_slot_template,
    ctx,
    /*$$scope*/
    ctx[86],
    get_label_slot_context$1
  );
  return {
    c() {
      t2 = text(t_value);
      if (label_slot)
        label_slot.c();
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
      if (label_slot)
        label_slot.l(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
      if (label_slot) {
        label_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty[0] & /*label*/
      512) && t_value !== (t_value = /*label*/
      (ctx2[9] == null ? "" : (
        /*label*/
        ctx2[9]
      )) + ""))
        set_data(t2, t_value);
      if (label_slot) {
        if (label_slot.p && (!current || dirty[2] & /*$$scope*/
        16777216)) {
          update_slot_base(
            label_slot,
            label_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[86],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[86]
            ) : get_slot_changes(
              label_slot_template,
              /*$$scope*/
              ctx2[86],
              dirty,
              get_label_slot_changes$1
            ),
            get_label_slot_context$1
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(label_slot, local);
      current = true;
    },
    o(local) {
      transition_out(label_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      if (label_slot)
        label_slot.d(detaching);
    }
  };
}
function create_if_block_2$9(ctx) {
  let notchedoutline;
  let current;
  const notchedoutline_spread_levels = [
    {
      noLabel: (
        /*noLabel*/
        ctx[8] || /*label*/
        ctx[9] == null && !/*$$slots*/
        ctx[52].label
      )
    },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "outline$"
    )
  ];
  let notchedoutline_props = {
    $$slots: { default: [create_default_slot_3$7] },
    $$scope: { ctx }
  };
  for (let i2 = 0; i2 < notchedoutline_spread_levels.length; i2 += 1) {
    notchedoutline_props = assign$1(notchedoutline_props, notchedoutline_spread_levels[i2]);
  }
  notchedoutline = new NotchedOutline({ props: notchedoutline_props });
  ctx[68](notchedoutline);
  return {
    c() {
      create_component(notchedoutline.$$.fragment);
    },
    l(nodes) {
      claim_component(notchedoutline.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(notchedoutline, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const notchedoutline_changes = dirty[0] & /*noLabel, label*/
      768 | dirty[1] & /*$$slots, $$restProps*/
      6291456 ? get_spread_update(notchedoutline_spread_levels, [
        dirty[0] & /*noLabel, label*/
        768 | dirty[1] & /*$$slots*/
        2097152 && {
          noLabel: (
            /*noLabel*/
            ctx2[8] || /*label*/
            ctx2[9] == null && !/*$$slots*/
            ctx2[52].label
          )
        },
        dirty[1] & /*$$restProps*/
        4194304 && get_spread_object(prefixFilter(
          /*$$restProps*/
          ctx2[53],
          "outline$"
        ))
      ]) : {};
      if (dirty[0] & /*inputId, required, label, noLabel*/
      3840 | dirty[1] & /*$selectedTextStore, $$restProps, floatingLabel, $$slots*/
      6293760 | dirty[2] & /*$$scope*/
      16777216) {
        notchedoutline_changes.$$scope = { dirty, ctx: ctx2 };
      }
      notchedoutline.$set(notchedoutline_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(notchedoutline.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(notchedoutline.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      ctx[68](null);
      destroy_component(notchedoutline, detaching);
    }
  };
}
function create_if_block_3$7(ctx) {
  let floatinglabel;
  let current;
  const floatinglabel_spread_levels = [
    { id: (
      /*inputId*/
      ctx[11] + "-smui-label"
    ) },
    {
      floatAbove: (
        /*$selectedTextStore*/
        ctx[42] !== ""
      )
    },
    { required: (
      /*required*/
      ctx[10]
    ) },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "label$"
    )
  ];
  let floatinglabel_props = {
    $$slots: { default: [create_default_slot_4$7] },
    $$scope: { ctx }
  };
  for (let i2 = 0; i2 < floatinglabel_spread_levels.length; i2 += 1) {
    floatinglabel_props = assign$1(floatinglabel_props, floatinglabel_spread_levels[i2]);
  }
  floatinglabel = new FloatingLabel({ props: floatinglabel_props });
  ctx[67](floatinglabel);
  return {
    c() {
      create_component(floatinglabel.$$.fragment);
    },
    l(nodes) {
      claim_component(floatinglabel.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(floatinglabel, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const floatinglabel_changes = dirty[0] & /*inputId, required*/
      3072 | dirty[1] & /*$selectedTextStore, $$restProps*/
      4196352 ? get_spread_update(floatinglabel_spread_levels, [
        dirty[0] & /*inputId*/
        2048 && { id: (
          /*inputId*/
          ctx2[11] + "-smui-label"
        ) },
        dirty[1] & /*$selectedTextStore*/
        2048 && {
          floatAbove: (
            /*$selectedTextStore*/
            ctx2[42] !== ""
          )
        },
        dirty[0] & /*required*/
        1024 && { required: (
          /*required*/
          ctx2[10]
        ) },
        dirty[1] & /*$$restProps*/
        4194304 && get_spread_object(prefixFilter(
          /*$$restProps*/
          ctx2[53],
          "label$"
        ))
      ]) : {};
      if (dirty[0] & /*label*/
      512 | dirty[2] & /*$$scope*/
      16777216) {
        floatinglabel_changes.$$scope = { dirty, ctx: ctx2 };
      }
      floatinglabel.$set(floatinglabel_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(floatinglabel.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(floatinglabel.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      ctx[67](null);
      destroy_component(floatinglabel, detaching);
    }
  };
}
function create_default_slot_4$7(ctx) {
  let t_value = (
    /*label*/
    (ctx[9] == null ? "" : (
      /*label*/
      ctx[9]
    )) + ""
  );
  let t2;
  let current;
  const label_slot_template = (
    /*#slots*/
    ctx[63].label
  );
  const label_slot = create_slot(
    label_slot_template,
    ctx,
    /*$$scope*/
    ctx[86],
    get_label_slot_context_1
  );
  return {
    c() {
      t2 = text(t_value);
      if (label_slot)
        label_slot.c();
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
      if (label_slot)
        label_slot.l(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
      if (label_slot) {
        label_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty[0] & /*label*/
      512) && t_value !== (t_value = /*label*/
      (ctx2[9] == null ? "" : (
        /*label*/
        ctx2[9]
      )) + ""))
        set_data(t2, t_value);
      if (label_slot) {
        if (label_slot.p && (!current || dirty[2] & /*$$scope*/
        16777216)) {
          update_slot_base(
            label_slot,
            label_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[86],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[86]
            ) : get_slot_changes(
              label_slot_template,
              /*$$scope*/
              ctx2[86],
              dirty,
              get_label_slot_changes_1
            ),
            get_label_slot_context_1
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(label_slot, local);
      current = true;
    },
    o(local) {
      transition_out(label_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      if (label_slot)
        label_slot.d(detaching);
    }
  };
}
function create_default_slot_3$7(ctx) {
  let if_block_anchor;
  let current;
  let if_block = !/*noLabel*/
  ctx[8] && /*label*/
  (ctx[9] != null || /*$$slots*/
  ctx[52].label) && create_if_block_3$7(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (!/*noLabel*/
      ctx2[8] && /*label*/
      (ctx2[9] != null || /*$$slots*/
      ctx2[52].label)) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*noLabel, label*/
          768 | dirty[1] & /*$$slots*/
          2097152) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_3$7(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_1$d(ctx) {
  let lineripple;
  let current;
  const lineripple_spread_levels = [prefixFilter(
    /*$$restProps*/
    ctx[53],
    "ripple$"
  )];
  let lineripple_props = {};
  for (let i2 = 0; i2 < lineripple_spread_levels.length; i2 += 1) {
    lineripple_props = assign$1(lineripple_props, lineripple_spread_levels[i2]);
  }
  lineripple = new LineRipple({ props: lineripple_props });
  ctx[69](lineripple);
  return {
    c() {
      create_component(lineripple.$$.fragment);
    },
    l(nodes) {
      claim_component(lineripple.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(lineripple, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const lineripple_changes = dirty[1] & /*$$restProps*/
      4194304 ? get_spread_update(lineripple_spread_levels, [get_spread_object(prefixFilter(
        /*$$restProps*/
        ctx2[53],
        "ripple$"
      ))]) : {};
      lineripple.$set(lineripple_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(lineripple.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(lineripple.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      ctx[69](null);
      destroy_component(lineripple, detaching);
    }
  };
}
function create_default_slot_2$9(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[63].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[86],
    null
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    l(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[2] & /*$$scope*/
        16777216)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[86],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[86]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[86],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_default_slot_1$c(ctx) {
  let list_1;
  let updating_selectedIndex;
  let current;
  const list_1_spread_levels = [
    { role: "listbox" },
    { wrapFocus: (
      /*wrapFocus*/
      ctx[35]
    ) },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "list$"
    )
  ];
  function list_1_selectedIndex_binding(value) {
    ctx[74](value);
  }
  let list_1_props = {
    $$slots: { default: [create_default_slot_2$9] },
    $$scope: { ctx }
  };
  for (let i2 = 0; i2 < list_1_spread_levels.length; i2 += 1) {
    list_1_props = assign$1(list_1_props, list_1_spread_levels[i2]);
  }
  if (
    /*selectedIndex*/
    ctx[24] !== void 0
  ) {
    list_1_props.selectedIndex = /*selectedIndex*/
    ctx[24];
  }
  list_1 = new List({ props: list_1_props });
  binding_callbacks.push(() => bind(list_1, "selectedIndex", list_1_selectedIndex_binding));
  list_1.$on(
    "SMUIList:mount",
    /*SMUIList_mount_handler*/
    ctx[75]
  );
  return {
    c() {
      create_component(list_1.$$.fragment);
    },
    l(nodes) {
      claim_component(list_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_1_changes = dirty[1] & /*wrapFocus, $$restProps*/
      4194320 ? get_spread_update(list_1_spread_levels, [
        list_1_spread_levels[0],
        dirty[1] & /*wrapFocus*/
        16 && { wrapFocus: (
          /*wrapFocus*/
          ctx2[35]
        ) },
        dirty[1] & /*$$restProps*/
        4194304 && get_spread_object(prefixFilter(
          /*$$restProps*/
          ctx2[53],
          "list$"
        ))
      ]) : {};
      if (dirty[2] & /*$$scope*/
      16777216) {
        list_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_selectedIndex && dirty[0] & /*selectedIndex*/
      16777216) {
        updating_selectedIndex = true;
        list_1_changes.selectedIndex = /*selectedIndex*/
        ctx2[24];
        add_flush_callback(() => updating_selectedIndex = false);
      }
      list_1.$set(list_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_1, detaching);
    }
  };
}
function create_if_block$l(ctx) {
  let helpertext;
  let current;
  const helpertext_spread_levels = [prefixFilter(
    /*$$restProps*/
    ctx[53],
    "helperText$"
  )];
  let helpertext_props = {
    $$slots: { default: [create_default_slot$f] },
    $$scope: { ctx }
  };
  for (let i2 = 0; i2 < helpertext_spread_levels.length; i2 += 1) {
    helpertext_props = assign$1(helpertext_props, helpertext_spread_levels[i2]);
  }
  helpertext = new HelperText({ props: helpertext_props });
  helpertext.$on(
    "SMUISelectHelperText:id",
    /*SMUISelectHelperText_id_handler*/
    ctx[83]
  );
  helpertext.$on(
    "SMUISelectHelperText:mount",
    /*SMUISelectHelperText_mount_handler*/
    ctx[84]
  );
  helpertext.$on(
    "SMUISelectHelperText:unmount",
    /*SMUISelectHelperText_unmount_handler*/
    ctx[85]
  );
  return {
    c() {
      create_component(helpertext.$$.fragment);
    },
    l(nodes) {
      claim_component(helpertext.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(helpertext, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const helpertext_changes = dirty[1] & /*$$restProps*/
      4194304 ? get_spread_update(helpertext_spread_levels, [get_spread_object(prefixFilter(
        /*$$restProps*/
        ctx2[53],
        "helperText$"
      ))]) : {};
      if (dirty[2] & /*$$scope*/
      16777216) {
        helpertext_changes.$$scope = { dirty, ctx: ctx2 };
      }
      helpertext.$set(helpertext_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(helpertext.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(helpertext.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(helpertext, detaching);
    }
  };
}
function create_default_slot$f(ctx) {
  let current;
  const helperText_slot_template = (
    /*#slots*/
    ctx[63].helperText
  );
  const helperText_slot = create_slot(
    helperText_slot_template,
    ctx,
    /*$$scope*/
    ctx[86],
    get_helperText_slot_context
  );
  return {
    c() {
      if (helperText_slot)
        helperText_slot.c();
    },
    l(nodes) {
      if (helperText_slot)
        helperText_slot.l(nodes);
    },
    m(target, anchor) {
      if (helperText_slot) {
        helperText_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (helperText_slot) {
        if (helperText_slot.p && (!current || dirty[2] & /*$$scope*/
        16777216)) {
          update_slot_base(
            helperText_slot,
            helperText_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[86],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[86]
            ) : get_slot_changes(
              helperText_slot_template,
              /*$$scope*/
              ctx2[86],
              dirty,
              get_helperText_slot_changes
            ),
            get_helperText_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(helperText_slot, local);
      current = true;
    },
    o(local) {
      transition_out(helperText_slot, local);
      current = false;
    },
    d(detaching) {
      if (helperText_slot)
        helperText_slot.d(detaching);
    }
  };
}
function create_fragment$t(ctx) {
  let div1;
  let t0;
  let div0;
  let t1;
  let t2;
  let t3;
  let t4;
  let span1;
  let span0;
  let t5;
  let span0_id_value;
  let span0_class_value;
  let span0_aria_labelledby_value;
  let useActions_action;
  let span1_class_value;
  let useActions_action_1;
  let t6;
  let span2;
  let svg;
  let polygon0;
  let polygon1;
  let span2_class_value;
  let useActions_action_2;
  let t7;
  let div0_class_value;
  let div0_aria_required_value;
  let div0_aria_disabled_value;
  let useActions_action_3;
  let t8;
  let menu;
  let updating_open;
  let div1_class_value;
  let div1_style_value;
  let Ripple_action;
  let useActions_action_4;
  let t9;
  let if_block5_anchor;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*hiddenInput*/
    ctx[12] && create_if_block_6(ctx)
  );
  let if_block1 = (
    /*variant*/
    ctx[7] === "filled" && create_if_block_5$3()
  );
  let if_block2 = (
    /*variant*/
    ctx[7] !== "outlined" && !/*noLabel*/
    ctx[8] && /*label*/
    (ctx[9] != null || /*$$slots*/
    ctx[52].label) && create_if_block_4$4(ctx)
  );
  let if_block3 = (
    /*variant*/
    ctx[7] === "outlined" && create_if_block_2$9(ctx)
  );
  const leadingIcon_slot_template = (
    /*#slots*/
    ctx[63].leadingIcon
  );
  const leadingIcon_slot = create_slot(
    leadingIcon_slot_template,
    ctx,
    /*$$scope*/
    ctx[86],
    get_leadingIcon_slot_context
  );
  let span0_levels = [
    {
      id: span0_id_value = /*inputId*/
      ctx[11] + "-smui-selected-text"
    },
    {
      class: span0_class_value = classMap({
        [
          /*selectedText$class*/
          ctx[19]
        ]: true,
        "mdc-select__selected-text": true
      })
    },
    { role: "button" },
    { "aria-haspopup": "listbox" },
    {
      "aria-labelledby": span0_aria_labelledby_value = /*inputId*/
      ctx[11] + "-smui-label"
    },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "selectedText$"
    )
  ];
  let span_data_1 = {};
  for (let i2 = 0; i2 < span0_levels.length; i2 += 1) {
    span_data_1 = assign$1(span_data_1, span0_levels[i2]);
  }
  let span1_levels = [
    {
      class: span1_class_value = classMap({
        [
          /*selectedTextContainer$class*/
          ctx[17]
        ]: true,
        "mdc-select__selected-text-container": true
      })
    },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "selectedTextContainer$"
    )
  ];
  let span_data_2 = {};
  for (let i2 = 0; i2 < span1_levels.length; i2 += 1) {
    span_data_2 = assign$1(span_data_2, span1_levels[i2]);
  }
  let span2_levels = [
    {
      class: span2_class_value = classMap({
        [
          /*dropdownIcon$class*/
          ctx[21]
        ]: true,
        "mdc-select__dropdown-icon": true
      })
    },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "dropdownIcon$"
    )
  ];
  let span_data = {};
  for (let i2 = 0; i2 < span2_levels.length; i2 += 1) {
    span_data = assign$1(span_data, span2_levels[i2]);
  }
  let if_block4 = (
    /*variant*/
    ctx[7] !== "outlined" && /*ripple*/
    ctx[5] && create_if_block_1$d(ctx)
  );
  let div0_levels = [
    {
      class: div0_class_value = classMap({
        [
          /*anchor$class*/
          ctx[15]
        ]: true,
        "mdc-select__anchor": true
      })
    },
    {
      "aria-required": div0_aria_required_value = /*required*/
      ctx[10] ? "true" : void 0
    },
    {
      "aria-disabled": div0_aria_disabled_value = /*disabled*/
      ctx[6] ? "true" : void 0
    },
    { "aria-controls": (
      /*helperId*/
      ctx[30]
    ) },
    { "aria-describedby": (
      /*helperId*/
      ctx[30]
    ) },
    /*selectAnchorAttrs*/
    ctx[29],
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "anchor$"
    )
  ];
  let div_data = {};
  for (let i2 = 0; i2 < div0_levels.length; i2 += 1) {
    div_data = assign$1(div_data, div0_levels[i2]);
  }
  const menu_spread_levels = [
    {
      class: classMap({
        [
          /*menu$class*/
          ctx[22]
        ]: true,
        "mdc-select__menu": true,
        .../*menuClasses*/
        ctx[32]
      })
    },
    { fullWidth: true },
    { anchor: false },
    { anchorElement: (
      /*anchorElement*/
      ctx[33]
    ) },
    { anchorCorner: (
      /*anchorCorner*/
      ctx[34]
    ) },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "menu$"
    )
  ];
  function menu_open_binding(value) {
    ctx[76](value);
  }
  let menu_props = {
    $$slots: { default: [create_default_slot_1$c] },
    $$scope: { ctx }
  };
  for (let i2 = 0; i2 < menu_spread_levels.length; i2 += 1) {
    menu_props = assign$1(menu_props, menu_spread_levels[i2]);
  }
  if (
    /*menuOpen*/
    ctx[31] !== void 0
  ) {
    menu_props.open = /*menuOpen*/
    ctx[31];
  }
  menu = new Menu({ props: menu_props });
  binding_callbacks.push(() => bind(menu, "open", menu_open_binding));
  menu.$on(
    "SMUIMenu:selected",
    /*SMUIMenu_selected_handler*/
    ctx[77]
  );
  menu.$on(
    "SMUIMenuSurface:closing",
    /*SMUIMenuSurface_closing_handler*/
    ctx[78]
  );
  menu.$on(
    "SMUIMenuSurface:closed",
    /*SMUIMenuSurface_closed_handler*/
    ctx[79]
  );
  menu.$on(
    "SMUIMenuSurface:opened",
    /*SMUIMenuSurface_opened_handler*/
    ctx[80]
  );
  let div1_levels = [
    {
      class: div1_class_value = classMap({
        [
          /*className*/
          ctx[3]
        ]: true,
        "mdc-select": true,
        "mdc-select--required": (
          /*required*/
          ctx[10]
        ),
        "mdc-select--disabled": (
          /*disabled*/
          ctx[6]
        ),
        "mdc-select--filled": (
          /*variant*/
          ctx[7] === "filled"
        ),
        "mdc-select--outlined": (
          /*variant*/
          ctx[7] === "outlined"
        ),
        "smui-select--standard": (
          /*variant*/
          ctx[7] === "standard"
        ),
        "mdc-select--with-leading-icon": (
          /*isUninitializedValue*/
          ctx[44](
            /*withLeadingIcon*/
            ctx[13]
          ) ? (
            /*$$slots*/
            ctx[52].leadingIcon
          ) : (
            /*withLeadingIcon*/
            ctx[13]
          )
        ),
        "mdc-select--no-label": (
          /*noLabel*/
          ctx[8] || /*label*/
          ctx[9] == null && !/*$$slots*/
          ctx[52].label
        ),
        "mdc-select--invalid": (
          /*invalid*/
          ctx[1]
        ),
        "mdc-select--activated": (
          /*menuOpen*/
          ctx[31]
        ),
        "mdc-data-table__pagination-rows-per-page-select": (
          /*context*/
          ctx[45] === "data-table:pagination"
        ),
        .../*internalClasses*/
        ctx[26]
      })
    },
    {
      style: div1_style_value = Object.entries(
        /*internalStyles*/
        ctx[27]
      ).map(func$3).concat([
        /*style*/
        ctx[4]
      ]).join(" ")
    },
    exclude(
      /*$$restProps*/
      ctx[53],
      [
        "input$",
        "anchor$",
        "label$",
        "outline$",
        "selectedTextContainer$",
        "selectedText$",
        "dropdownIcon$",
        "ripple$",
        "menu$",
        "list$",
        "helperText$"
      ]
    )
  ];
  let div_data_1 = {};
  for (let i2 = 0; i2 < div1_levels.length; i2 += 1) {
    div_data_1 = assign$1(div_data_1, div1_levels[i2]);
  }
  let if_block5 = (
    /*$$slots*/
    ctx[52].helperText && create_if_block$l(ctx)
  );
  return {
    c() {
      div1 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div0 = element("div");
      if (if_block1)
        if_block1.c();
      t1 = space();
      if (if_block2)
        if_block2.c();
      t2 = space();
      if (if_block3)
        if_block3.c();
      t3 = space();
      if (leadingIcon_slot)
        leadingIcon_slot.c();
      t4 = space();
      span1 = element("span");
      span0 = element("span");
      t5 = text(
        /*$selectedTextStore*/
        ctx[42]
      );
      t6 = space();
      span2 = element("span");
      svg = svg_element("svg");
      polygon0 = svg_element("polygon");
      polygon1 = svg_element("polygon");
      t7 = space();
      if (if_block4)
        if_block4.c();
      t8 = space();
      create_component(menu.$$.fragment);
      t9 = space();
      if (if_block5)
        if_block5.c();
      if_block5_anchor = empty();
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true, style: true });
      var div1_nodes = children(div1);
      if (if_block0)
        if_block0.l(div1_nodes);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", {
        class: true,
        "aria-required": true,
        "aria-disabled": true,
        "aria-controls": true,
        "aria-describedby": true
      });
      var div0_nodes = children(div0);
      if (if_block1)
        if_block1.l(div0_nodes);
      t1 = claim_space(div0_nodes);
      if (if_block2)
        if_block2.l(div0_nodes);
      t2 = claim_space(div0_nodes);
      if (if_block3)
        if_block3.l(div0_nodes);
      t3 = claim_space(div0_nodes);
      if (leadingIcon_slot)
        leadingIcon_slot.l(div0_nodes);
      t4 = claim_space(div0_nodes);
      span1 = claim_element(div0_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      span0 = claim_element(span1_nodes, "SPAN", {
        id: true,
        class: true,
        role: true,
        "aria-haspopup": true,
        "aria-labelledby": true
      });
      var span0_nodes = children(span0);
      t5 = claim_text(
        span0_nodes,
        /*$selectedTextStore*/
        ctx[42]
      );
      span0_nodes.forEach(detach);
      span1_nodes.forEach(detach);
      t6 = claim_space(div0_nodes);
      span2 = claim_element(div0_nodes, "SPAN", { class: true });
      var span2_nodes = children(span2);
      svg = claim_svg_element(span2_nodes, "svg", {
        class: true,
        viewBox: true,
        focusable: true
      });
      var svg_nodes = children(svg);
      polygon0 = claim_svg_element(svg_nodes, "polygon", {
        class: true,
        stroke: true,
        "fill-rule": true,
        points: true
      });
      children(polygon0).forEach(detach);
      polygon1 = claim_svg_element(svg_nodes, "polygon", {
        class: true,
        stroke: true,
        "fill-rule": true,
        points: true
      });
      children(polygon1).forEach(detach);
      svg_nodes.forEach(detach);
      span2_nodes.forEach(detach);
      t7 = claim_space(div0_nodes);
      if (if_block4)
        if_block4.l(div0_nodes);
      div0_nodes.forEach(detach);
      t8 = claim_space(div1_nodes);
      claim_component(menu.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      t9 = claim_space(nodes);
      if (if_block5)
        if_block5.l(nodes);
      if_block5_anchor = empty();
      this.h();
    },
    h() {
      set_attributes(span0, span_data_1);
      set_attributes(span1, span_data_2);
      attr(polygon0, "class", "mdc-select__dropdown-icon-inactive");
      attr(polygon0, "stroke", "none");
      attr(polygon0, "fill-rule", "evenodd");
      attr(polygon0, "points", "7 10 12 15 17 10");
      attr(polygon1, "class", "mdc-select__dropdown-icon-active");
      attr(polygon1, "stroke", "none");
      attr(polygon1, "fill-rule", "evenodd");
      attr(polygon1, "points", "7 15 12 10 17 15");
      attr(svg, "class", "mdc-select__dropdown-icon-graphic");
      attr(svg, "viewBox", "7 10 10 5");
      attr(svg, "focusable", "false");
      set_attributes(span2, span_data);
      set_attributes(div0, div_data);
      set_attributes(div1, div_data_1);
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      if (if_block0)
        if_block0.m(div1, null);
      append_hydration(div1, t0);
      append_hydration(div1, div0);
      if (if_block1)
        if_block1.m(div0, null);
      append_hydration(div0, t1);
      if (if_block2)
        if_block2.m(div0, null);
      append_hydration(div0, t2);
      if (if_block3)
        if_block3.m(div0, null);
      append_hydration(div0, t3);
      if (leadingIcon_slot) {
        leadingIcon_slot.m(div0, null);
      }
      append_hydration(div0, t4);
      append_hydration(div0, span1);
      append_hydration(span1, span0);
      append_hydration(span0, t5);
      append_hydration(div0, t6);
      append_hydration(div0, span2);
      append_hydration(span2, svg);
      append_hydration(svg, polygon0);
      append_hydration(svg, polygon1);
      append_hydration(div0, t7);
      if (if_block4)
        if_block4.m(div0, null);
      ctx[70](div0);
      append_hydration(div1, t8);
      mount_component(menu, div1, null);
      ctx[81](div1);
      insert_hydration(target, t9, anchor);
      if (if_block5)
        if_block5.m(target, anchor);
      insert_hydration(target, if_block5_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            span0,
            /*selectedText$use*/
            ctx[18]
          )),
          action_destroyer(useActions_action_1 = useActions.call(
            null,
            span1,
            /*selectedTextContainer$use*/
            ctx[16]
          )),
          action_destroyer(useActions_action_2 = useActions.call(
            null,
            span2,
            /*dropdownIcon$use*/
            ctx[20]
          )),
          action_destroyer(useActions_action_3 = useActions.call(
            null,
            div0,
            /*anchor$use*/
            ctx[14]
          )),
          listen(
            div0,
            "focus",
            /*focus_handler_1*/
            ctx[71]
          ),
          listen(
            div0,
            "blur",
            /*blur_handler_1*/
            ctx[72]
          ),
          listen(
            div0,
            "click",
            /*click_handler*/
            ctx[73]
          ),
          listen(div0, "keydown", function() {
            if (is_function(
              /*instance*/
              ctx[23] && /*instance*/
              ctx[23].handleKeydown.bind(
                /*instance*/
                ctx[23]
              )
            ))
              /*instance*/
              (ctx[23] && /*instance*/
              ctx[23].handleKeydown.bind(
                /*instance*/
                ctx[23]
              )).apply(this, arguments);
          }),
          listen(
            div0,
            "focus",
            /*focus_handler*/
            ctx[64]
          ),
          listen(
            div0,
            "blur",
            /*blur_handler*/
            ctx[65]
          ),
          action_destroyer(Ripple_action = Ripple.call(null, div1, {
            ripple: (
              /*variant*/
              ctx[7] === "filled"
            ),
            unbounded: false,
            addClass: (
              /*addClass*/
              ctx[49]
            ),
            removeClass: (
              /*removeClass*/
              ctx[50]
            ),
            addStyle: (
              /*addStyle*/
              ctx[51]
            )
          })),
          action_destroyer(Anchor.call(null, div1, {
            addClass: (
              /*addClass*/
              ctx[49]
            ),
            removeClass: (
              /*removeClass*/
              ctx[50]
            )
          })),
          action_destroyer(useActions_action_4 = useActions.call(
            null,
            div1,
            /*use*/
            ctx[2]
          )),
          action_destroyer(
            /*forwardEvents*/
            ctx[43].call(null, div1)
          ),
          listen(
            div1,
            "SMUISelectLeadingIcon:mount",
            /*handleLeadingIconMount*/
            ctx[48]
          ),
          listen(
            div1,
            "SMUISelectLeadingIcon:unmount",
            /*SMUISelectLeadingIcon_unmount_handler*/
            ctx[82]
          )
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*hiddenInput*/
        ctx[12]
      ) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
        } else {
          if_block0 = create_if_block_6(ctx);
          if_block0.c();
          if_block0.m(div1, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*variant*/
        ctx[7] === "filled"
      ) {
        if (if_block1)
          ;
        else {
          if_block1 = create_if_block_5$3();
          if_block1.c();
          if_block1.m(div0, t1);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*variant*/
        ctx[7] !== "outlined" && !/*noLabel*/
        ctx[8] && /*label*/
        (ctx[9] != null || /*$$slots*/
        ctx[52].label)
      ) {
        if (if_block2) {
          if_block2.p(ctx, dirty);
          if (dirty[0] & /*variant, noLabel, label*/
          896 | dirty[1] & /*$$slots*/
          2097152) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_4$4(ctx);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div0, t2);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (
        /*variant*/
        ctx[7] === "outlined"
      ) {
        if (if_block3) {
          if_block3.p(ctx, dirty);
          if (dirty[0] & /*variant*/
          128) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block_2$9(ctx);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(div0, t3);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
      if (leadingIcon_slot) {
        if (leadingIcon_slot.p && (!current || dirty[2] & /*$$scope*/
        16777216)) {
          update_slot_base(
            leadingIcon_slot,
            leadingIcon_slot_template,
            ctx,
            /*$$scope*/
            ctx[86],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[86]
            ) : get_slot_changes(
              leadingIcon_slot_template,
              /*$$scope*/
              ctx[86],
              dirty,
              get_leadingIcon_slot_changes
            ),
            get_leadingIcon_slot_context
          );
        }
      }
      if (!current || dirty[1] & /*$selectedTextStore*/
      2048)
        set_data_maybe_contenteditable(
          t5,
          /*$selectedTextStore*/
          ctx[42],
          span_data_1["contenteditable"]
        );
      set_attributes(span0, span_data_1 = get_spread_update(span0_levels, [
        (!current || dirty[0] & /*inputId*/
        2048 && span0_id_value !== (span0_id_value = /*inputId*/
        ctx[11] + "-smui-selected-text")) && { id: span0_id_value },
        (!current || dirty[0] & /*selectedText$class*/
        524288 && span0_class_value !== (span0_class_value = classMap({
          [
            /*selectedText$class*/
            ctx[19]
          ]: true,
          "mdc-select__selected-text": true
        }))) && { class: span0_class_value },
        { role: "button" },
        { "aria-haspopup": "listbox" },
        (!current || dirty[0] & /*inputId*/
        2048 && span0_aria_labelledby_value !== (span0_aria_labelledby_value = /*inputId*/
        ctx[11] + "-smui-label")) && {
          "aria-labelledby": span0_aria_labelledby_value
        },
        dirty[1] & /*$$restProps*/
        4194304 && prefixFilter(
          /*$$restProps*/
          ctx[53],
          "selectedText$"
        )
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*selectedText$use*/
      262144)
        useActions_action.update.call(
          null,
          /*selectedText$use*/
          ctx[18]
        );
      set_attributes(span1, span_data_2 = get_spread_update(span1_levels, [
        (!current || dirty[0] & /*selectedTextContainer$class*/
        131072 && span1_class_value !== (span1_class_value = classMap({
          [
            /*selectedTextContainer$class*/
            ctx[17]
          ]: true,
          "mdc-select__selected-text-container": true
        }))) && { class: span1_class_value },
        dirty[1] & /*$$restProps*/
        4194304 && prefixFilter(
          /*$$restProps*/
          ctx[53],
          "selectedTextContainer$"
        )
      ]));
      if (useActions_action_1 && is_function(useActions_action_1.update) && dirty[0] & /*selectedTextContainer$use*/
      65536)
        useActions_action_1.update.call(
          null,
          /*selectedTextContainer$use*/
          ctx[16]
        );
      set_attributes(span2, span_data = get_spread_update(span2_levels, [
        (!current || dirty[0] & /*dropdownIcon$class*/
        2097152 && span2_class_value !== (span2_class_value = classMap({
          [
            /*dropdownIcon$class*/
            ctx[21]
          ]: true,
          "mdc-select__dropdown-icon": true
        }))) && { class: span2_class_value },
        dirty[1] & /*$$restProps*/
        4194304 && prefixFilter(
          /*$$restProps*/
          ctx[53],
          "dropdownIcon$"
        )
      ]));
      if (useActions_action_2 && is_function(useActions_action_2.update) && dirty[0] & /*dropdownIcon$use*/
      1048576)
        useActions_action_2.update.call(
          null,
          /*dropdownIcon$use*/
          ctx[20]
        );
      if (
        /*variant*/
        ctx[7] !== "outlined" && /*ripple*/
        ctx[5]
      ) {
        if (if_block4) {
          if_block4.p(ctx, dirty);
          if (dirty[0] & /*variant, ripple*/
          160) {
            transition_in(if_block4, 1);
          }
        } else {
          if_block4 = create_if_block_1$d(ctx);
          if_block4.c();
          transition_in(if_block4, 1);
          if_block4.m(div0, null);
        }
      } else if (if_block4) {
        group_outros();
        transition_out(if_block4, 1, 1, () => {
          if_block4 = null;
        });
        check_outros();
      }
      set_attributes(div0, div_data = get_spread_update(div0_levels, [
        (!current || dirty[0] & /*anchor$class*/
        32768 && div0_class_value !== (div0_class_value = classMap({
          [
            /*anchor$class*/
            ctx[15]
          ]: true,
          "mdc-select__anchor": true
        }))) && { class: div0_class_value },
        (!current || dirty[0] & /*required*/
        1024 && div0_aria_required_value !== (div0_aria_required_value = /*required*/
        ctx[10] ? "true" : void 0)) && {
          "aria-required": div0_aria_required_value
        },
        (!current || dirty[0] & /*disabled*/
        64 && div0_aria_disabled_value !== (div0_aria_disabled_value = /*disabled*/
        ctx[6] ? "true" : void 0)) && {
          "aria-disabled": div0_aria_disabled_value
        },
        (!current || dirty[0] & /*helperId*/
        1073741824) && { "aria-controls": (
          /*helperId*/
          ctx[30]
        ) },
        (!current || dirty[0] & /*helperId*/
        1073741824) && { "aria-describedby": (
          /*helperId*/
          ctx[30]
        ) },
        dirty[0] & /*selectAnchorAttrs*/
        536870912 && /*selectAnchorAttrs*/
        ctx[29],
        dirty[1] & /*$$restProps*/
        4194304 && prefixFilter(
          /*$$restProps*/
          ctx[53],
          "anchor$"
        )
      ]));
      if (useActions_action_3 && is_function(useActions_action_3.update) && dirty[0] & /*anchor$use*/
      16384)
        useActions_action_3.update.call(
          null,
          /*anchor$use*/
          ctx[14]
        );
      const menu_changes = dirty[0] & /*menu$class*/
      4194304 | dirty[1] & /*menuClasses, anchorElement, anchorCorner, $$restProps*/
      4194318 ? get_spread_update(menu_spread_levels, [
        dirty[0] & /*menu$class*/
        4194304 | dirty[1] & /*menuClasses*/
        2 && {
          class: classMap({
            [
              /*menu$class*/
              ctx[22]
            ]: true,
            "mdc-select__menu": true,
            .../*menuClasses*/
            ctx[32]
          })
        },
        menu_spread_levels[1],
        menu_spread_levels[2],
        dirty[1] & /*anchorElement*/
        4 && { anchorElement: (
          /*anchorElement*/
          ctx[33]
        ) },
        dirty[1] & /*anchorCorner*/
        8 && { anchorCorner: (
          /*anchorCorner*/
          ctx[34]
        ) },
        dirty[1] & /*$$restProps*/
        4194304 && get_spread_object(prefixFilter(
          /*$$restProps*/
          ctx[53],
          "menu$"
        ))
      ]) : {};
      if (dirty[0] & /*selectedIndex*/
      16777216 | dirty[1] & /*wrapFocus, $$restProps, list*/
      4194352 | dirty[2] & /*$$scope*/
      16777216) {
        menu_changes.$$scope = { dirty, ctx };
      }
      if (!updating_open && dirty[1] & /*menuOpen*/
      1) {
        updating_open = true;
        menu_changes.open = /*menuOpen*/
        ctx[31];
        add_flush_callback(() => updating_open = false);
      }
      menu.$set(menu_changes);
      set_attributes(div1, div_data_1 = get_spread_update(div1_levels, [
        (!current || dirty[0] & /*className, required, disabled, variant, withLeadingIcon, noLabel, label, invalid, internalClasses*/
        67119050 | dirty[1] & /*$$slots, menuOpen*/
        2097153 && div1_class_value !== (div1_class_value = classMap({
          [
            /*className*/
            ctx[3]
          ]: true,
          "mdc-select": true,
          "mdc-select--required": (
            /*required*/
            ctx[10]
          ),
          "mdc-select--disabled": (
            /*disabled*/
            ctx[6]
          ),
          "mdc-select--filled": (
            /*variant*/
            ctx[7] === "filled"
          ),
          "mdc-select--outlined": (
            /*variant*/
            ctx[7] === "outlined"
          ),
          "smui-select--standard": (
            /*variant*/
            ctx[7] === "standard"
          ),
          "mdc-select--with-leading-icon": (
            /*isUninitializedValue*/
            ctx[44](
              /*withLeadingIcon*/
              ctx[13]
            ) ? (
              /*$$slots*/
              ctx[52].leadingIcon
            ) : (
              /*withLeadingIcon*/
              ctx[13]
            )
          ),
          "mdc-select--no-label": (
            /*noLabel*/
            ctx[8] || /*label*/
            ctx[9] == null && !/*$$slots*/
            ctx[52].label
          ),
          "mdc-select--invalid": (
            /*invalid*/
            ctx[1]
          ),
          "mdc-select--activated": (
            /*menuOpen*/
            ctx[31]
          ),
          "mdc-data-table__pagination-rows-per-page-select": (
            /*context*/
            ctx[45] === "data-table:pagination"
          ),
          .../*internalClasses*/
          ctx[26]
        }))) && { class: div1_class_value },
        (!current || dirty[0] & /*internalStyles, style*/
        134217744 && div1_style_value !== (div1_style_value = Object.entries(
          /*internalStyles*/
          ctx[27]
        ).map(func$3).concat([
          /*style*/
          ctx[4]
        ]).join(" "))) && { style: div1_style_value },
        dirty[1] & /*$$restProps*/
        4194304 && exclude(
          /*$$restProps*/
          ctx[53],
          [
            "input$",
            "anchor$",
            "label$",
            "outline$",
            "selectedTextContainer$",
            "selectedText$",
            "dropdownIcon$",
            "ripple$",
            "menu$",
            "list$",
            "helperText$"
          ]
        )
      ]));
      if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*variant*/
      128)
        Ripple_action.update.call(null, {
          ripple: (
            /*variant*/
            ctx[7] === "filled"
          ),
          unbounded: false,
          addClass: (
            /*addClass*/
            ctx[49]
          ),
          removeClass: (
            /*removeClass*/
            ctx[50]
          ),
          addStyle: (
            /*addStyle*/
            ctx[51]
          )
        });
      if (useActions_action_4 && is_function(useActions_action_4.update) && dirty[0] & /*use*/
      4)
        useActions_action_4.update.call(
          null,
          /*use*/
          ctx[2]
        );
      if (
        /*$$slots*/
        ctx[52].helperText
      ) {
        if (if_block5) {
          if_block5.p(ctx, dirty);
          if (dirty[1] & /*$$slots*/
          2097152) {
            transition_in(if_block5, 1);
          }
        } else {
          if_block5 = create_if_block$l(ctx);
          if_block5.c();
          transition_in(if_block5, 1);
          if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
        }
      } else if (if_block5) {
        group_outros();
        transition_out(if_block5, 1, 1, () => {
          if_block5 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(leadingIcon_slot, local);
      transition_in(if_block4);
      transition_in(menu.$$.fragment, local);
      transition_in(if_block5);
      current = true;
    },
    o(local) {
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(leadingIcon_slot, local);
      transition_out(if_block4);
      transition_out(menu.$$.fragment, local);
      transition_out(if_block5);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t9);
        detach(if_block5_anchor);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
      if (leadingIcon_slot)
        leadingIcon_slot.d(detaching);
      if (if_block4)
        if_block4.d();
      ctx[70](null);
      destroy_component(menu);
      ctx[81](null);
      if (if_block5)
        if_block5.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
let counter$1 = 0;
function getNormalizedXCoordinate(evt) {
  const targetClientRect = evt.currentTarget.getBoundingClientRect();
  const xCoordinate = isTouchEvent(evt) ? evt.touches[0].clientX : evt.clientX;
  return xCoordinate - targetClientRect.left;
}
function isTouchEvent(evt) {
  return "touches" in evt;
}
const func$3 = ([name, value]) => `${name}: ${value};`;
function instance_1$4($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "use",
    "class",
    "style",
    "ripple",
    "disabled",
    "variant",
    "noLabel",
    "label",
    "value",
    "key",
    "dirty",
    "invalid",
    "updateInvalid",
    "required",
    "inputId",
    "hiddenInput",
    "withLeadingIcon",
    "anchor$use",
    "anchor$class",
    "selectedTextContainer$use",
    "selectedTextContainer$class",
    "selectedText$use",
    "selectedText$class",
    "dropdownIcon$use",
    "dropdownIcon$class",
    "menu$class",
    "getUseDefaultValidation",
    "setUseDefaultValidation",
    "focus",
    "layout",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $selectedTextStore;
  let $valueStore;
  let { $$slots: slots = {}, $$scope } = $$props;
  const $$slots = compute_slots(slots);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let uninitializedValue = () => {
  };
  function isUninitializedValue(value2) {
    return value2 === uninitializedValue;
  }
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { ripple = true } = $$props;
  let { disabled = false } = $$props;
  let { variant = "standard" } = $$props;
  let { noLabel = false } = $$props;
  let { label = void 0 } = $$props;
  let { value = "" } = $$props;
  let { key = (item) => item } = $$props;
  let { dirty = false } = $$props;
  let { invalid = uninitializedValue } = $$props;
  let { updateInvalid = isUninitializedValue(invalid) } = $$props;
  const useDefaultValidation = isUninitializedValue(invalid);
  if (isUninitializedValue(invalid)) {
    invalid = false;
  }
  let { required = false } = $$props;
  let { inputId = "SMUI-select-" + counter$1++ } = $$props;
  let { hiddenInput = false } = $$props;
  let { withLeadingIcon = uninitializedValue } = $$props;
  let { anchor$use = [] } = $$props;
  let { anchor$class = "" } = $$props;
  let { selectedTextContainer$use = [] } = $$props;
  let { selectedTextContainer$class = "" } = $$props;
  let { selectedText$use = [] } = $$props;
  let { selectedText$class = "" } = $$props;
  let { dropdownIcon$use = [] } = $$props;
  let { dropdownIcon$class = "" } = $$props;
  let { menu$class = "" } = $$props;
  let element2;
  let instance2;
  let internalClasses = {};
  let internalStyles = {};
  let selectAnchor;
  let selectAnchorAttrs = {};
  let selectedIndex = -1;
  let helperId = void 0;
  let addLayoutListener = getContext("SMUI:addLayoutListener");
  let removeLayoutListener;
  let menuOpen = false;
  let menuClasses = {};
  let anchorElement = void 0;
  let anchorCorner = void 0;
  let wrapFocus = false;
  let list;
  let context = getContext("SMUI:select:context");
  let leadingIcon = void 0;
  let helperText = void 0;
  let floatingLabel = void 0;
  let lineRipple = void 0;
  let notchedOutline = void 0;
  setContext("SMUI:list:role", "");
  setContext("SMUI:list:nav", false);
  const selectedTextStore = writable("");
  component_subscribe($$self, selectedTextStore, (value2) => $$invalidate(42, $selectedTextStore = value2));
  setContext("SMUI:select:selectedText", selectedTextStore);
  const valueStore = writable(value);
  component_subscribe($$self, valueStore, (value2) => $$invalidate(88, $valueStore = value2));
  setContext("SMUI:select:value", valueStore);
  let previousSelectedIndex = selectedIndex;
  if (addLayoutListener) {
    removeLayoutListener = addLayoutListener(layout);
  }
  onMount(() => {
    $$invalidate(23, instance2 = new MDCSelectFoundation(
      {
        // getSelectAdapterMethods
        // getMenuItemAttr: (menuItem: Element, attr: string) =>
        //   menuItem.getAttribute(attr),
        setSelectedText: (text2) => {
          set_store_value(selectedTextStore, $selectedTextStore = text2, $selectedTextStore);
        },
        isSelectAnchorFocused: () => document.activeElement === selectAnchor,
        getSelectAnchorAttr,
        setSelectAnchorAttr: addSelectAnchorAttr,
        removeSelectAnchorAttr,
        addMenuClass,
        removeMenuClass,
        openMenu: () => {
          $$invalidate(31, menuOpen = true);
        },
        closeMenu: () => {
          $$invalidate(31, menuOpen = false);
        },
        getAnchorElement: () => selectAnchor,
        setMenuAnchorElement: (value2) => {
          $$invalidate(33, anchorElement = value2);
        },
        setMenuAnchorCorner: (value2) => {
          $$invalidate(34, anchorCorner = value2);
        },
        setMenuWrapFocus: (value2) => {
          $$invalidate(35, wrapFocus = value2);
        },
        getSelectedIndex: () => selectedIndex,
        setSelectedIndex: (index2) => {
          $$invalidate(62, previousSelectedIndex = index2);
          $$invalidate(24, selectedIndex = index2);
          $$invalidate(0, value = getMenuItemValues()[selectedIndex]);
        },
        focusMenuItemAtIndex: (index2) => {
          list.focusItemAtIndex(index2);
        },
        getMenuItemCount: () => list.items.length,
        getMenuItemValues: () => getMenuItemValues().map(key),
        getMenuItemTextAtIndex: (index2) => list.getPrimaryTextAtIndex(index2),
        isTypeaheadInProgress: () => list.typeaheadInProgress,
        typeaheadMatchItem: (nextChar, startingIndex) => list.typeaheadMatchItem(nextChar, startingIndex),
        // getCommonAdapterMethods
        addClass,
        removeClass,
        hasClass,
        setRippleCenter: (normalizedX) => lineRipple && lineRipple.setRippleCenter(normalizedX),
        activateBottomLine: () => lineRipple && lineRipple.activate(),
        deactivateBottomLine: () => lineRipple && lineRipple.deactivate(),
        notifyChange: (_selectedValue) => {
          $$invalidate(54, dirty = true);
          if (updateInvalid) {
            $$invalidate(1, invalid = !instance2.isValid());
          }
          dispatch(getElement(), "SMUISelect:change", { value, index: selectedIndex }, void 0, true);
        },
        // getOutlineAdapterMethods
        hasOutline: () => !!notchedOutline,
        notchOutline: (labelWidth) => notchedOutline && notchedOutline.notch(labelWidth),
        closeOutline: () => notchedOutline && notchedOutline.closeNotch(),
        // getLabelAdapterMethods
        hasLabel: () => !!floatingLabel,
        floatLabel: (shouldFloat) => floatingLabel && floatingLabel.float(shouldFloat),
        getLabelWidth: () => floatingLabel ? floatingLabel.getWidth() : 0,
        setLabelRequired: (isRequired) => floatingLabel && floatingLabel.setRequired(isRequired)
      },
      {
        get helperText() {
          return helperText;
        },
        get leadingIcon() {
          return leadingIcon;
        }
      }
    ));
    $$invalidate(24, selectedIndex = getMenuItemValues().indexOf(value));
    instance2.init();
    setUseDefaultValidation(useDefaultValidation);
    return () => {
      instance2.destroy();
    };
  });
  onDestroy(() => {
    if (removeLayoutListener) {
      removeLayoutListener();
    }
  });
  function handleLeadingIconMount(event) {
    $$invalidate(37, leadingIcon = event.detail);
  }
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(26, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(26, internalClasses[className2] = false, internalClasses);
    }
  }
  function addStyle(name, value2) {
    if (internalStyles[name] != value2) {
      if (value2 === "" || value2 == null) {
        delete internalStyles[name];
        $$invalidate(27, internalStyles);
      } else {
        $$invalidate(27, internalStyles[name] = value2, internalStyles);
      }
    }
  }
  function addMenuClass(className2) {
    if (!menuClasses[className2]) {
      $$invalidate(32, menuClasses[className2] = true, menuClasses);
    }
  }
  function removeMenuClass(className2) {
    if (!(className2 in menuClasses) || menuClasses[className2]) {
      $$invalidate(32, menuClasses[className2] = false, menuClasses);
    }
  }
  function getSelectAnchorAttr(name) {
    var _a2;
    return name in selectAnchorAttrs ? (_a2 = selectAnchorAttrs[name]) !== null && _a2 !== void 0 ? _a2 : null : getElement().getAttribute(name);
  }
  function addSelectAnchorAttr(name, value2) {
    if (selectAnchorAttrs[name] !== value2) {
      $$invalidate(29, selectAnchorAttrs[name] = value2, selectAnchorAttrs);
    }
  }
  function removeSelectAnchorAttr(name) {
    if (!(name in selectAnchorAttrs) || selectAnchorAttrs[name] != null) {
      $$invalidate(29, selectAnchorAttrs[name] = void 0, selectAnchorAttrs);
    }
  }
  function getMenuItemValues() {
    return list.getOrderedList().map((accessor) => accessor.getValue());
  }
  function getUseDefaultValidation() {
    return instance2.getUseDefaultValidation();
  }
  function setUseDefaultValidation(useDefaultValidation2) {
    instance2.setUseDefaultValidation(useDefaultValidation2);
  }
  function focus() {
    selectAnchor.focus();
  }
  function layout() {
    instance2.layout();
  }
  function getElement() {
    return element2;
  }
  function focus_handler(event) {
    bubble.call(this, $$self, event);
  }
  function blur_handler(event) {
    bubble.call(this, $$self, event);
  }
  function floatinglabel_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      floatingLabel = $$value;
      $$invalidate(39, floatingLabel);
    });
  }
  function floatinglabel_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      floatingLabel = $$value;
      $$invalidate(39, floatingLabel);
    });
  }
  function notchedoutline_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      notchedOutline = $$value;
      $$invalidate(41, notchedOutline);
    });
  }
  function lineripple_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      lineRipple = $$value;
      $$invalidate(40, lineRipple);
    });
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      selectAnchor = $$value;
      $$invalidate(28, selectAnchor);
    });
  }
  const focus_handler_1 = () => instance2 && instance2.handleFocus();
  const blur_handler_1 = () => instance2 && instance2.handleBlur();
  const click_handler = (event) => {
    selectAnchor.focus();
    if (instance2) {
      instance2.handleClick(getNormalizedXCoordinate(event));
    }
  };
  function list_1_selectedIndex_binding(value2) {
    selectedIndex = value2;
    $$invalidate(24, selectedIndex);
  }
  const SMUIList_mount_handler = (event) => $$invalidate(36, list = event.detail);
  function menu_open_binding(value2) {
    menuOpen = value2;
    $$invalidate(31, menuOpen);
  }
  const SMUIMenu_selected_handler = (event) => instance2 && instance2.handleMenuItemAction(event.detail.index);
  const SMUIMenuSurface_closing_handler = () => instance2 && instance2.handleMenuClosing();
  const SMUIMenuSurface_closed_handler = () => instance2 && instance2.handleMenuClosed();
  const SMUIMenuSurface_opened_handler = () => instance2 && instance2.handleMenuOpened();
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(25, element2);
    });
  }
  const SMUISelectLeadingIcon_unmount_handler = () => $$invalidate(37, leadingIcon = void 0);
  const SMUISelectHelperText_id_handler = (event) => $$invalidate(30, helperId = event.detail);
  const SMUISelectHelperText_mount_handler = (event) => $$invalidate(38, helperText = event.detail);
  const SMUISelectHelperText_unmount_handler = () => {
    $$invalidate(30, helperId = void 0);
    $$invalidate(38, helperText = void 0);
  };
  $$self.$$set = ($$new_props) => {
    $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(53, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(2, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(3, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(4, style = $$new_props.style);
    if ("ripple" in $$new_props)
      $$invalidate(5, ripple = $$new_props.ripple);
    if ("disabled" in $$new_props)
      $$invalidate(6, disabled = $$new_props.disabled);
    if ("variant" in $$new_props)
      $$invalidate(7, variant = $$new_props.variant);
    if ("noLabel" in $$new_props)
      $$invalidate(8, noLabel = $$new_props.noLabel);
    if ("label" in $$new_props)
      $$invalidate(9, label = $$new_props.label);
    if ("value" in $$new_props)
      $$invalidate(0, value = $$new_props.value);
    if ("key" in $$new_props)
      $$invalidate(55, key = $$new_props.key);
    if ("dirty" in $$new_props)
      $$invalidate(54, dirty = $$new_props.dirty);
    if ("invalid" in $$new_props)
      $$invalidate(1, invalid = $$new_props.invalid);
    if ("updateInvalid" in $$new_props)
      $$invalidate(56, updateInvalid = $$new_props.updateInvalid);
    if ("required" in $$new_props)
      $$invalidate(10, required = $$new_props.required);
    if ("inputId" in $$new_props)
      $$invalidate(11, inputId = $$new_props.inputId);
    if ("hiddenInput" in $$new_props)
      $$invalidate(12, hiddenInput = $$new_props.hiddenInput);
    if ("withLeadingIcon" in $$new_props)
      $$invalidate(13, withLeadingIcon = $$new_props.withLeadingIcon);
    if ("anchor$use" in $$new_props)
      $$invalidate(14, anchor$use = $$new_props.anchor$use);
    if ("anchor$class" in $$new_props)
      $$invalidate(15, anchor$class = $$new_props.anchor$class);
    if ("selectedTextContainer$use" in $$new_props)
      $$invalidate(16, selectedTextContainer$use = $$new_props.selectedTextContainer$use);
    if ("selectedTextContainer$class" in $$new_props)
      $$invalidate(17, selectedTextContainer$class = $$new_props.selectedTextContainer$class);
    if ("selectedText$use" in $$new_props)
      $$invalidate(18, selectedText$use = $$new_props.selectedText$use);
    if ("selectedText$class" in $$new_props)
      $$invalidate(19, selectedText$class = $$new_props.selectedText$class);
    if ("dropdownIcon$use" in $$new_props)
      $$invalidate(20, dropdownIcon$use = $$new_props.dropdownIcon$use);
    if ("dropdownIcon$class" in $$new_props)
      $$invalidate(21, dropdownIcon$class = $$new_props.dropdownIcon$class);
    if ("menu$class" in $$new_props)
      $$invalidate(22, menu$class = $$new_props.menu$class);
    if ("$$scope" in $$new_props)
      $$invalidate(86, $$scope = $$new_props.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*selectedIndex, instance, value*/
    25165825 | $$self.$$.dirty[2] & /*previousSelectedIndex*/
    1) {
      if (previousSelectedIndex !== selectedIndex) {
        $$invalidate(62, previousSelectedIndex = selectedIndex);
        if (instance2) {
          instance2.setSelectedIndex(
            selectedIndex,
            /* closeMenu */
            false,
            /* skipNotify */
            true
          );
        } else {
          const values = getMenuItemValues();
          if (value !== values[selectedIndex]) {
            $$invalidate(0, value = values[selectedIndex]);
          }
        }
      }
    }
    if ($$self.$$.dirty[0] & /*value*/
    1) {
      set_store_value(valueStore, $valueStore = value, $valueStore);
    }
    if ($$self.$$.dirty[0] & /*instance, value*/
    8388609 | $$self.$$.dirty[1] & /*key*/
    16777216) {
      if (instance2 && instance2.getValue() !== key(value)) {
        instance2.setValue(key(value));
      }
    }
    if ($$self.$$.dirty[0] & /*instance, disabled*/
    8388672) {
      if (instance2 && instance2.getDisabled() !== disabled) {
        instance2.setDisabled(disabled);
      }
    }
    if ($$self.$$.dirty[0] & /*instance, invalid*/
    8388610 | $$self.$$.dirty[1] & /*dirty, updateInvalid*/
    41943040) {
      if (instance2 && dirty && instance2.isValid() !== !invalid) {
        if (updateInvalid) {
          $$invalidate(1, invalid = !instance2.isValid());
        } else {
          instance2.setValid(!invalid);
        }
      }
    }
    if ($$self.$$.dirty[0] & /*instance, required*/
    8389632) {
      if (instance2 && instance2.getRequired() !== required) {
        instance2.setRequired(required);
      }
    }
  };
  return [
    value,
    invalid,
    use,
    className,
    style,
    ripple,
    disabled,
    variant,
    noLabel,
    label,
    required,
    inputId,
    hiddenInput,
    withLeadingIcon,
    anchor$use,
    anchor$class,
    selectedTextContainer$use,
    selectedTextContainer$class,
    selectedText$use,
    selectedText$class,
    dropdownIcon$use,
    dropdownIcon$class,
    menu$class,
    instance2,
    selectedIndex,
    element2,
    internalClasses,
    internalStyles,
    selectAnchor,
    selectAnchorAttrs,
    helperId,
    menuOpen,
    menuClasses,
    anchorElement,
    anchorCorner,
    wrapFocus,
    list,
    leadingIcon,
    helperText,
    floatingLabel,
    lineRipple,
    notchedOutline,
    $selectedTextStore,
    forwardEvents,
    isUninitializedValue,
    context,
    selectedTextStore,
    valueStore,
    handleLeadingIconMount,
    addClass,
    removeClass,
    addStyle,
    $$slots,
    $$restProps,
    dirty,
    key,
    updateInvalid,
    getUseDefaultValidation,
    setUseDefaultValidation,
    focus,
    layout,
    getElement,
    previousSelectedIndex,
    slots,
    focus_handler,
    blur_handler,
    floatinglabel_binding,
    floatinglabel_binding_1,
    notchedoutline_binding,
    lineripple_binding,
    div0_binding,
    focus_handler_1,
    blur_handler_1,
    click_handler,
    list_1_selectedIndex_binding,
    SMUIList_mount_handler,
    menu_open_binding,
    SMUIMenu_selected_handler,
    SMUIMenuSurface_closing_handler,
    SMUIMenuSurface_closed_handler,
    SMUIMenuSurface_opened_handler,
    div1_binding,
    SMUISelectLeadingIcon_unmount_handler,
    SMUISelectHelperText_id_handler,
    SMUISelectHelperText_mount_handler,
    SMUISelectHelperText_unmount_handler,
    $$scope
  ];
}
class Select extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance_1$4,
      create_fragment$t,
      safe_not_equal,
      {
        use: 2,
        class: 3,
        style: 4,
        ripple: 5,
        disabled: 6,
        variant: 7,
        noLabel: 8,
        label: 9,
        value: 0,
        key: 55,
        dirty: 54,
        invalid: 1,
        updateInvalid: 56,
        required: 10,
        inputId: 11,
        hiddenInput: 12,
        withLeadingIcon: 13,
        anchor$use: 14,
        anchor$class: 15,
        selectedTextContainer$use: 16,
        selectedTextContainer$class: 17,
        selectedText$use: 18,
        selectedText$class: 19,
        dropdownIcon$use: 20,
        dropdownIcon$class: 21,
        menu$class: 22,
        getUseDefaultValidation: 57,
        setUseDefaultValidation: 58,
        focus: 59,
        layout: 60,
        getElement: 61
      },
      null,
      [-1, -1, -1, -1]
    );
  }
  get getUseDefaultValidation() {
    return this.$$.ctx[57];
  }
  get setUseDefaultValidation() {
    return this.$$.ctx[58];
  }
  get focus() {
    return this.$$.ctx[59];
  }
  get layout() {
    return this.$$.ctx[60];
  }
  get getElement() {
    return this.$$.ctx[61];
  }
}
function create_default_slot$e(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[11].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[13],
    null
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    l(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8192)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[13],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[13]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[13],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment$s(ctx) {
  let item;
  let current;
  const item_spread_levels = [
    { use: (
      /*usePass*/
      ctx[3]
    ) },
    { "data-value": (
      /*value*/
      ctx[0]
    ) },
    { value: (
      /*value*/
      ctx[0]
    ) },
    { selected: (
      /*selected*/
      ctx[2]
    ) },
    /*$$restProps*/
    ctx[6]
  ];
  let item_props = {
    $$slots: { default: [create_default_slot$e] },
    $$scope: { ctx }
  };
  for (let i2 = 0; i2 < item_spread_levels.length; i2 += 1) {
    item_props = assign$1(item_props, item_spread_levels[i2]);
  }
  item = new Item({ props: item_props });
  ctx[12](item);
  return {
    c() {
      create_component(item.$$.fragment);
    },
    l(nodes) {
      claim_component(item.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(item, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const item_changes = dirty & /*usePass, value, selected, $$restProps*/
      77 ? get_spread_update(item_spread_levels, [
        dirty & /*usePass*/
        8 && { use: (
          /*usePass*/
          ctx2[3]
        ) },
        dirty & /*value*/
        1 && { "data-value": (
          /*value*/
          ctx2[0]
        ) },
        dirty & /*value*/
        1 && { value: (
          /*value*/
          ctx2[0]
        ) },
        dirty & /*selected*/
        4 && { selected: (
          /*selected*/
          ctx2[2]
        ) },
        dirty & /*$$restProps*/
        64 && get_spread_object(
          /*$$restProps*/
          ctx2[6]
        )
      ]) : {};
      if (dirty & /*$$scope*/
      8192) {
        item_changes.$$scope = { dirty, ctx: ctx2 };
      }
      item.$set(item_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(item.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(item.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      ctx[12](null);
      destroy_component(item, detaching);
    }
  };
}
function instance$m($$self, $$props, $$invalidate) {
  let usePass;
  let selected;
  const omit_props_names = ["use", "class", "value", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $selectedText;
  let $selectedValue;
  let { $$slots: slots = {}, $$scope } = $$props;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  const className = "";
  let { value = "" } = $$props;
  let element2;
  const selectedText = getContext("SMUI:select:selectedText");
  component_subscribe($$self, selectedText, (value2) => $$invalidate(14, $selectedText = value2));
  const selectedValue = getContext("SMUI:select:value");
  component_subscribe($$self, selectedValue, (value2) => $$invalidate(10, $selectedValue = value2));
  setContext("SMUI:list:item:role", "option");
  onMount(setSelectedText);
  onDestroy(setSelectedText);
  function setSelectedText() {
    if (selected && element2) {
      set_store_value(selectedText, $selectedText = element2.getPrimaryText(), $selectedText);
    }
  }
  function getElement() {
    return element2.getElement();
  }
  function item_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(1, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(7, use = $$new_props.use);
    if ("value" in $$new_props)
      $$invalidate(0, value = $$new_props.value);
    if ("$$scope" in $$new_props)
      $$invalidate(13, $$scope = $$new_props.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*use*/
    128) {
      $$invalidate(3, usePass = [forwardEvents, ...use]);
    }
    if ($$self.$$.dirty & /*value, $selectedValue*/
    1025) {
      $$invalidate(2, selected = value != null && value !== "" && $selectedValue === value);
    }
  };
  return [
    value,
    element2,
    selected,
    usePass,
    selectedText,
    selectedValue,
    $$restProps,
    use,
    className,
    getElement,
    $selectedValue,
    slots,
    item_binding,
    $$scope
  ];
}
class Option extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$m, create_fragment$s, safe_not_equal, {
      use: 7,
      class: 8,
      value: 0,
      getElement: 9
    });
  }
  get class() {
    return this.$$.ctx[8];
  }
  get getElement() {
    return this.$$.ctx[9];
  }
}
function get_each_context$8(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[21] = list[i2];
  child_ctx[23] = i2;
  return child_ctx;
}
function get_each_context_1$2(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[21] = list[i2];
  return child_ctx;
}
function get_each_context_2(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[26] = list[i2];
  return child_ctx;
}
function create_default_slot_9$5(ctx) {
  let t_value = (
    /*flatDevice*/
    ctx[26].name + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*flatDevices*/
      32 && t_value !== (t_value = /*flatDevice*/
      ctx2[26].name + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block_2(ctx) {
  let option;
  let current;
  option = new Option({
    props: {
      value: (
        /*flatDevice*/
        ctx[26].id
      ),
      $$slots: { default: [create_default_slot_9$5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option.$$.fragment);
    },
    l(nodes) {
      claim_component(option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option_changes = {};
      if (dirty & /*flatDevices*/
      32)
        option_changes.value = /*flatDevice*/
        ctx2[26].id;
      if (dirty & /*$$scope, flatDevices*/
      536870944) {
        option_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option.$set(option_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(option, detaching);
    }
  };
}
function create_default_slot_8$5(ctx) {
  let each_1_anchor;
  let current;
  let each_value_2 = ensure_array_like(
    /*flatDevices*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_2.length; i2 += 1) {
    each_blocks[i2] = create_each_block_2(get_each_context_2(ctx, each_value_2, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*flatDevices*/
      32) {
        each_value_2 = ensure_array_like(
          /*flatDevices*/
          ctx2[5]
        );
        let i2;
        for (i2 = 0; i2 < each_value_2.length; i2 += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_2(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_2.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_2.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_2$8(ctx) {
  let select;
  let updating_value;
  let current;
  function select_value_binding_1(value) {
    ctx[13](value);
  }
  let select_props = {
    label: "Capability",
    style: "width: 100%;",
    $$slots: { default: [create_default_slot_6$6] },
    $$scope: { ctx }
  };
  if (
    /*selectedCapability*/
    ctx[2] !== void 0
  ) {
    select_props.value = /*selectedCapability*/
    ctx[2];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding_1));
  return {
    c() {
      create_component(select.$$.fragment);
    },
    l(nodes) {
      claim_component(select.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_changes = {};
      if (dirty & /*$$scope, flatCapabilities*/
      536870928) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty & /*selectedCapability*/
      4) {
        updating_value = true;
        select_changes.value = /*selectedCapability*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select, detaching);
    }
  };
}
function create_default_slot_7$5(ctx) {
  let t_value = (
    /*capability*/
    ctx[21].title + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*flatCapabilities*/
      16 && t_value !== (t_value = /*capability*/
      ctx2[21].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block_1$2(ctx) {
  let option;
  let current;
  option = new Option({
    props: {
      value: (
        /*capability*/
        ctx[21].id
      ),
      $$slots: { default: [create_default_slot_7$5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option.$$.fragment);
    },
    l(nodes) {
      claim_component(option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option_changes = {};
      if (dirty & /*flatCapabilities*/
      16)
        option_changes.value = /*capability*/
        ctx2[21].id;
      if (dirty & /*$$scope, flatCapabilities*/
      536870928) {
        option_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option.$set(option_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(option, detaching);
    }
  };
}
function create_default_slot_6$6(ctx) {
  let each_1_anchor;
  let current;
  let each_value_1 = ensure_array_like(
    /*flatCapabilities*/
    ctx[4]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*flatCapabilities*/
      16) {
        each_value_1 = ensure_array_like(
          /*flatCapabilities*/
          ctx2[4]
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$2(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_1$2(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_5$6(ctx) {
  let t_value = (
    /*capability*/
    ctx[21].title + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*capabilities*/
      8 && t_value !== (t_value = /*capability*/
      ctx2[21].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_1$c(ctx) {
  let iconbutton;
  let current;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[14](
        /*capability*/
        ctx[21]
      )
    );
  }
  iconbutton = new IconButton({
    props: {
      size: "button",
      class: "material-icons",
      $$slots: { default: [create_default_slot_4$6] },
      $$scope: { ctx }
    }
  });
  iconbutton.$on("click", click_handler);
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    l(nodes) {
      claim_component(iconbutton.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const iconbutton_changes = {};
      if (dirty & /*$$scope*/
      536870912) {
        iconbutton_changes.$$scope = { dirty, ctx };
      }
      iconbutton.$set(iconbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_default_slot_4$6(ctx) {
  let t2;
  return {
    c() {
      t2 = text("arrow_upward");
    },
    l(nodes) {
      t2 = claim_text(nodes, "arrow_upward");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_else_block$9(ctx) {
  let iconbutton;
  let current;
  iconbutton = new IconButton({
    props: { size: "button", class: "material-icons" }
  });
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    l(nodes) {
      claim_component(iconbutton.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_if_block$k(ctx) {
  let iconbutton;
  let current;
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[15](
        /*capability*/
        ctx[21]
      )
    );
  }
  iconbutton = new IconButton({
    props: {
      size: "button",
      class: "material-icons",
      $$slots: { default: [create_default_slot_3$6] },
      $$scope: { ctx }
    }
  });
  iconbutton.$on("click", click_handler_1);
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    l(nodes) {
      claim_component(iconbutton.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const iconbutton_changes = {};
      if (dirty & /*$$scope*/
      536870912) {
        iconbutton_changes.$$scope = { dirty, ctx };
      }
      iconbutton.$set(iconbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_default_slot_3$6(ctx) {
  let t2;
  return {
    c() {
      t2 = text("arrow_downward");
    },
    l(nodes) {
      t2 = claim_text(nodes, "arrow_downward");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_2$8(ctx) {
  let t2;
  return {
    c() {
      t2 = text("delete");
    },
    l(nodes) {
      t2 = claim_text(nodes, "delete");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_1$b(ctx) {
  let text_1;
  let t0;
  let div;
  let t1;
  let t2;
  let current_block_type_index;
  let if_block1;
  let t3;
  let iconbutton;
  let t4;
  let current;
  text_1 = new Text({
    props: {
      $$slots: { default: [create_default_slot_5$6] },
      $$scope: { ctx }
    }
  });
  let if_block0 = (
    /*i*/
    ctx[23] > 0 && create_if_block_1$c(ctx)
  );
  const if_block_creators = [create_if_block$k, create_else_block$9];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*i*/
      ctx2[23] < /*capabilities*/
      ctx2[3].length - 1
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  function click_handler_2() {
    return (
      /*click_handler_2*/
      ctx[16](
        /*capability*/
        ctx[21]
      )
    );
  }
  iconbutton = new IconButton({
    props: {
      size: "button",
      class: "material-icons",
      $$slots: { default: [create_default_slot_2$8] },
      $$scope: { ctx }
    }
  });
  iconbutton.$on("click", click_handler_2);
  return {
    c() {
      create_component(text_1.$$.fragment);
      t0 = space();
      div = element("div");
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      if_block1.c();
      t3 = space();
      create_component(iconbutton.$$.fragment);
      t4 = space();
      this.h();
    },
    l(nodes) {
      claim_component(text_1.$$.fragment, nodes);
      t0 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { style: true });
      children(div).forEach(detach);
      t1 = claim_space(nodes);
      if (if_block0)
        if_block0.l(nodes);
      t2 = claim_space(nodes);
      if_block1.l(nodes);
      t3 = claim_space(nodes);
      claim_component(iconbutton.$$.fragment, nodes);
      t4 = claim_space(nodes);
      this.h();
    },
    h() {
      set_style(div, "flex-grow", "1");
    },
    m(target, anchor) {
      mount_component(text_1, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div, anchor);
      insert_hydration(target, t1, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert_hydration(target, t2, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, t3, anchor);
      mount_component(iconbutton, target, anchor);
      insert_hydration(target, t4, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const text_1_changes = {};
      if (dirty & /*$$scope, capabilities*/
      536870920) {
        text_1_changes.$$scope = { dirty, ctx };
      }
      text_1.$set(text_1_changes);
      if (
        /*i*/
        ctx[23] > 0
      )
        if_block0.p(ctx, dirty);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block1.c();
        } else {
          if_block1.p(ctx, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(t3.parentNode, t3);
      }
      const iconbutton_changes = {};
      if (dirty & /*$$scope*/
      536870912) {
        iconbutton_changes.$$scope = { dirty, ctx };
      }
      iconbutton.$set(iconbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(text_1.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(text_1.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
      }
      destroy_component(text_1, detaching);
      if (if_block0)
        if_block0.d(detaching);
      if_blocks[current_block_type_index].d(detaching);
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_each_block$8(ctx) {
  let item;
  let current;
  item = new Item({
    props: {
      style: "width: calc(100% - 4px); margin-left: 0px; padding-left: 4px;",
      $$slots: { default: [create_default_slot_1$b] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(item.$$.fragment);
    },
    l(nodes) {
      claim_component(item.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(item, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const item_changes = {};
      if (dirty & /*$$scope, capabilities*/
      536870920) {
        item_changes.$$scope = { dirty, ctx: ctx2 };
      }
      item.$set(item_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(item.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(item.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(item, detaching);
    }
  };
}
function create_default_slot$d(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*capabilities*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$8(get_each_context$8(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*remove, capabilities, moveDown, moveUp*/
      456) {
        each_value = ensure_array_like(
          /*capabilities*/
          ctx2[3]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$8(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$8(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment$r(ctx) {
  let div0;
  let select;
  let updating_value;
  let t0;
  let div1;
  let t1;
  let div2;
  let list;
  let current;
  function select_value_binding(value) {
    ctx[12](value);
  }
  let select_props = {
    label: "Device",
    style: "width: 100%;",
    $$slots: { default: [create_default_slot_8$5] },
    $$scope: { ctx }
  };
  if (
    /*deviceId*/
    ctx[0] !== void 0
  ) {
    select_props.value = /*deviceId*/
    ctx[0];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  let if_block = (
    /*device*/
    ctx[1] && create_if_block_2$8(ctx)
  );
  list = new List({
    props: {
      dense: true,
      $$slots: { default: [create_default_slot$d] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div0 = element("div");
      create_component(select.$$.fragment);
      t0 = space();
      div1 = element("div");
      if (if_block)
        if_block.c();
      t1 = space();
      div2 = element("div");
      create_component(list.$$.fragment);
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", {});
      var div0_nodes = children(div0);
      claim_component(select.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", {});
      var div1_nodes = children(div1);
      if (if_block)
        if_block.l(div1_nodes);
      div1_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", {});
      var div2_nodes = children(div2);
      claim_component(list.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(select, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div1, anchor);
      if (if_block)
        if_block.m(div1, null);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(list, div2, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const select_changes = {};
      if (dirty & /*$$scope, flatDevices*/
      536870944) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty & /*deviceId*/
      1) {
        updating_value = true;
        select_changes.value = /*deviceId*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
      if (
        /*device*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*device*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_2$8(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const list_changes = {};
      if (dirty & /*$$scope, capabilities*/
      536870920) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      transition_in(if_block);
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      transition_out(if_block);
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(div1);
        detach(t1);
        detach(div2);
      }
      destroy_component(select);
      if (if_block)
        if_block.d();
      destroy_component(list);
    }
  };
}
function instance$l($$self, $$props, $$invalidate) {
  let flatDevices;
  let flatCapabilities;
  let $devices;
  component_subscribe($$self, devices, ($$value) => $$invalidate(11, $devices = $$value));
  const dispatch2 = createEventDispatcher();
  let { settings } = $$props;
  let deviceId;
  let capabilityIds;
  let device;
  let capabilities;
  let selectedCapability;
  function onSettings(s3) {
    $$invalidate(0, deviceId = s3 == null ? void 0 : s3.deviceId);
    $$invalidate(10, capabilityIds = [...(s3 == null ? void 0 : s3.capabilityIds) ?? []]);
  }
  function onDevice(id) {
    if (id !== settings.deviceId) {
      $$invalidate(0, deviceId = id);
      dispatch2("settings", {
        ...settings,
        deviceId: id,
        capabilityIds: []
      });
    }
  }
  function onCapability(id) {
    if (id === void 0) {
      return;
    }
    capabilityIds.push(id);
    dispatch2("settings", { ...settings, capabilityIds });
    $$invalidate(2, selectedCapability = void 0);
  }
  function moveUp(capabilityId) {
    const index2 = capabilityIds.indexOf(capabilityId);
    if (index2 < 1) {
      return;
    }
    const idPrevious = capabilityIds[index2 - 1];
    const copy = [...capabilityIds];
    copy[index2 - 1] = capabilityId;
    copy[index2] = idPrevious;
    $$invalidate(10, capabilityIds = copy);
    dispatch2("settings", { ...settings, capabilityIds });
  }
  function moveDown(capabilityId) {
    const index2 = capabilityIds.indexOf(capabilityId);
    if (index2 == capabilityIds.length - 1) {
      return;
    }
    const idNext = capabilityIds[index2 + 1];
    const copy = [...capabilityIds];
    copy[index2 + 1] = capabilityId;
    copy[index2] = idNext;
    $$invalidate(10, capabilityIds = copy);
    dispatch2("settings", { ...settings, capabilityIds });
  }
  function remove(capabilityId) {
    $$invalidate(10, capabilityIds = capabilityIds.filter((cId) => cId !== capabilityId));
    dispatch2("settings", { ...settings, capabilityIds });
  }
  function select_value_binding(value) {
    deviceId = value;
    $$invalidate(0, deviceId);
  }
  function select_value_binding_1(value) {
    selectedCapability = value;
    $$invalidate(2, selectedCapability);
  }
  const click_handler = (capability) => moveUp(capability.id);
  const click_handler_1 = (capability) => moveDown(capability.id);
  const click_handler_2 = (capability) => remove(capability.id);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(9, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    512) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*deviceId, $devices*/
    2049) {
      $$invalidate(1, device = deviceId ? $devices[deviceId] : void 0);
    }
    if ($$self.$$.dirty & /*device, capabilityIds*/
    1026) {
      $$invalidate(3, capabilities = (device == null ? void 0 : device.capabilitiesObj) ? capabilityIds.map((cId) => device == null ? void 0 : device.capabilitiesObj[cId]).filter((c2) => c2 !== void 0) : []);
    }
    if ($$self.$$.dirty & /*$devices*/
    2048) {
      $$invalidate(5, flatDevices = Object.values($devices).sort((a3, b2) => {
        if (a3.name === b2.name)
          return 0;
        if (a3.name < b2.name)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*device, capabilityIds*/
    1026) {
      $$invalidate(4, flatCapabilities = (device == null ? void 0 : device.capabilitiesObj) ? Object.values(device.capabilitiesObj).filter((c2) => !capabilityIds.includes(c2.id)).sort((a3, b2) => {
        if (a3.title === b2.title)
          return 0;
        if (a3.title < b2.title)
          return -1;
        return 1;
      }) : []);
    }
    if ($$self.$$.dirty & /*deviceId*/
    1) {
      onDevice(deviceId);
    }
    if ($$self.$$.dirty & /*selectedCapability*/
    4) {
      onCapability(selectedCapability);
    }
  };
  return [
    deviceId,
    device,
    selectedCapability,
    capabilities,
    flatCapabilities,
    flatDevices,
    moveUp,
    moveDown,
    remove,
    settings,
    capabilityIds,
    $devices,
    select_value_binding,
    select_value_binding_1,
    click_handler,
    click_handler_1,
    click_handler_2
  ];
}
class CapabilityEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$l, create_fragment$r, safe_not_equal, { settings: 9 });
  }
}
/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var cssClasses$2 = {
  DISABLED: "mdc-slider--disabled",
  DISCRETE: "mdc-slider--discrete",
  INPUT: "mdc-slider__input",
  RANGE: "mdc-slider--range",
  THUMB: "mdc-slider__thumb",
  // Applied when thumb is in the focused state.
  THUMB_FOCUSED: "mdc-slider__thumb--focused",
  THUMB_KNOB: "mdc-slider__thumb-knob",
  // Class added to the top thumb (for overlapping thumbs in range slider).
  THUMB_TOP: "mdc-slider__thumb--top",
  THUMB_WITH_INDICATOR: "mdc-slider__thumb--with-indicator",
  TICK_MARKS: "mdc-slider--tick-marks",
  TICK_MARKS_CONTAINER: "mdc-slider__tick-marks",
  TICK_MARK_ACTIVE: "mdc-slider__tick-mark--active",
  TICK_MARK_INACTIVE: "mdc-slider__tick-mark--inactive",
  TRACK: "mdc-slider__track",
  // The active track fill element that will be scaled as the value changes.
  TRACK_ACTIVE: "mdc-slider__track--active_fill",
  VALUE_INDICATOR_CONTAINER: "mdc-slider__value-indicator-container",
  VALUE_INDICATOR_TEXT: "mdc-slider__value-indicator-text"
};
var numbers$2 = {
  // Default step size.
  STEP_SIZE: 1,
  // Default minimum difference between the start and end values.
  MIN_RANGE: 0,
  // Minimum absolute difference between clientX of move event / down event
  // for which to update thumb, in the case of overlapping thumbs.
  // This is needed to reduce chances of choosing the thumb based on
  // pointer jitter.
  THUMB_UPDATE_MIN_PX: 5
};
var attributes = {
  ARIA_VALUETEXT: "aria-valuetext",
  INPUT_DISABLED: "disabled",
  INPUT_MIN: "min",
  INPUT_MAX: "max",
  INPUT_VALUE: "value",
  INPUT_STEP: "step",
  DATA_MIN_RANGE: "data-min-range"
};
var strings$2 = {
  VAR_VALUE_INDICATOR_CARET_LEFT: "--slider-value-indicator-caret-left",
  VAR_VALUE_INDICATOR_CARET_RIGHT: "--slider-value-indicator-caret-right",
  VAR_VALUE_INDICATOR_CARET_TRANSFORM: "--slider-value-indicator-caret-transform",
  VAR_VALUE_INDICATOR_CONTAINER_LEFT: "--slider-value-indicator-container-left",
  VAR_VALUE_INDICATOR_CONTAINER_RIGHT: "--slider-value-indicator-container-right",
  VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM: "--slider-value-indicator-container-transform"
};
/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var TickMark;
(function(TickMark2) {
  TickMark2[TickMark2["ACTIVE"] = 0] = "ACTIVE";
  TickMark2[TickMark2["INACTIVE"] = 1] = "INACTIVE";
})(TickMark || (TickMark = {}));
var Thumb;
(function(Thumb2) {
  Thumb2[Thumb2["START"] = 1] = "START";
  Thumb2[Thumb2["END"] = 2] = "END";
})(Thumb || (Thumb = {}));
/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var AnimationKeys;
(function(AnimationKeys2) {
  AnimationKeys2["SLIDER_UPDATE"] = "slider_update";
})(AnimationKeys || (AnimationKeys = {}));
var HAS_WINDOW = typeof window !== "undefined";
var MDCSliderFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSliderFoundation2, _super);
    function MDCSliderFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCSliderFoundation2.defaultAdapter), adapter)) || this;
      _this.initialStylesRemoved = false;
      _this.isDisabled = false;
      _this.isDiscrete = false;
      _this.step = numbers$2.STEP_SIZE;
      _this.minRange = numbers$2.MIN_RANGE;
      _this.hasTickMarks = false;
      _this.isRange = false;
      _this.thumb = null;
      _this.downEventClientX = null;
      _this.startThumbKnobWidth = 0;
      _this.endThumbKnobWidth = 0;
      _this.animFrame = new AnimationFrame();
      return _this;
    }
    Object.defineProperty(MDCSliderFoundation2, "defaultAdapter", {
      get: function() {
        return {
          hasClass: function() {
            return false;
          },
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          addThumbClass: function() {
            return void 0;
          },
          removeThumbClass: function() {
            return void 0;
          },
          getAttribute: function() {
            return null;
          },
          getInputValue: function() {
            return "";
          },
          setInputValue: function() {
            return void 0;
          },
          getInputAttribute: function() {
            return null;
          },
          setInputAttribute: function() {
            return null;
          },
          removeInputAttribute: function() {
            return null;
          },
          focusInput: function() {
            return void 0;
          },
          isInputFocused: function() {
            return false;
          },
          shouldHideFocusStylesForPointerEvents: function() {
            return false;
          },
          getThumbKnobWidth: function() {
            return 0;
          },
          getValueIndicatorContainerWidth: function() {
            return 0;
          },
          getThumbBoundingClientRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          getBoundingClientRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          isRTL: function() {
            return false;
          },
          setThumbStyleProperty: function() {
            return void 0;
          },
          removeThumbStyleProperty: function() {
            return void 0;
          },
          setTrackActiveStyleProperty: function() {
            return void 0;
          },
          removeTrackActiveStyleProperty: function() {
            return void 0;
          },
          setValueIndicatorText: function() {
            return void 0;
          },
          getValueToAriaValueTextFn: function() {
            return null;
          },
          updateTickMarks: function() {
            return void 0;
          },
          setPointerCapture: function() {
            return void 0;
          },
          emitChangeEvent: function() {
            return void 0;
          },
          emitInputEvent: function() {
            return void 0;
          },
          emitDragStartEvent: function() {
            return void 0;
          },
          emitDragEndEvent: function() {
            return void 0;
          },
          registerEventHandler: function() {
            return void 0;
          },
          deregisterEventHandler: function() {
            return void 0;
          },
          registerThumbEventHandler: function() {
            return void 0;
          },
          deregisterThumbEventHandler: function() {
            return void 0;
          },
          registerInputEventHandler: function() {
            return void 0;
          },
          deregisterInputEventHandler: function() {
            return void 0;
          },
          registerBodyEventHandler: function() {
            return void 0;
          },
          deregisterBodyEventHandler: function() {
            return void 0;
          },
          registerWindowEventHandler: function() {
            return void 0;
          },
          deregisterWindowEventHandler: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSliderFoundation2.prototype.init = function() {
      var _this = this;
      this.isDisabled = this.adapter.hasClass(cssClasses$2.DISABLED);
      this.isDiscrete = this.adapter.hasClass(cssClasses$2.DISCRETE);
      this.hasTickMarks = this.adapter.hasClass(cssClasses$2.TICK_MARKS);
      this.isRange = this.adapter.hasClass(cssClasses$2.RANGE);
      var min = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_MIN, this.isRange ? Thumb.START : Thumb.END), attributes.INPUT_MIN);
      var max = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_MAX, Thumb.END), attributes.INPUT_MAX);
      var value = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_VALUE, Thumb.END), attributes.INPUT_VALUE);
      var valueStart = this.isRange ? this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_VALUE, Thumb.START), attributes.INPUT_VALUE) : min;
      var stepAttr = this.adapter.getInputAttribute(attributes.INPUT_STEP, Thumb.END);
      var step = stepAttr ? this.convertAttributeValueToNumber(stepAttr, attributes.INPUT_STEP) : this.step;
      var minRangeAttr = this.adapter.getAttribute(attributes.DATA_MIN_RANGE);
      var minRange = minRangeAttr ? this.convertAttributeValueToNumber(minRangeAttr, attributes.DATA_MIN_RANGE) : this.minRange;
      this.validateProperties({ min, max, value, valueStart, step, minRange });
      this.min = min;
      this.max = max;
      this.value = value;
      this.valueStart = valueStart;
      this.step = step;
      this.minRange = minRange;
      this.numDecimalPlaces = getNumDecimalPlaces(this.step);
      this.valueBeforeDownEvent = value;
      this.valueStartBeforeDownEvent = valueStart;
      this.mousedownOrTouchstartListener = this.handleMousedownOrTouchstart.bind(this);
      this.moveListener = this.handleMove.bind(this);
      this.pointerdownListener = this.handlePointerdown.bind(this);
      this.pointerupListener = this.handlePointerup.bind(this);
      this.thumbMouseenterListener = this.handleThumbMouseenter.bind(this);
      this.thumbMouseleaveListener = this.handleThumbMouseleave.bind(this);
      this.inputStartChangeListener = function() {
        _this.handleInputChange(Thumb.START);
      };
      this.inputEndChangeListener = function() {
        _this.handleInputChange(Thumb.END);
      };
      this.inputStartFocusListener = function() {
        _this.handleInputFocus(Thumb.START);
      };
      this.inputEndFocusListener = function() {
        _this.handleInputFocus(Thumb.END);
      };
      this.inputStartBlurListener = function() {
        _this.handleInputBlur(Thumb.START);
      };
      this.inputEndBlurListener = function() {
        _this.handleInputBlur(Thumb.END);
      };
      this.resizeListener = this.handleResize.bind(this);
      this.registerEventHandlers();
    };
    MDCSliderFoundation2.prototype.destroy = function() {
      this.deregisterEventHandlers();
    };
    MDCSliderFoundation2.prototype.setMin = function(value) {
      this.min = value;
      if (!this.isRange) {
        this.valueStart = value;
      }
      this.updateUI();
    };
    MDCSliderFoundation2.prototype.setMax = function(value) {
      this.max = value;
      this.updateUI();
    };
    MDCSliderFoundation2.prototype.getMin = function() {
      return this.min;
    };
    MDCSliderFoundation2.prototype.getMax = function() {
      return this.max;
    };
    MDCSliderFoundation2.prototype.getValue = function() {
      return this.value;
    };
    MDCSliderFoundation2.prototype.setValue = function(value) {
      if (this.isRange && value < this.valueStart + this.minRange) {
        throw new Error("end thumb value (" + value + ") must be >= start thumb " + ("value (" + this.valueStart + ") + min range (" + this.minRange + ")"));
      }
      this.updateValue(value, Thumb.END);
    };
    MDCSliderFoundation2.prototype.getValueStart = function() {
      if (!this.isRange) {
        throw new Error("`valueStart` is only applicable for range sliders.");
      }
      return this.valueStart;
    };
    MDCSliderFoundation2.prototype.setValueStart = function(valueStart) {
      if (!this.isRange) {
        throw new Error("`valueStart` is only applicable for range sliders.");
      }
      if (this.isRange && valueStart > this.value - this.minRange) {
        throw new Error("start thumb value (" + valueStart + ") must be <= end thumb " + ("value (" + this.value + ") - min range (" + this.minRange + ")"));
      }
      this.updateValue(valueStart, Thumb.START);
    };
    MDCSliderFoundation2.prototype.setStep = function(value) {
      this.step = value;
      this.numDecimalPlaces = getNumDecimalPlaces(value);
      this.updateUI();
    };
    MDCSliderFoundation2.prototype.setMinRange = function(value) {
      if (!this.isRange) {
        throw new Error("`minRange` is only applicable for range sliders.");
      }
      if (value < 0) {
        throw new Error("`minRange` must be non-negative. " + ("Current value: " + value));
      }
      if (this.value - this.valueStart < value) {
        throw new Error("start thumb value (" + this.valueStart + ") and end thumb value " + ("(" + this.value + ") must differ by at least " + value + "."));
      }
      this.minRange = value;
    };
    MDCSliderFoundation2.prototype.setIsDiscrete = function(value) {
      this.isDiscrete = value;
      this.updateValueIndicatorUI();
      this.updateTickMarksUI();
    };
    MDCSliderFoundation2.prototype.getStep = function() {
      return this.step;
    };
    MDCSliderFoundation2.prototype.getMinRange = function() {
      if (!this.isRange) {
        throw new Error("`minRange` is only applicable for range sliders.");
      }
      return this.minRange;
    };
    MDCSliderFoundation2.prototype.setHasTickMarks = function(value) {
      this.hasTickMarks = value;
      this.updateTickMarksUI();
    };
    MDCSliderFoundation2.prototype.getDisabled = function() {
      return this.isDisabled;
    };
    MDCSliderFoundation2.prototype.setDisabled = function(disabled) {
      this.isDisabled = disabled;
      if (disabled) {
        this.adapter.addClass(cssClasses$2.DISABLED);
        if (this.isRange) {
          this.adapter.setInputAttribute(attributes.INPUT_DISABLED, "", Thumb.START);
        }
        this.adapter.setInputAttribute(attributes.INPUT_DISABLED, "", Thumb.END);
      } else {
        this.adapter.removeClass(cssClasses$2.DISABLED);
        if (this.isRange) {
          this.adapter.removeInputAttribute(attributes.INPUT_DISABLED, Thumb.START);
        }
        this.adapter.removeInputAttribute(attributes.INPUT_DISABLED, Thumb.END);
      }
    };
    MDCSliderFoundation2.prototype.getIsRange = function() {
      return this.isRange;
    };
    MDCSliderFoundation2.prototype.layout = function(_a2) {
      var _b2 = _a2 === void 0 ? {} : _a2, skipUpdateUI = _b2.skipUpdateUI;
      this.rect = this.adapter.getBoundingClientRect();
      if (this.isRange) {
        this.startThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.START);
        this.endThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.END);
      }
      if (!skipUpdateUI) {
        this.updateUI();
      }
    };
    MDCSliderFoundation2.prototype.handleResize = function() {
      this.layout();
    };
    MDCSliderFoundation2.prototype.handleDown = function(event) {
      if (this.isDisabled)
        return;
      this.valueStartBeforeDownEvent = this.valueStart;
      this.valueBeforeDownEvent = this.value;
      var clientX = event.clientX != null ? event.clientX : event.targetTouches[0].clientX;
      this.downEventClientX = clientX;
      var value = this.mapClientXOnSliderScale(clientX);
      this.thumb = this.getThumbFromDownEvent(clientX, value);
      if (this.thumb === null)
        return;
      this.handleDragStart(event, value, this.thumb);
      this.updateValue(value, this.thumb, { emitInputEvent: true });
    };
    MDCSliderFoundation2.prototype.handleMove = function(event) {
      if (this.isDisabled)
        return;
      event.preventDefault();
      var clientX = event.clientX != null ? event.clientX : event.targetTouches[0].clientX;
      var dragAlreadyStarted = this.thumb != null;
      this.thumb = this.getThumbFromMoveEvent(clientX);
      if (this.thumb === null)
        return;
      var value = this.mapClientXOnSliderScale(clientX);
      if (!dragAlreadyStarted) {
        this.handleDragStart(event, value, this.thumb);
        this.adapter.emitDragStartEvent(value, this.thumb);
      }
      this.updateValue(value, this.thumb, { emitInputEvent: true });
    };
    MDCSliderFoundation2.prototype.handleUp = function() {
      var _a2, _b2;
      if (this.isDisabled || this.thumb === null)
        return;
      if ((_b2 = (_a2 = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b2 === void 0 ? void 0 : _b2.call(_a2)) {
        this.handleInputBlur(this.thumb);
      }
      var oldValue = this.thumb === Thumb.START ? this.valueStartBeforeDownEvent : this.valueBeforeDownEvent;
      var newValue = this.thumb === Thumb.START ? this.valueStart : this.value;
      if (oldValue !== newValue) {
        this.adapter.emitChangeEvent(newValue, this.thumb);
      }
      this.adapter.emitDragEndEvent(newValue, this.thumb);
      this.thumb = null;
    };
    MDCSliderFoundation2.prototype.handleThumbMouseenter = function() {
      if (!this.isDiscrete || !this.isRange)
        return;
      this.adapter.addThumbClass(cssClasses$2.THUMB_WITH_INDICATOR, Thumb.START);
      this.adapter.addThumbClass(cssClasses$2.THUMB_WITH_INDICATOR, Thumb.END);
    };
    MDCSliderFoundation2.prototype.handleThumbMouseleave = function() {
      var _a2, _b2;
      if (!this.isDiscrete || !this.isRange)
        return;
      if (!((_b2 = (_a2 = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b2 === void 0 ? void 0 : _b2.call(_a2)) && (this.adapter.isInputFocused(Thumb.START) || this.adapter.isInputFocused(Thumb.END)) || this.thumb) {
        return;
      }
      this.adapter.removeThumbClass(cssClasses$2.THUMB_WITH_INDICATOR, Thumb.START);
      this.adapter.removeThumbClass(cssClasses$2.THUMB_WITH_INDICATOR, Thumb.END);
    };
    MDCSliderFoundation2.prototype.handleMousedownOrTouchstart = function(event) {
      var _this = this;
      var moveEventType = event.type === "mousedown" ? "mousemove" : "touchmove";
      this.adapter.registerBodyEventHandler(moveEventType, this.moveListener);
      var upHandler = function() {
        _this.handleUp();
        _this.adapter.deregisterBodyEventHandler(moveEventType, _this.moveListener);
        _this.adapter.deregisterEventHandler("mouseup", upHandler);
        _this.adapter.deregisterEventHandler("touchend", upHandler);
      };
      this.adapter.registerBodyEventHandler("mouseup", upHandler);
      this.adapter.registerBodyEventHandler("touchend", upHandler);
      this.handleDown(event);
    };
    MDCSliderFoundation2.prototype.handlePointerdown = function(event) {
      var isPrimaryButton = event.button === 0;
      if (!isPrimaryButton)
        return;
      if (event.pointerId != null) {
        this.adapter.setPointerCapture(event.pointerId);
      }
      this.adapter.registerEventHandler("pointermove", this.moveListener);
      this.handleDown(event);
    };
    MDCSliderFoundation2.prototype.handleInputChange = function(thumb) {
      var value = Number(this.adapter.getInputValue(thumb));
      if (thumb === Thumb.START) {
        this.setValueStart(value);
      } else {
        this.setValue(value);
      }
      this.adapter.emitChangeEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
      this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
    };
    MDCSliderFoundation2.prototype.handleInputFocus = function(thumb) {
      this.adapter.addThumbClass(cssClasses$2.THUMB_FOCUSED, thumb);
      if (!this.isDiscrete)
        return;
      this.adapter.addThumbClass(cssClasses$2.THUMB_WITH_INDICATOR, thumb);
      if (this.isRange) {
        var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;
        this.adapter.addThumbClass(cssClasses$2.THUMB_WITH_INDICATOR, otherThumb);
      }
    };
    MDCSliderFoundation2.prototype.handleInputBlur = function(thumb) {
      this.adapter.removeThumbClass(cssClasses$2.THUMB_FOCUSED, thumb);
      if (!this.isDiscrete)
        return;
      this.adapter.removeThumbClass(cssClasses$2.THUMB_WITH_INDICATOR, thumb);
      if (this.isRange) {
        var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;
        this.adapter.removeThumbClass(cssClasses$2.THUMB_WITH_INDICATOR, otherThumb);
      }
    };
    MDCSliderFoundation2.prototype.handleDragStart = function(event, value, thumb) {
      var _a2, _b2;
      this.adapter.emitDragStartEvent(value, thumb);
      this.adapter.focusInput(thumb);
      if ((_b2 = (_a2 = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b2 === void 0 ? void 0 : _b2.call(_a2)) {
        this.handleInputFocus(thumb);
      }
      event.preventDefault();
    };
    MDCSliderFoundation2.prototype.getThumbFromDownEvent = function(clientX, value) {
      if (!this.isRange)
        return Thumb.END;
      var thumbStartRect = this.adapter.getThumbBoundingClientRect(Thumb.START);
      var thumbEndRect = this.adapter.getThumbBoundingClientRect(Thumb.END);
      var inThumbStartBounds = clientX >= thumbStartRect.left && clientX <= thumbStartRect.right;
      var inThumbEndBounds = clientX >= thumbEndRect.left && clientX <= thumbEndRect.right;
      if (inThumbStartBounds && inThumbEndBounds) {
        return null;
      }
      if (inThumbStartBounds) {
        return Thumb.START;
      }
      if (inThumbEndBounds) {
        return Thumb.END;
      }
      if (value < this.valueStart) {
        return Thumb.START;
      }
      if (value > this.value) {
        return Thumb.END;
      }
      return value - this.valueStart <= this.value - value ? Thumb.START : Thumb.END;
    };
    MDCSliderFoundation2.prototype.getThumbFromMoveEvent = function(clientX) {
      if (this.thumb !== null)
        return this.thumb;
      if (this.downEventClientX === null) {
        throw new Error("`downEventClientX` is null after move event.");
      }
      var moveDistanceUnderThreshold = Math.abs(this.downEventClientX - clientX) < numbers$2.THUMB_UPDATE_MIN_PX;
      if (moveDistanceUnderThreshold)
        return this.thumb;
      var draggedThumbToLeft = clientX < this.downEventClientX;
      if (draggedThumbToLeft) {
        return this.adapter.isRTL() ? Thumb.END : Thumb.START;
      } else {
        return this.adapter.isRTL() ? Thumb.START : Thumb.END;
      }
    };
    MDCSliderFoundation2.prototype.updateUI = function(thumb) {
      if (thumb) {
        this.updateThumbAndInputAttributes(thumb);
      } else {
        this.updateThumbAndInputAttributes(Thumb.START);
        this.updateThumbAndInputAttributes(Thumb.END);
      }
      this.updateThumbAndTrackUI(thumb);
      this.updateValueIndicatorUI(thumb);
      this.updateTickMarksUI();
    };
    MDCSliderFoundation2.prototype.updateThumbAndInputAttributes = function(thumb) {
      if (!thumb)
        return;
      var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;
      var valueStr = String(value);
      this.adapter.setInputAttribute(attributes.INPUT_VALUE, valueStr, thumb);
      if (this.isRange && thumb === Thumb.START) {
        this.adapter.setInputAttribute(attributes.INPUT_MIN, String(value + this.minRange), Thumb.END);
      } else if (this.isRange && thumb === Thumb.END) {
        this.adapter.setInputAttribute(attributes.INPUT_MAX, String(value - this.minRange), Thumb.START);
      }
      if (this.adapter.getInputValue(thumb) !== valueStr) {
        this.adapter.setInputValue(valueStr, thumb);
      }
      var valueToAriaValueTextFn = this.adapter.getValueToAriaValueTextFn();
      if (valueToAriaValueTextFn) {
        this.adapter.setInputAttribute(attributes.ARIA_VALUETEXT, valueToAriaValueTextFn(value, thumb), thumb);
      }
    };
    MDCSliderFoundation2.prototype.updateValueIndicatorUI = function(thumb) {
      if (!this.isDiscrete)
        return;
      var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;
      this.adapter.setValueIndicatorText(value, thumb === Thumb.START ? Thumb.START : Thumb.END);
      if (!thumb && this.isRange) {
        this.adapter.setValueIndicatorText(this.valueStart, Thumb.START);
      }
    };
    MDCSliderFoundation2.prototype.updateTickMarksUI = function() {
      if (!this.isDiscrete || !this.hasTickMarks)
        return;
      var numTickMarksInactiveStart = (this.valueStart - this.min) / this.step;
      var numTickMarksActive = (this.value - this.valueStart) / this.step + 1;
      var numTickMarksInactiveEnd = (this.max - this.value) / this.step;
      var tickMarksInactiveStart = Array.from({ length: numTickMarksInactiveStart }).fill(TickMark.INACTIVE);
      var tickMarksActive = Array.from({ length: numTickMarksActive }).fill(TickMark.ACTIVE);
      var tickMarksInactiveEnd = Array.from({ length: numTickMarksInactiveEnd }).fill(TickMark.INACTIVE);
      this.adapter.updateTickMarks(tickMarksInactiveStart.concat(tickMarksActive).concat(tickMarksInactiveEnd));
    };
    MDCSliderFoundation2.prototype.mapClientXOnSliderScale = function(clientX) {
      var xPos = clientX - this.rect.left;
      var pctComplete = xPos / this.rect.width;
      if (this.adapter.isRTL()) {
        pctComplete = 1 - pctComplete;
      }
      var value = this.min + pctComplete * (this.max - this.min);
      if (value === this.max || value === this.min) {
        return value;
      }
      return Number(this.quantize(value).toFixed(this.numDecimalPlaces));
    };
    MDCSliderFoundation2.prototype.quantize = function(value) {
      var numSteps = Math.round((value - this.min) / this.step);
      return this.min + numSteps * this.step;
    };
    MDCSliderFoundation2.prototype.updateValue = function(value, thumb, _a2) {
      var _b2 = _a2 === void 0 ? {} : _a2, emitInputEvent = _b2.emitInputEvent;
      value = this.clampValue(value, thumb);
      if (this.isRange && thumb === Thumb.START) {
        if (this.valueStart === value)
          return;
        this.valueStart = value;
      } else {
        if (this.value === value)
          return;
        this.value = value;
      }
      this.updateUI(thumb);
      if (emitInputEvent) {
        this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
      }
    };
    MDCSliderFoundation2.prototype.clampValue = function(value, thumb) {
      value = Math.min(Math.max(value, this.min), this.max);
      var thumbStartMovedPastThumbEnd = this.isRange && thumb === Thumb.START && value > this.value - this.minRange;
      if (thumbStartMovedPastThumbEnd) {
        return this.value - this.minRange;
      }
      var thumbEndMovedPastThumbStart = this.isRange && thumb === Thumb.END && value < this.valueStart + this.minRange;
      if (thumbEndMovedPastThumbStart) {
        return this.valueStart + this.minRange;
      }
      return value;
    };
    MDCSliderFoundation2.prototype.updateThumbAndTrackUI = function(thumb) {
      var _this = this;
      var _a2 = this, max = _a2.max, min = _a2.min;
      var pctComplete = (this.value - this.valueStart) / (max - min);
      var rangePx = pctComplete * this.rect.width;
      var isRtl = this.adapter.isRTL();
      var transformProp = HAS_WINDOW ? getCorrectPropertyName(window, "transform") : "transform";
      if (this.isRange) {
        var thumbLeftPos_1 = this.adapter.isRTL() ? (max - this.value) / (max - min) * this.rect.width : (this.valueStart - min) / (max - min) * this.rect.width;
        var thumbRightPos_1 = thumbLeftPos_1 + rangePx;
        this.animFrame.request(AnimationKeys.SLIDER_UPDATE, function() {
          var trackAnimatesFromRight = !isRtl && thumb === Thumb.START || isRtl && thumb !== Thumb.START;
          if (trackAnimatesFromRight) {
            _this.adapter.setTrackActiveStyleProperty("transform-origin", "right");
            _this.adapter.setTrackActiveStyleProperty("left", "auto");
            _this.adapter.setTrackActiveStyleProperty("right", _this.rect.width - thumbRightPos_1 + "px");
          } else {
            _this.adapter.setTrackActiveStyleProperty("transform-origin", "left");
            _this.adapter.setTrackActiveStyleProperty("right", "auto");
            _this.adapter.setTrackActiveStyleProperty("left", thumbLeftPos_1 + "px");
          }
          _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
          var thumbStartPos = isRtl ? thumbRightPos_1 : thumbLeftPos_1;
          var thumbEndPos = _this.adapter.isRTL() ? thumbLeftPos_1 : thumbRightPos_1;
          if (thumb === Thumb.START || !thumb || !_this.initialStylesRemoved) {
            _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", Thumb.START);
            _this.alignValueIndicator(Thumb.START, thumbStartPos);
          }
          if (thumb === Thumb.END || !thumb || !_this.initialStylesRemoved) {
            _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbEndPos + "px)", Thumb.END);
            _this.alignValueIndicator(Thumb.END, thumbEndPos);
          }
          _this.removeInitialStyles(isRtl);
          _this.updateOverlappingThumbsUI(thumbStartPos, thumbEndPos, thumb);
        });
      } else {
        this.animFrame.request(AnimationKeys.SLIDER_UPDATE, function() {
          var thumbStartPos = isRtl ? _this.rect.width - rangePx : rangePx;
          _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", Thumb.END);
          _this.alignValueIndicator(Thumb.END, thumbStartPos);
          _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
          _this.removeInitialStyles(isRtl);
        });
      }
    };
    MDCSliderFoundation2.prototype.alignValueIndicator = function(thumb, thumbPos) {
      if (!this.isDiscrete)
        return;
      var thumbHalfWidth = this.adapter.getThumbBoundingClientRect(thumb).width / 2;
      var containerWidth = this.adapter.getValueIndicatorContainerWidth(thumb);
      var sliderWidth = this.adapter.getBoundingClientRect().width;
      if (containerWidth / 2 > thumbPos + thumbHalfWidth) {
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CARET_LEFT, thumbHalfWidth + "px", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CARET_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(-50%)", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "0", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "none", thumb);
      } else if (containerWidth / 2 > sliderWidth - thumbPos + thumbHalfWidth) {
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CARET_LEFT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CARET_RIGHT, thumbHalfWidth + "px", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(50%)", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "0", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "none", thumb);
      } else {
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CARET_LEFT, "50%", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CARET_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(-50%)", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "50%", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings$2.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "translateX(-50%)", thumb);
      }
    };
    MDCSliderFoundation2.prototype.removeInitialStyles = function(isRtl) {
      if (this.initialStylesRemoved)
        return;
      var position = isRtl ? "right" : "left";
      this.adapter.removeThumbStyleProperty(position, Thumb.END);
      if (this.isRange) {
        this.adapter.removeThumbStyleProperty(position, Thumb.START);
      }
      this.initialStylesRemoved = true;
      this.resetTrackAndThumbAnimation();
    };
    MDCSliderFoundation2.prototype.resetTrackAndThumbAnimation = function() {
      var _this = this;
      if (!this.isDiscrete)
        return;
      var transitionProp = HAS_WINDOW ? getCorrectPropertyName(window, "transition") : "transition";
      var transitionDefault = "none 0s ease 0s";
      this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.END);
      if (this.isRange) {
        this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.START);
      }
      this.adapter.setTrackActiveStyleProperty(transitionProp, transitionDefault);
      requestAnimationFrame(function() {
        _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.END);
        _this.adapter.removeTrackActiveStyleProperty(transitionProp);
        if (_this.isRange) {
          _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.START);
        }
      });
    };
    MDCSliderFoundation2.prototype.updateOverlappingThumbsUI = function(thumbStartPos, thumbEndPos, thumb) {
      var thumbsOverlap = false;
      if (this.adapter.isRTL()) {
        var startThumbLeftEdge = thumbStartPos - this.startThumbKnobWidth / 2;
        var endThumbRightEdge = thumbEndPos + this.endThumbKnobWidth / 2;
        thumbsOverlap = endThumbRightEdge >= startThumbLeftEdge;
      } else {
        var startThumbRightEdge = thumbStartPos + this.startThumbKnobWidth / 2;
        var endThumbLeftEdge = thumbEndPos - this.endThumbKnobWidth / 2;
        thumbsOverlap = startThumbRightEdge >= endThumbLeftEdge;
      }
      if (thumbsOverlap) {
        this.adapter.addThumbClass(
          cssClasses$2.THUMB_TOP,
          // If no thumb was dragged (in the case of initial layout), end
          // thumb is on top by default.
          thumb || Thumb.END
        );
        this.adapter.removeThumbClass(cssClasses$2.THUMB_TOP, thumb === Thumb.START ? Thumb.END : Thumb.START);
      } else {
        this.adapter.removeThumbClass(cssClasses$2.THUMB_TOP, Thumb.START);
        this.adapter.removeThumbClass(cssClasses$2.THUMB_TOP, Thumb.END);
      }
    };
    MDCSliderFoundation2.prototype.convertAttributeValueToNumber = function(attributeValue, attributeName) {
      if (attributeValue === null) {
        throw new Error("MDCSliderFoundation: `" + attributeName + "` must be non-null.");
      }
      var value = Number(attributeValue);
      if (isNaN(value)) {
        throw new Error("MDCSliderFoundation: `" + attributeName + "` value is `" + attributeValue + "`, but must be a number.");
      }
      return value;
    };
    MDCSliderFoundation2.prototype.validateProperties = function(_a2) {
      var min = _a2.min, max = _a2.max, value = _a2.value, valueStart = _a2.valueStart, step = _a2.step, minRange = _a2.minRange;
      if (min >= max) {
        throw new Error("MDCSliderFoundation: min must be strictly less than max. " + ("Current: [min: " + min + ", max: " + max + "]"));
      }
      if (step <= 0) {
        throw new Error("MDCSliderFoundation: step must be a positive number. " + ("Current step: " + step));
      }
      if (this.isRange) {
        if (value < min || value > max || valueStart < min || valueStart > max) {
          throw new Error("MDCSliderFoundation: values must be in [min, max] range. " + ("Current values: [start value: " + valueStart + ", end value: ") + (value + ", min: " + min + ", max: " + max + "]"));
        }
        if (valueStart > value) {
          throw new Error("MDCSliderFoundation: start value must be <= end value. " + ("Current values: [start value: " + valueStart + ", end value: " + value + "]"));
        }
        if (minRange < 0) {
          throw new Error("MDCSliderFoundation: minimum range must be non-negative. " + ("Current min range: " + minRange));
        }
        if (value - valueStart < minRange) {
          throw new Error("MDCSliderFoundation: start value and end value must differ by at least " + (minRange + ". Current values: [start value: " + valueStart + ", ") + ("end value: " + value + "]"));
        }
        var numStepsValueStartFromMin = (valueStart - min) / step;
        var numStepsValueFromMin = (value - min) / step;
        if (!Number.isInteger(parseFloat(numStepsValueStartFromMin.toFixed(6))) || !Number.isInteger(parseFloat(numStepsValueFromMin.toFixed(6)))) {
          throw new Error("MDCSliderFoundation: Slider values must be valid based on the " + ("step value (" + step + "). Current values: [start value: ") + (valueStart + ", end value: " + value + ", min: " + min + "]"));
        }
      } else {
        if (value < min || value > max) {
          throw new Error("MDCSliderFoundation: value must be in [min, max] range. " + ("Current values: [value: " + value + ", min: " + min + ", max: " + max + "]"));
        }
        var numStepsValueFromMin = (value - min) / step;
        if (!Number.isInteger(parseFloat(numStepsValueFromMin.toFixed(6)))) {
          throw new Error("MDCSliderFoundation: Slider value must be valid based on the " + ("step value (" + step + "). Current value: " + value));
        }
      }
    };
    MDCSliderFoundation2.prototype.registerEventHandlers = function() {
      this.adapter.registerWindowEventHandler("resize", this.resizeListener);
      if (MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS) {
        this.adapter.registerEventHandler("pointerdown", this.pointerdownListener);
        this.adapter.registerEventHandler("pointerup", this.pointerupListener);
      } else {
        this.adapter.registerEventHandler("mousedown", this.mousedownOrTouchstartListener);
        this.adapter.registerEventHandler("touchstart", this.mousedownOrTouchstartListener);
      }
      if (this.isRange) {
        this.adapter.registerThumbEventHandler(Thumb.START, "mouseenter", this.thumbMouseenterListener);
        this.adapter.registerThumbEventHandler(Thumb.START, "mouseleave", this.thumbMouseleaveListener);
        this.adapter.registerInputEventHandler(Thumb.START, "change", this.inputStartChangeListener);
        this.adapter.registerInputEventHandler(Thumb.START, "focus", this.inputStartFocusListener);
        this.adapter.registerInputEventHandler(Thumb.START, "blur", this.inputStartBlurListener);
      }
      this.adapter.registerThumbEventHandler(Thumb.END, "mouseenter", this.thumbMouseenterListener);
      this.adapter.registerThumbEventHandler(Thumb.END, "mouseleave", this.thumbMouseleaveListener);
      this.adapter.registerInputEventHandler(Thumb.END, "change", this.inputEndChangeListener);
      this.adapter.registerInputEventHandler(Thumb.END, "focus", this.inputEndFocusListener);
      this.adapter.registerInputEventHandler(Thumb.END, "blur", this.inputEndBlurListener);
    };
    MDCSliderFoundation2.prototype.deregisterEventHandlers = function() {
      this.adapter.deregisterWindowEventHandler("resize", this.resizeListener);
      if (MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS) {
        this.adapter.deregisterEventHandler("pointerdown", this.pointerdownListener);
        this.adapter.deregisterEventHandler("pointerup", this.pointerupListener);
      } else {
        this.adapter.deregisterEventHandler("mousedown", this.mousedownOrTouchstartListener);
        this.adapter.deregisterEventHandler("touchstart", this.mousedownOrTouchstartListener);
      }
      if (this.isRange) {
        this.adapter.deregisterThumbEventHandler(Thumb.START, "mouseenter", this.thumbMouseenterListener);
        this.adapter.deregisterThumbEventHandler(Thumb.START, "mouseleave", this.thumbMouseleaveListener);
        this.adapter.deregisterInputEventHandler(Thumb.START, "change", this.inputStartChangeListener);
        this.adapter.deregisterInputEventHandler(Thumb.START, "focus", this.inputStartFocusListener);
        this.adapter.deregisterInputEventHandler(Thumb.START, "blur", this.inputStartBlurListener);
      }
      this.adapter.deregisterThumbEventHandler(Thumb.END, "mouseenter", this.thumbMouseenterListener);
      this.adapter.deregisterThumbEventHandler(Thumb.END, "mouseleave", this.thumbMouseleaveListener);
      this.adapter.deregisterInputEventHandler(Thumb.END, "change", this.inputEndChangeListener);
      this.adapter.deregisterInputEventHandler(Thumb.END, "focus", this.inputEndFocusListener);
      this.adapter.deregisterInputEventHandler(Thumb.END, "blur", this.inputEndBlurListener);
    };
    MDCSliderFoundation2.prototype.handlePointerup = function() {
      this.handleUp();
      this.adapter.deregisterEventHandler("pointermove", this.moveListener);
    };
    MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS = HAS_WINDOW && Boolean(window.PointerEvent) && // #setPointerCapture is buggy on iOS, so we can't use pointer events
    // until the following bug is fixed:
    // https://bugs.webkit.org/show_bug.cgi?id=220196
    !isIOS();
    return MDCSliderFoundation2;
  }(MDCFoundation)
);
function isIOS() {
  return [
    "iPad Simulator",
    "iPhone Simulator",
    "iPod Simulator",
    "iPad",
    "iPhone",
    "iPod"
  ].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
function getNumDecimalPlaces(n) {
  var match2 = /(?:\.(\d+))?(?:[eE]([+\-]?\d+))?$/.exec(String(n));
  if (!match2)
    return 0;
  var fraction = match2[1] || "";
  var exponent = match2[2] || 0;
  return Math.max(
    0,
    // lower limit
    (fraction === "0" ? 0 : fraction.length) - Number(exponent)
  );
}
function get_each_context$7(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[92] = list[i2];
  return child_ctx;
}
function create_else_block_1$3(ctx) {
  let input_1;
  let input_1_class_value;
  let mounted;
  let dispose;
  let input_1_levels = [
    {
      class: input_1_class_value = classMap({
        [
          /*input$class*/
          ctx[13]
        ]: true,
        "mdc-slider__input": true
      })
    },
    { type: "range" },
    { disabled: (
      /*disabled*/
      ctx[5]
    ) },
    { step: (
      /*step*/
      ctx[9]
    ) },
    { min: (
      /*min*/
      ctx[10]
    ) },
    { max: (
      /*max*/
      ctx[11]
    ) },
    /*inputProps*/
    ctx[33],
    /*inputAttrs*/
    ctx[24],
    prefixFilter(
      /*$$restProps*/
      ctx[37],
      "input$"
    )
  ];
  let input_data = {};
  for (let i2 = 0; i2 < input_1_levels.length; i2 += 1) {
    input_data = assign$1(input_data, input_1_levels[i2]);
  }
  return {
    c() {
      input_1 = element("input");
      this.h();
    },
    l(nodes) {
      input_1 = claim_element(nodes, "INPUT", {
        class: true,
        type: true,
        step: true,
        min: true,
        max: true
      });
      this.h();
    },
    h() {
      set_attributes(input_1, input_data);
    },
    m(target, anchor) {
      insert_hydration(target, input_1, anchor);
      if (input_1.autofocus)
        input_1.focus();
      ctx[62](input_1);
      set_input_value(
        input_1,
        /*value*/
        ctx[0]
      );
      if (!mounted) {
        dispose = [
          listen(
            input_1,
            "change",
            /*input_1_change_input_handler*/
            ctx[63]
          ),
          listen(
            input_1,
            "input",
            /*input_1_change_input_handler*/
            ctx[63]
          ),
          listen(
            input_1,
            "blur",
            /*blur_handler_2*/
            ctx[56]
          ),
          listen(
            input_1,
            "focus",
            /*focus_handler_2*/
            ctx[57]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      set_attributes(input_1, input_data = get_spread_update(input_1_levels, [
        dirty[0] & /*input$class*/
        8192 && input_1_class_value !== (input_1_class_value = classMap({
          [
            /*input$class*/
            ctx2[13]
          ]: true,
          "mdc-slider__input": true
        })) && { class: input_1_class_value },
        { type: "range" },
        dirty[0] & /*disabled*/
        32 && { disabled: (
          /*disabled*/
          ctx2[5]
        ) },
        dirty[0] & /*step*/
        512 && { step: (
          /*step*/
          ctx2[9]
        ) },
        dirty[0] & /*min*/
        1024 && { min: (
          /*min*/
          ctx2[10]
        ) },
        dirty[0] & /*max*/
        2048 && { max: (
          /*max*/
          ctx2[11]
        ) },
        /*inputProps*/
        ctx2[33],
        dirty[0] & /*inputAttrs*/
        16777216 && /*inputAttrs*/
        ctx2[24],
        dirty[1] & /*$$restProps*/
        64 && prefixFilter(
          /*$$restProps*/
          ctx2[37],
          "input$"
        )
      ]));
      if (dirty[0] & /*value*/
      1) {
        set_input_value(
          input_1,
          /*value*/
          ctx2[0]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input_1);
      }
      ctx[62](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_5$2(ctx) {
  let input0;
  let input0_class_value;
  let t2;
  let input1;
  let input1_class_value;
  let mounted;
  let dispose;
  let input0_levels = [
    {
      class: input0_class_value = classMap({
        [
          /*input$class*/
          ctx[13]
        ]: true,
        "mdc-slider__input": true
      })
    },
    { type: "range" },
    { disabled: (
      /*disabled*/
      ctx[5]
    ) },
    { step: (
      /*step*/
      ctx[9]
    ) },
    { min: (
      /*min*/
      ctx[10]
    ) },
    { max: (
      /*end*/
      ctx[2]
    ) },
    /*inputStartAttrs*/
    ctx[25],
    prefixFilter(
      /*$$restProps*/
      ctx[37],
      "input$"
    )
  ];
  let input_data_1 = {};
  for (let i2 = 0; i2 < input0_levels.length; i2 += 1) {
    input_data_1 = assign$1(input_data_1, input0_levels[i2]);
  }
  let input1_levels = [
    {
      class: input1_class_value = classMap({
        [
          /*input$class*/
          ctx[13]
        ]: true,
        "mdc-slider__input": true
      })
    },
    { type: "range" },
    { disabled: (
      /*disabled*/
      ctx[5]
    ) },
    { step: (
      /*step*/
      ctx[9]
    ) },
    { min: (
      /*start*/
      ctx[1]
    ) },
    { max: (
      /*max*/
      ctx[11]
    ) },
    /*inputProps*/
    ctx[33],
    /*inputAttrs*/
    ctx[24],
    prefixFilter(
      /*$$restProps*/
      ctx[37],
      "input$"
    )
  ];
  let input_data = {};
  for (let i2 = 0; i2 < input1_levels.length; i2 += 1) {
    input_data = assign$1(input_data, input1_levels[i2]);
  }
  return {
    c() {
      input0 = element("input");
      t2 = space();
      input1 = element("input");
      this.h();
    },
    l(nodes) {
      input0 = claim_element(nodes, "INPUT", {
        class: true,
        type: true,
        step: true,
        min: true,
        max: true
      });
      t2 = claim_space(nodes);
      input1 = claim_element(nodes, "INPUT", {
        class: true,
        type: true,
        step: true,
        min: true,
        max: true
      });
      this.h();
    },
    h() {
      set_attributes(input0, input_data_1);
      set_attributes(input1, input_data);
    },
    m(target, anchor) {
      insert_hydration(target, input0, anchor);
      if (input0.autofocus)
        input0.focus();
      ctx[58](input0);
      set_input_value(
        input0,
        /*start*/
        ctx[1]
      );
      insert_hydration(target, t2, anchor);
      insert_hydration(target, input1, anchor);
      if (input1.autofocus)
        input1.focus();
      ctx[60](input1);
      set_input_value(
        input1,
        /*end*/
        ctx[2]
      );
      if (!mounted) {
        dispose = [
          listen(
            input0,
            "change",
            /*input0_change_input_handler*/
            ctx[59]
          ),
          listen(
            input0,
            "input",
            /*input0_change_input_handler*/
            ctx[59]
          ),
          listen(
            input0,
            "blur",
            /*blur_handler*/
            ctx[54]
          ),
          listen(
            input0,
            "focus",
            /*focus_handler*/
            ctx[55]
          ),
          listen(
            input1,
            "change",
            /*input1_change_input_handler*/
            ctx[61]
          ),
          listen(
            input1,
            "input",
            /*input1_change_input_handler*/
            ctx[61]
          ),
          listen(
            input1,
            "blur",
            /*blur_handler_1*/
            ctx[52]
          ),
          listen(
            input1,
            "focus",
            /*focus_handler_1*/
            ctx[53]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      set_attributes(input0, input_data_1 = get_spread_update(input0_levels, [
        dirty[0] & /*input$class*/
        8192 && input0_class_value !== (input0_class_value = classMap({
          [
            /*input$class*/
            ctx2[13]
          ]: true,
          "mdc-slider__input": true
        })) && { class: input0_class_value },
        { type: "range" },
        dirty[0] & /*disabled*/
        32 && { disabled: (
          /*disabled*/
          ctx2[5]
        ) },
        dirty[0] & /*step*/
        512 && { step: (
          /*step*/
          ctx2[9]
        ) },
        dirty[0] & /*min*/
        1024 && { min: (
          /*min*/
          ctx2[10]
        ) },
        dirty[0] & /*end*/
        4 && { max: (
          /*end*/
          ctx2[2]
        ) },
        dirty[0] & /*inputStartAttrs*/
        33554432 && /*inputStartAttrs*/
        ctx2[25],
        dirty[1] & /*$$restProps*/
        64 && prefixFilter(
          /*$$restProps*/
          ctx2[37],
          "input$"
        )
      ]));
      if (dirty[0] & /*start*/
      2) {
        set_input_value(
          input0,
          /*start*/
          ctx2[1]
        );
      }
      set_attributes(input1, input_data = get_spread_update(input1_levels, [
        dirty[0] & /*input$class*/
        8192 && input1_class_value !== (input1_class_value = classMap({
          [
            /*input$class*/
            ctx2[13]
          ]: true,
          "mdc-slider__input": true
        })) && { class: input1_class_value },
        { type: "range" },
        dirty[0] & /*disabled*/
        32 && { disabled: (
          /*disabled*/
          ctx2[5]
        ) },
        dirty[0] & /*step*/
        512 && { step: (
          /*step*/
          ctx2[9]
        ) },
        dirty[0] & /*start*/
        2 && { min: (
          /*start*/
          ctx2[1]
        ) },
        dirty[0] & /*max*/
        2048 && { max: (
          /*max*/
          ctx2[11]
        ) },
        /*inputProps*/
        ctx2[33],
        dirty[0] & /*inputAttrs*/
        16777216 && /*inputAttrs*/
        ctx2[24],
        dirty[1] & /*$$restProps*/
        64 && prefixFilter(
          /*$$restProps*/
          ctx2[37],
          "input$"
        )
      ]));
      if (dirty[0] & /*end*/
      4) {
        set_input_value(
          input1,
          /*end*/
          ctx2[2]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input0);
        detach(t2);
        detach(input1);
      }
      ctx[58](null);
      ctx[60](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_4$3(ctx) {
  let div;
  let each_value = ensure_array_like(
    /*currentTickMarks*/
    ctx[31]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$7(get_each_context$7(ctx, each_value, i2));
  }
  return {
    c() {
      div = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div_nodes);
      }
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "mdc-slider__tick-marks");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div, null);
        }
      }
    },
    p(ctx2, dirty) {
      if (dirty[1] & /*currentTickMarks*/
      1) {
        each_value = ensure_array_like(
          /*currentTickMarks*/
          ctx2[31]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$7(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block$7(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(div, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block$7(ctx) {
  let div;
  let div_class_value;
  return {
    c() {
      div = element("div");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", div_class_value = /*tickMark*/
      ctx[92] === TickMark.ACTIVE ? "mdc-slider__tick-mark--active" : "mdc-slider__tick-mark--inactive");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[1] & /*currentTickMarks*/
      1 && div_class_value !== (div_class_value = /*tickMark*/
      ctx2[92] === TickMark.ACTIVE ? "mdc-slider__tick-mark--active" : "mdc-slider__tick-mark--inactive")) {
        attr(div, "class", div_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_else_block$8(ctx) {
  let div1;
  let t2;
  let div0;
  let div1_class_value;
  let div1_style_value;
  let Ripple_action;
  let mounted;
  let dispose;
  let if_block = (
    /*discrete*/
    ctx[7] && create_if_block_3$6(ctx)
  );
  return {
    c() {
      div1 = element("div");
      if (if_block)
        if_block.c();
      t2 = space();
      div0 = element("div");
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true, style: true });
      var div1_nodes = children(div1);
      if (if_block)
        if_block.l(div1_nodes);
      t2 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      children(div0).forEach(detach);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mdc-slider__thumb-knob");
      attr(div1, "class", div1_class_value = classMap({
        "mdc-slider__thumb": true,
        .../*thumbClasses*/
        ctx[23]
      }));
      attr(div1, "style", div1_style_value = Object.entries(
        /*thumbStyles*/
        ctx[27]
      ).map(func_3).join(" "));
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      if (if_block)
        if_block.m(div1, null);
      append_hydration(div1, t2);
      append_hydration(div1, div0);
      ctx[74](div0);
      ctx[75](div1);
      if (!mounted) {
        dispose = action_destroyer(Ripple_action = Ripple.call(null, div1, {
          unbounded: true,
          disabled: (
            /*disabled*/
            ctx[5]
          ),
          active: (
            /*thumbRippleActive*/
            ctx[29]
          ),
          eventTarget: (
            /*input*/
            ctx[15]
          ),
          activeTarget: (
            /*input*/
            ctx[15]
          ),
          addClass: (
            /*Ripple_function_6*/
            ctx[76]
          ),
          removeClass: (
            /*Ripple_function_7*/
            ctx[77]
          ),
          addStyle: (
            /*Ripple_function_8*/
            ctx[78]
          )
        }));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*discrete*/
        ctx2[7]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_3$6(ctx2);
          if_block.c();
          if_block.m(div1, t2);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty[0] & /*thumbClasses*/
      8388608 && div1_class_value !== (div1_class_value = classMap({
        "mdc-slider__thumb": true,
        .../*thumbClasses*/
        ctx2[23]
      }))) {
        attr(div1, "class", div1_class_value);
      }
      if (dirty[0] & /*thumbStyles*/
      134217728 && div1_style_value !== (div1_style_value = Object.entries(
        /*thumbStyles*/
        ctx2[27]
      ).map(func_3).join(" "))) {
        attr(div1, "style", div1_style_value);
      }
      if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*disabled, thumbRippleActive, input*/
      536903712)
        Ripple_action.update.call(null, {
          unbounded: true,
          disabled: (
            /*disabled*/
            ctx2[5]
          ),
          active: (
            /*thumbRippleActive*/
            ctx2[29]
          ),
          eventTarget: (
            /*input*/
            ctx2[15]
          ),
          activeTarget: (
            /*input*/
            ctx2[15]
          ),
          addClass: (
            /*Ripple_function_6*/
            ctx2[76]
          ),
          removeClass: (
            /*Ripple_function_7*/
            ctx2[77]
          ),
          addStyle: (
            /*Ripple_function_8*/
            ctx2[78]
          )
        });
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block)
        if_block.d();
      ctx[74](null);
      ctx[75](null);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$j(ctx) {
  let div1;
  let t0;
  let div0;
  let div1_class_value;
  let div1_style_value;
  let Ripple_action;
  let t1;
  let div3;
  let t2;
  let div2;
  let div3_class_value;
  let div3_style_value;
  let Ripple_action_1;
  let mounted;
  let dispose;
  let if_block0 = (
    /*discrete*/
    ctx[7] && create_if_block_2$7(ctx)
  );
  let if_block1 = (
    /*discrete*/
    ctx[7] && create_if_block_1$b(ctx)
  );
  return {
    c() {
      div1 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div0 = element("div");
      t1 = space();
      div3 = element("div");
      if (if_block1)
        if_block1.c();
      t2 = space();
      div2 = element("div");
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true, style: true });
      var div1_nodes = children(div1);
      if (if_block0)
        if_block0.l(div1_nodes);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      children(div0).forEach(detach);
      div1_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true, style: true });
      var div3_nodes = children(div3);
      if (if_block1)
        if_block1.l(div3_nodes);
      t2 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      children(div2).forEach(detach);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mdc-slider__thumb-knob");
      attr(div1, "class", div1_class_value = classMap({
        "mdc-slider__thumb": true,
        .../*thumbStartClasses*/
        ctx[22]
      }));
      attr(div1, "style", div1_style_value = Object.entries(
        /*thumbStartStyles*/
        ctx[28]
      ).map(func_1).join(" "));
      attr(div2, "class", "mdc-slider__thumb-knob");
      attr(div3, "class", div3_class_value = classMap({
        "mdc-slider__thumb": true,
        .../*thumbClasses*/
        ctx[23]
      }));
      attr(div3, "style", div3_style_value = Object.entries(
        /*thumbStyles*/
        ctx[27]
      ).map(func_2).join(" "));
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      if (if_block0)
        if_block0.m(div1, null);
      append_hydration(div1, t0);
      append_hydration(div1, div0);
      ctx[64](div0);
      ctx[65](div1);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div3, anchor);
      if (if_block1)
        if_block1.m(div3, null);
      append_hydration(div3, t2);
      append_hydration(div3, div2);
      ctx[69](div2);
      ctx[70](div3);
      if (!mounted) {
        dispose = [
          action_destroyer(Ripple_action = Ripple.call(null, div1, {
            unbounded: true,
            disabled: (
              /*disabled*/
              ctx[5]
            ),
            active: (
              /*thumbStartRippleActive*/
              ctx[30]
            ),
            eventTarget: (
              /*inputStart*/
              ctx[16]
            ),
            activeTarget: (
              /*inputStart*/
              ctx[16]
            ),
            addClass: (
              /*Ripple_function*/
              ctx[66]
            ),
            removeClass: (
              /*Ripple_function_1*/
              ctx[67]
            ),
            addStyle: (
              /*Ripple_function_2*/
              ctx[68]
            )
          })),
          action_destroyer(Ripple_action_1 = Ripple.call(null, div3, {
            unbounded: true,
            disabled: (
              /*disabled*/
              ctx[5]
            ),
            active: (
              /*thumbRippleActive*/
              ctx[29]
            ),
            eventTarget: (
              /*input*/
              ctx[15]
            ),
            activeTarget: (
              /*input*/
              ctx[15]
            ),
            addClass: (
              /*Ripple_function_3*/
              ctx[71]
            ),
            removeClass: (
              /*Ripple_function_4*/
              ctx[72]
            ),
            addStyle: (
              /*Ripple_function_5*/
              ctx[73]
            )
          }))
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*discrete*/
        ctx2[7]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_2$7(ctx2);
          if_block0.c();
          if_block0.m(div1, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty[0] & /*thumbStartClasses*/
      4194304 && div1_class_value !== (div1_class_value = classMap({
        "mdc-slider__thumb": true,
        .../*thumbStartClasses*/
        ctx2[22]
      }))) {
        attr(div1, "class", div1_class_value);
      }
      if (dirty[0] & /*thumbStartStyles*/
      268435456 && div1_style_value !== (div1_style_value = Object.entries(
        /*thumbStartStyles*/
        ctx2[28]
      ).map(func_1).join(" "))) {
        attr(div1, "style", div1_style_value);
      }
      if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*disabled, thumbStartRippleActive, inputStart*/
      1073807392)
        Ripple_action.update.call(null, {
          unbounded: true,
          disabled: (
            /*disabled*/
            ctx2[5]
          ),
          active: (
            /*thumbStartRippleActive*/
            ctx2[30]
          ),
          eventTarget: (
            /*inputStart*/
            ctx2[16]
          ),
          activeTarget: (
            /*inputStart*/
            ctx2[16]
          ),
          addClass: (
            /*Ripple_function*/
            ctx2[66]
          ),
          removeClass: (
            /*Ripple_function_1*/
            ctx2[67]
          ),
          addStyle: (
            /*Ripple_function_2*/
            ctx2[68]
          )
        });
      if (
        /*discrete*/
        ctx2[7]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_1$b(ctx2);
          if_block1.c();
          if_block1.m(div3, t2);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (dirty[0] & /*thumbClasses*/
      8388608 && div3_class_value !== (div3_class_value = classMap({
        "mdc-slider__thumb": true,
        .../*thumbClasses*/
        ctx2[23]
      }))) {
        attr(div3, "class", div3_class_value);
      }
      if (dirty[0] & /*thumbStyles*/
      134217728 && div3_style_value !== (div3_style_value = Object.entries(
        /*thumbStyles*/
        ctx2[27]
      ).map(func_2).join(" "))) {
        attr(div3, "style", div3_style_value);
      }
      if (Ripple_action_1 && is_function(Ripple_action_1.update) && dirty[0] & /*disabled, thumbRippleActive, input*/
      536903712)
        Ripple_action_1.update.call(null, {
          unbounded: true,
          disabled: (
            /*disabled*/
            ctx2[5]
          ),
          active: (
            /*thumbRippleActive*/
            ctx2[29]
          ),
          eventTarget: (
            /*input*/
            ctx2[15]
          ),
          activeTarget: (
            /*input*/
            ctx2[15]
          ),
          addClass: (
            /*Ripple_function_3*/
            ctx2[71]
          ),
          removeClass: (
            /*Ripple_function_4*/
            ctx2[72]
          ),
          addStyle: (
            /*Ripple_function_5*/
            ctx2[73]
          )
        });
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t1);
        detach(div3);
      }
      if (if_block0)
        if_block0.d();
      ctx[64](null);
      ctx[65](null);
      if (if_block1)
        if_block1.d();
      ctx[69](null);
      ctx[70](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_3$6(ctx) {
  let div1;
  let div0;
  let span;
  let t2;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      span = element("span");
      t2 = text(
        /*value*/
        ctx[0]
      );
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true, "aria-hidden": true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span = claim_element(div0_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(
        span_nodes,
        /*value*/
        ctx[0]
      );
      span_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "mdc-slider__value-indicator-text");
      attr(div0, "class", "mdc-slider__value-indicator");
      attr(div1, "class", "mdc-slider__value-indicator-container");
      attr(div1, "aria-hidden", "true");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      append_hydration(div0, span);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*value*/
      1)
        set_data(
          t2,
          /*value*/
          ctx2[0]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
    }
  };
}
function create_if_block_2$7(ctx) {
  let div1;
  let div0;
  let span;
  let t2;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      span = element("span");
      t2 = text(
        /*start*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true, "aria-hidden": true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span = claim_element(div0_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(
        span_nodes,
        /*start*/
        ctx[1]
      );
      span_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "mdc-slider__value-indicator-text");
      attr(div0, "class", "mdc-slider__value-indicator");
      attr(div1, "class", "mdc-slider__value-indicator-container");
      attr(div1, "aria-hidden", "true");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      append_hydration(div0, span);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*start*/
      2)
        set_data(
          t2,
          /*start*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
    }
  };
}
function create_if_block_1$b(ctx) {
  let div1;
  let div0;
  let span;
  let t2;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      span = element("span");
      t2 = text(
        /*end*/
        ctx[2]
      );
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true, "aria-hidden": true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span = claim_element(div0_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(
        span_nodes,
        /*end*/
        ctx[2]
      );
      span_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "mdc-slider__value-indicator-text");
      attr(div0, "class", "mdc-slider__value-indicator");
      attr(div1, "class", "mdc-slider__value-indicator-container");
      attr(div1, "aria-hidden", "true");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      append_hydration(div0, span);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*end*/
      4)
        set_data(
          t2,
          /*end*/
          ctx2[2]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
    }
  };
}
function create_fragment$q(ctx) {
  let div4;
  let t0;
  let div3;
  let div0;
  let t1;
  let div2;
  let div1;
  let div1_style_value;
  let t2;
  let t3;
  let div4_class_value;
  let useActions_action;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (
      /*range*/
      ctx2[6]
    )
      return create_if_block_5$2;
    return create_else_block_1$3;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*discrete*/
    ctx[7] && /*tickMarks*/
    ctx[8] && /*step*/
    ctx[9] > 0 && create_if_block_4$3(ctx)
  );
  function select_block_type_1(ctx2, dirty) {
    if (
      /*range*/
      ctx2[6]
    )
      return create_if_block$j;
    return create_else_block$8;
  }
  let current_block_type_1 = select_block_type_1(ctx);
  let if_block2 = current_block_type_1(ctx);
  let div4_levels = [
    {
      class: div4_class_value = Object.entries({
        [
          /*className*/
          ctx[4]
        ]: true,
        "mdc-slider": true,
        "mdc-slider--range": (
          /*range*/
          ctx[6]
        ),
        "mdc-slider--discrete": (
          /*discrete*/
          ctx[7]
        ),
        "mdc-slider--tick-marks": (
          /*discrete*/
          ctx[7] && /*tickMarks*/
          ctx[8]
        ),
        "mdc-slider--disabled": (
          /*disabled*/
          ctx[5]
        ),
        .../*internalClasses*/
        ctx[21]
      }).filter(func_4).map(func_5).join(" ")
    },
    /*range*/
    ctx[6] ? {
      "data-min-range": `${/*minRange*/
      ctx[12]}`
    } : {},
    exclude(
      /*$$restProps*/
      ctx[37],
      ["input$"]
    )
  ];
  let div_data_4 = {};
  for (let i2 = 0; i2 < div4_levels.length; i2 += 1) {
    div_data_4 = assign$1(div_data_4, div4_levels[i2]);
  }
  return {
    c() {
      div4 = element("div");
      if_block0.c();
      t0 = space();
      div3 = element("div");
      div0 = element("div");
      t1 = space();
      div2 = element("div");
      div1 = element("div");
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      if_block2.c();
      this.h();
    },
    l(nodes) {
      div4 = claim_element(nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      if_block0.l(div4_nodes);
      t0 = claim_space(div4_nodes);
      div3 = claim_element(div4_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      div0 = claim_element(div3_nodes, "DIV", { class: true });
      children(div0).forEach(detach);
      t1 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      div1 = claim_element(div2_nodes, "DIV", { class: true, style: true });
      children(div1).forEach(detach);
      div2_nodes.forEach(detach);
      t2 = claim_space(div3_nodes);
      if (if_block1)
        if_block1.l(div3_nodes);
      div3_nodes.forEach(detach);
      t3 = claim_space(div4_nodes);
      if_block2.l(div4_nodes);
      div4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mdc-slider__track--inactive");
      attr(div1, "class", "mdc-slider__track--active_fill");
      attr(div1, "style", div1_style_value = Object.entries(
        /*trackActiveStyles*/
        ctx[26]
      ).map(func$2).join(" "));
      attr(div2, "class", "mdc-slider__track--active");
      attr(div3, "class", "mdc-slider__track");
      set_attributes(div4, div_data_4);
    },
    m(target, anchor) {
      insert_hydration(target, div4, anchor);
      if_block0.m(div4, null);
      append_hydration(div4, t0);
      append_hydration(div4, div3);
      append_hydration(div3, div0);
      append_hydration(div3, t1);
      append_hydration(div3, div2);
      append_hydration(div2, div1);
      append_hydration(div3, t2);
      if (if_block1)
        if_block1.m(div3, null);
      append_hydration(div4, t3);
      if_block2.m(div4, null);
      ctx[79](div4);
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            div4,
            /*use*/
            ctx[3]
          )),
          action_destroyer(
            /*forwardEvents*/
            ctx[32].call(null, div4)
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div4, t0);
        }
      }
      if (dirty[0] & /*trackActiveStyles*/
      67108864 && div1_style_value !== (div1_style_value = Object.entries(
        /*trackActiveStyles*/
        ctx2[26]
      ).map(func$2).join(" "))) {
        attr(div1, "style", div1_style_value);
      }
      if (
        /*discrete*/
        ctx2[7] && /*tickMarks*/
        ctx2[8] && /*step*/
        ctx2[9] > 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_4$3(ctx2);
          if_block1.c();
          if_block1.m(div3, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx2)) && if_block2) {
        if_block2.p(ctx2, dirty);
      } else {
        if_block2.d(1);
        if_block2 = current_block_type_1(ctx2);
        if (if_block2) {
          if_block2.c();
          if_block2.m(div4, null);
        }
      }
      set_attributes(div4, div_data_4 = get_spread_update(div4_levels, [
        dirty[0] & /*className, range, discrete, tickMarks, disabled, internalClasses*/
        2097648 && div4_class_value !== (div4_class_value = Object.entries({
          [
            /*className*/
            ctx2[4]
          ]: true,
          "mdc-slider": true,
          "mdc-slider--range": (
            /*range*/
            ctx2[6]
          ),
          "mdc-slider--discrete": (
            /*discrete*/
            ctx2[7]
          ),
          "mdc-slider--tick-marks": (
            /*discrete*/
            ctx2[7] && /*tickMarks*/
            ctx2[8]
          ),
          "mdc-slider--disabled": (
            /*disabled*/
            ctx2[5]
          ),
          .../*internalClasses*/
          ctx2[21]
        }).filter(func_4).map(func_5).join(" ")) && { class: div4_class_value },
        dirty[0] & /*range, minRange*/
        4160 && /*range*/
        (ctx2[6] ? {
          "data-min-range": `${/*minRange*/
          ctx2[12]}`
        } : {}),
        dirty[1] & /*$$restProps*/
        64 && exclude(
          /*$$restProps*/
          ctx2[37],
          ["input$"]
        )
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/
      8)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[3]
        );
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div4);
      }
      if_block0.d();
      if (if_block1)
        if_block1.d();
      if_block2.d();
      ctx[79](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
const func$2 = ([name, value]) => `${name}: ${value};`;
const func_1 = ([name, value]) => `${name}: ${value};`;
const func_2 = ([name, value]) => `${name}: ${value};`;
const func_3 = ([name, value]) => `${name}: ${value};`;
const func_4 = ([name, value]) => name !== "" && value;
const func_5 = ([name]) => name;
function instance_1$3($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "use",
    "class",
    "disabled",
    "range",
    "discrete",
    "tickMarks",
    "step",
    "min",
    "max",
    "minRange",
    "value",
    "start",
    "end",
    "valueToAriaValueTextFn",
    "hideFocusStylesForPointerEvents",
    "input$class",
    "layout",
    "getId",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  var _a2;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { disabled = false } = $$props;
  let { range = false } = $$props;
  let { discrete = false } = $$props;
  let { tickMarks = false } = $$props;
  let { step = 1 } = $$props;
  let { min = 0 } = $$props;
  let { max = 100 } = $$props;
  let { minRange = 0 } = $$props;
  let { value = void 0 } = $$props;
  let { start = void 0 } = $$props;
  let { end = void 0 } = $$props;
  let { valueToAriaValueTextFn = (value2) => `${value2}` } = $$props;
  let { hideFocusStylesForPointerEvents = false } = $$props;
  let { input$class = "" } = $$props;
  let element2;
  let instance2;
  let input;
  let inputStart = void 0;
  let thumbEl;
  let thumbStart = void 0;
  let thumbKnob;
  let thumbKnobStart = void 0;
  let internalClasses = {};
  let thumbStartClasses = {};
  let thumbClasses = {};
  let inputAttrs = {};
  let inputStartAttrs = {};
  let trackActiveStyles = {};
  let thumbStyles = {};
  let thumbStartStyles = {};
  let thumbRippleActive = false;
  let thumbStartRippleActive = false;
  let currentTickMarks;
  let inputProps = (_a2 = getContext("SMUI:generic:input:props")) !== null && _a2 !== void 0 ? _a2 : {};
  let addLayoutListener = getContext("SMUI:addLayoutListener");
  let removeLayoutListener;
  let previousMin = min;
  let previousMax = max;
  let previousStep = step;
  let previousDiscrete = discrete;
  let previousTickMarks = tickMarks;
  if (tickMarks && step > 0) {
    const absMax = max + Math.abs(min);
    if (range && typeof start === "number" && typeof end === "number") {
      const absStart = start + Math.abs(min);
      const absEnd = end + Math.abs(min);
      currentTickMarks = [
        ...Array(absStart / step).map(() => TickMark.INACTIVE),
        ...Array(absMax / step - absStart / step - (absMax - absEnd) / step + 1).map(() => TickMark.ACTIVE),
        ...Array((absMax - absEnd) / step).map(() => TickMark.INACTIVE)
      ];
    } else if (typeof value === "number") {
      const absValue = value + Math.abs(min);
      currentTickMarks = [
        ...Array(absValue / step + 1).map(() => TickMark.ACTIVE),
        ...Array((absMax - absValue) / step).map(() => TickMark.INACTIVE)
      ];
    }
  }
  if (range && typeof start === "number" && typeof end === "number") {
    const percent = (end - start) / (max - min);
    const percentStart = start / (max - min);
    const percentEnd = end / (max - min);
    trackActiveStyles.transform = `scaleX(${percent})`;
    thumbStyles.left = `calc(${percentEnd * 100}% -24px)`;
    thumbStartStyles.left = `calc(${percentStart * 100}% -24px)`;
  } else if (typeof value === "number") {
    const percent = value / (max - min);
    trackActiveStyles.transform = `scaleX(${percent})`;
    thumbStyles.left = `calc(${percent * 100}% -24px)`;
  }
  if (addLayoutListener) {
    removeLayoutListener = addLayoutListener(layout);
  }
  let previousValue = value;
  let previousStart = start;
  let previousEnd = end;
  onMount(() => {
    $$invalidate(43, instance2 = new MDCSliderFoundation({
      hasClass,
      addClass,
      removeClass,
      addThumbClass,
      removeThumbClass,
      getAttribute: (attribute) => getElement().getAttribute(attribute),
      getInputValue: (thumb) => {
        var _a3;
        return `${(_a3 = range ? thumb === Thumb.START ? start : end : value) !== null && _a3 !== void 0 ? _a3 : 0}`;
      },
      setInputValue: (val, thumb) => {
        if (range) {
          if (thumb === Thumb.START) {
            $$invalidate(1, start = Number(val));
            $$invalidate(50, previousStart = start);
          } else {
            $$invalidate(2, end = Number(val));
            $$invalidate(51, previousEnd = end);
          }
        } else {
          $$invalidate(0, value = Number(val));
          $$invalidate(49, previousValue = value);
        }
      },
      getInputAttribute: getInputAttr,
      setInputAttribute: addInputAttr,
      removeInputAttribute: removeInputAttr,
      focusInput: (thumb) => {
        if (range && thumb === Thumb.START && inputStart) {
          inputStart.focus();
        } else {
          input.focus();
        }
      },
      isInputFocused: (thumb) => (range && thumb === Thumb.START ? inputStart : input) === document.activeElement,
      shouldHideFocusStylesForPointerEvents: () => hideFocusStylesForPointerEvents,
      getThumbKnobWidth: (thumb) => {
        var _a3;
        return ((_a3 = range && thumb === Thumb.START ? thumbKnobStart : thumbKnob) !== null && _a3 !== void 0 ? _a3 : thumbKnob).getBoundingClientRect().width;
      },
      getThumbBoundingClientRect: (thumb) => {
        var _a3;
        return ((_a3 = range && thumb === Thumb.START ? thumbStart : thumbEl) !== null && _a3 !== void 0 ? _a3 : thumbEl).getBoundingClientRect();
      },
      getBoundingClientRect: () => getElement().getBoundingClientRect(),
      getValueIndicatorContainerWidth: (thumb) => {
        var _a3;
        return ((_a3 = range && thumb === Thumb.START ? thumbStart : thumbEl) !== null && _a3 !== void 0 ? _a3 : thumbEl).querySelector(`.mdc-slider__value-indicator-container`).getBoundingClientRect().width;
      },
      isRTL: () => getComputedStyle(getElement()).direction === "rtl",
      setThumbStyleProperty: addThumbStyle,
      removeThumbStyleProperty: removeThumbStyle,
      setTrackActiveStyleProperty: addTrackActiveStyle,
      removeTrackActiveStyleProperty: removeTrackActiveStyle,
      // Handled by Svelte.
      setValueIndicatorText: (_value, _thumb) => void 0,
      getValueToAriaValueTextFn: () => valueToAriaValueTextFn,
      updateTickMarks: (tickMarks2) => {
        $$invalidate(31, currentTickMarks = tickMarks2);
      },
      setPointerCapture: (pointerId) => {
        getElement().setPointerCapture(pointerId);
      },
      emitChangeEvent: (value2, thumb) => {
        dispatch(getElement(), "SMUISlider:change", { value: value2, thumb }, void 0, true);
      },
      emitInputEvent: (value2, thumb) => {
        dispatch(getElement(), "SMUISlider:input", { value: value2, thumb }, void 0, true);
      },
      emitDragStartEvent: (_, thumb) => {
        if (range && thumb === Thumb.START) {
          $$invalidate(30, thumbStartRippleActive = true);
        } else {
          $$invalidate(29, thumbRippleActive = true);
        }
      },
      emitDragEndEvent: (_, thumb) => {
        if (range && thumb === Thumb.START) {
          $$invalidate(30, thumbStartRippleActive = false);
        } else {
          $$invalidate(29, thumbRippleActive = false);
        }
      },
      registerEventHandler: (evtType, handler) => {
        getElement().addEventListener(evtType, handler);
      },
      deregisterEventHandler: (evtType, handler) => {
        getElement().removeEventListener(evtType, handler);
      },
      registerThumbEventHandler: (thumb, evtType, handler) => {
        var _a3;
        (_a3 = range && thumb === Thumb.START ? thumbStart : thumbEl) === null || _a3 === void 0 ? void 0 : _a3.addEventListener(evtType, handler);
      },
      deregisterThumbEventHandler: (thumb, evtType, handler) => {
        var _a3;
        (_a3 = range && thumb === Thumb.START ? thumbStart : thumbEl) === null || _a3 === void 0 ? void 0 : _a3.removeEventListener(evtType, handler);
      },
      registerInputEventHandler: (thumb, evtType, handler) => {
        var _a3;
        (_a3 = range && thumb === Thumb.START ? inputStart : input) === null || _a3 === void 0 ? void 0 : _a3.addEventListener(evtType, handler);
      },
      deregisterInputEventHandler: (thumb, evtType, handler) => {
        var _a3;
        (_a3 = range && thumb === Thumb.START ? inputStart : input) === null || _a3 === void 0 ? void 0 : _a3.removeEventListener(evtType, handler);
      },
      registerBodyEventHandler: (evtType, handler) => {
        document.body.addEventListener(evtType, handler);
      },
      deregisterBodyEventHandler: (evtType, handler) => {
        document.body.removeEventListener(evtType, handler);
      },
      registerWindowEventHandler: (evtType, handler) => {
        window.addEventListener(evtType, handler);
      },
      deregisterWindowEventHandler: (evtType, handler) => {
        window.removeEventListener(evtType, handler);
      }
    }));
    const accessor = {
      get element() {
        return getElement();
      },
      activateRipple() {
        if (!disabled) {
          $$invalidate(29, thumbRippleActive = true);
        }
      },
      deactivateRipple() {
        $$invalidate(29, thumbRippleActive = false);
      }
    };
    dispatch(element2, "SMUIGenericInput:mount", accessor);
    instance2.init();
    instance2.layout({ skipUpdateUI: true });
    return () => {
      dispatch(element2, "SMUIGenericInput:unmount", accessor);
      instance2.destroy();
    };
  });
  onDestroy(() => {
    if (removeLayoutListener) {
      removeLayoutListener();
    }
  });
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(21, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(21, internalClasses[className2] = false, internalClasses);
    }
  }
  function addThumbClass(className2, thumb) {
    if (range && thumb === Thumb.START) {
      if (!thumbStartClasses[className2]) {
        $$invalidate(22, thumbStartClasses[className2] = true, thumbStartClasses);
      }
    } else {
      if (!thumbClasses[className2]) {
        $$invalidate(23, thumbClasses[className2] = true, thumbClasses);
      }
    }
  }
  function removeThumbClass(className2, thumb) {
    if (range && thumb === Thumb.START) {
      if (!(className2 in thumbStartClasses) || thumbStartClasses[className2]) {
        $$invalidate(22, thumbStartClasses[className2] = false, thumbStartClasses);
      }
    } else {
      if (!(className2 in thumbClasses) || thumbClasses[className2]) {
        $$invalidate(23, thumbClasses[className2] = false, thumbClasses);
      }
    }
  }
  function addThumbStyle(name, value2, thumb) {
    if (range && thumb === Thumb.START) {
      if (thumbStartStyles[name] != value2) {
        if (value2 === "" || value2 == null) {
          delete thumbStartStyles[name];
          $$invalidate(28, thumbStartStyles);
        } else {
          $$invalidate(28, thumbStartStyles[name] = value2, thumbStartStyles);
        }
      }
    } else {
      if (thumbStyles[name] != value2) {
        if (value2 === "" || value2 == null) {
          delete thumbStyles[name];
          $$invalidate(27, thumbStyles);
        } else {
          $$invalidate(27, thumbStyles[name] = value2, thumbStyles);
        }
      }
    }
  }
  function removeThumbStyle(name, thumb) {
    if (range && thumb === Thumb.START) {
      if (name in thumbStartStyles) {
        delete thumbStartStyles[name];
        $$invalidate(28, thumbStartStyles);
      }
    } else {
      if (name in thumbStyles) {
        delete thumbStyles[name];
        $$invalidate(27, thumbStyles);
      }
    }
  }
  function getInputAttr(name, thumb) {
    var _a3, _b2, _c;
    if (range && thumb === Thumb.START) {
      if (name === "value") {
        return `${start}`;
      }
      return name in inputStartAttrs ? (_a3 = inputStartAttrs[name]) !== null && _a3 !== void 0 ? _a3 : null : (_b2 = inputStart === null || inputStart === void 0 ? void 0 : inputStart.getAttribute(name)) !== null && _b2 !== void 0 ? _b2 : null;
    } else {
      if (name === "value") {
        return `${range ? end : value}`;
      }
      return name in inputAttrs ? (_c = inputAttrs[name]) !== null && _c !== void 0 ? _c : null : input.getAttribute(name);
    }
  }
  function addInputAttr(name, value2, thumb) {
    if (range && thumb === Thumb.START) {
      if (inputStartAttrs[name] !== value2) {
        $$invalidate(25, inputStartAttrs[name] = value2, inputStartAttrs);
      }
    } else {
      if (inputAttrs[name] !== value2) {
        $$invalidate(24, inputAttrs[name] = value2, inputAttrs);
      }
    }
  }
  function removeInputAttr(name, thumb) {
    if (range && thumb === Thumb.START) {
      if (!(name in inputStartAttrs) || inputStartAttrs[name] != null) {
        $$invalidate(25, inputStartAttrs[name] = void 0, inputStartAttrs);
      }
    } else {
      if (!(name in inputAttrs) || inputAttrs[name] != null) {
        $$invalidate(24, inputAttrs[name] = void 0, inputAttrs);
      }
    }
  }
  function addTrackActiveStyle(name, value2) {
    if (trackActiveStyles[name] != value2) {
      if (value2 === "" || value2 == null) {
        delete trackActiveStyles[name];
        $$invalidate(26, trackActiveStyles);
      } else {
        $$invalidate(26, trackActiveStyles[name] = value2, trackActiveStyles);
      }
    }
  }
  function removeTrackActiveStyle(name) {
    if (name in trackActiveStyles) {
      delete trackActiveStyles[name];
      $$invalidate(26, trackActiveStyles);
    }
  }
  function layout() {
    return instance2.layout();
  }
  function getId() {
    return inputProps && inputProps.id;
  }
  function getElement() {
    return element2;
  }
  function blur_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function focus_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function blur_handler(event) {
    bubble.call(this, $$self, event);
  }
  function focus_handler(event) {
    bubble.call(this, $$self, event);
  }
  function blur_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function focus_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function input0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputStart = $$value;
      $$invalidate(16, inputStart);
    });
  }
  function input0_change_input_handler() {
    start = to_number(this.value);
    $$invalidate(1, start);
  }
  function input1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      input = $$value;
      $$invalidate(15, input);
    });
  }
  function input1_change_input_handler() {
    end = to_number(this.value);
    $$invalidate(2, end);
  }
  function input_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      input = $$value;
      $$invalidate(15, input);
    });
  }
  function input_1_change_input_handler() {
    value = to_number(this.value);
    $$invalidate(0, value);
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      thumbKnobStart = $$value;
      $$invalidate(20, thumbKnobStart);
    });
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      thumbStart = $$value;
      $$invalidate(18, thumbStart);
    });
  }
  const Ripple_function = (className2) => addThumbClass(className2, Thumb.START);
  const Ripple_function_1 = (className2) => removeThumbClass(className2, Thumb.START);
  const Ripple_function_2 = (name, value2) => addThumbStyle(name, value2, Thumb.START);
  function div2_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      thumbKnob = $$value;
      $$invalidate(19, thumbKnob);
    });
  }
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      thumbEl = $$value;
      $$invalidate(17, thumbEl);
    });
  }
  const Ripple_function_3 = (className2) => addThumbClass(className2, Thumb.END);
  const Ripple_function_4 = (className2) => removeThumbClass(className2, Thumb.END);
  const Ripple_function_5 = (name, value2) => addThumbStyle(name, value2, Thumb.END);
  function div0_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      thumbKnob = $$value;
      $$invalidate(19, thumbKnob);
    });
  }
  function div1_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      thumbEl = $$value;
      $$invalidate(17, thumbEl);
    });
  }
  const Ripple_function_6 = (className2) => addThumbClass(className2, Thumb.END);
  const Ripple_function_7 = (className2) => removeThumbClass(className2, Thumb.END);
  const Ripple_function_8 = (name, value2) => addThumbStyle(name, value2, Thumb.END);
  function div4_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(14, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(37, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(3, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(4, className = $$new_props.class);
    if ("disabled" in $$new_props)
      $$invalidate(5, disabled = $$new_props.disabled);
    if ("range" in $$new_props)
      $$invalidate(6, range = $$new_props.range);
    if ("discrete" in $$new_props)
      $$invalidate(7, discrete = $$new_props.discrete);
    if ("tickMarks" in $$new_props)
      $$invalidate(8, tickMarks = $$new_props.tickMarks);
    if ("step" in $$new_props)
      $$invalidate(9, step = $$new_props.step);
    if ("min" in $$new_props)
      $$invalidate(10, min = $$new_props.min);
    if ("max" in $$new_props)
      $$invalidate(11, max = $$new_props.max);
    if ("minRange" in $$new_props)
      $$invalidate(12, minRange = $$new_props.minRange);
    if ("value" in $$new_props)
      $$invalidate(0, value = $$new_props.value);
    if ("start" in $$new_props)
      $$invalidate(1, start = $$new_props.start);
    if ("end" in $$new_props)
      $$invalidate(2, end = $$new_props.end);
    if ("valueToAriaValueTextFn" in $$new_props)
      $$invalidate(38, valueToAriaValueTextFn = $$new_props.valueToAriaValueTextFn);
    if ("hideFocusStylesForPointerEvents" in $$new_props)
      $$invalidate(39, hideFocusStylesForPointerEvents = $$new_props.hideFocusStylesForPointerEvents);
    if ("input$class" in $$new_props)
      $$invalidate(13, input$class = $$new_props.input$class);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*min*/
    1024 | $$self.$$.dirty[1] & /*previousMin, instance*/
    12288) {
      if (min !== previousMin) {
        if (instance2) {
          instance2.setMin(min);
        }
        $$invalidate(44, previousMin = min);
      }
    }
    if ($$self.$$.dirty[0] & /*max*/
    2048 | $$self.$$.dirty[1] & /*previousMax, instance*/
    20480) {
      if (max !== previousMax) {
        if (instance2) {
          instance2.setMax(max);
        }
        $$invalidate(45, previousMax = max);
      }
    }
    if ($$self.$$.dirty[0] & /*step*/
    512 | $$self.$$.dirty[1] & /*previousStep, instance*/
    36864) {
      if (step !== previousStep) {
        if (instance2) {
          instance2.setStep(step);
        }
        $$invalidate(46, previousStep = step);
      }
    }
    if ($$self.$$.dirty[0] & /*discrete*/
    128 | $$self.$$.dirty[1] & /*previousDiscrete, instance*/
    69632) {
      if (discrete !== previousDiscrete) {
        if (instance2) {
          instance2.setIsDiscrete(discrete);
        }
        $$invalidate(47, previousDiscrete = discrete);
      }
    }
    if ($$self.$$.dirty[0] & /*tickMarks*/
    256 | $$self.$$.dirty[1] & /*previousTickMarks, instance*/
    135168) {
      if (tickMarks !== previousTickMarks) {
        if (instance2) {
          instance2.setHasTickMarks(tickMarks);
        }
        $$invalidate(48, previousTickMarks = tickMarks);
      }
    }
    if ($$self.$$.dirty[0] & /*value, start, end*/
    7 | $$self.$$.dirty[1] & /*instance, previousValue, previousStart, previousEnd*/
    1839104) {
      if (instance2) {
        if (previousValue !== value && typeof value === "number") {
          instance2.setValue(value);
        }
        if (previousStart !== start && typeof start === "number") {
          instance2.setValueStart(start);
        }
        if (previousEnd !== end && typeof end === "number") {
          instance2.setValue(end);
        }
        $$invalidate(49, previousValue = value);
        $$invalidate(50, previousStart = start);
        $$invalidate(51, previousEnd = end);
        instance2.layout();
      }
    }
  };
  return [
    value,
    start,
    end,
    use,
    className,
    disabled,
    range,
    discrete,
    tickMarks,
    step,
    min,
    max,
    minRange,
    input$class,
    element2,
    input,
    inputStart,
    thumbEl,
    thumbStart,
    thumbKnob,
    thumbKnobStart,
    internalClasses,
    thumbStartClasses,
    thumbClasses,
    inputAttrs,
    inputStartAttrs,
    trackActiveStyles,
    thumbStyles,
    thumbStartStyles,
    thumbRippleActive,
    thumbStartRippleActive,
    currentTickMarks,
    forwardEvents,
    inputProps,
    addThumbClass,
    removeThumbClass,
    addThumbStyle,
    $$restProps,
    valueToAriaValueTextFn,
    hideFocusStylesForPointerEvents,
    layout,
    getId,
    getElement,
    instance2,
    previousMin,
    previousMax,
    previousStep,
    previousDiscrete,
    previousTickMarks,
    previousValue,
    previousStart,
    previousEnd,
    blur_handler_1,
    focus_handler_1,
    blur_handler,
    focus_handler,
    blur_handler_2,
    focus_handler_2,
    input0_binding,
    input0_change_input_handler,
    input1_binding,
    input1_change_input_handler,
    input_1_binding,
    input_1_change_input_handler,
    div0_binding,
    div1_binding,
    Ripple_function,
    Ripple_function_1,
    Ripple_function_2,
    div2_binding,
    div3_binding,
    Ripple_function_3,
    Ripple_function_4,
    Ripple_function_5,
    div0_binding_1,
    div1_binding_1,
    Ripple_function_6,
    Ripple_function_7,
    Ripple_function_8,
    div4_binding
  ];
}
class Slider extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance_1$3,
      create_fragment$q,
      safe_not_equal,
      {
        use: 3,
        class: 4,
        disabled: 5,
        range: 6,
        discrete: 7,
        tickMarks: 8,
        step: 9,
        min: 10,
        max: 11,
        minRange: 12,
        value: 0,
        start: 1,
        end: 2,
        valueToAriaValueTextFn: 38,
        hideFocusStylesForPointerEvents: 39,
        input$class: 13,
        layout: 40,
        getId: 41,
        getElement: 42
      },
      null,
      [-1, -1, -1, -1]
    );
  }
  get layout() {
    return this.$$.ctx[40];
  }
  get getId() {
    return this.$$.ctx[41];
  }
  get getElement() {
    return this.$$.ctx[42];
  }
}
function create_else_block$7(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Null");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Null");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block$i(ctx) {
  let slider;
  let current;
  slider = new Slider({
    props: {
      style: "flex-grow: 1; align-self: center;",
      value: (
        /*value*/
        ctx[2]
      ),
      min: (
        /*capability*/
        ctx[0].min
      ),
      max: (
        /*capability*/
        ctx[0].max
      ),
      step: Math.pow(10, -1 * /*capability*/
      ctx[0].decimals),
      discrete: true,
      disabled: (
        /*disabled*/
        ctx[1]
      )
    }
  });
  slider.$on(
    "SMUISlider:change",
    /*SMUISlider_change_handler*/
    ctx[6]
  );
  return {
    c() {
      create_component(slider.$$.fragment);
    },
    l(nodes) {
      claim_component(slider.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(slider, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const slider_changes = {};
      if (dirty & /*value*/
      4)
        slider_changes.value = /*value*/
        ctx2[2];
      if (dirty & /*capability*/
      1)
        slider_changes.min = /*capability*/
        ctx2[0].min;
      if (dirty & /*capability*/
      1)
        slider_changes.max = /*capability*/
        ctx2[0].max;
      if (dirty & /*capability*/
      1)
        slider_changes.step = Math.pow(10, -1 * /*capability*/
        ctx2[0].decimals);
      if (dirty & /*disabled*/
      2)
        slider_changes.disabled = /*disabled*/
        ctx2[1];
      slider.$set(slider_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(slider.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(slider.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(slider, detaching);
    }
  };
}
function create_fragment$p(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$i, create_else_block$7];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*capability*/
      ctx2[0] !== null && /*capability*/
      ctx2[0] !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$k($$self, $$props, $$invalidate) {
  let value;
  let disabled;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(5, $editing = $$value));
  const dispatcher = createEventDispatcher();
  let { capability } = $$props;
  let { controllable } = $$props;
  function setValue(value2) {
    dispatcher("value", value2);
  }
  const SMUISlider_change_handler = (e2) => setValue(e2.detail.value);
  $$self.$$set = ($$props2) => {
    if ("capability" in $$props2)
      $$invalidate(0, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(4, controllable = $$props2.controllable);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*capability*/
    1) {
      $$invalidate(2, value = capability == null ? void 0 : capability.value);
    }
    if ($$self.$$.dirty & /*controllable, $editing*/
    48) {
      $$invalidate(1, disabled = !controllable || $editing);
    }
  };
  return [
    capability,
    disabled,
    value,
    setValue,
    controllable,
    $editing,
    SMUISlider_change_handler
  ];
}
class Slider_1 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$k, create_fragment$p, safe_not_equal, { capability: 0, controllable: 4 });
  }
}
function create_if_block$h(ctx) {
  let show_if;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$a, create_if_block_3$5, create_else_block_1$2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (dirty & /*capability*/
    1)
      show_if = null;
    if (show_if == null)
      show_if = !!/*capability*/
      ctx2[0].id.startsWith("alarm_");
    if (show_if)
      return 0;
    if (
      /*capability*/
      ctx2[0].type === "boolean"
    )
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block_1$2(ctx) {
  var _a2;
  let span;
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (((_a2 = ctx[0]) == null ? void 0 : _a2.units) ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(
        /*value*/
        ctx[1]
      );
      t1 = space();
      t2 = text(t2_value);
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      t0 = claim_text(
        span_nodes,
        /*value*/
        ctx[1]
      );
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*value*/
      2)
        set_data(
          t0,
          /*value*/
          ctx2[1]
        );
      if (dirty & /*capability*/
      1 && t2_value !== (t2_value = /*capability*/
      (((_a3 = ctx2[0]) == null ? void 0 : _a3.units) ?? "") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_3$5(ctx) {
  let span;
  let t_value = (
    /*value*/
    ctx[1] ? "Yes" : "No"
  );
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      2 && t_value !== (t_value = /*value*/
      ctx2[1] ? "Yes" : "No"))
        set_data(t2, t_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$a(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_2$6, create_else_block$6];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*value*/
      ctx2[1]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$6(ctx) {
  let icon;
  let current;
  icon = new CommonIcon({
    props: {
      class: "material-icons",
      $$slots: { default: [create_default_slot_1$a] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_2$6(ctx) {
  let icon;
  let current;
  icon = new CommonIcon({
    props: {
      class: "material-icons",
      style: "color: red;",
      $$slots: { default: [create_default_slot$c] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_default_slot_1$a(ctx) {
  let t2;
  return {
    c() {
      t2 = text("check");
    },
    l(nodes) {
      t2 = claim_text(nodes, "check");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot$c(ctx) {
  let t2;
  return {
    c() {
      t2 = text("error");
    },
    l(nodes) {
      t2 = claim_text(nodes, "error");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_fragment$o(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*capability*/
    ctx[0] !== void 0 && create_if_block$h(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[0] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$h(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$j($$self, $$props, $$invalidate) {
  let value;
  let { capability } = $$props;
  let { controllable } = $$props;
  $$self.$$set = ($$props2) => {
    if ("capability" in $$props2)
      $$invalidate(0, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(2, controllable = $$props2.controllable);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*capability*/
    1) {
      $$invalidate(1, value = capability == null ? void 0 : capability.value);
    }
  };
  return [capability, value, controllable];
}
class Sensor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$j, create_fragment$o, safe_not_equal, { capability: 0, controllable: 2 });
  }
}
/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var CssClasses;
(function(CssClasses2) {
  CssClasses2["PROCESSING"] = "mdc-switch--processing";
  CssClasses2["SELECTED"] = "mdc-switch--selected";
  CssClasses2["UNSELECTED"] = "mdc-switch--unselected";
})(CssClasses || (CssClasses = {}));
var Selectors;
(function(Selectors2) {
  Selectors2["RIPPLE"] = ".mdc-switch__ripple";
})(Selectors || (Selectors = {}));
/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
function observeProperty(target, property, observer) {
  var targetObservers = installObserver(target, property);
  var observers = targetObservers.getObservers(property);
  observers.push(observer);
  return function() {
    observers.splice(observers.indexOf(observer), 1);
  };
}
var allTargetObservers = /* @__PURE__ */ new WeakMap();
function installObserver(target, property) {
  var observersMap = /* @__PURE__ */ new Map();
  if (!allTargetObservers.has(target)) {
    allTargetObservers.set(target, {
      isEnabled: true,
      getObservers: function(key) {
        var observers = observersMap.get(key) || [];
        if (!observersMap.has(key)) {
          observersMap.set(key, observers);
        }
        return observers;
      },
      installedProperties: /* @__PURE__ */ new Set()
    });
  }
  var targetObservers = allTargetObservers.get(target);
  if (targetObservers.installedProperties.has(property)) {
    return targetObservers;
  }
  var descriptor = getDescriptor(target, property) || {
    configurable: true,
    enumerable: true,
    value: target[property],
    writable: true
  };
  var observedDescriptor = __assign({}, descriptor);
  var descGet = descriptor.get, descSet = descriptor.set;
  if ("value" in descriptor) {
    delete observedDescriptor.value;
    delete observedDescriptor.writable;
    var value_1 = descriptor.value;
    descGet = function() {
      return value_1;
    };
    if (descriptor.writable) {
      descSet = function(newValue) {
        value_1 = newValue;
      };
    }
  }
  if (descGet) {
    observedDescriptor.get = function() {
      return descGet.call(this);
    };
  }
  if (descSet) {
    observedDescriptor.set = function(newValue) {
      var e_4, _a2;
      var previous = descGet ? descGet.call(this) : newValue;
      descSet.call(this, newValue);
      if (targetObservers.isEnabled && (!descGet || newValue !== previous)) {
        try {
          for (var _b2 = __values(targetObservers.getObservers(property)), _c = _b2.next(); !_c.done; _c = _b2.next()) {
            var observer = _c.value;
            observer(newValue, previous);
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b2.return))
              _a2.call(_b2);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
      }
    };
  }
  targetObservers.installedProperties.add(property);
  Object.defineProperty(target, property, observedDescriptor);
  return targetObservers;
}
function getDescriptor(target, property) {
  var descriptorTarget = target;
  var descriptor;
  while (descriptorTarget) {
    descriptor = Object.getOwnPropertyDescriptor(descriptorTarget, property);
    if (descriptor) {
      break;
    }
    descriptorTarget = Object.getPrototypeOf(descriptorTarget);
  }
  return descriptor;
}
function setObserversEnabled(target, enabled) {
  var targetObservers = allTargetObservers.get(target);
  if (targetObservers) {
    targetObservers.isEnabled = enabled;
  }
}
/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCObserverFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCObserverFoundation2, _super);
    function MDCObserverFoundation2(adapter) {
      var _this = _super.call(this, adapter) || this;
      _this.unobserves = /* @__PURE__ */ new Set();
      return _this;
    }
    MDCObserverFoundation2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.unobserve();
    };
    MDCObserverFoundation2.prototype.observe = function(target, observers) {
      var e_1, _a2;
      var _this = this;
      var cleanup = [];
      try {
        for (var _b2 = __values(Object.keys(observers)), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var property = _c.value;
          var observer = observers[property].bind(this);
          cleanup.push(this.observeProperty(target, property, observer));
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      var unobserve = function() {
        var e_2, _a3;
        try {
          for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {
            var cleanupFn = cleanup_1_1.value;
            cleanupFn();
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (cleanup_1_1 && !cleanup_1_1.done && (_a3 = cleanup_1.return))
              _a3.call(cleanup_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        _this.unobserves.delete(unobserve);
      };
      this.unobserves.add(unobserve);
      return unobserve;
    };
    MDCObserverFoundation2.prototype.observeProperty = function(target, property, observer) {
      return observeProperty(target, property, observer);
    };
    MDCObserverFoundation2.prototype.setObserversEnabled = function(target, enabled) {
      setObserversEnabled(target, enabled);
    };
    MDCObserverFoundation2.prototype.unobserve = function() {
      var e_3, _a2;
      try {
        for (var _b2 = __values(__spreadArray([], __read(this.unobserves))), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var unobserve = _c.value;
          unobserve();
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
    };
    return MDCObserverFoundation2;
  }(MDCFoundation)
);
/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCSwitchFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSwitchFoundation2, _super);
    function MDCSwitchFoundation2(adapter) {
      var _this = _super.call(this, adapter) || this;
      _this.handleClick = _this.handleClick.bind(_this);
      return _this;
    }
    MDCSwitchFoundation2.prototype.init = function() {
      this.observe(this.adapter.state, {
        disabled: this.stopProcessingIfDisabled,
        processing: this.stopProcessingIfDisabled
      });
    };
    MDCSwitchFoundation2.prototype.handleClick = function() {
      if (this.adapter.state.disabled) {
        return;
      }
      this.adapter.state.selected = !this.adapter.state.selected;
    };
    MDCSwitchFoundation2.prototype.stopProcessingIfDisabled = function() {
      if (this.adapter.state.disabled) {
        this.adapter.state.processing = false;
      }
    };
    return MDCSwitchFoundation2;
  }(MDCObserverFoundation)
);
var MDCSwitchRenderFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSwitchRenderFoundation2, _super);
    function MDCSwitchRenderFoundation2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCSwitchRenderFoundation2.prototype.init = function() {
      _super.prototype.init.call(this);
      this.observe(this.adapter.state, {
        disabled: this.onDisabledChange,
        processing: this.onProcessingChange,
        selected: this.onSelectedChange
      });
    };
    MDCSwitchRenderFoundation2.prototype.initFromDOM = function() {
      this.setObserversEnabled(this.adapter.state, false);
      this.adapter.state.selected = this.adapter.hasClass(CssClasses.SELECTED);
      this.onSelectedChange();
      this.adapter.state.disabled = this.adapter.isDisabled();
      this.adapter.state.processing = this.adapter.hasClass(CssClasses.PROCESSING);
      this.setObserversEnabled(this.adapter.state, true);
      this.stopProcessingIfDisabled();
    };
    MDCSwitchRenderFoundation2.prototype.onDisabledChange = function() {
      this.adapter.setDisabled(this.adapter.state.disabled);
    };
    MDCSwitchRenderFoundation2.prototype.onProcessingChange = function() {
      this.toggleClass(this.adapter.state.processing, CssClasses.PROCESSING);
    };
    MDCSwitchRenderFoundation2.prototype.onSelectedChange = function() {
      this.adapter.setAriaChecked(String(this.adapter.state.selected));
      this.toggleClass(this.adapter.state.selected, CssClasses.SELECTED);
      this.toggleClass(!this.adapter.state.selected, CssClasses.UNSELECTED);
    };
    MDCSwitchRenderFoundation2.prototype.toggleClass = function(addClass, className) {
      if (addClass) {
        this.adapter.addClass(className);
      } else {
        this.adapter.removeClass(className);
      }
    };
    return MDCSwitchRenderFoundation2;
  }(MDCSwitchFoundation)
);
function create_if_block_1$9(ctx) {
  let div;
  let svg0;
  let path0;
  let t2;
  let svg1;
  let path1;
  let div_class_value;
  let useActions_action;
  let mounted;
  let dispose;
  let div_levels = [
    {
      class: div_class_value = classMap({
        [
          /*icons$class*/
          ctx[8]
        ]: true,
        "mdc-switch__icons": true
      })
    },
    prefixFilter(
      /*$$restProps*/
      ctx[19],
      "icons$"
    )
  ];
  let div_data = {};
  for (let i2 = 0; i2 < div_levels.length; i2 += 1) {
    div_data = assign$1(div_data, div_levels[i2]);
  }
  return {
    c() {
      div = element("div");
      svg0 = svg_element("svg");
      path0 = svg_element("path");
      t2 = space();
      svg1 = svg_element("svg");
      path1 = svg_element("path");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      svg0 = claim_svg_element(div_nodes, "svg", { class: true, viewBox: true });
      var svg0_nodes = children(svg0);
      path0 = claim_svg_element(svg0_nodes, "path", { d: true });
      children(path0).forEach(detach);
      svg0_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      svg1 = claim_svg_element(div_nodes, "svg", { class: true, viewBox: true });
      var svg1_nodes = children(svg1);
      path1 = claim_svg_element(svg1_nodes, "path", { d: true });
      children(path1).forEach(detach);
      svg1_nodes.forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(path0, "d", "M19.69,5.23L8.96,15.96l-4.23-4.23L2.96,13.5l6,6L21.46,7L19.69,5.23z");
      attr(svg0, "class", "mdc-switch__icon mdc-switch__icon--on");
      attr(svg0, "viewBox", "0 0 24 24");
      attr(path1, "d", "M20 13H4v-2h16v2z");
      attr(svg1, "class", "mdc-switch__icon mdc-switch__icon--off");
      attr(svg1, "viewBox", "0 0 24 24");
      set_attributes(div, div_data);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, svg0);
      append_hydration(svg0, path0);
      append_hydration(div, t2);
      append_hydration(div, svg1);
      append_hydration(svg1, path1);
      if (!mounted) {
        dispose = action_destroyer(useActions_action = useActions.call(
          null,
          div,
          /*icons$use*/
          ctx[7]
        ));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      set_attributes(div, div_data = get_spread_update(div_levels, [
        dirty[0] & /*icons$class*/
        256 && div_class_value !== (div_class_value = classMap({
          [
            /*icons$class*/
            ctx2[8]
          ]: true,
          "mdc-switch__icons": true
        })) && { class: div_class_value },
        dirty[0] & /*$$restProps*/
        524288 && prefixFilter(
          /*$$restProps*/
          ctx2[19],
          "icons$"
        )
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*icons$use*/
      128)
        useActions_action.update.call(
          null,
          /*icons$use*/
          ctx2[7]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$g(ctx) {
  let div1;
  let textContent = `<div class="mdc-switch__focus-ring"></div>`;
  return {
    c() {
      div1 = element("div");
      div1.innerHTML = textContent;
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div1) !== "svelte-1dop874")
        div1.innerHTML = textContent;
      this.h();
    },
    h() {
      attr(div1, "class", "mdc-switch__focus-ring-wrapper");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
    }
  };
}
function create_fragment$n(ctx) {
  let button;
  let div0;
  let t0;
  let div5;
  let div4;
  let div2;
  let textContent = `<div class="mdc-elevation-overlay"></div>`;
  let t1;
  let div3;
  let t2;
  let t3;
  let button_class_value;
  let button_aria_checked_value;
  let useActions_action;
  let Ripple_action;
  let mounted;
  let dispose;
  let if_block0 = (
    /*icons*/
    ctx[6] && create_if_block_1$9(ctx)
  );
  let if_block1 = (
    /*focusRing*/
    ctx[4] && create_if_block$g()
  );
  let button_levels = [
    {
      class: button_class_value = classMap({
        [
          /*className*/
          ctx[3]
        ]: true,
        "mdc-switch": true,
        "mdc-switch--unselected": !/*selected*/
        ctx[10],
        "mdc-switch--selected": (
          /*selected*/
          ctx[10]
        ),
        "mdc-switch--processing": (
          /*processing*/
          ctx[1]
        ),
        "smui-switch--color-secondary": (
          /*color*/
          ctx[5] === "secondary"
        ),
        .../*internalClasses*/
        ctx[12]
      })
    },
    { type: "button" },
    { role: "switch" },
    {
      "aria-checked": button_aria_checked_value = /*selected*/
      ctx[10] ? "true" : "false"
    },
    { disabled: (
      /*disabled*/
      ctx[0]
    ) },
    /*inputProps*/
    ctx[16],
    exclude(
      /*$$restProps*/
      ctx[19],
      ["icons$"]
    )
  ];
  let button_data = {};
  for (let i2 = 0; i2 < button_levels.length; i2 += 1) {
    button_data = assign$1(button_data, button_levels[i2]);
  }
  return {
    c() {
      button = element("button");
      div0 = element("div");
      t0 = space();
      div5 = element("div");
      div4 = element("div");
      div2 = element("div");
      div2.innerHTML = textContent;
      t1 = space();
      div3 = element("div");
      t2 = space();
      if (if_block0)
        if_block0.c();
      t3 = space();
      if (if_block1)
        if_block1.c();
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", {
        class: true,
        type: true,
        role: true,
        "aria-checked": true
      });
      var button_nodes = children(button);
      div0 = claim_element(button_nodes, "DIV", { class: true });
      children(div0).forEach(detach);
      t0 = claim_space(button_nodes);
      div5 = claim_element(button_nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      div4 = claim_element(div5_nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      div2 = claim_element(div4_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div2) !== "svelte-fnhar4")
        div2.innerHTML = textContent;
      t1 = claim_space(div4_nodes);
      div3 = claim_element(div4_nodes, "DIV", { class: true });
      children(div3).forEach(detach);
      t2 = claim_space(div4_nodes);
      if (if_block0)
        if_block0.l(div4_nodes);
      div4_nodes.forEach(detach);
      div5_nodes.forEach(detach);
      t3 = claim_space(button_nodes);
      if (if_block1)
        if_block1.l(button_nodes);
      button_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mdc-switch__track");
      attr(div2, "class", "mdc-switch__shadow");
      attr(div3, "class", "mdc-switch__ripple");
      attr(div4, "class", "mdc-switch__handle");
      attr(div5, "class", "mdc-switch__handle-track");
      set_attributes(button, button_data);
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, div0);
      append_hydration(button, t0);
      append_hydration(button, div5);
      append_hydration(div5, div4);
      append_hydration(div4, div2);
      append_hydration(div4, t1);
      append_hydration(div4, div3);
      ctx[28](div3);
      append_hydration(div4, t2);
      if (if_block0)
        if_block0.m(div4, null);
      append_hydration(button, t3);
      if (if_block1)
        if_block1.m(button, null);
      if (button.autofocus)
        button.focus();
      ctx[29](button);
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            button,
            /*use*/
            ctx[2]
          )),
          action_destroyer(
            /*forwardEvents*/
            ctx[15].call(null, button)
          ),
          action_destroyer(Ripple_action = Ripple.call(null, button, {
            unbounded: true,
            color: (
              /*color*/
              ctx[5]
            ),
            active: (
              /*rippleActive*/
              ctx[14]
            ),
            rippleElement: (
              /*rippleElement*/
              ctx[13]
            ),
            disabled: (
              /*disabled*/
              ctx[0]
            ),
            addClass: (
              /*addClass*/
              ctx[17]
            ),
            removeClass: (
              /*removeClass*/
              ctx[18]
            )
          })),
          listen(
            button,
            "click",
            /*click_handler*/
            ctx[30]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*icons*/
        ctx2[6]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_1$9(ctx2);
          if_block0.c();
          if_block0.m(div4, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*focusRing*/
        ctx2[4]
      ) {
        if (if_block1)
          ;
        else {
          if_block1 = create_if_block$g();
          if_block1.c();
          if_block1.m(button, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      set_attributes(button, button_data = get_spread_update(button_levels, [
        dirty[0] & /*className, selected, processing, color, internalClasses*/
        5162 && button_class_value !== (button_class_value = classMap({
          [
            /*className*/
            ctx2[3]
          ]: true,
          "mdc-switch": true,
          "mdc-switch--unselected": !/*selected*/
          ctx2[10],
          "mdc-switch--selected": (
            /*selected*/
            ctx2[10]
          ),
          "mdc-switch--processing": (
            /*processing*/
            ctx2[1]
          ),
          "smui-switch--color-secondary": (
            /*color*/
            ctx2[5] === "secondary"
          ),
          .../*internalClasses*/
          ctx2[12]
        })) && { class: button_class_value },
        { type: "button" },
        { role: "switch" },
        dirty[0] & /*selected*/
        1024 && button_aria_checked_value !== (button_aria_checked_value = /*selected*/
        ctx2[10] ? "true" : "false") && {
          "aria-checked": button_aria_checked_value
        },
        dirty[0] & /*disabled*/
        1 && { disabled: (
          /*disabled*/
          ctx2[0]
        ) },
        /*inputProps*/
        ctx2[16],
        dirty[0] & /*$$restProps*/
        524288 && exclude(
          /*$$restProps*/
          ctx2[19],
          ["icons$"]
        )
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/
      4)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[2]
        );
      if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*color, rippleActive, rippleElement, disabled*/
      24609)
        Ripple_action.update.call(null, {
          unbounded: true,
          color: (
            /*color*/
            ctx2[5]
          ),
          active: (
            /*rippleActive*/
            ctx2[14]
          ),
          rippleElement: (
            /*rippleElement*/
            ctx2[13]
          ),
          disabled: (
            /*disabled*/
            ctx2[0]
          ),
          addClass: (
            /*addClass*/
            ctx2[17]
          ),
          removeClass: (
            /*removeClass*/
            ctx2[18]
          )
        });
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      ctx[28](null);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      ctx[29](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance_1$2($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "use",
    "class",
    "disabled",
    "focusRing",
    "color",
    "group",
    "checked",
    "value",
    "processing",
    "icons",
    "icons$use",
    "icons$class",
    "getId",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  var _a2;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let uninitializedValue = () => {
  };
  function isUninitializedValue(value2) {
    return value2 === uninitializedValue;
  }
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { disabled = false } = $$props;
  let { focusRing = false } = $$props;
  let { color: color2 = "primary" } = $$props;
  let { group = uninitializedValue } = $$props;
  let { checked = uninitializedValue } = $$props;
  let { value = null } = $$props;
  let { processing = false } = $$props;
  let { icons = true } = $$props;
  let { icons$use = [] } = $$props;
  let { icons$class = "" } = $$props;
  let element2;
  let instance2;
  let internalClasses = {};
  let rippleElement;
  let rippleActive = false;
  let inputProps = (_a2 = getContext("SMUI:generic:input:props")) !== null && _a2 !== void 0 ? _a2 : {};
  let selected = isUninitializedValue(group) ? isUninitializedValue(checked) ? false : checked : group.indexOf(value) !== -1;
  let state = {
    get disabled() {
      return disabled;
    },
    set disabled(value2) {
      $$invalidate(0, disabled = value2);
    },
    get processing() {
      return processing;
    },
    set processing(value2) {
      $$invalidate(1, processing = value2);
    },
    get selected() {
      return selected;
    },
    set selected(value2) {
      $$invalidate(10, selected = value2);
    }
  };
  let previousChecked = checked;
  let previousGroup = isUninitializedValue(group) ? [] : [...group];
  let previousSelected = selected;
  onMount(() => {
    $$invalidate(11, instance2 = new MDCSwitchRenderFoundation({
      addClass,
      hasClass,
      isDisabled: () => disabled,
      removeClass,
      setAriaChecked: () => {
      },
      // Handled automatically.
      setDisabled: (value2) => {
        $$invalidate(0, disabled = value2);
      },
      state
    }));
    const accessor = {
      get element() {
        return getElement();
      },
      get checked() {
        return selected;
      },
      set checked(checked2) {
        if (selected !== checked2) {
          state.selected = checked2;
          if (element2) {
            dispatch(element2, "SMUISwitch:change", { selected: checked2, value });
          }
        }
      },
      activateRipple() {
        if (!disabled) {
          $$invalidate(14, rippleActive = true);
        }
      },
      deactivateRipple() {
        $$invalidate(14, rippleActive = false);
      }
    };
    dispatch(element2, "SMUIGenericInput:mount", accessor);
    instance2.init();
    instance2.initFromDOM();
    return () => {
      dispatch(element2, "SMUIGenericInput:unmount", accessor);
      instance2.destroy();
    };
  });
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(12, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(12, internalClasses[className2] = false, internalClasses);
    }
  }
  function getId() {
    return inputProps && inputProps.id;
  }
  function getElement() {
    return element2;
  }
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      rippleElement = $$value;
      $$invalidate(13, rippleElement);
    });
  }
  function button_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(9, element2);
    });
  }
  const click_handler = () => instance2 && instance2.handleClick();
  $$self.$$set = ($$new_props) => {
    $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(19, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(2, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(3, className = $$new_props.class);
    if ("disabled" in $$new_props)
      $$invalidate(0, disabled = $$new_props.disabled);
    if ("focusRing" in $$new_props)
      $$invalidate(4, focusRing = $$new_props.focusRing);
    if ("color" in $$new_props)
      $$invalidate(5, color2 = $$new_props.color);
    if ("group" in $$new_props)
      $$invalidate(20, group = $$new_props.group);
    if ("checked" in $$new_props)
      $$invalidate(21, checked = $$new_props.checked);
    if ("value" in $$new_props)
      $$invalidate(22, value = $$new_props.value);
    if ("processing" in $$new_props)
      $$invalidate(1, processing = $$new_props.processing);
    if ("icons" in $$new_props)
      $$invalidate(6, icons = $$new_props.icons);
    if ("icons$use" in $$new_props)
      $$invalidate(7, icons$use = $$new_props.icons$use);
    if ("icons$class" in $$new_props)
      $$invalidate(8, icons$class = $$new_props.icons$class);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*group, previousSelected, selected, value, previousGroup, checked, previousChecked, element*/
    242222592) {
      {
        let notifyChange = false;
        if (!isUninitializedValue(group)) {
          if (previousSelected !== selected) {
            const idx = group.indexOf(value);
            if (selected && idx === -1) {
              group.push(value);
              $$invalidate(20, group), $$invalidate(27, previousSelected), $$invalidate(10, selected), $$invalidate(22, value), $$invalidate(26, previousGroup), $$invalidate(21, checked), $$invalidate(25, previousChecked), $$invalidate(9, element2);
            } else if (!selected && idx !== -1) {
              group.splice(idx, 1);
              $$invalidate(20, group), $$invalidate(27, previousSelected), $$invalidate(10, selected), $$invalidate(22, value), $$invalidate(26, previousGroup), $$invalidate(21, checked), $$invalidate(25, previousChecked), $$invalidate(9, element2);
            }
            notifyChange = true;
          } else {
            const idxPrev = previousGroup.indexOf(value);
            const idx = group.indexOf(value);
            if (idxPrev > -1 && idx === -1) {
              state.selected = false;
            } else if (idx > -1 && idxPrev === -1) {
              state.selected = true;
            }
          }
        }
        if (isUninitializedValue(checked)) {
          if (previousSelected !== selected) {
            notifyChange = true;
          }
        } else if (checked !== selected) {
          if (checked === previousChecked) {
            $$invalidate(21, checked = selected);
            notifyChange = true;
          } else {
            state.selected = checked;
          }
        }
        $$invalidate(25, previousChecked = checked);
        $$invalidate(26, previousGroup = isUninitializedValue(group) ? [] : [...group]);
        $$invalidate(27, previousSelected = selected);
        if (notifyChange && element2) {
          dispatch(element2, "SMUISwitch:change", { selected, value });
        }
      }
    }
  };
  return [
    disabled,
    processing,
    use,
    className,
    focusRing,
    color2,
    icons,
    icons$use,
    icons$class,
    element2,
    selected,
    instance2,
    internalClasses,
    rippleElement,
    rippleActive,
    forwardEvents,
    inputProps,
    addClass,
    removeClass,
    $$restProps,
    group,
    checked,
    value,
    getId,
    getElement,
    previousChecked,
    previousGroup,
    previousSelected,
    div3_binding,
    button_binding,
    click_handler
  ];
}
class Switch extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance_1$2,
      create_fragment$n,
      safe_not_equal,
      {
        use: 2,
        class: 3,
        disabled: 0,
        focusRing: 4,
        color: 5,
        group: 20,
        checked: 21,
        value: 22,
        processing: 1,
        icons: 6,
        icons$use: 7,
        icons$class: 8,
        getId: 23,
        getElement: 24
      },
      null,
      [-1, -1]
    );
  }
  get getId() {
    return this.$$.ctx[23];
  }
  get getElement() {
    return this.$$.ctx[24];
  }
}
function create_else_block$5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Null");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Null");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block$f(ctx) {
  let switch_1;
  let current;
  switch_1 = new Switch({
    props: {
      checked: (
        /*value*/
        ctx[2]
      ),
      disabled: (
        /*disabled*/
        ctx[1]
      )
    }
  });
  switch_1.$on(
    "SMUISwitch:change",
    /*SMUISwitch_change_handler*/
    ctx[6]
  );
  return {
    c() {
      create_component(switch_1.$$.fragment);
    },
    l(nodes) {
      claim_component(switch_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(switch_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const switch_1_changes = {};
      if (dirty & /*value*/
      4)
        switch_1_changes.checked = /*value*/
        ctx2[2];
      if (dirty & /*disabled*/
      2)
        switch_1_changes.disabled = /*disabled*/
        ctx2[1];
      switch_1.$set(switch_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(switch_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(switch_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(switch_1, detaching);
    }
  };
}
function create_fragment$m(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$f, create_else_block$5];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*capability*/
      ctx2[0] !== null && /*capability*/
      ctx2[0] !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$i($$self, $$props, $$invalidate) {
  let value;
  let disabled;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(5, $editing = $$value));
  const dispatcher = createEventDispatcher();
  let { capability } = $$props;
  let { controllable } = $$props;
  function setValue(value2) {
    dispatcher("value", value2);
  }
  const SMUISwitch_change_handler = (e2) => setValue(e2.detail.selected);
  $$self.$$set = ($$props2) => {
    if ("capability" in $$props2)
      $$invalidate(0, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(4, controllable = $$props2.controllable);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*capability*/
    1) {
      $$invalidate(2, value = capability == null ? void 0 : capability.value);
    }
    if ($$self.$$.dirty & /*controllable, $editing*/
    48) {
      $$invalidate(1, disabled = !controllable || $editing);
    }
  };
  return [
    capability,
    disabled,
    value,
    setValue,
    controllable,
    $editing,
    SMUISwitch_change_handler
  ];
}
class Toggle extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$i, create_fragment$m, safe_not_equal, { capability: 0, controllable: 4 });
  }
}
function create_if_block$e(ctx) {
  let button;
  let current;
  button = new Button({
    props: {
      disabled: (
        /*disabled*/
        ctx[1]
      ),
      $$slots: { default: [create_default_slot$b] },
      $$scope: { ctx }
    }
  });
  button.$on(
    "click",
    /*click_handler*/
    ctx[5]
  );
  return {
    c() {
      create_component(button.$$.fragment);
    },
    l(nodes) {
      claim_component(button.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const button_changes = {};
      if (dirty & /*disabled*/
      2)
        button_changes.disabled = /*disabled*/
        ctx2[1];
      if (dirty & /*$$scope, capability*/
      129) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(button, detaching);
    }
  };
}
function create_default_slot_1$9(ctx) {
  let t_value = (
    /*capability*/
    ctx[0].title + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*capability*/
      1 && t_value !== (t_value = /*capability*/
      ctx2[0].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot$b(ctx) {
  let label;
  let current;
  label = new CommonLabel({
    props: {
      $$slots: { default: [create_default_slot_1$9] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(label.$$.fragment);
    },
    l(nodes) {
      claim_component(label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const label_changes = {};
      if (dirty & /*$$scope, capability*/
      129) {
        label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      label.$set(label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(label, detaching);
    }
  };
}
function create_fragment$l(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*capability*/
    ctx[0] && create_if_block$e(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$e(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$h($$self, $$props, $$invalidate) {
  let disabled;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(4, $editing = $$value));
  const dispatcher = createEventDispatcher();
  let { capability } = $$props;
  let { controllable } = $$props;
  function setValue(value) {
    dispatcher("value", value);
  }
  const click_handler = () => setValue(true);
  $$self.$$set = ($$props2) => {
    if ("capability" in $$props2)
      $$invalidate(0, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(3, controllable = $$props2.controllable);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    24) {
      $$invalidate(1, disabled = !controllable || $editing);
    }
  };
  return [capability, disabled, setValue, controllable, $editing, click_handler];
}
class Button_1 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$h, create_fragment$l, safe_not_equal, { capability: 0, controllable: 3 });
  }
}
const CapabilityWidget_svelte_svelte_type_style_lang = "";
function get_each_context$6(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i2];
  return child_ctx;
}
function create_else_block_1$1(ctx) {
  var _a2;
  let promise;
  let t0;
  let span;
  let t1_value = (
    /*device*/
    ((_a2 = ctx[1]) == null ? void 0 : _a2.name) + ""
  );
  let t1;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$1,
    then: create_then_block$1,
    catch: create_catch_block$1,
    value: 13
  };
  handle_promise(promise = /*$homey*/
  ctx[4].baseUrl, info);
  return {
    c() {
      info.block.c();
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      this.h();
    },
    l(nodes) {
      info.block.l(nodes);
      t0 = claim_space(nodes);
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "device-title svelte-1e1mgjm");
    },
    m(target, anchor) {
      info.block.m(target, info.anchor = anchor);
      info.mount = () => t0.parentNode;
      info.anchor = t0;
      insert_hydration(target, t0, anchor);
      insert_hydration(target, span, anchor);
      append_hydration(span, t1);
    },
    p(new_ctx, dirty) {
      var _a3;
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty & /*$homey*/
      16 && promise !== (promise = /*$homey*/
      ctx[4].baseUrl) && handle_promise(promise, info))
        ;
      else {
        update_await_block_branch(info, ctx, dirty);
      }
      if (dirty & /*device*/
      2 && t1_value !== (t1_value = /*device*/
      ((_a3 = ctx[1]) == null ? void 0 : _a3.name) + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(span);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_if_block_3$4(ctx) {
  var _a2;
  let if_block_anchor;
  let if_block = (
    /*settings*/
    ((_a2 = ctx[0]) == null ? void 0 : _a2.deviceId) !== void 0 && create_if_block_4$2()
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      var _a3;
      if (
        /*settings*/
        ((_a3 = ctx2[0]) == null ? void 0 : _a3.deviceId) !== void 0
      ) {
        if (if_block)
          ;
        else {
          if_block = create_if_block_4$2();
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_catch_block$1(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block$1(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
      this.h();
    },
    h() {
      var _a2, _b2;
      attr(img, "class", "device-icon widget-icon-theme svelte-1e1mgjm");
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[13] + /*device*/
      ((_a2 = ctx[1]) == null ? void 0 : _a2.iconObj.url)))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*device*/
      (_b2 = ctx[1]) == null ? void 0 : _b2.icon);
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      var _a2, _b2;
      if (dirty & /*$homey, device*/
      18 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[13] + /*device*/
      ((_a2 = ctx2[1]) == null ? void 0 : _a2.iconObj.url))) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*device*/
      2 && img_alt_value !== (img_alt_value = /*device*/
      (_b2 = ctx2[1]) == null ? void 0 : _b2.icon)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("...");
    },
    l(nodes) {
      t2 = claim_text(nodes, "...");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_4$2(ctx) {
  let span;
  let textContent = "Error";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1azd6s8")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_else_block$4(ctx) {
  let div;
  let current;
  let each_value = ensure_array_like(
    /*capabilities*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$6(get_each_context$6(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div_nodes);
      }
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "capabilities svelte-1e1mgjm");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*getComponent, capabilities, controllable, setCapabilityValue, undefined*/
      108) {
        each_value = ensure_array_like(
          /*capabilities*/
          ctx2[3]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$6(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$6(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(div, null);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block$d(ctx) {
  let if_block_anchor;
  let if_block = (
    /*settings*/
    ctx[0].deviceId !== void 0 && create_if_block_1$8()
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*settings*/
        ctx2[0].deviceId !== void 0
      ) {
        if (if_block)
          ;
        else {
          if_block = create_if_block_1$8();
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_2$5(ctx) {
  let div;
  let span;
  let t0_value = (
    /*capability*/
    ctx[10].title + ""
  );
  let t0;
  let t1;
  let switch_instance;
  let t2;
  let current;
  function value_handler(...args) {
    return (
      /*value_handler*/
      ctx[9](
        /*capability*/
        ctx[10],
        ...args
      )
    );
  }
  var switch_value = (
    /*getComponent*/
    ctx[6](
      /*capability*/
      ctx[10].id
    )
  );
  function switch_props(ctx2) {
    return {
      props: {
        capability: (
          /*capability*/
          ctx2[10]
        ),
        controllable: (
          /*controllable*/
          ctx2[2]
        )
      }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    switch_instance.$on("value", value_handler);
  }
  return {
    c() {
      div = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      t2 = space();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      span = claim_element(div_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      span_nodes.forEach(detach);
      t1 = claim_space(div_nodes);
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, div_nodes);
      t2 = claim_space(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "capability-title svelte-1e1mgjm");
      attr(div, "class", "capability svelte-1e1mgjm");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, span);
      append_hydration(span, t0);
      append_hydration(div, t1);
      if (switch_instance)
        mount_component(switch_instance, div, null);
      append_hydration(div, t2);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & /*capabilities*/
      8) && t0_value !== (t0_value = /*capability*/
      ctx[10].title + ""))
        set_data(t0, t0_value);
      const switch_instance_changes = {};
      if (dirty & /*capabilities*/
      8)
        switch_instance_changes.capability = /*capability*/
        ctx[10];
      if (dirty & /*controllable*/
      4)
        switch_instance_changes.controllable = /*controllable*/
        ctx[2];
      if (dirty & /*capabilities*/
      8 && switch_value !== (switch_value = /*getComponent*/
      ctx[6](
        /*capability*/
        ctx[10].id
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
          switch_instance.$on("value", value_handler);
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, div, t2);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (switch_instance)
        destroy_component(switch_instance);
    }
  };
}
function create_each_block$6(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*capability*/
    ctx[10] !== void 0 && create_if_block_2$5(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*capability*/
        ctx2[10] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capabilities*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_2$5(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_1$8(ctx) {
  let span;
  let textContent = "Device not found.";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-rqxwc5")
        span.textContent = textContent;
      this.h();
    },
    h() {
      attr(span, "class", "device-title svelte-1e1mgjm");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$k(ctx) {
  let div0;
  let t2;
  let div1;
  let current_block_type_index;
  let if_block1;
  let current;
  function select_block_type(ctx2, dirty) {
    if (
      /*device*/
      ctx2[1] == void 0
    )
      return create_if_block_3$4;
    return create_else_block_1$1;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  const if_block_creators = [create_if_block$d, create_else_block$4];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*device*/
      ctx2[1] === void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div0 = element("div");
      if_block0.c();
      t2 = space();
      div1 = element("div");
      if_block1.c();
      this.h();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      if_block0.l(div0_nodes);
      div0_nodes.forEach(detach);
      t2 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      if_block1.l(div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "widget-header svelte-1e1mgjm");
      attr(div1, "class", "widget-body svelte-1e1mgjm");
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      if_block0.m(div0, null);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, div1, anchor);
      if_blocks[current_block_type_index].m(div1, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div0, null);
        }
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(div1, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t2);
        detach(div1);
      }
      if_block0.d();
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$g($$self, $$props, $$invalidate) {
  let capabilities;
  let controllable;
  let $scopes;
  let $devices;
  let $homey;
  component_subscribe($$self, scopes, ($$value) => $$invalidate(7, $scopes = $$value));
  component_subscribe($$self, devices, ($$value) => $$invalidate(8, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(4, $homey = $$value));
  let { settings } = $$props;
  let device;
  async function setCapabilityValue(capabilityId, value) {
    await device.setCapabilityValue({ deviceId: device.id, capabilityId, value });
  }
  function getComponent(capabilityId) {
    if (device !== void 0) {
      for (var component of device.ui.components) {
        if (component.capabilities.includes(capabilityId)) {
          switch (component.id) {
            case "slider":
              return Slider_1;
            case "toggle":
              return Toggle;
            case "button":
              return Button_1;
            case "battery":
            case "color":
            case "media":
            case "picker":
            case "ternary":
            case "thermostat":
            case "sensor":
            default:
              return Sensor;
          }
        }
      }
    }
    return Sensor;
  }
  const value_handler = (capability, e2) => setCapabilityValue(capability.id, e2.detail);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$devices, settings*/
    257) {
      $$invalidate(1, device = $devices[settings.deviceId ?? ""]);
    }
    if ($$self.$$.dirty & /*device, settings*/
    3) {
      $$invalidate(3, capabilities = device && (settings == null ? void 0 : settings.capabilityIds) ? settings.capabilityIds.map((cId) => device.capabilitiesObj[cId]) : []);
    }
    if ($$self.$$.dirty & /*$scopes*/
    128) {
      $$invalidate(2, controllable = $scopes.includes("homey") || $scopes.includes("homey.device") || $scopes.includes("homey.device.control"));
    }
  };
  return [
    settings,
    device,
    controllable,
    capabilities,
    $homey,
    setCapabilityValue,
    getComponent,
    $scopes,
    $devices,
    value_handler
  ];
}
class CapabilityWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$g, create_fragment$k, safe_not_equal, { settings: 0 });
  }
}
function create$1() {
  return {
    id: v4(),
    type: "capability",
    version: 2
  };
}
function migrate$1(settings) {
  switch (settings.version) {
    case 2:
      return settings;
    case 1:
    default:
      return migrate_v1_v2$1(settings);
  }
}
function migrate_v1_v2$1(v1) {
  const settings = {
    id: v1.id,
    type: v1.type,
    version: 2,
    deviceId: v1.deviceId,
    capabilityIds: v1.capabilityId ? [v1.capabilityId] : []
  };
  return settings;
}
function get_each_context$5(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[8] = list[i2];
  return child_ctx;
}
function create_default_slot_1$8(ctx) {
  let t_value = (
    /*f*/
    ctx[8].name + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*flows*/
      2 && t_value !== (t_value = /*f*/
      ctx2[8].name + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block$5(ctx) {
  let option;
  let current;
  option = new Option({
    props: {
      value: (
        /*f*/
        ctx[8].id
      ),
      $$slots: { default: [create_default_slot_1$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option.$$.fragment);
    },
    l(nodes) {
      claim_component(option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option_changes = {};
      if (dirty & /*flows*/
      2)
        option_changes.value = /*f*/
        ctx2[8].id;
      if (dirty & /*$$scope, flows*/
      2050) {
        option_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option.$set(option_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(option, detaching);
    }
  };
}
function create_default_slot$a(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*flows*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$5(get_each_context$5(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*flows*/
      2) {
        each_value = ensure_array_like(
          /*flows*/
          ctx2[1]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$5(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$5(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment$j(ctx) {
  let div;
  let select;
  let updating_value;
  let current;
  function select_value_binding(value) {
    ctx[5](value);
  }
  let select_props = {
    label: "Flow",
    $$slots: { default: [create_default_slot$a] },
    $$scope: { ctx }
  };
  if (
    /*flowId*/
    ctx[0] !== void 0
  ) {
    select_props.value = /*flowId*/
    ctx[0];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  return {
    c() {
      div = element("div");
      create_component(select.$$.fragment);
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      claim_component(select.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(select, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const select_changes = {};
      if (dirty & /*$$scope, flows*/
      2050) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty & /*flowId*/
      1) {
        updating_value = true;
        select_changes.value = /*flowId*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(select);
    }
  };
}
function instance$f($$self, $$props, $$invalidate) {
  let flows;
  let $advancedFlows;
  let $basicFlows;
  component_subscribe($$self, advancedFlows, ($$value) => $$invalidate(3, $advancedFlows = $$value));
  component_subscribe($$self, basicFlows, ($$value) => $$invalidate(4, $basicFlows = $$value));
  let { settings } = $$props;
  const dispatch2 = createEventDispatcher();
  let flowId;
  onMount(() => {
    if (settings.flowId) {
      $$invalidate(0, flowId = settings.flowId);
    }
  });
  function onFlow(value) {
    if (value === void 0 || value === settings.flowId) {
      return;
    }
    $$invalidate(2, settings.flowId = value, settings);
    dispatch2("settings", settings);
  }
  function select_value_binding(value) {
    flowId = value;
    $$invalidate(0, flowId);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(2, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$basicFlows, $advancedFlows*/
    24) {
      $$invalidate(1, flows = Object.values($basicFlows).concat(Object.values($advancedFlows)).filter((f) => f.triggerable).sort((a3, b2) => {
        if (a3.name === b2.name)
          return 0;
        if (a3.name < b2.name)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*flowId*/
    1) {
      onFlow(flowId);
    }
  };
  return [flowId, flows, settings, $advancedFlows, $basicFlows, select_value_binding];
}
class FlowEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$f, create_fragment$j, safe_not_equal, { settings: 2 });
  }
}
function create_if_block_1$7(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "mdc-fab__focus-ring");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block$c(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "mdc-fab__touch");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_default_slot$9(ctx) {
  let div;
  let t0;
  let t1;
  let if_block1_anchor;
  let current;
  let if_block0 = (
    /*focusRing*/
    ctx[4] && create_if_block_1$7()
  );
  const default_slot_template = (
    /*#slots*/
    ctx[22].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[24],
    null
  );
  let if_block1 = (
    /*touch*/
    ctx[9] && create_if_block$c()
  );
  return {
    c() {
      div = element("div");
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      if (default_slot)
        default_slot.c();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach);
      t0 = claim_space(nodes);
      if (if_block0)
        if_block0.l(nodes);
      t1 = claim_space(nodes);
      if (default_slot)
        default_slot.l(nodes);
      if (if_block1)
        if_block1.l(nodes);
      if_block1_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "class", "mdc-fab__ripple");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      insert_hydration(target, t0, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert_hydration(target, t1, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      if (if_block1)
        if_block1.m(target, anchor);
      insert_hydration(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*focusRing*/
        ctx2[4]
      ) {
        if (if_block0)
          ;
        else {
          if_block0 = create_if_block_1$7();
          if_block0.c();
          if_block0.m(t1.parentNode, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16777216)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[24],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[24]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[24],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (
        /*touch*/
        ctx2[9]
      ) {
        if (if_block1)
          ;
        else {
          if_block1 = create_if_block$c();
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t0);
        detach(t1);
        detach(if_block1_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (default_slot)
        default_slot.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
function create_fragment$i(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
    { tag: (
      /*tag*/
      ctx[12]
    ) },
    {
      use: [
        [
          Ripple,
          {
            ripple: (
              /*ripple*/
              ctx[3]
            ),
            unbounded: false,
            color: (
              /*color*/
              ctx[5]
            ),
            disabled: !!/*$$restProps*/
            ctx[20].disabled,
            addClass: (
              /*addClass*/
              ctx[17]
            ),
            removeClass: (
              /*removeClass*/
              ctx[18]
            ),
            addStyle: (
              /*addStyle*/
              ctx[19]
            )
          }
        ],
        /*forwardEvents*/
        ctx[16],
        .../*use*/
        ctx[0]
      ]
    },
    {
      class: classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-fab": true,
        "mdc-fab--mini": (
          /*mini*/
          ctx[6]
        ),
        "mdc-fab--exited": (
          /*exited*/
          ctx[7]
        ),
        "mdc-fab--extended": (
          /*extended*/
          ctx[8]
        ),
        "smui-fab--color-primary": (
          /*color*/
          ctx[5] === "primary"
        ),
        "mdc-fab--touch": (
          /*touch*/
          ctx[9]
        ),
        .../*internalClasses*/
        ctx[14]
      })
    },
    {
      style: Object.entries(
        /*internalStyles*/
        ctx[15]
      ).map(func$1).concat([
        /*style*/
        ctx[2]
      ]).join(" ")
    },
    { href: (
      /*href*/
      ctx[10]
    ) },
    /*$$restProps*/
    ctx[20]
  ];
  var switch_value = (
    /*component*/
    ctx[11]
  );
  function switch_props(ctx2) {
    let switch_instance_props = {
      $$slots: { default: [create_default_slot$9] },
      $$scope: { ctx: ctx2 }
    };
    for (let i2 = 0; i2 < switch_instance_spread_levels.length; i2 += 1) {
      switch_instance_props = assign$1(switch_instance_props, switch_instance_spread_levels[i2]);
    }
    return { props: switch_instance_props };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    ctx[23](switch_instance);
  }
  return {
    c() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const switch_instance_changes = dirty & /*tag, Ripple, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, classMap, className, mini, exited, extended, touch, internalClasses, Object, internalStyles, style, href*/
      2086895 ? get_spread_update(switch_instance_spread_levels, [
        dirty & /*tag*/
        4096 && { tag: (
          /*tag*/
          ctx2[12]
        ) },
        dirty & /*Ripple, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/
        2031657 && {
          use: [
            [
              Ripple,
              {
                ripple: (
                  /*ripple*/
                  ctx2[3]
                ),
                unbounded: false,
                color: (
                  /*color*/
                  ctx2[5]
                ),
                disabled: !!/*$$restProps*/
                ctx2[20].disabled,
                addClass: (
                  /*addClass*/
                  ctx2[17]
                ),
                removeClass: (
                  /*removeClass*/
                  ctx2[18]
                ),
                addStyle: (
                  /*addStyle*/
                  ctx2[19]
                )
              }
            ],
            /*forwardEvents*/
            ctx2[16],
            .../*use*/
            ctx2[0]
          ]
        },
        dirty & /*classMap, className, mini, exited, extended, color, touch, internalClasses*/
        17378 && {
          class: classMap({
            [
              /*className*/
              ctx2[1]
            ]: true,
            "mdc-fab": true,
            "mdc-fab--mini": (
              /*mini*/
              ctx2[6]
            ),
            "mdc-fab--exited": (
              /*exited*/
              ctx2[7]
            ),
            "mdc-fab--extended": (
              /*extended*/
              ctx2[8]
            ),
            "smui-fab--color-primary": (
              /*color*/
              ctx2[5] === "primary"
            ),
            "mdc-fab--touch": (
              /*touch*/
              ctx2[9]
            ),
            .../*internalClasses*/
            ctx2[14]
          })
        },
        dirty & /*Object, internalStyles, style*/
        32772 && {
          style: Object.entries(
            /*internalStyles*/
            ctx2[15]
          ).map(func$1).concat([
            /*style*/
            ctx2[2]
          ]).join(" ")
        },
        dirty & /*href*/
        1024 && { href: (
          /*href*/
          ctx2[10]
        ) },
        dirty & /*$$restProps*/
        1048576 && get_spread_object(
          /*$$restProps*/
          ctx2[20]
        )
      ]) : {};
      if (dirty & /*$$scope, touch, focusRing*/
      16777744) {
        switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (dirty & /*component*/
      2048 && switch_value !== (switch_value = /*component*/
      ctx2[11])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          ctx2[23](switch_instance);
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(switch_instance_anchor);
      }
      ctx[23](null);
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
const func$1 = ([name, value]) => `${name}: ${value};`;
function instance$e($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "use",
    "class",
    "style",
    "ripple",
    "focusRing",
    "color",
    "mini",
    "exited",
    "extended",
    "touch",
    "href",
    "component",
    "tag",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { ripple = true } = $$props;
  let { focusRing = false } = $$props;
  let { color: color2 = "secondary" } = $$props;
  let { mini = false } = $$props;
  let { exited = false } = $$props;
  let { extended = false } = $$props;
  let { touch = false } = $$props;
  let { href = void 0 } = $$props;
  let element2;
  let internalClasses = {};
  let internalStyles = {};
  let { component = SmuiElement } = $$props;
  let { tag = component === SmuiElement ? href == null ? "button" : "a" : void 0 } = $$props;
  setContext("SMUI:label:context", "fab");
  setContext("SMUI:icon:context", "fab");
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(14, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(14, internalClasses[className2] = false, internalClasses);
    }
  }
  function addStyle(name, value) {
    if (internalStyles[name] != value) {
      if (value === "" || value == null) {
        delete internalStyles[name];
        $$invalidate(15, internalStyles);
      } else {
        $$invalidate(15, internalStyles[name] = value, internalStyles);
      }
    }
  }
  function getElement() {
    return element2.getElement();
  }
  function switch_instance_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(13, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(20, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(2, style = $$new_props.style);
    if ("ripple" in $$new_props)
      $$invalidate(3, ripple = $$new_props.ripple);
    if ("focusRing" in $$new_props)
      $$invalidate(4, focusRing = $$new_props.focusRing);
    if ("color" in $$new_props)
      $$invalidate(5, color2 = $$new_props.color);
    if ("mini" in $$new_props)
      $$invalidate(6, mini = $$new_props.mini);
    if ("exited" in $$new_props)
      $$invalidate(7, exited = $$new_props.exited);
    if ("extended" in $$new_props)
      $$invalidate(8, extended = $$new_props.extended);
    if ("touch" in $$new_props)
      $$invalidate(9, touch = $$new_props.touch);
    if ("href" in $$new_props)
      $$invalidate(10, href = $$new_props.href);
    if ("component" in $$new_props)
      $$invalidate(11, component = $$new_props.component);
    if ("tag" in $$new_props)
      $$invalidate(12, tag = $$new_props.tag);
    if ("$$scope" in $$new_props)
      $$invalidate(24, $$scope = $$new_props.$$scope);
  };
  return [
    use,
    className,
    style,
    ripple,
    focusRing,
    color2,
    mini,
    exited,
    extended,
    touch,
    href,
    component,
    tag,
    element2,
    internalClasses,
    internalStyles,
    forwardEvents,
    addClass,
    removeClass,
    addStyle,
    $$restProps,
    getElement,
    slots,
    switch_instance_binding,
    $$scope
  ];
}
class Fab extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$e, create_fragment$i, safe_not_equal, {
      use: 0,
      class: 1,
      style: 2,
      ripple: 3,
      focusRing: 4,
      color: 5,
      mini: 6,
      exited: 7,
      extended: 8,
      touch: 9,
      href: 10,
      component: 11,
      tag: 12,
      getElement: 21
    });
  }
  get getElement() {
    return this.$$.ctx[21];
  }
}
const FlowWidget_svelte_svelte_type_style_lang = "";
function create_else_block$3(ctx) {
  let div1;
  let div0;
  let fab;
  let t2;
  let label;
  let current;
  fab = new Fab({
    props: {
      color: "primary",
      $$slots: { default: [create_default_slot_1$7] },
      $$scope: { ctx }
    }
  });
  fab.$on(
    "click",
    /*click_handler*/
    ctx[5]
  );
  label = new CommonLabel({
    props: {
      $$slots: { default: [create_default_slot$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      create_component(fab.$$.fragment);
      t2 = space();
      create_component(label.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(fab.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t2 = claim_space(div1_nodes);
      claim_component(label.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "flow-button svelte-1yjhoai");
      attr(div1, "class", "flow-container svelte-1yjhoai");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      mount_component(fab, div0, null);
      append_hydration(div1, t2);
      mount_component(label, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      const fab_changes = {};
      if (dirty & /*$$scope*/
      256) {
        fab_changes.$$scope = { dirty, ctx: ctx2 };
      }
      fab.$set(fab_changes);
      const label_changes = {};
      if (dirty & /*$$scope, flow*/
      257) {
        label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      label.$set(label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(fab.$$.fragment, local);
      transition_in(label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fab.$$.fragment, local);
      transition_out(label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(fab);
      destroy_component(label);
    }
  };
}
function create_if_block$b(ctx) {
  let span;
  let textContent = "Error";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1azd6s8")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_default_slot_2$7(ctx) {
  let t2;
  return {
    c() {
      t2 = text("play_arrow");
    },
    l(nodes) {
      t2 = claim_text(nodes, "play_arrow");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_1$7(ctx) {
  let icon;
  let current;
  icon = new CommonIcon({
    props: {
      class: "material-icons",
      $$slots: { default: [create_default_slot_2$7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*$$scope*/
      256) {
        icon_changes.$$scope = { dirty, ctx: ctx2 };
      }
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_default_slot$8(ctx) {
  let t_value = (
    /*flow*/
    ctx[0].name + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*flow*/
      1 && t_value !== (t_value = /*flow*/
      ctx2[0].name + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_fragment$h(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$b, create_else_block$3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*flow*/
      ctx2[0] === void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$d($$self, $$props, $$invalidate) {
  let flow;
  let $homey;
  let $advancedFlows;
  let $basicFlows;
  let $editing;
  component_subscribe($$self, homey, ($$value) => $$invalidate(6, $homey = $$value));
  component_subscribe($$self, advancedFlows, ($$value) => $$invalidate(3, $advancedFlows = $$value));
  component_subscribe($$self, basicFlows, ($$value) => $$invalidate(4, $basicFlows = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(7, $editing = $$value));
  let { settings } = $$props;
  async function triggerFlow() {
    if (!$editing && flow !== void 0) {
      if ($basicFlows[flow.id]) {
        await $homey.flow.triggerFlow({ id: flow.id });
      } else if ($advancedFlows[flow.id]) {
        await $homey.flow.triggerAdvancedFlow({ id: flow.id });
      }
    }
  }
  const click_handler = () => triggerFlow();
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(2, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings, $basicFlows, $advancedFlows*/
    28) {
      $$invalidate(0, flow = (settings == null ? void 0 : settings.flowId) !== void 0 ? $basicFlows[settings.flowId] ?? $advancedFlows[settings.flowId] : void 0);
    }
  };
  return [flow, triggerFlow, settings, $advancedFlows, $basicFlows, click_handler];
}
class FlowWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$d, create_fragment$h, safe_not_equal, { settings: 2 });
  }
}
const ImageWidget_svelte_svelte_type_style_lang = "";
function create_else_block$2(ctx) {
  let t2;
  let await_block_anchor;
  let promise;
  let if_block = !/*hideTitle*/
  ctx[4] && create_if_block_3$3(ctx);
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    value: 10
  };
  handle_promise(promise = /*$homey*/
  ctx[6].baseUrl, info);
  return {
    c() {
      if (if_block)
        if_block.c();
      t2 = space();
      await_block_anchor = empty();
      info.block.c();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
      await_block_anchor = empty();
      info.block.l(nodes);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (!/*hideTitle*/
      ctx[4]) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block_3$3(ctx);
          if_block.c();
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      info.ctx = ctx;
      if (dirty & /*$homey*/
      64 && promise !== (promise = /*$homey*/
      ctx[6].baseUrl) && handle_promise(promise, info))
        ;
      else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(await_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_if_block$a(ctx) {
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*device*/
      ctx2[0] === void 0
    )
      return create_if_block_1$6;
    if (
      /*image*/
      ctx2[5] === void 0
    )
      return create_if_block_2$4;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type && current_block_type(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2))) {
        if (if_block)
          if_block.d(1);
        if_block = current_block_type && current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) {
        if_block.d(detaching);
      }
    }
  };
}
function create_if_block_3$3(ctx) {
  var _a2, _b2;
  let div2;
  let div0;
  let t0_value = (
    /*device*/
    ((_a2 = ctx[0]) == null ? void 0 : _a2.name) + ""
  );
  let t0;
  let t1;
  let div1;
  let t2_value = (
    /*image*/
    ((_b2 = ctx[5]) == null ? void 0 : _b2.title) + ""
  );
  let t2;
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      div2 = claim_element(nodes, "DIV", { class: true, style: true });
      var div2_nodes = children(div2);
      div0 = claim_element(div2_nodes, "DIV", {});
      var div0_nodes = children(div0);
      t0 = claim_text(div0_nodes, t0_value);
      div0_nodes.forEach(detach);
      t1 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      t2 = claim_text(div1_nodes, t2_value);
      div1_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div1, "class", "subtitle svelte-zuypm6");
      attr(div2, "class", "header overlay svelte-zuypm6");
      set_style(
        div2,
        "color",
        /*fontColor*/
        ctx[3]
      );
      toggle_class(
        div2,
        "font-blur",
        /*fontBlur*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert_hydration(target, div2, anchor);
      append_hydration(div2, div0);
      append_hydration(div0, t0);
      append_hydration(div2, t1);
      append_hydration(div2, div1);
      append_hydration(div1, t2);
    },
    p(ctx2, dirty) {
      var _a3, _b3;
      if (dirty & /*device*/
      1 && t0_value !== (t0_value = /*device*/
      ((_a3 = ctx2[0]) == null ? void 0 : _a3.name) + ""))
        set_data(t0, t0_value);
      if (dirty & /*image*/
      32 && t2_value !== (t2_value = /*image*/
      ((_b3 = ctx2[5]) == null ? void 0 : _b3.title) + ""))
        set_data(t2, t2_value);
      if (dirty & /*fontColor*/
      8) {
        set_style(
          div2,
          "color",
          /*fontColor*/
          ctx2[3]
        );
      }
      if (dirty & /*fontBlur*/
      4) {
        toggle_class(
          div2,
          "font-blur",
          /*fontBlur*/
          ctx2[2]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
    }
  };
}
function create_catch_block(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
      this.h();
    },
    h() {
      attr(img, "class", "image-full svelte-zuypm6");
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[10] + /*image*/
      ctx[5].imageObj.url + "?v=" + /*refreshSlug*/
      ctx[1]))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*image*/
      ctx[5].title + " refreshed: " + /*refreshSlug*/
      ctx[1]);
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$homey, image, refreshSlug*/
      98 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[10] + /*image*/
      ctx2[5].imageObj.url + "?v=" + /*refreshSlug*/
      ctx2[1])) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*image, refreshSlug*/
      34 && img_alt_value !== (img_alt_value = /*image*/
      ctx2[5].title + " refreshed: " + /*refreshSlug*/
      ctx2[1])) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block(ctx) {
  let t2;
  return {
    c() {
      t2 = text("...");
    },
    l(nodes) {
      t2 = claim_text(nodes, "...");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_2$4(ctx) {
  let span;
  let textContent = "Error: image not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-6jz0ye")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$6(ctx) {
  let span;
  let textContent = "Error: device not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-413me7")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$g(ctx) {
  let div;
  function select_block_type(ctx2, dirty) {
    if (
      /*device*/
      ctx2[0] === void 0 || /*image*/
      ctx2[5] === void 0
    )
      return create_if_block$a;
    return create_else_block$2;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "frame svelte-zuypm6");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_block.m(div, null);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_block.d();
    }
  };
}
function instance$c($$self, $$props, $$invalidate) {
  let device;
  let image;
  let hideTitle;
  let fontColor;
  let fontBlur;
  let $devices;
  let $homey;
  component_subscribe($$self, devices, ($$value) => $$invalidate(9, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(6, $homey = $$value));
  let { settings } = $$props;
  let refreshSlug = 0;
  let refreshClear;
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(7, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$devices, settings*/
    640) {
      $$invalidate(0, device = $devices[settings.deviceId ?? ""]);
    }
    if ($$self.$$.dirty & /*device, settings*/
    129) {
      $$invalidate(5, image = device == null ? void 0 : device.images.find((image2) => image2.id === settings.imageId));
    }
    if ($$self.$$.dirty & /*refreshClear, settings*/
    384) {
      {
        if (refreshClear !== void 0)
          clearInterval(refreshClear);
        if (settings.refresh !== void 0 && settings.refresh > 0) {
          $$invalidate(8, refreshClear = setInterval(
            () => {
              $$invalidate(1, refreshSlug = Date.now());
            },
            settings.refresh * 1e3
          ));
        }
      }
    }
    if ($$self.$$.dirty & /*settings*/
    128) {
      $$invalidate(4, hideTitle = (settings == null ? void 0 : settings.hideTitle) ?? false);
    }
    if ($$self.$$.dirty & /*settings*/
    128) {
      $$invalidate(3, fontColor = (settings == null ? void 0 : settings.fontColor) ? settings.fontColor : "black");
    }
    if ($$self.$$.dirty & /*settings*/
    128) {
      $$invalidate(2, fontBlur = (settings == null ? void 0 : settings.fontBlur) ?? false);
    }
  };
  return [
    device,
    refreshSlug,
    fontBlur,
    fontColor,
    hideTitle,
    image,
    $homey,
    settings,
    refreshClear,
    $devices
  ];
}
class ImageWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$c, create_fragment$g, safe_not_equal, { settings: 7 });
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var cssClasses$1 = {
  ROOT: "mdc-form-field"
};
var strings$1 = {
  LABEL_SELECTOR: ".mdc-form-field > label"
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCFormFieldFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCFormFieldFoundation2, _super);
    function MDCFormFieldFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCFormFieldFoundation2.defaultAdapter), adapter)) || this;
      _this.click = function() {
        _this.handleClick();
      };
      return _this;
    }
    Object.defineProperty(MDCFormFieldFoundation2, "cssClasses", {
      get: function() {
        return cssClasses$1;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCFormFieldFoundation2, "strings", {
      get: function() {
        return strings$1;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCFormFieldFoundation2, "defaultAdapter", {
      get: function() {
        return {
          activateInputRipple: function() {
            return void 0;
          },
          deactivateInputRipple: function() {
            return void 0;
          },
          deregisterInteractionHandler: function() {
            return void 0;
          },
          registerInteractionHandler: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCFormFieldFoundation2.prototype.init = function() {
      this.adapter.registerInteractionHandler("click", this.click);
    };
    MDCFormFieldFoundation2.prototype.destroy = function() {
      this.adapter.deregisterInteractionHandler("click", this.click);
    };
    MDCFormFieldFoundation2.prototype.handleClick = function() {
      var _this = this;
      this.adapter.activateInputRipple();
      requestAnimationFrame(function() {
        _this.adapter.deactivateInputRipple();
      });
    };
    return MDCFormFieldFoundation2;
  }(MDCFoundation)
);
const get_label_slot_changes = (dirty) => ({});
const get_label_slot_context = (ctx) => ({});
function create_fragment$f(ctx) {
  let div;
  let t2;
  let label_1;
  let useActions_action;
  let div_class_value;
  let useActions_action_1;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[14].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[13],
    null
  );
  const label_slot_template = (
    /*#slots*/
    ctx[14].label
  );
  const label_slot = create_slot(
    label_slot_template,
    ctx,
    /*$$scope*/
    ctx[13],
    get_label_slot_context
  );
  let label_1_levels = [{ for: (
    /*inputId*/
    ctx[4]
  ) }, prefixFilter(
    /*$$restProps*/
    ctx[11],
    "label$"
  )];
  let label_data = {};
  for (let i2 = 0; i2 < label_1_levels.length; i2 += 1) {
    label_data = assign$1(label_data, label_1_levels[i2]);
  }
  let div_levels = [
    {
      class: div_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-form-field": true,
        "mdc-form-field--align-end": (
          /*align*/
          ctx[2] === "end"
        ),
        "mdc-form-field--nowrap": (
          /*noWrap*/
          ctx[3]
        )
      })
    },
    exclude(
      /*$$restProps*/
      ctx[11],
      ["label$"]
    )
  ];
  let div_data = {};
  for (let i2 = 0; i2 < div_levels.length; i2 += 1) {
    div_data = assign$1(div_data, div_levels[i2]);
  }
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      t2 = space();
      label_1 = element("label");
      if (label_slot)
        label_slot.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      t2 = claim_space(div_nodes);
      label_1 = claim_element(div_nodes, "LABEL", { for: true });
      var label_1_nodes = children(label_1);
      if (label_slot)
        label_slot.l(label_1_nodes);
      label_1_nodes.forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_attributes(label_1, label_data);
      set_attributes(div, div_data);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      append_hydration(div, t2);
      append_hydration(div, label_1);
      if (label_slot) {
        label_slot.m(label_1, null);
      }
      ctx[15](label_1);
      ctx[16](div);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            label_1,
            /*label$use*/
            ctx[5]
          )),
          action_destroyer(useActions_action_1 = useActions.call(
            null,
            div,
            /*use*/
            ctx[0]
          )),
          action_destroyer(
            /*forwardEvents*/
            ctx[9].call(null, div)
          ),
          listen(
            div,
            "SMUIGenericInput:mount",
            /*handleInputMount*/
            ctx[10]
          ),
          listen(
            div,
            "SMUIGenericInput:unmount",
            /*SMUIGenericInput_unmount_handler*/
            ctx[17]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8192)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[13],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[13]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[13],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (label_slot) {
        if (label_slot.p && (!current || dirty & /*$$scope*/
        8192)) {
          update_slot_base(
            label_slot,
            label_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[13],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[13]
            ) : get_slot_changes(
              label_slot_template,
              /*$$scope*/
              ctx2[13],
              dirty,
              get_label_slot_changes
            ),
            get_label_slot_context
          );
        }
      }
      set_attributes(label_1, label_data = get_spread_update(label_1_levels, [
        (!current || dirty & /*inputId*/
        16) && { for: (
          /*inputId*/
          ctx2[4]
        ) },
        dirty & /*$$restProps*/
        2048 && prefixFilter(
          /*$$restProps*/
          ctx2[11],
          "label$"
        )
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*label$use*/
      32)
        useActions_action.update.call(
          null,
          /*label$use*/
          ctx2[5]
        );
      set_attributes(div, div_data = get_spread_update(div_levels, [
        (!current || dirty & /*className, align, noWrap*/
        14 && div_class_value !== (div_class_value = classMap({
          [
            /*className*/
            ctx2[1]
          ]: true,
          "mdc-form-field": true,
          "mdc-form-field--align-end": (
            /*align*/
            ctx2[2] === "end"
          ),
          "mdc-form-field--nowrap": (
            /*noWrap*/
            ctx2[3]
          )
        }))) && { class: div_class_value },
        dirty & /*$$restProps*/
        2048 && exclude(
          /*$$restProps*/
          ctx2[11],
          ["label$"]
        )
      ]));
      if (useActions_action_1 && is_function(useActions_action_1.update) && dirty & /*use*/
      1)
        useActions_action_1.update.call(
          null,
          /*use*/
          ctx2[0]
        );
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      transition_in(label_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      transition_out(label_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      if (label_slot)
        label_slot.d(detaching);
      ctx[15](null);
      ctx[16](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
let counter = 0;
function instance_1$1($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "align", "noWrap", "inputId", "label$use", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { align = "start" } = $$props;
  let { noWrap = false } = $$props;
  let { inputId = "SMUI-form-field-" + counter++ } = $$props;
  let { label$use = [] } = $$props;
  let element2;
  let instance2;
  let label;
  let input;
  setContext("SMUI:generic:input:props", { id: inputId });
  onMount(() => {
    instance2 = new MDCFormFieldFoundation({
      activateInputRipple: () => {
        if (input) {
          input.activateRipple();
        }
      },
      deactivateInputRipple: () => {
        if (input) {
          input.deactivateRipple();
        }
      },
      deregisterInteractionHandler: (evtType, handler) => {
        label.removeEventListener(evtType, handler);
      },
      registerInteractionHandler: (evtType, handler) => {
        label.addEventListener(evtType, handler);
      }
    });
    instance2.init();
    return () => {
      instance2.destroy();
    };
  });
  function handleInputMount(event) {
    $$invalidate(8, input = event.detail);
  }
  function getElement() {
    return element2;
  }
  function label_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      label = $$value;
      $$invalidate(7, label);
    });
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(6, element2);
    });
  }
  const SMUIGenericInput_unmount_handler = () => $$invalidate(8, input = void 0);
  $$self.$$set = ($$new_props) => {
    $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("align" in $$new_props)
      $$invalidate(2, align = $$new_props.align);
    if ("noWrap" in $$new_props)
      $$invalidate(3, noWrap = $$new_props.noWrap);
    if ("inputId" in $$new_props)
      $$invalidate(4, inputId = $$new_props.inputId);
    if ("label$use" in $$new_props)
      $$invalidate(5, label$use = $$new_props.label$use);
    if ("$$scope" in $$new_props)
      $$invalidate(13, $$scope = $$new_props.$$scope);
  };
  return [
    use,
    className,
    align,
    noWrap,
    inputId,
    label$use,
    element2,
    label,
    input,
    forwardEvents,
    handleInputMount,
    $$restProps,
    getElement,
    $$scope,
    slots,
    label_1_binding,
    div_binding,
    SMUIGenericInput_unmount_handler
  ];
}
class FormField extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance_1$1, create_fragment$f, safe_not_equal, {
      use: 0,
      class: 1,
      align: 2,
      noWrap: 3,
      inputId: 4,
      label$use: 5,
      getElement: 12
    });
  }
  get getElement() {
    return this.$$.ctx[12];
  }
}
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var cssClasses = {
  ANIM_CHECKED_INDETERMINATE: "mdc-checkbox--anim-checked-indeterminate",
  ANIM_CHECKED_UNCHECKED: "mdc-checkbox--anim-checked-unchecked",
  ANIM_INDETERMINATE_CHECKED: "mdc-checkbox--anim-indeterminate-checked",
  ANIM_INDETERMINATE_UNCHECKED: "mdc-checkbox--anim-indeterminate-unchecked",
  ANIM_UNCHECKED_CHECKED: "mdc-checkbox--anim-unchecked-checked",
  ANIM_UNCHECKED_INDETERMINATE: "mdc-checkbox--anim-unchecked-indeterminate",
  BACKGROUND: "mdc-checkbox__background",
  CHECKED: "mdc-checkbox--checked",
  CHECKMARK: "mdc-checkbox__checkmark",
  CHECKMARK_PATH: "mdc-checkbox__checkmark-path",
  DISABLED: "mdc-checkbox--disabled",
  INDETERMINATE: "mdc-checkbox--indeterminate",
  MIXEDMARK: "mdc-checkbox__mixedmark",
  NATIVE_CONTROL: "mdc-checkbox__native-control",
  ROOT: "mdc-checkbox",
  SELECTED: "mdc-checkbox--selected",
  UPGRADED: "mdc-checkbox--upgraded"
};
var strings = {
  ARIA_CHECKED_ATTR: "aria-checked",
  ARIA_CHECKED_INDETERMINATE_VALUE: "mixed",
  DATA_INDETERMINATE_ATTR: "data-indeterminate",
  NATIVE_CONTROL_SELECTOR: ".mdc-checkbox__native-control",
  TRANSITION_STATE_CHECKED: "checked",
  TRANSITION_STATE_INDETERMINATE: "indeterminate",
  TRANSITION_STATE_INIT: "init",
  TRANSITION_STATE_UNCHECKED: "unchecked"
};
var numbers$1 = {
  ANIM_END_LATCH_MS: 250
};
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCCheckboxFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCCheckboxFoundation2, _super);
    function MDCCheckboxFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCCheckboxFoundation2.defaultAdapter), adapter)) || this;
      _this.currentCheckState = strings.TRANSITION_STATE_INIT;
      _this.currentAnimationClass = "";
      _this.animEndLatchTimer = 0;
      _this.enableAnimationEndHandler = false;
      return _this;
    }
    Object.defineProperty(MDCCheckboxFoundation2, "cssClasses", {
      get: function() {
        return cssClasses;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation2, "strings", {
      get: function() {
        return strings;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation2, "numbers", {
      get: function() {
        return numbers$1;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          forceLayout: function() {
            return void 0;
          },
          hasNativeControl: function() {
            return false;
          },
          isAttachedToDOM: function() {
            return false;
          },
          isChecked: function() {
            return false;
          },
          isIndeterminate: function() {
            return false;
          },
          removeClass: function() {
            return void 0;
          },
          removeNativeControlAttr: function() {
            return void 0;
          },
          setNativeControlAttr: function() {
            return void 0;
          },
          setNativeControlDisabled: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCCheckboxFoundation2.prototype.init = function() {
      this.currentCheckState = this.determineCheckState();
      this.updateAriaChecked();
      this.adapter.addClass(cssClasses.UPGRADED);
    };
    MDCCheckboxFoundation2.prototype.destroy = function() {
      clearTimeout(this.animEndLatchTimer);
    };
    MDCCheckboxFoundation2.prototype.setDisabled = function(disabled) {
      this.adapter.setNativeControlDisabled(disabled);
      if (disabled) {
        this.adapter.addClass(cssClasses.DISABLED);
      } else {
        this.adapter.removeClass(cssClasses.DISABLED);
      }
    };
    MDCCheckboxFoundation2.prototype.handleAnimationEnd = function() {
      var _this = this;
      if (!this.enableAnimationEndHandler) {
        return;
      }
      clearTimeout(this.animEndLatchTimer);
      this.animEndLatchTimer = setTimeout(function() {
        _this.adapter.removeClass(_this.currentAnimationClass);
        _this.enableAnimationEndHandler = false;
      }, numbers$1.ANIM_END_LATCH_MS);
    };
    MDCCheckboxFoundation2.prototype.handleChange = function() {
      this.transitionCheckState();
    };
    MDCCheckboxFoundation2.prototype.transitionCheckState = function() {
      if (!this.adapter.hasNativeControl()) {
        return;
      }
      var oldState = this.currentCheckState;
      var newState = this.determineCheckState();
      if (oldState === newState) {
        return;
      }
      this.updateAriaChecked();
      var TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;
      var SELECTED = cssClasses.SELECTED;
      if (newState === TRANSITION_STATE_UNCHECKED) {
        this.adapter.removeClass(SELECTED);
      } else {
        this.adapter.addClass(SELECTED);
      }
      if (this.currentAnimationClass.length > 0) {
        clearTimeout(this.animEndLatchTimer);
        this.adapter.forceLayout();
        this.adapter.removeClass(this.currentAnimationClass);
      }
      this.currentAnimationClass = this.getTransitionAnimationClass(oldState, newState);
      this.currentCheckState = newState;
      if (this.adapter.isAttachedToDOM() && this.currentAnimationClass.length > 0) {
        this.adapter.addClass(this.currentAnimationClass);
        this.enableAnimationEndHandler = true;
      }
    };
    MDCCheckboxFoundation2.prototype.determineCheckState = function() {
      var TRANSITION_STATE_INDETERMINATE = strings.TRANSITION_STATE_INDETERMINATE, TRANSITION_STATE_CHECKED = strings.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;
      if (this.adapter.isIndeterminate()) {
        return TRANSITION_STATE_INDETERMINATE;
      }
      return this.adapter.isChecked() ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;
    };
    MDCCheckboxFoundation2.prototype.getTransitionAnimationClass = function(oldState, newState) {
      var TRANSITION_STATE_INIT = strings.TRANSITION_STATE_INIT, TRANSITION_STATE_CHECKED = strings.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;
      var _a2 = MDCCheckboxFoundation2.cssClasses, ANIM_UNCHECKED_CHECKED = _a2.ANIM_UNCHECKED_CHECKED, ANIM_UNCHECKED_INDETERMINATE = _a2.ANIM_UNCHECKED_INDETERMINATE, ANIM_CHECKED_UNCHECKED = _a2.ANIM_CHECKED_UNCHECKED, ANIM_CHECKED_INDETERMINATE = _a2.ANIM_CHECKED_INDETERMINATE, ANIM_INDETERMINATE_CHECKED = _a2.ANIM_INDETERMINATE_CHECKED, ANIM_INDETERMINATE_UNCHECKED = _a2.ANIM_INDETERMINATE_UNCHECKED;
      switch (oldState) {
        case TRANSITION_STATE_INIT:
          if (newState === TRANSITION_STATE_UNCHECKED) {
            return "";
          }
          return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
        case TRANSITION_STATE_UNCHECKED:
          return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;
        case TRANSITION_STATE_CHECKED:
          return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;
        default:
          return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
      }
    };
    MDCCheckboxFoundation2.prototype.updateAriaChecked = function() {
      if (this.adapter.isIndeterminate()) {
        this.adapter.setNativeControlAttr(strings.ARIA_CHECKED_ATTR, strings.ARIA_CHECKED_INDETERMINATE_VALUE);
      } else {
        this.adapter.removeNativeControlAttr(strings.ARIA_CHECKED_ATTR);
      }
    };
    return MDCCheckboxFoundation2;
  }(MDCFoundation)
);
function create_fragment$e(ctx) {
  let div3;
  let input;
  let input_class_value;
  let input_value_value;
  let input_data_indeterminate_value;
  let useActions_action;
  let t0;
  let div1;
  let textContent = `<svg class="mdc-checkbox__checkmark" viewBox="0 0 24 24"><path class="mdc-checkbox__checkmark-path" fill="none" d="M1.73,12.91 8.1,19.28 22.79,4.59"></path></svg> <div class="mdc-checkbox__mixedmark"></div>`;
  let t2;
  let div2;
  let div3_class_value;
  let div3_style_value;
  let useActions_action_1;
  let Ripple_action;
  let mounted;
  let dispose;
  let input_levels = [
    {
      class: input_class_value = classMap({
        [
          /*input$class*/
          ctx[9]
        ]: true,
        "mdc-checkbox__native-control": true
      })
    },
    { type: "checkbox" },
    /*inputProps*/
    ctx[20],
    { disabled: (
      /*disabled*/
      ctx[1]
    ) },
    {
      __value: input_value_value = /*isUninitializedValue*/
      ctx[19](
        /*valueKey*/
        ctx[7]
      ) ? (
        /*value*/
        ctx[6]
      ) : (
        /*valueKey*/
        ctx[7]
      )
    },
    {
      "data-indeterminate": input_data_indeterminate_value = !/*isUninitializedValue*/
      ctx[19](
        /*indeterminate*/
        ctx[0]
      ) && /*indeterminate*/
      ctx[0] ? "true" : void 0
    },
    /*nativeControlAttrs*/
    ctx[16],
    prefixFilter(
      /*$$restProps*/
      ctx[26],
      "input$"
    )
  ];
  let input_data = {};
  for (let i2 = 0; i2 < input_levels.length; i2 += 1) {
    input_data = assign$1(input_data, input_levels[i2]);
  }
  let div3_levels = [
    {
      class: div3_class_value = classMap({
        [
          /*className*/
          ctx[3]
        ]: true,
        "mdc-checkbox": true,
        "mdc-checkbox--disabled": (
          /*disabled*/
          ctx[1]
        ),
        "mdc-checkbox--touch": (
          /*touch*/
          ctx[5]
        ),
        "mdc-data-table__header-row-checkbox": (
          /*context*/
          ctx[21] === "data-table" && /*dataTableHeader*/
          ctx[22]
        ),
        "mdc-data-table__row-checkbox": (
          /*context*/
          ctx[21] === "data-table" && !/*dataTableHeader*/
          ctx[22]
        ),
        .../*internalClasses*/
        ctx[14]
      })
    },
    {
      style: div3_style_value = Object.entries(
        /*internalStyles*/
        ctx[15]
      ).map(func).concat([
        /*style*/
        ctx[4]
      ]).join(" ")
    },
    exclude(
      /*$$restProps*/
      ctx[26],
      ["input$"]
    )
  ];
  let div_data_3 = {};
  for (let i2 = 0; i2 < div3_levels.length; i2 += 1) {
    div_data_3 = assign$1(div_data_3, div3_levels[i2]);
  }
  return {
    c() {
      div3 = element("div");
      input = element("input");
      t0 = space();
      div1 = element("div");
      div1.innerHTML = textContent;
      t2 = space();
      div2 = element("div");
      this.h();
    },
    l(nodes) {
      div3 = claim_element(nodes, "DIV", { class: true, style: true });
      var div3_nodes = children(div3);
      input = claim_element(div3_nodes, "INPUT", {
        class: true,
        type: true,
        "data-indeterminate": true
      });
      t0 = claim_space(div3_nodes);
      div1 = claim_element(div3_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div1) !== "svelte-1l3hdyl")
        div1.innerHTML = textContent;
      t2 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      children(div2).forEach(detach);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_attributes(input, input_data);
      attr(div1, "class", "mdc-checkbox__background");
      attr(div2, "class", "mdc-checkbox__ripple");
      set_attributes(div3, div_data_3);
    },
    m(target, anchor) {
      insert_hydration(target, div3, anchor);
      append_hydration(div3, input);
      if (input.autofocus)
        input.focus();
      ctx[36](input);
      input.checked = /*nativeChecked*/
      ctx[12];
      append_hydration(div3, t0);
      append_hydration(div3, div1);
      append_hydration(div3, t2);
      append_hydration(div3, div2);
      ctx[38](div3);
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            input,
            /*input$use*/
            ctx[8]
          )),
          listen(
            input,
            "change",
            /*input_change_handler*/
            ctx[37]
          ),
          listen(
            input,
            "blur",
            /*blur_handler*/
            ctx[34]
          ),
          listen(
            input,
            "focus",
            /*focus_handler*/
            ctx[35]
          ),
          action_destroyer(useActions_action_1 = useActions.call(
            null,
            div3,
            /*use*/
            ctx[2]
          )),
          action_destroyer(
            /*forwardEvents*/
            ctx[18].call(null, div3)
          ),
          action_destroyer(Ripple_action = Ripple.call(null, div3, {
            unbounded: true,
            addClass: (
              /*addClass*/
              ctx[23]
            ),
            removeClass: (
              /*removeClass*/
              ctx[24]
            ),
            addStyle: (
              /*addStyle*/
              ctx[25]
            ),
            active: (
              /*rippleActive*/
              ctx[17]
            ),
            eventTarget: (
              /*checkbox*/
              ctx[11]
            )
          })),
          listen(
            div3,
            "animationend",
            /*animationend_handler*/
            ctx[39]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      set_attributes(input, input_data = get_spread_update(input_levels, [
        dirty[0] & /*input$class*/
        512 && input_class_value !== (input_class_value = classMap({
          [
            /*input$class*/
            ctx2[9]
          ]: true,
          "mdc-checkbox__native-control": true
        })) && { class: input_class_value },
        { type: "checkbox" },
        /*inputProps*/
        ctx2[20],
        dirty[0] & /*disabled*/
        2 && { disabled: (
          /*disabled*/
          ctx2[1]
        ) },
        dirty[0] & /*valueKey, value*/
        192 && input_value_value !== (input_value_value = /*isUninitializedValue*/
        ctx2[19](
          /*valueKey*/
          ctx2[7]
        ) ? (
          /*value*/
          ctx2[6]
        ) : (
          /*valueKey*/
          ctx2[7]
        )) && { __value: input_value_value },
        dirty[0] & /*indeterminate*/
        1 && input_data_indeterminate_value !== (input_data_indeterminate_value = !/*isUninitializedValue*/
        ctx2[19](
          /*indeterminate*/
          ctx2[0]
        ) && /*indeterminate*/
        ctx2[0] ? "true" : void 0) && {
          "data-indeterminate": input_data_indeterminate_value
        },
        dirty[0] & /*nativeControlAttrs*/
        65536 && /*nativeControlAttrs*/
        ctx2[16],
        dirty[0] & /*$$restProps*/
        67108864 && prefixFilter(
          /*$$restProps*/
          ctx2[26],
          "input$"
        )
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*input$use*/
      256)
        useActions_action.update.call(
          null,
          /*input$use*/
          ctx2[8]
        );
      if (dirty[0] & /*nativeChecked*/
      4096) {
        input.checked = /*nativeChecked*/
        ctx2[12];
      }
      set_attributes(div3, div_data_3 = get_spread_update(div3_levels, [
        dirty[0] & /*className, disabled, touch, internalClasses*/
        16426 && div3_class_value !== (div3_class_value = classMap({
          [
            /*className*/
            ctx2[3]
          ]: true,
          "mdc-checkbox": true,
          "mdc-checkbox--disabled": (
            /*disabled*/
            ctx2[1]
          ),
          "mdc-checkbox--touch": (
            /*touch*/
            ctx2[5]
          ),
          "mdc-data-table__header-row-checkbox": (
            /*context*/
            ctx2[21] === "data-table" && /*dataTableHeader*/
            ctx2[22]
          ),
          "mdc-data-table__row-checkbox": (
            /*context*/
            ctx2[21] === "data-table" && !/*dataTableHeader*/
            ctx2[22]
          ),
          .../*internalClasses*/
          ctx2[14]
        })) && { class: div3_class_value },
        dirty[0] & /*internalStyles, style*/
        32784 && div3_style_value !== (div3_style_value = Object.entries(
          /*internalStyles*/
          ctx2[15]
        ).map(func).concat([
          /*style*/
          ctx2[4]
        ]).join(" ")) && { style: div3_style_value },
        dirty[0] & /*$$restProps*/
        67108864 && exclude(
          /*$$restProps*/
          ctx2[26],
          ["input$"]
        )
      ]));
      if (useActions_action_1 && is_function(useActions_action_1.update) && dirty[0] & /*use*/
      4)
        useActions_action_1.update.call(
          null,
          /*use*/
          ctx2[2]
        );
      if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*rippleActive, checkbox*/
      133120)
        Ripple_action.update.call(null, {
          unbounded: true,
          addClass: (
            /*addClass*/
            ctx2[23]
          ),
          removeClass: (
            /*removeClass*/
            ctx2[24]
          ),
          addStyle: (
            /*addStyle*/
            ctx2[25]
          ),
          active: (
            /*rippleActive*/
            ctx2[17]
          ),
          eventTarget: (
            /*checkbox*/
            ctx2[11]
          )
        });
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      ctx[36](null);
      ctx[38](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
const func = ([name, value]) => `${name}: ${value};`;
function instance_1($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "use",
    "class",
    "style",
    "disabled",
    "touch",
    "indeterminate",
    "group",
    "checked",
    "value",
    "valueKey",
    "input$use",
    "input$class",
    "getId",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  var _a2;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let uninitializedValue = () => {
  };
  function isUninitializedValue(value2) {
    return value2 === uninitializedValue;
  }
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { disabled = false } = $$props;
  let { touch = false } = $$props;
  let { indeterminate = uninitializedValue } = $$props;
  let { group = uninitializedValue } = $$props;
  let { checked = uninitializedValue } = $$props;
  let { value = null } = $$props;
  let { valueKey = uninitializedValue } = $$props;
  let { input$use = [] } = $$props;
  let { input$class = "" } = $$props;
  let element2;
  let instance2;
  let checkbox;
  let internalClasses = {};
  let internalStyles = {};
  let nativeControlAttrs = {};
  let rippleActive = false;
  let inputProps = (_a2 = getContext("SMUI:generic:input:props")) !== null && _a2 !== void 0 ? _a2 : {};
  let nativeChecked = isUninitializedValue(group) ? isUninitializedValue(checked) ? false : checked !== null && checked !== void 0 ? checked : void 0 : group.indexOf(value) !== -1;
  let context = getContext("SMUI:checkbox:context");
  let dataTableHeader = getContext("SMUI:data-table:row:header");
  let previousChecked = checked;
  let previousGroup = isUninitializedValue(group) ? [] : [...group];
  let previousNativeChecked = nativeChecked;
  onMount(() => {
    $$invalidate(11, checkbox.indeterminate = !isUninitializedValue(indeterminate) && indeterminate, checkbox);
    $$invalidate(10, instance2 = new MDCCheckboxFoundation({
      addClass,
      forceLayout: () => element2.offsetWidth,
      hasNativeControl: () => true,
      isAttachedToDOM: () => Boolean(element2.parentNode),
      isChecked: () => nativeChecked !== null && nativeChecked !== void 0 ? nativeChecked : false,
      isIndeterminate: () => isUninitializedValue(indeterminate) ? false : indeterminate,
      removeClass,
      removeNativeControlAttr,
      setNativeControlAttr: addNativeControlAttr,
      setNativeControlDisabled: (value2) => $$invalidate(1, disabled = value2)
    }));
    const accessor = {
      _smui_checkbox_accessor: true,
      get element() {
        return getElement();
      },
      get checked() {
        return nativeChecked !== null && nativeChecked !== void 0 ? nativeChecked : false;
      },
      set checked(value2) {
        if (nativeChecked !== value2) {
          $$invalidate(12, nativeChecked = value2);
        }
      },
      get indeterminate() {
        return isUninitializedValue(indeterminate) ? false : indeterminate;
      },
      set indeterminate(value2) {
        $$invalidate(0, indeterminate = value2);
      },
      activateRipple() {
        if (!disabled) {
          $$invalidate(17, rippleActive = true);
        }
      },
      deactivateRipple() {
        $$invalidate(17, rippleActive = false);
      }
    };
    dispatch(element2, "SMUIGenericInput:mount", accessor);
    dispatch(element2, "SMUICheckbox:mount", accessor);
    instance2.init();
    return () => {
      dispatch(element2, "SMUIGenericInput:unmount", accessor);
      dispatch(element2, "SMUICheckbox:unmount", accessor);
      instance2.destroy();
    };
  });
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(14, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(14, internalClasses[className2] = false, internalClasses);
    }
  }
  function addStyle(name, value2) {
    if (internalStyles[name] != value2) {
      if (value2 === "" || value2 == null) {
        delete internalStyles[name];
        $$invalidate(15, internalStyles);
      } else {
        $$invalidate(15, internalStyles[name] = value2, internalStyles);
      }
    }
  }
  function addNativeControlAttr(name, value2) {
    if (nativeControlAttrs[name] !== value2) {
      $$invalidate(16, nativeControlAttrs[name] = value2, nativeControlAttrs);
    }
  }
  function removeNativeControlAttr(name) {
    if (!(name in nativeControlAttrs) || nativeControlAttrs[name] != null) {
      $$invalidate(16, nativeControlAttrs[name] = void 0, nativeControlAttrs);
    }
  }
  function getId() {
    return inputProps && inputProps.id;
  }
  function getElement() {
    return element2;
  }
  function blur_handler(event) {
    bubble.call(this, $$self, event);
  }
  function focus_handler(event) {
    bubble.call(this, $$self, event);
  }
  function input_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      checkbox = $$value;
      $$invalidate(11, checkbox), $$invalidate(27, group), $$invalidate(33, previousNativeChecked), $$invalidate(12, nativeChecked), $$invalidate(6, value), $$invalidate(32, previousGroup), $$invalidate(28, checked), $$invalidate(31, previousChecked), $$invalidate(0, indeterminate), $$invalidate(10, instance2);
    });
  }
  function input_change_handler() {
    nativeChecked = this.checked;
    $$invalidate(12, nativeChecked), $$invalidate(27, group), $$invalidate(33, previousNativeChecked), $$invalidate(6, value), $$invalidate(32, previousGroup), $$invalidate(28, checked), $$invalidate(31, previousChecked), $$invalidate(0, indeterminate), $$invalidate(11, checkbox), $$invalidate(10, instance2);
  }
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(13, element2);
    });
  }
  const animationend_handler = () => instance2 && instance2.handleAnimationEnd();
  $$self.$$set = ($$new_props) => {
    $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(26, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(2, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(3, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(4, style = $$new_props.style);
    if ("disabled" in $$new_props)
      $$invalidate(1, disabled = $$new_props.disabled);
    if ("touch" in $$new_props)
      $$invalidate(5, touch = $$new_props.touch);
    if ("indeterminate" in $$new_props)
      $$invalidate(0, indeterminate = $$new_props.indeterminate);
    if ("group" in $$new_props)
      $$invalidate(27, group = $$new_props.group);
    if ("checked" in $$new_props)
      $$invalidate(28, checked = $$new_props.checked);
    if ("value" in $$new_props)
      $$invalidate(6, value = $$new_props.value);
    if ("valueKey" in $$new_props)
      $$invalidate(7, valueKey = $$new_props.valueKey);
    if ("input$use" in $$new_props)
      $$invalidate(8, input$use = $$new_props.input$use);
    if ("input$class" in $$new_props)
      $$invalidate(9, input$class = $$new_props.input$class);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*group, nativeChecked, value, checked, indeterminate, checkbox, instance*/
    402660417 | $$self.$$.dirty[1] & /*previousNativeChecked, previousGroup, previousChecked*/
    7) {
      {
        let callHandleChange = false;
        if (!isUninitializedValue(group)) {
          if (previousNativeChecked !== nativeChecked) {
            const idx = group.indexOf(value);
            if (nativeChecked && idx === -1) {
              group.push(value);
              $$invalidate(27, group), $$invalidate(33, previousNativeChecked), $$invalidate(12, nativeChecked), $$invalidate(6, value), $$invalidate(32, previousGroup), $$invalidate(28, checked), $$invalidate(31, previousChecked), $$invalidate(0, indeterminate), $$invalidate(11, checkbox), $$invalidate(10, instance2);
            } else if (!nativeChecked && idx !== -1) {
              group.splice(idx, 1);
              $$invalidate(27, group), $$invalidate(33, previousNativeChecked), $$invalidate(12, nativeChecked), $$invalidate(6, value), $$invalidate(32, previousGroup), $$invalidate(28, checked), $$invalidate(31, previousChecked), $$invalidate(0, indeterminate), $$invalidate(11, checkbox), $$invalidate(10, instance2);
            }
            callHandleChange = true;
          } else {
            const idxPrev = previousGroup.indexOf(value);
            const idx = group.indexOf(value);
            if (idxPrev > -1 && idx === -1) {
              $$invalidate(12, nativeChecked = false);
              callHandleChange = true;
            } else if (idx > -1 && idxPrev === -1) {
              $$invalidate(12, nativeChecked = true);
              callHandleChange = true;
            }
          }
        }
        if (isUninitializedValue(checked)) {
          if (!!previousNativeChecked !== !!nativeChecked) {
            callHandleChange = true;
          }
        } else if (checked !== (nativeChecked !== null && nativeChecked !== void 0 ? nativeChecked : null)) {
          if (checked === previousChecked) {
            $$invalidate(28, checked = nativeChecked !== null && nativeChecked !== void 0 ? nativeChecked : null);
            if (!isUninitializedValue(indeterminate)) {
              $$invalidate(0, indeterminate = false);
            }
          } else {
            $$invalidate(12, nativeChecked = checked !== null && checked !== void 0 ? checked : void 0);
          }
          callHandleChange = true;
        }
        if (checkbox) {
          if (isUninitializedValue(indeterminate)) {
            if (checkbox.indeterminate) {
              $$invalidate(11, checkbox.indeterminate = false, checkbox);
              callHandleChange = true;
            }
          } else {
            if (!indeterminate && checkbox.indeterminate) {
              $$invalidate(11, checkbox.indeterminate = false, checkbox);
              callHandleChange = true;
            } else if (indeterminate && !checkbox.indeterminate) {
              $$invalidate(11, checkbox.indeterminate = true, checkbox);
              callHandleChange = true;
            }
          }
        }
        $$invalidate(31, previousChecked = checked);
        $$invalidate(32, previousGroup = isUninitializedValue(group) ? [] : [...group]);
        $$invalidate(33, previousNativeChecked = nativeChecked);
        if (callHandleChange && instance2) {
          instance2.handleChange();
        }
      }
    }
  };
  return [
    indeterminate,
    disabled,
    use,
    className,
    style,
    touch,
    value,
    valueKey,
    input$use,
    input$class,
    instance2,
    checkbox,
    nativeChecked,
    element2,
    internalClasses,
    internalStyles,
    nativeControlAttrs,
    rippleActive,
    forwardEvents,
    isUninitializedValue,
    inputProps,
    context,
    dataTableHeader,
    addClass,
    removeClass,
    addStyle,
    $$restProps,
    group,
    checked,
    getId,
    getElement,
    previousChecked,
    previousGroup,
    previousNativeChecked,
    blur_handler,
    focus_handler,
    input_binding,
    input_change_handler,
    div3_binding,
    animationend_handler
  ];
}
class Checkbox extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance_1,
      create_fragment$e,
      safe_not_equal,
      {
        use: 2,
        class: 3,
        style: 4,
        disabled: 1,
        touch: 5,
        indeterminate: 0,
        group: 27,
        checked: 28,
        value: 6,
        valueKey: 7,
        input$use: 8,
        input$class: 9,
        getId: 29,
        getElement: 30
      },
      null,
      [-1, -1]
    );
  }
  get getId() {
    return this.$$.ctx[29];
  }
  get getElement() {
    return this.$$.ctx[30];
  }
}
function get_each_context$4(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i2];
  return child_ctx;
}
function get_each_context_1$1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[27] = list[i2];
  return child_ctx;
}
function create_default_slot_26$1(ctx) {
  let t_value = (
    /*imageDevice*/
    ctx[27].name + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*imageDevices*/
      128 && t_value !== (t_value = /*imageDevice*/
      ctx2[27].name + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block_1$1(ctx) {
  let option;
  let current;
  option = new Option({
    props: {
      value: (
        /*imageDevice*/
        ctx[27].id
      ),
      $$slots: { default: [create_default_slot_26$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option.$$.fragment);
    },
    l(nodes) {
      claim_component(option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option_changes = {};
      if (dirty & /*imageDevices*/
      128)
        option_changes.value = /*imageDevice*/
        ctx2[27].id;
      if (dirty & /*$$scope, imageDevices*/
      1073741952) {
        option_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option.$set(option_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(option, detaching);
    }
  };
}
function create_default_slot_25$1(ctx) {
  let each_1_anchor;
  let current;
  let each_value_1 = ensure_array_like(
    /*imageDevices*/
    ctx[7]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*imageDevices*/
      128) {
        each_value_1 = ensure_array_like(
          /*imageDevices*/
          ctx2[7]
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$1(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_1$1(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block$9(ctx) {
  let select;
  let updating_value;
  let current;
  function select_value_binding(value) {
    ctx[11](value);
  }
  let select_props = {
    label: "Image",
    $$slots: { default: [create_default_slot_23$2] },
    $$scope: { ctx }
  };
  if (
    /*imageId*/
    ctx[1] !== void 0
  ) {
    select_props.value = /*imageId*/
    ctx[1];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  return {
    c() {
      create_component(select.$$.fragment);
    },
    l(nodes) {
      claim_component(select.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_changes = {};
      if (dirty & /*$$scope, images*/
      1073741888) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty & /*imageId*/
      2) {
        updating_value = true;
        select_changes.value = /*imageId*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select, detaching);
    }
  };
}
function create_default_slot_24$1(ctx) {
  let t_value = (
    /*img*/
    ctx[24].title + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*images*/
      64 && t_value !== (t_value = /*img*/
      ctx2[24].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block$4(ctx) {
  let option;
  let current;
  option = new Option({
    props: {
      value: (
        /*img*/
        ctx[24].id
      ),
      $$slots: { default: [create_default_slot_24$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option.$$.fragment);
    },
    l(nodes) {
      claim_component(option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option_changes = {};
      if (dirty & /*images*/
      64)
        option_changes.value = /*img*/
        ctx2[24].id;
      if (dirty & /*$$scope, images*/
      1073741888) {
        option_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option.$set(option_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(option, detaching);
    }
  };
}
function create_default_slot_23$2(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*images*/
    ctx[6]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$4(get_each_context$4(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*images*/
      64) {
        each_value = ensure_array_like(
          /*images*/
          ctx2[6]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$4(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$4(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_22$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Never");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Never");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_21$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("warning");
    },
    l(nodes) {
      t2 = claim_text(nodes, "warning");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_20$2(ctx) {
  let t2;
  let icon;
  let current;
  icon = new CommonIcon({
    props: {
      class: "material-icons",
      style: "margin-left: 5px;",
      $$slots: { default: [create_default_slot_21$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      t2 = text("1 second ");
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      t2 = claim_text(nodes, "1 second ");
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        icon_changes.$$scope = { dirty, ctx: ctx2 };
      }
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(icon, detaching);
    }
  };
}
function create_default_slot_19$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("5 seconds");
    },
    l(nodes) {
      t2 = claim_text(nodes, "5 seconds");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_18$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("15 seconds");
    },
    l(nodes) {
      t2 = claim_text(nodes, "15 seconds");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_17$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("30 seconds");
    },
    l(nodes) {
      t2 = claim_text(nodes, "30 seconds");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_16$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("1 minute");
    },
    l(nodes) {
      t2 = claim_text(nodes, "1 minute");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_15$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("5 minutes");
    },
    l(nodes) {
      t2 = claim_text(nodes, "5 minutes");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_14$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("10 minutes");
    },
    l(nodes) {
      t2 = claim_text(nodes, "10 minutes");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_13$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("30 minutes");
    },
    l(nodes) {
      t2 = claim_text(nodes, "30 minutes");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_12$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("1 hour");
    },
    l(nodes) {
      t2 = claim_text(nodes, "1 hour");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_11$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("6 hour");
    },
    l(nodes) {
      t2 = claim_text(nodes, "6 hour");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_10$4(ctx) {
  let t2;
  return {
    c() {
      t2 = text("12 hour");
    },
    l(nodes) {
      t2 = claim_text(nodes, "12 hour");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_9$4(ctx) {
  let t2;
  return {
    c() {
      t2 = text("24 hour");
    },
    l(nodes) {
      t2 = claim_text(nodes, "24 hour");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_8$4(ctx) {
  let option0;
  let t0;
  let option1;
  let t1;
  let option2;
  let t2;
  let option3;
  let t3;
  let option4;
  let t4;
  let option5;
  let t5;
  let option6;
  let t6;
  let option7;
  let t7;
  let option8;
  let t8;
  let option9;
  let t9;
  let option10;
  let t10;
  let option11;
  let t11;
  let option12;
  let current;
  option0 = new Option({
    props: {
      value: "0",
      $$slots: { default: [create_default_slot_22$2] },
      $$scope: { ctx }
    }
  });
  option1 = new Option({
    props: {
      value: "1",
      $$slots: { default: [create_default_slot_20$2] },
      $$scope: { ctx }
    }
  });
  option2 = new Option({
    props: {
      value: "5",
      $$slots: { default: [create_default_slot_19$2] },
      $$scope: { ctx }
    }
  });
  option3 = new Option({
    props: {
      value: "15",
      $$slots: { default: [create_default_slot_18$2] },
      $$scope: { ctx }
    }
  });
  option4 = new Option({
    props: {
      value: "30",
      $$slots: { default: [create_default_slot_17$2] },
      $$scope: { ctx }
    }
  });
  option5 = new Option({
    props: {
      value: "60",
      $$slots: { default: [create_default_slot_16$2] },
      $$scope: { ctx }
    }
  });
  option6 = new Option({
    props: {
      value: "300",
      $$slots: { default: [create_default_slot_15$2] },
      $$scope: { ctx }
    }
  });
  option7 = new Option({
    props: {
      value: "600",
      $$slots: { default: [create_default_slot_14$2] },
      $$scope: { ctx }
    }
  });
  option8 = new Option({
    props: {
      value: "1800",
      $$slots: { default: [create_default_slot_13$2] },
      $$scope: { ctx }
    }
  });
  option9 = new Option({
    props: {
      value: "3600",
      $$slots: { default: [create_default_slot_12$2] },
      $$scope: { ctx }
    }
  });
  option10 = new Option({
    props: {
      value: "21600",
      $$slots: { default: [create_default_slot_11$3] },
      $$scope: { ctx }
    }
  });
  option11 = new Option({
    props: {
      value: "43200",
      $$slots: { default: [create_default_slot_10$4] },
      $$scope: { ctx }
    }
  });
  option12 = new Option({
    props: {
      value: "86400",
      $$slots: { default: [create_default_slot_9$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option0.$$.fragment);
      t0 = space();
      create_component(option1.$$.fragment);
      t1 = space();
      create_component(option2.$$.fragment);
      t2 = space();
      create_component(option3.$$.fragment);
      t3 = space();
      create_component(option4.$$.fragment);
      t4 = space();
      create_component(option5.$$.fragment);
      t5 = space();
      create_component(option6.$$.fragment);
      t6 = space();
      create_component(option7.$$.fragment);
      t7 = space();
      create_component(option8.$$.fragment);
      t8 = space();
      create_component(option9.$$.fragment);
      t9 = space();
      create_component(option10.$$.fragment);
      t10 = space();
      create_component(option11.$$.fragment);
      t11 = space();
      create_component(option12.$$.fragment);
    },
    l(nodes) {
      claim_component(option0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(option1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(option2.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(option3.$$.fragment, nodes);
      t3 = claim_space(nodes);
      claim_component(option4.$$.fragment, nodes);
      t4 = claim_space(nodes);
      claim_component(option5.$$.fragment, nodes);
      t5 = claim_space(nodes);
      claim_component(option6.$$.fragment, nodes);
      t6 = claim_space(nodes);
      claim_component(option7.$$.fragment, nodes);
      t7 = claim_space(nodes);
      claim_component(option8.$$.fragment, nodes);
      t8 = claim_space(nodes);
      claim_component(option9.$$.fragment, nodes);
      t9 = claim_space(nodes);
      claim_component(option10.$$.fragment, nodes);
      t10 = claim_space(nodes);
      claim_component(option11.$$.fragment, nodes);
      t11 = claim_space(nodes);
      claim_component(option12.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option0, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(option1, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(option2, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(option3, target, anchor);
      insert_hydration(target, t3, anchor);
      mount_component(option4, target, anchor);
      insert_hydration(target, t4, anchor);
      mount_component(option5, target, anchor);
      insert_hydration(target, t5, anchor);
      mount_component(option6, target, anchor);
      insert_hydration(target, t6, anchor);
      mount_component(option7, target, anchor);
      insert_hydration(target, t7, anchor);
      mount_component(option8, target, anchor);
      insert_hydration(target, t8, anchor);
      mount_component(option9, target, anchor);
      insert_hydration(target, t9, anchor);
      mount_component(option10, target, anchor);
      insert_hydration(target, t10, anchor);
      mount_component(option11, target, anchor);
      insert_hydration(target, t11, anchor);
      mount_component(option12, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option0.$set(option0_changes);
      const option1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option1.$set(option1_changes);
      const option2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option2.$set(option2_changes);
      const option3_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option3.$set(option3_changes);
      const option4_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option4.$set(option4_changes);
      const option5_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option5.$set(option5_changes);
      const option6_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option6.$set(option6_changes);
      const option7_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option7_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option7.$set(option7_changes);
      const option8_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option8_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option8.$set(option8_changes);
      const option9_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option9_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option9.$set(option9_changes);
      const option10_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option10_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option10.$set(option10_changes);
      const option11_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option11_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option11.$set(option11_changes);
      const option12_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option12_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option12.$set(option12_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option0.$$.fragment, local);
      transition_in(option1.$$.fragment, local);
      transition_in(option2.$$.fragment, local);
      transition_in(option3.$$.fragment, local);
      transition_in(option4.$$.fragment, local);
      transition_in(option5.$$.fragment, local);
      transition_in(option6.$$.fragment, local);
      transition_in(option7.$$.fragment, local);
      transition_in(option8.$$.fragment, local);
      transition_in(option9.$$.fragment, local);
      transition_in(option10.$$.fragment, local);
      transition_in(option11.$$.fragment, local);
      transition_in(option12.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option0.$$.fragment, local);
      transition_out(option1.$$.fragment, local);
      transition_out(option2.$$.fragment, local);
      transition_out(option3.$$.fragment, local);
      transition_out(option4.$$.fragment, local);
      transition_out(option5.$$.fragment, local);
      transition_out(option6.$$.fragment, local);
      transition_out(option7.$$.fragment, local);
      transition_out(option8.$$.fragment, local);
      transition_out(option9.$$.fragment, local);
      transition_out(option10.$$.fragment, local);
      transition_out(option11.$$.fragment, local);
      transition_out(option12.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
        detach(t5);
        detach(t6);
        detach(t7);
        detach(t8);
        detach(t9);
        detach(t10);
        detach(t11);
      }
      destroy_component(option0, detaching);
      destroy_component(option1, detaching);
      destroy_component(option2, detaching);
      destroy_component(option3, detaching);
      destroy_component(option4, detaching);
      destroy_component(option5, detaching);
      destroy_component(option6, detaching);
      destroy_component(option7, detaching);
      destroy_component(option8, detaching);
      destroy_component(option9, detaching);
      destroy_component(option10, detaching);
      destroy_component(option11, detaching);
      destroy_component(option12, detaching);
    }
  };
}
function create_default_slot_7$4(ctx) {
  let checkbox;
  let updating_checked;
  let current;
  function checkbox_checked_binding(value) {
    ctx[13](value);
  }
  let checkbox_props = {};
  if (
    /*hideTitle*/
    ctx[3] !== void 0
  ) {
    checkbox_props.checked = /*hideTitle*/
    ctx[3];
  }
  checkbox = new Checkbox({ props: checkbox_props });
  binding_callbacks.push(() => bind(checkbox, "checked", checkbox_checked_binding));
  return {
    c() {
      create_component(checkbox.$$.fragment);
    },
    l(nodes) {
      claim_component(checkbox.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(checkbox, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const checkbox_changes = {};
      if (!updating_checked && dirty & /*hideTitle*/
      8) {
        updating_checked = true;
        checkbox_changes.checked = /*hideTitle*/
        ctx2[3];
        add_flush_callback(() => updating_checked = false);
      }
      checkbox.$set(checkbox_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(checkbox.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(checkbox.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(checkbox, detaching);
    }
  };
}
function create_label_slot_1(ctx) {
  let span;
  let textContent = "Hide title";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { slot: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-e5s4b7")
        span.textContent = textContent;
      this.h();
    },
    h() {
      attr(span, "slot", "label");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_default_slot_6$5(ctx) {
  let checkbox;
  let updating_checked;
  let current;
  function checkbox_checked_binding_1(value) {
    ctx[14](value);
  }
  let checkbox_props = { disabled: (
    /*hideTitle*/
    ctx[3]
  ) };
  if (
    /*fontBlur*/
    ctx[5] !== void 0
  ) {
    checkbox_props.checked = /*fontBlur*/
    ctx[5];
  }
  checkbox = new Checkbox({ props: checkbox_props });
  binding_callbacks.push(() => bind(checkbox, "checked", checkbox_checked_binding_1));
  return {
    c() {
      create_component(checkbox.$$.fragment);
    },
    l(nodes) {
      claim_component(checkbox.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(checkbox, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const checkbox_changes = {};
      if (dirty & /*hideTitle*/
      8)
        checkbox_changes.disabled = /*hideTitle*/
        ctx2[3];
      if (!updating_checked && dirty & /*fontBlur*/
      32) {
        updating_checked = true;
        checkbox_changes.checked = /*fontBlur*/
        ctx2[5];
        add_flush_callback(() => updating_checked = false);
      }
      checkbox.$set(checkbox_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(checkbox.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(checkbox.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(checkbox, detaching);
    }
  };
}
function create_label_slot(ctx) {
  let span;
  let textContent = "Blur background";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { slot: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1a4lmom")
        span.textContent = textContent;
      this.h();
    },
    h() {
      attr(span, "slot", "label");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_default_slot_5$5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Black");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Black");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_4$5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("White");
    },
    l(nodes) {
      t2 = claim_text(nodes, "White");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_3$5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Red");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Red");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_2$6(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Green");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Green");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_1$6(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Blue");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Blue");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot$7(ctx) {
  let option0;
  let t0;
  let option1;
  let t1;
  let option2;
  let t2;
  let option3;
  let t3;
  let option4;
  let current;
  option0 = new Option({
    props: {
      value: "black",
      $$slots: { default: [create_default_slot_5$5] },
      $$scope: { ctx }
    }
  });
  option1 = new Option({
    props: {
      value: "white",
      $$slots: { default: [create_default_slot_4$5] },
      $$scope: { ctx }
    }
  });
  option2 = new Option({
    props: {
      value: "red",
      $$slots: { default: [create_default_slot_3$5] },
      $$scope: { ctx }
    }
  });
  option3 = new Option({
    props: {
      value: "green",
      $$slots: { default: [create_default_slot_2$6] },
      $$scope: { ctx }
    }
  });
  option4 = new Option({
    props: {
      value: "blue",
      $$slots: { default: [create_default_slot_1$6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option0.$$.fragment);
      t0 = space();
      create_component(option1.$$.fragment);
      t1 = space();
      create_component(option2.$$.fragment);
      t2 = space();
      create_component(option3.$$.fragment);
      t3 = space();
      create_component(option4.$$.fragment);
    },
    l(nodes) {
      claim_component(option0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(option1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(option2.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(option3.$$.fragment, nodes);
      t3 = claim_space(nodes);
      claim_component(option4.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option0, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(option1, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(option2, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(option3, target, anchor);
      insert_hydration(target, t3, anchor);
      mount_component(option4, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option0.$set(option0_changes);
      const option1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option1.$set(option1_changes);
      const option2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option2.$set(option2_changes);
      const option3_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option3.$set(option3_changes);
      const option4_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option4.$set(option4_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option0.$$.fragment, local);
      transition_in(option1.$$.fragment, local);
      transition_in(option2.$$.fragment, local);
      transition_in(option3.$$.fragment, local);
      transition_in(option4.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option0.$$.fragment, local);
      transition_out(option1.$$.fragment, local);
      transition_out(option2.$$.fragment, local);
      transition_out(option3.$$.fragment, local);
      transition_out(option4.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
      }
      destroy_component(option0, detaching);
      destroy_component(option1, detaching);
      destroy_component(option2, detaching);
      destroy_component(option3, detaching);
      destroy_component(option4, detaching);
    }
  };
}
function create_fragment$d(ctx) {
  let div0;
  let select0;
  let updating_value;
  let t0;
  let div1;
  let t1;
  let select1;
  let updating_value_1;
  let t2;
  let formfield0;
  let t3;
  let formfield1;
  let t4;
  let select2;
  let updating_value_2;
  let current;
  function select0_value_binding(value) {
    ctx[10](value);
  }
  let select0_props = {
    label: "Device",
    $$slots: { default: [create_default_slot_25$1] },
    $$scope: { ctx }
  };
  if (
    /*deviceId*/
    ctx[0] !== void 0
  ) {
    select0_props.value = /*deviceId*/
    ctx[0];
  }
  select0 = new Select({ props: select0_props });
  binding_callbacks.push(() => bind(select0, "value", select0_value_binding));
  let if_block = (
    /*deviceId*/
    ctx[0] && create_if_block$9(ctx)
  );
  function select1_value_binding(value) {
    ctx[12](value);
  }
  let select1_props = {
    label: "Refresh every",
    $$slots: { default: [create_default_slot_8$4] },
    $$scope: { ctx }
  };
  if (
    /*refresh*/
    ctx[2] !== void 0
  ) {
    select1_props.value = /*refresh*/
    ctx[2];
  }
  select1 = new Select({ props: select1_props });
  binding_callbacks.push(() => bind(select1, "value", select1_value_binding));
  formfield0 = new FormField({
    props: {
      $$slots: {
        label: [create_label_slot_1],
        default: [create_default_slot_7$4]
      },
      $$scope: { ctx }
    }
  });
  formfield1 = new FormField({
    props: {
      $$slots: {
        label: [create_label_slot],
        default: [create_default_slot_6$5]
      },
      $$scope: { ctx }
    }
  });
  function select2_value_binding(value) {
    ctx[15](value);
  }
  let select2_props = {
    label: "Font color",
    disabled: (
      /*hideTitle*/
      ctx[3]
    ),
    $$slots: { default: [create_default_slot$7] },
    $$scope: { ctx }
  };
  if (
    /*fontColor*/
    ctx[4] !== void 0
  ) {
    select2_props.value = /*fontColor*/
    ctx[4];
  }
  select2 = new Select({ props: select2_props });
  binding_callbacks.push(() => bind(select2, "value", select2_value_binding));
  return {
    c() {
      div0 = element("div");
      create_component(select0.$$.fragment);
      t0 = space();
      div1 = element("div");
      if (if_block)
        if_block.c();
      t1 = space();
      create_component(select1.$$.fragment);
      t2 = space();
      create_component(formfield0.$$.fragment);
      t3 = space();
      create_component(formfield1.$$.fragment);
      t4 = space();
      create_component(select2.$$.fragment);
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", {});
      var div0_nodes = children(div0);
      claim_component(select0.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", {});
      var div1_nodes = children(div1);
      if (if_block)
        if_block.l(div1_nodes);
      div1_nodes.forEach(detach);
      t1 = claim_space(nodes);
      claim_component(select1.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(formfield0.$$.fragment, nodes);
      t3 = claim_space(nodes);
      claim_component(formfield1.$$.fragment, nodes);
      t4 = claim_space(nodes);
      claim_component(select2.$$.fragment, nodes);
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(select0, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div1, anchor);
      if (if_block)
        if_block.m(div1, null);
      insert_hydration(target, t1, anchor);
      mount_component(select1, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(formfield0, target, anchor);
      insert_hydration(target, t3, anchor);
      mount_component(formfield1, target, anchor);
      insert_hydration(target, t4, anchor);
      mount_component(select2, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const select0_changes = {};
      if (dirty & /*$$scope, imageDevices*/
      1073741952) {
        select0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty & /*deviceId*/
      1) {
        updating_value = true;
        select0_changes.value = /*deviceId*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      select0.$set(select0_changes);
      if (
        /*deviceId*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*deviceId*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$9(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const select1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        select1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value_1 && dirty & /*refresh*/
      4) {
        updating_value_1 = true;
        select1_changes.value = /*refresh*/
        ctx2[2];
        add_flush_callback(() => updating_value_1 = false);
      }
      select1.$set(select1_changes);
      const formfield0_changes = {};
      if (dirty & /*$$scope, hideTitle*/
      1073741832) {
        formfield0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formfield0.$set(formfield0_changes);
      const formfield1_changes = {};
      if (dirty & /*$$scope, hideTitle, fontBlur*/
      1073741864) {
        formfield1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formfield1.$set(formfield1_changes);
      const select2_changes = {};
      if (dirty & /*hideTitle*/
      8)
        select2_changes.disabled = /*hideTitle*/
        ctx2[3];
      if (dirty & /*$$scope*/
      1073741824) {
        select2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value_2 && dirty & /*fontColor*/
      16) {
        updating_value_2 = true;
        select2_changes.value = /*fontColor*/
        ctx2[4];
        add_flush_callback(() => updating_value_2 = false);
      }
      select2.$set(select2_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select0.$$.fragment, local);
      transition_in(if_block);
      transition_in(select1.$$.fragment, local);
      transition_in(formfield0.$$.fragment, local);
      transition_in(formfield1.$$.fragment, local);
      transition_in(select2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select0.$$.fragment, local);
      transition_out(if_block);
      transition_out(select1.$$.fragment, local);
      transition_out(formfield0.$$.fragment, local);
      transition_out(formfield1.$$.fragment, local);
      transition_out(select2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(div1);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
      }
      destroy_component(select0);
      if (if_block)
        if_block.d();
      destroy_component(select1, detaching);
      destroy_component(formfield0, detaching);
      destroy_component(formfield1, detaching);
      destroy_component(select2, detaching);
    }
  };
}
function instance$b($$self, $$props, $$invalidate) {
  let imageDevices;
  let images;
  let $devices;
  component_subscribe($$self, devices, ($$value) => $$invalidate(9, $devices = $$value));
  let { settings } = $$props;
  const dispatch2 = createEventDispatcher();
  let deviceId;
  let imageId;
  let refresh;
  let hideTitle;
  let fontColor;
  let fontBlur;
  function onSettings(s3) {
    $$invalidate(0, deviceId = settings.deviceId);
    $$invalidate(1, imageId = settings.imageId);
    $$invalidate(2, refresh = (settings == null ? void 0 : settings.refresh) ?? 0);
    $$invalidate(3, hideTitle = (settings == null ? void 0 : settings.hideTitle) ?? false);
    $$invalidate(4, fontColor = (settings == null ? void 0 : settings.fontColor) ?? "black");
    $$invalidate(5, fontBlur = (settings == null ? void 0 : settings.fontBlur) ?? false);
  }
  function onDevice(value) {
    if (value === void 0 || value === settings.deviceId) {
      return;
    }
    $$invalidate(1, imageId = void 0);
    const s3 = { ...settings, deviceId, imageId };
    dispatch2("settings", s3);
  }
  function onImage(value) {
    if (value === void 0 || value === settings.imageId) {
      return;
    }
    const s3 = { ...settings, imageId };
    dispatch2("settings", s3);
  }
  function onRefresh(value) {
    if (value !== settings.refresh) {
      const s3 = { ...settings, refresh: value };
      dispatch2("settings", s3);
    }
  }
  function onHideTitle(value) {
    if (value !== settings.hideTitle) {
      const s3 = { ...settings, hideTitle: value };
      dispatch2("settings", s3);
    }
  }
  function onFontColor(value) {
    if (value !== settings.fontColor) {
      const s3 = { ...settings, fontColor: value };
      dispatch2("settings", s3);
    }
  }
  function onFontBlur(value) {
    if (value !== settings.fontBlur) {
      const s3 = { ...settings, fontBlur: value };
      dispatch2("settings", s3);
    }
  }
  function select0_value_binding(value) {
    deviceId = value;
    $$invalidate(0, deviceId);
  }
  function select_value_binding(value) {
    imageId = value;
    $$invalidate(1, imageId);
  }
  function select1_value_binding(value) {
    refresh = value;
    $$invalidate(2, refresh);
  }
  function checkbox_checked_binding(value) {
    hideTitle = value;
    $$invalidate(3, hideTitle);
  }
  function checkbox_checked_binding_1(value) {
    fontBlur = value;
    $$invalidate(5, fontBlur);
  }
  function select2_value_binding(value) {
    fontColor = value;
    $$invalidate(4, fontColor);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(8, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    256) {
      onSettings();
    }
    if ($$self.$$.dirty & /*$devices*/
    512) {
      $$invalidate(7, imageDevices = (Object.values($devices) ?? []).filter((d3) => d3.images.length > 0).sort((a3, b2) => {
        if (a3.name === b2.name)
          return 0;
        if (a3.name < b2.name)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*deviceId, $devices*/
    513) {
      $$invalidate(6, images = deviceId ? $devices[deviceId].images : []);
    }
    if ($$self.$$.dirty & /*deviceId*/
    1) {
      onDevice(deviceId);
    }
    if ($$self.$$.dirty & /*imageId*/
    2) {
      onImage(imageId);
    }
    if ($$self.$$.dirty & /*refresh*/
    4) {
      onRefresh(refresh);
    }
    if ($$self.$$.dirty & /*hideTitle*/
    8) {
      onHideTitle(hideTitle);
    }
    if ($$self.$$.dirty & /*fontColor*/
    16) {
      onFontColor(fontColor);
    }
    if ($$self.$$.dirty & /*fontBlur*/
    32) {
      onFontBlur(fontBlur);
    }
  };
  return [
    deviceId,
    imageId,
    refresh,
    hideTitle,
    fontColor,
    fontBlur,
    images,
    imageDevices,
    settings,
    $devices,
    select0_value_binding,
    select_value_binding,
    select1_value_binding,
    checkbox_checked_binding,
    checkbox_checked_binding_1,
    select2_value_binding
  ];
}
class ImageEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$b, create_fragment$d, safe_not_equal, { settings: 8 });
  }
}
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */
function round(v) {
  return v + 0.5 | 0;
}
const lim = (v, l, h4) => Math.max(Math.min(v, h4), l);
function p2b(v) {
  return lim(round(v * 2.55), 0, 255);
}
function n2b(v) {
  return lim(round(v * 255), 0, 255);
}
function b2n(v) {
  return lim(round(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
  return lim(round(v * 100), 0, 100);
}
const map$1 = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };
const hex = [..."0123456789ABCDEF"];
const h1 = (b2) => hex[b2 & 15];
const h2 = (b2) => hex[(b2 & 240) >> 4] + hex[b2 & 15];
const eq = (b2) => (b2 & 240) >> 4 === (b2 & 15);
const isShort = (v) => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
function hexParse(str) {
  var len = str.length;
  var ret;
  if (str[0] === "#") {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map$1[str[1]] * 17,
        g: 255 & map$1[str[2]] * 17,
        b: 255 & map$1[str[3]] * 17,
        a: len === 5 ? map$1[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map$1[str[1]] << 4 | map$1[str[2]],
        g: map$1[str[3]] << 4 | map$1[str[4]],
        b: map$1[str[5]] << 4 | map$1[str[6]],
        a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
      };
    }
  }
  return ret;
}
const alpha = (a3, f) => a3 < 255 ? f(a3) : "";
function hexString(v) {
  var f = isShort(v) ? h1 : h2;
  return v ? "#" + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : void 0;
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h4, s3, l) {
  const a3 = s3 * Math.min(l, 1 - l);
  const f = (n, k2 = (n + h4 / 30) % 12) => l - a3 * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
  return [f(0), f(8), f(4)];
}
function hsv2rgbn(h4, s3, v) {
  const f = (n, k2 = (n + h4 / 60) % 6) => v - v * s3 * Math.max(Math.min(k2, 4 - k2, 1), 0);
  return [f(5), f(3), f(1)];
}
function hwb2rgbn(h4, w2, b2) {
  const rgb = hsl2rgbn(h4, 1, 0.5);
  let i2;
  if (w2 + b2 > 1) {
    i2 = 1 / (w2 + b2);
    w2 *= i2;
    b2 *= i2;
  }
  for (i2 = 0; i2 < 3; i2++) {
    rgb[i2] *= 1 - w2 - b2;
    rgb[i2] += w2;
  }
  return rgb;
}
function hueValue(r, g, b2, d3, max) {
  if (r === max) {
    return (g - b2) / d3 + (g < b2 ? 6 : 0);
  }
  if (g === max) {
    return (b2 - r) / d3 + 2;
  }
  return (r - g) / d3 + 4;
}
function rgb2hsl(v) {
  const range = 255;
  const r = v.r / range;
  const g = v.g / range;
  const b2 = v.b / range;
  const max = Math.max(r, g, b2);
  const min = Math.min(r, g, b2);
  const l = (max + min) / 2;
  let h4, s3, d3;
  if (max !== min) {
    d3 = max - min;
    s3 = l > 0.5 ? d3 / (2 - max - min) : d3 / (max + min);
    h4 = hueValue(r, g, b2, d3, max);
    h4 = h4 * 60 + 0.5;
  }
  return [h4 | 0, s3 || 0, l];
}
function calln(f, a3, b2, c2) {
  return (Array.isArray(a3) ? f(a3[0], a3[1], a3[2]) : f(a3, b2, c2)).map(n2b);
}
function hsl2rgb(h4, s3, l) {
  return calln(hsl2rgbn, h4, s3, l);
}
function hwb2rgb(h4, w2, b2) {
  return calln(hwb2rgbn, h4, w2, b2);
}
function hsv2rgb(h4, s3, v) {
  return calln(hsv2rgbn, h4, s3, v);
}
function hue(h4) {
  return (h4 % 360 + 360) % 360;
}
function hueParse(str) {
  const m3 = HUE_RE.exec(str);
  let a3 = 255;
  let v;
  if (!m3) {
    return;
  }
  if (m3[5] !== v) {
    a3 = m3[6] ? p2b(+m3[5]) : n2b(+m3[5]);
  }
  const h4 = hue(+m3[2]);
  const p1 = +m3[3] / 100;
  const p2 = +m3[4] / 100;
  if (m3[1] === "hwb") {
    v = hwb2rgb(h4, p1, p2);
  } else if (m3[1] === "hsv") {
    v = hsv2rgb(h4, p1, p2);
  } else {
    v = hsl2rgb(h4, p1, p2);
  }
  return {
    r: v[0],
    g: v[1],
    b: v[2],
    a: a3
  };
}
function rotate(v, deg) {
  var h4 = rgb2hsl(v);
  h4[0] = hue(h4[0] + deg);
  h4 = hsl2rgb(h4);
  v.r = h4[0];
  v.g = h4[1];
  v.b = h4[2];
}
function hslString(v) {
  if (!v) {
    return;
  }
  const a3 = rgb2hsl(v);
  const h4 = a3[0];
  const s3 = n2p(a3[1]);
  const l = n2p(a3[2]);
  return v.a < 255 ? `hsla(${h4}, ${s3}%, ${l}%, ${b2n(v.a)})` : `hsl(${h4}, ${s3}%, ${l}%)`;
}
const map$2 = {
  x: "dark",
  Z: "light",
  Y: "re",
  X: "blu",
  W: "gr",
  V: "medium",
  U: "slate",
  A: "ee",
  T: "ol",
  S: "or",
  B: "ra",
  C: "lateg",
  D: "ights",
  R: "in",
  Q: "turquois",
  E: "hi",
  P: "ro",
  O: "al",
  N: "le",
  M: "de",
  L: "yello",
  F: "en",
  K: "ch",
  G: "arks",
  H: "ea",
  I: "ightg",
  J: "wh"
};
const names$1 = {
  OiceXe: "f0f8ff",
  antiquewEte: "faebd7",
  aqua: "ffff",
  aquamarRe: "7fffd4",
  azuY: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "0",
  blanKedOmond: "ffebcd",
  Xe: "ff",
  XeviTet: "8a2be2",
  bPwn: "a52a2a",
  burlywood: "deb887",
  caMtXe: "5f9ea0",
  KartYuse: "7fff00",
  KocTate: "d2691e",
  cSO: "ff7f50",
  cSnflowerXe: "6495ed",
  cSnsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "ffff",
  xXe: "8b",
  xcyan: "8b8b",
  xgTMnPd: "b8860b",
  xWay: "a9a9a9",
  xgYF: "6400",
  xgYy: "a9a9a9",
  xkhaki: "bdb76b",
  xmagFta: "8b008b",
  xTivegYF: "556b2f",
  xSange: "ff8c00",
  xScEd: "9932cc",
  xYd: "8b0000",
  xsOmon: "e9967a",
  xsHgYF: "8fbc8f",
  xUXe: "483d8b",
  xUWay: "2f4f4f",
  xUgYy: "2f4f4f",
  xQe: "ced1",
  xviTet: "9400d3",
  dAppRk: "ff1493",
  dApskyXe: "bfff",
  dimWay: "696969",
  dimgYy: "696969",
  dodgerXe: "1e90ff",
  fiYbrick: "b22222",
  flSOwEte: "fffaf0",
  foYstWAn: "228b22",
  fuKsia: "ff00ff",
  gaRsbSo: "dcdcdc",
  ghostwEte: "f8f8ff",
  gTd: "ffd700",
  gTMnPd: "daa520",
  Way: "808080",
  gYF: "8000",
  gYFLw: "adff2f",
  gYy: "808080",
  honeyMw: "f0fff0",
  hotpRk: "ff69b4",
  RdianYd: "cd5c5c",
  Rdigo: "4b0082",
  ivSy: "fffff0",
  khaki: "f0e68c",
  lavFMr: "e6e6fa",
  lavFMrXsh: "fff0f5",
  lawngYF: "7cfc00",
  NmoncEffon: "fffacd",
  ZXe: "add8e6",
  ZcSO: "f08080",
  Zcyan: "e0ffff",
  ZgTMnPdLw: "fafad2",
  ZWay: "d3d3d3",
  ZgYF: "90ee90",
  ZgYy: "d3d3d3",
  ZpRk: "ffb6c1",
  ZsOmon: "ffa07a",
  ZsHgYF: "20b2aa",
  ZskyXe: "87cefa",
  ZUWay: "778899",
  ZUgYy: "778899",
  ZstAlXe: "b0c4de",
  ZLw: "ffffe0",
  lime: "ff00",
  limegYF: "32cd32",
  lRF: "faf0e6",
  magFta: "ff00ff",
  maPon: "800000",
  VaquamarRe: "66cdaa",
  VXe: "cd",
  VScEd: "ba55d3",
  VpurpN: "9370db",
  VsHgYF: "3cb371",
  VUXe: "7b68ee",
  VsprRggYF: "fa9a",
  VQe: "48d1cc",
  VviTetYd: "c71585",
  midnightXe: "191970",
  mRtcYam: "f5fffa",
  mistyPse: "ffe4e1",
  moccasR: "ffe4b5",
  navajowEte: "ffdead",
  navy: "80",
  Tdlace: "fdf5e6",
  Tive: "808000",
  TivedBb: "6b8e23",
  Sange: "ffa500",
  SangeYd: "ff4500",
  ScEd: "da70d6",
  pOegTMnPd: "eee8aa",
  pOegYF: "98fb98",
  pOeQe: "afeeee",
  pOeviTetYd: "db7093",
  papayawEp: "ffefd5",
  pHKpuff: "ffdab9",
  peru: "cd853f",
  pRk: "ffc0cb",
  plum: "dda0dd",
  powMrXe: "b0e0e6",
  purpN: "800080",
  YbeccapurpN: "663399",
  Yd: "ff0000",
  Psybrown: "bc8f8f",
  PyOXe: "4169e1",
  saddNbPwn: "8b4513",
  sOmon: "fa8072",
  sandybPwn: "f4a460",
  sHgYF: "2e8b57",
  sHshell: "fff5ee",
  siFna: "a0522d",
  silver: "c0c0c0",
  skyXe: "87ceeb",
  UXe: "6a5acd",
  UWay: "708090",
  UgYy: "708090",
  snow: "fffafa",
  sprRggYF: "ff7f",
  stAlXe: "4682b4",
  tan: "d2b48c",
  teO: "8080",
  tEstN: "d8bfd8",
  tomato: "ff6347",
  Qe: "40e0d0",
  viTet: "ee82ee",
  JHt: "f5deb3",
  wEte: "ffffff",
  wEtesmoke: "f5f5f5",
  Lw: "ffff00",
  LwgYF: "9acd32"
};
function unpack() {
  const unpacked = {};
  const keys = Object.keys(names$1);
  const tkeys = Object.keys(map$2);
  let i2, j, k2, ok, nk;
  for (i2 = 0; i2 < keys.length; i2++) {
    ok = nk = keys[i2];
    for (j = 0; j < tkeys.length; j++) {
      k2 = tkeys[j];
      nk = nk.replace(k2, map$2[k2]);
    }
    k2 = parseInt(names$1[ok], 16);
    unpacked[nk] = [k2 >> 16 & 255, k2 >> 8 & 255, k2 & 255];
  }
  return unpacked;
}
let names;
function nameParse(str) {
  if (!names) {
    names = unpack();
    names.transparent = [0, 0, 0, 0];
  }
  const a3 = names[str.toLowerCase()];
  return a3 && {
    r: a3[0],
    g: a3[1],
    b: a3[2],
    a: a3.length === 4 ? a3[3] : 255
  };
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
  const m3 = RGB_RE.exec(str);
  let a3 = 255;
  let r, g, b2;
  if (!m3) {
    return;
  }
  if (m3[7] !== r) {
    const v = +m3[7];
    a3 = m3[8] ? p2b(v) : lim(v * 255, 0, 255);
  }
  r = +m3[1];
  g = +m3[3];
  b2 = +m3[5];
  r = 255 & (m3[2] ? p2b(r) : lim(r, 0, 255));
  g = 255 & (m3[4] ? p2b(g) : lim(g, 0, 255));
  b2 = 255 & (m3[6] ? p2b(b2) : lim(b2, 0, 255));
  return {
    r,
    g,
    b: b2,
    a: a3
  };
}
function rgbString(v) {
  return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);
}
const to = (v) => v <= 31308e-7 ? v * 12.92 : Math.pow(v, 1 / 2.4) * 1.055 - 0.055;
const from = (v) => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
function interpolate$1(rgb1, rgb2, t2) {
  const r = from(b2n(rgb1.r));
  const g = from(b2n(rgb1.g));
  const b2 = from(b2n(rgb1.b));
  return {
    r: n2b(to(r + t2 * (from(b2n(rgb2.r)) - r))),
    g: n2b(to(g + t2 * (from(b2n(rgb2.g)) - g))),
    b: n2b(to(b2 + t2 * (from(b2n(rgb2.b)) - b2))),
    a: rgb1.a + t2 * (rgb2.a - rgb1.a)
  };
}
function modHSL(v, i2, ratio) {
  if (v) {
    let tmp = rgb2hsl(v);
    tmp[i2] = Math.max(0, Math.min(tmp[i2] + tmp[i2] * ratio, i2 === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v.r = tmp[0];
    v.g = tmp[1];
    v.b = tmp[2];
  }
}
function clone$1(v, proto) {
  return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
  var v = { r: 0, g: 0, b: 0, a: 255 };
  if (Array.isArray(input)) {
    if (input.length >= 3) {
      v = { r: input[0], g: input[1], b: input[2], a: 255 };
      if (input.length > 3) {
        v.a = n2b(input[3]);
      }
    }
  } else {
    v = clone$1(input, { r: 0, g: 0, b: 0, a: 1 });
    v.a = n2b(v.a);
  }
  return v;
}
function functionParse(str) {
  if (str.charAt(0) === "r") {
    return rgbParse(str);
  }
  return hueParse(str);
}
class Color {
  constructor(input) {
    if (input instanceof Color) {
      return input;
    }
    const type = typeof input;
    let v;
    if (type === "object") {
      v = fromObject(input);
    } else if (type === "string") {
      v = hexParse(input) || nameParse(input) || functionParse(input);
    }
    this._rgb = v;
    this._valid = !!v;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
    var v = clone$1(this._rgb);
    if (v) {
      v.a = b2n(v.a);
    }
    return v;
  }
  set rgb(obj) {
    this._rgb = fromObject(obj);
  }
  rgbString() {
    return this._valid ? rgbString(this._rgb) : void 0;
  }
  hexString() {
    return this._valid ? hexString(this._rgb) : void 0;
  }
  hslString() {
    return this._valid ? hslString(this._rgb) : void 0;
  }
  mix(color2, weight) {
    if (color2) {
      const c1 = this.rgb;
      const c2 = color2.rgb;
      let w2;
      const p = weight === w2 ? 0.5 : weight;
      const w3 = 2 * p - 1;
      const a3 = c1.a - c2.a;
      const w1 = ((w3 * a3 === -1 ? w3 : (w3 + a3) / (1 + w3 * a3)) + 1) / 2;
      w2 = 1 - w1;
      c1.r = 255 & w1 * c1.r + w2 * c2.r + 0.5;
      c1.g = 255 & w1 * c1.g + w2 * c2.g + 0.5;
      c1.b = 255 & w1 * c1.b + w2 * c2.b + 0.5;
      c1.a = p * c1.a + (1 - p) * c2.a;
      this.rgb = c1;
    }
    return this;
  }
  interpolate(color2, t2) {
    if (color2) {
      this._rgb = interpolate$1(this._rgb, color2._rgb, t2);
    }
    return this;
  }
  clone() {
    return new Color(this.rgb);
  }
  alpha(a3) {
    this._rgb.a = n2b(a3);
    return this;
  }
  clearer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 - ratio;
    return this;
  }
  greyscale() {
    const rgb = this._rgb;
    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    rgb.r = rgb.g = rgb.b = val;
    return this;
  }
  opaquer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 + ratio;
    return this;
  }
  negate() {
    const v = this._rgb;
    v.r = 255 - v.r;
    v.g = 255 - v.g;
    v.b = 255 - v.b;
    return this;
  }
  lighten(ratio) {
    modHSL(this._rgb, 2, ratio);
    return this;
  }
  darken(ratio) {
    modHSL(this._rgb, 2, -ratio);
    return this;
  }
  saturate(ratio) {
    modHSL(this._rgb, 1, ratio);
    return this;
  }
  desaturate(ratio) {
    modHSL(this._rgb, 1, -ratio);
    return this;
  }
  rotate(deg) {
    rotate(this._rgb, deg);
    return this;
  }
}
/*!
 * Chart.js v4.3.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 */
function noop() {
}
const uid = (() => {
  let id = 0;
  return () => id++;
})();
function isNullOrUndef(value) {
  return value === null || typeof value === "undefined";
}
function isArray(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }
  const type = Object.prototype.toString.call(value);
  if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") {
    return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
function isNumberFinite(value) {
  return (typeof value === "number" || value instanceof Number) && isFinite(+value);
}
function finiteOrDefault(value, defaultValue) {
  return isNumberFinite(value) ? value : defaultValue;
}
function valueOrDefault(value, defaultValue) {
  return typeof value === "undefined" ? defaultValue : value;
}
const toPercentage = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : +value / dimension;
const toDimension = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === "function") {
    return fn.apply(thisArg, args);
  }
}
function each(loopable, fn, thisArg, reverse) {
  let i2, len, keys;
  if (isArray(loopable)) {
    len = loopable.length;
    if (reverse) {
      for (i2 = len - 1; i2 >= 0; i2--) {
        fn.call(thisArg, loopable[i2], i2);
      }
    } else {
      for (i2 = 0; i2 < len; i2++) {
        fn.call(thisArg, loopable[i2], i2);
      }
    }
  } else if (isObject(loopable)) {
    keys = Object.keys(loopable);
    len = keys.length;
    for (i2 = 0; i2 < len; i2++) {
      fn.call(thisArg, loopable[keys[i2]], keys[i2]);
    }
  }
}
function _elementsEqual(a0, a1) {
  let i2, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i2 = 0, ilen = a0.length; i2 < ilen; ++i2) {
    v0 = a0[i2];
    v1 = a1[i2];
    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }
  return true;
}
function clone(source) {
  if (isArray(source)) {
    return source.map(clone);
  }
  if (isObject(source)) {
    const target = /* @__PURE__ */ Object.create(null);
    const keys = Object.keys(source);
    const klen = keys.length;
    let k2 = 0;
    for (; k2 < klen; ++k2) {
      target[keys[k2]] = clone(source[keys[k2]]);
    }
    return target;
  }
  return source;
}
function isValidKey(key) {
  return [
    "__proto__",
    "prototype",
    "constructor"
  ].indexOf(key) === -1;
}
function _merger(key, target, source, options) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    merge(tval, sval, options);
  } else {
    target[key] = clone(sval);
  }
}
function merge(target, source, options) {
  const sources = isArray(source) ? source : [
    source
  ];
  const ilen = sources.length;
  if (!isObject(target)) {
    return target;
  }
  options = options || {};
  const merger = options.merger || _merger;
  let current;
  for (let i2 = 0; i2 < ilen; ++i2) {
    current = sources[i2];
    if (!isObject(current)) {
      continue;
    }
    const keys = Object.keys(current);
    for (let k2 = 0, klen = keys.length; k2 < klen; ++k2) {
      merger(keys[k2], target, current, options);
    }
  }
  return target;
}
function mergeIf(target, source) {
  return merge(target, source, {
    merger: _mergerIf
  });
}
function _mergerIf(key, target, source) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
    target[key] = clone(sval);
  }
}
const keyResolvers = {
  // Chart.helpers.core resolveObjectKey should resolve empty key to root object
  "": (v) => v,
  // default resolvers
  x: (o) => o.x,
  y: (o) => o.y
};
function _splitKey(key) {
  const parts = key.split(".");
  const keys = [];
  let tmp = "";
  for (const part of parts) {
    tmp += part;
    if (tmp.endsWith("\\")) {
      tmp = tmp.slice(0, -1) + ".";
    } else {
      keys.push(tmp);
      tmp = "";
    }
  }
  return keys;
}
function _getKeyResolver(key) {
  const keys = _splitKey(key);
  return (obj) => {
    for (const k2 of keys) {
      if (k2 === "") {
        break;
      }
      obj = obj && obj[k2];
    }
    return obj;
  };
}
function resolveObjectKey(obj, key) {
  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
  return resolver(obj);
}
function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value) => typeof value !== "undefined";
const isFunction = (value) => typeof value === "function";
const setsEqual = (a3, b2) => {
  if (a3.size !== b2.size) {
    return false;
  }
  for (const item of a3) {
    if (!b2.has(item)) {
      return false;
    }
  }
  return true;
};
function _isClickEvent(e2) {
  return e2.type === "mouseup" || e2.type === "click" || e2.type === "contextmenu";
}
const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function almostEquals(x2, y3, epsilon) {
  return Math.abs(x2 - y3) < epsilon;
}
function niceNum(range) {
  const roundedRange = Math.round(range);
  range = almostEquals(range, roundedRange, range / 1e3) ? roundedRange : range;
  const niceRange = Math.pow(10, Math.floor(log10(range)));
  const fraction = range / niceRange;
  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
  return niceFraction * niceRange;
}
function _factorize(value) {
  const result = [];
  const sqrt = Math.sqrt(value);
  let i2;
  for (i2 = 1; i2 < sqrt; i2++) {
    if (value % i2 === 0) {
      result.push(i2);
      result.push(value / i2);
    }
  }
  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }
  result.sort((a3, b2) => a3 - b2).pop();
  return result;
}
function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}
function almostWhole(x2, epsilon) {
  const rounded = Math.round(x2);
  return rounded - epsilon <= x2 && rounded + epsilon >= x2;
}
function _setMinAndMaxByKey(array, target, property) {
  let i2, ilen, value;
  for (i2 = 0, ilen = array.length; i2 < ilen; i2++) {
    value = array[i2][property];
    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}
function toRadians(degrees) {
  return degrees * (PI / 180);
}
function toDegrees(radians) {
  return radians * (180 / PI);
}
function _decimalPlaces(x2) {
  if (!isNumberFinite(x2)) {
    return;
  }
  let e2 = 1;
  let p = 0;
  while (Math.round(x2 * e2) / e2 !== x2) {
    e2 *= 10;
    p++;
  }
  return p;
}
function getAngleFromPoint(centrePoint, anglePoint) {
  const distanceFromXCenter = anglePoint.x - centrePoint.x;
  const distanceFromYCenter = anglePoint.y - centrePoint.y;
  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
  if (angle < -0.5 * PI) {
    angle += TAU;
  }
  return {
    angle,
    distance: radialDistanceFromCenter
  };
}
function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _angleDiff(a3, b2) {
  return (a3 - b2 + PITAU) % TAU - PI;
}
function _normalizeAngle(a3) {
  return (a3 % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
  const a3 = _normalizeAngle(angle);
  const s3 = _normalizeAngle(start);
  const e2 = _normalizeAngle(end);
  const angleToStart = _normalizeAngle(s3 - a3);
  const angleToEnd = _normalizeAngle(e2 - a3);
  const startToAngle = _normalizeAngle(a3 - s3);
  const endToAngle = _normalizeAngle(a3 - e2);
  return a3 === s3 || a3 === e2 || sameAngleIsFullCircle && s3 === e2 || angleToStart > angleToEnd && startToAngle < endToAngle;
}
function _limitValue(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function _int16Range(value) {
  return _limitValue(value, -32768, 32767);
}
function _isBetween(value, start, end, epsilon = 1e-6) {
  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table, value, cmp) {
  cmp = cmp || ((index2) => table[index2] < value);
  let hi = table.length - 1;
  let lo = 0;
  let mid;
  while (hi - lo > 1) {
    mid = lo + hi >> 1;
    if (cmp(mid)) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return {
    lo,
    hi
  };
}
const _lookupByKey = (table, key, value, last) => _lookup(table, value, last ? (index2) => {
  const ti = table[index2][key];
  return ti < value || ti === value && table[index2 + 1][key] === value;
} : (index2) => table[index2][key] < value);
const _rlookupByKey = (table, key, value) => _lookup(table, value, (index2) => table[index2][key] >= value);
function _filterBetween(values, min, max) {
  let start = 0;
  let end = values.length;
  while (start < end && values[start] < min) {
    start++;
  }
  while (end > start && values[end - 1] > max) {
    end--;
  }
  return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const arrayEvents = [
  "push",
  "pop",
  "shift",
  "splice",
  "unshift"
];
function listenArrayEvents(array, listener) {
  if (array._chartjs) {
    array._chartjs.listeners.push(listener);
    return;
  }
  Object.defineProperty(array, "_chartjs", {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [
        listener
      ]
    }
  });
  arrayEvents.forEach((key) => {
    const method = "_onData" + _capitalize(key);
    const base2 = array[key];
    Object.defineProperty(array, key, {
      configurable: true,
      enumerable: false,
      value(...args) {
        const res = base2.apply(this, args);
        array._chartjs.listeners.forEach((object) => {
          if (typeof object[method] === "function") {
            object[method](...args);
          }
        });
        return res;
      }
    });
  });
}
function unlistenArrayEvents(array, listener) {
  const stub = array._chartjs;
  if (!stub) {
    return;
  }
  const listeners = stub.listeners;
  const index2 = listeners.indexOf(listener);
  if (index2 !== -1) {
    listeners.splice(index2, 1);
  }
  if (listeners.length > 0) {
    return;
  }
  arrayEvents.forEach((key) => {
    delete array[key];
  });
  delete array._chartjs;
}
function _arrayUnique(items) {
  const set2 = new Set(items);
  if (set2.size === items.length) {
    return items;
  }
  return Array.from(set2);
}
const requestAnimFrame = function() {
  if (typeof window === "undefined") {
    return function(callback2) {
      return callback2();
    };
  }
  return window.requestAnimationFrame;
}();
function throttled(fn, thisArg) {
  let argsToUse = [];
  let ticking = false;
  return function(...args) {
    argsToUse = args;
    if (!ticking) {
      ticking = true;
      requestAnimFrame.call(window, () => {
        ticking = false;
        fn.apply(thisArg, argsToUse);
      });
    }
  };
}
function debounce(fn, delay) {
  let timeout;
  return function(...args) {
    if (delay) {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay, args);
    } else {
      fn.apply(this, args);
    }
    return delay;
  };
}
const _toLeftRightCenter = (align) => align === "start" ? "left" : align === "end" ? "right" : "center";
const _alignStartEnd = (align, start, end) => align === "start" ? start : align === "end" ? end : (start + end) / 2;
const _textX = (align, left, right, rtl) => {
  const check = rtl ? "left" : "right";
  return align === check ? right : align === "center" ? (left + right) / 2 : left;
};
function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
  const pointCount = points.length;
  let start = 0;
  let count = pointCount;
  if (meta._sorted) {
    const { iScale, _parsed } = meta;
    const axis = iScale.axis;
    const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
    if (minDefined) {
      start = _limitValue(Math.min(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, iScale.axis, min).lo,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo
      ), 0, pointCount - 1);
    }
    if (maxDefined) {
      count = _limitValue(Math.max(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1
      ), start, pointCount) - start;
    } else {
      count = pointCount - start;
    }
  }
  return {
    start,
    count
  };
}
function _scaleRangesChanged(meta) {
  const { xScale, yScale, _scaleRanges } = meta;
  const newRanges = {
    xmin: xScale.min,
    xmax: xScale.max,
    ymin: yScale.min,
    ymax: yScale.max
  };
  if (!_scaleRanges) {
    meta._scaleRanges = newRanges;
    return true;
  }
  const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
  Object.assign(_scaleRanges, newRanges);
  return changed;
}
const atEdge = (t2) => t2 === 0 || t2 === 1;
const elasticIn = (t2, s3, p) => -(Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 - s3) * TAU / p));
const elasticOut = (t2, s3, p) => Math.pow(2, -10 * t2) * Math.sin((t2 - s3) * TAU / p) + 1;
const effects = {
  linear: (t2) => t2,
  easeInQuad: (t2) => t2 * t2,
  easeOutQuad: (t2) => -t2 * (t2 - 2),
  easeInOutQuad: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 : -0.5 * (--t2 * (t2 - 2) - 1),
  easeInCubic: (t2) => t2 * t2 * t2,
  easeOutCubic: (t2) => (t2 -= 1) * t2 * t2 + 1,
  easeInOutCubic: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 + 2),
  easeInQuart: (t2) => t2 * t2 * t2 * t2,
  easeOutQuart: (t2) => -((t2 -= 1) * t2 * t2 * t2 - 1),
  easeInOutQuart: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 : -0.5 * ((t2 -= 2) * t2 * t2 * t2 - 2),
  easeInQuint: (t2) => t2 * t2 * t2 * t2 * t2,
  easeOutQuint: (t2) => (t2 -= 1) * t2 * t2 * t2 * t2 + 1,
  easeInOutQuint: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2),
  easeInSine: (t2) => -Math.cos(t2 * HALF_PI) + 1,
  easeOutSine: (t2) => Math.sin(t2 * HALF_PI),
  easeInOutSine: (t2) => -0.5 * (Math.cos(PI * t2) - 1),
  easeInExpo: (t2) => t2 === 0 ? 0 : Math.pow(2, 10 * (t2 - 1)),
  easeOutExpo: (t2) => t2 === 1 ? 1 : -Math.pow(2, -10 * t2) + 1,
  easeInOutExpo: (t2) => atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * Math.pow(2, 10 * (t2 * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t2 * 2 - 1)) + 2),
  easeInCirc: (t2) => t2 >= 1 ? t2 : -(Math.sqrt(1 - t2 * t2) - 1),
  easeOutCirc: (t2) => Math.sqrt(1 - (t2 -= 1) * t2),
  easeInOutCirc: (t2) => (t2 /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t2 * t2) - 1) : 0.5 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1),
  easeInElastic: (t2) => atEdge(t2) ? t2 : elasticIn(t2, 0.075, 0.3),
  easeOutElastic: (t2) => atEdge(t2) ? t2 : elasticOut(t2, 0.075, 0.3),
  easeInOutElastic(t2) {
    const s3 = 0.1125;
    const p = 0.45;
    return atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * elasticIn(t2 * 2, s3, p) : 0.5 + 0.5 * elasticOut(t2 * 2 - 1, s3, p);
  },
  easeInBack(t2) {
    const s3 = 1.70158;
    return t2 * t2 * ((s3 + 1) * t2 - s3);
  },
  easeOutBack(t2) {
    const s3 = 1.70158;
    return (t2 -= 1) * t2 * ((s3 + 1) * t2 + s3) + 1;
  },
  easeInOutBack(t2) {
    let s3 = 1.70158;
    if ((t2 /= 0.5) < 1) {
      return 0.5 * (t2 * t2 * (((s3 *= 1.525) + 1) * t2 - s3));
    }
    return 0.5 * ((t2 -= 2) * t2 * (((s3 *= 1.525) + 1) * t2 + s3) + 2);
  },
  easeInBounce: (t2) => 1 - effects.easeOutBounce(1 - t2),
  easeOutBounce(t2) {
    const m3 = 7.5625;
    const d3 = 2.75;
    if (t2 < 1 / d3) {
      return m3 * t2 * t2;
    }
    if (t2 < 2 / d3) {
      return m3 * (t2 -= 1.5 / d3) * t2 + 0.75;
    }
    if (t2 < 2.5 / d3) {
      return m3 * (t2 -= 2.25 / d3) * t2 + 0.9375;
    }
    return m3 * (t2 -= 2.625 / d3) * t2 + 0.984375;
  },
  easeInOutBounce: (t2) => t2 < 0.5 ? effects.easeInBounce(t2 * 2) * 0.5 : effects.easeOutBounce(t2 * 2 - 1) * 0.5 + 0.5
};
function isPatternOrGradient(value) {
  if (value && typeof value === "object") {
    const type = value.toString();
    return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
  }
  return false;
}
function color(value) {
  return isPatternOrGradient(value) ? value : new Color(value);
}
function getHoverColor(value) {
  return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
}
const numbers = [
  "x",
  "y",
  "borderWidth",
  "radius",
  "tension"
];
const colors = [
  "color",
  "borderColor",
  "backgroundColor"
];
function applyAnimationsDefaults(defaults2) {
  defaults2.set("animation", {
    delay: void 0,
    duration: 1e3,
    easing: "easeOutQuart",
    fn: void 0,
    from: void 0,
    loop: void 0,
    to: void 0,
    type: void 0
  });
  defaults2.describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (name) => name !== "onProgress" && name !== "onComplete" && name !== "fn"
  });
  defaults2.set("animations", {
    colors: {
      type: "color",
      properties: colors
    },
    numbers: {
      type: "number",
      properties: numbers
    }
  });
  defaults2.describe("animations", {
    _fallback: "animation"
  });
  defaults2.set("transitions", {
    active: {
      animation: {
        duration: 400
      }
    },
    resize: {
      animation: {
        duration: 0
      }
    },
    show: {
      animations: {
        colors: {
          from: "transparent"
        },
        visible: {
          type: "boolean",
          duration: 0
        }
      }
    },
    hide: {
      animations: {
        colors: {
          to: "transparent"
        },
        visible: {
          type: "boolean",
          easing: "linear",
          fn: (v) => v | 0
        }
      }
    }
  });
}
function applyLayoutsDefaults(defaults2) {
  defaults2.set("layout", {
    autoPadding: true,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
}
const intlCache = /* @__PURE__ */ new Map();
function getNumberFormat(locale2, options) {
  options = options || {};
  const cacheKey = locale2 + JSON.stringify(options);
  let formatter = intlCache.get(cacheKey);
  if (!formatter) {
    formatter = new Intl.NumberFormat(locale2, options);
    intlCache.set(cacheKey, formatter);
  }
  return formatter;
}
function formatNumber(num, locale2, options) {
  return getNumberFormat(locale2, options).format(num);
}
const formatters$4 = {
  values(value) {
    return isArray(value) ? value : "" + value;
  },
  numeric(tickValue, index2, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const locale2 = this.chart.options.locale;
    let notation;
    let delta = tickValue;
    if (ticks.length > 1) {
      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
      if (maxTick < 1e-4 || maxTick > 1e15) {
        notation = "scientific";
      }
      delta = calculateDelta(tickValue, ticks);
    }
    const logDelta = log10(Math.abs(delta));
    const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
    const options = {
      notation,
      minimumFractionDigits: numDecimal,
      maximumFractionDigits: numDecimal
    };
    Object.assign(options, this.options.ticks.format);
    return formatNumber(tickValue, locale2, options);
  },
  logarithmic(tickValue, index2, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const remain = ticks[index2].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
    if ([
      1,
      2,
      3,
      5,
      10,
      15
    ].includes(remain) || index2 > 0.8 * ticks.length) {
      return formatters$4.numeric.call(this, tickValue, index2, ticks);
    }
    return "";
  }
};
function calculateDelta(tickValue, ticks) {
  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
    delta = tickValue - Math.floor(tickValue);
  }
  return delta;
}
var Ticks = {
  formatters: formatters$4
};
function applyScaleDefaults(defaults2) {
  defaults2.set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    grace: 0,
    grid: {
      display: true,
      lineWidth: 1,
      drawOnChartArea: true,
      drawTicks: true,
      tickLength: 8,
      tickWidth: (_ctx, options) => options.lineWidth,
      tickColor: (_ctx, options) => options.color,
      offset: false
    },
    border: {
      display: true,
      dash: [],
      dashOffset: 0,
      width: 1
    },
    title: {
      display: false,
      text: "",
      padding: {
        top: 4,
        bottom: 4
      }
    },
    ticks: {
      minRotation: 0,
      maxRotation: 50,
      mirror: false,
      textStrokeWidth: 0,
      textStrokeColor: "",
      padding: 3,
      display: true,
      autoSkip: true,
      autoSkipPadding: 3,
      labelOffset: 0,
      callback: Ticks.formatters.values,
      minor: {},
      major: {},
      align: "center",
      crossAlign: "near",
      showLabelBackdrop: false,
      backdropColor: "rgba(255, 255, 255, 0.75)",
      backdropPadding: 2
    }
  });
  defaults2.route("scale.ticks", "color", "", "color");
  defaults2.route("scale.grid", "color", "", "borderColor");
  defaults2.route("scale.border", "color", "", "borderColor");
  defaults2.route("scale.title", "color", "", "color");
  defaults2.describe("scale", {
    _fallback: false,
    _scriptable: (name) => !name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser",
    _indexable: (name) => name !== "borderDash" && name !== "tickBorderDash" && name !== "dash"
  });
  defaults2.describe("scales", {
    _fallback: "scale"
  });
  defaults2.describe("scale.ticks", {
    _scriptable: (name) => name !== "backdropPadding" && name !== "callback",
    _indexable: (name) => name !== "backdropPadding"
  });
}
const overrides = /* @__PURE__ */ Object.create(null);
const descriptors = /* @__PURE__ */ Object.create(null);
function getScope$1(node, key) {
  if (!key) {
    return node;
  }
  const keys = key.split(".");
  for (let i2 = 0, n = keys.length; i2 < n; ++i2) {
    const k2 = keys[i2];
    node = node[k2] || (node[k2] = /* @__PURE__ */ Object.create(null));
  }
  return node;
}
function set(root, scope, values) {
  if (typeof scope === "string") {
    return merge(getScope$1(root, scope), values);
  }
  return merge(getScope$1(root, ""), scope);
}
class Defaults {
  constructor(_descriptors2, _appliers) {
    this.animation = void 0;
    this.backgroundColor = "rgba(0,0,0,0.1)";
    this.borderColor = "rgba(0,0,0,0.1)";
    this.color = "#666";
    this.datasets = {};
    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
    this.elements = {};
    this.events = [
      "mousemove",
      "mouseout",
      "click",
      "touchstart",
      "touchmove"
    ];
    this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: "normal",
      lineHeight: 1.2,
      weight: null
    };
    this.hover = {};
    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);
    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);
    this.hoverColor = (ctx, options) => getHoverColor(options.color);
    this.indexAxis = "x";
    this.interaction = {
      mode: "nearest",
      intersect: true,
      includeInvisible: false
    };
    this.maintainAspectRatio = true;
    this.onHover = null;
    this.onClick = null;
    this.parsing = true;
    this.plugins = {};
    this.responsive = true;
    this.scale = void 0;
    this.scales = {};
    this.showLine = true;
    this.drawActiveElementsOnTop = true;
    this.describe(_descriptors2);
    this.apply(_appliers);
  }
  set(scope, values) {
    return set(this, scope, values);
  }
  get(scope) {
    return getScope$1(this, scope);
  }
  describe(scope, values) {
    return set(descriptors, scope, values);
  }
  override(scope, values) {
    return set(overrides, scope, values);
  }
  route(scope, name, targetScope, targetName) {
    const scopeObject = getScope$1(this, scope);
    const targetScopeObject = getScope$1(this, targetScope);
    const privateName = "_" + name;
    Object.defineProperties(scopeObject, {
      [privateName]: {
        value: scopeObject[name],
        writable: true
      },
      [name]: {
        enumerable: true,
        get() {
          const local = this[privateName];
          const target = targetScopeObject[targetName];
          if (isObject(local)) {
            return Object.assign({}, target, local);
          }
          return valueOrDefault(local, target);
        },
        set(value) {
          this[privateName] = value;
        }
      }
    });
  }
  apply(appliers) {
    appliers.forEach((apply) => apply(this));
  }
}
var defaults = /* @__PURE__ */ new Defaults({
  _scriptable: (name) => !name.startsWith("on"),
  _indexable: (name) => name !== "events",
  hover: {
    _fallback: "interaction"
  },
  interaction: {
    _scriptable: false,
    _indexable: false
  }
}, [
  applyAnimationsDefaults,
  applyLayoutsDefaults,
  applyScaleDefaults
]);
function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }
  return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
function _measureText(ctx, data, gc, longest, string) {
  let textWidth = data[string];
  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc.push(string);
  }
  if (textWidth > longest) {
    longest = textWidth;
  }
  return longest;
}
function _longestText(ctx, font, arrayOfThings, cache) {
  cache = cache || {};
  let data = cache.data = cache.data || {};
  let gc = cache.garbageCollect = cache.garbageCollect || [];
  if (cache.font !== font) {
    data = cache.data = {};
    gc = cache.garbageCollect = [];
    cache.font = font;
  }
  ctx.save();
  ctx.font = font;
  let longest = 0;
  const ilen = arrayOfThings.length;
  let i2, j, jlen, thing, nestedThing;
  for (i2 = 0; i2 < ilen; i2++) {
    thing = arrayOfThings[i2];
    if (thing !== void 0 && thing !== null && !isArray(thing)) {
      longest = _measureText(ctx, data, gc, longest, thing);
    } else if (isArray(thing)) {
      for (j = 0, jlen = thing.length; j < jlen; j++) {
        nestedThing = thing[j];
        if (nestedThing !== void 0 && nestedThing !== null && !isArray(nestedThing)) {
          longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
      }
    }
  }
  ctx.restore();
  const gcLen = gc.length / 2;
  if (gcLen > arrayOfThings.length) {
    for (i2 = 0; i2 < gcLen; i2++) {
      delete data[gc[i2]];
    }
    gc.splice(0, gcLen);
  }
  return longest;
}
function _alignPixel(chart, pixel, width) {
  const devicePixelRatio = chart.currentDevicePixelRatio;
  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clearCanvas(canvas, ctx) {
  ctx = ctx || canvas.getContext("2d");
  ctx.save();
  ctx.resetTransform();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}
function drawPoint(ctx, options, x2, y3) {
  drawPointLegend(ctx, options, x2, y3, null);
}
function drawPointLegend(ctx, options, x2, y3, w2) {
  let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
  const style = options.pointStyle;
  const rotation = options.rotation;
  const radius = options.radius;
  let rad = (rotation || 0) * RAD_PER_DEG;
  if (style && typeof style === "object") {
    type = style.toString();
    if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
      ctx.save();
      ctx.translate(x2, y3);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }
  if (isNaN(radius) || radius <= 0) {
    return;
  }
  ctx.beginPath();
  switch (style) {
    default:
      if (w2) {
        ctx.ellipse(x2, y3, w2 / 2, radius, 0, 0, TAU);
      } else {
        ctx.arc(x2, y3, radius, 0, TAU);
      }
      ctx.closePath();
      break;
    case "triangle":
      width = w2 ? w2 / 2 : radius;
      ctx.moveTo(x2 + Math.sin(rad) * width, y3 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y3 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y3 - Math.cos(rad) * radius);
      ctx.closePath();
      break;
    case "rectRounded":
      cornerRadius = radius * 0.516;
      size = radius - cornerRadius;
      xOffset = Math.cos(rad + QUARTER_PI) * size;
      xOffsetW = Math.cos(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size);
      yOffset = Math.sin(rad + QUARTER_PI) * size;
      yOffsetW = Math.sin(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size);
      ctx.arc(x2 - xOffsetW, y3 - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
      ctx.arc(x2 + yOffsetW, y3 - xOffset, cornerRadius, rad - HALF_PI, rad);
      ctx.arc(x2 + xOffsetW, y3 + yOffset, cornerRadius, rad, rad + HALF_PI);
      ctx.arc(x2 - yOffsetW, y3 + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
      ctx.closePath();
      break;
    case "rect":
      if (!rotation) {
        size = Math.SQRT1_2 * radius;
        width = w2 ? w2 / 2 : size;
        ctx.rect(x2 - width, y3 - size, 2 * width, 2 * size);
        break;
      }
      rad += QUARTER_PI;
    case "rectRot":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      ctx.closePath();
      break;
    case "crossRot":
      rad += QUARTER_PI;
    case "cross":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      break;
    case "star":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      rad += QUARTER_PI;
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      break;
    case "line":
      xOffset = w2 ? w2 / 2 : Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x2 - xOffset, y3 - yOffset);
      ctx.lineTo(x2 + xOffset, y3 + yOffset);
      break;
    case "dash":
      ctx.moveTo(x2, y3);
      ctx.lineTo(x2 + Math.cos(rad) * (w2 ? w2 / 2 : radius), y3 + Math.sin(rad) * radius);
      break;
    case false:
      ctx.closePath();
      break;
  }
  ctx.fill();
  if (options.borderWidth > 0) {
    ctx.stroke();
  }
}
function _isPointInArea(point, area, margin) {
  margin = margin || 0.5;
  return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}
function unclipArea(ctx) {
  ctx.restore();
}
function _steppedLineTo(ctx, previous, target, flip, mode) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  if (mode === "middle") {
    const midpoint = (previous.x + target.x) / 2;
    ctx.lineTo(midpoint, previous.y);
    ctx.lineTo(midpoint, target.y);
  } else if (mode === "after" !== !!flip) {
    ctx.lineTo(previous.x, target.y);
  } else {
    ctx.lineTo(target.x, previous.y);
  }
  ctx.lineTo(target.x, target.y);
}
function _bezierCurveTo(ctx, previous, target, flip) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function setRenderOpts(ctx, opts) {
  if (opts.translation) {
    ctx.translate(opts.translation[0], opts.translation[1]);
  }
  if (!isNullOrUndef(opts.rotation)) {
    ctx.rotate(opts.rotation);
  }
  if (opts.color) {
    ctx.fillStyle = opts.color;
  }
  if (opts.textAlign) {
    ctx.textAlign = opts.textAlign;
  }
  if (opts.textBaseline) {
    ctx.textBaseline = opts.textBaseline;
  }
}
function decorateText(ctx, x2, y3, line, opts) {
  if (opts.strikethrough || opts.underline) {
    const metrics = ctx.measureText(line);
    const left = x2 - metrics.actualBoundingBoxLeft;
    const right = x2 + metrics.actualBoundingBoxRight;
    const top = y3 - metrics.actualBoundingBoxAscent;
    const bottom = y3 + metrics.actualBoundingBoxDescent;
    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
    ctx.strokeStyle = ctx.fillStyle;
    ctx.beginPath();
    ctx.lineWidth = opts.decorationWidth || 2;
    ctx.moveTo(left, yDecoration);
    ctx.lineTo(right, yDecoration);
    ctx.stroke();
  }
}
function drawBackdrop(ctx, opts) {
  const oldColor = ctx.fillStyle;
  ctx.fillStyle = opts.color;
  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
  ctx.fillStyle = oldColor;
}
function renderText(ctx, text2, x2, y3, font, opts = {}) {
  const lines = isArray(text2) ? text2 : [
    text2
  ];
  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
  let i2, line;
  ctx.save();
  ctx.font = font.string;
  setRenderOpts(ctx, opts);
  for (i2 = 0; i2 < lines.length; ++i2) {
    line = lines[i2];
    if (opts.backdrop) {
      drawBackdrop(ctx, opts.backdrop);
    }
    if (stroke) {
      if (opts.strokeColor) {
        ctx.strokeStyle = opts.strokeColor;
      }
      if (!isNullOrUndef(opts.strokeWidth)) {
        ctx.lineWidth = opts.strokeWidth;
      }
      ctx.strokeText(line, x2, y3, opts.maxWidth);
    }
    ctx.fillText(line, x2, y3, opts.maxWidth);
    decorateText(ctx, x2, y3, line, opts);
    y3 += Number(font.lineHeight);
  }
  ctx.restore();
}
function addRoundedRectPath(ctx, rect) {
  const { x: x2, y: y3, w: w2, h: h4, radius } = rect;
  ctx.arc(x2 + radius.topLeft, y3 + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);
  ctx.lineTo(x2, y3 + h4 - radius.bottomLeft);
  ctx.arc(x2 + radius.bottomLeft, y3 + h4 - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
  ctx.lineTo(x2 + w2 - radius.bottomRight, y3 + h4);
  ctx.arc(x2 + w2 - radius.bottomRight, y3 + h4 - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
  ctx.lineTo(x2 + w2, y3 + radius.topRight);
  ctx.arc(x2 + w2 - radius.topRight, y3 + radius.topRight, radius.topRight, 0, -HALF_PI, true);
  ctx.lineTo(x2 + radius.topLeft, y3);
}
const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
function toLineHeight(value, size) {
  const matches = ("" + value).match(LINE_HEIGHT);
  if (!matches || matches[1] === "normal") {
    return size * 1.2;
  }
  value = +matches[2];
  switch (matches[3]) {
    case "px":
      return value;
    case "%":
      value /= 100;
      break;
  }
  return size * value;
}
const numberOrZero = (v) => +v || 0;
function _readValueToProps(value, props) {
  const ret = {};
  const objProps = isObject(props);
  const keys = objProps ? Object.keys(props) : props;
  const read = isObject(value) ? objProps ? (prop) => valueOrDefault(value[prop], value[props[prop]]) : (prop) => value[prop] : () => value;
  for (const prop of keys) {
    ret[prop] = numberOrZero(read(prop));
  }
  return ret;
}
function toTRBL(value) {
  return _readValueToProps(value, {
    top: "y",
    right: "x",
    bottom: "y",
    left: "x"
  });
}
function toTRBLCorners(value) {
  return _readValueToProps(value, [
    "topLeft",
    "topRight",
    "bottomLeft",
    "bottomRight"
  ]);
}
function toPadding(value) {
  const obj = toTRBL(value);
  obj.width = obj.left + obj.right;
  obj.height = obj.top + obj.bottom;
  return obj;
}
function toFont(options, fallback) {
  options = options || {};
  fallback = fallback || defaults.font;
  let size = valueOrDefault(options.size, fallback.size);
  if (typeof size === "string") {
    size = parseInt(size, 10);
  }
  let style = valueOrDefault(options.style, fallback.style);
  if (style && !("" + style).match(FONT_STYLE)) {
    console.warn('Invalid font style specified: "' + style + '"');
    style = void 0;
  }
  const font = {
    family: valueOrDefault(options.family, fallback.family),
    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
    size,
    style,
    weight: valueOrDefault(options.weight, fallback.weight),
    string: ""
  };
  font.string = toFontString(font);
  return font;
}
function resolve(inputs, context, index2, info) {
  let cacheable = true;
  let i2, ilen, value;
  for (i2 = 0, ilen = inputs.length; i2 < ilen; ++i2) {
    value = inputs[i2];
    if (value === void 0) {
      continue;
    }
    if (context !== void 0 && typeof value === "function") {
      value = value(context);
      cacheable = false;
    }
    if (index2 !== void 0 && isArray(value)) {
      value = value[index2 % value.length];
      cacheable = false;
    }
    if (value !== void 0) {
      if (info && !cacheable) {
        info.cacheable = false;
      }
      return value;
    }
  }
}
function _addGrace(minmax, grace, beginAtZero) {
  const { min, max } = minmax;
  const change = toDimension(grace, (max - min) / 2);
  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;
  return {
    min: keepZero(min, -Math.abs(change)),
    max: keepZero(max, change)
  };
}
function createContext(parentContext, context) {
  return Object.assign(Object.create(parentContext), context);
}
function _createResolver(scopes2, prefixes = [
  ""
], rootScopes, fallback, getTarget = () => scopes2[0]) {
  const finalRootScopes = rootScopes || scopes2;
  if (typeof fallback === "undefined") {
    fallback = _resolve("_fallback", scopes2);
  }
  const cache = {
    [Symbol.toStringTag]: "Object",
    _cacheable: true,
    _scopes: scopes2,
    _rootScopes: finalRootScopes,
    _fallback: fallback,
    _getTarget: getTarget,
    override: (scope) => _createResolver([
      scope,
      ...scopes2
    ], prefixes, finalRootScopes, fallback)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete target._keys;
      delete scopes2[0][prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop) {
      return _cached(target, prop, () => _resolveWithPrefixes(prop, prefixes, scopes2, target));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(scopes2[0]);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return getKeysFromAllScopes(target).includes(prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys(target) {
      return getKeysFromAllScopes(target);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      const storage = target._storage || (target._storage = getTarget());
      target[prop] = storage[prop] = value;
      delete target._keys;
      return true;
    }
  });
}
function _attachContext(proxy, context, subProxy, descriptorDefaults) {
  const cache = {
    _cacheable: false,
    _proxy: proxy,
    _context: context,
    _subProxy: subProxy,
    _stack: /* @__PURE__ */ new Set(),
    _descriptors: _descriptors(proxy, descriptorDefaults),
    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete proxy[prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop, receiver) {
      return _cached(target, prop, () => _resolveWithContext(target, prop, receiver));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
        enumerable: true,
        configurable: true
      } : void 0 : Reflect.getOwnPropertyDescriptor(proxy, prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(proxy);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return Reflect.has(proxy, prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys() {
      return Reflect.ownKeys(proxy);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      proxy[prop] = value;
      delete target[prop];
      return true;
    }
  });
}
function _descriptors(proxy, defaults2 = {
  scriptable: true,
  indexable: true
}) {
  const { _scriptable = defaults2.scriptable, _indexable = defaults2.indexable, _allKeys = defaults2.allKeys } = proxy;
  return {
    allKeys: _allKeys,
    scriptable: _scriptable,
    indexable: _indexable,
    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
  };
}
const readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;
const needsSubResolver = (prop, value) => isObject(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve2) {
  if (Object.prototype.hasOwnProperty.call(target, prop)) {
    return target[prop];
  }
  const value = resolve2();
  target[prop] = value;
  return value;
}
function _resolveWithContext(target, prop, receiver) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  let value = _proxy[prop];
  if (isFunction(value) && descriptors2.isScriptable(prop)) {
    value = _resolveScriptable(prop, value, target, receiver);
  }
  if (isArray(value) && value.length) {
    value = _resolveArray(prop, value, target, descriptors2.isIndexable);
  }
  if (needsSubResolver(prop, value)) {
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors2);
  }
  return value;
}
function _resolveScriptable(prop, getValue, target, receiver) {
  const { _proxy, _context, _subProxy, _stack } = target;
  if (_stack.has(prop)) {
    throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
  }
  _stack.add(prop);
  let value = getValue(_context, _subProxy || receiver);
  _stack.delete(prop);
  if (needsSubResolver(prop, value)) {
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
  }
  return value;
}
function _resolveArray(prop, value, target, isIndexable) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  if (typeof _context.index !== "undefined" && isIndexable(prop)) {
    return value[_context.index % value.length];
  } else if (isObject(value[0])) {
    const arr = value;
    const scopes2 = _proxy._scopes.filter((s3) => s3 !== arr);
    value = [];
    for (const item of arr) {
      const resolver = createSubResolver(scopes2, _proxy, prop, item);
      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors2));
    }
  }
  return value;
}
function resolveFallback(fallback, prop, value) {
  return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent) => key === true ? parent : typeof key === "string" ? resolveObjectKey(parent, key) : void 0;
function addScopes(set2, parentScopes, key, parentFallback, value) {
  for (const parent of parentScopes) {
    const scope = getScope(key, parent);
    if (scope) {
      set2.add(scope);
      const fallback = resolveFallback(scope._fallback, key, value);
      if (typeof fallback !== "undefined" && fallback !== key && fallback !== parentFallback) {
        return fallback;
      }
    } else if (scope === false && typeof parentFallback !== "undefined" && key !== parentFallback) {
      return null;
    }
  }
  return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
  const rootScopes = resolver._rootScopes;
  const fallback = resolveFallback(resolver._fallback, prop, value);
  const allScopes = [
    ...parentScopes,
    ...rootScopes
  ];
  const set2 = /* @__PURE__ */ new Set();
  set2.add(value);
  let key = addScopesFromKey(set2, allScopes, prop, fallback || prop, value);
  if (key === null) {
    return false;
  }
  if (typeof fallback !== "undefined" && fallback !== prop) {
    key = addScopesFromKey(set2, allScopes, fallback, key, value);
    if (key === null) {
      return false;
    }
  }
  return _createResolver(Array.from(set2), [
    ""
  ], rootScopes, fallback, () => subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set2, allScopes, key, fallback, item) {
  while (key) {
    key = addScopes(set2, allScopes, key, fallback, item);
  }
  return key;
}
function subGetTarget(resolver, prop, value) {
  const parent = resolver._getTarget();
  if (!(prop in parent)) {
    parent[prop] = {};
  }
  const target = parent[prop];
  if (isArray(target) && isObject(value)) {
    return value;
  }
  return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes2, proxy) {
  let value;
  for (const prefix of prefixes) {
    value = _resolve(readKey(prefix, prop), scopes2);
    if (typeof value !== "undefined") {
      return needsSubResolver(prop, value) ? createSubResolver(scopes2, proxy, prop, value) : value;
    }
  }
}
function _resolve(key, scopes2) {
  for (const scope of scopes2) {
    if (!scope) {
      continue;
    }
    const value = scope[key];
    if (typeof value !== "undefined") {
      return value;
    }
  }
}
function getKeysFromAllScopes(target) {
  let keys = target._keys;
  if (!keys) {
    keys = target._keys = resolveKeysFromAllScopes(target._scopes);
  }
  return keys;
}
function resolveKeysFromAllScopes(scopes2) {
  const set2 = /* @__PURE__ */ new Set();
  for (const scope of scopes2) {
    for (const key of Object.keys(scope).filter((k2) => !k2.startsWith("_"))) {
      set2.add(key);
    }
  }
  return Array.from(set2);
}
function _parseObjectDataRadialScale(meta, data, start, count) {
  const { iScale } = meta;
  const { key = "r" } = this._parsing;
  const parsed = new Array(count);
  let i2, ilen, index2, item;
  for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
    index2 = i2 + start;
    item = data[index2];
    parsed[i2] = {
      r: iScale.parse(resolveObjectKey(item, key), index2)
    };
  }
  return parsed;
}
const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i2) => i2 < points.length && !points[i2].skip && points[i2];
const getValueAxis = (indexAxis) => indexAxis === "x" ? "y" : "x";
function splineCurve(firstPoint, middlePoint, afterPoint, t2) {
  const previous = firstPoint.skip ? middlePoint : firstPoint;
  const current = middlePoint;
  const next = afterPoint.skip ? middlePoint : afterPoint;
  const d01 = distanceBetweenPoints(current, previous);
  const d12 = distanceBetweenPoints(next, current);
  let s01 = d01 / (d01 + d12);
  let s12 = d12 / (d01 + d12);
  s01 = isNaN(s01) ? 0 : s01;
  s12 = isNaN(s12) ? 0 : s12;
  const fa = t2 * s01;
  const fb = t2 * s12;
  return {
    previous: {
      x: current.x - fa * (next.x - previous.x),
      y: current.y - fa * (next.y - previous.y)
    },
    next: {
      x: current.x + fb * (next.x - previous.x),
      y: current.y + fb * (next.y - previous.y)
    }
  };
}
function monotoneAdjust(points, deltaK, mK) {
  const pointsLen = points.length;
  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i2 = 0; i2 < pointsLen - 1; ++i2) {
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent || !pointAfter) {
      continue;
    }
    if (almostEquals(deltaK[i2], 0, EPSILON)) {
      mK[i2] = mK[i2 + 1] = 0;
      continue;
    }
    alphaK = mK[i2] / deltaK[i2];
    betaK = mK[i2 + 1] / deltaK[i2];
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    if (squaredMagnitude <= 9) {
      continue;
    }
    tauK = 3 / Math.sqrt(squaredMagnitude);
    mK[i2] = alphaK * tauK * deltaK[i2];
    mK[i2 + 1] = betaK * tauK * deltaK[i2];
  }
}
function monotoneCompute(points, mK, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  let delta, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i2 = 0; i2 < pointsLen; ++i2) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent) {
      continue;
    }
    const iPixel = pointCurrent[indexAxis];
    const vPixel = pointCurrent[valueAxis];
    if (pointBefore) {
      delta = (iPixel - pointBefore[indexAxis]) / 3;
      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i2];
    }
    if (pointAfter) {
      delta = (pointAfter[indexAxis] - iPixel) / 3;
      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i2];
    }
  }
}
function splineCurveMonotone(points, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  const deltaK = Array(pointsLen).fill(0);
  const mK = Array(pointsLen);
  let i2, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (i2 = 0; i2 < pointsLen; ++i2) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent) {
      continue;
    }
    if (pointAfter) {
      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
      deltaK[i2] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
    }
    mK[i2] = !pointBefore ? deltaK[i2] : !pointAfter ? deltaK[i2 - 1] : sign(deltaK[i2 - 1]) !== sign(deltaK[i2]) ? 0 : (deltaK[i2 - 1] + deltaK[i2]) / 2;
  }
  monotoneAdjust(points, deltaK, mK);
  monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
  return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
  let i2, ilen, point, inArea, inAreaPrev;
  let inAreaNext = _isPointInArea(points[0], area);
  for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
    inAreaPrev = inArea;
    inArea = inAreaNext;
    inAreaNext = i2 < ilen - 1 && _isPointInArea(points[i2 + 1], area);
    if (!inArea) {
      continue;
    }
    point = points[i2];
    if (inAreaPrev) {
      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
    }
    if (inAreaNext) {
      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
    }
  }
}
function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
  let i2, ilen, point, controlPoints;
  if (options.spanGaps) {
    points = points.filter((pt) => !pt.skip);
  }
  if (options.cubicInterpolationMode === "monotone") {
    splineCurveMonotone(points, indexAxis);
  } else {
    let prev = loop ? points[points.length - 1] : points[0];
    for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
      point = points[i2];
      controlPoints = splineCurve(prev, point, points[Math.min(i2 + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
      point.cp1x = controlPoints.previous.x;
      point.cp1y = controlPoints.previous.y;
      point.cp2x = controlPoints.next.x;
      point.cp2y = controlPoints.next.y;
      prev = point;
    }
  }
  if (options.capBezierPoints) {
    capBezierPoints(points, area);
  }
}
function _isDomSupported() {
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function _getParentNode(domNode) {
  let parent = domNode.parentNode;
  if (parent && parent.toString() === "[object ShadowRoot]") {
    parent = parent.host;
  }
  return parent;
}
function parseMaxStyle(styleValue, node, parentProperty) {
  let valueInPixels;
  if (typeof styleValue === "string") {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf("%") !== -1) {
      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }
  return valueInPixels;
}
const getComputedStyle$1 = (element2) => element2.ownerDocument.defaultView.getComputedStyle(element2, null);
function getStyle(el, property) {
  return getComputedStyle$1(el).getPropertyValue(property);
}
const positions = [
  "top",
  "right",
  "bottom",
  "left"
];
function getPositionedStyle(styles, style, suffix) {
  const result = {};
  suffix = suffix ? "-" + suffix : "";
  for (let i2 = 0; i2 < 4; i2++) {
    const pos = positions[i2];
    result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
  }
  result.width = result.left + result.right;
  result.height = result.top + result.bottom;
  return result;
}
const useOffsetPos = (x2, y3, target) => (x2 > 0 || y3 > 0) && (!target || !target.shadowRoot);
function getCanvasPosition(e2, canvas) {
  const touches = e2.touches;
  const source = touches && touches.length ? touches[0] : e2;
  const { offsetX, offsetY } = source;
  let box = false;
  let x2, y3;
  if (useOffsetPos(offsetX, offsetY, e2.target)) {
    x2 = offsetX;
    y3 = offsetY;
  } else {
    const rect = canvas.getBoundingClientRect();
    x2 = source.clientX - rect.left;
    y3 = source.clientY - rect.top;
    box = true;
  }
  return {
    x: x2,
    y: y3,
    box
  };
}
function getRelativePosition(event, chart) {
  if ("native" in event) {
    return event;
  }
  const { canvas, currentDevicePixelRatio } = chart;
  const style = getComputedStyle$1(canvas);
  const borderBox = style.boxSizing === "border-box";
  const paddings = getPositionedStyle(style, "padding");
  const borders = getPositionedStyle(style, "border", "width");
  const { x: x2, y: y3, box } = getCanvasPosition(event, canvas);
  const xOffset = paddings.left + (box && borders.left);
  const yOffset = paddings.top + (box && borders.top);
  let { width, height } = chart;
  if (borderBox) {
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  return {
    x: Math.round((x2 - xOffset) / width * canvas.width / currentDevicePixelRatio),
    y: Math.round((y3 - yOffset) / height * canvas.height / currentDevicePixelRatio)
  };
}
function getContainerSize(canvas, width, height) {
  let maxWidth, maxHeight;
  if (width === void 0 || height === void 0) {
    const container = _getParentNode(canvas);
    if (!container) {
      width = canvas.clientWidth;
      height = canvas.clientHeight;
    } else {
      const rect = container.getBoundingClientRect();
      const containerStyle = getComputedStyle$1(container);
      const containerBorder = getPositionedStyle(containerStyle, "border", "width");
      const containerPadding = getPositionedStyle(containerStyle, "padding");
      width = rect.width - containerPadding.width - containerBorder.width;
      height = rect.height - containerPadding.height - containerBorder.height;
      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
    }
  }
  return {
    width,
    height,
    maxWidth: maxWidth || INFINITY,
    maxHeight: maxHeight || INFINITY
  };
}
const round1 = (v) => Math.round(v * 10) / 10;
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
  const style = getComputedStyle$1(canvas);
  const margins = getPositionedStyle(style, "margin");
  const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
  const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
  let { width, height } = containerSize;
  if (style.boxSizing === "content-box") {
    const borders = getPositionedStyle(style, "border", "width");
    const paddings = getPositionedStyle(style, "padding");
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  width = Math.max(0, width - margins.width);
  height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
  if (width && !height) {
    height = round1(width / 2);
  }
  const maintainHeight = bbWidth !== void 0 || bbHeight !== void 0;
  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
    height = containerSize.height;
    width = round1(Math.floor(height * aspectRatio));
  }
  return {
    width,
    height
  };
}
function retinaScale(chart, forceRatio, forceStyle) {
  const pixelRatio = forceRatio || 1;
  const deviceHeight = Math.floor(chart.height * pixelRatio);
  const deviceWidth = Math.floor(chart.width * pixelRatio);
  chart.height = Math.floor(chart.height);
  chart.width = Math.floor(chart.width);
  const canvas = chart.canvas;
  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
    canvas.style.height = `${chart.height}px`;
    canvas.style.width = `${chart.width}px`;
  }
  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
    chart.currentDevicePixelRatio = pixelRatio;
    canvas.height = deviceHeight;
    canvas.width = deviceWidth;
    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    return true;
  }
  return false;
}
const supportsEventListenerOptions = function() {
  let passiveSupported = false;
  try {
    const options = {
      get passive() {
        passiveSupported = true;
        return false;
      }
    };
    window.addEventListener("test", null, options);
    window.removeEventListener("test", null, options);
  } catch (e2) {
  }
  return passiveSupported;
}();
function readUsedSize(element2, property) {
  const value = getStyle(element2, property);
  const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches ? +matches[1] : void 0;
}
function _pointInLine(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: p1.y + t2 * (p2.y - p1.y)
  };
}
function _steppedInterpolation(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: mode === "middle" ? t2 < 0.5 ? p1.y : p2.y : mode === "after" ? t2 < 1 ? p1.y : p2.y : t2 > 0 ? p2.y : p1.y
  };
}
function _bezierInterpolation(p1, p2, t2, mode) {
  const cp1 = {
    x: p1.cp2x,
    y: p1.cp2y
  };
  const cp2 = {
    x: p2.cp1x,
    y: p2.cp1y
  };
  const a3 = _pointInLine(p1, cp1, t2);
  const b2 = _pointInLine(cp1, cp2, t2);
  const c2 = _pointInLine(cp2, p2, t2);
  const d3 = _pointInLine(a3, b2, t2);
  const e2 = _pointInLine(b2, c2, t2);
  return _pointInLine(d3, e2, t2);
}
const getRightToLeftAdapter = function(rectX, width) {
  return {
    x(x2) {
      return rectX + rectX + width - x2;
    },
    setWidth(w2) {
      width = w2;
    },
    textAlign(align) {
      if (align === "center") {
        return align;
      }
      return align === "right" ? "left" : "right";
    },
    xPlus(x2, value) {
      return x2 - value;
    },
    leftForLtr(x2, itemWidth) {
      return x2 - itemWidth;
    }
  };
};
const getLeftToRightAdapter = function() {
  return {
    x(x2) {
      return x2;
    },
    setWidth(w2) {
    },
    textAlign(align) {
      return align;
    },
    xPlus(x2, value) {
      return x2 + value;
    },
    leftForLtr(x2, _itemWidth) {
      return x2;
    }
  };
};
function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
  let style, original;
  if (direction === "ltr" || direction === "rtl") {
    style = ctx.canvas.style;
    original = [
      style.getPropertyValue("direction"),
      style.getPropertyPriority("direction")
    ];
    style.setProperty("direction", direction, "important");
    ctx.prevTextDirection = original;
  }
}
function restoreTextDirection(ctx, original) {
  if (original !== void 0) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty("direction", original[0], original[1]);
  }
}
function propertyFn(property) {
  if (property === "angle") {
    return {
      between: _angleBetween,
      compare: _angleDiff,
      normalize: _normalizeAngle
    };
  }
  return {
    between: _isBetween,
    compare: (a3, b2) => a3 - b2,
    normalize: (x2) => x2
  };
}
function normalizeSegment({ start, end, count, loop, style }) {
  return {
    start: start % count,
    end: end % count,
    loop: loop && (end - start + 1) % count === 0,
    style
  };
}
function getSegment(segment, points, bounds) {
  const { property, start: startBound, end: endBound } = bounds;
  const { between, normalize: normalize2 } = propertyFn(property);
  const count = points.length;
  let { start, end, loop } = segment;
  let i2, ilen;
  if (loop) {
    start += count;
    end += count;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      if (!between(normalize2(points[start % count][property]), startBound, endBound)) {
        break;
      }
      start--;
      end--;
    }
    start %= count;
    end %= count;
  }
  if (end < start) {
    end += count;
  }
  return {
    start,
    end,
    loop,
    style: segment.style
  };
}
function _boundSegment(segment, points, bounds) {
  if (!bounds) {
    return [
      segment
    ];
  }
  const { property, start: startBound, end: endBound } = bounds;
  const count = points.length;
  const { compare, between, normalize: normalize2 } = propertyFn(property);
  const { start, end, loop, style } = getSegment(segment, points, bounds);
  const result = [];
  let inside = false;
  let subStart = null;
  let value, point, prevValue;
  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);
  const shouldStart = () => inside || startIsBefore();
  const shouldStop = () => !inside || endIsBefore();
  for (let i2 = start, prev = start; i2 <= end; ++i2) {
    point = points[i2 % count];
    if (point.skip) {
      continue;
    }
    value = normalize2(point[property]);
    if (value === prevValue) {
      continue;
    }
    inside = between(value, startBound, endBound);
    if (subStart === null && shouldStart()) {
      subStart = compare(value, startBound) === 0 ? i2 : prev;
    }
    if (subStart !== null && shouldStop()) {
      result.push(normalizeSegment({
        start: subStart,
        end: i2,
        loop,
        count,
        style
      }));
      subStart = null;
    }
    prev = i2;
    prevValue = value;
  }
  if (subStart !== null) {
    result.push(normalizeSegment({
      start: subStart,
      end,
      loop,
      count,
      style
    }));
  }
  return result;
}
function _boundSegments(line, bounds) {
  const result = [];
  const segments = line.segments;
  for (let i2 = 0; i2 < segments.length; i2++) {
    const sub = _boundSegment(segments[i2], line.points, bounds);
    if (sub.length) {
      result.push(...sub);
    }
  }
  return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
  let start = 0;
  let end = count - 1;
  if (loop && !spanGaps) {
    while (start < count && !points[start].skip) {
      start++;
    }
  }
  while (start < count && points[start].skip) {
    start++;
  }
  start %= count;
  if (loop) {
    end += start;
  }
  while (end > start && points[end % count].skip) {
    end--;
  }
  end %= count;
  return {
    start,
    end
  };
}
function solidSegments(points, start, max, loop) {
  const count = points.length;
  const result = [];
  let last = start;
  let prev = points[start];
  let end;
  for (end = start + 1; end <= max; ++end) {
    const cur = points[end % count];
    if (cur.skip || cur.stop) {
      if (!prev.skip) {
        loop = false;
        result.push({
          start: start % count,
          end: (end - 1) % count,
          loop
        });
        start = last = cur.stop ? end : null;
      }
    } else {
      last = end;
      if (prev.skip) {
        start = end;
      }
    }
    prev = cur;
  }
  if (last !== null) {
    result.push({
      start: start % count,
      end: last % count,
      loop
    });
  }
  return result;
}
function _computeSegments(line, segmentOptions) {
  const points = line.points;
  const spanGaps = line.options.spanGaps;
  const count = points.length;
  if (!count) {
    return [];
  }
  const loop = !!line._loop;
  const { start, end } = findStartAndEnd(points, count, loop, spanGaps);
  if (spanGaps === true) {
    return splitByStyles(line, [
      {
        start,
        end,
        loop
      }
    ], points, segmentOptions);
  }
  const max = end < start ? end + count : end;
  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function splitByStyles(line, segments, points, segmentOptions) {
  if (!segmentOptions || !segmentOptions.setContext || !points) {
    return segments;
  }
  return doSplitByStyles(line, segments, points, segmentOptions);
}
function doSplitByStyles(line, segments, points, segmentOptions) {
  const chartContext = line._chart.getContext();
  const baseStyle = readStyle(line.options);
  const { _datasetIndex: datasetIndex, options: { spanGaps } } = line;
  const count = points.length;
  const result = [];
  let prevStyle = baseStyle;
  let start = segments[0].start;
  let i2 = start;
  function addStyle(s3, e2, l, st) {
    const dir = spanGaps ? -1 : 1;
    if (s3 === e2) {
      return;
    }
    s3 += count;
    while (points[s3 % count].skip) {
      s3 -= dir;
    }
    while (points[e2 % count].skip) {
      e2 += dir;
    }
    if (s3 % count !== e2 % count) {
      result.push({
        start: s3 % count,
        end: e2 % count,
        loop: l,
        style: st
      });
      prevStyle = st;
      start = e2 % count;
    }
  }
  for (const segment of segments) {
    start = spanGaps ? start : segment.start;
    let prev = points[start % count];
    let style;
    for (i2 = start + 1; i2 <= segment.end; i2++) {
      const pt = points[i2 % count];
      style = readStyle(segmentOptions.setContext(createContext(chartContext, {
        type: "segment",
        p0: prev,
        p1: pt,
        p0DataIndex: (i2 - 1) % count,
        p1DataIndex: i2 % count,
        datasetIndex
      })));
      if (styleChanged(style, prevStyle)) {
        addStyle(start, i2 - 1, segment.loop, prevStyle);
      }
      prev = pt;
      prevStyle = style;
    }
    if (start < i2 - 1) {
      addStyle(start, i2 - 1, segment.loop, prevStyle);
    }
  }
  return result;
}
function readStyle(options) {
  return {
    backgroundColor: options.backgroundColor,
    borderCapStyle: options.borderCapStyle,
    borderDash: options.borderDash,
    borderDashOffset: options.borderDashOffset,
    borderJoinStyle: options.borderJoinStyle,
    borderWidth: options.borderWidth,
    borderColor: options.borderColor
  };
}
function styleChanged(style, prevStyle) {
  if (!prevStyle) {
    return false;
  }
  const cache = [];
  const replacer = function(key, value) {
    if (!isPatternOrGradient(value)) {
      return value;
    }
    if (!cache.includes(value)) {
      cache.push(value);
    }
    return cache.indexOf(value);
  };
  return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
}
/*!
 * Chart.js v4.3.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 */
class Animator {
  constructor() {
    this._request = null;
    this._charts = /* @__PURE__ */ new Map();
    this._running = false;
    this._lastDate = void 0;
  }
  _notify(chart, anims, date, type) {
    const callbacks = anims.listeners[type];
    const numSteps = anims.duration;
    callbacks.forEach((fn) => fn({
      chart,
      initial: anims.initial,
      numSteps,
      currentStep: Math.min(date - anims.start, numSteps)
    }));
  }
  _refresh() {
    if (this._request) {
      return;
    }
    this._running = true;
    this._request = requestAnimFrame.call(window, () => {
      this._update();
      this._request = null;
      if (this._running) {
        this._refresh();
      }
    });
  }
  _update(date = Date.now()) {
    let remaining = 0;
    this._charts.forEach((anims, chart) => {
      if (!anims.running || !anims.items.length) {
        return;
      }
      const items = anims.items;
      let i2 = items.length - 1;
      let draw2 = false;
      let item;
      for (; i2 >= 0; --i2) {
        item = items[i2];
        if (item._active) {
          if (item._total > anims.duration) {
            anims.duration = item._total;
          }
          item.tick(date);
          draw2 = true;
        } else {
          items[i2] = items[items.length - 1];
          items.pop();
        }
      }
      if (draw2) {
        chart.draw();
        this._notify(chart, anims, date, "progress");
      }
      if (!items.length) {
        anims.running = false;
        this._notify(chart, anims, date, "complete");
        anims.initial = false;
      }
      remaining += items.length;
    });
    this._lastDate = date;
    if (remaining === 0) {
      this._running = false;
    }
  }
  _getAnims(chart) {
    const charts = this._charts;
    let anims = charts.get(chart);
    if (!anims) {
      anims = {
        running: false,
        initial: true,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      };
      charts.set(chart, anims);
    }
    return anims;
  }
  listen(chart, event, cb) {
    this._getAnims(chart).listeners[event].push(cb);
  }
  add(chart, items) {
    if (!items || !items.length) {
      return;
    }
    this._getAnims(chart).items.push(...items);
  }
  has(chart) {
    return this._getAnims(chart).items.length > 0;
  }
  start(chart) {
    const anims = this._charts.get(chart);
    if (!anims) {
      return;
    }
    anims.running = true;
    anims.start = Date.now();
    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
    this._refresh();
  }
  running(chart) {
    if (!this._running) {
      return false;
    }
    const anims = this._charts.get(chart);
    if (!anims || !anims.running || !anims.items.length) {
      return false;
    }
    return true;
  }
  stop(chart) {
    const anims = this._charts.get(chart);
    if (!anims || !anims.items.length) {
      return;
    }
    const items = anims.items;
    let i2 = items.length - 1;
    for (; i2 >= 0; --i2) {
      items[i2].cancel();
    }
    anims.items = [];
    this._notify(chart, anims, Date.now(), "complete");
  }
  remove(chart) {
    return this._charts.delete(chart);
  }
}
var animator = /* @__PURE__ */ new Animator();
const transparent = "transparent";
const interpolators = {
  boolean(from2, to2, factor) {
    return factor > 0.5 ? to2 : from2;
  },
  color(from2, to2, factor) {
    const c0 = color(from2 || transparent);
    const c1 = c0.valid && color(to2 || transparent);
    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to2;
  },
  number(from2, to2, factor) {
    return from2 + (to2 - from2) * factor;
  }
};
class Animation {
  constructor(cfg, target, prop, to2) {
    const currentValue = target[prop];
    to2 = resolve([
      cfg.to,
      to2,
      currentValue,
      cfg.from
    ]);
    const from2 = resolve([
      cfg.from,
      currentValue,
      to2
    ]);
    this._active = true;
    this._fn = cfg.fn || interpolators[cfg.type || typeof from2];
    this._easing = effects[cfg.easing] || effects.linear;
    this._start = Math.floor(Date.now() + (cfg.delay || 0));
    this._duration = this._total = Math.floor(cfg.duration);
    this._loop = !!cfg.loop;
    this._target = target;
    this._prop = prop;
    this._from = from2;
    this._to = to2;
    this._promises = void 0;
  }
  active() {
    return this._active;
  }
  update(cfg, to2, date) {
    if (this._active) {
      this._notify(false);
      const currentValue = this._target[this._prop];
      const elapsed = date - this._start;
      const remain = this._duration - elapsed;
      this._start = date;
      this._duration = Math.floor(Math.max(remain, cfg.duration));
      this._total += elapsed;
      this._loop = !!cfg.loop;
      this._to = resolve([
        cfg.to,
        to2,
        currentValue,
        cfg.from
      ]);
      this._from = resolve([
        cfg.from,
        currentValue,
        to2
      ]);
    }
  }
  cancel() {
    if (this._active) {
      this.tick(Date.now());
      this._active = false;
      this._notify(false);
    }
  }
  tick(date) {
    const elapsed = date - this._start;
    const duration = this._duration;
    const prop = this._prop;
    const from2 = this._from;
    const loop = this._loop;
    const to2 = this._to;
    let factor;
    this._active = from2 !== to2 && (loop || elapsed < duration);
    if (!this._active) {
      this._target[prop] = to2;
      this._notify(true);
      return;
    }
    if (elapsed < 0) {
      this._target[prop] = from2;
      return;
    }
    factor = elapsed / duration % 2;
    factor = loop && factor > 1 ? 2 - factor : factor;
    factor = this._easing(Math.min(1, Math.max(0, factor)));
    this._target[prop] = this._fn(from2, to2, factor);
  }
  wait() {
    const promises = this._promises || (this._promises = []);
    return new Promise((res, rej) => {
      promises.push({
        res,
        rej
      });
    });
  }
  _notify(resolved) {
    const method = resolved ? "res" : "rej";
    const promises = this._promises || [];
    for (let i2 = 0; i2 < promises.length; i2++) {
      promises[i2][method]();
    }
  }
}
class Animations {
  constructor(chart, config) {
    this._chart = chart;
    this._properties = /* @__PURE__ */ new Map();
    this.configure(config);
  }
  configure(config) {
    if (!isObject(config)) {
      return;
    }
    const animationOptions = Object.keys(defaults.animation);
    const animatedProps = this._properties;
    Object.getOwnPropertyNames(config).forEach((key) => {
      const cfg = config[key];
      if (!isObject(cfg)) {
        return;
      }
      const resolved = {};
      for (const option of animationOptions) {
        resolved[option] = cfg[option];
      }
      (isArray(cfg.properties) && cfg.properties || [
        key
      ]).forEach((prop) => {
        if (prop === key || !animatedProps.has(prop)) {
          animatedProps.set(prop, resolved);
        }
      });
    });
  }
  _animateOptions(target, values) {
    const newOptions = values.options;
    const options = resolveTargetOptions(target, newOptions);
    if (!options) {
      return [];
    }
    const animations = this._createAnimations(options, newOptions);
    if (newOptions.$shared) {
      awaitAll(target.options.$animations, newOptions).then(() => {
        target.options = newOptions;
      }, () => {
      });
    }
    return animations;
  }
  _createAnimations(target, values) {
    const animatedProps = this._properties;
    const animations = [];
    const running = target.$animations || (target.$animations = {});
    const props = Object.keys(values);
    const date = Date.now();
    let i2;
    for (i2 = props.length - 1; i2 >= 0; --i2) {
      const prop = props[i2];
      if (prop.charAt(0) === "$") {
        continue;
      }
      if (prop === "options") {
        animations.push(...this._animateOptions(target, values));
        continue;
      }
      const value = values[prop];
      let animation = running[prop];
      const cfg = animatedProps.get(prop);
      if (animation) {
        if (cfg && animation.active()) {
          animation.update(cfg, value, date);
          continue;
        } else {
          animation.cancel();
        }
      }
      if (!cfg || !cfg.duration) {
        target[prop] = value;
        continue;
      }
      running[prop] = animation = new Animation(cfg, target, prop, value);
      animations.push(animation);
    }
    return animations;
  }
  update(target, values) {
    if (this._properties.size === 0) {
      Object.assign(target, values);
      return;
    }
    const animations = this._createAnimations(target, values);
    if (animations.length) {
      animator.add(this._chart, animations);
      return true;
    }
  }
}
function awaitAll(animations, properties) {
  const running = [];
  const keys = Object.keys(properties);
  for (let i2 = 0; i2 < keys.length; i2++) {
    const anim = animations[keys[i2]];
    if (anim && anim.active()) {
      running.push(anim.wait());
    }
  }
  return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
  if (!newOptions) {
    return;
  }
  let options = target.options;
  if (!options) {
    target.options = newOptions;
    return;
  }
  if (options.$shared) {
    target.options = options = Object.assign({}, options, {
      $shared: false,
      $animations: {}
    });
  }
  return options;
}
function scaleClip(scale, allowedOverflow) {
  const opts = scale && scale.options || {};
  const reverse = opts.reverse;
  const min = opts.min === void 0 ? allowedOverflow : 0;
  const max = opts.max === void 0 ? allowedOverflow : 0;
  return {
    start: reverse ? max : min,
    end: reverse ? min : max
  };
}
function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }
  const x2 = scaleClip(xScale, allowedOverflow);
  const y3 = scaleClip(yScale, allowedOverflow);
  return {
    top: y3.end,
    right: x2.end,
    bottom: y3.start,
    left: x2.start
  };
}
function toClip(value) {
  let t2, r, b2, l;
  if (isObject(value)) {
    t2 = value.top;
    r = value.right;
    b2 = value.bottom;
    l = value.left;
  } else {
    t2 = r = b2 = l = value;
  }
  return {
    top: t2,
    right: r,
    bottom: b2,
    left: l,
    disabled: value === false
  };
}
function getSortedDatasetIndices(chart, filterVisible) {
  const keys = [];
  const metasets = chart._getSortedDatasetMetas(filterVisible);
  let i2, ilen;
  for (i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
    keys.push(metasets[i2].index);
  }
  return keys;
}
function applyStack(stack, value, dsIndex, options = {}) {
  const keys = stack.keys;
  const singleMode = options.mode === "single";
  let i2, ilen, datasetIndex, otherValue;
  if (value === null) {
    return;
  }
  for (i2 = 0, ilen = keys.length; i2 < ilen; ++i2) {
    datasetIndex = +keys[i2];
    if (datasetIndex === dsIndex) {
      if (options.all) {
        continue;
      }
      break;
    }
    otherValue = stack.values[datasetIndex];
    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
      value += otherValue;
    }
  }
  return value;
}
function convertObjectDataToArray(data) {
  const keys = Object.keys(data);
  const adata = new Array(keys.length);
  let i2, ilen, key;
  for (i2 = 0, ilen = keys.length; i2 < ilen; ++i2) {
    key = keys[i2];
    adata[i2] = {
      x: key,
      y: data[key]
    };
  }
  return adata;
}
function isStacked(scale, meta) {
  const stacked = scale && scale.options.stacked;
  return stacked || stacked === void 0 && meta.stack !== void 0;
}
function getStackKey(indexScale, valueScale, meta) {
  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
  const { min, max, minDefined, maxDefined } = scale.getUserBounds();
  return {
    min: minDefined ? min : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max : Number.POSITIVE_INFINITY
  };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
  const subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {
    const value = stack[meta.index];
    if (positive && value > 0 || !positive && value < 0) {
      return meta.index;
    }
  }
  return null;
}
function updateStacks(controller, parsed) {
  const { chart, _cachedMeta: meta } = controller;
  const stacks = chart._stacks || (chart._stacks = {});
  const { iScale, vScale, index: datasetIndex } = meta;
  const iAxis = iScale.axis;
  const vAxis = vScale.axis;
  const key = getStackKey(iScale, vScale, meta);
  const ilen = parsed.length;
  let stack;
  for (let i2 = 0; i2 < ilen; ++i2) {
    const item = parsed[i2];
    const { [iAxis]: index2, [vAxis]: value } = item;
    const itemStacks = item._stacks || (item._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index2);
    stack[datasetIndex] = value;
    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
    const visualValues = stack._visualValues || (stack._visualValues = {});
    visualValues[datasetIndex] = value;
  }
}
function getFirstScaleId(chart, axis) {
  const scales2 = chart.scales;
  return Object.keys(scales2).filter((key) => scales2[key].axis === axis).shift();
}
function createDatasetContext(parent, index2) {
  return createContext(parent, {
    active: false,
    dataset: void 0,
    datasetIndex: index2,
    index: index2,
    mode: "default",
    type: "dataset"
  });
}
function createDataContext(parent, index2, element2) {
  return createContext(parent, {
    active: false,
    dataIndex: index2,
    parsed: void 0,
    raw: void 0,
    element: element2,
    index: index2,
    mode: "default",
    type: "data"
  });
}
function clearStacks(meta, items) {
  const datasetIndex = meta.controller.index;
  const axis = meta.vScale && meta.vScale.axis;
  if (!axis) {
    return;
  }
  items = items || meta._parsed;
  for (const parsed of items) {
    const stacks = parsed._stacks;
    if (!stacks || stacks[axis] === void 0 || stacks[axis][datasetIndex] === void 0) {
      return;
    }
    delete stacks[axis][datasetIndex];
    if (stacks[axis]._visualValues !== void 0 && stacks[axis]._visualValues[datasetIndex] !== void 0) {
      delete stacks[axis]._visualValues[datasetIndex];
    }
  }
}
const isDirectUpdateMode = (mode) => mode === "reset" || mode === "none";
const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {
  keys: getSortedDatasetIndices(chart, true),
  values: null
};
class DatasetController {
  constructor(chart, datasetIndex) {
    this.chart = chart;
    this._ctx = chart.ctx;
    this.index = datasetIndex;
    this._cachedDataOpts = {};
    this._cachedMeta = this.getMeta();
    this._type = this._cachedMeta.type;
    this.options = void 0;
    this._parsing = false;
    this._data = void 0;
    this._objectData = void 0;
    this._sharedOptions = void 0;
    this._drawStart = void 0;
    this._drawCount = void 0;
    this.enableOptionSharing = false;
    this.supportsDecimation = false;
    this.$context = void 0;
    this._syncList = [];
    this.datasetElementType = new.target.datasetElementType;
    this.dataElementType = new.target.dataElementType;
    this.initialize();
  }
  initialize() {
    const meta = this._cachedMeta;
    this.configure();
    this.linkScales();
    meta._stacked = isStacked(meta.vScale, meta);
    this.addElements();
    if (this.options.fill && !this.chart.isPluginEnabled("filler")) {
      console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
  }
  updateIndex(datasetIndex) {
    if (this.index !== datasetIndex) {
      clearStacks(this._cachedMeta);
    }
    this.index = datasetIndex;
  }
  linkScales() {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    const chooseId = (axis, x2, y3, r) => axis === "x" ? x2 : axis === "r" ? r : y3;
    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, "x"));
    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, "y"));
    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, "r"));
    const indexAxis = meta.indexAxis;
    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
    meta.xScale = this.getScaleForId(xid);
    meta.yScale = this.getScaleForId(yid);
    meta.rScale = this.getScaleForId(rid);
    meta.iScale = this.getScaleForId(iid);
    meta.vScale = this.getScaleForId(vid);
  }
  getDataset() {
    return this.chart.data.datasets[this.index];
  }
  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }
  getScaleForId(scaleID) {
    return this.chart.scales[scaleID];
  }
  _getOtherScale(scale) {
    const meta = this._cachedMeta;
    return scale === meta.iScale ? meta.vScale : meta.iScale;
  }
  reset() {
    this._update("reset");
  }
  _destroy() {
    const meta = this._cachedMeta;
    if (this._data) {
      unlistenArrayEvents(this._data, this);
    }
    if (meta._stacked) {
      clearStacks(meta);
    }
  }
  _dataCheck() {
    const dataset = this.getDataset();
    const data = dataset.data || (dataset.data = []);
    const _data = this._data;
    if (isObject(data)) {
      this._data = convertObjectDataToArray(data);
    } else if (_data !== data) {
      if (_data) {
        unlistenArrayEvents(_data, this);
        const meta = this._cachedMeta;
        clearStacks(meta);
        meta._parsed = [];
      }
      if (data && Object.isExtensible(data)) {
        listenArrayEvents(data, this);
      }
      this._syncList = [];
      this._data = data;
    }
  }
  addElements() {
    const meta = this._cachedMeta;
    this._dataCheck();
    if (this.datasetElementType) {
      meta.dataset = new this.datasetElementType();
    }
  }
  buildOrUpdateElements(resetNewElements) {
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    let stackChanged = false;
    this._dataCheck();
    const oldStacked = meta._stacked;
    meta._stacked = isStacked(meta.vScale, meta);
    if (meta.stack !== dataset.stack) {
      stackChanged = true;
      clearStacks(meta);
      meta.stack = dataset.stack;
    }
    this._resyncElements(resetNewElements);
    if (stackChanged || oldStacked !== meta._stacked) {
      updateStacks(this, meta._parsed);
    }
  }
  configure() {
    const config = this.chart.config;
    const scopeKeys = config.datasetScopeKeys(this._type);
    const scopes2 = config.getOptionScopes(this.getDataset(), scopeKeys, true);
    this.options = config.createResolver(scopes2, this.getContext());
    this._parsing = this.options.parsing;
    this._cachedDataOpts = {};
  }
  parse(start, count) {
    const { _cachedMeta: meta, _data: data } = this;
    const { iScale, _stacked } = meta;
    const iAxis = iScale.axis;
    let sorted = start === 0 && count === data.length ? true : meta._sorted;
    let prev = start > 0 && meta._parsed[start - 1];
    let i2, cur, parsed;
    if (this._parsing === false) {
      meta._parsed = data;
      meta._sorted = true;
      parsed = data;
    } else {
      if (isArray(data[start])) {
        parsed = this.parseArrayData(meta, data, start, count);
      } else if (isObject(data[start])) {
        parsed = this.parseObjectData(meta, data, start, count);
      } else {
        parsed = this.parsePrimitiveData(meta, data, start, count);
      }
      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
      for (i2 = 0; i2 < count; ++i2) {
        meta._parsed[i2 + start] = cur = parsed[i2];
        if (sorted) {
          if (isNotInOrderComparedToPrev()) {
            sorted = false;
          }
          prev = cur;
        }
      }
      meta._sorted = sorted;
    }
    if (_stacked) {
      updateStacks(this, parsed);
    }
  }
  parsePrimitiveData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = new Array(count);
    let i2, ilen, index2;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      index2 = i2 + start;
      parsed[i2] = {
        [iAxis]: singleScale || iScale.parse(labels[index2], index2),
        [vAxis]: vScale.parse(data[index2], index2)
      };
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const parsed = new Array(count);
    let i2, ilen, index2, item;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      index2 = i2 + start;
      item = data[index2];
      parsed[i2] = {
        x: xScale.parse(item[0], index2),
        y: yScale.parse(item[1], index2)
      };
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const parsed = new Array(count);
    let i2, ilen, index2, item;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      index2 = i2 + start;
      item = data[index2];
      parsed[i2] = {
        x: xScale.parse(resolveObjectKey(item, xAxisKey), index2),
        y: yScale.parse(resolveObjectKey(item, yAxisKey), index2)
      };
    }
    return parsed;
  }
  getParsed(index2) {
    return this._cachedMeta._parsed[index2];
  }
  getDataElement(index2) {
    return this._cachedMeta.data[index2];
  }
  applyStack(scale, parsed, mode) {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const value = parsed[scale.axis];
    const stack = {
      keys: getSortedDatasetIndices(chart, true),
      values: parsed._stacks[scale.axis]._visualValues
    };
    return applyStack(stack, value, meta.index, {
      mode
    });
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    const parsedValue = parsed[scale.axis];
    let value = parsedValue === null ? NaN : parsedValue;
    const values = stack && parsed._stacks[scale.axis];
    if (stack && values) {
      stack.values = values;
      value = applyStack(stack, parsedValue, this._cachedMeta.index);
    }
    range.min = Math.min(range.min, value);
    range.max = Math.max(range.max, value);
  }
  getMinMax(scale, canStack) {
    const meta = this._cachedMeta;
    const _parsed = meta._parsed;
    const sorted = meta._sorted && scale === meta.iScale;
    const ilen = _parsed.length;
    const otherScale = this._getOtherScale(scale);
    const stack = createStack(canStack, meta, this.chart);
    const range = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
    let i2, parsed;
    function _skip() {
      parsed = _parsed[i2];
      const otherValue = parsed[otherScale.axis];
      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
    }
    for (i2 = 0; i2 < ilen; ++i2) {
      if (_skip()) {
        continue;
      }
      this.updateRangeFromParsed(range, scale, parsed, stack);
      if (sorted) {
        break;
      }
    }
    if (sorted) {
      for (i2 = ilen - 1; i2 >= 0; --i2) {
        if (_skip()) {
          continue;
        }
        this.updateRangeFromParsed(range, scale, parsed, stack);
        break;
      }
    }
    return range;
  }
  getAllParsedValues(scale) {
    const parsed = this._cachedMeta._parsed;
    const values = [];
    let i2, ilen, value;
    for (i2 = 0, ilen = parsed.length; i2 < ilen; ++i2) {
      value = parsed[i2][scale.axis];
      if (isNumberFinite(value)) {
        values.push(value);
      }
    }
    return values;
  }
  getMaxOverflow() {
    return false;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const parsed = this.getParsed(index2);
    return {
      label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
      value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
    };
  }
  _update(mode) {
    const meta = this._cachedMeta;
    this.update(mode || "default");
    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
  }
  update(mode) {
  }
  draw() {
    const ctx = this._ctx;
    const chart = this.chart;
    const meta = this._cachedMeta;
    const elements2 = meta.data || [];
    const area = chart.chartArea;
    const active = [];
    const start = this._drawStart || 0;
    const count = this._drawCount || elements2.length - start;
    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
    let i2;
    if (meta.dataset) {
      meta.dataset.draw(ctx, area, start, count);
    }
    for (i2 = start; i2 < start + count; ++i2) {
      const element2 = elements2[i2];
      if (element2.hidden) {
        continue;
      }
      if (element2.active && drawActiveElementsOnTop) {
        active.push(element2);
      } else {
        element2.draw(ctx, area);
      }
    }
    for (i2 = 0; i2 < active.length; ++i2) {
      active[i2].draw(ctx, area);
    }
  }
  getStyle(index2, active) {
    const mode = active ? "active" : "default";
    return index2 === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index2 || 0, mode);
  }
  getContext(index2, active, mode) {
    const dataset = this.getDataset();
    let context;
    if (index2 >= 0 && index2 < this._cachedMeta.data.length) {
      const element2 = this._cachedMeta.data[index2];
      context = element2.$context || (element2.$context = createDataContext(this.getContext(), index2, element2));
      context.parsed = this.getParsed(index2);
      context.raw = dataset.data[index2];
      context.index = context.dataIndex = index2;
    } else {
      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
      context.dataset = dataset;
      context.index = context.datasetIndex = this.index;
    }
    context.active = !!active;
    context.mode = mode;
    return context;
  }
  resolveDatasetElementOptions(mode) {
    return this._resolveElementOptions(this.datasetElementType.id, mode);
  }
  resolveDataElementOptions(index2, mode) {
    return this._resolveElementOptions(this.dataElementType.id, mode, index2);
  }
  _resolveElementOptions(elementType, mode = "default", index2) {
    const active = mode === "active";
    const cache = this._cachedDataOpts;
    const cacheKey = elementType + "-" + mode;
    const cached = cache[cacheKey];
    const sharing = this.enableOptionSharing && defined(index2);
    if (cached) {
      return cloneIfNotShared(cached, sharing);
    }
    const config = this.chart.config;
    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
    const prefixes = active ? [
      `${elementType}Hover`,
      "hover",
      elementType,
      ""
    ] : [
      elementType,
      ""
    ];
    const scopes2 = config.getOptionScopes(this.getDataset(), scopeKeys);
    const names2 = Object.keys(defaults.elements[elementType]);
    const context = () => this.getContext(index2, active, mode);
    const values = config.resolveNamedOptions(scopes2, names2, context, prefixes);
    if (values.$shared) {
      values.$shared = sharing;
      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
    }
    return values;
  }
  _resolveAnimations(index2, transition, active) {
    const chart = this.chart;
    const cache = this._cachedDataOpts;
    const cacheKey = `animation-${transition}`;
    const cached = cache[cacheKey];
    if (cached) {
      return cached;
    }
    let options;
    if (chart.options.animation !== false) {
      const config = this.chart.config;
      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
      const scopes2 = config.getOptionScopes(this.getDataset(), scopeKeys);
      options = config.createResolver(scopes2, this.getContext(index2, active, transition));
    }
    const animations = new Animations(chart, options && options.animations);
    if (options && options._cacheable) {
      cache[cacheKey] = Object.freeze(animations);
    }
    return animations;
  }
  getSharedOptions(options) {
    if (!options.$shared) {
      return;
    }
    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
  }
  includeOptions(mode, sharedOptions) {
    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
  }
  _getSharedOptions(start, mode) {
    const firstOpts = this.resolveDataElementOptions(start, mode);
    const previouslySharedOptions = this._sharedOptions;
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
    this.updateSharedOptions(sharedOptions, mode, firstOpts);
    return {
      sharedOptions,
      includeOptions
    };
  }
  updateElement(element2, index2, properties, mode) {
    if (isDirectUpdateMode(mode)) {
      Object.assign(element2, properties);
    } else {
      this._resolveAnimations(index2, mode).update(element2, properties);
    }
  }
  updateSharedOptions(sharedOptions, mode, newOptions) {
    if (sharedOptions && !isDirectUpdateMode(mode)) {
      this._resolveAnimations(void 0, mode).update(sharedOptions, newOptions);
    }
  }
  _setStyle(element2, index2, mode, active) {
    element2.active = active;
    const options = this.getStyle(index2, active);
    this._resolveAnimations(index2, mode, active).update(element2, {
      options: !active && this.getSharedOptions(options) || options
    });
  }
  removeHoverStyle(element2, datasetIndex, index2) {
    this._setStyle(element2, index2, "active", false);
  }
  setHoverStyle(element2, datasetIndex, index2) {
    this._setStyle(element2, index2, "active", true);
  }
  _removeDatasetHoverStyle() {
    const element2 = this._cachedMeta.dataset;
    if (element2) {
      this._setStyle(element2, void 0, "active", false);
    }
  }
  _setDatasetHoverStyle() {
    const element2 = this._cachedMeta.dataset;
    if (element2) {
      this._setStyle(element2, void 0, "active", true);
    }
  }
  _resyncElements(resetNewElements) {
    const data = this._data;
    const elements2 = this._cachedMeta.data;
    for (const [method, arg1, arg2] of this._syncList) {
      this[method](arg1, arg2);
    }
    this._syncList = [];
    const numMeta = elements2.length;
    const numData = data.length;
    const count = Math.min(numData, numMeta);
    if (count) {
      this.parse(0, count);
    }
    if (numData > numMeta) {
      this._insertElements(numMeta, numData - numMeta, resetNewElements);
    } else if (numData < numMeta) {
      this._removeElements(numData, numMeta - numData);
    }
  }
  _insertElements(start, count, resetNewElements = true) {
    const meta = this._cachedMeta;
    const data = meta.data;
    const end = start + count;
    let i2;
    const move = (arr) => {
      arr.length += count;
      for (i2 = arr.length - 1; i2 >= end; i2--) {
        arr[i2] = arr[i2 - count];
      }
    };
    move(data);
    for (i2 = start; i2 < end; ++i2) {
      data[i2] = new this.dataElementType();
    }
    if (this._parsing) {
      move(meta._parsed);
    }
    this.parse(start, count);
    if (resetNewElements) {
      this.updateElements(data, start, count, "reset");
    }
  }
  updateElements(element2, start, count, mode) {
  }
  _removeElements(start, count) {
    const meta = this._cachedMeta;
    if (this._parsing) {
      const removed = meta._parsed.splice(start, count);
      if (meta._stacked) {
        clearStacks(meta, removed);
      }
    }
    meta.data.splice(start, count);
  }
  _sync(args) {
    if (this._parsing) {
      this._syncList.push(args);
    } else {
      const [method, arg1, arg2] = args;
      this[method](arg1, arg2);
    }
    this.chart._dataChanges.push([
      this.index,
      ...args
    ]);
  }
  _onDataPush() {
    const count = arguments.length;
    this._sync([
      "_insertElements",
      this.getDataset().data.length - count,
      count
    ]);
  }
  _onDataPop() {
    this._sync([
      "_removeElements",
      this._cachedMeta.data.length - 1,
      1
    ]);
  }
  _onDataShift() {
    this._sync([
      "_removeElements",
      0,
      1
    ]);
  }
  _onDataSplice(start, count) {
    if (count) {
      this._sync([
        "_removeElements",
        start,
        count
      ]);
    }
    const newCount = arguments.length - 2;
    if (newCount) {
      this._sync([
        "_insertElements",
        start,
        newCount
      ]);
    }
  }
  _onDataUnshift() {
    this._sync([
      "_insertElements",
      0,
      arguments.length
    ]);
  }
}
__publicField(DatasetController, "defaults", {});
__publicField(DatasetController, "datasetElementType", null);
__publicField(DatasetController, "dataElementType", null);
function getAllScaleValues(scale, type) {
  if (!scale._cache.$bar) {
    const visibleMetas = scale.getMatchingVisibleMetas(type);
    let values = [];
    for (let i2 = 0, ilen = visibleMetas.length; i2 < ilen; i2++) {
      values = values.concat(visibleMetas[i2].controller.getAllParsedValues(scale));
    }
    scale._cache.$bar = _arrayUnique(values.sort((a3, b2) => a3 - b2));
  }
  return scale._cache.$bar;
}
function computeMinSampleSize(meta) {
  const scale = meta.iScale;
  const values = getAllScaleValues(scale, meta.type);
  let min = scale._length;
  let i2, ilen, curr, prev;
  const updateMinAndPrev = () => {
    if (curr === 32767 || curr === -32768) {
      return;
    }
    if (defined(prev)) {
      min = Math.min(min, Math.abs(curr - prev) || min);
    }
    prev = curr;
  };
  for (i2 = 0, ilen = values.length; i2 < ilen; ++i2) {
    curr = scale.getPixelForValue(values[i2]);
    updateMinAndPrev();
  }
  prev = void 0;
  for (i2 = 0, ilen = scale.ticks.length; i2 < ilen; ++i2) {
    curr = scale.getPixelForTick(i2);
    updateMinAndPrev();
  }
  return min;
}
function computeFitCategoryTraits(index2, ruler, options, stackCount) {
  const thickness = options.barThickness;
  let size, ratio;
  if (isNullOrUndef(thickness)) {
    size = ruler.min * options.categoryPercentage;
    ratio = options.barPercentage;
  } else {
    size = thickness * stackCount;
    ratio = 1;
  }
  return {
    chunk: size / stackCount,
    ratio,
    start: ruler.pixels[index2] - size / 2
  };
}
function computeFlexCategoryTraits(index2, ruler, options, stackCount) {
  const pixels = ruler.pixels;
  const curr = pixels[index2];
  let prev = index2 > 0 ? pixels[index2 - 1] : null;
  let next = index2 < pixels.length - 1 ? pixels[index2 + 1] : null;
  const percent = options.categoryPercentage;
  if (prev === null) {
    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
  }
  if (next === null) {
    next = curr + curr - prev;
  }
  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
  const size = Math.abs(next - prev) / 2 * percent;
  return {
    chunk: size / stackCount,
    ratio: options.barPercentage,
    start
  };
}
function parseFloatBar(entry, item, vScale, i2) {
  const startValue = vScale.parse(entry[0], i2);
  const endValue = vScale.parse(entry[1], i2);
  const min = Math.min(startValue, endValue);
  const max = Math.max(startValue, endValue);
  let barStart = min;
  let barEnd = max;
  if (Math.abs(min) > Math.abs(max)) {
    barStart = max;
    barEnd = min;
  }
  item[vScale.axis] = barEnd;
  item._custom = {
    barStart,
    barEnd,
    start: startValue,
    end: endValue,
    min,
    max
  };
}
function parseValue(entry, item, vScale, i2) {
  if (isArray(entry)) {
    parseFloatBar(entry, item, vScale, i2);
  } else {
    item[vScale.axis] = vScale.parse(entry, i2);
  }
  return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
  const iScale = meta.iScale;
  const vScale = meta.vScale;
  const labels = iScale.getLabels();
  const singleScale = iScale === vScale;
  const parsed = [];
  let i2, ilen, item, entry;
  for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
    entry = data[i2];
    item = {};
    item[iScale.axis] = singleScale || iScale.parse(labels[i2], i2);
    parsed.push(parseValue(entry, item, vScale, i2));
  }
  return parsed;
}
function isFloatBar(custom) {
  return custom && custom.barStart !== void 0 && custom.barEnd !== void 0;
}
function barSign(size, vScale, actualBase) {
  if (size !== 0) {
    return sign(size);
  }
  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
  let reverse, start, end, top, bottom;
  if (properties.horizontal) {
    reverse = properties.base > properties.x;
    start = "left";
    end = "right";
  } else {
    reverse = properties.base < properties.y;
    start = "bottom";
    end = "top";
  }
  if (reverse) {
    top = "end";
    bottom = "start";
  } else {
    top = "start";
    bottom = "end";
  }
  return {
    start,
    end,
    reverse,
    top,
    bottom
  };
}
function setBorderSkipped(properties, options, stack, index2) {
  let edge = options.borderSkipped;
  const res = {};
  if (!edge) {
    properties.borderSkipped = res;
    return;
  }
  if (edge === true) {
    properties.borderSkipped = {
      top: true,
      right: true,
      bottom: true,
      left: true
    };
    return;
  }
  const { start, end, reverse, top, bottom } = borderProps(properties);
  if (edge === "middle" && stack) {
    properties.enableBorderRadius = true;
    if ((stack._top || 0) === index2) {
      edge = top;
    } else if ((stack._bottom || 0) === index2) {
      edge = bottom;
    } else {
      res[parseEdge(bottom, start, end, reverse)] = true;
      edge = top;
    }
  }
  res[parseEdge(edge, start, end, reverse)] = true;
  properties.borderSkipped = res;
}
function parseEdge(edge, a3, b2, reverse) {
  if (reverse) {
    edge = swap(edge, a3, b2);
    edge = startEnd(edge, b2, a3);
  } else {
    edge = startEnd(edge, a3, b2);
  }
  return edge;
}
function swap(orig, v1, v2) {
  return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v, start, end) {
  return v === "start" ? start : v === "end" ? end : v;
}
function setInflateAmount(properties, { inflateAmount }, ratio) {
  properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
class BarController extends DatasetController {
  parsePrimitiveData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseArrayData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseObjectData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
    const vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
    const parsed = [];
    let i2, ilen, item, obj;
    for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
      obj = data[i2];
      item = {};
      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i2);
      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i2));
    }
    return parsed;
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    super.updateRangeFromParsed(range, scale, parsed, stack);
    const custom = parsed._custom;
    if (custom && scale === this._cachedMeta.vScale) {
      range.min = Math.min(range.min, custom.min);
      range.max = Math.max(range.max, custom.max);
    }
  }
  getMaxOverflow() {
    return 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const { iScale, vScale } = meta;
    const parsed = this.getParsed(index2);
    const custom = parsed._custom;
    const value = isFloatBar(custom) ? "[" + custom.start + ", " + custom.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
    return {
      label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
      value
    };
  }
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
    const meta = this._cachedMeta;
    meta.stack = this.getDataset().stack;
  }
  update(mode) {
    const meta = this._cachedMeta;
    this.updateElements(meta.data, 0, meta.data.length, mode);
  }
  updateElements(bars, start, count, mode) {
    const reset = mode === "reset";
    const { index: index2, _cachedMeta: { vScale } } = this;
    const base2 = vScale.getBasePixel();
    const horizontal = vScale.isHorizontal();
    const ruler = this._getRuler();
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    for (let i2 = start; i2 < start + count; i2++) {
      const parsed = this.getParsed(i2);
      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {
        base: base2,
        head: base2
      } : this._calculateBarValuePixels(i2);
      const ipixels = this._calculateBarIndexPixels(i2, ruler);
      const stack = (parsed._stacks || {})[vScale.axis];
      const properties = {
        horizontal,
        base: vpixels.base,
        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index2 === stack._top || index2 === stack._bottom,
        x: horizontal ? vpixels.head : ipixels.center,
        y: horizontal ? ipixels.center : vpixels.head,
        height: horizontal ? ipixels.size : Math.abs(vpixels.size),
        width: horizontal ? Math.abs(vpixels.size) : ipixels.size
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, bars[i2].active ? "active" : mode);
      }
      const options = properties.options || bars[i2].options;
      setBorderSkipped(properties, options, stack, index2);
      setInflateAmount(properties, options, ruler.ratio);
      this.updateElement(bars[i2], i2, properties, mode);
    }
  }
  _getStacks(last, dataIndex) {
    const { iScale } = this._cachedMeta;
    const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta) => meta.controller.options.grouped);
    const stacked = iScale.options.stacked;
    const stacks = [];
    const skipNull = (meta) => {
      const parsed = meta.controller.getParsed(dataIndex);
      const val = parsed && parsed[meta.vScale.axis];
      if (isNullOrUndef(val) || isNaN(val)) {
        return true;
      }
    };
    for (const meta of metasets) {
      if (dataIndex !== void 0 && skipNull(meta)) {
        continue;
      }
      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === void 0 && meta.stack === void 0) {
        stacks.push(meta.stack);
      }
      if (meta.index === last) {
        break;
      }
    }
    if (!stacks.length) {
      stacks.push(void 0);
    }
    return stacks;
  }
  _getStackCount(index2) {
    return this._getStacks(void 0, index2).length;
  }
  _getStackIndex(datasetIndex, name, dataIndex) {
    const stacks = this._getStacks(datasetIndex, dataIndex);
    const index2 = name !== void 0 ? stacks.indexOf(name) : -1;
    return index2 === -1 ? stacks.length - 1 : index2;
  }
  _getRuler() {
    const opts = this.options;
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const pixels = [];
    let i2, ilen;
    for (i2 = 0, ilen = meta.data.length; i2 < ilen; ++i2) {
      pixels.push(iScale.getPixelForValue(this.getParsed(i2)[iScale.axis], i2));
    }
    const barThickness = opts.barThickness;
    const min = barThickness || computeMinSampleSize(meta);
    return {
      min,
      pixels,
      start: iScale._startPixel,
      end: iScale._endPixel,
      stackCount: this._getStackCount(),
      scale: iScale,
      grouped: opts.grouped,
      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
    };
  }
  _calculateBarValuePixels(index2) {
    const { _cachedMeta: { vScale, _stacked, index: datasetIndex }, options: { base: baseValue, minBarLength } } = this;
    const actualBase = baseValue || 0;
    const parsed = this.getParsed(index2);
    const custom = parsed._custom;
    const floating = isFloatBar(custom);
    let value = parsed[vScale.axis];
    let start = 0;
    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
    let head, size;
    if (length !== value) {
      start = length - value;
      length = value;
    }
    if (floating) {
      value = custom.barStart;
      length = custom.barEnd - custom.barStart;
      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
        start = 0;
      }
      start += value;
    }
    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;
    let base2 = vScale.getPixelForValue(startValue);
    if (this.chart.getDataVisibility(index2)) {
      head = vScale.getPixelForValue(start + length);
    } else {
      head = base2;
    }
    size = head - base2;
    if (Math.abs(size) < minBarLength) {
      size = barSign(size, vScale, actualBase) * minBarLength;
      if (value === actualBase) {
        base2 -= size / 2;
      }
      const startPixel = vScale.getPixelForDecimal(0);
      const endPixel = vScale.getPixelForDecimal(1);
      const min = Math.min(startPixel, endPixel);
      const max = Math.max(startPixel, endPixel);
      base2 = Math.max(Math.min(base2, max), min);
      head = base2 + size;
      if (_stacked && !floating) {
        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base2);
      }
    }
    if (base2 === vScale.getPixelForValue(actualBase)) {
      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;
      base2 += halfGrid;
      size -= halfGrid;
    }
    return {
      size,
      base: base2,
      head,
      center: head + size / 2
    };
  }
  _calculateBarIndexPixels(index2, ruler) {
    const scale = ruler.scale;
    const options = this.options;
    const skipNull = options.skipNull;
    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);
    let center, size;
    if (ruler.grouped) {
      const stackCount = skipNull ? this._getStackCount(index2) : ruler.stackCount;
      const range = options.barThickness === "flex" ? computeFlexCategoryTraits(index2, ruler, options, stackCount) : computeFitCategoryTraits(index2, ruler, options, stackCount);
      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index2 : void 0);
      center = range.start + range.chunk * stackIndex + range.chunk / 2;
      size = Math.min(maxBarThickness, range.chunk * range.ratio);
    } else {
      center = scale.getPixelForValue(this.getParsed(index2)[scale.axis], index2);
      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
    }
    return {
      base: center - size / 2,
      head: center + size / 2,
      center,
      size
    };
  }
  draw() {
    const meta = this._cachedMeta;
    const vScale = meta.vScale;
    const rects = meta.data;
    const ilen = rects.length;
    let i2 = 0;
    for (; i2 < ilen; ++i2) {
      if (this.getParsed(i2)[vScale.axis] !== null) {
        rects[i2].draw(this._ctx);
      }
    }
  }
}
__publicField(BarController, "id", "bar");
__publicField(BarController, "defaults", {
  datasetElementType: false,
  dataElementType: "bar",
  categoryPercentage: 0.8,
  barPercentage: 0.9,
  grouped: true,
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "base",
        "width",
        "height"
      ]
    }
  }
});
__publicField(BarController, "overrides", {
  scales: {
    _index_: {
      type: "category",
      offset: true,
      grid: {
        offset: true
      }
    },
    _value_: {
      type: "linear",
      beginAtZero: true
    }
  }
});
class BubbleController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
  }
  parsePrimitiveData(meta, data, start, count) {
    const parsed = super.parsePrimitiveData(meta, data, start, count);
    for (let i2 = 0; i2 < parsed.length; i2++) {
      parsed[i2]._custom = this.resolveDataElementOptions(i2 + start).radius;
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const parsed = super.parseArrayData(meta, data, start, count);
    for (let i2 = 0; i2 < parsed.length; i2++) {
      const item = data[start + i2];
      parsed[i2]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i2 + start).radius);
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const parsed = super.parseObjectData(meta, data, start, count);
    for (let i2 = 0; i2 < parsed.length; i2++) {
      const item = data[start + i2];
      parsed[i2]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i2 + start).radius);
    }
    return parsed;
  }
  getMaxOverflow() {
    const data = this._cachedMeta.data;
    let max = 0;
    for (let i2 = data.length - 1; i2 >= 0; --i2) {
      max = Math.max(max, data[i2].size(this.resolveDataElementOptions(i2)) / 2);
    }
    return max > 0 && max;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const labels = this.chart.data.labels || [];
    const { xScale, yScale } = meta;
    const parsed = this.getParsed(index2);
    const x2 = xScale.getLabelForValue(parsed.x);
    const y3 = yScale.getLabelForValue(parsed.y);
    const r = parsed._custom;
    return {
      label: labels[index2] || "",
      value: "(" + x2 + ", " + y3 + (r ? ", " + r : "") + ")"
    };
  }
  update(mode) {
    const points = this._cachedMeta.data;
    this.updateElements(points, 0, points.length, mode);
  }
  updateElements(points, start, count, mode) {
    const reset = mode === "reset";
    const { iScale, vScale } = this._cachedMeta;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    for (let i2 = start; i2 < start + count; i2++) {
      const point = points[i2];
      const parsed = !reset && this.getParsed(i2);
      const properties = {};
      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
      properties.skip = isNaN(iPixel) || isNaN(vPixel);
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
        if (reset) {
          properties.options.radius = 0;
        }
      }
      this.updateElement(point, i2, properties, mode);
    }
  }
  resolveDataElementOptions(index2, mode) {
    const parsed = this.getParsed(index2);
    let values = super.resolveDataElementOptions(index2, mode);
    if (values.$shared) {
      values = Object.assign({}, values, {
        $shared: false
      });
    }
    const radius = values.radius;
    if (mode !== "active") {
      values.radius = 0;
    }
    values.radius += valueOrDefault(parsed && parsed._custom, radius);
    return values;
  }
}
__publicField(BubbleController, "id", "bubble");
__publicField(BubbleController, "defaults", {
  datasetElementType: false,
  dataElementType: "point",
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "borderWidth",
        "radius"
      ]
    }
  }
});
__publicField(BubbleController, "overrides", {
  scales: {
    x: {
      type: "linear"
    },
    y: {
      type: "linear"
    }
  }
});
function getRatioAndOffset(rotation, circumference, cutout) {
  let ratioX = 1;
  let ratioY = 1;
  let offsetX = 0;
  let offsetY = 0;
  if (circumference < TAU) {
    const startAngle = rotation;
    const endAngle = startAngle + circumference;
    const startX = Math.cos(startAngle);
    const startY = Math.sin(startAngle);
    const endX = Math.cos(endAngle);
    const endY = Math.sin(endAngle);
    const calcMax = (angle, a3, b2) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a3, a3 * cutout, b2, b2 * cutout);
    const calcMin = (angle, a3, b2) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a3, a3 * cutout, b2, b2 * cutout);
    const maxX = calcMax(0, startX, endX);
    const maxY = calcMax(HALF_PI, startY, endY);
    const minX = calcMin(PI, startX, endX);
    const minY = calcMin(PI + HALF_PI, startY, endY);
    ratioX = (maxX - minX) / 2;
    ratioY = (maxY - minY) / 2;
    offsetX = -(maxX + minX) / 2;
    offsetY = -(maxY + minY) / 2;
  }
  return {
    ratioX,
    ratioY,
    offsetX,
    offsetY
  };
}
class DoughnutController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.enableOptionSharing = true;
    this.innerRadius = void 0;
    this.outerRadius = void 0;
    this.offsetX = void 0;
    this.offsetY = void 0;
  }
  linkScales() {
  }
  parse(start, count) {
    const data = this.getDataset().data;
    const meta = this._cachedMeta;
    if (this._parsing === false) {
      meta._parsed = data;
    } else {
      let getter = (i3) => +data[i3];
      if (isObject(data[start])) {
        const { key = "value" } = this._parsing;
        getter = (i3) => +resolveObjectKey(data[i3], key);
      }
      let i2, ilen;
      for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
        meta._parsed[i2] = getter(i2);
      }
    }
  }
  _getRotation() {
    return toRadians(this.options.rotation - 90);
  }
  _getCircumference() {
    return toRadians(this.options.circumference);
  }
  _getRotationExtents() {
    let min = TAU;
    let max = -TAU;
    for (let i2 = 0; i2 < this.chart.data.datasets.length; ++i2) {
      if (this.chart.isDatasetVisible(i2) && this.chart.getDatasetMeta(i2).type === this._type) {
        const controller = this.chart.getDatasetMeta(i2).controller;
        const rotation = controller._getRotation();
        const circumference = controller._getCircumference();
        min = Math.min(min, rotation);
        max = Math.max(max, rotation + circumference);
      }
    }
    return {
      rotation: min,
      circumference: max - min
    };
  }
  update(mode) {
    const chart = this.chart;
    const { chartArea } = chart;
    const meta = this._cachedMeta;
    const arcs = meta.data;
    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);
    const chartWeight = this._getRingWeight(this.index);
    const { circumference, rotation } = this._getRotationExtents();
    const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);
    const maxWidth = (chartArea.width - spacing) / ratioX;
    const maxHeight = (chartArea.height - spacing) / ratioY;
    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
    const outerRadius = toDimension(this.options.radius, maxRadius);
    const innerRadius = Math.max(outerRadius * cutout, 0);
    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
    this.offsetX = offsetX * outerRadius;
    this.offsetY = offsetY * outerRadius;
    meta.total = this.calculateTotal();
    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
    this.updateElements(arcs, 0, arcs.length, mode);
  }
  _circumference(i2, reset) {
    const opts = this.options;
    const meta = this._cachedMeta;
    const circumference = this._getCircumference();
    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i2) || meta._parsed[i2] === null || meta.data[i2].hidden) {
      return 0;
    }
    return this.calculateCircumference(meta._parsed[i2] * circumference / TAU);
  }
  updateElements(arcs, start, count, mode) {
    const reset = mode === "reset";
    const chart = this.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const centerX = (chartArea.left + chartArea.right) / 2;
    const centerY = (chartArea.top + chartArea.bottom) / 2;
    const animateScale = reset && animationOpts.animateScale;
    const innerRadius = animateScale ? 0 : this.innerRadius;
    const outerRadius = animateScale ? 0 : this.outerRadius;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    let startAngle = this._getRotation();
    let i2;
    for (i2 = 0; i2 < start; ++i2) {
      startAngle += this._circumference(i2, reset);
    }
    for (i2 = start; i2 < start + count; ++i2) {
      const circumference = this._circumference(i2, reset);
      const arc = arcs[i2];
      const properties = {
        x: centerX + this.offsetX,
        y: centerY + this.offsetY,
        startAngle,
        endAngle: startAngle + circumference,
        circumference,
        outerRadius,
        innerRadius
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, arc.active ? "active" : mode);
      }
      startAngle += circumference;
      this.updateElement(arc, i2, properties, mode);
    }
  }
  calculateTotal() {
    const meta = this._cachedMeta;
    const metaData = meta.data;
    let total = 0;
    let i2;
    for (i2 = 0; i2 < metaData.length; i2++) {
      const value = meta._parsed[i2];
      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i2) && !metaData[i2].hidden) {
        total += Math.abs(value);
      }
    }
    return total;
  }
  calculateCircumference(value) {
    const total = this._cachedMeta.total;
    if (total > 0 && !isNaN(value)) {
      return TAU * (Math.abs(value) / total);
    }
    return 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const chart = this.chart;
    const labels = chart.data.labels || [];
    const value = formatNumber(meta._parsed[index2], chart.options.locale);
    return {
      label: labels[index2] || "",
      value
    };
  }
  getMaxBorderWidth(arcs) {
    let max = 0;
    const chart = this.chart;
    let i2, ilen, meta, controller, options;
    if (!arcs) {
      for (i2 = 0, ilen = chart.data.datasets.length; i2 < ilen; ++i2) {
        if (chart.isDatasetVisible(i2)) {
          meta = chart.getDatasetMeta(i2);
          arcs = meta.data;
          controller = meta.controller;
          break;
        }
      }
    }
    if (!arcs) {
      return 0;
    }
    for (i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
      options = controller.resolveDataElementOptions(i2);
      if (options.borderAlign !== "inner") {
        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
      }
    }
    return max;
  }
  getMaxOffset(arcs) {
    let max = 0;
    for (let i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
      const options = this.resolveDataElementOptions(i2);
      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
    }
    return max;
  }
  _getRingWeightOffset(datasetIndex) {
    let ringWeightOffset = 0;
    for (let i2 = 0; i2 < datasetIndex; ++i2) {
      if (this.chart.isDatasetVisible(i2)) {
        ringWeightOffset += this._getRingWeight(i2);
      }
    }
    return ringWeightOffset;
  }
  _getRingWeight(datasetIndex) {
    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
  }
  _getVisibleDatasetWeightTotal() {
    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
  }
}
__publicField(DoughnutController, "id", "doughnut");
__publicField(DoughnutController, "defaults", {
  datasetElementType: false,
  dataElementType: "arc",
  animation: {
    animateRotate: true,
    animateScale: false
  },
  animations: {
    numbers: {
      type: "number",
      properties: [
        "circumference",
        "endAngle",
        "innerRadius",
        "outerRadius",
        "startAngle",
        "x",
        "y",
        "offset",
        "borderWidth",
        "spacing"
      ]
    }
  },
  cutout: "50%",
  rotation: 0,
  circumference: 360,
  radius: "100%",
  spacing: 0,
  indexAxis: "r"
});
__publicField(DoughnutController, "descriptors", {
  _scriptable: (name) => name !== "spacing",
  _indexable: (name) => name !== "spacing" && !name.startsWith("borderDash") && !name.startsWith("hoverBorderDash")
});
__publicField(DoughnutController, "overrides", {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;
          if (data.labels.length && data.datasets.length) {
            const { labels: { pointStyle, color: color2 } } = chart.legend.options;
            return data.labels.map((label, i2) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i2);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                fontColor: color2,
                lineWidth: style.borderWidth,
                pointStyle,
                hidden: !chart.getDataVisibility(i2),
                index: i2
              };
            });
          }
          return [];
        }
      },
      onClick(e2, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }
    }
  }
});
class LineController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    this.supportsDecimation = true;
    super.initialize();
  }
  update(mode) {
    const meta = this._cachedMeta;
    const { dataset: line, data: points = [], _dataset } = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if (_scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }
    line._chart = this.chart;
    line._datasetIndex = this.index;
    line._decimated = !!_dataset._decimated;
    line.points = points;
    const options = this.resolveDatasetElementOptions(mode);
    if (!this.options.showLine) {
      options.borderWidth = 0;
    }
    options.segment = this.options.segment;
    this.updateElement(line, void 0, {
      animated: !animationsDisabled,
      options
    }, mode);
    this.updateElements(points, start, count, mode);
  }
  updateElements(points, start, count, mode) {
    const reset = mode === "reset";
    const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const { spanGaps, segment } = this.options;
    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
    const end = start + count;
    const pointsCount = points.length;
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i2 = 0; i2 < pointsCount; ++i2) {
      const point = points[i2];
      const properties = directUpdate ? point : {};
      if (i2 < start || i2 >= end) {
        properties.skip = true;
        continue;
      }
      const parsed = this.getParsed(i2);
      const nullData = isNullOrUndef(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i2);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i2);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i2 > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i2];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
      }
      if (!directUpdate) {
        this.updateElement(point, i2, properties, mode);
      }
      prevParsed = parsed;
    }
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    const data = meta.data || [];
    if (!data.length) {
      return border;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }
  draw() {
    const meta = this._cachedMeta;
    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
    super.draw();
  }
}
__publicField(LineController, "id", "line");
__publicField(LineController, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  showLine: true,
  spanGaps: false
});
__publicField(LineController, "overrides", {
  scales: {
    _index_: {
      type: "category"
    },
    _value_: {
      type: "linear"
    }
  }
});
class PolarAreaController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.innerRadius = void 0;
    this.outerRadius = void 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const chart = this.chart;
    const labels = chart.data.labels || [];
    const value = formatNumber(meta._parsed[index2].r, chart.options.locale);
    return {
      label: labels[index2] || "",
      value
    };
  }
  parseObjectData(meta, data, start, count) {
    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
  }
  update(mode) {
    const arcs = this._cachedMeta.data;
    this._updateRadius();
    this.updateElements(arcs, 0, arcs.length, mode);
  }
  getMinMax() {
    const meta = this._cachedMeta;
    const range = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    meta.data.forEach((element2, index2) => {
      const parsed = this.getParsed(index2).r;
      if (!isNaN(parsed) && this.chart.getDataVisibility(index2)) {
        if (parsed < range.min) {
          range.min = parsed;
        }
        if (parsed > range.max) {
          range.max = parsed;
        }
      }
    });
    return range;
  }
  _updateRadius() {
    const chart = this.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
    const outerRadius = Math.max(minSize / 2, 0);
    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
    this.outerRadius = outerRadius - radiusLength * this.index;
    this.innerRadius = this.outerRadius - radiusLength;
  }
  updateElements(arcs, start, count, mode) {
    const reset = mode === "reset";
    const chart = this.chart;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const scale = this._cachedMeta.rScale;
    const centerX = scale.xCenter;
    const centerY = scale.yCenter;
    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;
    let angle = datasetStartAngle;
    let i2;
    const defaultAngle = 360 / this.countVisibleElements();
    for (i2 = 0; i2 < start; ++i2) {
      angle += this._computeAngle(i2, mode, defaultAngle);
    }
    for (i2 = start; i2 < start + count; i2++) {
      const arc = arcs[i2];
      let startAngle = angle;
      let endAngle = angle + this._computeAngle(i2, mode, defaultAngle);
      let outerRadius = chart.getDataVisibility(i2) ? scale.getDistanceFromCenterForValue(this.getParsed(i2).r) : 0;
      angle = endAngle;
      if (reset) {
        if (animationOpts.animateScale) {
          outerRadius = 0;
        }
        if (animationOpts.animateRotate) {
          startAngle = endAngle = datasetStartAngle;
        }
      }
      const properties = {
        x: centerX,
        y: centerY,
        innerRadius: 0,
        outerRadius,
        startAngle,
        endAngle,
        options: this.resolveDataElementOptions(i2, arc.active ? "active" : mode)
      };
      this.updateElement(arc, i2, properties, mode);
    }
  }
  countVisibleElements() {
    const meta = this._cachedMeta;
    let count = 0;
    meta.data.forEach((element2, index2) => {
      if (!isNaN(this.getParsed(index2).r) && this.chart.getDataVisibility(index2)) {
        count++;
      }
    });
    return count;
  }
  _computeAngle(index2, mode, defaultAngle) {
    return this.chart.getDataVisibility(index2) ? toRadians(this.resolveDataElementOptions(index2, mode).angle || defaultAngle) : 0;
  }
}
__publicField(PolarAreaController, "id", "polarArea");
__publicField(PolarAreaController, "defaults", {
  dataElementType: "arc",
  animation: {
    animateRotate: true,
    animateScale: true
  },
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "startAngle",
        "endAngle",
        "innerRadius",
        "outerRadius"
      ]
    }
  },
  indexAxis: "r",
  startAngle: 0
});
__publicField(PolarAreaController, "overrides", {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;
          if (data.labels.length && data.datasets.length) {
            const { labels: { pointStyle, color: color2 } } = chart.legend.options;
            return data.labels.map((label, i2) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i2);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                fontColor: color2,
                lineWidth: style.borderWidth,
                pointStyle,
                hidden: !chart.getDataVisibility(i2),
                index: i2
              };
            });
          }
          return [];
        }
      },
      onClick(e2, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }
    }
  },
  scales: {
    r: {
      type: "radialLinear",
      angleLines: {
        display: false
      },
      beginAtZero: true,
      grid: {
        circular: true
      },
      pointLabels: {
        display: false
      },
      startAngle: 0
    }
  }
});
class PieController extends DoughnutController {
}
__publicField(PieController, "id", "pie");
__publicField(PieController, "defaults", {
  cutout: 0,
  rotation: 0,
  circumference: 360,
  radius: "100%"
});
class RadarController extends DatasetController {
  getLabelAndValue(index2) {
    const vScale = this._cachedMeta.vScale;
    const parsed = this.getParsed(index2);
    return {
      label: vScale.getLabels()[index2],
      value: "" + vScale.getLabelForValue(parsed[vScale.axis])
    };
  }
  parseObjectData(meta, data, start, count) {
    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
  }
  update(mode) {
    const meta = this._cachedMeta;
    const line = meta.dataset;
    const points = meta.data || [];
    const labels = meta.iScale.getLabels();
    line.points = points;
    if (mode !== "resize") {
      const options = this.resolveDatasetElementOptions(mode);
      if (!this.options.showLine) {
        options.borderWidth = 0;
      }
      const properties = {
        _loop: true,
        _fullLoop: labels.length === points.length,
        options
      };
      this.updateElement(line, void 0, properties, mode);
    }
    this.updateElements(points, 0, points.length, mode);
  }
  updateElements(points, start, count, mode) {
    const scale = this._cachedMeta.rScale;
    const reset = mode === "reset";
    for (let i2 = start; i2 < start + count; i2++) {
      const point = points[i2];
      const options = this.resolveDataElementOptions(i2, point.active ? "active" : mode);
      const pointPosition = scale.getPointPositionForValue(i2, this.getParsed(i2).r);
      const x2 = reset ? scale.xCenter : pointPosition.x;
      const y3 = reset ? scale.yCenter : pointPosition.y;
      const properties = {
        x: x2,
        y: y3,
        angle: pointPosition.angle,
        skip: isNaN(x2) || isNaN(y3),
        options
      };
      this.updateElement(point, i2, properties, mode);
    }
  }
}
__publicField(RadarController, "id", "radar");
__publicField(RadarController, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  indexAxis: "r",
  showLine: true,
  elements: {
    line: {
      fill: "start"
    }
  }
});
__publicField(RadarController, "overrides", {
  aspectRatio: 1,
  scales: {
    r: {
      type: "radialLinear"
    }
  }
});
class ScatterController extends DatasetController {
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const labels = this.chart.data.labels || [];
    const { xScale, yScale } = meta;
    const parsed = this.getParsed(index2);
    const x2 = xScale.getLabelForValue(parsed.x);
    const y3 = yScale.getLabelForValue(parsed.y);
    return {
      label: labels[index2] || "",
      value: "(" + x2 + ", " + y3 + ")"
    };
  }
  update(mode) {
    const meta = this._cachedMeta;
    const { data: points = [] } = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if (_scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }
    if (this.options.showLine) {
      const { dataset: line, _dataset } = meta;
      line._chart = this.chart;
      line._datasetIndex = this.index;
      line._decimated = !!_dataset._decimated;
      line.points = points;
      const options = this.resolveDatasetElementOptions(mode);
      options.segment = this.options.segment;
      this.updateElement(line, void 0, {
        animated: !animationsDisabled,
        options
      }, mode);
    }
    this.updateElements(points, start, count, mode);
  }
  addElements() {
    const { showLine } = this.options;
    if (!this.datasetElementType && showLine) {
      this.datasetElementType = this.chart.registry.getElement("line");
    }
    super.addElements();
  }
  updateElements(points, start, count, mode) {
    const reset = mode === "reset";
    const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
    const firstOpts = this.resolveDataElementOptions(start, mode);
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode, sharedOptions);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const { spanGaps, segment } = this.options;
    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i2 = start; i2 < start + count; ++i2) {
      const point = points[i2];
      const parsed = this.getParsed(i2);
      const properties = directUpdate ? point : {};
      const nullData = isNullOrUndef(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i2);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i2);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i2 > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i2];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
      }
      if (!directUpdate) {
        this.updateElement(point, i2, properties, mode);
      }
      prevParsed = parsed;
    }
    this.updateSharedOptions(sharedOptions, mode, firstOpts);
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const data = meta.data || [];
    if (!this.options.showLine) {
      let max = 0;
      for (let i2 = data.length - 1; i2 >= 0; --i2) {
        max = Math.max(max, data[i2].size(this.resolveDataElementOptions(i2)) / 2);
      }
      return max > 0 && max;
    }
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    if (!data.length) {
      return border;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }
}
__publicField(ScatterController, "id", "scatter");
__publicField(ScatterController, "defaults", {
  datasetElementType: false,
  dataElementType: "point",
  showLine: false,
  fill: false
});
__publicField(ScatterController, "overrides", {
  interaction: {
    mode: "point"
  },
  scales: {
    x: {
      type: "linear"
    },
    y: {
      type: "linear"
    }
  }
});
var controllers = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BarController,
  BubbleController,
  DoughnutController,
  LineController,
  PieController,
  PolarAreaController,
  RadarController,
  ScatterController
});
function abstract() {
  throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
class DateAdapterBase {
  constructor(options) {
    __publicField(this, "options");
    this.options = options || {};
  }
  /**
  * Override default date adapter methods.
  * Accepts type parameter to define options type.
  * @example
  * Chart._adapters._date.override<{myAdapterOption: string}>({
  *   init() {
  *     console.log(this.options.myAdapterOption);
  *   }
  * })
  */
  static override(members) {
    Object.assign(DateAdapterBase.prototype, members);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  init() {
  }
  formats() {
    return abstract();
  }
  parse() {
    return abstract();
  }
  format() {
    return abstract();
  }
  add() {
    return abstract();
  }
  diff() {
    return abstract();
  }
  startOf() {
    return abstract();
  }
  endOf() {
    return abstract();
  }
}
var adapters = {
  _date: DateAdapterBase
};
function binarySearch(metaset, axis, value, intersect) {
  const { controller, data, _sorted } = metaset;
  const iScale = controller._cachedMeta.iScale;
  if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
    if (!intersect) {
      return lookupMethod(data, axis, value);
    } else if (controller._sharedOptions) {
      const el = data[0];
      const range = typeof el.getRange === "function" && el.getRange(axis);
      if (range) {
        const start = lookupMethod(data, axis, value - range);
        const end = lookupMethod(data, axis, value + range);
        return {
          lo: start.lo,
          hi: end.hi
        };
      }
    }
  }
  return {
    lo: 0,
    hi: data.length - 1
  };
}
function evaluateInteractionItems(chart, axis, position, handler, intersect) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  const value = position[axis];
  for (let i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
    const { index: index2, data } = metasets[i2];
    const { lo, hi } = binarySearch(metasets[i2], axis, value, intersect);
    for (let j = lo; j <= hi; ++j) {
      const element2 = data[j];
      if (!element2.skip) {
        handler(element2, index2, j);
      }
    }
  }
}
function getDistanceMetricForAxis(axis) {
  const useX = axis.indexOf("x") !== -1;
  const useY = axis.indexOf("y") !== -1;
  return function(pt1, pt2) {
    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}
function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
  const items = [];
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return items;
  }
  const evaluationFunc = function(element2, datasetIndex, index2) {
    if (!includeInvisible && !_isPointInArea(element2, chart.chartArea, 0)) {
      return;
    }
    if (element2.inRange(position.x, position.y, useFinalPosition)) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
    }
  };
  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
  return items;
}
function getNearestRadialItems(chart, position, axis, useFinalPosition) {
  let items = [];
  function evaluationFunc(element2, datasetIndex, index2) {
    const { startAngle, endAngle } = element2.getProps([
      "startAngle",
      "endAngle"
    ], useFinalPosition);
    const { angle } = getAngleFromPoint(element2, {
      x: position.x,
      y: position.y
    });
    if (_angleBetween(angle, startAngle, endAngle)) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  let items = [];
  const distanceMetric = getDistanceMetricForAxis(axis);
  let minDistance = Number.POSITIVE_INFINITY;
  function evaluationFunc(element2, datasetIndex, index2) {
    const inRange2 = element2.inRange(position.x, position.y, useFinalPosition);
    if (intersect && !inRange2) {
      return;
    }
    const center = element2.getCenterPoint(useFinalPosition);
    const pointInArea = !!includeInvisible || chart.isPointInArea(center);
    if (!pointInArea && !inRange2) {
      return;
    }
    const distance = distanceMetric(position, center);
    if (distance < minDistance) {
      items = [
        {
          element: element2,
          datasetIndex,
          index: index2
        }
      ];
      minDistance = distance;
    } else if (distance === minDistance) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return [];
  }
  return axis === "r" && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
  const items = [];
  const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
  let intersectsItem = false;
  evaluateInteractionItems(chart, axis, position, (element2, datasetIndex, index2) => {
    if (element2[rangeMethod](position[axis], useFinalPosition)) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
      intersectsItem = intersectsItem || element2.inRange(position.x, position.y, useFinalPosition);
    }
  });
  if (intersect && !intersectsItem) {
    return [];
  }
  return items;
}
var Interaction = {
  evaluateInteractionItems,
  modes: {
    index(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "x";
      const includeInvisible = options.includeInvisible || false;
      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      const elements2 = [];
      if (!items.length) {
        return [];
      }
      chart.getSortedVisibleDatasetMetas().forEach((meta) => {
        const index2 = items[0].index;
        const element2 = meta.data[index2];
        if (element2 && !element2.skip) {
          elements2.push({
            element: element2,
            datasetIndex: meta.index,
            index: index2
          });
        }
      });
      return elements2;
    },
    dataset(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      if (items.length > 0) {
        const datasetIndex = items[0].datasetIndex;
        const data = chart.getDatasetMeta(datasetIndex).data;
        items = [];
        for (let i2 = 0; i2 < data.length; ++i2) {
          items.push({
            element: data[i2],
            datasetIndex,
            index: i2
          });
        }
      }
      return items;
    },
    point(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
    },
    nearest(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
    },
    x(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      return getAxisItems(chart, position, "x", options.intersect, useFinalPosition);
    },
    y(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      return getAxisItems(chart, position, "y", options.intersect, useFinalPosition);
    }
  }
};
const STATIC_POSITIONS = [
  "left",
  "top",
  "right",
  "bottom"
];
function filterByPosition(array, position) {
  return array.filter((v) => v.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
  return array.filter((v) => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}
function sortByWeight(array, reverse) {
  return array.sort((a3, b2) => {
    const v0 = reverse ? b2 : a3;
    const v1 = reverse ? a3 : b2;
    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
  });
}
function wrapBoxes(boxes) {
  const layoutBoxes = [];
  let i2, ilen, box, pos, stack, stackWeight;
  for (i2 = 0, ilen = (boxes || []).length; i2 < ilen; ++i2) {
    box = boxes[i2];
    ({ position: pos, options: { stack, stackWeight = 1 } } = box);
    layoutBoxes.push({
      index: i2,
      box,
      pos,
      horizontal: box.isHorizontal(),
      weight: box.weight,
      stack: stack && pos + stack,
      stackWeight
    });
  }
  return layoutBoxes;
}
function buildStacks(layouts2) {
  const stacks = {};
  for (const wrap of layouts2) {
    const { stack, pos, stackWeight } = wrap;
    if (!stack || !STATIC_POSITIONS.includes(pos)) {
      continue;
    }
    const _stack = stacks[stack] || (stacks[stack] = {
      count: 0,
      placed: 0,
      weight: 0,
      size: 0
    });
    _stack.count++;
    _stack.weight += stackWeight;
  }
  return stacks;
}
function setLayoutDims(layouts2, params) {
  const stacks = buildStacks(layouts2);
  const { vBoxMaxWidth, hBoxMaxHeight } = params;
  let i2, ilen, layout;
  for (i2 = 0, ilen = layouts2.length; i2 < ilen; ++i2) {
    layout = layouts2[i2];
    const { fullSize } = layout.box;
    const stack = stacks[layout.stack];
    const factor = stack && layout.stackWeight / stack.weight;
    if (layout.horizontal) {
      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
      layout.height = hBoxMaxHeight;
    } else {
      layout.width = vBoxMaxWidth;
      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
    }
  }
  return stacks;
}
function buildLayoutBoxes(boxes) {
  const layoutBoxes = wrapBoxes(boxes);
  const fullSize = sortByWeight(layoutBoxes.filter((wrap) => wrap.box.fullSize), true);
  const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
  const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
  const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
  const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
  return {
    fullSize,
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, "chartArea"),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}
function getCombinedMax(maxPadding, chartArea, a3, b2) {
  return Math.max(maxPadding[a3], chartArea[a3]) + Math.max(maxPadding[b2], chartArea[b2]);
}
function updateMaxPadding(maxPadding, boxPadding) {
  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
  const { pos, box } = layout;
  const maxPadding = chartArea.maxPadding;
  if (!isObject(pos)) {
    if (layout.size) {
      chartArea[pos] -= layout.size;
    }
    const stack = stacks[layout.stack] || {
      size: 0,
      count: 1
    };
    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
    layout.size = stack.size / stack.count;
    chartArea[pos] += layout.size;
  }
  if (box.getPadding) {
    updateMaxPadding(maxPadding, box.getPadding());
  }
  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
  const widthChanged = newWidth !== chartArea.w;
  const heightChanged = newHeight !== chartArea.h;
  chartArea.w = newWidth;
  chartArea.h = newHeight;
  return layout.horizontal ? {
    same: widthChanged,
    other: heightChanged
  } : {
    same: heightChanged,
    other: widthChanged
  };
}
function handleMaxPadding(chartArea) {
  const maxPadding = chartArea.maxPadding;
  function updatePos(pos) {
    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }
  chartArea.y += updatePos("top");
  chartArea.x += updatePos("left");
  updatePos("right");
  updatePos("bottom");
}
function getMargins(horizontal, chartArea) {
  const maxPadding = chartArea.maxPadding;
  function marginForPositions(positions2) {
    const margin = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    positions2.forEach((pos) => {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }
  return horizontal ? marginForPositions([
    "left",
    "right"
  ]) : marginForPositions([
    "top",
    "bottom"
  ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
  const refitBoxes = [];
  let i2, ilen, layout, box, refit, changed;
  for (i2 = 0, ilen = boxes.length, refit = 0; i2 < ilen; ++i2) {
    layout = boxes[i2];
    box = layout.box;
    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
    const { same, other } = updateDims(chartArea, params, layout, stacks);
    refit |= same && refitBoxes.length;
    changed = changed || other;
    if (!box.fullSize) {
      refitBoxes.push(layout);
    }
  }
  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
  box.top = top;
  box.left = left;
  box.right = left + width;
  box.bottom = top + height;
  box.width = width;
  box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
  const userPadding = params.padding;
  let { x: x2, y: y3 } = chartArea;
  for (const layout of boxes) {
    const box = layout.box;
    const stack = stacks[layout.stack] || {
      count: 1,
      placed: 0,
      weight: 1
    };
    const weight = layout.stackWeight / stack.weight || 1;
    if (layout.horizontal) {
      const width = chartArea.w * weight;
      const height = stack.size || box.height;
      if (defined(stack.start)) {
        y3 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, userPadding.left, y3, params.outerWidth - userPadding.right - userPadding.left, height);
      } else {
        setBoxDims(box, chartArea.left + stack.placed, y3, width, height);
      }
      stack.start = y3;
      stack.placed += width;
      y3 = box.bottom;
    } else {
      const height = chartArea.h * weight;
      const width = stack.size || box.width;
      if (defined(stack.start)) {
        x2 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, x2, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
      } else {
        setBoxDims(box, x2, chartArea.top + stack.placed, width, height);
      }
      stack.start = x2;
      stack.placed += height;
      x2 = box.right;
    }
  }
  chartArea.x = x2;
  chartArea.y = y3;
}
var layouts = {
  addBox(chart, item) {
    if (!chart.boxes) {
      chart.boxes = [];
    }
    item.fullSize = item.fullSize || false;
    item.position = item.position || "top";
    item.weight = item.weight || 0;
    item._layers = item._layers || function() {
      return [
        {
          z: 0,
          draw(chartArea) {
            item.draw(chartArea);
          }
        }
      ];
    };
    chart.boxes.push(item);
  },
  removeBox(chart, layoutItem) {
    const index2 = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    if (index2 !== -1) {
      chart.boxes.splice(index2, 1);
    }
  },
  configure(chart, item, options) {
    item.fullSize = options.fullSize;
    item.position = options.position;
    item.weight = options.weight;
  },
  update(chart, width, height, minPadding) {
    if (!chart) {
      return;
    }
    const padding = toPadding(chart.options.layout.padding);
    const availableWidth = Math.max(width - padding.width, 0);
    const availableHeight = Math.max(height - padding.height, 0);
    const boxes = buildLayoutBoxes(chart.boxes);
    const verticalBoxes = boxes.vertical;
    const horizontalBoxes = boxes.horizontal;
    each(chart.boxes, (box) => {
      if (typeof box.beforeLayout === "function") {
        box.beforeLayout();
      }
    });
    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
    const params = Object.freeze({
      outerWidth: width,
      outerHeight: height,
      padding,
      availableWidth,
      availableHeight,
      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
      hBoxMaxHeight: availableHeight / 2
    });
    const maxPadding = Object.assign({}, padding);
    updateMaxPadding(maxPadding, toPadding(minPadding));
    const chartArea = Object.assign({
      maxPadding,
      w: availableWidth,
      h: availableHeight,
      x: padding.left,
      y: padding.top
    }, padding);
    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
    fitBoxes(boxes.fullSize, chartArea, params, stacks);
    fitBoxes(verticalBoxes, chartArea, params, stacks);
    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
      fitBoxes(verticalBoxes, chartArea, params, stacks);
    }
    handleMaxPadding(chartArea);
    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
    chartArea.x += chartArea.w;
    chartArea.y += chartArea.h;
    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
    chart.chartArea = {
      left: chartArea.left,
      top: chartArea.top,
      right: chartArea.left + chartArea.w,
      bottom: chartArea.top + chartArea.h,
      height: chartArea.h,
      width: chartArea.w
    };
    each(boxes.chartArea, (layout) => {
      const box = layout.box;
      Object.assign(box, chart.chartArea);
      box.update(chartArea.w, chartArea.h, {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      });
    });
  }
};
class BasePlatform {
  acquireContext(canvas, aspectRatio) {
  }
  releaseContext(context) {
    return false;
  }
  addEventListener(chart, type, listener) {
  }
  removeEventListener(chart, type, listener) {
  }
  getDevicePixelRatio() {
    return 1;
  }
  getMaximumSize(element2, width, height, aspectRatio) {
    width = Math.max(0, width || element2.width);
    height = height || element2.height;
    return {
      width,
      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
    };
  }
  isAttached(canvas) {
    return true;
  }
  updateConfig(config) {
  }
}
class BasicPlatform extends BasePlatform {
  acquireContext(item) {
    return item && item.getContext && item.getContext("2d") || null;
  }
  updateConfig(config) {
    config.options.animation = false;
  }
}
const EXPANDO_KEY = "$chartjs";
const EVENT_TYPES = {
  touchstart: "mousedown",
  touchmove: "mousemove",
  touchend: "mouseup",
  pointerenter: "mouseenter",
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointerleave: "mouseout",
  pointerout: "mouseout"
};
const isNullOrEmpty = (value) => value === null || value === "";
function initCanvas(canvas, aspectRatio) {
  const style = canvas.style;
  const renderHeight = canvas.getAttribute("height");
  const renderWidth = canvas.getAttribute("width");
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || "block";
  style.boxSizing = style.boxSizing || "border-box";
  if (isNullOrEmpty(renderWidth)) {
    const displayWidth = readUsedSize(canvas, "width");
    if (displayWidth !== void 0) {
      canvas.width = displayWidth;
    }
  }
  if (isNullOrEmpty(renderHeight)) {
    if (canvas.style.height === "") {
      canvas.height = canvas.width / (aspectRatio || 2);
    } else {
      const displayHeight = readUsedSize(canvas, "height");
      if (displayHeight !== void 0) {
        canvas.height = displayHeight;
      }
    }
  }
  return canvas;
}
const eventListenerOptions = supportsEventListenerOptions ? {
  passive: true
} : false;
function addListener(node, type, listener) {
  node.addEventListener(type, listener, eventListenerOptions);
}
function removeListener(chart, type, listener) {
  chart.canvas.removeEventListener(type, listener, eventListenerOptions);
}
function fromNativeEvent(event, chart) {
  const type = EVENT_TYPES[event.type] || event.type;
  const { x: x2, y: y3 } = getRelativePosition(event, chart);
  return {
    type,
    chart,
    native: event,
    x: x2 !== void 0 ? x2 : null,
    y: y3 !== void 0 ? y3 : null
  };
}
function nodeListContains(nodeList, canvas) {
  for (const node of nodeList) {
    if (node === canvas || node.contains(canvas)) {
      return true;
    }
  }
}
function createAttachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.addedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
function createDetachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.removedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
const drpListeningCharts = /* @__PURE__ */ new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
  const dpr = window.devicePixelRatio;
  if (dpr === oldDevicePixelRatio) {
    return;
  }
  oldDevicePixelRatio = dpr;
  drpListeningCharts.forEach((resize, chart) => {
    if (chart.currentDevicePixelRatio !== dpr) {
      resize();
    }
  });
}
function listenDevicePixelRatioChanges(chart, resize) {
  if (!drpListeningCharts.size) {
    window.addEventListener("resize", onWindowResize);
  }
  drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
  drpListeningCharts.delete(chart);
  if (!drpListeningCharts.size) {
    window.removeEventListener("resize", onWindowResize);
  }
}
function createResizeObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && _getParentNode(canvas);
  if (!container) {
    return;
  }
  const resize = throttled((width, height) => {
    const w2 = container.clientWidth;
    listener(width, height);
    if (w2 < container.clientWidth) {
      listener();
    }
  }, window);
  const observer = new ResizeObserver((entries) => {
    const entry = entries[0];
    const width = entry.contentRect.width;
    const height = entry.contentRect.height;
    if (width === 0 && height === 0) {
      return;
    }
    resize(width, height);
  });
  observer.observe(container);
  listenDevicePixelRatioChanges(chart, resize);
  return observer;
}
function releaseObserver(chart, type, observer) {
  if (observer) {
    observer.disconnect();
  }
  if (type === "resize") {
    unlistenDevicePixelRatioChanges(chart);
  }
}
function createProxyAndListen(chart, type, listener) {
  const canvas = chart.canvas;
  const proxy = throttled((event) => {
    if (chart.ctx !== null) {
      listener(fromNativeEvent(event, chart));
    }
  }, chart);
  addListener(canvas, type, proxy);
  return proxy;
}
class DomPlatform extends BasePlatform {
  acquireContext(canvas, aspectRatio) {
    const context = canvas && canvas.getContext && canvas.getContext("2d");
    if (context && context.canvas === canvas) {
      initCanvas(canvas, aspectRatio);
      return context;
    }
    return null;
  }
  releaseContext(context) {
    const canvas = context.canvas;
    if (!canvas[EXPANDO_KEY]) {
      return false;
    }
    const initial = canvas[EXPANDO_KEY].initial;
    [
      "height",
      "width"
    ].forEach((prop) => {
      const value = initial[prop];
      if (isNullOrUndef(value)) {
        canvas.removeAttribute(prop);
      } else {
        canvas.setAttribute(prop, value);
      }
    });
    const style = initial.style || {};
    Object.keys(style).forEach((key) => {
      canvas.style[key] = style[key];
    });
    canvas.width = canvas.width;
    delete canvas[EXPANDO_KEY];
    return true;
  }
  addEventListener(chart, type, listener) {
    this.removeEventListener(chart, type);
    const proxies = chart.$proxies || (chart.$proxies = {});
    const handlers = {
      attach: createAttachObserver,
      detach: createDetachObserver,
      resize: createResizeObserver
    };
    const handler = handlers[type] || createProxyAndListen;
    proxies[type] = handler(chart, type, listener);
  }
  removeEventListener(chart, type) {
    const proxies = chart.$proxies || (chart.$proxies = {});
    const proxy = proxies[type];
    if (!proxy) {
      return;
    }
    const handlers = {
      attach: releaseObserver,
      detach: releaseObserver,
      resize: releaseObserver
    };
    const handler = handlers[type] || removeListener;
    handler(chart, type, proxy);
    proxies[type] = void 0;
  }
  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }
  getMaximumSize(canvas, width, height, aspectRatio) {
    return getMaximumSize(canvas, width, height, aspectRatio);
  }
  isAttached(canvas) {
    const container = _getParentNode(canvas);
    return !!(container && container.isConnected);
  }
}
function _detectPlatform(canvas) {
  if (!_isDomSupported() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) {
    return BasicPlatform;
  }
  return DomPlatform;
}
let Element$1 = (_a = class {
  constructor() {
    __publicField(this, "x");
    __publicField(this, "y");
    __publicField(this, "active", false);
    __publicField(this, "options");
    __publicField(this, "$animations");
  }
  tooltipPosition(useFinalPosition) {
    const { x: x2, y: y3 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y3
    };
  }
  hasValue() {
    return isNumber(this.x) && isNumber(this.y);
  }
  getProps(props, final) {
    const anims = this.$animations;
    if (!final || !anims) {
      return this;
    }
    const ret = {};
    props.forEach((prop) => {
      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
    });
    return ret;
  }
}, __publicField(_a, "defaults", {}), __publicField(_a, "defaultRoutes"), _a);
function autoSkip(scale, ticks) {
  const tickOpts = scale.options.ticks;
  const determinedMaxTicks = determineMaxTicks(scale);
  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  const numMajorIndices = majorIndices.length;
  const first = majorIndices[0];
  const last = majorIndices[numMajorIndices - 1];
  const newTicks = [];
  if (numMajorIndices > ticksLimit) {
    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
    return newTicks;
  }
  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
  if (numMajorIndices > 0) {
    let i2, ilen;
    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    for (i2 = 0, ilen = numMajorIndices - 1; i2 < ilen; i2++) {
      skip(ticks, newTicks, spacing, majorIndices[i2], majorIndices[i2 + 1]);
    }
    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    return newTicks;
  }
  skip(ticks, newTicks, spacing);
  return newTicks;
}
function determineMaxTicks(scale) {
  const offset = scale.options.offset;
  const tickLength = scale._tickSize();
  const maxScale = scale._length / tickLength + (offset ? 0 : 1);
  const maxChart = scale._maxLength / tickLength;
  return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
  const evenMajorSpacing = getEvenSpacing(majorIndices);
  const spacing = ticks.length / ticksLimit;
  if (!evenMajorSpacing) {
    return Math.max(spacing, 1);
  }
  const factors = _factorize(evenMajorSpacing);
  for (let i2 = 0, ilen = factors.length - 1; i2 < ilen; i2++) {
    const factor = factors[i2];
    if (factor > spacing) {
      return factor;
    }
  }
  return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
  const result = [];
  let i2, ilen;
  for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
    if (ticks[i2].major) {
      result.push(i2);
    }
  }
  return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
  let count = 0;
  let next = majorIndices[0];
  let i2;
  spacing = Math.ceil(spacing);
  for (i2 = 0; i2 < ticks.length; i2++) {
    if (i2 === next) {
      newTicks.push(ticks[i2]);
      count++;
      next = majorIndices[count * spacing];
    }
  }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
  const start = valueOrDefault(majorStart, 0);
  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
  let count = 0;
  let length, i2, next;
  spacing = Math.ceil(spacing);
  if (majorEnd) {
    length = majorEnd - majorStart;
    spacing = length / Math.floor(length / spacing);
  }
  next = start;
  while (next < 0) {
    count++;
    next = Math.round(start + count * spacing);
  }
  for (i2 = Math.max(start, 0); i2 < end; i2++) {
    if (i2 === next) {
      newTicks.push(ticks[i2]);
      count++;
      next = Math.round(start + count * spacing);
    }
  }
}
function getEvenSpacing(arr) {
  const len = arr.length;
  let i2, diff;
  if (len < 2) {
    return false;
  }
  for (diff = arr[0], i2 = 1; i2 < len; ++i2) {
    if (arr[i2] - arr[i2 - 1] !== diff) {
      return false;
    }
  }
  return diff;
}
const reverseAlign = (align) => align === "left" ? "right" : align === "right" ? "left" : align;
const offsetFromEdge = (scale, edge, offset) => edge === "top" || edge === "left" ? scale[edge] + offset : scale[edge] - offset;
const getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);
function sample(arr, numItems) {
  const result = [];
  const increment = arr.length / numItems;
  const len = arr.length;
  let i2 = 0;
  for (; i2 < len; i2 += increment) {
    result.push(arr[Math.floor(i2)]);
  }
  return result;
}
function getPixelForGridLine(scale, index2, offsetGridLines) {
  const length = scale.ticks.length;
  const validIndex2 = Math.min(index2, length - 1);
  const start = scale._startPixel;
  const end = scale._endPixel;
  const epsilon = 1e-6;
  let lineValue = scale.getPixelForTick(validIndex2);
  let offset;
  if (offsetGridLines) {
    if (length === 1) {
      offset = Math.max(lineValue - start, end - lineValue);
    } else if (index2 === 0) {
      offset = (scale.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset = (lineValue - scale.getPixelForTick(validIndex2 - 1)) / 2;
    }
    lineValue += validIndex2 < index2 ? offset : -offset;
    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }
  return lineValue;
}
function garbageCollect(caches, length) {
  each(caches, (cache) => {
    const gc = cache.gc;
    const gcLen = gc.length / 2;
    let i2;
    if (gcLen > length) {
      for (i2 = 0; i2 < gcLen; ++i2) {
        delete cache.data[gc[i2]];
      }
      gc.splice(0, gcLen);
    }
  });
}
function getTickMarkLength(options) {
  return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
  if (!options.display) {
    return 0;
  }
  const font = toFont(options.font, fallback);
  const padding = toPadding(options.padding);
  const lines = isArray(options.text) ? options.text.length : 1;
  return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale) {
  return createContext(parent, {
    scale,
    type: "scale"
  });
}
function createTickContext(parent, index2, tick) {
  return createContext(parent, {
    tick,
    index: index2,
    type: "tick"
  });
}
function titleAlign(align, position, reverse) {
  let ret = _toLeftRightCenter(align);
  if (reverse && position !== "right" || !reverse && position === "right") {
    ret = reverseAlign(ret);
  }
  return ret;
}
function titleArgs(scale, offset, position, align) {
  const { top, left, bottom, right, chart } = scale;
  const { chartArea, scales: scales2 } = chart;
  let rotation = 0;
  let maxWidth, titleX, titleY;
  const height = bottom - top;
  const width = right - left;
  if (scale.isHorizontal()) {
    titleX = _alignStartEnd(align, left, right);
    if (isObject(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleY = scales2[positionAxisID].getPixelForValue(value) + height - offset;
    } else if (position === "center") {
      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
    } else {
      titleY = offsetFromEdge(scale, position, offset);
    }
    maxWidth = right - left;
  } else {
    if (isObject(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleX = scales2[positionAxisID].getPixelForValue(value) - width + offset;
    } else if (position === "center") {
      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
    } else {
      titleX = offsetFromEdge(scale, position, offset);
    }
    titleY = _alignStartEnd(align, bottom, top);
    rotation = position === "left" ? -HALF_PI : HALF_PI;
  }
  return {
    titleX,
    titleY,
    maxWidth,
    rotation
  };
}
class Scale extends Element$1 {
  constructor(cfg) {
    super();
    this.id = cfg.id;
    this.type = cfg.type;
    this.options = void 0;
    this.ctx = cfg.ctx;
    this.chart = cfg.chart;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this.maxWidth = void 0;
    this.maxHeight = void 0;
    this.paddingTop = void 0;
    this.paddingBottom = void 0;
    this.paddingLeft = void 0;
    this.paddingRight = void 0;
    this.axis = void 0;
    this.labelRotation = void 0;
    this.min = void 0;
    this.max = void 0;
    this._range = void 0;
    this.ticks = [];
    this._gridLineItems = null;
    this._labelItems = null;
    this._labelSizes = null;
    this._length = 0;
    this._maxLength = 0;
    this._longestTextCache = {};
    this._startPixel = void 0;
    this._endPixel = void 0;
    this._reversePixels = false;
    this._userMax = void 0;
    this._userMin = void 0;
    this._suggestedMax = void 0;
    this._suggestedMin = void 0;
    this._ticksLength = 0;
    this._borderValue = 0;
    this._cache = {};
    this._dataLimitsCached = false;
    this.$context = void 0;
  }
  init(options) {
    this.options = options.setContext(this.getContext());
    this.axis = options.axis;
    this._userMin = this.parse(options.min);
    this._userMax = this.parse(options.max);
    this._suggestedMin = this.parse(options.suggestedMin);
    this._suggestedMax = this.parse(options.suggestedMax);
  }
  parse(raw, index2) {
    return raw;
  }
  getUserBounds() {
    let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
    return {
      min: finiteOrDefault(_userMin, _suggestedMin),
      max: finiteOrDefault(_userMax, _suggestedMax),
      minDefined: isNumberFinite(_userMin),
      maxDefined: isNumberFinite(_userMax)
    };
  }
  getMinMax(canStack) {
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    let range;
    if (minDefined && maxDefined) {
      return {
        min,
        max
      };
    }
    const metas = this.getMatchingVisibleMetas();
    for (let i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
      range = metas[i2].controller.getMinMax(this, canStack);
      if (!minDefined) {
        min = Math.min(min, range.min);
      }
      if (!maxDefined) {
        max = Math.max(max, range.max);
      }
    }
    min = maxDefined && min > max ? max : min;
    max = minDefined && min > max ? min : max;
    return {
      min: finiteOrDefault(min, finiteOrDefault(max, min)),
      max: finiteOrDefault(max, finiteOrDefault(min, max))
    };
  }
  getPadding() {
    return {
      left: this.paddingLeft || 0,
      top: this.paddingTop || 0,
      right: this.paddingRight || 0,
      bottom: this.paddingBottom || 0
    };
  }
  getTicks() {
    return this.ticks;
  }
  getLabels() {
    const data = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
  }
  getLabelItems(chartArea = this.chart.chartArea) {
    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
    return items;
  }
  beforeLayout() {
    this._cache = {};
    this._dataLimitsCached = false;
  }
  beforeUpdate() {
    callback(this.options.beforeUpdate, [
      this
    ]);
  }
  update(maxWidth, maxHeight, margins) {
    const { beginAtZero, grace, ticks: tickOpts } = this.options;
    const sampleSize = tickOpts.sampleSize;
    this.beforeUpdate();
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, margins);
    this.ticks = null;
    this._labelSizes = null;
    this._gridLineItems = null;
    this._labelItems = null;
    this.beforeSetDimensions();
    this.setDimensions();
    this.afterSetDimensions();
    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
    if (!this._dataLimitsCached) {
      this.beforeDataLimits();
      this.determineDataLimits();
      this.afterDataLimits();
      this._range = _addGrace(this, grace, beginAtZero);
      this._dataLimitsCached = true;
    }
    this.beforeBuildTicks();
    this.ticks = this.buildTicks() || [];
    this.afterBuildTicks();
    const samplingEnabled = sampleSize < this.ticks.length;
    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
    this.configure();
    this.beforeCalculateLabelRotation();
    this.calculateLabelRotation();
    this.afterCalculateLabelRotation();
    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
      this.ticks = autoSkip(this, this.ticks);
      this._labelSizes = null;
      this.afterAutoSkip();
    }
    if (samplingEnabled) {
      this._convertTicksToLabels(this.ticks);
    }
    this.beforeFit();
    this.fit();
    this.afterFit();
    this.afterUpdate();
  }
  configure() {
    let reversePixels = this.options.reverse;
    let startPixel, endPixel;
    if (this.isHorizontal()) {
      startPixel = this.left;
      endPixel = this.right;
    } else {
      startPixel = this.top;
      endPixel = this.bottom;
      reversePixels = !reversePixels;
    }
    this._startPixel = startPixel;
    this._endPixel = endPixel;
    this._reversePixels = reversePixels;
    this._length = endPixel - startPixel;
    this._alignToPixels = this.options.alignToPixels;
  }
  afterUpdate() {
    callback(this.options.afterUpdate, [
      this
    ]);
  }
  beforeSetDimensions() {
    callback(this.options.beforeSetDimensions, [
      this
    ]);
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = 0;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = 0;
      this.bottom = this.height;
    }
    this.paddingLeft = 0;
    this.paddingTop = 0;
    this.paddingRight = 0;
    this.paddingBottom = 0;
  }
  afterSetDimensions() {
    callback(this.options.afterSetDimensions, [
      this
    ]);
  }
  _callHooks(name) {
    this.chart.notifyPlugins(name, this.getContext());
    callback(this.options[name], [
      this
    ]);
  }
  beforeDataLimits() {
    this._callHooks("beforeDataLimits");
  }
  determineDataLimits() {
  }
  afterDataLimits() {
    this._callHooks("afterDataLimits");
  }
  beforeBuildTicks() {
    this._callHooks("beforeBuildTicks");
  }
  buildTicks() {
    return [];
  }
  afterBuildTicks() {
    this._callHooks("afterBuildTicks");
  }
  beforeTickToLabelConversion() {
    callback(this.options.beforeTickToLabelConversion, [
      this
    ]);
  }
  generateTickLabels(ticks) {
    const tickOpts = this.options.ticks;
    let i2, ilen, tick;
    for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
      tick = ticks[i2];
      tick.label = callback(tickOpts.callback, [
        tick.value,
        i2,
        ticks
      ], this);
    }
  }
  afterTickToLabelConversion() {
    callback(this.options.afterTickToLabelConversion, [
      this
    ]);
  }
  beforeCalculateLabelRotation() {
    callback(this.options.beforeCalculateLabelRotation, [
      this
    ]);
  }
  calculateLabelRotation() {
    const options = this.options;
    const tickOpts = options.ticks;
    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
    const minRotation = tickOpts.minRotation || 0;
    const maxRotation = tickOpts.maxRotation;
    let labelRotation = minRotation;
    let tickWidth, maxHeight, maxLabelDiagonal;
    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
      this.labelRotation = minRotation;
      return;
    }
    const labelSizes = this._getLabelSizes();
    const maxLabelWidth = labelSizes.widest.width;
    const maxLabelHeight = labelSizes.highest.height;
    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
    if (maxLabelWidth + 6 > tickWidth) {
      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    }
    this.labelRotation = labelRotation;
  }
  afterCalculateLabelRotation() {
    callback(this.options.afterCalculateLabelRotation, [
      this
    ]);
  }
  afterAutoSkip() {
  }
  beforeFit() {
    callback(this.options.beforeFit, [
      this
    ]);
  }
  fit() {
    const minSize = {
      width: 0,
      height: 0
    };
    const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
    const display = this._isVisible();
    const isHorizontal = this.isHorizontal();
    if (display) {
      const titleHeight = getTitleHeight(titleOpts, chart.options.font);
      if (isHorizontal) {
        minSize.width = this.maxWidth;
        minSize.height = getTickMarkLength(gridOpts) + titleHeight;
      } else {
        minSize.height = this.maxHeight;
        minSize.width = getTickMarkLength(gridOpts) + titleHeight;
      }
      if (tickOpts.display && this.ticks.length) {
        const { first, last, widest, highest } = this._getLabelSizes();
        const tickPadding = tickOpts.padding * 2;
        const angleRadians = toRadians(this.labelRotation);
        const cos = Math.cos(angleRadians);
        const sin = Math.sin(angleRadians);
        if (isHorizontal) {
          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
        } else {
          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
        }
        this._calculatePadding(first, last, sin, cos);
      }
    }
    this._handleMargins();
    if (isHorizontal) {
      this.width = this._length = chart.width - this._margins.left - this._margins.right;
      this.height = minSize.height;
    } else {
      this.width = minSize.width;
      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
    }
  }
  _calculatePadding(first, last, sin, cos) {
    const { ticks: { align, padding }, position } = this.options;
    const isRotated = this.labelRotation !== 0;
    const labelsBelowTicks = position !== "top" && this.axis === "x";
    if (this.isHorizontal()) {
      const offsetLeft = this.getPixelForTick(0) - this.left;
      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
      let paddingLeft = 0;
      let paddingRight = 0;
      if (isRotated) {
        if (labelsBelowTicks) {
          paddingLeft = cos * first.width;
          paddingRight = sin * last.height;
        } else {
          paddingLeft = sin * first.height;
          paddingRight = cos * last.width;
        }
      } else if (align === "start") {
        paddingRight = last.width;
      } else if (align === "end") {
        paddingLeft = first.width;
      } else if (align !== "inner") {
        paddingLeft = first.width / 2;
        paddingRight = last.width / 2;
      }
      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
    } else {
      let paddingTop = last.height / 2;
      let paddingBottom = first.height / 2;
      if (align === "start") {
        paddingTop = 0;
        paddingBottom = first.height;
      } else if (align === "end") {
        paddingTop = last.height;
        paddingBottom = 0;
      }
      this.paddingTop = paddingTop + padding;
      this.paddingBottom = paddingBottom + padding;
    }
  }
  _handleMargins() {
    if (this._margins) {
      this._margins.left = Math.max(this.paddingLeft, this._margins.left);
      this._margins.top = Math.max(this.paddingTop, this._margins.top);
      this._margins.right = Math.max(this.paddingRight, this._margins.right);
      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
    }
  }
  afterFit() {
    callback(this.options.afterFit, [
      this
    ]);
  }
  isHorizontal() {
    const { axis, position } = this.options;
    return position === "top" || position === "bottom" || axis === "x";
  }
  isFullSize() {
    return this.options.fullSize;
  }
  _convertTicksToLabels(ticks) {
    this.beforeTickToLabelConversion();
    this.generateTickLabels(ticks);
    let i2, ilen;
    for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
      if (isNullOrUndef(ticks[i2].label)) {
        ticks.splice(i2, 1);
        ilen--;
        i2--;
      }
    }
    this.afterTickToLabelConversion();
  }
  _getLabelSizes() {
    let labelSizes = this._labelSizes;
    if (!labelSizes) {
      const sampleSize = this.options.ticks.sampleSize;
      let ticks = this.ticks;
      if (sampleSize < ticks.length) {
        ticks = sample(ticks, sampleSize);
      }
      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
    }
    return labelSizes;
  }
  _computeLabelSizes(ticks, length, maxTicksLimit) {
    const { ctx, _longestTextCache: caches } = this;
    const widths = [];
    const heights = [];
    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
    let widestLabelSize = 0;
    let highestLabelSize = 0;
    let i2, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
    for (i2 = 0; i2 < length; i2 += increment) {
      label = ticks[i2].label;
      tickFont = this._resolveTickFontOptions(i2);
      ctx.font = fontString = tickFont.string;
      cache = caches[fontString] = caches[fontString] || {
        data: {},
        gc: []
      };
      lineHeight = tickFont.lineHeight;
      width = height = 0;
      if (!isNullOrUndef(label) && !isArray(label)) {
        width = _measureText(ctx, cache.data, cache.gc, width, label);
        height = lineHeight;
      } else if (isArray(label)) {
        for (j = 0, jlen = label.length; j < jlen; ++j) {
          nestedLabel = label[j];
          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
            height += lineHeight;
          }
        }
      }
      widths.push(width);
      heights.push(height);
      widestLabelSize = Math.max(width, widestLabelSize);
      highestLabelSize = Math.max(height, highestLabelSize);
    }
    garbageCollect(caches, length);
    const widest = widths.indexOf(widestLabelSize);
    const highest = heights.indexOf(highestLabelSize);
    const valueAt = (idx) => ({
      width: widths[idx] || 0,
      height: heights[idx] || 0
    });
    return {
      first: valueAt(0),
      last: valueAt(length - 1),
      widest: valueAt(widest),
      highest: valueAt(highest),
      widths,
      heights
    };
  }
  getLabelForValue(value) {
    return value;
  }
  getPixelForValue(value, index2) {
    return NaN;
  }
  getValueForPixel(pixel) {
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getPixelForDecimal(decimal) {
    if (this._reversePixels) {
      decimal = 1 - decimal;
    }
    const pixel = this._startPixel + decimal * this._length;
    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
  }
  getDecimalForPixel(pixel) {
    const decimal = (pixel - this._startPixel) / this._length;
    return this._reversePixels ? 1 - decimal : decimal;
  }
  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }
  getBaseValue() {
    const { min, max } = this;
    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
  }
  getContext(index2) {
    const ticks = this.ticks || [];
    if (index2 >= 0 && index2 < ticks.length) {
      const tick = ticks[index2];
      return tick.$context || (tick.$context = createTickContext(this.getContext(), index2, tick));
    }
    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
  }
  _tickSize() {
    const optionTicks = this.options.ticks;
    const rot = toRadians(this.labelRotation);
    const cos = Math.abs(Math.cos(rot));
    const sin = Math.abs(Math.sin(rot));
    const labelSizes = this._getLabelSizes();
    const padding = optionTicks.autoSkipPadding || 0;
    const w2 = labelSizes ? labelSizes.widest.width + padding : 0;
    const h4 = labelSizes ? labelSizes.highest.height + padding : 0;
    return this.isHorizontal() ? h4 * cos > w2 * sin ? w2 / cos : h4 / sin : h4 * sin < w2 * cos ? h4 / cos : w2 / sin;
  }
  _isVisible() {
    const display = this.options.display;
    if (display !== "auto") {
      return !!display;
    }
    return this.getMatchingVisibleMetas().length > 0;
  }
  _computeGridLineItems(chartArea) {
    const axis = this.axis;
    const chart = this.chart;
    const options = this.options;
    const { grid: grid2, position, border } = options;
    const offset = grid2.offset;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const ticksLength = ticks.length + (offset ? 1 : 0);
    const tl = getTickMarkLength(grid2);
    const items = [];
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = borderOpts.display ? borderOpts.width : 0;
    const axisHalfWidth = axisWidth / 2;
    const alignBorderValue = function(pixel) {
      return _alignPixel(chart, pixel, axisWidth);
    };
    let borderValue, i2, lineValue, alignedLineValue;
    let tx1, ty1, tx2, ty2, x1, y1, x2, y22;
    if (position === "top") {
      borderValue = alignBorderValue(this.bottom);
      ty1 = this.bottom - tl;
      ty2 = borderValue - axisHalfWidth;
      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
      y22 = chartArea.bottom;
    } else if (position === "bottom") {
      borderValue = alignBorderValue(this.top);
      y1 = chartArea.top;
      y22 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
      ty1 = borderValue + axisHalfWidth;
      ty2 = this.top + tl;
    } else if (position === "left") {
      borderValue = alignBorderValue(this.right);
      tx1 = this.right - tl;
      tx2 = borderValue - axisHalfWidth;
      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
      x2 = chartArea.right;
    } else if (position === "right") {
      borderValue = alignBorderValue(this.left);
      x1 = chartArea.left;
      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
      tx1 = borderValue + axisHalfWidth;
      tx2 = this.left + tl;
    } else if (axis === "x") {
      if (position === "center") {
        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      y1 = chartArea.top;
      y22 = chartArea.bottom;
      ty1 = borderValue + axisHalfWidth;
      ty2 = ty1 + tl;
    } else if (axis === "y") {
      if (position === "center") {
        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      tx1 = borderValue - axisHalfWidth;
      tx2 = tx1 - tl;
      x1 = chartArea.left;
      x2 = chartArea.right;
    }
    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
    const step = Math.max(1, Math.ceil(ticksLength / limit));
    for (i2 = 0; i2 < ticksLength; i2 += step) {
      const context = this.getContext(i2);
      const optsAtIndex = grid2.setContext(context);
      const optsAtIndexBorder = border.setContext(context);
      const lineWidth = optsAtIndex.lineWidth;
      const lineColor = optsAtIndex.color;
      const borderDash = optsAtIndexBorder.dash || [];
      const borderDashOffset = optsAtIndexBorder.dashOffset;
      const tickWidth = optsAtIndex.tickWidth;
      const tickColor = optsAtIndex.tickColor;
      const tickBorderDash = optsAtIndex.tickBorderDash || [];
      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
      lineValue = getPixelForGridLine(this, i2, offset);
      if (lineValue === void 0) {
        continue;
      }
      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
      if (isHorizontal) {
        tx1 = tx2 = x1 = x2 = alignedLineValue;
      } else {
        ty1 = ty2 = y1 = y22 = alignedLineValue;
      }
      items.push({
        tx1,
        ty1,
        tx2,
        ty2,
        x1,
        y1,
        x2,
        y2: y22,
        width: lineWidth,
        color: lineColor,
        borderDash,
        borderDashOffset,
        tickWidth,
        tickColor,
        tickBorderDash,
        tickBorderDashOffset
      });
    }
    this._ticksLength = ticksLength;
    this._borderValue = borderValue;
    return items;
  }
  _computeLabelItems(chartArea) {
    const axis = this.axis;
    const options = this.options;
    const { position, ticks: optionTicks } = options;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const { align, crossAlign, padding, mirror } = optionTicks;
    const tl = getTickMarkLength(options.grid);
    const tickAndPadding = tl + padding;
    const hTickAndPadding = mirror ? -padding : tickAndPadding;
    const rotation = -toRadians(this.labelRotation);
    const items = [];
    let i2, ilen, tick, label, x2, y3, textAlign, pixel, font, lineHeight, lineCount, textOffset;
    let textBaseline = "middle";
    if (position === "top") {
      y3 = this.bottom - hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === "bottom") {
      y3 = this.top + hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === "left") {
      const ret = this._getYAxisLabelAlignment(tl);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (position === "right") {
      const ret = this._getYAxisLabelAlignment(tl);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (axis === "x") {
      if (position === "center") {
        y3 = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        y3 = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
      }
      textAlign = this._getXAxisLabelAlignment();
    } else if (axis === "y") {
      if (position === "center") {
        x2 = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        x2 = this.chart.scales[positionAxisID].getPixelForValue(value);
      }
      textAlign = this._getYAxisLabelAlignment(tl).textAlign;
    }
    if (axis === "y") {
      if (align === "start") {
        textBaseline = "top";
      } else if (align === "end") {
        textBaseline = "bottom";
      }
    }
    const labelSizes = this._getLabelSizes();
    for (i2 = 0, ilen = ticks.length; i2 < ilen; ++i2) {
      tick = ticks[i2];
      label = tick.label;
      const optsAtIndex = optionTicks.setContext(this.getContext(i2));
      pixel = this.getPixelForTick(i2) + optionTicks.labelOffset;
      font = this._resolveTickFontOptions(i2);
      lineHeight = font.lineHeight;
      lineCount = isArray(label) ? label.length : 1;
      const halfCount = lineCount / 2;
      const color2 = optsAtIndex.color;
      const strokeColor = optsAtIndex.textStrokeColor;
      const strokeWidth = optsAtIndex.textStrokeWidth;
      let tickTextAlign = textAlign;
      if (isHorizontal) {
        x2 = pixel;
        if (textAlign === "inner") {
          if (i2 === ilen - 1) {
            tickTextAlign = !this.options.reverse ? "right" : "left";
          } else if (i2 === 0) {
            tickTextAlign = !this.options.reverse ? "left" : "right";
          } else {
            tickTextAlign = "center";
          }
        }
        if (position === "top") {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = -lineCount * lineHeight + lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
          } else {
            textOffset = -labelSizes.highest.height + lineHeight / 2;
          }
        } else {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
          } else {
            textOffset = labelSizes.highest.height - lineCount * lineHeight;
          }
        }
        if (mirror) {
          textOffset *= -1;
        }
        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
          x2 += lineHeight / 2 * Math.sin(rotation);
        }
      } else {
        y3 = pixel;
        textOffset = (1 - lineCount) * lineHeight / 2;
      }
      let backdrop;
      if (optsAtIndex.showLabelBackdrop) {
        const labelPadding = toPadding(optsAtIndex.backdropPadding);
        const height = labelSizes.heights[i2];
        const width = labelSizes.widths[i2];
        let top = textOffset - labelPadding.top;
        let left = 0 - labelPadding.left;
        switch (textBaseline) {
          case "middle":
            top -= height / 2;
            break;
          case "bottom":
            top -= height;
            break;
        }
        switch (textAlign) {
          case "center":
            left -= width / 2;
            break;
          case "right":
            left -= width;
            break;
        }
        backdrop = {
          left,
          top,
          width: width + labelPadding.width,
          height: height + labelPadding.height,
          color: optsAtIndex.backdropColor
        };
      }
      items.push({
        label,
        font,
        textOffset,
        options: {
          rotation,
          color: color2,
          strokeColor,
          strokeWidth,
          textAlign: tickTextAlign,
          textBaseline,
          translation: [
            x2,
            y3
          ],
          backdrop
        }
      });
    }
    return items;
  }
  _getXAxisLabelAlignment() {
    const { position, ticks } = this.options;
    const rotation = -toRadians(this.labelRotation);
    if (rotation) {
      return position === "top" ? "left" : "right";
    }
    let align = "center";
    if (ticks.align === "start") {
      align = "left";
    } else if (ticks.align === "end") {
      align = "right";
    } else if (ticks.align === "inner") {
      align = "inner";
    }
    return align;
  }
  _getYAxisLabelAlignment(tl) {
    const { position, ticks: { crossAlign, mirror, padding } } = this.options;
    const labelSizes = this._getLabelSizes();
    const tickAndPadding = tl + padding;
    const widest = labelSizes.widest.width;
    let textAlign;
    let x2;
    if (position === "left") {
      if (mirror) {
        x2 = this.right + padding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 += widest;
        }
      } else {
        x2 = this.right - tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 = this.left;
        }
      }
    } else if (position === "right") {
      if (mirror) {
        x2 = this.left + padding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 -= widest;
        }
      } else {
        x2 = this.left + tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 = this.right;
        }
      }
    } else {
      textAlign = "right";
    }
    return {
      textAlign,
      x: x2
    };
  }
  _computeLabelArea() {
    if (this.options.ticks.mirror) {
      return;
    }
    const chart = this.chart;
    const position = this.options.position;
    if (position === "left" || position === "right") {
      return {
        top: 0,
        left: this.left,
        bottom: chart.height,
        right: this.right
      };
    }
    if (position === "top" || position === "bottom") {
      return {
        top: this.top,
        left: 0,
        bottom: this.bottom,
        right: chart.width
      };
    }
  }
  drawBackground() {
    const { ctx, options: { backgroundColor }, left, top, width, height } = this;
    if (backgroundColor) {
      ctx.save();
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(left, top, width, height);
      ctx.restore();
    }
  }
  getLineWidthForValue(value) {
    const grid2 = this.options.grid;
    if (!this._isVisible() || !grid2.display) {
      return 0;
    }
    const ticks = this.ticks;
    const index2 = ticks.findIndex((t2) => t2.value === value);
    if (index2 >= 0) {
      const opts = grid2.setContext(this.getContext(index2));
      return opts.lineWidth;
    }
    return 0;
  }
  drawGrid(chartArea) {
    const grid2 = this.options.grid;
    const ctx = this.ctx;
    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
    let i2, ilen;
    const drawLine = (p1, p2, style) => {
      if (!style.width || !style.color) {
        return;
      }
      ctx.save();
      ctx.lineWidth = style.width;
      ctx.strokeStyle = style.color;
      ctx.setLineDash(style.borderDash || []);
      ctx.lineDashOffset = style.borderDashOffset;
      ctx.beginPath();
      ctx.moveTo(p1.x, p1.y);
      ctx.lineTo(p2.x, p2.y);
      ctx.stroke();
      ctx.restore();
    };
    if (grid2.display) {
      for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
        const item = items[i2];
        if (grid2.drawOnChartArea) {
          drawLine({
            x: item.x1,
            y: item.y1
          }, {
            x: item.x2,
            y: item.y2
          }, item);
        }
        if (grid2.drawTicks) {
          drawLine({
            x: item.tx1,
            y: item.ty1
          }, {
            x: item.tx2,
            y: item.ty2
          }, {
            color: item.tickColor,
            width: item.tickWidth,
            borderDash: item.tickBorderDash,
            borderDashOffset: item.tickBorderDashOffset
          });
        }
      }
    }
  }
  drawBorder() {
    const { chart, ctx, options: { border, grid: grid2 } } = this;
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = border.display ? borderOpts.width : 0;
    if (!axisWidth) {
      return;
    }
    const lastLineWidth = grid2.setContext(this.getContext(0)).lineWidth;
    const borderValue = this._borderValue;
    let x1, x2, y1, y22;
    if (this.isHorizontal()) {
      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
      y1 = y22 = borderValue;
    } else {
      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
      y22 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
      x1 = x2 = borderValue;
    }
    ctx.save();
    ctx.lineWidth = borderOpts.width;
    ctx.strokeStyle = borderOpts.color;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y22);
    ctx.stroke();
    ctx.restore();
  }
  drawLabels(chartArea) {
    const optionTicks = this.options.ticks;
    if (!optionTicks.display) {
      return;
    }
    const ctx = this.ctx;
    const area = this._computeLabelArea();
    if (area) {
      clipArea(ctx, area);
    }
    const items = this.getLabelItems(chartArea);
    for (const item of items) {
      const renderTextOptions = item.options;
      const tickFont = item.font;
      const label = item.label;
      const y3 = item.textOffset;
      renderText(ctx, label, 0, y3, tickFont, renderTextOptions);
    }
    if (area) {
      unclipArea(ctx);
    }
  }
  drawTitle() {
    const { ctx, options: { position, title, reverse } } = this;
    if (!title.display) {
      return;
    }
    const font = toFont(title.font);
    const padding = toPadding(title.padding);
    const align = title.align;
    let offset = font.lineHeight / 2;
    if (position === "bottom" || position === "center" || isObject(position)) {
      offset += padding.bottom;
      if (isArray(title.text)) {
        offset += font.lineHeight * (title.text.length - 1);
      }
    } else {
      offset += padding.top;
    }
    const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position, align);
    renderText(ctx, title.text, 0, 0, font, {
      color: title.color,
      maxWidth,
      rotation,
      textAlign: titleAlign(align, position, reverse),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
  draw(chartArea) {
    if (!this._isVisible()) {
      return;
    }
    this.drawBackground();
    this.drawGrid(chartArea);
    this.drawBorder();
    this.drawTitle();
    this.drawLabels(chartArea);
  }
  _layers() {
    const opts = this.options;
    const tz = opts.ticks && opts.ticks.z || 0;
    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
    const bz = valueOrDefault(opts.border && opts.border.z, 0);
    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
      return [
        {
          z: tz,
          draw: (chartArea) => {
            this.draw(chartArea);
          }
        }
      ];
    }
    return [
      {
        z: gz,
        draw: (chartArea) => {
          this.drawBackground();
          this.drawGrid(chartArea);
          this.drawTitle();
        }
      },
      {
        z: bz,
        draw: () => {
          this.drawBorder();
        }
      },
      {
        z: tz,
        draw: (chartArea) => {
          this.drawLabels(chartArea);
        }
      }
    ];
  }
  getMatchingVisibleMetas(type) {
    const metas = this.chart.getSortedVisibleDatasetMetas();
    const axisID = this.axis + "AxisID";
    const result = [];
    let i2, ilen;
    for (i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
      const meta = metas[i2];
      if (meta[axisID] === this.id && (!type || meta.type === type)) {
        result.push(meta);
      }
    }
    return result;
  }
  _resolveTickFontOptions(index2) {
    const opts = this.options.ticks.setContext(this.getContext(index2));
    return toFont(opts.font);
  }
  _maxDigits() {
    const fontSize = this._resolveTickFontOptions(0).lineHeight;
    return (this.isHorizontal() ? this.width : this.height) / fontSize;
  }
}
class TypedRegistry {
  constructor(type, scope, override) {
    this.type = type;
    this.scope = scope;
    this.override = override;
    this.items = /* @__PURE__ */ Object.create(null);
  }
  isForType(type) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
  }
  register(item) {
    const proto = Object.getPrototypeOf(item);
    let parentScope;
    if (isIChartComponent(proto)) {
      parentScope = this.register(proto);
    }
    const items = this.items;
    const id = item.id;
    const scope = this.scope + "." + id;
    if (!id) {
      throw new Error("class does not have id: " + item);
    }
    if (id in items) {
      return scope;
    }
    items[id] = item;
    registerDefaults(item, scope, parentScope);
    if (this.override) {
      defaults.override(item.id, item.overrides);
    }
    return scope;
  }
  get(id) {
    return this.items[id];
  }
  unregister(item) {
    const items = this.items;
    const id = item.id;
    const scope = this.scope;
    if (id in items) {
      delete items[id];
    }
    if (scope && id in defaults[scope]) {
      delete defaults[scope][id];
      if (this.override) {
        delete overrides[id];
      }
    }
  }
}
function registerDefaults(item, scope, parentScope) {
  const itemDefaults = merge(/* @__PURE__ */ Object.create(null), [
    parentScope ? defaults.get(parentScope) : {},
    defaults.get(scope),
    item.defaults
  ]);
  defaults.set(scope, itemDefaults);
  if (item.defaultRoutes) {
    routeDefaults(scope, item.defaultRoutes);
  }
  if (item.descriptors) {
    defaults.describe(scope, item.descriptors);
  }
}
function routeDefaults(scope, routes) {
  Object.keys(routes).forEach((property) => {
    const propertyParts = property.split(".");
    const sourceName = propertyParts.pop();
    const sourceScope = [
      scope
    ].concat(propertyParts).join(".");
    const parts = routes[property].split(".");
    const targetName = parts.pop();
    const targetScope = parts.join(".");
    defaults.route(sourceScope, sourceName, targetScope, targetName);
  });
}
function isIChartComponent(proto) {
  return "id" in proto && "defaults" in proto;
}
class Registry {
  constructor() {
    this.controllers = new TypedRegistry(DatasetController, "datasets", true);
    this.elements = new TypedRegistry(Element$1, "elements");
    this.plugins = new TypedRegistry(Object, "plugins");
    this.scales = new TypedRegistry(Scale, "scales");
    this._typedRegistries = [
      this.controllers,
      this.scales,
      this.elements
    ];
  }
  add(...args) {
    this._each("register", args);
  }
  remove(...args) {
    this._each("unregister", args);
  }
  addControllers(...args) {
    this._each("register", args, this.controllers);
  }
  addElements(...args) {
    this._each("register", args, this.elements);
  }
  addPlugins(...args) {
    this._each("register", args, this.plugins);
  }
  addScales(...args) {
    this._each("register", args, this.scales);
  }
  getController(id) {
    return this._get(id, this.controllers, "controller");
  }
  getElement(id) {
    return this._get(id, this.elements, "element");
  }
  getPlugin(id) {
    return this._get(id, this.plugins, "plugin");
  }
  getScale(id) {
    return this._get(id, this.scales, "scale");
  }
  removeControllers(...args) {
    this._each("unregister", args, this.controllers);
  }
  removeElements(...args) {
    this._each("unregister", args, this.elements);
  }
  removePlugins(...args) {
    this._each("unregister", args, this.plugins);
  }
  removeScales(...args) {
    this._each("unregister", args, this.scales);
  }
  _each(method, args, typedRegistry) {
    [
      ...args
    ].forEach((arg) => {
      const reg = typedRegistry || this._getRegistryForType(arg);
      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
        this._exec(method, reg, arg);
      } else {
        each(arg, (item) => {
          const itemReg = typedRegistry || this._getRegistryForType(item);
          this._exec(method, itemReg, item);
        });
      }
    });
  }
  _exec(method, registry2, component) {
    const camelMethod = _capitalize(method);
    callback(component["before" + camelMethod], [], component);
    registry2[method](component);
    callback(component["after" + camelMethod], [], component);
  }
  _getRegistryForType(type) {
    for (let i2 = 0; i2 < this._typedRegistries.length; i2++) {
      const reg = this._typedRegistries[i2];
      if (reg.isForType(type)) {
        return reg;
      }
    }
    return this.plugins;
  }
  _get(id, typedRegistry, type) {
    const item = typedRegistry.get(id);
    if (item === void 0) {
      throw new Error('"' + id + '" is not a registered ' + type + ".");
    }
    return item;
  }
}
var registry = /* @__PURE__ */ new Registry();
class PluginService {
  constructor() {
    this._init = [];
  }
  notify(chart, hook, args, filter) {
    if (hook === "beforeInit") {
      this._init = this._createDescriptors(chart, true);
      this._notify(this._init, chart, "install");
    }
    const descriptors2 = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
    const result = this._notify(descriptors2, chart, hook, args);
    if (hook === "afterDestroy") {
      this._notify(descriptors2, chart, "stop");
      this._notify(this._init, chart, "uninstall");
    }
    return result;
  }
  _notify(descriptors2, chart, hook, args) {
    args = args || {};
    for (const descriptor of descriptors2) {
      const plugin = descriptor.plugin;
      const method = plugin[hook];
      const params = [
        chart,
        args,
        descriptor.options
      ];
      if (callback(method, params, plugin) === false && args.cancelable) {
        return false;
      }
    }
    return true;
  }
  invalidate() {
    if (!isNullOrUndef(this._cache)) {
      this._oldCache = this._cache;
      this._cache = void 0;
    }
  }
  _descriptors(chart) {
    if (this._cache) {
      return this._cache;
    }
    const descriptors2 = this._cache = this._createDescriptors(chart);
    this._notifyStateChanges(chart);
    return descriptors2;
  }
  _createDescriptors(chart, all) {
    const config = chart && chart.config;
    const options = valueOrDefault(config.options && config.options.plugins, {});
    const plugins2 = allPlugins(config);
    return options === false && !all ? [] : createDescriptors(chart, plugins2, options, all);
  }
  _notifyStateChanges(chart) {
    const previousDescriptors = this._oldCache || [];
    const descriptors2 = this._cache;
    const diff = (a3, b2) => a3.filter((x2) => !b2.some((y3) => x2.plugin.id === y3.plugin.id));
    this._notify(diff(previousDescriptors, descriptors2), chart, "stop");
    this._notify(diff(descriptors2, previousDescriptors), chart, "start");
  }
}
function allPlugins(config) {
  const localIds = {};
  const plugins2 = [];
  const keys = Object.keys(registry.plugins.items);
  for (let i2 = 0; i2 < keys.length; i2++) {
    plugins2.push(registry.getPlugin(keys[i2]));
  }
  const local = config.plugins || [];
  for (let i2 = 0; i2 < local.length; i2++) {
    const plugin = local[i2];
    if (plugins2.indexOf(plugin) === -1) {
      plugins2.push(plugin);
      localIds[plugin.id] = true;
    }
  }
  return {
    plugins: plugins2,
    localIds
  };
}
function getOpts(options, all) {
  if (!all && options === false) {
    return null;
  }
  if (options === true) {
    return {};
  }
  return options;
}
function createDescriptors(chart, { plugins: plugins2, localIds }, options, all) {
  const result = [];
  const context = chart.getContext();
  for (const plugin of plugins2) {
    const id = plugin.id;
    const opts = getOpts(options[id], all);
    if (opts === null) {
      continue;
    }
    result.push({
      plugin,
      options: pluginOpts(chart.config, {
        plugin,
        local: localIds[id]
      }, opts, context)
    });
  }
  return result;
}
function pluginOpts(config, { plugin, local }, opts, context) {
  const keys = config.pluginScopeKeys(plugin);
  const scopes2 = config.getOptionScopes(opts, keys);
  if (local && plugin.defaults) {
    scopes2.push(plugin.defaults);
  }
  return config.createResolver(scopes2, context, [
    ""
  ], {
    scriptable: false,
    indexable: false,
    allKeys: true
  });
}
function getIndexAxis(type, options) {
  const datasetDefaults = defaults.datasets[type] || {};
  const datasetOptions = (options.datasets || {})[type] || {};
  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
}
function getAxisFromDefaultScaleID(id, indexAxis) {
  let axis = id;
  if (id === "_index_") {
    axis = indexAxis;
  } else if (id === "_value_") {
    axis = indexAxis === "x" ? "y" : "x";
  }
  return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
  return axis === indexAxis ? "_index_" : "_value_";
}
function idMatchesAxis(id) {
  if (id === "x" || id === "y" || id === "r") {
    return id;
  }
}
function axisFromPosition(position) {
  if (position === "top" || position === "bottom") {
    return "x";
  }
  if (position === "left" || position === "right") {
    return "y";
  }
}
function determineAxis(id, ...scaleOptions) {
  if (idMatchesAxis(id)) {
    return id;
  }
  for (const opts of scaleOptions) {
    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());
    if (axis) {
      return axis;
    }
  }
  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);
}
function getAxisFromDataset(id, axis, dataset) {
  if (dataset[axis + "AxisID"] === id) {
    return {
      axis
    };
  }
}
function retrieveAxisFromDatasets(id, config) {
  if (config.data && config.data.datasets) {
    const boundDs = config.data.datasets.filter((d3) => d3.xAxisID === id || d3.yAxisID === id);
    if (boundDs.length) {
      return getAxisFromDataset(id, "x", boundDs[0]) || getAxisFromDataset(id, "y", boundDs[0]);
    }
  }
  return {};
}
function mergeScaleConfig(config, options) {
  const chartDefaults = overrides[config.type] || {
    scales: {}
  };
  const configScales = options.scales || {};
  const chartIndexAxis = getIndexAxis(config.type, options);
  const scales2 = /* @__PURE__ */ Object.create(null);
  Object.keys(configScales).forEach((id) => {
    const scaleConf = configScales[id];
    if (!isObject(scaleConf)) {
      return console.error(`Invalid scale configuration for scale: ${id}`);
    }
    if (scaleConf._proxy) {
      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
    }
    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);
    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
    const defaultScaleOptions = chartDefaults.scales || {};
    scales2[id] = mergeIf(/* @__PURE__ */ Object.create(null), [
      {
        axis
      },
      scaleConf,
      defaultScaleOptions[axis],
      defaultScaleOptions[defaultId]
    ]);
  });
  config.data.datasets.forEach((dataset) => {
    const type = dataset.type || config.type;
    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
    const datasetDefaults = overrides[type] || {};
    const defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach((defaultID) => {
      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
      const id = dataset[axis + "AxisID"] || axis;
      scales2[id] = scales2[id] || /* @__PURE__ */ Object.create(null);
      mergeIf(scales2[id], [
        {
          axis
        },
        configScales[id],
        defaultScaleOptions[defaultID]
      ]);
    });
  });
  Object.keys(scales2).forEach((key) => {
    const scale = scales2[key];
    mergeIf(scale, [
      defaults.scales[scale.type],
      defaults.scale
    ]);
  });
  return scales2;
}
function initOptions(config) {
  const options = config.options || (config.options = {});
  options.plugins = valueOrDefault(options.plugins, {});
  options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
  data = data || {};
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  return data;
}
function initConfig(config) {
  config = config || {};
  config.data = initData(config.data);
  initOptions(config);
  return config;
}
const keyCache = /* @__PURE__ */ new Map();
const keysCached = /* @__PURE__ */ new Set();
function cachedKeys(cacheKey, generate) {
  let keys = keyCache.get(cacheKey);
  if (!keys) {
    keys = generate();
    keyCache.set(cacheKey, keys);
    keysCached.add(keys);
  }
  return keys;
}
const addIfFound = (set2, obj, key) => {
  const opts = resolveObjectKey(obj, key);
  if (opts !== void 0) {
    set2.add(opts);
  }
};
class Config {
  constructor(config) {
    this._config = initConfig(config);
    this._scopeCache = /* @__PURE__ */ new Map();
    this._resolverCache = /* @__PURE__ */ new Map();
  }
  get platform() {
    return this._config.platform;
  }
  get type() {
    return this._config.type;
  }
  set type(type) {
    this._config.type = type;
  }
  get data() {
    return this._config.data;
  }
  set data(data) {
    this._config.data = initData(data);
  }
  get options() {
    return this._config.options;
  }
  set options(options) {
    this._config.options = options;
  }
  get plugins() {
    return this._config.plugins;
  }
  update() {
    const config = this._config;
    this.clearCache();
    initOptions(config);
  }
  clearCache() {
    this._scopeCache.clear();
    this._resolverCache.clear();
  }
  datasetScopeKeys(datasetType) {
    return cachedKeys(datasetType, () => [
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetAnimationScopeKeys(datasetType, transition) {
    return cachedKeys(`${datasetType}.transition.${transition}`, () => [
      [
        `datasets.${datasetType}.transitions.${transition}`,
        `transitions.${transition}`
      ],
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetElementScopeKeys(datasetType, elementType) {
    return cachedKeys(`${datasetType}-${elementType}`, () => [
      [
        `datasets.${datasetType}.elements.${elementType}`,
        `datasets.${datasetType}`,
        `elements.${elementType}`,
        ""
      ]
    ]);
  }
  pluginScopeKeys(plugin) {
    const id = plugin.id;
    const type = this.type;
    return cachedKeys(`${type}-plugin-${id}`, () => [
      [
        `plugins.${id}`,
        ...plugin.additionalOptionScopes || []
      ]
    ]);
  }
  _cachedScopes(mainScope, resetCache) {
    const _scopeCache = this._scopeCache;
    let cache = _scopeCache.get(mainScope);
    if (!cache || resetCache) {
      cache = /* @__PURE__ */ new Map();
      _scopeCache.set(mainScope, cache);
    }
    return cache;
  }
  getOptionScopes(mainScope, keyLists, resetCache) {
    const { options, type } = this;
    const cache = this._cachedScopes(mainScope, resetCache);
    const cached = cache.get(keyLists);
    if (cached) {
      return cached;
    }
    const scopes2 = /* @__PURE__ */ new Set();
    keyLists.forEach((keys) => {
      if (mainScope) {
        scopes2.add(mainScope);
        keys.forEach((key) => addIfFound(scopes2, mainScope, key));
      }
      keys.forEach((key) => addIfFound(scopes2, options, key));
      keys.forEach((key) => addIfFound(scopes2, overrides[type] || {}, key));
      keys.forEach((key) => addIfFound(scopes2, defaults, key));
      keys.forEach((key) => addIfFound(scopes2, descriptors, key));
    });
    const array = Array.from(scopes2);
    if (array.length === 0) {
      array.push(/* @__PURE__ */ Object.create(null));
    }
    if (keysCached.has(keyLists)) {
      cache.set(keyLists, array);
    }
    return array;
  }
  chartOptionScopes() {
    const { options, type } = this;
    return [
      options,
      overrides[type] || {},
      defaults.datasets[type] || {},
      {
        type
      },
      defaults,
      descriptors
    ];
  }
  resolveNamedOptions(scopes2, names2, context, prefixes = [
    ""
  ]) {
    const result = {
      $shared: true
    };
    const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes2, prefixes);
    let options = resolver;
    if (needContext(resolver, names2)) {
      result.$shared = false;
      context = isFunction(context) ? context() : context;
      const subResolver = this.createResolver(scopes2, context, subPrefixes);
      options = _attachContext(resolver, context, subResolver);
    }
    for (const prop of names2) {
      result[prop] = options[prop];
    }
    return result;
  }
  createResolver(scopes2, context, prefixes = [
    ""
  ], descriptorDefaults) {
    const { resolver } = getResolver(this._resolverCache, scopes2, prefixes);
    return isObject(context) ? _attachContext(resolver, context, void 0, descriptorDefaults) : resolver;
  }
}
function getResolver(resolverCache, scopes2, prefixes) {
  let cache = resolverCache.get(scopes2);
  if (!cache) {
    cache = /* @__PURE__ */ new Map();
    resolverCache.set(scopes2, cache);
  }
  const cacheKey = prefixes.join();
  let cached = cache.get(cacheKey);
  if (!cached) {
    const resolver = _createResolver(scopes2, prefixes);
    cached = {
      resolver,
      subPrefixes: prefixes.filter((p) => !p.toLowerCase().includes("hover"))
    };
    cache.set(cacheKey, cached);
  }
  return cached;
}
const hasFunction = (value) => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);
function needContext(proxy, names2) {
  const { isScriptable, isIndexable } = _descriptors(proxy);
  for (const prop of names2) {
    const scriptable = isScriptable(prop);
    const indexable = isIndexable(prop);
    const value = (indexable || scriptable) && proxy[prop];
    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {
      return true;
    }
  }
  return false;
}
var version = "4.3.0";
const KNOWN_POSITIONS = [
  "top",
  "bottom",
  "left",
  "right",
  "chartArea"
];
function positionIsHorizontal(position, axis) {
  return position === "top" || position === "bottom" || KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
}
function compare2Level(l1, l2) {
  return function(a3, b2) {
    return a3[l1] === b2[l1] ? a3[l2] - b2[l2] : a3[l1] - b2[l1];
  };
}
function onAnimationsComplete(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  chart.notifyPlugins("afterRender");
  callback(animationOptions && animationOptions.onComplete, [
    context
  ], chart);
}
function onAnimationProgress(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  callback(animationOptions && animationOptions.onProgress, [
    context
  ], chart);
}
function getCanvas(item) {
  if (_isDomSupported() && typeof item === "string") {
    item = document.getElementById(item);
  } else if (item && item.length) {
    item = item[0];
  }
  if (item && item.canvas) {
    item = item.canvas;
  }
  return item;
}
const instances = {};
const getChart = (key) => {
  const canvas = getCanvas(key);
  return Object.values(instances).filter((c2) => c2.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
  const keys = Object.keys(obj);
  for (const key of keys) {
    const intKey = +key;
    if (intKey >= start) {
      const value = obj[key];
      delete obj[key];
      if (move > 0 || intKey > start) {
        obj[intKey + move] = value;
      }
    }
  }
}
function determineLastEvent(e2, lastEvent, inChartArea, isClick) {
  if (!inChartArea || e2.type === "mouseout") {
    return null;
  }
  if (isClick) {
    return lastEvent;
  }
  return e2;
}
function getDatasetArea(meta) {
  const { xScale, yScale } = meta;
  if (xScale && yScale) {
    return {
      left: xScale.left,
      right: xScale.right,
      top: yScale.top,
      bottom: yScale.bottom
    };
  }
}
let Chart$1 = (_b = class {
  static register(...items) {
    registry.add(...items);
    invalidatePlugins();
  }
  static unregister(...items) {
    registry.remove(...items);
    invalidatePlugins();
  }
  constructor(item, userConfig) {
    const config = this.config = new Config(userConfig);
    const initialCanvas = getCanvas(item);
    const existingChart = getChart(initialCanvas);
    if (existingChart) {
      throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "' must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused.");
    }
    const options = config.createResolver(config.chartOptionScopes(), this.getContext());
    this.platform = new (config.platform || _detectPlatform(initialCanvas))();
    this.platform.updateConfig(config);
    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
    const canvas = context && context.canvas;
    const height = canvas && canvas.height;
    const width = canvas && canvas.width;
    this.id = uid();
    this.ctx = context;
    this.canvas = canvas;
    this.width = width;
    this.height = height;
    this._options = options;
    this._aspectRatio = this.aspectRatio;
    this._layers = [];
    this._metasets = [];
    this._stacks = void 0;
    this.boxes = [];
    this.currentDevicePixelRatio = void 0;
    this.chartArea = void 0;
    this._active = [];
    this._lastEvent = void 0;
    this._listeners = {};
    this._responsiveListeners = void 0;
    this._sortedMetasets = [];
    this.scales = {};
    this._plugins = new PluginService();
    this.$proxies = {};
    this._hiddenIndices = {};
    this.attached = false;
    this._animationsDisabled = void 0;
    this.$context = void 0;
    this._doResize = debounce((mode) => this.update(mode), options.resizeDelay || 0);
    this._dataChanges = [];
    instances[this.id] = this;
    if (!context || !canvas) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
    animator.listen(this, "complete", onAnimationsComplete);
    animator.listen(this, "progress", onAnimationProgress);
    this._initialize();
    if (this.attached) {
      this.update();
    }
  }
  get aspectRatio() {
    const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;
    if (!isNullOrUndef(aspectRatio)) {
      return aspectRatio;
    }
    if (maintainAspectRatio && _aspectRatio) {
      return _aspectRatio;
    }
    return height ? width / height : null;
  }
  get data() {
    return this.config.data;
  }
  set data(data) {
    this.config.data = data;
  }
  get options() {
    return this._options;
  }
  set options(options) {
    this.config.options = options;
  }
  get registry() {
    return registry;
  }
  _initialize() {
    this.notifyPlugins("beforeInit");
    if (this.options.responsive) {
      this.resize();
    } else {
      retinaScale(this, this.options.devicePixelRatio);
    }
    this.bindEvents();
    this.notifyPlugins("afterInit");
    return this;
  }
  clear() {
    clearCanvas(this.canvas, this.ctx);
    return this;
  }
  stop() {
    animator.stop(this);
    return this;
  }
  resize(width, height) {
    if (!animator.running(this)) {
      this._resize(width, height);
    } else {
      this._resizeBeforeDraw = {
        width,
        height
      };
    }
  }
  _resize(width, height) {
    const options = this.options;
    const canvas = this.canvas;
    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
    const mode = this.width ? "resize" : "attach";
    this.width = newSize.width;
    this.height = newSize.height;
    this._aspectRatio = this.aspectRatio;
    if (!retinaScale(this, newRatio, true)) {
      return;
    }
    this.notifyPlugins("resize", {
      size: newSize
    });
    callback(options.onResize, [
      this,
      newSize
    ], this);
    if (this.attached) {
      if (this._doResize(mode)) {
        this.render();
      }
    }
  }
  ensureScalesHaveIDs() {
    const options = this.options;
    const scalesOptions = options.scales || {};
    each(scalesOptions, (axisOptions, axisID) => {
      axisOptions.id = axisID;
    });
  }
  buildOrUpdateScales() {
    const options = this.options;
    const scaleOpts = options.scales;
    const scales2 = this.scales;
    const updated = Object.keys(scales2).reduce((obj, id) => {
      obj[id] = false;
      return obj;
    }, {});
    let items = [];
    if (scaleOpts) {
      items = items.concat(Object.keys(scaleOpts).map((id) => {
        const scaleOptions = scaleOpts[id];
        const axis = determineAxis(id, scaleOptions);
        const isRadial = axis === "r";
        const isHorizontal = axis === "x";
        return {
          options: scaleOptions,
          dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
          dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
        };
      }));
    }
    each(items, (item) => {
      const scaleOptions = item.options;
      const id = scaleOptions.id;
      const axis = determineAxis(id, scaleOptions);
      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
      if (scaleOptions.position === void 0 || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
        scaleOptions.position = item.dposition;
      }
      updated[id] = true;
      let scale = null;
      if (id in scales2 && scales2[id].type === scaleType) {
        scale = scales2[id];
      } else {
        const scaleClass = registry.getScale(scaleType);
        scale = new scaleClass({
          id,
          type: scaleType,
          ctx: this.ctx,
          chart: this
        });
        scales2[scale.id] = scale;
      }
      scale.init(scaleOptions, options);
    });
    each(updated, (hasUpdated, id) => {
      if (!hasUpdated) {
        delete scales2[id];
      }
    });
    each(scales2, (scale) => {
      layouts.configure(this, scale, scale.options);
      layouts.addBox(this, scale);
    });
  }
  _updateMetasets() {
    const metasets = this._metasets;
    const numData = this.data.datasets.length;
    const numMeta = metasets.length;
    metasets.sort((a3, b2) => a3.index - b2.index);
    if (numMeta > numData) {
      for (let i2 = numData; i2 < numMeta; ++i2) {
        this._destroyDatasetMeta(i2);
      }
      metasets.splice(numData, numMeta - numData);
    }
    this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
  }
  _removeUnreferencedMetasets() {
    const { _metasets: metasets, data: { datasets } } = this;
    if (metasets.length > datasets.length) {
      delete this._stacks;
    }
    metasets.forEach((meta, index2) => {
      if (datasets.filter((x2) => x2 === meta._dataset).length === 0) {
        this._destroyDatasetMeta(index2);
      }
    });
  }
  buildOrUpdateControllers() {
    const newControllers = [];
    const datasets = this.data.datasets;
    let i2, ilen;
    this._removeUnreferencedMetasets();
    for (i2 = 0, ilen = datasets.length; i2 < ilen; i2++) {
      const dataset = datasets[i2];
      let meta = this.getDatasetMeta(i2);
      const type = dataset.type || this.config.type;
      if (meta.type && meta.type !== type) {
        this._destroyDatasetMeta(i2);
        meta = this.getDatasetMeta(i2);
      }
      meta.type = type;
      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
      meta.order = dataset.order || 0;
      meta.index = i2;
      meta.label = "" + dataset.label;
      meta.visible = this.isDatasetVisible(i2);
      if (meta.controller) {
        meta.controller.updateIndex(i2);
        meta.controller.linkScales();
      } else {
        const ControllerClass = registry.getController(type);
        const { datasetElementType, dataElementType } = defaults.datasets[type];
        Object.assign(ControllerClass, {
          dataElementType: registry.getElement(dataElementType),
          datasetElementType: datasetElementType && registry.getElement(datasetElementType)
        });
        meta.controller = new ControllerClass(this, i2);
        newControllers.push(meta.controller);
      }
    }
    this._updateMetasets();
    return newControllers;
  }
  _resetElements() {
    each(this.data.datasets, (dataset, datasetIndex) => {
      this.getDatasetMeta(datasetIndex).controller.reset();
    }, this);
  }
  reset() {
    this._resetElements();
    this.notifyPlugins("reset");
  }
  update(mode) {
    const config = this.config;
    config.update();
    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
    const animsDisabled = this._animationsDisabled = !options.animation;
    this._updateScales();
    this._checkEventBindings();
    this._updateHiddenIndices();
    this._plugins.invalidate();
    if (this.notifyPlugins("beforeUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    const newControllers = this.buildOrUpdateControllers();
    this.notifyPlugins("beforeElementsUpdate");
    let minPadding = 0;
    for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; i2++) {
      const { controller } = this.getDatasetMeta(i2);
      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
      controller.buildOrUpdateElements(reset);
      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
    }
    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
    this._updateLayout(minPadding);
    if (!animsDisabled) {
      each(newControllers, (controller) => {
        controller.reset();
      });
    }
    this._updateDatasets(mode);
    this.notifyPlugins("afterUpdate", {
      mode
    });
    this._layers.sort(compare2Level("z", "_idx"));
    const { _active, _lastEvent } = this;
    if (_lastEvent) {
      this._eventHandler(_lastEvent, true);
    } else if (_active.length) {
      this._updateHoverStyles(_active, _active, true);
    }
    this.render();
  }
  _updateScales() {
    each(this.scales, (scale) => {
      layouts.removeBox(this, scale);
    });
    this.ensureScalesHaveIDs();
    this.buildOrUpdateScales();
  }
  _checkEventBindings() {
    const options = this.options;
    const existingEvents = new Set(Object.keys(this._listeners));
    const newEvents = new Set(options.events);
    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
      this.unbindEvents();
      this.bindEvents();
    }
  }
  _updateHiddenIndices() {
    const { _hiddenIndices } = this;
    const changes = this._getUniformDataChanges() || [];
    for (const { method, start, count } of changes) {
      const move = method === "_removeElements" ? -count : count;
      moveNumericKeys(_hiddenIndices, start, move);
    }
  }
  _getUniformDataChanges() {
    const _dataChanges = this._dataChanges;
    if (!_dataChanges || !_dataChanges.length) {
      return;
    }
    this._dataChanges = [];
    const datasetCount = this.data.datasets.length;
    const makeSet = (idx) => new Set(_dataChanges.filter((c2) => c2[0] === idx).map((c2, i2) => i2 + "," + c2.splice(1).join(",")));
    const changeSet = makeSet(0);
    for (let i2 = 1; i2 < datasetCount; i2++) {
      if (!setsEqual(changeSet, makeSet(i2))) {
        return;
      }
    }
    return Array.from(changeSet).map((c2) => c2.split(",")).map((a3) => ({
      method: a3[1],
      start: +a3[2],
      count: +a3[3]
    }));
  }
  _updateLayout(minPadding) {
    if (this.notifyPlugins("beforeLayout", {
      cancelable: true
    }) === false) {
      return;
    }
    layouts.update(this, this.width, this.height, minPadding);
    const area = this.chartArea;
    const noArea = area.width <= 0 || area.height <= 0;
    this._layers = [];
    each(this.boxes, (box) => {
      if (noArea && box.position === "chartArea") {
        return;
      }
      if (box.configure) {
        box.configure();
      }
      this._layers.push(...box._layers());
    }, this);
    this._layers.forEach((item, index2) => {
      item._idx = index2;
    });
    this.notifyPlugins("afterLayout");
  }
  _updateDatasets(mode) {
    if (this.notifyPlugins("beforeDatasetsUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
      this.getDatasetMeta(i2).controller.configure();
    }
    for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
      this._updateDataset(i2, isFunction(mode) ? mode({
        datasetIndex: i2
      }) : mode);
    }
    this.notifyPlugins("afterDatasetsUpdate", {
      mode
    });
  }
  _updateDataset(index2, mode) {
    const meta = this.getDatasetMeta(index2);
    const args = {
      meta,
      index: index2,
      mode,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetUpdate", args) === false) {
      return;
    }
    meta.controller._update(mode);
    args.cancelable = false;
    this.notifyPlugins("afterDatasetUpdate", args);
  }
  render() {
    if (this.notifyPlugins("beforeRender", {
      cancelable: true
    }) === false) {
      return;
    }
    if (animator.has(this)) {
      if (this.attached && !animator.running(this)) {
        animator.start(this);
      }
    } else {
      this.draw();
      onAnimationsComplete({
        chart: this
      });
    }
  }
  draw() {
    let i2;
    if (this._resizeBeforeDraw) {
      const { width, height } = this._resizeBeforeDraw;
      this._resize(width, height);
      this._resizeBeforeDraw = null;
    }
    this.clear();
    if (this.width <= 0 || this.height <= 0) {
      return;
    }
    if (this.notifyPlugins("beforeDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const layers = this._layers;
    for (i2 = 0; i2 < layers.length && layers[i2].z <= 0; ++i2) {
      layers[i2].draw(this.chartArea);
    }
    this._drawDatasets();
    for (; i2 < layers.length; ++i2) {
      layers[i2].draw(this.chartArea);
    }
    this.notifyPlugins("afterDraw");
  }
  _getSortedDatasetMetas(filterVisible) {
    const metasets = this._sortedMetasets;
    const result = [];
    let i2, ilen;
    for (i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
      const meta = metasets[i2];
      if (!filterVisible || meta.visible) {
        result.push(meta);
      }
    }
    return result;
  }
  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(true);
  }
  _drawDatasets() {
    if (this.notifyPlugins("beforeDatasetsDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const metasets = this.getSortedVisibleDatasetMetas();
    for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
      this._drawDataset(metasets[i2]);
    }
    this.notifyPlugins("afterDatasetsDraw");
  }
  _drawDataset(meta) {
    const ctx = this.ctx;
    const clip = meta._clip;
    const useClip = !clip.disabled;
    const area = getDatasetArea(meta) || this.chartArea;
    const args = {
      meta,
      index: meta.index,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetDraw", args) === false) {
      return;
    }
    if (useClip) {
      clipArea(ctx, {
        left: clip.left === false ? 0 : area.left - clip.left,
        right: clip.right === false ? this.width : area.right + clip.right,
        top: clip.top === false ? 0 : area.top - clip.top,
        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
      });
    }
    meta.controller.draw();
    if (useClip) {
      unclipArea(ctx);
    }
    args.cancelable = false;
    this.notifyPlugins("afterDatasetDraw", args);
  }
  isPointInArea(point) {
    return _isPointInArea(point, this.chartArea, this._minPadding);
  }
  getElementsAtEventForMode(e2, mode, options, useFinalPosition) {
    const method = Interaction.modes[mode];
    if (typeof method === "function") {
      return method(this, e2, options, useFinalPosition);
    }
    return [];
  }
  getDatasetMeta(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    const metasets = this._metasets;
    let meta = metasets.filter((x2) => x2 && x2._dataset === dataset).pop();
    if (!meta) {
      meta = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: dataset && dataset.order || 0,
        index: datasetIndex,
        _dataset: dataset,
        _parsed: [],
        _sorted: false
      };
      metasets.push(meta);
    }
    return meta;
  }
  getContext() {
    return this.$context || (this.$context = createContext(null, {
      chart: this,
      type: "chart"
    }));
  }
  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }
  isDatasetVisible(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    if (!dataset) {
      return false;
    }
    const meta = this.getDatasetMeta(datasetIndex);
    return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
  }
  setDatasetVisibility(datasetIndex, visible) {
    const meta = this.getDatasetMeta(datasetIndex);
    meta.hidden = !visible;
  }
  toggleDataVisibility(index2) {
    this._hiddenIndices[index2] = !this._hiddenIndices[index2];
  }
  getDataVisibility(index2) {
    return !this._hiddenIndices[index2];
  }
  _updateVisibility(datasetIndex, dataIndex, visible) {
    const mode = visible ? "show" : "hide";
    const meta = this.getDatasetMeta(datasetIndex);
    const anims = meta.controller._resolveAnimations(void 0, mode);
    if (defined(dataIndex)) {
      meta.data[dataIndex].hidden = !visible;
      this.update();
    } else {
      this.setDatasetVisibility(datasetIndex, visible);
      anims.update(meta, {
        visible
      });
      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : void 0);
    }
  }
  hide(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, false);
  }
  show(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, true);
  }
  _destroyDatasetMeta(datasetIndex) {
    const meta = this._metasets[datasetIndex];
    if (meta && meta.controller) {
      meta.controller._destroy();
    }
    delete this._metasets[datasetIndex];
  }
  _stop() {
    let i2, ilen;
    this.stop();
    animator.remove(this);
    for (i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
      this._destroyDatasetMeta(i2);
    }
  }
  destroy() {
    this.notifyPlugins("beforeDestroy");
    const { canvas, ctx } = this;
    this._stop();
    this.config.clearCache();
    if (canvas) {
      this.unbindEvents();
      clearCanvas(canvas, ctx);
      this.platform.releaseContext(ctx);
      this.canvas = null;
      this.ctx = null;
    }
    delete instances[this.id];
    this.notifyPlugins("afterDestroy");
  }
  toBase64Image(...args) {
    return this.canvas.toDataURL(...args);
  }
  bindEvents() {
    this.bindUserEvents();
    if (this.options.responsive) {
      this.bindResponsiveEvents();
    } else {
      this.attached = true;
    }
  }
  bindUserEvents() {
    const listeners = this._listeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const listener = (e2, x2, y3) => {
      e2.offsetX = x2;
      e2.offsetY = y3;
      this._eventHandler(e2);
    };
    each(this.options.events, (type) => _add(type, listener));
  }
  bindResponsiveEvents() {
    if (!this._responsiveListeners) {
      this._responsiveListeners = {};
    }
    const listeners = this._responsiveListeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const _remove = (type, listener2) => {
      if (listeners[type]) {
        platform.removeEventListener(this, type, listener2);
        delete listeners[type];
      }
    };
    const listener = (width, height) => {
      if (this.canvas) {
        this.resize(width, height);
      }
    };
    let detached;
    const attached = () => {
      _remove("attach", attached);
      this.attached = true;
      this.resize();
      _add("resize", listener);
      _add("detach", detached);
    };
    detached = () => {
      this.attached = false;
      _remove("resize", listener);
      this._stop();
      this._resize(0, 0);
      _add("attach", attached);
    };
    if (platform.isAttached(this.canvas)) {
      attached();
    } else {
      detached();
    }
  }
  unbindEvents() {
    each(this._listeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._listeners = {};
    each(this._responsiveListeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._responsiveListeners = void 0;
  }
  updateHoverStyle(items, mode, enabled) {
    const prefix = enabled ? "set" : "remove";
    let meta, item, i2, ilen;
    if (mode === "dataset") {
      meta = this.getDatasetMeta(items[0].datasetIndex);
      meta.controller["_" + prefix + "DatasetHoverStyle"]();
    }
    for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
      item = items[i2];
      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
      if (controller) {
        controller[prefix + "HoverStyle"](item.element, item.datasetIndex, item.index);
      }
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements) {
    const lastActive = this._active || [];
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("No dataset found at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(active, lastActive);
    if (changed) {
      this._active = active;
      this._lastEvent = null;
      this._updateHoverStyles(active, lastActive);
    }
  }
  notifyPlugins(hook, args, filter) {
    return this._plugins.notify(this, hook, args, filter);
  }
  isPluginEnabled(pluginId) {
    return this._plugins._cache.filter((p) => p.plugin.id === pluginId).length === 1;
  }
  _updateHoverStyles(active, lastActive, replay) {
    const hoverOptions = this.options.hover;
    const diff = (a3, b2) => a3.filter((x2) => !b2.some((y3) => x2.datasetIndex === y3.datasetIndex && x2.index === y3.index));
    const deactivated = diff(lastActive, active);
    const activated = replay ? active : diff(active, lastActive);
    if (deactivated.length) {
      this.updateHoverStyle(deactivated, hoverOptions.mode, false);
    }
    if (activated.length && hoverOptions.mode) {
      this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
  }
  _eventHandler(e2, replay) {
    const args = {
      event: e2,
      replay,
      cancelable: true,
      inChartArea: this.isPointInArea(e2)
    };
    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e2.native.type);
    if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) {
      return;
    }
    const changed = this._handleEvent(e2, replay, args.inChartArea);
    args.cancelable = false;
    this.notifyPlugins("afterEvent", args, eventFilter);
    if (changed || args.changed) {
      this.render();
    }
    return this;
  }
  _handleEvent(e2, replay, inChartArea) {
    const { _active: lastActive = [], options } = this;
    const useFinalPosition = replay;
    const active = this._getActiveElements(e2, lastActive, inChartArea, useFinalPosition);
    const isClick = _isClickEvent(e2);
    const lastEvent = determineLastEvent(e2, this._lastEvent, inChartArea, isClick);
    if (inChartArea) {
      this._lastEvent = null;
      callback(options.onHover, [
        e2,
        active,
        this
      ], this);
      if (isClick) {
        callback(options.onClick, [
          e2,
          active,
          this
        ], this);
      }
    }
    const changed = !_elementsEqual(active, lastActive);
    if (changed || replay) {
      this._active = active;
      this._updateHoverStyles(active, lastActive, replay);
    }
    this._lastEvent = lastEvent;
    return changed;
  }
  _getActiveElements(e2, lastActive, inChartArea, useFinalPosition) {
    if (e2.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const hoverOptions = this.options.hover;
    return this.getElementsAtEventForMode(e2, hoverOptions.mode, hoverOptions, useFinalPosition);
  }
}, __publicField(_b, "defaults", defaults), __publicField(_b, "instances", instances), __publicField(_b, "overrides", overrides), __publicField(_b, "registry", registry), __publicField(_b, "version", version), __publicField(_b, "getChart", getChart), _b);
function invalidatePlugins() {
  return each(Chart$1.instances, (chart) => chart._plugins.invalidate());
}
function clipArc(ctx, element2, endAngle) {
  const { startAngle, pixelMargin, x: x2, y: y3, outerRadius, innerRadius } = element2;
  let angleMargin = pixelMargin / outerRadius;
  ctx.beginPath();
  ctx.arc(x2, y3, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
  if (innerRadius > pixelMargin) {
    angleMargin = pixelMargin / innerRadius;
    ctx.arc(x2, y3, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
  } else {
    ctx.arc(x2, y3, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
  }
  ctx.closePath();
  ctx.clip();
}
function toRadiusCorners(value) {
  return _readValueToProps(value, [
    "outerStart",
    "outerEnd",
    "innerStart",
    "innerEnd"
  ]);
}
function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
  const o = toRadiusCorners(arc.options.borderRadius);
  const halfThickness = (outerRadius - innerRadius) / 2;
  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
  const computeOuterLimit = (val) => {
    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
  };
  return {
    outerStart: computeOuterLimit(o.outerStart),
    outerEnd: computeOuterLimit(o.outerEnd),
    innerStart: _limitValue(o.innerStart, 0, innerLimit),
    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)
  };
}
function rThetaToXY(r, theta, x2, y3) {
  return {
    x: x2 + r * Math.cos(theta),
    y: y3 + r * Math.sin(theta)
  };
}
function pathArc(ctx, element2, offset, spacing, end, circular) {
  const { x: x2, y: y3, startAngle: start, pixelMargin, innerRadius: innerR } = element2;
  const outerRadius = Math.max(element2.outerRadius + spacing + offset - pixelMargin, 0);
  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
  let spacingOffset = 0;
  const alpha2 = end - start;
  if (spacing) {
    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha2 * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha2;
    spacingOffset = (alpha2 - adjustedAngle) / 2;
  }
  const beta = Math.max(1e-3, alpha2 * outerRadius - offset / PI) / outerRadius;
  const angleOffset = (alpha2 - beta) / 2;
  const startAngle = start + angleOffset + spacingOffset;
  const endAngle = end - angleOffset - spacingOffset;
  const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element2, innerRadius, outerRadius, endAngle - startAngle);
  const outerStartAdjustedRadius = outerRadius - outerStart;
  const outerEndAdjustedRadius = outerRadius - outerEnd;
  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
  const innerStartAdjustedRadius = innerRadius + innerStart;
  const innerEndAdjustedRadius = innerRadius + innerEnd;
  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
  ctx.beginPath();
  if (circular) {
    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
    ctx.arc(x2, y3, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
    ctx.arc(x2, y3, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
    if (outerEnd > 0) {
      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
    }
    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x2, y3);
    ctx.lineTo(p4.x, p4.y);
    if (innerEnd > 0) {
      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
    }
    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
    ctx.arc(x2, y3, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
    ctx.arc(x2, y3, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
    if (innerStart > 0) {
      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
    }
    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x2, y3);
    ctx.lineTo(p8.x, p8.y);
    if (outerStart > 0) {
      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
    }
  } else {
    ctx.moveTo(x2, y3);
    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x2;
    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y3;
    ctx.lineTo(outerStartX, outerStartY);
    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x2;
    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y3;
    ctx.lineTo(outerEndX, outerEndY);
  }
  ctx.closePath();
}
function drawArc(ctx, element2, offset, spacing, circular) {
  const { fullCircles, startAngle, circumference } = element2;
  let endAngle = element2.endAngle;
  if (fullCircles) {
    pathArc(ctx, element2, offset, spacing, endAngle, circular);
    for (let i2 = 0; i2 < fullCircles; ++i2) {
      ctx.fill();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  pathArc(ctx, element2, offset, spacing, endAngle, circular);
  ctx.fill();
  return endAngle;
}
function drawBorder(ctx, element2, offset, spacing, circular) {
  const { fullCircles, startAngle, circumference, options } = element2;
  const { borderWidth, borderJoinStyle, borderDash, borderDashOffset } = options;
  const inner = options.borderAlign === "inner";
  if (!borderWidth) {
    return;
  }
  ctx.setLineDash(borderDash || []);
  ctx.lineDashOffset = borderDashOffset;
  if (inner) {
    ctx.lineWidth = borderWidth * 2;
    ctx.lineJoin = borderJoinStyle || "round";
  } else {
    ctx.lineWidth = borderWidth;
    ctx.lineJoin = borderJoinStyle || "bevel";
  }
  let endAngle = element2.endAngle;
  if (fullCircles) {
    pathArc(ctx, element2, offset, spacing, endAngle, circular);
    for (let i2 = 0; i2 < fullCircles; ++i2) {
      ctx.stroke();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  if (inner) {
    clipArc(ctx, element2, endAngle);
  }
  if (!fullCircles) {
    pathArc(ctx, element2, offset, spacing, endAngle, circular);
    ctx.stroke();
  }
}
class ArcElement extends Element$1 {
  constructor(cfg) {
    super();
    __publicField(this, "circumference");
    __publicField(this, "endAngle");
    __publicField(this, "fullCircles");
    __publicField(this, "innerRadius");
    __publicField(this, "outerRadius");
    __publicField(this, "pixelMargin");
    __publicField(this, "startAngle");
    this.options = void 0;
    this.circumference = void 0;
    this.startAngle = void 0;
    this.endAngle = void 0;
    this.innerRadius = void 0;
    this.outerRadius = void 0;
    this.pixelMargin = 0;
    this.fullCircles = 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(chartX, chartY, useFinalPosition) {
    const point = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    const { angle, distance } = getAngleFromPoint(point, {
      x: chartX,
      y: chartY
    });
    const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius",
      "circumference"
    ], useFinalPosition);
    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
    const _circumference = valueOrDefault(circumference, endAngle - startAngle);
    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);
    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);
    return betweenAngles && withinRadius;
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y3, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([
      "x",
      "y",
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius"
    ], useFinalPosition);
    const { offset, spacing } = this.options;
    const halfAngle = (startAngle + endAngle) / 2;
    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
    return {
      x: x2 + Math.cos(halfAngle) * halfRadius,
      y: y3 + Math.sin(halfAngle) * halfRadius
    };
  }
  tooltipPosition(useFinalPosition) {
    return this.getCenterPoint(useFinalPosition);
  }
  draw(ctx) {
    const { options, circumference } = this;
    const offset = (options.offset || 0) / 4;
    const spacing = (options.spacing || 0) / 2;
    const circular = options.circular;
    this.pixelMargin = options.borderAlign === "inner" ? 0.33 : 0;
    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
      return;
    }
    ctx.save();
    const halfAngle = (this.startAngle + this.endAngle) / 2;
    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));
    const radiusOffset = offset * fix;
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    drawArc(ctx, this, radiusOffset, spacing, circular);
    drawBorder(ctx, this, radiusOffset, spacing, circular);
    ctx.restore();
  }
}
__publicField(ArcElement, "id", "arc");
__publicField(ArcElement, "defaults", {
  borderAlign: "center",
  borderColor: "#fff",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: void 0,
  borderRadius: 0,
  borderWidth: 2,
  offset: 0,
  spacing: 0,
  angle: void 0,
  circular: true
});
__publicField(ArcElement, "defaultRoutes", {
  backgroundColor: "backgroundColor"
});
__publicField(ArcElement, "descriptors", {
  _scriptable: true,
  _indexable: (name) => name !== "borderDash"
});
function setStyle(ctx, options, style = options) {
  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);
  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));
  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);
  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);
  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);
  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
  ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
  if (options.stepped) {
    return _steppedLineTo;
  }
  if (options.tension || options.cubicInterpolationMode === "monotone") {
    return _bezierCurveTo;
  }
  return lineTo;
}
function pathVars(points, segment, params = {}) {
  const count = points.length;
  const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;
  const { start: segmentStart, end: segmentEnd } = segment;
  const start = Math.max(paramsStart, segmentStart);
  const end = Math.min(paramsEnd, segmentEnd);
  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
  return {
    count,
    start,
    loop: segment.loop,
    ilen: end < start && !outside ? count + end - start : end - start
  };
}
function pathSegment(ctx, line, segment, params) {
  const { points, options } = line;
  const { count, start, loop, ilen } = pathVars(points, segment, params);
  const lineMethod = getLineMethod(options);
  let { move = true, reverse } = params || {};
  let i2, point, prev;
  for (i2 = 0; i2 <= ilen; ++i2) {
    point = points[(start + (reverse ? ilen - i2 : i2)) % count];
    if (point.skip) {
      continue;
    } else if (move) {
      ctx.moveTo(point.x, point.y);
      move = false;
    } else {
      lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    prev = point;
  }
  if (loop) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    lineMethod(ctx, prev, point, reverse, options.stepped);
  }
  return !!loop;
}
function fastPathSegment(ctx, line, segment, params) {
  const points = line.points;
  const { count, start, ilen } = pathVars(points, segment, params);
  const { move = true, reverse } = params || {};
  let avgX = 0;
  let countX = 0;
  let i2, point, prevX, minY, maxY, lastY;
  const pointIndex = (index2) => (start + (reverse ? ilen - index2 : index2)) % count;
  const drawX = () => {
    if (minY !== maxY) {
      ctx.lineTo(avgX, maxY);
      ctx.lineTo(avgX, minY);
      ctx.lineTo(avgX, lastY);
    }
  };
  if (move) {
    point = points[pointIndex(0)];
    ctx.moveTo(point.x, point.y);
  }
  for (i2 = 0; i2 <= ilen; ++i2) {
    point = points[pointIndex(i2)];
    if (point.skip) {
      continue;
    }
    const x2 = point.x;
    const y3 = point.y;
    const truncX = x2 | 0;
    if (truncX === prevX) {
      if (y3 < minY) {
        minY = y3;
      } else if (y3 > maxY) {
        maxY = y3;
      }
      avgX = (countX * avgX + x2) / ++countX;
    } else {
      drawX();
      ctx.lineTo(x2, y3);
      prevX = truncX;
      countX = 0;
      minY = maxY = y3;
    }
    lastY = y3;
  }
  drawX();
}
function _getSegmentMethod(line) {
  const opts = line.options;
  const borderDash = opts.borderDash && opts.borderDash.length;
  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
  return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
  if (options.stepped) {
    return _steppedInterpolation;
  }
  if (options.tension || options.cubicInterpolationMode === "monotone") {
    return _bezierInterpolation;
  }
  return _pointInLine;
}
function strokePathWithCache(ctx, line, start, count) {
  let path = line._path;
  if (!path) {
    path = line._path = new Path2D();
    if (line.path(path, start, count)) {
      path.closePath();
    }
  }
  setStyle(ctx, line.options);
  ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
  const { segments, options } = line;
  const segmentMethod = _getSegmentMethod(line);
  for (const segment of segments) {
    setStyle(ctx, options, segment.style);
    ctx.beginPath();
    if (segmentMethod(ctx, line, segment, {
      start,
      end: start + count - 1
    })) {
      ctx.closePath();
    }
    ctx.stroke();
  }
}
const usePath2D = typeof Path2D === "function";
function draw(ctx, line, start, count) {
  if (usePath2D && !line.options.segment) {
    strokePathWithCache(ctx, line, start, count);
  } else {
    strokePathDirect(ctx, line, start, count);
  }
}
class LineElement extends Element$1 {
  constructor(cfg) {
    super();
    this.animated = true;
    this.options = void 0;
    this._chart = void 0;
    this._loop = void 0;
    this._fullLoop = void 0;
    this._path = void 0;
    this._points = void 0;
    this._segments = void 0;
    this._decimated = false;
    this._pointsUpdated = false;
    this._datasetIndex = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  updateControlPoints(chartArea, indexAxis) {
    const options = this.options;
    if ((options.tension || options.cubicInterpolationMode === "monotone") && !options.stepped && !this._pointsUpdated) {
      const loop = options.spanGaps ? this._loop : this._fullLoop;
      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);
      this._pointsUpdated = true;
    }
  }
  set points(points) {
    this._points = points;
    delete this._segments;
    delete this._path;
    this._pointsUpdated = false;
  }
  get points() {
    return this._points;
  }
  get segments() {
    return this._segments || (this._segments = _computeSegments(this, this.options.segment));
  }
  first() {
    const segments = this.segments;
    const points = this.points;
    return segments.length && points[segments[0].start];
  }
  last() {
    const segments = this.segments;
    const points = this.points;
    const count = segments.length;
    return count && points[segments[count - 1].end];
  }
  interpolate(point, property) {
    const options = this.options;
    const value = point[property];
    const points = this.points;
    const segments = _boundSegments(this, {
      property,
      start: value,
      end: value
    });
    if (!segments.length) {
      return;
    }
    const result = [];
    const _interpolate = _getInterpolationMethod(options);
    let i2, ilen;
    for (i2 = 0, ilen = segments.length; i2 < ilen; ++i2) {
      const { start, end } = segments[i2];
      const p1 = points[start];
      const p2 = points[end];
      if (p1 === p2) {
        result.push(p1);
        continue;
      }
      const t2 = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
      const interpolated = _interpolate(p1, p2, t2, options.stepped);
      interpolated[property] = point[property];
      result.push(interpolated);
    }
    return result.length === 1 ? result[0] : result;
  }
  pathSegment(ctx, segment, params) {
    const segmentMethod = _getSegmentMethod(this);
    return segmentMethod(ctx, this, segment, params);
  }
  path(ctx, start, count) {
    const segments = this.segments;
    const segmentMethod = _getSegmentMethod(this);
    let loop = this._loop;
    start = start || 0;
    count = count || this.points.length - start;
    for (const segment of segments) {
      loop &= segmentMethod(ctx, this, segment, {
        start,
        end: start + count - 1
      });
    }
    return !!loop;
  }
  draw(ctx, chartArea, start, count) {
    const options = this.options || {};
    const points = this.points || [];
    if (points.length && options.borderWidth) {
      ctx.save();
      draw(ctx, this, start, count);
      ctx.restore();
    }
    if (this.animated) {
      this._pointsUpdated = false;
      this._path = void 0;
    }
  }
}
__publicField(LineElement, "id", "line");
__publicField(LineElement, "defaults", {
  borderCapStyle: "butt",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: "miter",
  borderWidth: 3,
  capBezierPoints: true,
  cubicInterpolationMode: "default",
  fill: false,
  spanGaps: false,
  stepped: false,
  tension: 0
});
__publicField(LineElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
__publicField(LineElement, "descriptors", {
  _scriptable: true,
  _indexable: (name) => name !== "borderDash" && name !== "fill"
});
function inRange$1(el, pos, axis, useFinalPosition) {
  const options = el.options;
  const { [axis]: value } = el.getProps([
    axis
  ], useFinalPosition);
  return Math.abs(pos - value) < options.radius + options.hitRadius;
}
class PointElement extends Element$1 {
  constructor(cfg) {
    super();
    __publicField(this, "parsed");
    __publicField(this, "skip");
    __publicField(this, "stop");
    this.options = void 0;
    this.parsed = void 0;
    this.skip = void 0;
    this.stop = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    const options = this.options;
    const { x: x2, y: y3 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return Math.pow(mouseX - x2, 2) + Math.pow(mouseY - y3, 2) < Math.pow(options.hitRadius + options.radius, 2);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange$1(this, mouseX, "x", useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange$1(this, mouseY, "y", useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y3 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y3
    };
  }
  size(options) {
    options = options || this.options || {};
    let radius = options.radius || 0;
    radius = Math.max(radius, radius && options.hoverRadius || 0);
    const borderWidth = radius && options.borderWidth || 0;
    return (radius + borderWidth) * 2;
  }
  draw(ctx, area) {
    const options = this.options;
    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
      return;
    }
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.fillStyle = options.backgroundColor;
    drawPoint(ctx, options, this.x, this.y);
  }
  getRange() {
    const options = this.options || {};
    return options.radius + options.hitRadius;
  }
}
__publicField(PointElement, "id", "point");
/**
* @type {any}
*/
__publicField(PointElement, "defaults", {
  borderWidth: 1,
  hitRadius: 1,
  hoverBorderWidth: 1,
  hoverRadius: 4,
  pointStyle: "circle",
  radius: 3,
  rotation: 0
});
/**
* @type {any}
*/
__publicField(PointElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
function getBarBounds(bar, useFinalPosition) {
  const { x: x2, y: y3, base: base2, width, height } = bar.getProps([
    "x",
    "y",
    "base",
    "width",
    "height"
  ], useFinalPosition);
  let left, right, top, bottom, half;
  if (bar.horizontal) {
    half = height / 2;
    left = Math.min(x2, base2);
    right = Math.max(x2, base2);
    top = y3 - half;
    bottom = y3 + half;
  } else {
    half = width / 2;
    left = x2 - half;
    right = x2 + half;
    top = Math.min(y3, base2);
    bottom = Math.max(y3, base2);
  }
  return {
    left,
    top,
    right,
    bottom
  };
}
function skipOrLimit(skip2, value, min, max) {
  return skip2 ? 0 : _limitValue(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
  const value = bar.options.borderWidth;
  const skip2 = bar.borderSkipped;
  const o = toTRBL(value);
  return {
    t: skipOrLimit(skip2.top, o.top, 0, maxH),
    r: skipOrLimit(skip2.right, o.right, 0, maxW),
    b: skipOrLimit(skip2.bottom, o.bottom, 0, maxH),
    l: skipOrLimit(skip2.left, o.left, 0, maxW)
  };
}
function parseBorderRadius(bar, maxW, maxH) {
  const { enableBorderRadius } = bar.getProps([
    "enableBorderRadius"
  ]);
  const value = bar.options.borderRadius;
  const o = toTRBLCorners(value);
  const maxR = Math.min(maxW, maxH);
  const skip2 = bar.borderSkipped;
  const enableBorder = enableBorderRadius || isObject(value);
  return {
    topLeft: skipOrLimit(!enableBorder || skip2.top || skip2.left, o.topLeft, 0, maxR),
    topRight: skipOrLimit(!enableBorder || skip2.top || skip2.right, o.topRight, 0, maxR),
    bottomLeft: skipOrLimit(!enableBorder || skip2.bottom || skip2.left, o.bottomLeft, 0, maxR),
    bottomRight: skipOrLimit(!enableBorder || skip2.bottom || skip2.right, o.bottomRight, 0, maxR)
  };
}
function boundingRects(bar) {
  const bounds = getBarBounds(bar);
  const width = bounds.right - bounds.left;
  const height = bounds.bottom - bounds.top;
  const border = parseBorderWidth(bar, width / 2, height / 2);
  const radius = parseBorderRadius(bar, width / 2, height / 2);
  return {
    outer: {
      x: bounds.left,
      y: bounds.top,
      w: width,
      h: height,
      radius
    },
    inner: {
      x: bounds.left + border.l,
      y: bounds.top + border.t,
      w: width - border.l - border.r,
      h: height - border.t - border.b,
      radius: {
        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
      }
    }
  };
}
function inRange(bar, x2, y3, useFinalPosition) {
  const skipX = x2 === null;
  const skipY = y3 === null;
  const skipBoth = skipX && skipY;
  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
  return bounds && (skipX || _isBetween(x2, bounds.left, bounds.right)) && (skipY || _isBetween(y3, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
  ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
  const x2 = rect.x !== refRect.x ? -amount : 0;
  const y3 = rect.y !== refRect.y ? -amount : 0;
  const w2 = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x2;
  const h4 = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y3;
  return {
    x: rect.x + x2,
    y: rect.y + y3,
    w: rect.w + w2,
    h: rect.h + h4,
    radius: rect.radius
  };
}
class BarElement extends Element$1 {
  constructor(cfg) {
    super();
    this.options = void 0;
    this.horizontal = void 0;
    this.base = void 0;
    this.width = void 0;
    this.height = void 0;
    this.inflateAmount = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  draw(ctx) {
    const { inflateAmount, options: { borderColor, backgroundColor } } = this;
    const { inner, outer } = boundingRects(this);
    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
    ctx.save();
    if (outer.w !== inner.w || outer.h !== inner.h) {
      ctx.beginPath();
      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
      ctx.clip();
      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
      ctx.fillStyle = borderColor;
      ctx.fill("evenodd");
    }
    ctx.beginPath();
    addRectPath(ctx, inflateRect(inner, inflateAmount));
    ctx.fillStyle = backgroundColor;
    ctx.fill();
    ctx.restore();
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    return inRange(this, mouseX, mouseY, useFinalPosition);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange(this, mouseX, null, useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange(this, null, mouseY, useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y3, base: base2, horizontal } = this.getProps([
      "x",
      "y",
      "base",
      "horizontal"
    ], useFinalPosition);
    return {
      x: horizontal ? (x2 + base2) / 2 : x2,
      y: horizontal ? y3 : (y3 + base2) / 2
    };
  }
  getRange(axis) {
    return axis === "x" ? this.width / 2 : this.height / 2;
  }
}
__publicField(BarElement, "id", "bar");
__publicField(BarElement, "defaults", {
  borderSkipped: "start",
  borderWidth: 0,
  borderRadius: 0,
  inflateAmount: "auto",
  pointStyle: void 0
});
__publicField(BarElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
var elements = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcElement,
  BarElement,
  LineElement,
  PointElement
});
const BORDER_COLORS = [
  "rgb(54, 162, 235)",
  "rgb(255, 99, 132)",
  "rgb(255, 159, 64)",
  "rgb(255, 205, 86)",
  "rgb(75, 192, 192)",
  "rgb(153, 102, 255)",
  "rgb(201, 203, 207)"
  // grey
];
const BACKGROUND_COLORS = /* @__PURE__ */ BORDER_COLORS.map((color2) => color2.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
function getBorderColor(i2) {
  return BORDER_COLORS[i2 % BORDER_COLORS.length];
}
function getBackgroundColor(i2) {
  return BACKGROUND_COLORS[i2 % BACKGROUND_COLORS.length];
}
function colorizeDefaultDataset(dataset, i2) {
  dataset.borderColor = getBorderColor(i2);
  dataset.backgroundColor = getBackgroundColor(i2);
  return ++i2;
}
function colorizeDoughnutDataset(dataset, i2) {
  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i2++));
  return i2;
}
function colorizePolarAreaDataset(dataset, i2) {
  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i2++));
  return i2;
}
function getColorizer(chart) {
  let i2 = 0;
  return (dataset, datasetIndex) => {
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    if (controller instanceof DoughnutController) {
      i2 = colorizeDoughnutDataset(dataset, i2);
    } else if (controller instanceof PolarAreaController) {
      i2 = colorizePolarAreaDataset(dataset, i2);
    } else if (controller) {
      i2 = colorizeDefaultDataset(dataset, i2);
    }
  };
}
function containsColorsDefinitions(descriptors2) {
  let k2;
  for (k2 in descriptors2) {
    if (descriptors2[k2].borderColor || descriptors2[k2].backgroundColor) {
      return true;
    }
  }
  return false;
}
function containsColorsDefinition(descriptor) {
  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);
}
var plugin_colors = {
  id: "colors",
  defaults: {
    enabled: true,
    forceOverride: false
  },
  beforeLayout(chart, _args, options) {
    if (!options.enabled) {
      return;
    }
    const { data: { datasets }, options: chartOptions } = chart.config;
    const { elements: elements2 } = chartOptions;
    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements2 && containsColorsDefinitions(elements2))) {
      return;
    }
    const colorizer = getColorizer(chart);
    datasets.forEach(colorizer);
  }
};
function lttbDecimation(data, start, count, availableWidth, options) {
  const samples = options.samples || availableWidth;
  if (samples >= count) {
    return data.slice(start, start + count);
  }
  const decimated = [];
  const bucketWidth = (count - 2) / (samples - 2);
  let sampledIndex = 0;
  const endIndex = start + count - 1;
  let a3 = start;
  let i2, maxAreaPoint, maxArea, area, nextA;
  decimated[sampledIndex++] = data[a3];
  for (i2 = 0; i2 < samples - 2; i2++) {
    let avgX = 0;
    let avgY = 0;
    let j;
    const avgRangeStart = Math.floor((i2 + 1) * bucketWidth) + 1 + start;
    const avgRangeEnd = Math.min(Math.floor((i2 + 2) * bucketWidth) + 1, count) + start;
    const avgRangeLength = avgRangeEnd - avgRangeStart;
    for (j = avgRangeStart; j < avgRangeEnd; j++) {
      avgX += data[j].x;
      avgY += data[j].y;
    }
    avgX /= avgRangeLength;
    avgY /= avgRangeLength;
    const rangeOffs = Math.floor(i2 * bucketWidth) + 1 + start;
    const rangeTo = Math.min(Math.floor((i2 + 1) * bucketWidth) + 1, count) + start;
    const { x: pointAx, y: pointAy } = data[a3];
    maxArea = area = -1;
    for (j = rangeOffs; j < rangeTo; j++) {
      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
      if (area > maxArea) {
        maxArea = area;
        maxAreaPoint = data[j];
        nextA = j;
      }
    }
    decimated[sampledIndex++] = maxAreaPoint;
    a3 = nextA;
  }
  decimated[sampledIndex++] = data[endIndex];
  return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
  let avgX = 0;
  let countX = 0;
  let i2, point, x2, y3, prevX, minIndex, maxIndex, startIndex, minY, maxY;
  const decimated = [];
  const endIndex = start + count - 1;
  const xMin = data[start].x;
  const xMax = data[endIndex].x;
  const dx = xMax - xMin;
  for (i2 = start; i2 < start + count; ++i2) {
    point = data[i2];
    x2 = (point.x - xMin) / dx * availableWidth;
    y3 = point.y;
    const truncX = x2 | 0;
    if (truncX === prevX) {
      if (y3 < minY) {
        minY = y3;
        minIndex = i2;
      } else if (y3 > maxY) {
        maxY = y3;
        maxIndex = i2;
      }
      avgX = (countX * avgX + point.x) / ++countX;
    } else {
      const lastIndex = i2 - 1;
      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {
        const intermediateIndex1 = Math.min(minIndex, maxIndex);
        const intermediateIndex2 = Math.max(minIndex, maxIndex);
        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex1],
            x: avgX
          });
        }
        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex2],
            x: avgX
          });
        }
      }
      if (i2 > 0 && lastIndex !== startIndex) {
        decimated.push(data[lastIndex]);
      }
      decimated.push(point);
      prevX = truncX;
      countX = 0;
      minY = maxY = y3;
      minIndex = maxIndex = startIndex = i2;
    }
  }
  return decimated;
}
function cleanDecimatedDataset(dataset) {
  if (dataset._decimated) {
    const data = dataset._data;
    delete dataset._decimated;
    delete dataset._data;
    Object.defineProperty(dataset, "data", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: data
    });
  }
}
function cleanDecimatedData(chart) {
  chart.data.datasets.forEach((dataset) => {
    cleanDecimatedDataset(dataset);
  });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
  const pointCount = points.length;
  let start = 0;
  let count;
  const { iScale } = meta;
  const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
  if (minDefined) {
    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);
  }
  if (maxDefined) {
    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;
  } else {
    count = pointCount - start;
  }
  return {
    start,
    count
  };
}
var plugin_decimation = {
  id: "decimation",
  defaults: {
    algorithm: "min-max",
    enabled: false
  },
  beforeElementsUpdate: (chart, args, options) => {
    if (!options.enabled) {
      cleanDecimatedData(chart);
      return;
    }
    const availableWidth = chart.width;
    chart.data.datasets.forEach((dataset, datasetIndex) => {
      const { _data, indexAxis } = dataset;
      const meta = chart.getDatasetMeta(datasetIndex);
      const data = _data || dataset.data;
      if (resolve([
        indexAxis,
        chart.options.indexAxis
      ]) === "y") {
        return;
      }
      if (!meta.controller.supportsDecimation) {
        return;
      }
      const xAxis = chart.scales[meta.xAxisID];
      if (xAxis.type !== "linear" && xAxis.type !== "time") {
        return;
      }
      if (chart.options.parsing) {
        return;
      }
      let { start, count } = getStartAndCountOfVisiblePointsSimplified(meta, data);
      const threshold = options.threshold || 4 * availableWidth;
      if (count <= threshold) {
        cleanDecimatedDataset(dataset);
        return;
      }
      if (isNullOrUndef(_data)) {
        dataset._data = data;
        delete dataset.data;
        Object.defineProperty(dataset, "data", {
          configurable: true,
          enumerable: true,
          get: function() {
            return this._decimated;
          },
          set: function(d3) {
            this._data = d3;
          }
        });
      }
      let decimated;
      switch (options.algorithm) {
        case "lttb":
          decimated = lttbDecimation(data, start, count, availableWidth, options);
          break;
        case "min-max":
          decimated = minMaxDecimation(data, start, count, availableWidth);
          break;
        default:
          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
      }
      dataset._decimated = decimated;
    });
  },
  destroy(chart) {
    cleanDecimatedData(chart);
  }
};
function _segments(line, target, property) {
  const segments = line.segments;
  const points = line.points;
  const tpoints = target.points;
  const parts = [];
  for (const segment of segments) {
    let { start, end } = segment;
    end = _findSegmentEnd(start, end, points);
    const bounds = _getBounds(property, points[start], points[end], segment.loop);
    if (!target.segments) {
      parts.push({
        source: segment,
        target: bounds,
        start: points[start],
        end: points[end]
      });
      continue;
    }
    const targetSegments = _boundSegments(target, bounds);
    for (const tgt of targetSegments) {
      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
      const fillSources = _boundSegment(segment, points, subBounds);
      for (const fillSource of fillSources) {
        parts.push({
          source: fillSource,
          target: tgt,
          start: {
            [property]: _getEdge(bounds, subBounds, "start", Math.max)
          },
          end: {
            [property]: _getEdge(bounds, subBounds, "end", Math.min)
          }
        });
      }
    }
  }
  return parts;
}
function _getBounds(property, first, last, loop) {
  if (loop) {
    return;
  }
  let start = first[property];
  let end = last[property];
  if (property === "angle") {
    start = _normalizeAngle(start);
    end = _normalizeAngle(end);
  }
  return {
    property,
    start,
    end
  };
}
function _pointsFromSegments(boundary, line) {
  const { x: x2 = null, y: y3 = null } = boundary || {};
  const linePoints = line.points;
  const points = [];
  line.segments.forEach(({ start, end }) => {
    end = _findSegmentEnd(start, end, linePoints);
    const first = linePoints[start];
    const last = linePoints[end];
    if (y3 !== null) {
      points.push({
        x: first.x,
        y: y3
      });
      points.push({
        x: last.x,
        y: y3
      });
    } else if (x2 !== null) {
      points.push({
        x: x2,
        y: first.y
      });
      points.push({
        x: x2,
        y: last.y
      });
    }
  });
  return points;
}
function _findSegmentEnd(start, end, points) {
  for (; end > start; end--) {
    const point = points[end];
    if (!isNaN(point.x) && !isNaN(point.y)) {
      break;
    }
  }
  return end;
}
function _getEdge(a3, b2, prop, fn) {
  if (a3 && b2) {
    return fn(a3[prop], b2[prop]);
  }
  return a3 ? a3[prop] : b2 ? b2[prop] : 0;
}
function _createBoundaryLine(boundary, line) {
  let points = [];
  let _loop = false;
  if (isArray(boundary)) {
    _loop = true;
    points = boundary;
  } else {
    points = _pointsFromSegments(boundary, line);
  }
  return points.length ? new LineElement({
    points,
    options: {
      tension: 0
    },
    _loop,
    _fullLoop: _loop
  }) : null;
}
function _shouldApplyFill(source) {
  return source && source.fill !== false;
}
function _resolveTarget(sources, index2, propagate) {
  const source = sources[index2];
  let fill2 = source.fill;
  const visited = [
    index2
  ];
  let target;
  if (!propagate) {
    return fill2;
  }
  while (fill2 !== false && visited.indexOf(fill2) === -1) {
    if (!isNumberFinite(fill2)) {
      return fill2;
    }
    target = sources[fill2];
    if (!target) {
      return false;
    }
    if (target.visible) {
      return fill2;
    }
    visited.push(fill2);
    fill2 = target.fill;
  }
  return false;
}
function _decodeFill(line, index2, count) {
  const fill2 = parseFillOption(line);
  if (isObject(fill2)) {
    return isNaN(fill2.value) ? false : fill2;
  }
  let target = parseFloat(fill2);
  if (isNumberFinite(target) && Math.floor(target) === target) {
    return decodeTargetIndex(fill2[0], index2, target, count);
  }
  return [
    "origin",
    "start",
    "end",
    "stack",
    "shape"
  ].indexOf(fill2) >= 0 && fill2;
}
function decodeTargetIndex(firstCh, index2, target, count) {
  if (firstCh === "-" || firstCh === "+") {
    target = index2 + target;
  }
  if (target === index2 || target < 0 || target >= count) {
    return false;
  }
  return target;
}
function _getTargetPixel(fill2, scale) {
  let pixel = null;
  if (fill2 === "start") {
    pixel = scale.bottom;
  } else if (fill2 === "end") {
    pixel = scale.top;
  } else if (isObject(fill2)) {
    pixel = scale.getPixelForValue(fill2.value);
  } else if (scale.getBasePixel) {
    pixel = scale.getBasePixel();
  }
  return pixel;
}
function _getTargetValue(fill2, scale, startValue) {
  let value;
  if (fill2 === "start") {
    value = startValue;
  } else if (fill2 === "end") {
    value = scale.options.reverse ? scale.min : scale.max;
  } else if (isObject(fill2)) {
    value = fill2.value;
  } else {
    value = scale.getBaseValue();
  }
  return value;
}
function parseFillOption(line) {
  const options = line.options;
  const fillOption = options.fill;
  let fill2 = valueOrDefault(fillOption && fillOption.target, fillOption);
  if (fill2 === void 0) {
    fill2 = !!options.backgroundColor;
  }
  if (fill2 === false || fill2 === null) {
    return false;
  }
  if (fill2 === true) {
    return "origin";
  }
  return fill2;
}
function _buildStackLine(source) {
  const { scale, index: index2, line } = source;
  const points = [];
  const segments = line.segments;
  const sourcePoints = line.points;
  const linesBelow = getLinesBelow(scale, index2);
  linesBelow.push(_createBoundaryLine({
    x: null,
    y: scale.bottom
  }, line));
  for (let i2 = 0; i2 < segments.length; i2++) {
    const segment = segments[i2];
    for (let j = segment.start; j <= segment.end; j++) {
      addPointsBelow(points, sourcePoints[j], linesBelow);
    }
  }
  return new LineElement({
    points,
    options: {}
  });
}
function getLinesBelow(scale, index2) {
  const below = [];
  const metas = scale.getMatchingVisibleMetas("line");
  for (let i2 = 0; i2 < metas.length; i2++) {
    const meta = metas[i2];
    if (meta.index === index2) {
      break;
    }
    if (!meta.hidden) {
      below.unshift(meta.dataset);
    }
  }
  return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
  const postponed = [];
  for (let j = 0; j < linesBelow.length; j++) {
    const line = linesBelow[j];
    const { first, last, point } = findPoint(line, sourcePoint, "x");
    if (!point || first && last) {
      continue;
    }
    if (first) {
      postponed.unshift(point);
    } else {
      points.push(point);
      if (!last) {
        break;
      }
    }
  }
  points.push(...postponed);
}
function findPoint(line, sourcePoint, property) {
  const point = line.interpolate(sourcePoint, property);
  if (!point) {
    return {};
  }
  const pointValue = point[property];
  const segments = line.segments;
  const linePoints = line.points;
  let first = false;
  let last = false;
  for (let i2 = 0; i2 < segments.length; i2++) {
    const segment = segments[i2];
    const firstValue = linePoints[segment.start][property];
    const lastValue = linePoints[segment.end][property];
    if (_isBetween(pointValue, firstValue, lastValue)) {
      first = pointValue === firstValue;
      last = pointValue === lastValue;
      break;
    }
  }
  return {
    first,
    last,
    point
  };
}
class simpleArc {
  constructor(opts) {
    this.x = opts.x;
    this.y = opts.y;
    this.radius = opts.radius;
  }
  pathSegment(ctx, bounds, opts) {
    const { x: x2, y: y3, radius } = this;
    bounds = bounds || {
      start: 0,
      end: TAU
    };
    ctx.arc(x2, y3, radius, bounds.end, bounds.start, true);
    return !opts.bounds;
  }
  interpolate(point) {
    const { x: x2, y: y3, radius } = this;
    const angle = point.angle;
    return {
      x: x2 + Math.cos(angle) * radius,
      y: y3 + Math.sin(angle) * radius,
      angle
    };
  }
}
function _getTarget(source) {
  const { chart, fill: fill2, line } = source;
  if (isNumberFinite(fill2)) {
    return getLineByIndex(chart, fill2);
  }
  if (fill2 === "stack") {
    return _buildStackLine(source);
  }
  if (fill2 === "shape") {
    return true;
  }
  const boundary = computeBoundary(source);
  if (boundary instanceof simpleArc) {
    return boundary;
  }
  return _createBoundaryLine(boundary, line);
}
function getLineByIndex(chart, index2) {
  const meta = chart.getDatasetMeta(index2);
  const visible = meta && chart.isDatasetVisible(index2);
  return visible ? meta.dataset : null;
}
function computeBoundary(source) {
  const scale = source.scale || {};
  if (scale.getPointPositionForValue) {
    return computeCircularBoundary(source);
  }
  return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
  const { scale = {}, fill: fill2 } = source;
  const pixel = _getTargetPixel(fill2, scale);
  if (isNumberFinite(pixel)) {
    const horizontal = scale.isHorizontal();
    return {
      x: horizontal ? pixel : null,
      y: horizontal ? null : pixel
    };
  }
  return null;
}
function computeCircularBoundary(source) {
  const { scale, fill: fill2 } = source;
  const options = scale.options;
  const length = scale.getLabels().length;
  const start = options.reverse ? scale.max : scale.min;
  const value = _getTargetValue(fill2, scale, start);
  const target = [];
  if (options.grid.circular) {
    const center = scale.getPointPositionForValue(0, start);
    return new simpleArc({
      x: center.x,
      y: center.y,
      radius: scale.getDistanceFromCenterForValue(value)
    });
  }
  for (let i2 = 0; i2 < length; ++i2) {
    target.push(scale.getPointPositionForValue(i2, value));
  }
  return target;
}
function _drawfill(ctx, source, area) {
  const target = _getTarget(source);
  const { line, scale, axis } = source;
  const lineOpts = line.options;
  const fillOption = lineOpts.fill;
  const color2 = lineOpts.backgroundColor;
  const { above = color2, below = color2 } = fillOption || {};
  if (target && line.points.length) {
    clipArea(ctx, area);
    doFill(ctx, {
      line,
      target,
      above,
      below,
      area,
      scale,
      axis
    });
    unclipArea(ctx);
  }
}
function doFill(ctx, cfg) {
  const { line, target, above, below, area, scale } = cfg;
  const property = line._loop ? "angle" : cfg.axis;
  ctx.save();
  if (property === "x" && below !== above) {
    clipVertical(ctx, target, area.top);
    fill(ctx, {
      line,
      target,
      color: above,
      scale,
      property
    });
    ctx.restore();
    ctx.save();
    clipVertical(ctx, target, area.bottom);
  }
  fill(ctx, {
    line,
    target,
    color: below,
    scale,
    property
  });
  ctx.restore();
}
function clipVertical(ctx, target, clipY) {
  const { segments, points } = target;
  let first = true;
  let lineLoop = false;
  ctx.beginPath();
  for (const segment of segments) {
    const { start, end } = segment;
    const firstPoint = points[start];
    const lastPoint = points[_findSegmentEnd(start, end, points)];
    if (first) {
      ctx.moveTo(firstPoint.x, firstPoint.y);
      first = false;
    } else {
      ctx.lineTo(firstPoint.x, clipY);
      ctx.lineTo(firstPoint.x, firstPoint.y);
    }
    lineLoop = !!target.pathSegment(ctx, segment, {
      move: lineLoop
    });
    if (lineLoop) {
      ctx.closePath();
    } else {
      ctx.lineTo(lastPoint.x, clipY);
    }
  }
  ctx.lineTo(target.first().x, clipY);
  ctx.closePath();
  ctx.clip();
}
function fill(ctx, cfg) {
  const { line, target, property, color: color2, scale } = cfg;
  const segments = _segments(line, target, property);
  for (const { source: src, target: tgt, start, end } of segments) {
    const { style: { backgroundColor = color2 } = {} } = src;
    const notShape = target !== true;
    ctx.save();
    ctx.fillStyle = backgroundColor;
    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));
    ctx.beginPath();
    const lineLoop = !!line.pathSegment(ctx, src);
    let loop;
    if (notShape) {
      if (lineLoop) {
        ctx.closePath();
      } else {
        interpolatedLineTo(ctx, target, end, property);
      }
      const targetLoop = !!target.pathSegment(ctx, tgt, {
        move: lineLoop,
        reverse: true
      });
      loop = lineLoop && targetLoop;
      if (!loop) {
        interpolatedLineTo(ctx, target, start, property);
      }
    }
    ctx.closePath();
    ctx.fill(loop ? "evenodd" : "nonzero");
    ctx.restore();
  }
}
function clipBounds(ctx, scale, bounds) {
  const { top, bottom } = scale.chart.chartArea;
  const { property, start, end } = bounds || {};
  if (property === "x") {
    ctx.beginPath();
    ctx.rect(start, top, end - start, bottom - top);
    ctx.clip();
  }
}
function interpolatedLineTo(ctx, target, point, property) {
  const interpolatedPoint = target.interpolate(point, property);
  if (interpolatedPoint) {
    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
  }
}
var index = {
  id: "filler",
  afterDatasetsUpdate(chart, _args, options) {
    const count = (chart.data.datasets || []).length;
    const sources = [];
    let meta, i2, line, source;
    for (i2 = 0; i2 < count; ++i2) {
      meta = chart.getDatasetMeta(i2);
      line = meta.dataset;
      source = null;
      if (line && line.options && line instanceof LineElement) {
        source = {
          visible: chart.isDatasetVisible(i2),
          index: i2,
          fill: _decodeFill(line, i2, count),
          chart,
          axis: meta.controller.options.indexAxis,
          scale: meta.vScale,
          line
        };
      }
      meta.$filler = source;
      sources.push(source);
    }
    for (i2 = 0; i2 < count; ++i2) {
      source = sources[i2];
      if (!source || source.fill === false) {
        continue;
      }
      source.fill = _resolveTarget(sources, i2, options.propagate);
    }
  },
  beforeDraw(chart, _args, options) {
    const draw2 = options.drawTime === "beforeDraw";
    const metasets = chart.getSortedVisibleDatasetMetas();
    const area = chart.chartArea;
    for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
      const source = metasets[i2].$filler;
      if (!source) {
        continue;
      }
      source.line.updateControlPoints(area, source.axis);
      if (draw2 && source.fill) {
        _drawfill(chart.ctx, source, area);
      }
    }
  },
  beforeDatasetsDraw(chart, _args, options) {
    if (options.drawTime !== "beforeDatasetsDraw") {
      return;
    }
    const metasets = chart.getSortedVisibleDatasetMetas();
    for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
      const source = metasets[i2].$filler;
      if (_shouldApplyFill(source)) {
        _drawfill(chart.ctx, source, chart.chartArea);
      }
    }
  },
  beforeDatasetDraw(chart, args, options) {
    const source = args.meta.$filler;
    if (!_shouldApplyFill(source) || options.drawTime !== "beforeDatasetDraw") {
      return;
    }
    _drawfill(chart.ctx, source, chart.chartArea);
  },
  defaults: {
    propagate: true,
    drawTime: "beforeDatasetDraw"
  }
};
const getBoxSize = (labelOpts, fontSize) => {
  let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
  if (labelOpts.usePointStyle) {
    boxHeight = Math.min(boxHeight, fontSize);
    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
  }
  return {
    boxWidth,
    boxHeight,
    itemHeight: Math.max(fontSize, boxHeight)
  };
};
const itemsEqual = (a3, b2) => a3 !== null && b2 !== null && a3.datasetIndex === b2.datasetIndex && a3.index === b2.index;
class Legend extends Element$1 {
  constructor(config) {
    super();
    this._added = false;
    this.legendHitBoxes = [];
    this._hoveredItem = null;
    this.doughnutMode = false;
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this.legendItems = void 0;
    this.columnSizes = void 0;
    this.lineWidths = void 0;
    this.maxHeight = void 0;
    this.maxWidth = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.height = void 0;
    this.width = void 0;
    this._margins = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight, margins) {
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins;
    this.setDimensions();
    this.buildLabels();
    this.fit();
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = this._margins.left;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = this._margins.top;
      this.bottom = this.height;
    }
  }
  buildLabels() {
    const labelOpts = this.options.labels || {};
    let legendItems = callback(labelOpts.generateLabels, [
      this.chart
    ], this) || [];
    if (labelOpts.filter) {
      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));
    }
    if (labelOpts.sort) {
      legendItems = legendItems.sort((a3, b2) => labelOpts.sort(a3, b2, this.chart.data));
    }
    if (this.options.reverse) {
      legendItems.reverse();
    }
    this.legendItems = legendItems;
  }
  fit() {
    const { options, ctx } = this;
    if (!options.display) {
      this.width = this.height = 0;
      return;
    }
    const labelOpts = options.labels;
    const labelFont = toFont(labelOpts.font);
    const fontSize = labelFont.size;
    const titleHeight = this._computeTitleHeight();
    const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
    let width, height;
    ctx.font = labelFont.string;
    if (this.isHorizontal()) {
      width = this.maxWidth;
      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    } else {
      height = this.maxHeight;
      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
    }
    this.width = Math.min(width, options.maxWidth || this.maxWidth);
    this.height = Math.min(height, options.maxHeight || this.maxHeight);
  }
  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
    const { ctx, maxWidth, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const lineWidths = this.lineWidths = [
      0
    ];
    const lineHeight = itemHeight + padding;
    let totalHeight = titleHeight;
    ctx.textAlign = "left";
    ctx.textBaseline = "middle";
    let row = -1;
    let top = -lineHeight;
    this.legendItems.forEach((legendItem, i2) => {
      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
      if (i2 === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
        totalHeight += lineHeight;
        lineWidths[lineWidths.length - (i2 > 0 ? 0 : 1)] = 0;
        top += lineHeight;
        row++;
      }
      hitboxes[i2] = {
        left: 0,
        top,
        row,
        width: itemWidth,
        height: itemHeight
      };
      lineWidths[lineWidths.length - 1] += itemWidth + padding;
    });
    return totalHeight;
  }
  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
    const { ctx, maxHeight, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const columnSizes = this.columnSizes = [];
    const heightLimit = maxHeight - titleHeight;
    let totalWidth = padding;
    let currentColWidth = 0;
    let currentColHeight = 0;
    let left = 0;
    let col = 0;
    this.legendItems.forEach((legendItem, i2) => {
      const { itemWidth, itemHeight } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
      if (i2 > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
        totalWidth += currentColWidth + padding;
        columnSizes.push({
          width: currentColWidth,
          height: currentColHeight
        });
        left += currentColWidth + padding;
        col++;
        currentColWidth = currentColHeight = 0;
      }
      hitboxes[i2] = {
        left,
        top: currentColHeight,
        col,
        width: itemWidth,
        height: itemHeight
      };
      currentColWidth = Math.max(currentColWidth, itemWidth);
      currentColHeight += itemHeight + padding;
    });
    totalWidth += currentColWidth;
    columnSizes.push({
      width: currentColWidth,
      height: currentColHeight
    });
    return totalWidth;
  }
  adjustHitBoxes() {
    if (!this.options.display) {
      return;
    }
    const titleHeight = this._computeTitleHeight();
    const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
    if (this.isHorizontal()) {
      let row = 0;
      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
      for (const hitbox of hitboxes) {
        if (row !== hitbox.row) {
          row = hitbox.row;
          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
        }
        hitbox.top += this.top + titleHeight + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
        left += hitbox.width + padding;
      }
    } else {
      let col = 0;
      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
      for (const hitbox of hitboxes) {
        if (hitbox.col !== col) {
          col = hitbox.col;
          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
        }
        hitbox.top = top;
        hitbox.left += this.left + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
        top += hitbox.height + padding;
      }
    }
  }
  isHorizontal() {
    return this.options.position === "top" || this.options.position === "bottom";
  }
  draw() {
    if (this.options.display) {
      const ctx = this.ctx;
      clipArea(ctx, this);
      this._draw();
      unclipArea(ctx);
    }
  }
  _draw() {
    const { options: opts, columnSizes, lineWidths, ctx } = this;
    const { align, labels: labelOpts } = opts;
    const defaultColor = defaults.color;
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const labelFont = toFont(labelOpts.font);
    const { padding } = labelOpts;
    const fontSize = labelFont.size;
    const halfFontSize = fontSize / 2;
    let cursor;
    this.drawTitle();
    ctx.textAlign = rtlHelper.textAlign("left");
    ctx.textBaseline = "middle";
    ctx.lineWidth = 0.5;
    ctx.font = labelFont.string;
    const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
    const drawLegendBox = function(x2, y3, legendItem) {
      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
        return;
      }
      ctx.save();
      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
      ctx.lineCap = valueOrDefault(legendItem.lineCap, "butt");
      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, "miter");
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
      if (labelOpts.usePointStyle) {
        const drawOptions = {
          radius: boxHeight * Math.SQRT2 / 2,
          pointStyle: legendItem.pointStyle,
          rotation: legendItem.rotation,
          borderWidth: lineWidth
        };
        const centerX = rtlHelper.xPlus(x2, boxWidth / 2);
        const centerY = y3 + halfFontSize;
        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
      } else {
        const yBoxTop = y3 + Math.max((fontSize - boxHeight) / 2, 0);
        const xBoxLeft = rtlHelper.leftForLtr(x2, boxWidth);
        const borderRadius = toTRBLCorners(legendItem.borderRadius);
        ctx.beginPath();
        if (Object.values(borderRadius).some((v) => v !== 0)) {
          addRoundedRectPath(ctx, {
            x: xBoxLeft,
            y: yBoxTop,
            w: boxWidth,
            h: boxHeight,
            radius: borderRadius
          });
        } else {
          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
        }
        ctx.fill();
        if (lineWidth !== 0) {
          ctx.stroke();
        }
      }
      ctx.restore();
    };
    const fillText = function(x2, y3, legendItem) {
      renderText(ctx, legendItem.text, x2, y3 + itemHeight / 2, labelFont, {
        strikethrough: legendItem.hidden,
        textAlign: rtlHelper.textAlign(legendItem.textAlign)
      });
    };
    const isHorizontal = this.isHorizontal();
    const titleHeight = this._computeTitleHeight();
    if (isHorizontal) {
      cursor = {
        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
        y: this.top + padding + titleHeight,
        line: 0
      };
    } else {
      cursor = {
        x: this.left + padding,
        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
        line: 0
      };
    }
    overrideTextDirection(this.ctx, opts.textDirection);
    const lineHeight = itemHeight + padding;
    this.legendItems.forEach((legendItem, i2) => {
      ctx.strokeStyle = legendItem.fontColor;
      ctx.fillStyle = legendItem.fontColor;
      const textWidth = ctx.measureText(legendItem.text).width;
      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
      const width = boxWidth + halfFontSize + textWidth;
      let x2 = cursor.x;
      let y3 = cursor.y;
      rtlHelper.setWidth(this.width);
      if (isHorizontal) {
        if (i2 > 0 && x2 + width + padding > this.right) {
          y3 = cursor.y += lineHeight;
          cursor.line++;
          x2 = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);
        }
      } else if (i2 > 0 && y3 + lineHeight > this.bottom) {
        x2 = cursor.x = x2 + columnSizes[cursor.line].width + padding;
        cursor.line++;
        y3 = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
      }
      const realX = rtlHelper.x(x2);
      drawLegendBox(realX, y3, legendItem);
      x2 = _textX(textAlign, x2 + boxWidth + halfFontSize, isHorizontal ? x2 + width : this.right, opts.rtl);
      fillText(rtlHelper.x(x2), y3, legendItem);
      if (isHorizontal) {
        cursor.x += width + padding;
      } else if (typeof legendItem.text !== "string") {
        const fontLineHeight = labelFont.lineHeight;
        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);
      } else {
        cursor.y += lineHeight;
      }
    });
    restoreTextDirection(this.ctx, opts.textDirection);
  }
  drawTitle() {
    const opts = this.options;
    const titleOpts = opts.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    if (!titleOpts.display) {
      return;
    }
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const ctx = this.ctx;
    const position = titleOpts.position;
    const halfFontSize = titleFont.size / 2;
    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
    let y3;
    let left = this.left;
    let maxWidth = this.width;
    if (this.isHorizontal()) {
      maxWidth = Math.max(...this.lineWidths);
      y3 = this.top + topPaddingPlusHalfFontSize;
      left = _alignStartEnd(opts.align, left, this.right - maxWidth);
    } else {
      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
      y3 = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
    }
    const x2 = _alignStartEnd(position, left, left + maxWidth);
    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
    ctx.textBaseline = "middle";
    ctx.strokeStyle = titleOpts.color;
    ctx.fillStyle = titleOpts.color;
    ctx.font = titleFont.string;
    renderText(ctx, titleOpts.text, x2, y3, titleFont);
  }
  _computeTitleHeight() {
    const titleOpts = this.options.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
  }
  _getLegendItemAt(x2, y3) {
    let i2, hitBox, lh;
    if (_isBetween(x2, this.left, this.right) && _isBetween(y3, this.top, this.bottom)) {
      lh = this.legendHitBoxes;
      for (i2 = 0; i2 < lh.length; ++i2) {
        hitBox = lh[i2];
        if (_isBetween(x2, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y3, hitBox.top, hitBox.top + hitBox.height)) {
          return this.legendItems[i2];
        }
      }
    }
    return null;
  }
  handleEvent(e2) {
    const opts = this.options;
    if (!isListened(e2.type, opts)) {
      return;
    }
    const hoveredItem = this._getLegendItemAt(e2.x, e2.y);
    if (e2.type === "mousemove" || e2.type === "mouseout") {
      const previous = this._hoveredItem;
      const sameItem = itemsEqual(previous, hoveredItem);
      if (previous && !sameItem) {
        callback(opts.onLeave, [
          e2,
          previous,
          this
        ], this);
      }
      this._hoveredItem = hoveredItem;
      if (hoveredItem && !sameItem) {
        callback(opts.onHover, [
          e2,
          hoveredItem,
          this
        ], this);
      }
    } else if (hoveredItem) {
      callback(opts.onClick, [
        e2,
        hoveredItem,
        this
      ], this);
    }
  }
}
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
  return {
    itemWidth,
    itemHeight
  };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
  let legendItemText = legendItem.text;
  if (legendItemText && typeof legendItemText !== "string") {
    legendItemText = legendItemText.reduce((a3, b2) => a3.length > b2.length ? a3 : b2);
  }
  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
  let itemHeight = _itemHeight;
  if (typeof legendItem.text !== "string") {
    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
  }
  return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;
  return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
  if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) {
    return true;
  }
  if (opts.onClick && (type === "click" || type === "mouseup")) {
    return true;
  }
  return false;
}
var plugin_legend = {
  id: "legend",
  _element: Legend,
  start(chart, _args, options) {
    const legend = chart.legend = new Legend({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, legend, options);
    layouts.addBox(chart, legend);
  },
  stop(chart) {
    layouts.removeBox(chart, chart.legend);
    delete chart.legend;
  },
  beforeUpdate(chart, _args, options) {
    const legend = chart.legend;
    layouts.configure(chart, legend, options);
    legend.options = options;
  },
  afterUpdate(chart) {
    const legend = chart.legend;
    legend.buildLabels();
    legend.adjustHitBoxes();
  },
  afterEvent(chart, args) {
    if (!args.replay) {
      chart.legend.handleEvent(args.event);
    }
  },
  defaults: {
    display: true,
    position: "top",
    align: "center",
    fullSize: true,
    reverse: false,
    weight: 1e3,
    onClick(e2, legendItem, legend) {
      const index2 = legendItem.datasetIndex;
      const ci = legend.chart;
      if (ci.isDatasetVisible(index2)) {
        ci.hide(index2);
        legendItem.hidden = true;
      } else {
        ci.show(index2);
        legendItem.hidden = false;
      }
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: (ctx) => ctx.chart.options.color,
      boxWidth: 40,
      padding: 10,
      generateLabels(chart) {
        const datasets = chart.data.datasets;
        const { labels: { usePointStyle, pointStyle, textAlign, color: color2, useBorderRadius, borderRadius } } = chart.legend.options;
        return chart._getSortedDatasetMetas().map((meta) => {
          const style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
          const borderWidth = toPadding(style.borderWidth);
          return {
            text: datasets[meta.index].label,
            fillStyle: style.backgroundColor,
            fontColor: color2,
            hidden: !meta.visible,
            lineCap: style.borderCapStyle,
            lineDash: style.borderDash,
            lineDashOffset: style.borderDashOffset,
            lineJoin: style.borderJoinStyle,
            lineWidth: (borderWidth.width + borderWidth.height) / 4,
            strokeStyle: style.borderColor,
            pointStyle: pointStyle || style.pointStyle,
            rotation: style.rotation,
            textAlign: textAlign || style.textAlign,
            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
            datasetIndex: meta.index
          };
        }, this);
      }
    },
    title: {
      color: (ctx) => ctx.chart.options.color,
      display: false,
      position: "center",
      text: ""
    }
  },
  descriptors: {
    _scriptable: (name) => !name.startsWith("on"),
    labels: {
      _scriptable: (name) => ![
        "generateLabels",
        "filter",
        "sort"
      ].includes(name)
    }
  }
};
class Title extends Element$1 {
  constructor(config) {
    super();
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this._padding = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight) {
    const opts = this.options;
    this.left = 0;
    this.top = 0;
    if (!opts.display) {
      this.width = this.height = this.right = this.bottom = 0;
      return;
    }
    this.width = this.right = maxWidth;
    this.height = this.bottom = maxHeight;
    const lineCount = isArray(opts.text) ? opts.text.length : 1;
    this._padding = toPadding(opts.padding);
    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
    if (this.isHorizontal()) {
      this.height = textSize;
    } else {
      this.width = textSize;
    }
  }
  isHorizontal() {
    const pos = this.options.position;
    return pos === "top" || pos === "bottom";
  }
  _drawArgs(offset) {
    const { top, left, bottom, right, options } = this;
    const align = options.align;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    if (this.isHorizontal()) {
      titleX = _alignStartEnd(align, left, right);
      titleY = top + offset;
      maxWidth = right - left;
    } else {
      if (options.position === "left") {
        titleX = left + offset;
        titleY = _alignStartEnd(align, bottom, top);
        rotation = PI * -0.5;
      } else {
        titleX = right - offset;
        titleY = _alignStartEnd(align, top, bottom);
        rotation = PI * 0.5;
      }
      maxWidth = bottom - top;
    }
    return {
      titleX,
      titleY,
      maxWidth,
      rotation
    };
  }
  draw() {
    const ctx = this.ctx;
    const opts = this.options;
    if (!opts.display) {
      return;
    }
    const fontOpts = toFont(opts.font);
    const lineHeight = fontOpts.lineHeight;
    const offset = lineHeight / 2 + this._padding.top;
    const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
    renderText(ctx, opts.text, 0, 0, fontOpts, {
      color: opts.color,
      maxWidth,
      rotation,
      textAlign: _toLeftRightCenter(opts.align),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
}
function createTitle(chart, titleOpts) {
  const title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}
var plugin_title = {
  id: "title",
  _element: Title,
  start(chart, _args, options) {
    createTitle(chart, options);
  },
  stop(chart) {
    const titleBlock = chart.titleBlock;
    layouts.removeBox(chart, titleBlock);
    delete chart.titleBlock;
  },
  beforeUpdate(chart, _args, options) {
    const title = chart.titleBlock;
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "bold"
    },
    fullSize: true,
    padding: 10,
    position: "top",
    text: "",
    weight: 2e3
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
const map = /* @__PURE__ */ new WeakMap();
var plugin_subtitle = {
  id: "subtitle",
  start(chart, _args, options) {
    const title = new Title({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, title, options);
    layouts.addBox(chart, title);
    map.set(chart, title);
  },
  stop(chart) {
    layouts.removeBox(chart, map.get(chart));
    map.delete(chart);
  },
  beforeUpdate(chart, _args, options) {
    const title = map.get(chart);
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "normal"
    },
    fullSize: true,
    padding: 0,
    position: "top",
    text: "",
    weight: 1500
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
const positioners = {
  average(items) {
    if (!items.length) {
      return false;
    }
    let i2, len;
    let x2 = 0;
    let y3 = 0;
    let count = 0;
    for (i2 = 0, len = items.length; i2 < len; ++i2) {
      const el = items[i2].element;
      if (el && el.hasValue()) {
        const pos = el.tooltipPosition();
        x2 += pos.x;
        y3 += pos.y;
        ++count;
      }
    }
    return {
      x: x2 / count,
      y: y3 / count
    };
  },
  nearest(items, eventPosition) {
    if (!items.length) {
      return false;
    }
    let x2 = eventPosition.x;
    let y3 = eventPosition.y;
    let minDistance = Number.POSITIVE_INFINITY;
    let i2, len, nearestElement;
    for (i2 = 0, len = items.length; i2 < len; ++i2) {
      const el = items[i2].element;
      if (el && el.hasValue()) {
        const center = el.getCenterPoint();
        const d3 = distanceBetweenPoints(eventPosition, center);
        if (d3 < minDistance) {
          minDistance = d3;
          nearestElement = el;
        }
      }
    }
    if (nearestElement) {
      const tp = nearestElement.tooltipPosition();
      x2 = tp.x;
      y3 = tp.y;
    }
    return {
      x: x2,
      y: y3
    };
  }
};
function pushOrConcat(base2, toPush) {
  if (toPush) {
    if (isArray(toPush)) {
      Array.prototype.push.apply(base2, toPush);
    } else {
      base2.push(toPush);
    }
  }
  return base2;
}
function splitNewlines(str) {
  if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
    return str.split("\n");
  }
  return str;
}
function createTooltipItem(chart, item) {
  const { element: element2, datasetIndex, index: index2 } = item;
  const controller = chart.getDatasetMeta(datasetIndex).controller;
  const { label, value } = controller.getLabelAndValue(index2);
  return {
    chart,
    label,
    parsed: controller.getParsed(index2),
    raw: chart.data.datasets[datasetIndex].data[index2],
    formattedValue: value,
    dataset: controller.getDataset(),
    dataIndex: index2,
    datasetIndex,
    element: element2
  };
}
function getTooltipSize(tooltip, options) {
  const ctx = tooltip.chart.ctx;
  const { body, footer, title } = tooltip;
  const { boxWidth, boxHeight } = options;
  const bodyFont = toFont(options.bodyFont);
  const titleFont = toFont(options.titleFont);
  const footerFont = toFont(options.footerFont);
  const titleLineCount = title.length;
  const footerLineCount = footer.length;
  const bodyLineItemCount = body.length;
  const padding = toPadding(options.padding);
  let height = padding.height;
  let width = 0;
  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
  if (titleLineCount) {
    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
  }
  if (combinedBodyLength) {
    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
  }
  if (footerLineCount) {
    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
  }
  let widthPadding = 0;
  const maxLineWidth = function(line) {
    width = Math.max(width, ctx.measureText(line).width + widthPadding);
  };
  ctx.save();
  ctx.font = titleFont.string;
  each(tooltip.title, maxLineWidth);
  ctx.font = bodyFont.string;
  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
  each(body, (bodyItem) => {
    each(bodyItem.before, maxLineWidth);
    each(bodyItem.lines, maxLineWidth);
    each(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = footerFont.string;
  each(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += padding.width;
  return {
    width,
    height
  };
}
function determineYAlign(chart, size) {
  const { y: y3, height } = size;
  if (y3 < height / 2) {
    return "top";
  } else if (y3 > chart.height - height / 2) {
    return "bottom";
  }
  return "center";
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
  const { x: x2, width } = size;
  const caret = options.caretSize + options.caretPadding;
  if (xAlign === "left" && x2 + width + caret > chart.width) {
    return true;
  }
  if (xAlign === "right" && x2 - width - caret < 0) {
    return true;
  }
}
function determineXAlign(chart, options, size, yAlign) {
  const { x: x2, width } = size;
  const { width: chartWidth, chartArea: { left, right } } = chart;
  let xAlign = "center";
  if (yAlign === "center") {
    xAlign = x2 <= (left + right) / 2 ? "left" : "right";
  } else if (x2 <= width / 2) {
    xAlign = "left";
  } else if (x2 >= chartWidth - width / 2) {
    xAlign = "right";
  }
  if (doesNotFitWithAlign(xAlign, chart, options, size)) {
    xAlign = "center";
  }
  return xAlign;
}
function determineAlignment(chart, options, size) {
  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
  return {
    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
    yAlign
  };
}
function alignX(size, xAlign) {
  let { x: x2, width } = size;
  if (xAlign === "right") {
    x2 -= width;
  } else if (xAlign === "center") {
    x2 -= width / 2;
  }
  return x2;
}
function alignY(size, yAlign, paddingAndSize) {
  let { y: y3, height } = size;
  if (yAlign === "top") {
    y3 += paddingAndSize;
  } else if (yAlign === "bottom") {
    y3 -= height + paddingAndSize;
  } else {
    y3 -= height / 2;
  }
  return y3;
}
function getBackgroundPoint(options, size, alignment, chart) {
  const { caretSize, caretPadding, cornerRadius } = options;
  const { xAlign, yAlign } = alignment;
  const paddingAndSize = caretSize + caretPadding;
  const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
  let x2 = alignX(size, xAlign);
  const y3 = alignY(size, yAlign, paddingAndSize);
  if (yAlign === "center") {
    if (xAlign === "left") {
      x2 += paddingAndSize;
    } else if (xAlign === "right") {
      x2 -= paddingAndSize;
    }
  } else if (xAlign === "left") {
    x2 -= Math.max(topLeft, bottomLeft) + caretSize;
  } else if (xAlign === "right") {
    x2 += Math.max(topRight, bottomRight) + caretSize;
  }
  return {
    x: _limitValue(x2, 0, chart.width - size.width),
    y: _limitValue(y3, 0, chart.height - size.height)
  };
}
function getAlignedX(tooltip, align, options) {
  const padding = toPadding(options.padding);
  return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback2) {
  return pushOrConcat([], splitNewlines(callback2));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
  return createContext(parent, {
    tooltip,
    tooltipItems,
    type: "tooltip"
  });
}
function overrideCallbacks(callbacks, context) {
  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
  return override ? callbacks.override(override) : callbacks;
}
const defaultCallbacks = {
  beforeTitle: noop,
  title(tooltipItems) {
    if (tooltipItems.length > 0) {
      const item = tooltipItems[0];
      const labels = item.chart.data.labels;
      const labelCount = labels ? labels.length : 0;
      if (this && this.options && this.options.mode === "dataset") {
        return item.dataset.label || "";
      } else if (item.label) {
        return item.label;
      } else if (labelCount > 0 && item.dataIndex < labelCount) {
        return labels[item.dataIndex];
      }
    }
    return "";
  },
  afterTitle: noop,
  beforeBody: noop,
  beforeLabel: noop,
  label(tooltipItem) {
    if (this && this.options && this.options.mode === "dataset") {
      return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
    }
    let label = tooltipItem.dataset.label || "";
    if (label) {
      label += ": ";
    }
    const value = tooltipItem.formattedValue;
    if (!isNullOrUndef(value)) {
      label += value;
    }
    return label;
  },
  labelColor(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      borderColor: options.borderColor,
      backgroundColor: options.backgroundColor,
      borderWidth: options.borderWidth,
      borderDash: options.borderDash,
      borderDashOffset: options.borderDashOffset,
      borderRadius: 0
    };
  },
  labelTextColor() {
    return this.options.bodyColor;
  },
  labelPointStyle(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      pointStyle: options.pointStyle,
      rotation: options.rotation
    };
  },
  afterLabel: noop,
  afterBody: noop,
  beforeFooter: noop,
  footer: noop,
  afterFooter: noop
};
function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
  const result = callbacks[name].call(ctx, arg);
  if (typeof result === "undefined") {
    return defaultCallbacks[name].call(ctx, arg);
  }
  return result;
}
class Tooltip extends Element$1 {
  constructor(config) {
    super();
    this.opacity = 0;
    this._active = [];
    this._eventPosition = void 0;
    this._size = void 0;
    this._cachedAnimations = void 0;
    this._tooltipItems = [];
    this.$animations = void 0;
    this.$context = void 0;
    this.chart = config.chart;
    this.options = config.options;
    this.dataPoints = void 0;
    this.title = void 0;
    this.beforeBody = void 0;
    this.body = void 0;
    this.afterBody = void 0;
    this.footer = void 0;
    this.xAlign = void 0;
    this.yAlign = void 0;
    this.x = void 0;
    this.y = void 0;
    this.height = void 0;
    this.width = void 0;
    this.caretX = void 0;
    this.caretY = void 0;
    this.labelColors = void 0;
    this.labelPointStyles = void 0;
    this.labelTextColors = void 0;
  }
  initialize(options) {
    this.options = options;
    this._cachedAnimations = void 0;
    this.$context = void 0;
  }
  _resolveAnimations() {
    const cached = this._cachedAnimations;
    if (cached) {
      return cached;
    }
    const chart = this.chart;
    const options = this.options.setContext(this.getContext());
    const opts = options.enabled && chart.options.animation && options.animations;
    const animations = new Animations(this.chart, opts);
    if (opts._cacheable) {
      this._cachedAnimations = Object.freeze(animations);
    }
    return animations;
  }
  getContext() {
    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
  }
  getTitle(context, options) {
    const { callbacks } = options;
    const beforeTitle = invokeCallbackWithFallback(callbacks, "beforeTitle", this, context);
    const title = invokeCallbackWithFallback(callbacks, "title", this, context);
    const afterTitle = invokeCallbackWithFallback(callbacks, "afterTitle", this, context);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    lines = pushOrConcat(lines, splitNewlines(title));
    lines = pushOrConcat(lines, splitNewlines(afterTitle));
    return lines;
  }
  getBeforeBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "beforeBody", this, tooltipItems));
  }
  getBody(tooltipItems, options) {
    const { callbacks } = options;
    const bodyItems = [];
    each(tooltipItems, (context) => {
      const bodyItem = {
        before: [],
        lines: [],
        after: []
      };
      const scoped = overrideCallbacks(callbacks, context);
      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, "beforeLabel", this, context)));
      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, "label", this, context));
      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, "afterLabel", this, context)));
      bodyItems.push(bodyItem);
    });
    return bodyItems;
  }
  getAfterBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "afterBody", this, tooltipItems));
  }
  getFooter(tooltipItems, options) {
    const { callbacks } = options;
    const beforeFooter = invokeCallbackWithFallback(callbacks, "beforeFooter", this, tooltipItems);
    const footer = invokeCallbackWithFallback(callbacks, "footer", this, tooltipItems);
    const afterFooter = invokeCallbackWithFallback(callbacks, "afterFooter", this, tooltipItems);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    lines = pushOrConcat(lines, splitNewlines(footer));
    lines = pushOrConcat(lines, splitNewlines(afterFooter));
    return lines;
  }
  _createItems(options) {
    const active = this._active;
    const data = this.chart.data;
    const labelColors = [];
    const labelPointStyles = [];
    const labelTextColors = [];
    let tooltipItems = [];
    let i2, len;
    for (i2 = 0, len = active.length; i2 < len; ++i2) {
      tooltipItems.push(createTooltipItem(this.chart, active[i2]));
    }
    if (options.filter) {
      tooltipItems = tooltipItems.filter((element2, index2, array) => options.filter(element2, index2, array, data));
    }
    if (options.itemSort) {
      tooltipItems = tooltipItems.sort((a3, b2) => options.itemSort(a3, b2, data));
    }
    each(tooltipItems, (context) => {
      const scoped = overrideCallbacks(options.callbacks, context);
      labelColors.push(invokeCallbackWithFallback(scoped, "labelColor", this, context));
      labelPointStyles.push(invokeCallbackWithFallback(scoped, "labelPointStyle", this, context));
      labelTextColors.push(invokeCallbackWithFallback(scoped, "labelTextColor", this, context));
    });
    this.labelColors = labelColors;
    this.labelPointStyles = labelPointStyles;
    this.labelTextColors = labelTextColors;
    this.dataPoints = tooltipItems;
    return tooltipItems;
  }
  update(changed, replay) {
    const options = this.options.setContext(this.getContext());
    const active = this._active;
    let properties;
    let tooltipItems = [];
    if (!active.length) {
      if (this.opacity !== 0) {
        properties = {
          opacity: 0
        };
      }
    } else {
      const position = positioners[options.position].call(this, active, this._eventPosition);
      tooltipItems = this._createItems(options);
      this.title = this.getTitle(tooltipItems, options);
      this.beforeBody = this.getBeforeBody(tooltipItems, options);
      this.body = this.getBody(tooltipItems, options);
      this.afterBody = this.getAfterBody(tooltipItems, options);
      this.footer = this.getFooter(tooltipItems, options);
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, size);
      const alignment = determineAlignment(this.chart, options, positionAndSize);
      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
      this.xAlign = alignment.xAlign;
      this.yAlign = alignment.yAlign;
      properties = {
        opacity: 1,
        x: backgroundPoint.x,
        y: backgroundPoint.y,
        width: size.width,
        height: size.height,
        caretX: position.x,
        caretY: position.y
      };
    }
    this._tooltipItems = tooltipItems;
    this.$context = void 0;
    if (properties) {
      this._resolveAnimations().update(this, properties);
    }
    if (changed && options.external) {
      options.external.call(this, {
        chart: this.chart,
        tooltip: this,
        replay
      });
    }
  }
  drawCaret(tooltipPoint, ctx, size, options) {
    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
    ctx.lineTo(caretPosition.x1, caretPosition.y1);
    ctx.lineTo(caretPosition.x2, caretPosition.y2);
    ctx.lineTo(caretPosition.x3, caretPosition.y3);
  }
  getCaretPosition(tooltipPoint, size, options) {
    const { xAlign, yAlign } = this;
    const { caretSize, cornerRadius } = options;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
    const { x: ptX, y: ptY } = tooltipPoint;
    const { width, height } = size;
    let x1, x2, x3, y1, y22, y3;
    if (yAlign === "center") {
      y22 = ptY + height / 2;
      if (xAlign === "left") {
        x1 = ptX;
        x2 = x1 - caretSize;
        y1 = y22 + caretSize;
        y3 = y22 - caretSize;
      } else {
        x1 = ptX + width;
        x2 = x1 + caretSize;
        y1 = y22 - caretSize;
        y3 = y22 + caretSize;
      }
      x3 = x1;
    } else {
      if (xAlign === "left") {
        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
      } else if (xAlign === "right") {
        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
      } else {
        x2 = this.caretX;
      }
      if (yAlign === "top") {
        y1 = ptY;
        y22 = y1 - caretSize;
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
      } else {
        y1 = ptY + height;
        y22 = y1 + caretSize;
        x1 = x2 + caretSize;
        x3 = x2 - caretSize;
      }
      y3 = y1;
    }
    return {
      x1,
      x2,
      x3,
      y1,
      y2: y22,
      y3
    };
  }
  drawTitle(pt, ctx, options) {
    const title = this.title;
    const length = title.length;
    let titleFont, titleSpacing, i2;
    if (length) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.titleAlign, options);
      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
      ctx.textBaseline = "middle";
      titleFont = toFont(options.titleFont);
      titleSpacing = options.titleSpacing;
      ctx.fillStyle = options.titleColor;
      ctx.font = titleFont.string;
      for (i2 = 0; i2 < length; ++i2) {
        ctx.fillText(title[i2], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
        pt.y += titleFont.lineHeight + titleSpacing;
        if (i2 + 1 === length) {
          pt.y += options.titleMarginBottom - titleSpacing;
        }
      }
    }
  }
  _drawColorBox(ctx, pt, i2, rtlHelper, options) {
    const labelColor = this.labelColors[i2];
    const labelPointStyle = this.labelPointStyles[i2];
    const { boxHeight, boxWidth } = options;
    const bodyFont = toFont(options.bodyFont);
    const colorX = getAlignedX(this, "left", options);
    const rtlColorX = rtlHelper.x(colorX);
    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
    const colorY = pt.y + yOffSet;
    if (options.usePointStyle) {
      const drawOptions = {
        radius: Math.min(boxWidth, boxHeight) / 2,
        pointStyle: labelPointStyle.pointStyle,
        rotation: labelPointStyle.rotation,
        borderWidth: 1
      };
      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
      const centerY = colorY + boxHeight / 2;
      ctx.strokeStyle = options.multiKeyBackground;
      ctx.fillStyle = options.multiKeyBackground;
      drawPoint(ctx, drawOptions, centerX, centerY);
      ctx.strokeStyle = labelColor.borderColor;
      ctx.fillStyle = labelColor.backgroundColor;
      drawPoint(ctx, drawOptions, centerX, centerY);
    } else {
      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
      ctx.strokeStyle = labelColor.borderColor;
      ctx.setLineDash(labelColor.borderDash || []);
      ctx.lineDashOffset = labelColor.borderDashOffset || 0;
      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
      const borderRadius = toTRBLCorners(labelColor.borderRadius);
      if (Object.values(borderRadius).some((v) => v !== 0)) {
        ctx.beginPath();
        ctx.fillStyle = options.multiKeyBackground;
        addRoundedRectPath(ctx, {
          x: outerX,
          y: colorY,
          w: boxWidth,
          h: boxHeight,
          radius: borderRadius
        });
        ctx.fill();
        ctx.stroke();
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.beginPath();
        addRoundedRectPath(ctx, {
          x: innerX,
          y: colorY + 1,
          w: boxWidth - 2,
          h: boxHeight - 2,
          radius: borderRadius
        });
        ctx.fill();
      } else {
        ctx.fillStyle = options.multiKeyBackground;
        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
      }
    }
    ctx.fillStyle = this.labelTextColors[i2];
  }
  drawBody(pt, ctx, options) {
    const { body } = this;
    const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options;
    const bodyFont = toFont(options.bodyFont);
    let bodyLineHeight = bodyFont.lineHeight;
    let xLinePadding = 0;
    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
    const fillLineOfText = function(line) {
      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
      pt.y += bodyLineHeight + bodySpacing;
    };
    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
    let bodyItem, textColor, lines, i2, j, ilen, jlen;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = "middle";
    ctx.font = bodyFont.string;
    pt.x = getAlignedX(this, bodyAlignForCalculation, options);
    ctx.fillStyle = options.bodyColor;
    each(this.beforeBody, fillLineOfText);
    xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
    for (i2 = 0, ilen = body.length; i2 < ilen; ++i2) {
      bodyItem = body[i2];
      textColor = this.labelTextColors[i2];
      ctx.fillStyle = textColor;
      each(bodyItem.before, fillLineOfText);
      lines = bodyItem.lines;
      if (displayColors && lines.length) {
        this._drawColorBox(ctx, pt, i2, rtlHelper, options);
        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
      }
      for (j = 0, jlen = lines.length; j < jlen; ++j) {
        fillLineOfText(lines[j]);
        bodyLineHeight = bodyFont.lineHeight;
      }
      each(bodyItem.after, fillLineOfText);
    }
    xLinePadding = 0;
    bodyLineHeight = bodyFont.lineHeight;
    each(this.afterBody, fillLineOfText);
    pt.y -= bodySpacing;
  }
  drawFooter(pt, ctx, options) {
    const footer = this.footer;
    const length = footer.length;
    let footerFont, i2;
    if (length) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.footerAlign, options);
      pt.y += options.footerMarginTop;
      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
      ctx.textBaseline = "middle";
      footerFont = toFont(options.footerFont);
      ctx.fillStyle = options.footerColor;
      ctx.font = footerFont.string;
      for (i2 = 0; i2 < length; ++i2) {
        ctx.fillText(footer[i2], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
        pt.y += footerFont.lineHeight + options.footerSpacing;
      }
    }
  }
  drawBackground(pt, ctx, tooltipSize, options) {
    const { xAlign, yAlign } = this;
    const { x: x2, y: y3 } = pt;
    const { width, height } = tooltipSize;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(options.cornerRadius);
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.beginPath();
    ctx.moveTo(x2 + topLeft, y3);
    if (yAlign === "top") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + width - topRight, y3);
    ctx.quadraticCurveTo(x2 + width, y3, x2 + width, y3 + topRight);
    if (yAlign === "center" && xAlign === "right") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + width, y3 + height - bottomRight);
    ctx.quadraticCurveTo(x2 + width, y3 + height, x2 + width - bottomRight, y3 + height);
    if (yAlign === "bottom") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + bottomLeft, y3 + height);
    ctx.quadraticCurveTo(x2, y3 + height, x2, y3 + height - bottomLeft);
    if (yAlign === "center" && xAlign === "left") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2, y3 + topLeft);
    ctx.quadraticCurveTo(x2, y3, x2 + topLeft, y3);
    ctx.closePath();
    ctx.fill();
    if (options.borderWidth > 0) {
      ctx.stroke();
    }
  }
  _updateAnimationTarget(options) {
    const chart = this.chart;
    const anims = this.$animations;
    const animX = anims && anims.x;
    const animY = anims && anims.y;
    if (animX || animY) {
      const position = positioners[options.position].call(this, this._active, this._eventPosition);
      if (!position) {
        return;
      }
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, this._size);
      const alignment = determineAlignment(chart, options, positionAndSize);
      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
      if (animX._to !== point.x || animY._to !== point.y) {
        this.xAlign = alignment.xAlign;
        this.yAlign = alignment.yAlign;
        this.width = size.width;
        this.height = size.height;
        this.caretX = position.x;
        this.caretY = position.y;
        this._resolveAnimations().update(this, point);
      }
    }
  }
  _willRender() {
    return !!this.opacity;
  }
  draw(ctx) {
    const options = this.options.setContext(this.getContext());
    let opacity = this.opacity;
    if (!opacity) {
      return;
    }
    this._updateAnimationTarget(options);
    const tooltipSize = {
      width: this.width,
      height: this.height
    };
    const pt = {
      x: this.x,
      y: this.y
    };
    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
    const padding = toPadding(options.padding);
    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
    if (options.enabled && hasTooltipContent) {
      ctx.save();
      ctx.globalAlpha = opacity;
      this.drawBackground(pt, ctx, tooltipSize, options);
      overrideTextDirection(ctx, options.textDirection);
      pt.y += padding.top;
      this.drawTitle(pt, ctx, options);
      this.drawBody(pt, ctx, options);
      this.drawFooter(pt, ctx, options);
      restoreTextDirection(ctx, options.textDirection);
      ctx.restore();
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements, eventPosition) {
    const lastActive = this._active;
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.chart.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("Cannot find a dataset at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(lastActive, active);
    const positionChanged = this._positionChanged(active, eventPosition);
    if (changed || positionChanged) {
      this._active = active;
      this._eventPosition = eventPosition;
      this._ignoreReplayEvents = true;
      this.update(true);
    }
  }
  handleEvent(e2, replay, inChartArea = true) {
    if (replay && this._ignoreReplayEvents) {
      return false;
    }
    this._ignoreReplayEvents = false;
    const options = this.options;
    const lastActive = this._active || [];
    const active = this._getActiveElements(e2, lastActive, replay, inChartArea);
    const positionChanged = this._positionChanged(active, e2);
    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
    if (changed) {
      this._active = active;
      if (options.enabled || options.external) {
        this._eventPosition = {
          x: e2.x,
          y: e2.y
        };
        this.update(true, replay);
      }
    }
    return changed;
  }
  _getActiveElements(e2, lastActive, replay, inChartArea) {
    const options = this.options;
    if (e2.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const active = this.chart.getElementsAtEventForMode(e2, options.mode, options, replay);
    if (options.reverse) {
      active.reverse();
    }
    return active;
  }
  _positionChanged(active, e2) {
    const { caretX, caretY, options } = this;
    const position = positioners[options.position].call(this, active, e2);
    return position !== false && (caretX !== position.x || caretY !== position.y);
  }
}
__publicField(Tooltip, "positioners", positioners);
var plugin_tooltip = {
  id: "tooltip",
  _element: Tooltip,
  positioners,
  afterInit(chart, _args, options) {
    if (options) {
      chart.tooltip = new Tooltip({
        chart,
        options
      });
    }
  },
  beforeUpdate(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  reset(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  afterDraw(chart) {
    const tooltip = chart.tooltip;
    if (tooltip && tooltip._willRender()) {
      const args = {
        tooltip
      };
      if (chart.notifyPlugins("beforeTooltipDraw", {
        ...args,
        cancelable: true
      }) === false) {
        return;
      }
      tooltip.draw(chart.ctx);
      chart.notifyPlugins("afterTooltipDraw", args);
    }
  },
  afterEvent(chart, args) {
    if (chart.tooltip) {
      const useFinalPosition = args.replay;
      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
        args.changed = true;
      }
    }
  },
  defaults: {
    enabled: true,
    external: null,
    position: "average",
    backgroundColor: "rgba(0,0,0,0.8)",
    titleColor: "#fff",
    titleFont: {
      weight: "bold"
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: "left",
    bodyColor: "#fff",
    bodySpacing: 2,
    bodyFont: {},
    bodyAlign: "left",
    footerColor: "#fff",
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: "bold"
    },
    footerAlign: "left",
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (ctx, opts) => opts.bodyFont.size,
    boxWidth: (ctx, opts) => opts.bodyFont.size,
    multiKeyBackground: "#fff",
    displayColors: true,
    boxPadding: 0,
    borderColor: "rgba(0,0,0,0)",
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: "easeOutQuart"
    },
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "width",
          "height",
          "caretX",
          "caretY"
        ]
      },
      opacity: {
        easing: "linear",
        duration: 200
      }
    },
    callbacks: defaultCallbacks
  },
  defaultRoutes: {
    bodyFont: "font",
    footerFont: "font",
    titleFont: "font"
  },
  descriptors: {
    _scriptable: (name) => name !== "filter" && name !== "itemSort" && name !== "external",
    _indexable: false,
    callbacks: {
      _scriptable: false,
      _indexable: false
    },
    animation: {
      _fallback: false
    },
    animations: {
      _fallback: "animation"
    }
  },
  additionalOptionScopes: [
    "interaction"
  ]
};
var plugins = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  Colors: plugin_colors,
  Decimation: plugin_decimation,
  Filler: index,
  Legend: plugin_legend,
  SubTitle: plugin_subtitle,
  Title: plugin_title,
  Tooltip: plugin_tooltip
});
const addIfString = (labels, raw, index2, addedLabels) => {
  if (typeof raw === "string") {
    index2 = labels.push(raw) - 1;
    addedLabels.unshift({
      index: index2,
      label: raw
    });
  } else if (isNaN(raw)) {
    index2 = null;
  }
  return index2;
};
function findOrAddLabel(labels, raw, index2, addedLabels) {
  const first = labels.indexOf(raw);
  if (first === -1) {
    return addIfString(labels, raw, index2, addedLabels);
  }
  const last = labels.lastIndexOf(raw);
  return first !== last ? index2 : first;
}
const validIndex = (index2, max) => index2 === null ? null : _limitValue(Math.round(index2), 0, max);
function _getLabelForValue(value) {
  const labels = this.getLabels();
  if (value >= 0 && value < labels.length) {
    return labels[value];
  }
  return value;
}
class CategoryScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this._startValue = void 0;
    this._valueRange = 0;
    this._addedLabels = [];
  }
  init(scaleOptions) {
    const added = this._addedLabels;
    if (added.length) {
      const labels = this.getLabels();
      for (const { index: index2, label } of added) {
        if (labels[index2] === label) {
          labels.splice(index2, 1);
        }
      }
      this._addedLabels = [];
    }
    super.init(scaleOptions);
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    const labels = this.getLabels();
    index2 = isFinite(index2) && labels[index2] === raw ? index2 : findOrAddLabel(labels, raw, valueOrDefault(index2, raw), this._addedLabels);
    return validIndex(index2, labels.length - 1);
  }
  determineDataLimits() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this.getMinMax(true);
    if (this.options.bounds === "ticks") {
      if (!minDefined) {
        min = 0;
      }
      if (!maxDefined) {
        max = this.getLabels().length - 1;
      }
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const min = this.min;
    const max = this.max;
    const offset = this.options.offset;
    const ticks = [];
    let labels = this.getLabels();
    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
    this._startValue = this.min - (offset ? 0.5 : 0);
    for (let value = min; value <= max; value++) {
      ticks.push({
        value
      });
    }
    return ticks;
  }
  getLabelForValue(value) {
    return _getLabelForValue.call(this, value);
  }
  configure() {
    super.configure();
    if (!this.isHorizontal()) {
      this._reversePixels = !this._reversePixels;
    }
  }
  getPixelForValue(value) {
    if (typeof value !== "number") {
      value = this.parse(value);
    }
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getValueForPixel(pixel) {
    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
  }
  getBasePixel() {
    return this.bottom;
  }
}
__publicField(CategoryScale, "id", "category");
__publicField(CategoryScale, "defaults", {
  ticks: {
    callback: _getLabelForValue
  }
});
function generateTicks$1(generationOptions, dataRange) {
  const ticks = [];
  const MIN_SPACING = 1e-14;
  const { bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
  const unit = step || 1;
  const maxSpaces = maxTicks - 1;
  const { min: rmin, max: rmax } = dataRange;
  const minDefined = !isNullOrUndef(min);
  const maxDefined = !isNullOrUndef(max);
  const countDefined = !isNullOrUndef(count);
  const minSpacing = (rmax - rmin) / (maxDigits + 1);
  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
  let factor, niceMin, niceMax, numSpaces;
  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
    return [
      {
        value: rmin
      },
      {
        value: rmax
      }
    ];
  }
  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
  if (numSpaces > maxSpaces) {
    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
  }
  if (!isNullOrUndef(precision)) {
    factor = Math.pow(10, precision);
    spacing = Math.ceil(spacing * factor) / factor;
  }
  if (bounds === "ticks") {
    niceMin = Math.floor(rmin / spacing) * spacing;
    niceMax = Math.ceil(rmax / spacing) * spacing;
  } else {
    niceMin = rmin;
    niceMax = rmax;
  }
  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1e3)) {
    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
    spacing = (max - min) / numSpaces;
    niceMin = min;
    niceMax = max;
  } else if (countDefined) {
    niceMin = minDefined ? min : niceMin;
    niceMax = maxDefined ? max : niceMax;
    numSpaces = count - 1;
    spacing = (niceMax - niceMin) / numSpaces;
  } else {
    numSpaces = (niceMax - niceMin) / spacing;
    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1e3)) {
      numSpaces = Math.round(numSpaces);
    } else {
      numSpaces = Math.ceil(numSpaces);
    }
  }
  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));
  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  let j = 0;
  if (minDefined) {
    if (includeBounds && niceMin !== min) {
      ticks.push({
        value: min
      });
      if (niceMin < min) {
        j++;
      }
      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
        j++;
      }
    } else if (niceMin < min) {
      j++;
    }
  }
  for (; j < numSpaces; ++j) {
    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;
    if (maxDefined && tickValue > max) {
      break;
    }
    ticks.push({
      value: tickValue
    });
  }
  if (maxDefined && includeBounds && niceMax !== max) {
    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
      ticks[ticks.length - 1].value = max;
    } else {
      ticks.push({
        value: max
      });
    }
  } else if (!maxDefined || niceMax === max) {
    ticks.push({
      value: niceMax
    });
  }
  return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
  const rad = toRadians(minRotation);
  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 1e-3;
  const length = 0.75 * minSpacing * ("" + value).length;
  return Math.min(minSpacing / ratio, length);
}
class LinearScaleBase extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._endValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) {
      return null;
    }
    return +raw;
  }
  handleTickRangeOptions() {
    const { beginAtZero } = this.options;
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this;
    const setMin = (v) => min = minDefined ? min : v;
    const setMax = (v) => max = maxDefined ? max : v;
    if (beginAtZero) {
      const minSign = sign(min);
      const maxSign = sign(max);
      if (minSign < 0 && maxSign < 0) {
        setMax(0);
      } else if (minSign > 0 && maxSign > 0) {
        setMin(0);
      }
    }
    if (min === max) {
      let offset = max === 0 ? 1 : Math.abs(max * 0.05);
      setMax(max + offset);
      if (!beginAtZero) {
        setMin(min - offset);
      }
    }
    this.min = min;
    this.max = max;
  }
  getTickLimit() {
    const tickOpts = this.options.ticks;
    let { maxTicksLimit, stepSize } = tickOpts;
    let maxTicks;
    if (stepSize) {
      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
      if (maxTicks > 1e3) {
        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
        maxTicks = 1e3;
      }
    } else {
      maxTicks = this.computeTickLimit();
      maxTicksLimit = maxTicksLimit || 11;
    }
    if (maxTicksLimit) {
      maxTicks = Math.min(maxTicksLimit, maxTicks);
    }
    return maxTicks;
  }
  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }
  buildTicks() {
    const opts = this.options;
    const tickOpts = opts.ticks;
    let maxTicks = this.getTickLimit();
    maxTicks = Math.max(2, maxTicks);
    const numericGeneratorOptions = {
      maxTicks,
      bounds: opts.bounds,
      min: opts.min,
      max: opts.max,
      precision: tickOpts.precision,
      step: tickOpts.stepSize,
      count: tickOpts.count,
      maxDigits: this._maxDigits(),
      horizontal: this.isHorizontal(),
      minRotation: tickOpts.minRotation || 0,
      includeBounds: tickOpts.includeBounds !== false
    };
    const dataRange = this._range || this;
    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  configure() {
    const ticks = this.ticks;
    let start = this.min;
    let end = this.max;
    super.configure();
    if (this.options.offset && ticks.length) {
      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
      start -= offset;
      end += offset;
    }
    this._startValue = start;
    this._endValue = end;
    this._valueRange = end - start;
  }
  getLabelForValue(value) {
    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
}
class LinearScale extends LinearScaleBase {
  determineDataLimits() {
    const { min, max } = this.getMinMax(true);
    this.min = isNumberFinite(min) ? min : 0;
    this.max = isNumberFinite(max) ? max : 1;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    const horizontal = this.isHorizontal();
    const length = horizontal ? this.width : this.height;
    const minRotation = toRadians(this.options.ticks.minRotation);
    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 1e-3;
    const tickFont = this._resolveTickFontOptions(0);
    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
  }
  getPixelForValue(value) {
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
  }
}
__publicField(LinearScale, "id", "linear");
__publicField(LinearScale, "defaults", {
  ticks: {
    callback: Ticks.formatters.numeric
  }
});
const log10Floor = (v) => Math.floor(log10(v));
const changeExponent = (v, m3) => Math.pow(10, log10Floor(v) + m3);
function isMajor(tickVal) {
  const remain = tickVal / Math.pow(10, log10Floor(tickVal));
  return remain === 1;
}
function steps(min, max, rangeExp) {
  const rangeStep = Math.pow(10, rangeExp);
  const start = Math.floor(min / rangeStep);
  const end = Math.ceil(max / rangeStep);
  return end - start;
}
function startExp(min, max) {
  const range = max - min;
  let rangeExp = log10Floor(range);
  while (steps(min, max, rangeExp) > 10) {
    rangeExp++;
  }
  while (steps(min, max, rangeExp) < 10) {
    rangeExp--;
  }
  return Math.min(rangeExp, log10Floor(min));
}
function generateTicks(generationOptions, { min, max }) {
  min = finiteOrDefault(generationOptions.min, min);
  const ticks = [];
  const minExp = log10Floor(min);
  let exp = startExp(min, max);
  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
  const stepSize = Math.pow(10, exp);
  const base2 = minExp > exp ? Math.pow(10, minExp) : 0;
  const start = Math.round((min - base2) * precision) / precision;
  const offset = Math.floor((min - base2) / stepSize / 10) * stepSize * 10;
  let significand = Math.floor((start - offset) / Math.pow(10, exp));
  let value = finiteOrDefault(generationOptions.min, Math.round((base2 + offset + significand * Math.pow(10, exp)) * precision) / precision);
  while (value < max) {
    ticks.push({
      value,
      major: isMajor(value),
      significand
    });
    if (significand >= 10) {
      significand = significand < 15 ? 15 : 20;
    } else {
      significand++;
    }
    if (significand >= 20) {
      exp++;
      significand = 2;
      precision = exp >= 0 ? 1 : precision;
    }
    value = Math.round((base2 + offset + significand * Math.pow(10, exp)) * precision) / precision;
  }
  const lastTick = finiteOrDefault(generationOptions.max, value);
  ticks.push({
    value: lastTick,
    major: isMajor(lastTick),
    significand
  });
  return ticks;
}
class LogarithmicScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index2) {
    const value = LinearScaleBase.prototype.parse.apply(this, [
      raw,
      index2
    ]);
    if (value === 0) {
      this._zero = true;
      return void 0;
    }
    return isNumberFinite(value) && value > 0 ? value : null;
  }
  determineDataLimits() {
    const { min, max } = this.getMinMax(true);
    this.min = isNumberFinite(min) ? Math.max(0, min) : null;
    this.max = isNumberFinite(max) ? Math.max(0, max) : null;
    if (this.options.beginAtZero) {
      this._zero = true;
    }
    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {
      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
    }
    this.handleTickRangeOptions();
  }
  handleTickRangeOptions() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let min = this.min;
    let max = this.max;
    const setMin = (v) => min = minDefined ? min : v;
    const setMax = (v) => max = maxDefined ? max : v;
    if (min === max) {
      if (min <= 0) {
        setMin(1);
        setMax(10);
      } else {
        setMin(changeExponent(min, -1));
        setMax(changeExponent(max, 1));
      }
    }
    if (min <= 0) {
      setMin(changeExponent(max, -1));
    }
    if (max <= 0) {
      setMax(changeExponent(min, 1));
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const opts = this.options;
    const generationOptions = {
      min: this._userMin,
      max: this._userMax
    };
    const ticks = generateTicks(generationOptions, this);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  getLabelForValue(value) {
    return value === void 0 ? "0" : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
  configure() {
    const start = this.min;
    super.configure();
    this._startValue = log10(start);
    this._valueRange = log10(this.max) - log10(start);
  }
  getPixelForValue(value) {
    if (value === void 0 || value === 0) {
      value = this.min;
    }
    if (value === null || isNaN(value)) {
      return NaN;
    }
    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    const decimal = this.getDecimalForPixel(pixel);
    return Math.pow(10, this._startValue + decimal * this._valueRange);
  }
}
__publicField(LogarithmicScale, "id", "logarithmic");
__publicField(LogarithmicScale, "defaults", {
  ticks: {
    callback: Ticks.formatters.logarithmic,
    major: {
      enabled: true
    }
  }
});
function getTickBackdropHeight(opts) {
  const tickOpts = opts.ticks;
  if (tickOpts.display && opts.display) {
    const padding = toPadding(tickOpts.backdropPadding);
    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;
  }
  return 0;
}
function measureLabelSize(ctx, font, label) {
  label = isArray(label) ? label : [
    label
  ];
  return {
    w: _longestText(ctx, font.string, label),
    h: label.length * font.lineHeight
  };
}
function determineLimits(angle, pos, size, min, max) {
  if (angle === min || angle === max) {
    return {
      start: pos - size / 2,
      end: pos + size / 2
    };
  } else if (angle < min || angle > max) {
    return {
      start: pos - size,
      end: pos
    };
  }
  return {
    start: pos,
    end: pos + size
  };
}
function fitWithPointLabels(scale) {
  const orig = {
    l: scale.left + scale._padding.left,
    r: scale.right - scale._padding.right,
    t: scale.top + scale._padding.top,
    b: scale.bottom - scale._padding.bottom
  };
  const limits = Object.assign({}, orig);
  const labelSizes = [];
  const padding = [];
  const valueCount = scale._pointLabels.length;
  const pointLabelOpts = scale.options.pointLabels;
  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
  for (let i2 = 0; i2 < valueCount; i2++) {
    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i2));
    padding[i2] = opts.padding;
    const pointPosition = scale.getPointPosition(i2, scale.drawingArea + padding[i2], additionalAngle);
    const plFont = toFont(opts.font);
    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i2]);
    labelSizes[i2] = textSize;
    const angleRadians = _normalizeAngle(scale.getIndexAngle(i2) + additionalAngle);
    const angle = Math.round(toDegrees(angleRadians));
    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    updateLimits(limits, orig, angleRadians, hLimits, vLimits);
  }
  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
  const sin = Math.abs(Math.sin(angle));
  const cos = Math.abs(Math.cos(angle));
  let x2 = 0;
  let y3 = 0;
  if (hLimits.start < orig.l) {
    x2 = (orig.l - hLimits.start) / sin;
    limits.l = Math.min(limits.l, orig.l - x2);
  } else if (hLimits.end > orig.r) {
    x2 = (hLimits.end - orig.r) / sin;
    limits.r = Math.max(limits.r, orig.r + x2);
  }
  if (vLimits.start < orig.t) {
    y3 = (orig.t - vLimits.start) / cos;
    limits.t = Math.min(limits.t, orig.t - y3);
  } else if (vLimits.end > orig.b) {
    y3 = (vLimits.end - orig.b) / cos;
    limits.b = Math.max(limits.b, orig.b + y3);
  }
}
function createPointLabelItem(scale, index2, itemOpts) {
  const outerDistance = scale.drawingArea;
  const { extra, additionalAngle, padding, size } = itemOpts;
  const pointLabelPosition = scale.getPointPosition(index2, outerDistance + extra + padding, additionalAngle);
  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
  const y3 = yForAngle(pointLabelPosition.y, size.h, angle);
  const textAlign = getTextAlignForAngle(angle);
  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
  return {
    visible: true,
    x: pointLabelPosition.x,
    y: y3,
    textAlign,
    left,
    top: y3,
    right: left + size.w,
    bottom: y3 + size.h
  };
}
function isNotOverlapped(item, area) {
  if (!area) {
    return true;
  }
  const { left, top, right, bottom } = item;
  const apexesInArea = _isPointInArea({
    x: left,
    y: top
  }, area) || _isPointInArea({
    x: left,
    y: bottom
  }, area) || _isPointInArea({
    x: right,
    y: top
  }, area) || _isPointInArea({
    x: right,
    y: bottom
  }, area);
  return !apexesInArea;
}
function buildPointLabelItems(scale, labelSizes, padding) {
  const items = [];
  const valueCount = scale._pointLabels.length;
  const opts = scale.options;
  const { centerPointLabels, display } = opts.pointLabels;
  const itemOpts = {
    extra: getTickBackdropHeight(opts) / 2,
    additionalAngle: centerPointLabels ? PI / valueCount : 0
  };
  let area;
  for (let i2 = 0; i2 < valueCount; i2++) {
    itemOpts.padding = padding[i2];
    itemOpts.size = labelSizes[i2];
    const item = createPointLabelItem(scale, i2, itemOpts);
    items.push(item);
    if (display === "auto") {
      item.visible = isNotOverlapped(item, area);
      if (item.visible) {
        area = item;
      }
    }
  }
  return items;
}
function getTextAlignForAngle(angle) {
  if (angle === 0 || angle === 180) {
    return "center";
  } else if (angle < 180) {
    return "left";
  }
  return "right";
}
function leftForTextAlign(x2, w2, align) {
  if (align === "right") {
    x2 -= w2;
  } else if (align === "center") {
    x2 -= w2 / 2;
  }
  return x2;
}
function yForAngle(y3, h4, angle) {
  if (angle === 90 || angle === 270) {
    y3 -= h4 / 2;
  } else if (angle > 270 || angle < 90) {
    y3 -= h4;
  }
  return y3;
}
function drawPointLabelBox(ctx, opts, item) {
  const { left, top, right, bottom } = item;
  const { backdropColor } = opts;
  if (!isNullOrUndef(backdropColor)) {
    const borderRadius = toTRBLCorners(opts.borderRadius);
    const padding = toPadding(opts.backdropPadding);
    ctx.fillStyle = backdropColor;
    const backdropLeft = left - padding.left;
    const backdropTop = top - padding.top;
    const backdropWidth = right - left + padding.width;
    const backdropHeight = bottom - top + padding.height;
    if (Object.values(borderRadius).some((v) => v !== 0)) {
      ctx.beginPath();
      addRoundedRectPath(ctx, {
        x: backdropLeft,
        y: backdropTop,
        w: backdropWidth,
        h: backdropHeight,
        radius: borderRadius
      });
      ctx.fill();
    } else {
      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
    }
  }
}
function drawPointLabels(scale, labelCount) {
  const { ctx, options: { pointLabels } } = scale;
  for (let i2 = labelCount - 1; i2 >= 0; i2--) {
    const item = scale._pointLabelItems[i2];
    if (!item.visible) {
      continue;
    }
    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i2));
    drawPointLabelBox(ctx, optsAtIndex, item);
    const plFont = toFont(optsAtIndex.font);
    const { x: x2, y: y3, textAlign } = item;
    renderText(ctx, scale._pointLabels[i2], x2, y3 + plFont.lineHeight / 2, plFont, {
      color: optsAtIndex.color,
      textAlign,
      textBaseline: "middle"
    });
  }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
  const { ctx } = scale;
  if (circular) {
    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);
  } else {
    let pointPosition = scale.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);
    for (let i2 = 1; i2 < labelCount; i2++) {
      pointPosition = scale.getPointPosition(i2, radius);
      ctx.lineTo(pointPosition.x, pointPosition.y);
    }
  }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
  const ctx = scale.ctx;
  const circular = gridLineOpts.circular;
  const { color: color2, lineWidth } = gridLineOpts;
  if (!circular && !labelCount || !color2 || !lineWidth || radius < 0) {
    return;
  }
  ctx.save();
  ctx.strokeStyle = color2;
  ctx.lineWidth = lineWidth;
  ctx.setLineDash(borderOpts.dash);
  ctx.lineDashOffset = borderOpts.dashOffset;
  ctx.beginPath();
  pathRadiusLine(scale, radius, circular, labelCount);
  ctx.closePath();
  ctx.stroke();
  ctx.restore();
}
function createPointLabelContext(parent, index2, label) {
  return createContext(parent, {
    label,
    index: index2,
    type: "pointLabel"
  });
}
class RadialLinearScale extends LinearScaleBase {
  constructor(cfg) {
    super(cfg);
    this.xCenter = void 0;
    this.yCenter = void 0;
    this.drawingArea = void 0;
    this._pointLabels = [];
    this._pointLabelItems = [];
  }
  setDimensions() {
    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
    const w2 = this.width = this.maxWidth - padding.width;
    const h4 = this.height = this.maxHeight - padding.height;
    this.xCenter = Math.floor(this.left + w2 / 2 + padding.left);
    this.yCenter = Math.floor(this.top + h4 / 2 + padding.top);
    this.drawingArea = Math.floor(Math.min(w2, h4) / 2);
  }
  determineDataLimits() {
    const { min, max } = this.getMinMax(false);
    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;
    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
  }
  generateTickLabels(ticks) {
    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
    this._pointLabels = this.getLabels().map((value, index2) => {
      const label = callback(this.options.pointLabels.callback, [
        value,
        index2
      ], this);
      return label || label === 0 ? label : "";
    }).filter((v, i2) => this.chart.getDataVisibility(i2));
  }
  fit() {
    const opts = this.options;
    if (opts.display && opts.pointLabels.display) {
      fitWithPointLabels(this);
    } else {
      this.setCenterPoint(0, 0, 0, 0);
    }
  }
  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
  }
  getIndexAngle(index2) {
    const angleMultiplier = TAU / (this._pointLabels.length || 1);
    const startAngle = this.options.startAngle || 0;
    return _normalizeAngle(index2 * angleMultiplier + toRadians(startAngle));
  }
  getDistanceFromCenterForValue(value) {
    if (isNullOrUndef(value)) {
      return NaN;
    }
    const scalingFactor = this.drawingArea / (this.max - this.min);
    if (this.options.reverse) {
      return (this.max - value) * scalingFactor;
    }
    return (value - this.min) * scalingFactor;
  }
  getValueForDistanceFromCenter(distance) {
    if (isNullOrUndef(distance)) {
      return NaN;
    }
    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
  }
  getPointLabelContext(index2) {
    const pointLabels = this._pointLabels || [];
    if (index2 >= 0 && index2 < pointLabels.length) {
      const pointLabel = pointLabels[index2];
      return createPointLabelContext(this.getContext(), index2, pointLabel);
    }
  }
  getPointPosition(index2, distanceFromCenter, additionalAngle = 0) {
    const angle = this.getIndexAngle(index2) - HALF_PI + additionalAngle;
    return {
      x: Math.cos(angle) * distanceFromCenter + this.xCenter,
      y: Math.sin(angle) * distanceFromCenter + this.yCenter,
      angle
    };
  }
  getPointPositionForValue(index2, value) {
    return this.getPointPosition(index2, this.getDistanceFromCenterForValue(value));
  }
  getBasePosition(index2) {
    return this.getPointPositionForValue(index2 || 0, this.getBaseValue());
  }
  getPointLabelPosition(index2) {
    const { left, top, right, bottom } = this._pointLabelItems[index2];
    return {
      left,
      top,
      right,
      bottom
    };
  }
  drawBackground() {
    const { backgroundColor, grid: { circular } } = this.options;
    if (backgroundColor) {
      const ctx = this.ctx;
      ctx.save();
      ctx.beginPath();
      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
      ctx.closePath();
      ctx.fillStyle = backgroundColor;
      ctx.fill();
      ctx.restore();
    }
  }
  drawGrid() {
    const ctx = this.ctx;
    const opts = this.options;
    const { angleLines, grid: grid2, border } = opts;
    const labelCount = this._pointLabels.length;
    let i2, offset, position;
    if (opts.pointLabels.display) {
      drawPointLabels(this, labelCount);
    }
    if (grid2.display) {
      this.ticks.forEach((tick, index2) => {
        if (index2 !== 0) {
          offset = this.getDistanceFromCenterForValue(tick.value);
          const context = this.getContext(index2);
          const optsAtIndex = grid2.setContext(context);
          const optsAtIndexBorder = border.setContext(context);
          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
        }
      });
    }
    if (angleLines.display) {
      ctx.save();
      for (i2 = labelCount - 1; i2 >= 0; i2--) {
        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i2));
        const { color: color2, lineWidth } = optsAtIndex;
        if (!lineWidth || !color2) {
          continue;
        }
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = color2;
        ctx.setLineDash(optsAtIndex.borderDash);
        ctx.lineDashOffset = optsAtIndex.borderDashOffset;
        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
        position = this.getPointPosition(i2, offset);
        ctx.beginPath();
        ctx.moveTo(this.xCenter, this.yCenter);
        ctx.lineTo(position.x, position.y);
        ctx.stroke();
      }
      ctx.restore();
    }
  }
  drawBorder() {
  }
  drawLabels() {
    const ctx = this.ctx;
    const opts = this.options;
    const tickOpts = opts.ticks;
    if (!tickOpts.display) {
      return;
    }
    const startAngle = this.getIndexAngle(0);
    let offset, width;
    ctx.save();
    ctx.translate(this.xCenter, this.yCenter);
    ctx.rotate(startAngle);
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    this.ticks.forEach((tick, index2) => {
      if (index2 === 0 && !opts.reverse) {
        return;
      }
      const optsAtIndex = tickOpts.setContext(this.getContext(index2));
      const tickFont = toFont(optsAtIndex.font);
      offset = this.getDistanceFromCenterForValue(this.ticks[index2].value);
      if (optsAtIndex.showLabelBackdrop) {
        ctx.font = tickFont.string;
        width = ctx.measureText(tick.label).width;
        ctx.fillStyle = optsAtIndex.backdropColor;
        const padding = toPadding(optsAtIndex.backdropPadding);
        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
      }
      renderText(ctx, tick.label, 0, -offset, tickFont, {
        color: optsAtIndex.color
      });
    });
    ctx.restore();
  }
  drawTitle() {
  }
}
__publicField(RadialLinearScale, "id", "radialLinear");
__publicField(RadialLinearScale, "defaults", {
  display: true,
  animate: true,
  position: "chartArea",
  angleLines: {
    display: true,
    lineWidth: 1,
    borderDash: [],
    borderDashOffset: 0
  },
  grid: {
    circular: false
  },
  startAngle: 0,
  ticks: {
    showLabelBackdrop: true,
    callback: Ticks.formatters.numeric
  },
  pointLabels: {
    backdropColor: void 0,
    backdropPadding: 2,
    display: true,
    font: {
      size: 10
    },
    callback(label) {
      return label;
    },
    padding: 5,
    centerPointLabels: false
  }
});
__publicField(RadialLinearScale, "defaultRoutes", {
  "angleLines.color": "borderColor",
  "pointLabels.color": "color",
  "ticks.color": "color"
});
__publicField(RadialLinearScale, "descriptors", {
  angleLines: {
    _fallback: "grid"
  }
});
const INTERVALS = {
  millisecond: {
    common: true,
    size: 1,
    steps: 1e3
  },
  second: {
    common: true,
    size: 1e3,
    steps: 60
  },
  minute: {
    common: true,
    size: 6e4,
    steps: 60
  },
  hour: {
    common: true,
    size: 36e5,
    steps: 24
  },
  day: {
    common: true,
    size: 864e5,
    steps: 30
  },
  week: {
    common: false,
    size: 6048e5,
    steps: 4
  },
  month: {
    common: true,
    size: 2628e6,
    steps: 12
  },
  quarter: {
    common: false,
    size: 7884e6,
    steps: 4
  },
  year: {
    common: true,
    size: 3154e7
  }
};
const UNITS = /* @__PURE__ */ Object.keys(INTERVALS);
function sorter(a3, b2) {
  return a3 - b2;
}
function parse$1(scale, input) {
  if (isNullOrUndef(input)) {
    return null;
  }
  const adapter = scale._adapter;
  const { parser, round: round2, isoWeekday } = scale._parseOpts;
  let value = input;
  if (typeof parser === "function") {
    value = parser(value);
  }
  if (!isNumberFinite(value)) {
    value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
  }
  if (value === null) {
    return null;
  }
  if (round2) {
    value = round2 === "week" && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round2);
  }
  return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
  const ilen = UNITS.length;
  for (let i2 = UNITS.indexOf(minUnit); i2 < ilen - 1; ++i2) {
    const interval = INTERVALS[UNITS[i2]];
    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
      return UNITS[i2];
    }
  }
  return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
  for (let i2 = UNITS.length - 1; i2 >= UNITS.indexOf(minUnit); i2--) {
    const unit = UNITS[i2];
    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
      return unit;
    }
  }
  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
  for (let i2 = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i2 < ilen; ++i2) {
    if (INTERVALS[UNITS[i2]].common) {
      return UNITS[i2];
    }
  }
}
function addTick(ticks, time, timestamps) {
  if (!timestamps) {
    ticks[time] = true;
  } else if (timestamps.length) {
    const { lo, hi } = _lookup(timestamps, time);
    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
    ticks[timestamp] = true;
  }
}
function setMajorTicks(scale, ticks, map2, majorUnit) {
  const adapter = scale._adapter;
  const first = +adapter.startOf(ticks[0].value, majorUnit);
  const last = ticks[ticks.length - 1].value;
  let major, index2;
  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    index2 = map2[major];
    if (index2 >= 0) {
      ticks[index2].major = true;
    }
  }
  return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
  const ticks = [];
  const map2 = {};
  const ilen = values.length;
  let i2, value;
  for (i2 = 0; i2 < ilen; ++i2) {
    value = values[i2];
    map2[value] = i2;
    ticks.push({
      value,
      major: false
    });
  }
  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map2, majorUnit);
}
class TimeScale extends Scale {
  constructor(props) {
    super(props);
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
    this._unit = "day";
    this._majorUnit = void 0;
    this._offsets = {};
    this._normalized = false;
    this._parseOpts = void 0;
  }
  init(scaleOpts, opts = {}) {
    const time = scaleOpts.time || (scaleOpts.time = {});
    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
    adapter.init(opts);
    mergeIf(time.displayFormats, adapter.formats());
    this._parseOpts = {
      parser: time.parser,
      round: time.round,
      isoWeekday: time.isoWeekday
    };
    super.init(scaleOpts);
    this._normalized = opts.normalized;
  }
  parse(raw, index2) {
    if (raw === void 0) {
      return null;
    }
    return parse$1(this, raw);
  }
  beforeLayout() {
    super.beforeLayout();
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }
  determineDataLimits() {
    const options = this.options;
    const adapter = this._adapter;
    const unit = options.time.unit || "day";
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    function _applyBounds(bounds) {
      if (!minDefined && !isNaN(bounds.min)) {
        min = Math.min(min, bounds.min);
      }
      if (!maxDefined && !isNaN(bounds.max)) {
        max = Math.max(max, bounds.max);
      }
    }
    if (!minDefined || !maxDefined) {
      _applyBounds(this._getLabelBounds());
      if (options.bounds !== "ticks" || options.ticks.source !== "labels") {
        _applyBounds(this.getMinMax(false));
      }
    }
    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
    this.min = Math.min(min, max - 1);
    this.max = Math.max(min + 1, max);
  }
  _getLabelBounds() {
    const arr = this.getLabelTimestamps();
    let min = Number.POSITIVE_INFINITY;
    let max = Number.NEGATIVE_INFINITY;
    if (arr.length) {
      min = arr[0];
      max = arr[arr.length - 1];
    }
    return {
      min,
      max
    };
  }
  buildTicks() {
    const options = this.options;
    const timeOpts = options.time;
    const tickOpts = options.ticks;
    const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
    if (options.bounds === "ticks" && timestamps.length) {
      this.min = this._userMin || timestamps[0];
      this.max = this._userMax || timestamps[timestamps.length - 1];
    }
    const min = this.min;
    const max = this.max;
    const ticks = _filterBetween(timestamps, min, max);
    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
    this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? void 0 : determineMajorUnit(this._unit);
    this.initOffsets(timestamps);
    if (options.reverse) {
      ticks.reverse();
    }
    return ticksFromTimestamps(this, ticks, this._majorUnit);
  }
  afterAutoSkip() {
    if (this.options.offsetAfterAutoskip) {
      this.initOffsets(this.ticks.map((tick) => +tick.value));
    }
  }
  initOffsets(timestamps = []) {
    let start = 0;
    let end = 0;
    let first, last;
    if (this.options.offset && timestamps.length) {
      first = this.getDecimalForValue(timestamps[0]);
      if (timestamps.length === 1) {
        start = 1 - first;
      } else {
        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
      }
      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
      if (timestamps.length === 1) {
        end = last;
      } else {
        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
      }
    }
    const limit = timestamps.length < 3 ? 0.5 : 0.25;
    start = _limitValue(start, 0, limit);
    end = _limitValue(end, 0, limit);
    this._offsets = {
      start,
      end,
      factor: 1 / (start + 1 + end)
    };
  }
  _generate() {
    const adapter = this._adapter;
    const min = this.min;
    const max = this.max;
    const options = this.options;
    const timeOpts = options.time;
    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
    const stepSize = valueOrDefault(options.ticks.stepSize, 1);
    const weekday = minor === "week" ? timeOpts.isoWeekday : false;
    const hasWeekday = isNumber(weekday) || weekday === true;
    const ticks = {};
    let first = min;
    let time, count;
    if (hasWeekday) {
      first = +adapter.startOf(first, "isoWeek", weekday);
    }
    first = +adapter.startOf(first, hasWeekday ? "day" : minor);
    if (adapter.diff(max, min, minor) > 1e5 * stepSize) {
      throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
    }
    const timestamps = options.ticks.source === "data" && this.getDataTimestamps();
    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {
      addTick(ticks, time, timestamps);
    }
    if (time === max || options.bounds === "ticks" || count === 1) {
      addTick(ticks, time, timestamps);
    }
    return Object.keys(ticks).sort((a3, b2) => a3 - b2).map((x2) => +x2);
  }
  getLabelForValue(value) {
    const adapter = this._adapter;
    const timeOpts = this.options.time;
    if (timeOpts.tooltipFormat) {
      return adapter.format(value, timeOpts.tooltipFormat);
    }
    return adapter.format(value, timeOpts.displayFormats.datetime);
  }
  format(value, format2) {
    const options = this.options;
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const fmt = format2 || formats[unit];
    return this._adapter.format(value, fmt);
  }
  _tickFormatFunction(time, index2, ticks, format2) {
    const options = this.options;
    const formatter = options.ticks.callback;
    if (formatter) {
      return callback(formatter, [
        time,
        index2,
        ticks
      ], this);
    }
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const majorUnit = this._majorUnit;
    const minorFormat = unit && formats[unit];
    const majorFormat = majorUnit && formats[majorUnit];
    const tick = ticks[index2];
    const major = majorUnit && majorFormat && tick && tick.major;
    return this._adapter.format(time, format2 || (major ? majorFormat : minorFormat));
  }
  generateTickLabels(ticks) {
    let i2, ilen, tick;
    for (i2 = 0, ilen = ticks.length; i2 < ilen; ++i2) {
      tick = ticks[i2];
      tick.label = this._tickFormatFunction(tick.value, i2, ticks);
    }
  }
  getDecimalForValue(value) {
    return value === null ? NaN : (value - this.min) / (this.max - this.min);
  }
  getPixelForValue(value) {
    const offsets = this._offsets;
    const pos = this.getDecimalForValue(value);
    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return this.min + pos * (this.max - this.min);
  }
  _getLabelSize(label) {
    const ticksOpts = this.options.ticks;
    const tickLabelWidth = this.ctx.measureText(label).width;
    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    const cosRotation = Math.cos(angle);
    const sinRotation = Math.sin(angle);
    const tickFontSize = this._resolveTickFontOptions(0).size;
    return {
      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
    };
  }
  _getLabelCapacity(exampleTime) {
    const timeOpts = this.options.time;
    const displayFormats = timeOpts.displayFormats;
    const format2 = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
      exampleTime
    ], this._majorUnit), format2);
    const size = this._getLabelSize(exampleLabel);
    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
    return capacity > 0 ? capacity : 1;
  }
  getDataTimestamps() {
    let timestamps = this._cache.data || [];
    let i2, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const metas = this.getMatchingVisibleMetas();
    if (this._normalized && metas.length) {
      return this._cache.data = metas[0].controller.getAllParsedValues(this);
    }
    for (i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
      timestamps = timestamps.concat(metas[i2].controller.getAllParsedValues(this));
    }
    return this._cache.data = this.normalize(timestamps);
  }
  getLabelTimestamps() {
    const timestamps = this._cache.labels || [];
    let i2, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const labels = this.getLabels();
    for (i2 = 0, ilen = labels.length; i2 < ilen; ++i2) {
      timestamps.push(parse$1(this, labels[i2]));
    }
    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
  }
  normalize(values) {
    return _arrayUnique(values.sort(sorter));
  }
}
__publicField(TimeScale, "id", "time");
__publicField(TimeScale, "defaults", {
  bounds: "data",
  adapters: {},
  time: {
    parser: false,
    unit: false,
    round: false,
    isoWeekday: false,
    minUnit: "millisecond",
    displayFormats: {}
  },
  ticks: {
    source: "auto",
    callback: false,
    major: {
      enabled: false
    }
  }
});
function interpolate(table, val, reverse) {
  let lo = 0;
  let hi = table.length - 1;
  let prevSource, nextSource, prevTarget, nextTarget;
  if (reverse) {
    if (val >= table[lo].pos && val <= table[hi].pos) {
      ({ lo, hi } = _lookupByKey(table, "pos", val));
    }
    ({ pos: prevSource, time: prevTarget } = table[lo]);
    ({ pos: nextSource, time: nextTarget } = table[hi]);
  } else {
    if (val >= table[lo].time && val <= table[hi].time) {
      ({ lo, hi } = _lookupByKey(table, "time", val));
    }
    ({ time: prevSource, pos: prevTarget } = table[lo]);
    ({ time: nextSource, pos: nextTarget } = table[hi]);
  }
  const span = nextSource - prevSource;
  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
  constructor(props) {
    super(props);
    this._table = [];
    this._minPos = void 0;
    this._tableRange = void 0;
  }
  initOffsets() {
    const timestamps = this._getTimestampsForTable();
    const table = this._table = this.buildLookupTable(timestamps);
    this._minPos = interpolate(table, this.min);
    this._tableRange = interpolate(table, this.max) - this._minPos;
    super.initOffsets(timestamps);
  }
  buildLookupTable(timestamps) {
    const { min, max } = this;
    const items = [];
    const table = [];
    let i2, ilen, prev, curr, next;
    for (i2 = 0, ilen = timestamps.length; i2 < ilen; ++i2) {
      curr = timestamps[i2];
      if (curr >= min && curr <= max) {
        items.push(curr);
      }
    }
    if (items.length < 2) {
      return [
        {
          time: min,
          pos: 0
        },
        {
          time: max,
          pos: 1
        }
      ];
    }
    for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
      next = items[i2 + 1];
      prev = items[i2 - 1];
      curr = items[i2];
      if (Math.round((next + prev) / 2) !== curr) {
        table.push({
          time: curr,
          pos: i2 / (ilen - 1)
        });
      }
    }
    return table;
  }
  _getTimestampsForTable() {
    let timestamps = this._cache.all || [];
    if (timestamps.length) {
      return timestamps;
    }
    const data = this.getDataTimestamps();
    const label = this.getLabelTimestamps();
    if (data.length && label.length) {
      timestamps = this.normalize(data.concat(label));
    } else {
      timestamps = data.length ? data : label;
    }
    timestamps = this._cache.all = timestamps;
    return timestamps;
  }
  getDecimalForValue(value) {
    return (interpolate(this._table, value) - this._minPos) / this._tableRange;
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
  }
}
__publicField(TimeSeriesScale, "id", "timeseries");
__publicField(TimeSeriesScale, "defaults", TimeScale.defaults);
var scales = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  CategoryScale,
  LinearScale,
  LogarithmicScale,
  RadialLinearScale,
  TimeScale,
  TimeSeriesScale
});
const registerables = [
  controllers,
  elements,
  plugins,
  scales
];
const eventPrefix = /^on/;
const events = [];
Object.keys(globalThis).forEach((key) => {
  if (eventPrefix.test(key)) {
    events.push(key.replace(eventPrefix, ""));
  }
});
function useForwardEvents(getRef) {
  const component = current_component;
  const destructors = [];
  function forward(e2) {
    bubble(component, e2);
  }
  onMount(() => {
    const ref = getRef();
    events.forEach(ref instanceof Element ? (event) => destructors.push(listen(ref, event, forward)) : (event) => destructors.push(ref.$on(event, forward)));
  });
  onDestroy(() => {
    while (destructors.length) {
      destructors.pop()();
    }
  });
}
function create_fragment$c(ctx) {
  let canvas;
  let canvas_levels = [
    /*props*/
    ctx[1]
  ];
  let canvas_data = {};
  for (let i2 = 0; i2 < canvas_levels.length; i2 += 1) {
    canvas_data = assign$1(canvas_data, canvas_levels[i2]);
  }
  return {
    c() {
      canvas = element("canvas");
      this.h();
    },
    l(nodes) {
      canvas = claim_element(nodes, "CANVAS", {});
      children(canvas).forEach(detach);
      this.h();
    },
    h() {
      set_attributes(canvas, canvas_data);
    },
    m(target, anchor) {
      insert_hydration(target, canvas, anchor);
      ctx[8](canvas);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(canvas);
      }
      ctx[8](null);
    }
  };
}
function clean(props) {
  let { data, type, options, plugins: plugins2, children: children2, $$scope, $$slots, ...rest } = props;
  return rest;
}
function instance$a($$self, $$props, $$invalidate) {
  let { type } = $$props;
  let { data = { datasets: [] } } = $$props;
  let { options = {} } = $$props;
  let { plugins: plugins2 = [] } = $$props;
  let { updateMode = void 0 } = $$props;
  let { chart = null } = $$props;
  let canvasRef;
  let props = clean($$props);
  onMount(() => {
    $$invalidate(2, chart = new Chart$1(canvasRef, { type, data, options, plugins: plugins2 }));
  });
  afterUpdate(() => {
    if (!chart)
      return;
    $$invalidate(2, chart.data = data, chart);
    Object.assign(chart.options, options);
    chart.update(updateMode);
  });
  onDestroy(() => {
    if (chart)
      chart.destroy();
    $$invalidate(2, chart = null);
  });
  useForwardEvents(() => canvasRef);
  function canvas_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      canvasRef = $$value;
      $$invalidate(0, canvasRef);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$invalidate(9, $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props)));
    if ("type" in $$new_props)
      $$invalidate(3, type = $$new_props.type);
    if ("data" in $$new_props)
      $$invalidate(4, data = $$new_props.data);
    if ("options" in $$new_props)
      $$invalidate(5, options = $$new_props.options);
    if ("plugins" in $$new_props)
      $$invalidate(6, plugins2 = $$new_props.plugins);
    if ("updateMode" in $$new_props)
      $$invalidate(7, updateMode = $$new_props.updateMode);
    if ("chart" in $$new_props)
      $$invalidate(2, chart = $$new_props.chart);
  };
  $$props = exclude_internal_props($$props);
  return [
    canvasRef,
    props,
    chart,
    type,
    data,
    options,
    plugins2,
    updateMode,
    canvas_binding
  ];
}
class Chart extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$a, create_fragment$c, safe_not_equal, {
      type: 3,
      data: 4,
      options: 5,
      plugins: 6,
      updateMode: 7,
      chart: 2
    });
  }
}
Chart$1.register(...registerables);
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
var MILLISECONDS_IN_HOUR = 36e5;
function addHours(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
}
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function startOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}
var MILLISECONDS_IN_DAY$1 = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY$1);
}
var MILLISECONDS_IN_MINUTE = 6e4;
function addMinutes(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
}
function addQuarters(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var months = amount * 3;
  return addMonths(dirtyDate, months);
}
function addSeconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * 1e3);
}
function addWeeks(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var days = amount * 7;
  return addDays(dirtyDate, days);
}
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}
function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}
function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() - dateRight.getFullYear();
}
function compareLocalAsc(dateLeft, dateRight) {
  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
function differenceInDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareLocalAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
  dateLeft.setDate(dateLeft.getDate() - sign2 * difference);
  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign2);
  var result = sign2 * (difference - isLastDayNotFull);
  return result === 0 ? 0 : result;
}
function differenceInMilliseconds(dateLeft, dateRight) {
  requiredArgs(2, arguments);
  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
}
var roundingMap = {
  ceil: Math.ceil,
  round: Math.round,
  floor: Math.floor,
  trunc: function trunc(value) {
    return value < 0 ? Math.ceil(value) : Math.floor(value);
  }
  // Math.trunc is not supported by IE
};
var defaultRoundingMethod = "trunc";
function getRoundingMethod(method) {
  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
}
function differenceInHours(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInMinutes(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function isLastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return endOfDay(date).getTime() === endOfMonth(date).getTime();
}
function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
  var result;
  if (difference < 1) {
    result = 0;
  } else {
    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
      dateLeft.setDate(30);
    }
    dateLeft.setMonth(dateLeft.getMonth() - sign2 * difference);
    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign2;
    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
      isLastMonthNotFull = false;
    }
    result = sign2 * (difference - Number(isLastMonthNotFull));
  }
  return result === 0 ? 0 : result;
}
function differenceInQuarters(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMonths(dateLeft, dateRight) / 3;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInSeconds(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1e3;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInWeeks(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInDays(dateLeft, dateRight) / 7;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight));
  dateLeft.setFullYear(1584);
  dateRight.setFullYear(1584);
  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign2;
  var result = sign2 * (difference - Number(isLastYearNotFull));
  return result === 0 ? 0 : result;
}
function startOfMinute(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setSeconds(0, 0);
  return date;
}
function startOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3;
  date.setMonth(month, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function endOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  date.setFullYear(year + 1, 0, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date = /* @__PURE__ */ new Date(0);
  date.setFullYear(cleanDate.getFullYear(), 0, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function endOfHour(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMinutes(59, 59, 999);
  return date;
}
function endOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfMinute(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setSeconds(59, 999);
  return date;
}
function endOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3 + 3;
  date.setMonth(month, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfSecond(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMilliseconds(999);
  return date;
}
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}
var MILLISECONDS_IN_WEEK$1 = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
function addLeadingZeros(number, targetLength) {
  var sign2 = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign2 + output;
}
var formatters$2 = {
  // Year
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
const formatters$3 = formatters$2;
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters = {
  // Era
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return formatters$3.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return formatters$3.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return formatters$3.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h3(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return formatters$3.h(date, token);
  },
  // Hour [0-23]
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return formatters$3.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return formatters$3.m(date, token);
  },
  // Second
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return formatters$3.s(date, token);
  },
  // Fraction of second
  S: function S2(date, token) {
    return formatters$3.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign2 + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign2 + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign2 = offset > 0 ? "-" : "+";
    return sign2 + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign2 + hours + delimiter + minutes;
}
const formatters$1 = formatters;
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
const longFormatters$1 = longFormatters;
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
const formatDistance$1 = formatDistance;
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
const formatLong$1 = formatLong;
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
const formatRelative$1 = formatRelative;
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index2 = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index2];
  };
}
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
const localize$1 = localize;
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index2) {
      return index2 + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
const match$1 = match;
var locale = {
  code: "en-US",
  formatDistance: formatDistance$1,
  formatLong: formatLong$1,
  formatRelative: formatRelative$1,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
const defaultLocale = locale;
var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp$1 = /^'([^]*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;
var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp$1).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp$1).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString$1(substring);
    }
    var formatter = formatters$1[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString$1(input) {
  var matched = input.match(escapedStringRegExp$1);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp$1, "'");
}
function assign(target, object) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      target[property] = object[property];
    }
  }
  return target;
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i2 = 0;
      var F = function F2() {
      };
      return {
        s: F,
        n: function n() {
          if (i2 >= o.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o[i2++]
          };
        },
        e: function e2(_e) {
          throw _e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function s3() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e2(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null)
          it["return"]();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _classCallCheck(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /* @__PURE__ */ function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = /* @__PURE__ */ function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = /* @__PURE__ */ function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = /* @__PURE__ */ new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);
var Parser = /* @__PURE__ */ function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run(dateString, token, match2, options) {
      var result = this.parse(dateString, token, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();
var EraParser = /* @__PURE__ */ function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign2 = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign2 * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex$1(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
var YearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);
var LocalWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);
var ISOWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = /* @__PURE__ */ new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);
var ExtendedYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);
var QuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);
var StandAloneQuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);
var MonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);
var StandAloneMonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
var LocalWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
var ISOWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);
var DayOfYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var DayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);
var LocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);
var StandAloneLocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var ISODayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);
var AMPMParser = /* @__PURE__ */ function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);
var AMPMMidnightParser = /* @__PURE__ */ function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);
var DayPeriodParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);
var Hour1to12Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);
var Hour0to23Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);
var Hour0To11Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);
var Hour1To24Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);
var MinuteParser = /* @__PURE__ */ function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);
var SecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);
var FractionOfSecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);
var ISOTimezoneWithZParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);
var ISOTimezoneParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);
var TimestampSecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);
var TimestampMillisecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters$1) {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens), _step;
  try {
    var _loop = function _loop2() {
      var token = _step.value;
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser = parsers[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function(usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser.run(dateString, token, locale2.match, subFnOptions);
        if (!parseResult) {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString(token);
        }
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if (_typeof(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a3, b2) {
    return b2 - a3;
  }).filter(function(priority, index2, array) {
    return array.indexOf(priority) === index2;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a3, b2) {
      return b2.subPriority - a3.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign(flags, result[1]);
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}
function startOfHour(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMinutes(0, 0, 0);
  return date;
}
function startOfSecond(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMilliseconds(0);
  return date;
}
function parseISO(argument, options) {
  var _options$additionalDi;
  requiredArgs(1, arguments);
  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date;
  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date || isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var timestamp = date.getTime();
  var time = 0;
  var offset;
  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);
    if (isNaN(offset)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time);
    var result = /* @__PURE__ */ new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time + offset);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear(dateString, additionalDigits) {
  var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex);
  if (!captures)
    return {
      year: NaN,
      restDateString: ""
    };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null)
    return /* @__PURE__ */ new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures)
    return /* @__PURE__ */ new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = /* @__PURE__ */ new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures)
    return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z")
    return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures)
    return 0;
  var sign2 = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign2 * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = /* @__PURE__ */ new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}
/*!
 * chartjs-adapter-date-fns v3.0.0
 * https://www.chartjs.org
 * (c) 2022 chartjs-adapter-date-fns Contributors
 * Released under the MIT license
 */
const FORMATS = {
  datetime: "MMM d, yyyy, h:mm:ss aaaa",
  millisecond: "h:mm:ss.SSS aaaa",
  second: "h:mm:ss aaaa",
  minute: "h:mm aaaa",
  hour: "ha",
  day: "MMM d",
  week: "PP",
  month: "MMM yyyy",
  quarter: "qqq - yyyy",
  year: "yyyy"
};
adapters._date.override({
  _id: "date-fns",
  // DEBUG
  formats: function() {
    return FORMATS;
  },
  parse: function(value, fmt) {
    if (value === null || typeof value === "undefined") {
      return null;
    }
    const type = typeof value;
    if (type === "number" || value instanceof Date) {
      value = toDate(value);
    } else if (type === "string") {
      if (typeof fmt === "string") {
        value = parse(value, fmt, /* @__PURE__ */ new Date(), this.options);
      } else {
        value = parseISO(value, this.options);
      }
    }
    return isValid(value) ? value.getTime() : null;
  },
  format: function(time, fmt) {
    return format(time, fmt, this.options);
  },
  add: function(time, amount, unit) {
    switch (unit) {
      case "millisecond":
        return addMilliseconds(time, amount);
      case "second":
        return addSeconds(time, amount);
      case "minute":
        return addMinutes(time, amount);
      case "hour":
        return addHours(time, amount);
      case "day":
        return addDays(time, amount);
      case "week":
        return addWeeks(time, amount);
      case "month":
        return addMonths(time, amount);
      case "quarter":
        return addQuarters(time, amount);
      case "year":
        return addYears(time, amount);
      default:
        return time;
    }
  },
  diff: function(max, min, unit) {
    switch (unit) {
      case "millisecond":
        return differenceInMilliseconds(max, min);
      case "second":
        return differenceInSeconds(max, min);
      case "minute":
        return differenceInMinutes(max, min);
      case "hour":
        return differenceInHours(max, min);
      case "day":
        return differenceInDays(max, min);
      case "week":
        return differenceInWeeks(max, min);
      case "month":
        return differenceInMonths(max, min);
      case "quarter":
        return differenceInQuarters(max, min);
      case "year":
        return differenceInYears(max, min);
      default:
        return 0;
    }
  },
  startOf: function(time, unit, weekday) {
    switch (unit) {
      case "second":
        return startOfSecond(time);
      case "minute":
        return startOfMinute(time);
      case "hour":
        return startOfHour(time);
      case "day":
        return startOfDay(time);
      case "week":
        return startOfWeek(time);
      case "isoWeek":
        return startOfWeek(time, { weekStartsOn: +weekday });
      case "month":
        return startOfMonth(time);
      case "quarter":
        return startOfQuarter(time);
      case "year":
        return startOfYear(time);
      default:
        return time;
    }
  },
  endOf: function(time, unit) {
    switch (unit) {
      case "second":
        return endOfSecond(time);
      case "minute":
        return endOfMinute(time);
      case "hour":
        return endOfHour(time);
      case "day":
        return endOfDay(time);
      case "week":
        return endOfWeek(time);
      case "month":
        return endOfMonth(time);
      case "quarter":
        return endOfQuarter(time);
      case "year":
        return endOfYear(time);
      default:
        return time;
    }
  }
});
const InsightWidget_svelte_svelte_type_style_lang = "";
function create_else_block_1(ctx) {
  let div2;
  let div0;
  let t0_value = (
    /*log*/
    ctx[1].title + ""
  );
  let t0;
  let t1;
  let div1;
  let t2_value = (
    /*getOwnerUriName*/
    ctx[5](
      /*log*/
      ctx[1].ownerUri
    ) + ""
  );
  let t2;
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      div0 = claim_element(div2_nodes, "DIV", {});
      var div0_nodes = children(div0);
      t0 = claim_text(div0_nodes, t0_value);
      div0_nodes.forEach(detach);
      t1 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      t2 = claim_text(div1_nodes, t2_value);
      div1_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div1, "class", "subtitle svelte-4hrbdb");
      attr(div2, "class", "header svelte-4hrbdb");
    },
    m(target, anchor) {
      insert_hydration(target, div2, anchor);
      append_hydration(div2, div0);
      append_hydration(div0, t0);
      append_hydration(div2, t1);
      append_hydration(div2, div1);
      append_hydration(div1, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*log*/
      2 && t0_value !== (t0_value = /*log*/
      ctx2[1].title + ""))
        set_data(t0, t0_value);
      if (dirty & /*log*/
      2 && t2_value !== (t2_value = /*getOwnerUriName*/
      ctx2[5](
        /*log*/
        ctx2[1].ownerUri
      ) + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
    }
  };
}
function create_if_block_2$3(ctx) {
  let if_block_anchor;
  let if_block = (
    /*insightId*/
    ctx[0] !== void 0 && create_if_block_3$2()
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*insightId*/
        ctx2[0] !== void 0
      ) {
        if (if_block)
          ;
        else {
          if_block = create_if_block_3$2();
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_3$2(ctx) {
  let span;
  let textContent = "Error";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1azd6s8")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_else_block$1(ctx) {
  let div;
  let chart_1;
  let updating_chart;
  let current;
  function chart_1_chart_binding(value) {
    ctx[7](value);
  }
  let chart_1_props = {
    type: "line",
    data: (
      /*data*/
      ctx[3]
    ),
    options: (
      /*options*/
      ctx[4]
    )
  };
  if (
    /*chart*/
    ctx[2] !== void 0
  ) {
    chart_1_props.chart = /*chart*/
    ctx[2];
  }
  chart_1 = new Chart({ props: chart_1_props });
  binding_callbacks.push(() => bind(chart_1, "chart", chart_1_chart_binding));
  return {
    c() {
      div = element("div");
      create_component(chart_1.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(chart_1.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "chart svelte-4hrbdb");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(chart_1, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const chart_1_changes = {};
      if (dirty & /*data*/
      8)
        chart_1_changes.data = /*data*/
        ctx2[3];
      if (dirty & /*options*/
      16)
        chart_1_changes.options = /*options*/
        ctx2[4];
      if (!updating_chart && dirty & /*chart*/
      4) {
        updating_chart = true;
        chart_1_changes.chart = /*chart*/
        ctx2[2];
        add_flush_callback(() => updating_chart = false);
      }
      chart_1.$set(chart_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(chart_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(chart_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(chart_1);
    }
  };
}
function create_if_block$8(ctx) {
  let if_block_anchor;
  let if_block = (
    /*insightId*/
    ctx[0] !== void 0 && create_if_block_1$5()
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*insightId*/
        ctx2[0] !== void 0
      ) {
        if (if_block)
          ;
        else {
          if_block = create_if_block_1$5();
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_1$5(ctx) {
  let span;
  let textContent = "Log not found.";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-gmvfkt")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$b(ctx) {
  let t2;
  let current_block_type_index;
  let if_block1;
  let if_block1_anchor;
  let current;
  function select_block_type(ctx2, dirty) {
    if (
      /*log*/
      ctx2[1] === void 0
    )
      return create_if_block_2$3;
    return create_else_block_1;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  const if_block_creators = [create_if_block$8, create_else_block$1];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*log*/
      ctx2[1] === void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block0.c();
      t2 = space();
      if_block1.c();
      if_block1_anchor = empty();
    },
    l(nodes) {
      if_block0.l(nodes);
      t2 = claim_space(nodes);
      if_block1.l(nodes);
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      if_block0.m(target, anchor);
      insert_hydration(target, t2, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(t2.parentNode, t2);
        }
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(if_block1_anchor);
      }
      if_block0.d(detaching);
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$9($$self, $$props, $$invalidate) {
  let options;
  let $devices;
  let $homey;
  let $insights;
  component_subscribe($$self, devices, ($$value) => $$invalidate(14, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(15, $homey = $$value));
  component_subscribe($$self, insights, ($$value) => $$invalidate(16, $insights = $$value));
  let { settings } = $$props;
  let insightId;
  let resolution;
  let aggregation;
  let sampleRate;
  let log;
  let entries;
  let timeout;
  let chart;
  let data = { datasets: [] };
  onDestroy(() => {
    if (timeout !== void 0) {
      clearTimeout(timeout);
    }
  });
  async function onSettings(s3) {
    let load = false;
    if (insightId !== s3.insightId) {
      $$invalidate(0, insightId = s3.insightId);
      load = true;
    }
    if (resolution === void 0 || resolution !== s3.resolution) {
      resolution = s3.resolution ?? "today";
      load = true;
    }
    if (aggregation === void 0 || aggregation !== s3.aggregation) {
      aggregation = s3.aggregation ?? "none";
      load = true;
    }
    if (sampleRate === void 0 || sampleRate !== s3.sampleRate) {
      sampleRate = s3.sampleRate ?? 60;
      load = true;
    }
    if (load && insightId) {
      $$invalidate(1, log = $insights[insightId]);
      reload();
    }
  }
  function reload() {
    if (timeout !== void 0) {
      clearTimeout(timeout);
    }
    getEntries();
  }
  async function getEntries() {
    if (log === void 0) {
      return;
    }
    entries = await $homey.insights.getLogEntries({ id: log.id, uri: log.uri, resolution });
    const series = createTimeSeries(entries);
    timeout = setTimeout(
      () => {
        getEntries();
      },
      entries.step - entries.updatesIn
    );
    if (data.datasets.length === 0) {
      data.datasets.push({
        label: log.title,
        type: "line",
        data: series,
        tension: 0.5
      });
    } else {
      $$invalidate(3, data.datasets[0].data = series, data);
    }
    if (chart) {
      chart.update();
    }
  }
  function createTimeSeries(entries2) {
    if (aggregation === void 0 || aggregation === "none" || entries2.step / 1e3 >= sampleRate) {
      return entries2.values.map((entry) => ({
        x: new Date(entry.t).getTime(),
        y: entry.v
      }));
    } else {
      const buckets = entries2.values.reduce(
        (timeBuckets, entry) => {
          const time = new Date(entry.t);
          const value = entry.v;
          const timeOfDay = time.getHours() * 3600 + time.getMinutes() * 60 + time.getSeconds();
          const timestamp = time.getTime() - timeOfDay % sampleRate * 1e3;
          const bucket = timeBuckets[timestamp] = timeBuckets[timestamp] ?? [];
          bucket.push(value);
          return timeBuckets;
        },
        {}
      );
      const result = Object.keys(buckets).map((timestamp) => {
        const values = buckets[timestamp];
        switch (aggregation) {
          case "min":
            return {
              x: Number(timestamp),
              y: Math.min(...values)
            };
          case "max":
            return {
              x: Number(timestamp),
              y: Math.max(...values)
            };
          case "sum":
            return {
              x: Number(timestamp),
              y: values.reduce((a3, b2) => a3 + b2, 0)
            };
          case "avg":
            return {
              x: Number(timestamp),
              y: values.reduce((a3, b2) => a3 + b2, 0) / values.length
            };
          case "first":
            return { x: Number(timestamp), y: values[0] };
          case "last":
            return {
              x: Number(timestamp),
              y: values[values.length - 1]
            };
        }
      });
      return result;
    }
  }
  function getOwnerUriName(uri) {
    if (uri.startsWith("homey:device:")) {
      const prefix = "homey:device:";
      const id = uri.slice(prefix.length);
      return $devices[id].name;
    } else if (uri.startsWith("homey:manager:apps")) {
      return "Homey Applications";
    } else if (uri.startsWith("homey:manager:system")) {
      return "Homey System";
    } else if (uri.startsWith("homey:manager:weather")) {
      return "Homey Weather";
    } else if (uri.startsWith("homey:manager:logic")) {
      return "Homey Logic";
    } else {
      return uri;
    }
  }
  function chart_1_chart_binding(value) {
    chart = value;
    $$invalidate(2, chart);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(6, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    64) {
      onSettings(settings);
    }
  };
  $$invalidate(4, options = {
    plugins: { legend: { display: false } },
    elements: { point: { radius: 0 } },
    scales: { x: { type: "timeseries" } },
    responsive: true,
    maintainAspectRatio: false,
    animation: false
  });
  return [
    insightId,
    log,
    chart,
    data,
    options,
    getOwnerUriName,
    settings,
    chart_1_chart_binding
  ];
}
class InsightWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$9, create_fragment$b, safe_not_equal, { settings: 6 });
  }
}
function get_each_context$3(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i2];
  return child_ctx;
}
function get_each_context_1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[27] = list[i2];
  return child_ctx;
}
function create_default_slot_43(ctx) {
  let t_value = (
    /*getOwnerUriName*/
    ctx[8](
      /*owner*/
      ctx[27]
    ) + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*owners*/
      128 && t_value !== (t_value = /*getOwnerUriName*/
      ctx2[8](
        /*owner*/
        ctx2[27]
      ) + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block_1(ctx) {
  let option;
  let current;
  option = new Option({
    props: {
      value: (
        /*owner*/
        ctx[27]
      ),
      $$slots: { default: [create_default_slot_43] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option.$$.fragment);
    },
    l(nodes) {
      claim_component(option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option_changes = {};
      if (dirty & /*owners*/
      128)
        option_changes.value = /*owner*/
        ctx2[27];
      if (dirty & /*$$scope, owners*/
      1073741952) {
        option_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option.$set(option_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(option, detaching);
    }
  };
}
function create_default_slot_42(ctx) {
  let each_1_anchor;
  let current;
  let each_value_1 = ensure_array_like(
    /*owners*/
    ctx[7]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1(get_each_context_1(ctx, each_value_1, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*owners, getOwnerUriName*/
      384) {
        each_value_1 = ensure_array_like(
          /*owners*/
          ctx2[7]
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_1(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_2$2(ctx) {
  let select;
  let updating_value;
  let current;
  function select_value_binding_1(value) {
    ctx[12](value);
  }
  let select_props = {
    label: "Insight",
    $$slots: { default: [create_default_slot_40] },
    $$scope: { ctx }
  };
  if (
    /*insightId*/
    ctx[1] !== void 0
  ) {
    select_props.value = /*insightId*/
    ctx[1];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding_1));
  return {
    c() {
      create_component(select.$$.fragment);
    },
    l(nodes) {
      claim_component(select.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_changes = {};
      if (dirty & /*$$scope, ownerLogs, ownerUri*/
      1073741920) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty & /*insightId*/
      2) {
        updating_value = true;
        select_changes.value = /*insightId*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select, detaching);
    }
  };
}
function create_default_slot_41(ctx) {
  let t_value = (
    /*insight*/
    ctx[24].title + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*ownerLogs, ownerUri*/
      96 && t_value !== (t_value = /*insight*/
      ctx2[24].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block$3(ctx) {
  let option;
  let current;
  option = new Option({
    props: {
      value: (
        /*insight*/
        ctx[24].id
      ),
      $$slots: { default: [create_default_slot_41] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option.$$.fragment);
    },
    l(nodes) {
      claim_component(option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option_changes = {};
      if (dirty & /*ownerLogs, ownerUri*/
      96)
        option_changes.value = /*insight*/
        ctx2[24].id;
      if (dirty & /*$$scope, ownerLogs, ownerUri*/
      1073741920) {
        option_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option.$set(option_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(option, detaching);
    }
  };
}
function create_default_slot_40(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*ownerLogs*/
    ctx[5][
      /*ownerUri*/
      ctx[6]
    ]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$3(get_each_context$3(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*ownerLogs, ownerUri*/
      96) {
        each_value = ensure_array_like(
          /*ownerLogs*/
          ctx2[5][
            /*ownerUri*/
            ctx2[6]
          ]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$3(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$3(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block$7(ctx) {
  let div0;
  let select0;
  let updating_value;
  let t0;
  let div1;
  let select1;
  let updating_value_1;
  let t1;
  let current;
  function select0_value_binding(value) {
    ctx[13](value);
  }
  let select0_props = {
    label: "Resolution",
    $$slots: { default: [create_default_slot_24] },
    $$scope: { ctx }
  };
  if (
    /*resolution*/
    ctx[2] !== void 0
  ) {
    select0_props.value = /*resolution*/
    ctx[2];
  }
  select0 = new Select({ props: select0_props });
  binding_callbacks.push(() => bind(select0, "value", select0_value_binding));
  function select1_value_binding(value) {
    ctx[14](value);
  }
  let select1_props = {
    label: "Aggregation",
    $$slots: { default: [create_default_slot_16$1] },
    $$scope: { ctx }
  };
  if (
    /*aggregation*/
    ctx[3] !== void 0
  ) {
    select1_props.value = /*aggregation*/
    ctx[3];
  }
  select1 = new Select({ props: select1_props });
  binding_callbacks.push(() => bind(select1, "value", select1_value_binding));
  let if_block = (
    /*aggregation*/
    ctx[3] !== "none" && create_if_block_1$4(ctx)
  );
  return {
    c() {
      div0 = element("div");
      create_component(select0.$$.fragment);
      t0 = space();
      div1 = element("div");
      create_component(select1.$$.fragment);
      t1 = space();
      if (if_block)
        if_block.c();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", {});
      var div0_nodes = children(div0);
      claim_component(select0.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", {});
      var div1_nodes = children(div1);
      claim_component(select1.$$.fragment, div1_nodes);
      t1 = claim_space(div1_nodes);
      if (if_block)
        if_block.l(div1_nodes);
      div1_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(select0, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div1, anchor);
      mount_component(select1, div1, null);
      append_hydration(div1, t1);
      if (if_block)
        if_block.m(div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      const select0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        select0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty & /*resolution*/
      4) {
        updating_value = true;
        select0_changes.value = /*resolution*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      select0.$set(select0_changes);
      const select1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        select1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value_1 && dirty & /*aggregation*/
      8) {
        updating_value_1 = true;
        select1_changes.value = /*aggregation*/
        ctx2[3];
        add_flush_callback(() => updating_value_1 = false);
      }
      select1.$set(select1_changes);
      if (
        /*aggregation*/
        ctx2[3] !== "none"
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*aggregation*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$4(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(select0.$$.fragment, local);
      transition_in(select1.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(select0.$$.fragment, local);
      transition_out(select1.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(div1);
      }
      destroy_component(select0);
      destroy_component(select1);
      if (if_block)
        if_block.d();
    }
  };
}
function create_default_slot_39(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Last hour");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Last hour");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_38(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Last 6 hours");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Last 6 hours");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_37(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Last 24 hours");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Last 24 hours");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_36(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Last 7 days");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Last 7 days");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_35(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Last 14 days");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Last 14 days");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_34(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Last 31 days");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Last 31 days");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_33(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Today");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Today");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_32(ctx) {
  let t2;
  return {
    c() {
      t2 = text("This week");
    },
    l(nodes) {
      t2 = claim_text(nodes, "This week");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_31(ctx) {
  let t2;
  return {
    c() {
      t2 = text("This month");
    },
    l(nodes) {
      t2 = claim_text(nodes, "This month");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_30(ctx) {
  let t2;
  return {
    c() {
      t2 = text("This year");
    },
    l(nodes) {
      t2 = claim_text(nodes, "This year");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_29(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Yesterday");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Yesterday");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_28(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Last week");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Last week");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_27(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Last month");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Last month");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_26(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Last year");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Last year");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_25(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Last 2 years");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Last 2 years");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_24(ctx) {
  let option0;
  let t0;
  let option1;
  let t1;
  let option2;
  let t2;
  let option3;
  let t3;
  let option4;
  let t4;
  let option5;
  let t5;
  let option6;
  let t6;
  let option7;
  let t7;
  let option8;
  let t8;
  let option9;
  let t9;
  let option10;
  let t10;
  let option11;
  let t11;
  let option12;
  let t12;
  let option13;
  let t13;
  let option14;
  let current;
  option0 = new Option({
    props: {
      value: "lastHour",
      $$slots: { default: [create_default_slot_39] },
      $$scope: { ctx }
    }
  });
  option1 = new Option({
    props: {
      value: "last6Hours",
      $$slots: { default: [create_default_slot_38] },
      $$scope: { ctx }
    }
  });
  option2 = new Option({
    props: {
      value: "last24Hours",
      $$slots: { default: [create_default_slot_37] },
      $$scope: { ctx }
    }
  });
  option3 = new Option({
    props: {
      value: "last7Days",
      $$slots: { default: [create_default_slot_36] },
      $$scope: { ctx }
    }
  });
  option4 = new Option({
    props: {
      value: "last14Days",
      $$slots: { default: [create_default_slot_35] },
      $$scope: { ctx }
    }
  });
  option5 = new Option({
    props: {
      value: "last31Days",
      $$slots: { default: [create_default_slot_34] },
      $$scope: { ctx }
    }
  });
  option6 = new Option({
    props: {
      value: "today",
      $$slots: { default: [create_default_slot_33] },
      $$scope: { ctx }
    }
  });
  option7 = new Option({
    props: {
      value: "thisWeek",
      $$slots: { default: [create_default_slot_32] },
      $$scope: { ctx }
    }
  });
  option8 = new Option({
    props: {
      value: "thisMonth",
      $$slots: { default: [create_default_slot_31] },
      $$scope: { ctx }
    }
  });
  option9 = new Option({
    props: {
      value: "thisYear",
      $$slots: { default: [create_default_slot_30] },
      $$scope: { ctx }
    }
  });
  option10 = new Option({
    props: {
      value: "yesterday",
      $$slots: { default: [create_default_slot_29] },
      $$scope: { ctx }
    }
  });
  option11 = new Option({
    props: {
      value: "lastWeek",
      $$slots: { default: [create_default_slot_28] },
      $$scope: { ctx }
    }
  });
  option12 = new Option({
    props: {
      value: "lastMonth",
      $$slots: { default: [create_default_slot_27] },
      $$scope: { ctx }
    }
  });
  option13 = new Option({
    props: {
      value: "lastYear",
      $$slots: { default: [create_default_slot_26] },
      $$scope: { ctx }
    }
  });
  option14 = new Option({
    props: {
      value: "last2Years",
      $$slots: { default: [create_default_slot_25] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option0.$$.fragment);
      t0 = space();
      create_component(option1.$$.fragment);
      t1 = space();
      create_component(option2.$$.fragment);
      t2 = space();
      create_component(option3.$$.fragment);
      t3 = space();
      create_component(option4.$$.fragment);
      t4 = space();
      create_component(option5.$$.fragment);
      t5 = space();
      create_component(option6.$$.fragment);
      t6 = space();
      create_component(option7.$$.fragment);
      t7 = space();
      create_component(option8.$$.fragment);
      t8 = space();
      create_component(option9.$$.fragment);
      t9 = space();
      create_component(option10.$$.fragment);
      t10 = space();
      create_component(option11.$$.fragment);
      t11 = space();
      create_component(option12.$$.fragment);
      t12 = space();
      create_component(option13.$$.fragment);
      t13 = space();
      create_component(option14.$$.fragment);
    },
    l(nodes) {
      claim_component(option0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(option1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(option2.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(option3.$$.fragment, nodes);
      t3 = claim_space(nodes);
      claim_component(option4.$$.fragment, nodes);
      t4 = claim_space(nodes);
      claim_component(option5.$$.fragment, nodes);
      t5 = claim_space(nodes);
      claim_component(option6.$$.fragment, nodes);
      t6 = claim_space(nodes);
      claim_component(option7.$$.fragment, nodes);
      t7 = claim_space(nodes);
      claim_component(option8.$$.fragment, nodes);
      t8 = claim_space(nodes);
      claim_component(option9.$$.fragment, nodes);
      t9 = claim_space(nodes);
      claim_component(option10.$$.fragment, nodes);
      t10 = claim_space(nodes);
      claim_component(option11.$$.fragment, nodes);
      t11 = claim_space(nodes);
      claim_component(option12.$$.fragment, nodes);
      t12 = claim_space(nodes);
      claim_component(option13.$$.fragment, nodes);
      t13 = claim_space(nodes);
      claim_component(option14.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option0, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(option1, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(option2, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(option3, target, anchor);
      insert_hydration(target, t3, anchor);
      mount_component(option4, target, anchor);
      insert_hydration(target, t4, anchor);
      mount_component(option5, target, anchor);
      insert_hydration(target, t5, anchor);
      mount_component(option6, target, anchor);
      insert_hydration(target, t6, anchor);
      mount_component(option7, target, anchor);
      insert_hydration(target, t7, anchor);
      mount_component(option8, target, anchor);
      insert_hydration(target, t8, anchor);
      mount_component(option9, target, anchor);
      insert_hydration(target, t9, anchor);
      mount_component(option10, target, anchor);
      insert_hydration(target, t10, anchor);
      mount_component(option11, target, anchor);
      insert_hydration(target, t11, anchor);
      mount_component(option12, target, anchor);
      insert_hydration(target, t12, anchor);
      mount_component(option13, target, anchor);
      insert_hydration(target, t13, anchor);
      mount_component(option14, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option0.$set(option0_changes);
      const option1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option1.$set(option1_changes);
      const option2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option2.$set(option2_changes);
      const option3_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option3.$set(option3_changes);
      const option4_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option4.$set(option4_changes);
      const option5_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option5.$set(option5_changes);
      const option6_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option6.$set(option6_changes);
      const option7_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option7_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option7.$set(option7_changes);
      const option8_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option8_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option8.$set(option8_changes);
      const option9_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option9_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option9.$set(option9_changes);
      const option10_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option10_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option10.$set(option10_changes);
      const option11_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option11_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option11.$set(option11_changes);
      const option12_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option12_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option12.$set(option12_changes);
      const option13_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option13_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option13.$set(option13_changes);
      const option14_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option14_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option14.$set(option14_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option0.$$.fragment, local);
      transition_in(option1.$$.fragment, local);
      transition_in(option2.$$.fragment, local);
      transition_in(option3.$$.fragment, local);
      transition_in(option4.$$.fragment, local);
      transition_in(option5.$$.fragment, local);
      transition_in(option6.$$.fragment, local);
      transition_in(option7.$$.fragment, local);
      transition_in(option8.$$.fragment, local);
      transition_in(option9.$$.fragment, local);
      transition_in(option10.$$.fragment, local);
      transition_in(option11.$$.fragment, local);
      transition_in(option12.$$.fragment, local);
      transition_in(option13.$$.fragment, local);
      transition_in(option14.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option0.$$.fragment, local);
      transition_out(option1.$$.fragment, local);
      transition_out(option2.$$.fragment, local);
      transition_out(option3.$$.fragment, local);
      transition_out(option4.$$.fragment, local);
      transition_out(option5.$$.fragment, local);
      transition_out(option6.$$.fragment, local);
      transition_out(option7.$$.fragment, local);
      transition_out(option8.$$.fragment, local);
      transition_out(option9.$$.fragment, local);
      transition_out(option10.$$.fragment, local);
      transition_out(option11.$$.fragment, local);
      transition_out(option12.$$.fragment, local);
      transition_out(option13.$$.fragment, local);
      transition_out(option14.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
        detach(t5);
        detach(t6);
        detach(t7);
        detach(t8);
        detach(t9);
        detach(t10);
        detach(t11);
        detach(t12);
        detach(t13);
      }
      destroy_component(option0, detaching);
      destroy_component(option1, detaching);
      destroy_component(option2, detaching);
      destroy_component(option3, detaching);
      destroy_component(option4, detaching);
      destroy_component(option5, detaching);
      destroy_component(option6, detaching);
      destroy_component(option7, detaching);
      destroy_component(option8, detaching);
      destroy_component(option9, detaching);
      destroy_component(option10, detaching);
      destroy_component(option11, detaching);
      destroy_component(option12, detaching);
      destroy_component(option13, detaching);
      destroy_component(option14, detaching);
    }
  };
}
function create_default_slot_23$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("No aggregation");
    },
    l(nodes) {
      t2 = claim_text(nodes, "No aggregation");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_22$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Min");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Min");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_21$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Max");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Max");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_20$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Sum");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Sum");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_19$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Avg");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Avg");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_18$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("First");
    },
    l(nodes) {
      t2 = claim_text(nodes, "First");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_17$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Last");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Last");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_16$1(ctx) {
  let option0;
  let t0;
  let option1;
  let t1;
  let option2;
  let t2;
  let option3;
  let t3;
  let option4;
  let t4;
  let option5;
  let t5;
  let option6;
  let current;
  option0 = new Option({
    props: {
      value: "none",
      $$slots: { default: [create_default_slot_23$1] },
      $$scope: { ctx }
    }
  });
  option1 = new Option({
    props: {
      value: "min",
      $$slots: { default: [create_default_slot_22$1] },
      $$scope: { ctx }
    }
  });
  option2 = new Option({
    props: {
      value: "max",
      $$slots: { default: [create_default_slot_21$1] },
      $$scope: { ctx }
    }
  });
  option3 = new Option({
    props: {
      value: "sum",
      $$slots: { default: [create_default_slot_20$1] },
      $$scope: { ctx }
    }
  });
  option4 = new Option({
    props: {
      value: "avg",
      $$slots: { default: [create_default_slot_19$1] },
      $$scope: { ctx }
    }
  });
  option5 = new Option({
    props: {
      value: "first",
      $$slots: { default: [create_default_slot_18$1] },
      $$scope: { ctx }
    }
  });
  option6 = new Option({
    props: {
      value: "last",
      $$slots: { default: [create_default_slot_17$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option0.$$.fragment);
      t0 = space();
      create_component(option1.$$.fragment);
      t1 = space();
      create_component(option2.$$.fragment);
      t2 = space();
      create_component(option3.$$.fragment);
      t3 = space();
      create_component(option4.$$.fragment);
      t4 = space();
      create_component(option5.$$.fragment);
      t5 = space();
      create_component(option6.$$.fragment);
    },
    l(nodes) {
      claim_component(option0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(option1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(option2.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(option3.$$.fragment, nodes);
      t3 = claim_space(nodes);
      claim_component(option4.$$.fragment, nodes);
      t4 = claim_space(nodes);
      claim_component(option5.$$.fragment, nodes);
      t5 = claim_space(nodes);
      claim_component(option6.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option0, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(option1, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(option2, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(option3, target, anchor);
      insert_hydration(target, t3, anchor);
      mount_component(option4, target, anchor);
      insert_hydration(target, t4, anchor);
      mount_component(option5, target, anchor);
      insert_hydration(target, t5, anchor);
      mount_component(option6, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option0.$set(option0_changes);
      const option1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option1.$set(option1_changes);
      const option2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option2.$set(option2_changes);
      const option3_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option3.$set(option3_changes);
      const option4_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option4.$set(option4_changes);
      const option5_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option5.$set(option5_changes);
      const option6_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option6.$set(option6_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option0.$$.fragment, local);
      transition_in(option1.$$.fragment, local);
      transition_in(option2.$$.fragment, local);
      transition_in(option3.$$.fragment, local);
      transition_in(option4.$$.fragment, local);
      transition_in(option5.$$.fragment, local);
      transition_in(option6.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option0.$$.fragment, local);
      transition_out(option1.$$.fragment, local);
      transition_out(option2.$$.fragment, local);
      transition_out(option3.$$.fragment, local);
      transition_out(option4.$$.fragment, local);
      transition_out(option5.$$.fragment, local);
      transition_out(option6.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
        detach(t5);
      }
      destroy_component(option0, detaching);
      destroy_component(option1, detaching);
      destroy_component(option2, detaching);
      destroy_component(option3, detaching);
      destroy_component(option4, detaching);
      destroy_component(option5, detaching);
      destroy_component(option6, detaching);
    }
  };
}
function create_if_block_1$4(ctx) {
  let select;
  let updating_value;
  let current;
  function select_value_binding_2(value) {
    ctx[15](value);
  }
  let select_props = {
    label: "Sample rate",
    $$slots: { default: [create_default_slot$6] },
    $$scope: { ctx }
  };
  if (
    /*sampleRate*/
    ctx[4] !== void 0
  ) {
    select_props.value = /*sampleRate*/
    ctx[4];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding_2));
  return {
    c() {
      create_component(select.$$.fragment);
    },
    l(nodes) {
      claim_component(select.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty & /*sampleRate*/
      16) {
        updating_value = true;
        select_changes.value = /*sampleRate*/
        ctx2[4];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select, detaching);
    }
  };
}
function create_default_slot_15$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("10 seconds");
    },
    l(nodes) {
      t2 = claim_text(nodes, "10 seconds");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_14$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("20 seconds");
    },
    l(nodes) {
      t2 = claim_text(nodes, "20 seconds");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_13$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("30 seconds");
    },
    l(nodes) {
      t2 = claim_text(nodes, "30 seconds");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_12$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("1 min");
    },
    l(nodes) {
      t2 = claim_text(nodes, "1 min");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_11$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("5 min");
    },
    l(nodes) {
      t2 = claim_text(nodes, "5 min");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_10$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("10 min");
    },
    l(nodes) {
      t2 = claim_text(nodes, "10 min");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_9$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("15 min");
    },
    l(nodes) {
      t2 = claim_text(nodes, "15 min");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_8$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("20 min");
    },
    l(nodes) {
      t2 = claim_text(nodes, "20 min");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_7$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("30 min");
    },
    l(nodes) {
      t2 = claim_text(nodes, "30 min");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_6$4(ctx) {
  let t2;
  return {
    c() {
      t2 = text("1 hour");
    },
    l(nodes) {
      t2 = claim_text(nodes, "1 hour");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_5$4(ctx) {
  let t2;
  return {
    c() {
      t2 = text("2 hours");
    },
    l(nodes) {
      t2 = claim_text(nodes, "2 hours");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_4$4(ctx) {
  let t2;
  return {
    c() {
      t2 = text("3 hours");
    },
    l(nodes) {
      t2 = claim_text(nodes, "3 hours");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_3$4(ctx) {
  let t2;
  return {
    c() {
      t2 = text("6 hours");
    },
    l(nodes) {
      t2 = claim_text(nodes, "6 hours");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_2$5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("12 hours");
    },
    l(nodes) {
      t2 = claim_text(nodes, "12 hours");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_1$5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("24 hours");
    },
    l(nodes) {
      t2 = claim_text(nodes, "24 hours");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot$6(ctx) {
  let option0;
  let t0;
  let option1;
  let t1;
  let option2;
  let t2;
  let option3;
  let t3;
  let option4;
  let t4;
  let option5;
  let t5;
  let option6;
  let t6;
  let option7;
  let t7;
  let option8;
  let t8;
  let option9;
  let t9;
  let option10;
  let t10;
  let option11;
  let t11;
  let option12;
  let t12;
  let option13;
  let t13;
  let option14;
  let current;
  option0 = new Option({
    props: {
      value: "10",
      $$slots: { default: [create_default_slot_15$1] },
      $$scope: { ctx }
    }
  });
  option1 = new Option({
    props: {
      value: "20",
      $$slots: { default: [create_default_slot_14$1] },
      $$scope: { ctx }
    }
  });
  option2 = new Option({
    props: {
      value: "30",
      $$slots: { default: [create_default_slot_13$1] },
      $$scope: { ctx }
    }
  });
  option3 = new Option({
    props: {
      value: "60",
      $$slots: { default: [create_default_slot_12$1] },
      $$scope: { ctx }
    }
  });
  option4 = new Option({
    props: {
      value: "300",
      $$slots: { default: [create_default_slot_11$2] },
      $$scope: { ctx }
    }
  });
  option5 = new Option({
    props: {
      value: "600",
      $$slots: { default: [create_default_slot_10$3] },
      $$scope: { ctx }
    }
  });
  option6 = new Option({
    props: {
      value: "900",
      $$slots: { default: [create_default_slot_9$3] },
      $$scope: { ctx }
    }
  });
  option7 = new Option({
    props: {
      value: "1200",
      $$slots: { default: [create_default_slot_8$3] },
      $$scope: { ctx }
    }
  });
  option8 = new Option({
    props: {
      value: "1800",
      $$slots: { default: [create_default_slot_7$3] },
      $$scope: { ctx }
    }
  });
  option9 = new Option({
    props: {
      value: "3600",
      $$slots: { default: [create_default_slot_6$4] },
      $$scope: { ctx }
    }
  });
  option10 = new Option({
    props: {
      value: "7200",
      $$slots: { default: [create_default_slot_5$4] },
      $$scope: { ctx }
    }
  });
  option11 = new Option({
    props: {
      value: "10800",
      $$slots: { default: [create_default_slot_4$4] },
      $$scope: { ctx }
    }
  });
  option12 = new Option({
    props: {
      value: "21600",
      $$slots: { default: [create_default_slot_3$4] },
      $$scope: { ctx }
    }
  });
  option13 = new Option({
    props: {
      value: "43200",
      $$slots: { default: [create_default_slot_2$5] },
      $$scope: { ctx }
    }
  });
  option14 = new Option({
    props: {
      value: "86400",
      $$slots: { default: [create_default_slot_1$5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option0.$$.fragment);
      t0 = space();
      create_component(option1.$$.fragment);
      t1 = space();
      create_component(option2.$$.fragment);
      t2 = space();
      create_component(option3.$$.fragment);
      t3 = space();
      create_component(option4.$$.fragment);
      t4 = space();
      create_component(option5.$$.fragment);
      t5 = space();
      create_component(option6.$$.fragment);
      t6 = space();
      create_component(option7.$$.fragment);
      t7 = space();
      create_component(option8.$$.fragment);
      t8 = space();
      create_component(option9.$$.fragment);
      t9 = space();
      create_component(option10.$$.fragment);
      t10 = space();
      create_component(option11.$$.fragment);
      t11 = space();
      create_component(option12.$$.fragment);
      t12 = space();
      create_component(option13.$$.fragment);
      t13 = space();
      create_component(option14.$$.fragment);
    },
    l(nodes) {
      claim_component(option0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(option1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(option2.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(option3.$$.fragment, nodes);
      t3 = claim_space(nodes);
      claim_component(option4.$$.fragment, nodes);
      t4 = claim_space(nodes);
      claim_component(option5.$$.fragment, nodes);
      t5 = claim_space(nodes);
      claim_component(option6.$$.fragment, nodes);
      t6 = claim_space(nodes);
      claim_component(option7.$$.fragment, nodes);
      t7 = claim_space(nodes);
      claim_component(option8.$$.fragment, nodes);
      t8 = claim_space(nodes);
      claim_component(option9.$$.fragment, nodes);
      t9 = claim_space(nodes);
      claim_component(option10.$$.fragment, nodes);
      t10 = claim_space(nodes);
      claim_component(option11.$$.fragment, nodes);
      t11 = claim_space(nodes);
      claim_component(option12.$$.fragment, nodes);
      t12 = claim_space(nodes);
      claim_component(option13.$$.fragment, nodes);
      t13 = claim_space(nodes);
      claim_component(option14.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option0, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(option1, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(option2, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(option3, target, anchor);
      insert_hydration(target, t3, anchor);
      mount_component(option4, target, anchor);
      insert_hydration(target, t4, anchor);
      mount_component(option5, target, anchor);
      insert_hydration(target, t5, anchor);
      mount_component(option6, target, anchor);
      insert_hydration(target, t6, anchor);
      mount_component(option7, target, anchor);
      insert_hydration(target, t7, anchor);
      mount_component(option8, target, anchor);
      insert_hydration(target, t8, anchor);
      mount_component(option9, target, anchor);
      insert_hydration(target, t9, anchor);
      mount_component(option10, target, anchor);
      insert_hydration(target, t10, anchor);
      mount_component(option11, target, anchor);
      insert_hydration(target, t11, anchor);
      mount_component(option12, target, anchor);
      insert_hydration(target, t12, anchor);
      mount_component(option13, target, anchor);
      insert_hydration(target, t13, anchor);
      mount_component(option14, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option0.$set(option0_changes);
      const option1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option1.$set(option1_changes);
      const option2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option2.$set(option2_changes);
      const option3_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option3.$set(option3_changes);
      const option4_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option4.$set(option4_changes);
      const option5_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option5.$set(option5_changes);
      const option6_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option6.$set(option6_changes);
      const option7_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option7_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option7.$set(option7_changes);
      const option8_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option8_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option8.$set(option8_changes);
      const option9_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option9_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option9.$set(option9_changes);
      const option10_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option10_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option10.$set(option10_changes);
      const option11_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option11_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option11.$set(option11_changes);
      const option12_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option12_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option12.$set(option12_changes);
      const option13_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option13_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option13.$set(option13_changes);
      const option14_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        option14_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option14.$set(option14_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option0.$$.fragment, local);
      transition_in(option1.$$.fragment, local);
      transition_in(option2.$$.fragment, local);
      transition_in(option3.$$.fragment, local);
      transition_in(option4.$$.fragment, local);
      transition_in(option5.$$.fragment, local);
      transition_in(option6.$$.fragment, local);
      transition_in(option7.$$.fragment, local);
      transition_in(option8.$$.fragment, local);
      transition_in(option9.$$.fragment, local);
      transition_in(option10.$$.fragment, local);
      transition_in(option11.$$.fragment, local);
      transition_in(option12.$$.fragment, local);
      transition_in(option13.$$.fragment, local);
      transition_in(option14.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option0.$$.fragment, local);
      transition_out(option1.$$.fragment, local);
      transition_out(option2.$$.fragment, local);
      transition_out(option3.$$.fragment, local);
      transition_out(option4.$$.fragment, local);
      transition_out(option5.$$.fragment, local);
      transition_out(option6.$$.fragment, local);
      transition_out(option7.$$.fragment, local);
      transition_out(option8.$$.fragment, local);
      transition_out(option9.$$.fragment, local);
      transition_out(option10.$$.fragment, local);
      transition_out(option11.$$.fragment, local);
      transition_out(option12.$$.fragment, local);
      transition_out(option13.$$.fragment, local);
      transition_out(option14.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
        detach(t5);
        detach(t6);
        detach(t7);
        detach(t8);
        detach(t9);
        detach(t10);
        detach(t11);
        detach(t12);
        detach(t13);
      }
      destroy_component(option0, detaching);
      destroy_component(option1, detaching);
      destroy_component(option2, detaching);
      destroy_component(option3, detaching);
      destroy_component(option4, detaching);
      destroy_component(option5, detaching);
      destroy_component(option6, detaching);
      destroy_component(option7, detaching);
      destroy_component(option8, detaching);
      destroy_component(option9, detaching);
      destroy_component(option10, detaching);
      destroy_component(option11, detaching);
      destroy_component(option12, detaching);
      destroy_component(option13, detaching);
      destroy_component(option14, detaching);
    }
  };
}
function create_fragment$a(ctx) {
  let div0;
  let select;
  let updating_value;
  let t0;
  let div1;
  let t1;
  let if_block1_anchor;
  let current;
  function select_value_binding(value) {
    ctx[11](value);
  }
  let select_props = {
    label: "Source",
    $$slots: { default: [create_default_slot_42] },
    $$scope: { ctx }
  };
  if (
    /*selectedOwnerUri*/
    ctx[0] !== void 0
  ) {
    select_props.value = /*selectedOwnerUri*/
    ctx[0];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  let if_block0 = (
    /*ownerUri*/
    ctx[6] && create_if_block_2$2(ctx)
  );
  let if_block1 = (
    /*ownerUri*/
    ctx[6] && /*insightId*/
    ctx[1] && create_if_block$7(ctx)
  );
  return {
    c() {
      div0 = element("div");
      create_component(select.$$.fragment);
      t0 = space();
      div1 = element("div");
      if (if_block0)
        if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", {});
      var div0_nodes = children(div0);
      claim_component(select.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", {});
      var div1_nodes = children(div1);
      if (if_block0)
        if_block0.l(div1_nodes);
      div1_nodes.forEach(detach);
      t1 = claim_space(nodes);
      if (if_block1)
        if_block1.l(nodes);
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(select, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div1, anchor);
      if (if_block0)
        if_block0.m(div1, null);
      insert_hydration(target, t1, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert_hydration(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const select_changes = {};
      if (dirty & /*$$scope, owners*/
      1073741952) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty & /*selectedOwnerUri*/
      1) {
        updating_value = true;
        select_changes.value = /*selectedOwnerUri*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
      if (
        /*ownerUri*/
        ctx2[6]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*ownerUri*/
          64) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_2$2(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div1, null);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*ownerUri*/
        ctx2[6] && /*insightId*/
        ctx2[1]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*ownerUri, insightId*/
          66) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$7(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(div1);
        detach(t1);
        detach(if_block1_anchor);
      }
      destroy_component(select);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
function instance$8($$self, $$props, $$invalidate) {
  let ownerLogs;
  let owners;
  let $devices;
  let $insights;
  component_subscribe($$self, devices, ($$value) => $$invalidate(16, $devices = $$value));
  component_subscribe($$self, insights, ($$value) => $$invalidate(10, $insights = $$value));
  let { settings } = $$props;
  const dispatch2 = createEventDispatcher();
  let selectedOwnerUri;
  let ownerUri;
  let insightId;
  let resolution;
  let aggregation;
  let sampleRate;
  function onSettings(s3) {
    $$invalidate(1, insightId = settings == null ? void 0 : settings.insightId);
    $$invalidate(2, resolution = (settings == null ? void 0 : settings.resolution) ?? "today");
    $$invalidate(3, aggregation = (settings == null ? void 0 : settings.aggregation) ?? "none");
    $$invalidate(4, sampleRate = (settings == null ? void 0 : settings.sampleRate) ?? 60);
    if (insightId !== void 0) {
      $$invalidate(6, ownerUri = $insights[insightId].ownerUri);
      $$invalidate(0, selectedOwnerUri = ownerUri);
    }
  }
  function onOwner(value) {
    if (value === ownerUri) {
      return;
    }
    $$invalidate(6, ownerUri = value);
    $$invalidate(1, insightId = void 0);
  }
  function onInsight(value) {
    if (value == void 0 || value === settings.insightId) {
      return;
    }
    dispatch2("settings", { ...settings, insightId });
  }
  function onResolution(value) {
    if (value == void 0 || value === settings.resolution) {
      return;
    }
    dispatch2("settings", { ...settings, resolution });
  }
  function onAggregation(value) {
    if (value == void 0 || value === settings.aggregation) {
      return;
    }
    dispatch2("settings", { ...settings, aggregation });
  }
  function onSampleRate(value) {
    if (value == void 0 || value === settings.sampleRate) {
      return;
    }
    dispatch2("settings", { ...settings, sampleRate });
  }
  function getOwnerUriName(uri) {
    if (uri.startsWith("homey:device:")) {
      const prefix = "homey:device:";
      const id = uri.slice(prefix.length);
      return $devices[id].name;
    } else if (uri.startsWith("homey:manager:apps")) {
      return "Homey Apps";
    } else if (uri.startsWith("homey:manager:system")) {
      return "Homey System";
    } else if (uri.startsWith("homey:manager:weather")) {
      return "Homey Weather";
    } else if (uri.startsWith("homey:manager:logic")) {
      return "Homey Logic";
    } else {
      return uri;
    }
  }
  function select_value_binding(value) {
    selectedOwnerUri = value;
    $$invalidate(0, selectedOwnerUri);
  }
  function select_value_binding_1(value) {
    insightId = value;
    $$invalidate(1, insightId);
  }
  function select0_value_binding(value) {
    resolution = value;
    $$invalidate(2, resolution);
  }
  function select1_value_binding(value) {
    aggregation = value;
    $$invalidate(3, aggregation);
  }
  function select_value_binding_2(value) {
    sampleRate = value;
    $$invalidate(4, sampleRate);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(9, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    512) {
      onSettings();
    }
    if ($$self.$$.dirty & /*$insights*/
    1024) {
      $$invalidate(5, ownerLogs = Object.values($insights).reduce(
        (groups, log) => {
          const ownerUri2 = log.ownerUri;
          const group = groups[ownerUri2] = groups[ownerUri2] ?? [];
          group.push(log);
          return groups;
        },
        {}
      ));
    }
    if ($$self.$$.dirty & /*ownerLogs*/
    32) {
      $$invalidate(7, owners = Object.keys(ownerLogs));
    }
    if ($$self.$$.dirty & /*selectedOwnerUri*/
    1) {
      onOwner(selectedOwnerUri);
    }
    if ($$self.$$.dirty & /*insightId*/
    2) {
      onInsight(insightId);
    }
    if ($$self.$$.dirty & /*resolution*/
    4) {
      onResolution(resolution);
    }
    if ($$self.$$.dirty & /*aggregation*/
    8) {
      onAggregation(aggregation);
    }
    if ($$self.$$.dirty & /*sampleRate*/
    16) {
      onSampleRate(sampleRate);
    }
  };
  return [
    selectedOwnerUri,
    insightId,
    resolution,
    aggregation,
    sampleRate,
    ownerLogs,
    ownerUri,
    owners,
    getOwnerUriName,
    settings,
    $insights,
    select_value_binding,
    select_value_binding_1,
    select0_value_binding,
    select1_value_binding,
    select_value_binding_2
  ];
}
class InsightEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$8, create_fragment$a, safe_not_equal, { settings: 9 });
  }
}
function create() {
  return {
    id: v4(),
    type: "insight",
    version: 2
  };
}
function migrate(settings) {
  switch (settings.version) {
    case 2:
      return settings;
    case 1:
    default:
      return migrate_v1_v2(settings);
  }
}
function migrate_v1_v2(v1) {
  var _a2;
  const settings = {
    id: v1.id,
    type: v1.type,
    version: 2,
    insightId: ((_a2 = v1.insightId) == null ? void 0 : _a2.startsWith("homey:")) ? v1.insightId : "homey:device:" + v1.deviceId + ":" + v1.insightId,
    resolution: v1.resolution,
    aggregation: "none",
    sampleRate: void 0
  };
  return settings;
}
function create_default_slot_6$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("1");
    },
    l(nodes) {
      t2 = claim_text(nodes, "1");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_5$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("2");
    },
    l(nodes) {
      t2 = claim_text(nodes, "2");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_4$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("3");
    },
    l(nodes) {
      t2 = claim_text(nodes, "3");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_3$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("4");
    },
    l(nodes) {
      t2 = claim_text(nodes, "4");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_2$4(ctx) {
  let t2;
  return {
    c() {
      t2 = text("5");
    },
    l(nodes) {
      t2 = claim_text(nodes, "5");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_1$4(ctx) {
  let t2;
  return {
    c() {
      t2 = text("6");
    },
    l(nodes) {
      t2 = claim_text(nodes, "6");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot$5(ctx) {
  let option0;
  let t0;
  let option1;
  let t1;
  let option2;
  let t2;
  let option3;
  let t3;
  let option4;
  let t4;
  let option5;
  let current;
  option0 = new Option({
    props: {
      value: "1",
      $$slots: { default: [create_default_slot_6$3] },
      $$scope: { ctx }
    }
  });
  option1 = new Option({
    props: {
      value: "2",
      $$slots: { default: [create_default_slot_5$3] },
      $$scope: { ctx }
    }
  });
  option2 = new Option({
    props: {
      value: "3",
      $$slots: { default: [create_default_slot_4$3] },
      $$scope: { ctx }
    }
  });
  option3 = new Option({
    props: {
      value: "4",
      $$slots: { default: [create_default_slot_3$3] },
      $$scope: { ctx }
    }
  });
  option4 = new Option({
    props: {
      value: "5",
      $$slots: { default: [create_default_slot_2$4] },
      $$scope: { ctx }
    }
  });
  option5 = new Option({
    props: {
      value: "6",
      $$slots: { default: [create_default_slot_1$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(option0.$$.fragment);
      t0 = space();
      create_component(option1.$$.fragment);
      t1 = space();
      create_component(option2.$$.fragment);
      t2 = space();
      create_component(option3.$$.fragment);
      t3 = space();
      create_component(option4.$$.fragment);
      t4 = space();
      create_component(option5.$$.fragment);
    },
    l(nodes) {
      claim_component(option0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(option1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(option2.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(option3.$$.fragment, nodes);
      t3 = claim_space(nodes);
      claim_component(option4.$$.fragment, nodes);
      t4 = claim_space(nodes);
      claim_component(option5.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(option0, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(option1, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(option2, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(option3, target, anchor);
      insert_hydration(target, t3, anchor);
      mount_component(option4, target, anchor);
      insert_hydration(target, t4, anchor);
      mount_component(option5, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const option0_changes = {};
      if (dirty & /*$$scope*/
      256) {
        option0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option0.$set(option0_changes);
      const option1_changes = {};
      if (dirty & /*$$scope*/
      256) {
        option1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option1.$set(option1_changes);
      const option2_changes = {};
      if (dirty & /*$$scope*/
      256) {
        option2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option2.$set(option2_changes);
      const option3_changes = {};
      if (dirty & /*$$scope*/
      256) {
        option3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option3.$set(option3_changes);
      const option4_changes = {};
      if (dirty & /*$$scope*/
      256) {
        option4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option4.$set(option4_changes);
      const option5_changes = {};
      if (dirty & /*$$scope*/
      256) {
        option5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      option5.$set(option5_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(option0.$$.fragment, local);
      transition_in(option1.$$.fragment, local);
      transition_in(option2.$$.fragment, local);
      transition_in(option3.$$.fragment, local);
      transition_in(option4.$$.fragment, local);
      transition_in(option5.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(option0.$$.fragment, local);
      transition_out(option1.$$.fragment, local);
      transition_out(option2.$$.fragment, local);
      transition_out(option3.$$.fragment, local);
      transition_out(option4.$$.fragment, local);
      transition_out(option5.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
      }
      destroy_component(option0, detaching);
      destroy_component(option1, detaching);
      destroy_component(option2, detaching);
      destroy_component(option3, detaching);
      destroy_component(option4, detaching);
      destroy_component(option5, detaching);
    }
  };
}
function create_fragment$9(ctx) {
  let div;
  let textfield;
  let updating_value;
  let t2;
  let select;
  let updating_value_1;
  let current;
  function textfield_value_binding(value) {
    ctx[3](value);
  }
  let textfield_props = {
    label: "Text",
    textarea: true,
    style: "width: 100%;"
  };
  if (
    /*text*/
    ctx[0] !== void 0
  ) {
    textfield_props.value = /*text*/
    ctx[0];
  }
  textfield = new Textfield({ props: textfield_props });
  binding_callbacks.push(() => bind(textfield, "value", textfield_value_binding));
  function select_value_binding(value) {
    ctx[4](value);
  }
  let select_props = {
    label: "Font size",
    style: "width: 100%;",
    $$slots: { default: [create_default_slot$5] },
    $$scope: { ctx }
  };
  if (
    /*size*/
    ctx[1] !== void 0
  ) {
    select_props.value = /*size*/
    ctx[1];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  return {
    c() {
      div = element("div");
      create_component(textfield.$$.fragment);
      t2 = space();
      create_component(select.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { style: true });
      var div_nodes = children(div);
      claim_component(textfield.$$.fragment, div_nodes);
      t2 = claim_space(div_nodes);
      claim_component(select.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_style(div, "margin-top", "20px");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(textfield, div, null);
      append_hydration(div, t2);
      mount_component(select, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const textfield_changes = {};
      if (!updating_value && dirty & /*text*/
      1) {
        updating_value = true;
        textfield_changes.value = /*text*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      textfield.$set(textfield_changes);
      const select_changes = {};
      if (dirty & /*$$scope*/
      256) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value_1 && dirty & /*size*/
      2) {
        updating_value_1 = true;
        select_changes.value = /*size*/
        ctx2[1];
        add_flush_callback(() => updating_value_1 = false);
      }
      select.$set(select_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textfield.$$.fragment, local);
      transition_in(select.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textfield.$$.fragment, local);
      transition_out(select.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(textfield);
      destroy_component(select);
    }
  };
}
function instance$7($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  const dispatch2 = createEventDispatcher();
  let text2 = "";
  let size;
  onMount(() => {
    $$invalidate(0, text2 = (settings == null ? void 0 : settings.text) ?? "");
    $$invalidate(1, size = settings == null ? void 0 : settings.size);
  });
  function onText(value) {
    if (value === void 0 || value === settings.text) {
      return;
    }
    dispatch2("settings", { ...settings, text: value });
  }
  function onSize(value) {
    if (value === settings.size) {
      return;
    }
    dispatch2("settings", { ...settings, size: value });
  }
  function textfield_value_binding(value) {
    text2 = value;
    $$invalidate(0, text2);
  }
  function select_value_binding(value) {
    size = value;
    $$invalidate(1, size);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(2, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*text*/
    1) {
      onText(text2);
    }
    if ($$self.$$.dirty & /*size*/
    2) {
      onSize(size);
    }
  };
  return [text2, size, settings, textfield_value_binding, select_value_binding];
}
class TextEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$7, create_fragment$9, safe_not_equal, { settings: 2 });
  }
}
const TextWidget_svelte_svelte_type_style_lang = "";
function create_else_block(ctx) {
  let div;
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(
        /*text*/
        ctx[1]
      );
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      t2 = claim_text(
        div_nodes,
        /*text*/
        ctx[1]
      );
      div_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_5$1(ctx) {
  let h6;
  let t2;
  return {
    c() {
      h6 = element("h6");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h6 = claim_element(nodes, "H6", { class: true });
      var h6_nodes = children(h6);
      t2 = claim_text(
        h6_nodes,
        /*text*/
        ctx[1]
      );
      h6_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h6, "class", "no-margin svelte-1gow1pa");
    },
    m(target, anchor) {
      insert_hydration(target, h6, anchor);
      append_hydration(h6, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h6);
      }
    }
  };
}
function create_if_block_4$1(ctx) {
  let h5;
  let t2;
  return {
    c() {
      h5 = element("h5");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h5 = claim_element(nodes, "H5", { class: true });
      var h5_nodes = children(h5);
      t2 = claim_text(
        h5_nodes,
        /*text*/
        ctx[1]
      );
      h5_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h5, "class", "no-margin svelte-1gow1pa");
    },
    m(target, anchor) {
      insert_hydration(target, h5, anchor);
      append_hydration(h5, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h5);
      }
    }
  };
}
function create_if_block_3$1(ctx) {
  let h4;
  let t2;
  return {
    c() {
      h4 = element("h4");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h4 = claim_element(nodes, "H4", { class: true });
      var h4_nodes = children(h4);
      t2 = claim_text(
        h4_nodes,
        /*text*/
        ctx[1]
      );
      h4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h4, "class", "no-margin svelte-1gow1pa");
    },
    m(target, anchor) {
      insert_hydration(target, h4, anchor);
      append_hydration(h4, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h4);
      }
    }
  };
}
function create_if_block_2$1(ctx) {
  let h32;
  let t2;
  return {
    c() {
      h32 = element("h3");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h32 = claim_element(nodes, "H3", { class: true });
      var h3_nodes = children(h32);
      t2 = claim_text(
        h3_nodes,
        /*text*/
        ctx[1]
      );
      h3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h32, "class", "no-margin svelte-1gow1pa");
    },
    m(target, anchor) {
      insert_hydration(target, h32, anchor);
      append_hydration(h32, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h32);
      }
    }
  };
}
function create_if_block_1$3(ctx) {
  let h22;
  let t2;
  return {
    c() {
      h22 = element("h2");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h22 = claim_element(nodes, "H2", { class: true });
      var h2_nodes = children(h22);
      t2 = claim_text(
        h2_nodes,
        /*text*/
        ctx[1]
      );
      h2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h22, "class", "no-margin svelte-1gow1pa");
    },
    m(target, anchor) {
      insert_hydration(target, h22, anchor);
      append_hydration(h22, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h22);
      }
    }
  };
}
function create_if_block$6(ctx) {
  let h12;
  let t2;
  return {
    c() {
      h12 = element("h1");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", { class: true });
      var h1_nodes = children(h12);
      t2 = claim_text(
        h1_nodes,
        /*text*/
        ctx[1]
      );
      h1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h12, "class", "no-margin svelte-1gow1pa");
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_fragment$8(ctx) {
  let div;
  function select_block_type(ctx2, dirty) {
    if (
      /*size*/
      ctx2[0] == 1
    )
      return create_if_block$6;
    if (
      /*size*/
      ctx2[0] == 2
    )
      return create_if_block_1$3;
    if (
      /*size*/
      ctx2[0] == 3
    )
      return create_if_block_2$1;
    if (
      /*size*/
      ctx2[0] == 4
    )
      return create_if_block_3$1;
    if (
      /*size*/
      ctx2[0] == 5
    )
      return create_if_block_4$1;
    if (
      /*size*/
      ctx2[0] == 6
    )
      return create_if_block_5$1;
    return create_else_block;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "align-center svelte-1gow1pa");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_block.m(div, null);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_block.d();
    }
  };
}
function instance$6($$self, $$props, $$invalidate) {
  let text2;
  let size;
  let { settings } = $$props;
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(2, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    4) {
      $$invalidate(1, text2 = (settings == null ? void 0 : settings.text) ?? "");
    }
    if ($$self.$$.dirty & /*settings*/
    4) {
      $$invalidate(0, size = settings == null ? void 0 : settings.size);
    }
  };
  return [size, text2, settings];
}
class TextWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$6, create_fragment$8, safe_not_equal, { settings: 2 });
  }
}
function create_fragment$7(ctx) {
  let div;
  let textContent = "Unknown widget type";
  return {
    c() {
      div = element("div");
      div.textContent = textContent;
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-17e4zkc")
        div.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
class UnknownWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$7, safe_not_equal, {});
  }
}
function create_fragment$6(ctx) {
  let div;
  let textContent = "Unknown widget type";
  return {
    c() {
      div = element("div");
      div.textContent = textContent;
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-17e4zkc")
        div.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
class UnknownEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$6, safe_not_equal, {});
  }
}
const widgets = [
  {
    type: "capability",
    label: "Capability",
    icon: "tune",
    widget: CapabilityWidget,
    editor: CapabilityEditor,
    view: void 0,
    scopes: [
      { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] }
    ],
    create: create$1,
    migration: migrate$1
  },
  {
    type: "flow",
    label: "Flow",
    icon: "alt_route",
    widget: FlowWidget,
    editor: FlowEditor,
    view: void 0,
    scopes: [
      { oneOf: ["homey", "homey.flow", "homey.flow.start"] }
    ],
    create: () => ({ id: v4(), type: "flow", version: 1 }),
    migration: (e2) => e2
  },
  {
    type: "image",
    label: "Image",
    icon: "image",
    widget: ImageWidget,
    editor: ImageEditor,
    view: ImageWidget,
    scopes: [
      { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] }
    ],
    create: () => ({ id: v4(), type: "image", version: 1 }),
    migration: (e2) => e2
  },
  {
    type: "insight",
    label: "Insight",
    icon: "show_chart",
    widget: InsightWidget,
    editor: InsightEditor,
    view: void 0,
    scopes: [
      { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] },
      { oneOf: ["homey", "homey.insights.readonly"] }
    ],
    create,
    migration: migrate
  },
  {
    type: "text",
    label: "Text",
    icon: "edit_note",
    widget: TextWidget,
    editor: TextEditor,
    view: void 0,
    scopes: [],
    create: () => ({ id: v4(), type: "text", version: 1 }),
    migration: (e2) => e2
  }
];
function findLabel(type) {
  var _a2;
  const label = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.label;
  return label;
}
function findWidget(type) {
  var _a2;
  const component = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.widget;
  if (component != void 0) {
    return component;
  }
  return UnknownWidget;
}
function findEditor(type) {
  var _a2;
  const editor = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.editor;
  if (editor != void 0) {
    return editor;
  }
  return UnknownEditor;
}
function findView(type) {
  var _a2;
  const view = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.view;
  return view;
}
function findMigration(type) {
  var _a2;
  const migration = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.migration;
  return migration;
}
function findCreate(type) {
  var _a2;
  const create2 = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.create;
  return create2;
}
function hasRequiredScopes(type, scopes2) {
  var _a2;
  const requirements = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.scopes;
  if (requirements === void 0 || requirements.length === 0) {
    return true;
  }
  return requirements.every((requirement) => requirement.oneOf.some((r) => scopes2.includes(r)));
}
function get_each_context$2(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i2];
  return child_ctx;
}
function create_default_slot_11$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Select widget");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Select widget");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block$5(ctx) {
  let item;
  let current;
  item = new Item({
    props: {
      $$slots: { default: [create_default_slot_8$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(item.$$.fragment);
    },
    l(nodes) {
      claim_component(item.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(item, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const item_changes = {};
      if (dirty & /*$$scope, selection*/
      1026) {
        item_changes.$$scope = { dirty, ctx: ctx2 };
      }
      item.$set(item_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(item.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(item.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(item, detaching);
    }
  };
}
function create_default_slot_10$2(ctx) {
  let radio;
  let updating_group;
  let current;
  function radio_group_binding(value) {
    ctx[4](value);
  }
  let radio_props = { value: (
    /*widget*/
    ctx[7].type
  ) };
  if (
    /*selection*/
    ctx[1] !== void 0
  ) {
    radio_props.group = /*selection*/
    ctx[1];
  }
  radio = new Radio({ props: radio_props });
  binding_callbacks.push(() => bind(radio, "group", radio_group_binding));
  return {
    c() {
      create_component(radio.$$.fragment);
    },
    l(nodes) {
      claim_component(radio.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(radio, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const radio_changes = {};
      if (!updating_group && dirty & /*selection*/
      2) {
        updating_group = true;
        radio_changes.group = /*selection*/
        ctx2[1];
        add_flush_callback(() => updating_group = false);
      }
      radio.$set(radio_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(radio.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(radio.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(radio, detaching);
    }
  };
}
function create_default_slot_9$2(ctx) {
  let t_value = (
    /*widget*/
    ctx[7].label + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_8$2(ctx) {
  let graphic;
  let t0;
  let text_1;
  let t1;
  let current;
  graphic = new Graphic({
    props: {
      $$slots: { default: [create_default_slot_10$2] },
      $$scope: { ctx }
    }
  });
  text_1 = new Text({
    props: {
      $$slots: { default: [create_default_slot_9$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(graphic.$$.fragment);
      t0 = space();
      create_component(text_1.$$.fragment);
      t1 = space();
    },
    l(nodes) {
      claim_component(graphic.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(text_1.$$.fragment, nodes);
      t1 = claim_space(nodes);
    },
    m(target, anchor) {
      mount_component(graphic, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(text_1, target, anchor);
      insert_hydration(target, t1, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const graphic_changes = {};
      if (dirty & /*$$scope, selection*/
      1026) {
        graphic_changes.$$scope = { dirty, ctx: ctx2 };
      }
      graphic.$set(graphic_changes);
      const text_1_changes = {};
      if (dirty & /*$$scope*/
      1024) {
        text_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      text_1.$set(text_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(graphic.$$.fragment, local);
      transition_in(text_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(graphic.$$.fragment, local);
      transition_out(text_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(graphic, detaching);
      destroy_component(text_1, detaching);
    }
  };
}
function create_each_block$2(ctx) {
  let show_if = hasRequiredScopes(
    /*widget*/
    ctx[7].type,
    /*$scopes*/
    ctx[2]
  );
  let if_block_anchor;
  let current;
  let if_block = show_if && create_if_block$5(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*$scopes*/
      4)
        show_if = hasRequiredScopes(
          /*widget*/
          ctx2[7].type,
          /*$scopes*/
          ctx2[2]
        );
      if (show_if) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$scopes*/
          4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$5(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_default_slot_7$2(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(widgets);
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$2(get_each_context$2(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*widgets, selection, hasRequiredScopes, $scopes*/
      6) {
        each_value = ensure_array_like(widgets);
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$2(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$2(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_6$2(ctx) {
  let list;
  let current;
  list = new List({
    props: {
      $$slots: { default: [create_default_slot_7$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list.$$.fragment);
    },
    l(nodes) {
      claim_component(list.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_changes = {};
      if (dirty & /*$$scope, selection, $scopes*/
      1030) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list, detaching);
    }
  };
}
function create_default_slot_5$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Cancel");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Cancel");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_4$2(ctx) {
  let label;
  let current;
  label = new CommonLabel({
    props: {
      $$slots: { default: [create_default_slot_5$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(label.$$.fragment);
    },
    l(nodes) {
      claim_component(label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const label_changes = {};
      if (dirty & /*$$scope*/
      1024) {
        label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      label.$set(label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(label, detaching);
    }
  };
}
function create_default_slot_3$2(ctx) {
  let t0;
  let t1_value = (
    /*selection*/
    (ctx[1] ?? "") + ""
  );
  let t1;
  return {
    c() {
      t0 = text("Add ");
      t1 = text(t1_value);
    },
    l(nodes) {
      t0 = claim_text(nodes, "Add ");
      t1 = claim_text(nodes, t1_value);
    },
    m(target, anchor) {
      insert_hydration(target, t0, anchor);
      insert_hydration(target, t1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*selection*/
      2 && t1_value !== (t1_value = /*selection*/
      (ctx2[1] ?? "") + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
    }
  };
}
function create_default_slot_2$3(ctx) {
  let label;
  let current;
  label = new CommonLabel({
    props: {
      $$slots: { default: [create_default_slot_3$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(label.$$.fragment);
    },
    l(nodes) {
      claim_component(label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const label_changes = {};
      if (dirty & /*$$scope, selection*/
      1026) {
        label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      label.$set(label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(label, detaching);
    }
  };
}
function create_default_slot_1$3(ctx) {
  let button0;
  let t2;
  let button1;
  let current;
  button0 = new Button({
    props: {
      $$slots: { default: [create_default_slot_4$2] },
      $$scope: { ctx }
    }
  });
  button1 = new Button({
    props: {
      action: "accept",
      disabled: (
        /*selection*/
        ctx[1] === void 0
      ),
      $$slots: { default: [create_default_slot_2$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(button0.$$.fragment);
      t2 = space();
      create_component(button1.$$.fragment);
    },
    l(nodes) {
      claim_component(button0.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(button1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button0, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(button1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$$scope*/
      1024) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*selection*/
      2)
        button1_changes.disabled = /*selection*/
        ctx2[1] === void 0;
      if (dirty & /*$$scope, selection*/
      1026) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(button0, detaching);
      destroy_component(button1, detaching);
    }
  };
}
function create_default_slot$4(ctx) {
  let title;
  let t0;
  let content;
  let t1;
  let actions;
  let current;
  title = new Title$2({
    props: {
      $$slots: { default: [create_default_slot_11$1] },
      $$scope: { ctx }
    }
  });
  content = new Content$1({
    props: {
      $$slots: { default: [create_default_slot_6$2] },
      $$scope: { ctx }
    }
  });
  actions = new Actions({
    props: {
      $$slots: { default: [create_default_slot_1$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(title.$$.fragment);
      t0 = space();
      create_component(content.$$.fragment);
      t1 = space();
      create_component(actions.$$.fragment);
    },
    l(nodes) {
      claim_component(title.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(content.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(actions.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(title, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(content, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(actions, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const title_changes = {};
      if (dirty & /*$$scope*/
      1024) {
        title_changes.$$scope = { dirty, ctx: ctx2 };
      }
      title.$set(title_changes);
      const content_changes = {};
      if (dirty & /*$$scope, selection, $scopes*/
      1030) {
        content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      content.$set(content_changes);
      const actions_changes = {};
      if (dirty & /*$$scope, selection*/
      1026) {
        actions_changes.$$scope = { dirty, ctx: ctx2 };
      }
      actions.$set(actions_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(title.$$.fragment, local);
      transition_in(content.$$.fragment, local);
      transition_in(actions.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(title.$$.fragment, local);
      transition_out(content.$$.fragment, local);
      transition_out(actions.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(title, detaching);
      destroy_component(content, detaching);
      destroy_component(actions, detaching);
    }
  };
}
function create_fragment$5(ctx) {
  let dialog;
  let updating_open;
  let current;
  function dialog_open_binding(value) {
    ctx[5](value);
  }
  let dialog_props = {
    selection: true,
    $$slots: { default: [create_default_slot$4] },
    $$scope: { ctx }
  };
  if (
    /*open*/
    ctx[0] !== void 0
  ) {
    dialog_props.open = /*open*/
    ctx[0];
  }
  dialog = new Dialog({ props: dialog_props });
  binding_callbacks.push(() => bind(dialog, "open", dialog_open_binding));
  dialog.$on(
    "SMUIDialog:closed",
    /*closeHandler*/
    ctx[3]
  );
  return {
    c() {
      create_component(dialog.$$.fragment);
    },
    l(nodes) {
      claim_component(dialog.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(dialog, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dialog_changes = {};
      if (dirty & /*$$scope, selection, $scopes*/
      1030) {
        dialog_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_open && dirty & /*open*/
      1) {
        updating_open = true;
        dialog_changes.open = /*open*/
        ctx2[0];
        add_flush_callback(() => updating_open = false);
      }
      dialog.$set(dialog_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dialog.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dialog.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dialog, detaching);
    }
  };
}
function instance$5($$self, $$props, $$invalidate) {
  let $scopes;
  component_subscribe($$self, scopes, ($$value) => $$invalidate(2, $scopes = $$value));
  let { open } = $$props;
  let selection;
  const dispatch2 = createEventDispatcher();
  function closeHandler(e2) {
    if (e2.detail.action === "accept") {
      dispatch2("selected", selection);
    }
    $$invalidate(1, selection = void 0);
  }
  function radio_group_binding(value) {
    selection = value;
    $$invalidate(1, selection);
  }
  function dialog_open_binding(value) {
    open = value;
    $$invalidate(0, open);
  }
  $$self.$$set = ($$props2) => {
    if ("open" in $$props2)
      $$invalidate(0, open = $$props2.open);
  };
  return [
    open,
    selection,
    $scopes,
    closeHandler,
    radio_group_binding,
    dialog_open_binding
  ];
}
class AddWidgetDialog extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$5, create_fragment$5, safe_not_equal, { open: 0 });
  }
}
const EditWidgetView_svelte_svelte_type_style_lang = "";
function create_if_block$4(ctx) {
  let div0;
  let card;
  let t0;
  let div1;
  let switch_instance;
  let t1;
  let div2;
  let button0;
  let t2;
  let button1;
  let current;
  card = new Card({
    props: {
      variant: "outlined",
      $$slots: { default: [create_default_slot_2$2] },
      $$scope: { ctx }
    }
  });
  var switch_value = findEditor(
    /*item*/
    ctx[0].settings.type
  );
  function switch_props(ctx2) {
    return {
      props: { settings: (
        /*localSettings*/
        ctx2[1]
      ) }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    switch_instance.$on(
      "settings",
      /*settings_handler*/
      ctx[4]
    );
  }
  button0 = new Button({
    props: {
      $$slots: { default: [create_default_slot_1$2] },
      $$scope: { ctx }
    }
  });
  button0.$on(
    "click",
    /*cancel*/
    ctx[2]
  );
  button1 = new Button({
    props: {
      $$slots: { default: [create_default_slot$3] },
      $$scope: { ctx }
    }
  });
  button1.$on(
    "click",
    /*save*/
    ctx[3]
  );
  return {
    c() {
      div0 = element("div");
      create_component(card.$$.fragment);
      t0 = space();
      div1 = element("div");
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      t1 = space();
      div2 = element("div");
      create_component(button0.$$.fragment);
      t2 = space();
      create_component(button1.$$.fragment);
      this.h();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(card.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", {});
      var div2_nodes = children(div2);
      claim_component(button0.$$.fragment, div2_nodes);
      t2 = claim_space(div2_nodes);
      claim_component(button1.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "preview svelte-15kmtvj");
      attr(div1, "class", "editor svelte-15kmtvj");
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(card, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div1, anchor);
      if (switch_instance)
        mount_component(switch_instance, div1, null);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(button0, div2, null);
      append_hydration(div2, t2);
      mount_component(button1, div2, null);
      current = true;
    },
    p(ctx2, dirty) {
      const card_changes = {};
      if (dirty & /*$$scope, item, localSettings*/
      131) {
        card_changes.$$scope = { dirty, ctx: ctx2 };
      }
      card.$set(card_changes);
      const switch_instance_changes = {};
      if (dirty & /*localSettings*/
      2)
        switch_instance_changes.settings = /*localSettings*/
        ctx2[1];
      if (dirty & /*item*/
      1 && switch_value !== (switch_value = findEditor(
        /*item*/
        ctx2[0].settings.type
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          switch_instance.$on(
            "settings",
            /*settings_handler*/
            ctx2[4]
          );
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, div1, null);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
      const button0_changes = {};
      if (dirty & /*$$scope*/
      128) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      128) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(card.$$.fragment, local);
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(card.$$.fragment, local);
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(div1);
        detach(t1);
        detach(div2);
      }
      destroy_component(card);
      if (switch_instance)
        destroy_component(switch_instance);
      destroy_component(button0);
      destroy_component(button1);
    }
  };
}
function create_default_slot_2$2(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  var switch_value = findWidget(
    /*item*/
    ctx[0].settings.type
  );
  function switch_props(ctx2) {
    return {
      props: { settings: (
        /*localSettings*/
        ctx2[1]
      ) }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
  }
  return {
    c() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const switch_instance_changes = {};
      if (dirty & /*localSettings*/
      2)
        switch_instance_changes.settings = /*localSettings*/
        ctx2[1];
      if (dirty & /*item*/
      1 && switch_value !== (switch_value = findWidget(
        /*item*/
        ctx2[0].settings.type
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(switch_instance_anchor);
      }
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function create_default_slot_1$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Cancel");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Cancel");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Save");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Save");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_fragment$4(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*item*/
    ctx[0] !== void 0 && /*localSettings*/
    ctx[1] !== void 0 && create_if_block$4(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*item*/
        ctx2[0] !== void 0 && /*localSettings*/
        ctx2[1] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*item, localSettings*/
          3) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$4(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$4($$self, $$props, $$invalidate) {
  let { item } = $$props;
  const dispatch2 = createEventDispatcher();
  let localSettings;
  function onItem(i2) {
    if (item === void 0) {
      $$invalidate(1, localSettings = void 0);
    } else {
      $$invalidate(1, localSettings = { ...item == null ? void 0 : item.settings });
    }
  }
  function cancel() {
    if (item !== void 0) {
      $$invalidate(1, localSettings = { ...item.settings });
    }
    dispatch2("settings", localSettings);
  }
  function save() {
    dispatch2("settings", localSettings);
  }
  const settings_handler = (e2) => $$invalidate(1, localSettings = e2.detail);
  $$self.$$set = ($$props2) => {
    if ("item" in $$props2)
      $$invalidate(0, item = $$props2.item);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*item*/
    1) {
      onItem();
    }
  };
  return [item, localSettings, cancel, save, settings_handler];
}
class EditWidgetView extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$4, create_fragment$4, safe_not_equal, { item: 0 });
  }
}
function throttle(func2, timeFrame) {
  let lastTime = 0;
  return function(...args) {
    let now = /* @__PURE__ */ new Date();
    if (now - lastTime >= timeFrame) {
      func2(...args);
      lastTime = now;
    }
  };
}
function getRowsCount(items, cols) {
  const getItemsMaxHeight = items.map((val) => {
    const item = val[cols];
    return (item && item.y) + (item && item.h) || 0;
  });
  return Math.max(...getItemsMaxHeight, 1);
}
const getColumn = (containerWidth, columns) => {
  const sortColumns = columns.slice().sort((a3, b2) => a3[0] - b2[0]);
  const breakpoint = sortColumns.find((value) => {
    const [width] = value;
    return containerWidth <= width;
  });
  if (breakpoint) {
    return breakpoint[1];
  } else {
    return sortColumns[sortColumns.length - 1][1];
  }
};
function getContainerHeight(items, yPerPx, cols) {
  return getRowsCount(items, cols) * yPerPx;
}
const makeMatrix = (rows, cols) => Array.from(Array(rows), () => new Array(cols));
function makeMatrixFromItems(items, _row, _col) {
  let matrix = makeMatrix(_row, _col);
  for (var i2 = 0; i2 < items.length; i2++) {
    const value = items[i2][_col];
    if (value) {
      const { x: x2, y: y3, h: h4 } = value;
      const id = items[i2].id;
      const w2 = Math.min(_col, value.w);
      for (var j = y3; j < y3 + h4; j++) {
        const row = matrix[j];
        for (var k2 = x2; k2 < x2 + w2; k2++) {
          row[k2] = { ...value, id };
        }
      }
    }
  }
  return matrix;
}
function findCloseBlocks(items, matrix, curObject) {
  const { h: h4, x: x2, y: y3 } = curObject;
  const w2 = Math.min(matrix[0].length, curObject.w);
  const tempR = matrix.slice(y3, y3 + h4);
  let result = [];
  for (var i2 = 0; i2 < tempR.length; i2++) {
    let tempA = tempR[i2].slice(x2, x2 + w2);
    result = [...result, ...tempA.map((val) => val.id && val.id !== curObject.id && val.id).filter(Boolean)];
  }
  return [...new Set(result)];
}
function makeMatrixFromItemsIgnore(items, ignoreList, _row, _col) {
  let matrix = makeMatrix(_row, _col);
  for (var i2 = 0; i2 < items.length; i2++) {
    const value = items[i2][_col];
    const id = items[i2].id;
    const { x: x2, y: y3, h: h4 } = value;
    const w2 = Math.min(_col, value.w);
    if (ignoreList.indexOf(id) === -1) {
      for (var j = y3; j < y3 + h4; j++) {
        const row = matrix[j];
        if (row) {
          for (var k2 = x2; k2 < x2 + w2; k2++) {
            row[k2] = { ...value, id };
          }
        }
      }
    }
  }
  return matrix;
}
function findItemsById(closeBlocks, items) {
  return items.filter((value) => closeBlocks.indexOf(value.id) !== -1);
}
function getItemById(id, items) {
  return items.find((value) => value.id === id);
}
function findFreeSpaceForItem(matrix, item) {
  const cols = matrix[0].length;
  const w2 = Math.min(cols, item.w);
  let xNtime = cols - w2;
  let getMatrixRows = matrix.length;
  for (var i2 = 0; i2 < getMatrixRows; i2++) {
    const row = matrix[i2];
    for (var j = 0; j < xNtime + 1; j++) {
      const sliceA = row.slice(j, j + w2);
      const empty2 = sliceA.every((val) => val === void 0);
      if (empty2) {
        const isEmpty = matrix.slice(i2, i2 + item.h).every((a3) => a3.slice(j, j + w2).every((n) => n === void 0));
        if (isEmpty) {
          return { y: i2, x: j };
        }
      }
    }
  }
  return {
    y: getMatrixRows,
    x: 0
  };
}
const getItem = (item, col) => {
  return { ...item[col], id: item.id };
};
const updateItem = (elements2, active, position, col) => {
  return elements2.map((value) => {
    if (value.id === active.id) {
      return { ...value, [col]: { ...value[col], ...position } };
    }
    return value;
  });
};
function moveItemsAroundItem(active, items, cols, original) {
  const activeItem = getItem(active, cols);
  const ids = items.map((value) => value.id).filter((value) => value !== activeItem.id);
  const els = items.filter((value) => value.id !== activeItem.id);
  let newItems = updateItem(items, active, activeItem, cols);
  let matrix = makeMatrixFromItemsIgnore(newItems, ids, getRowsCount(newItems, cols), cols);
  let tempItems = newItems;
  let exclude2 = [];
  els.forEach((item) => {
    let position = findFreeSpaceForItem(matrix, item[cols]);
    exclude2.push(item.id);
    tempItems = updateItem(tempItems, item, position, cols);
    let getIgnoreItems = ids.filter((value) => exclude2.indexOf(value) === -1);
    matrix = makeMatrixFromItemsIgnore(tempItems, getIgnoreItems, getRowsCount(tempItems, cols), cols);
  });
  return tempItems;
}
function moveItem(active, items, cols, original) {
  const item = getItem(active, cols);
  let matrix = makeMatrixFromItemsIgnore(items, [item.id], getRowsCount(items, cols), cols);
  const closeBlocks = findCloseBlocks(items, matrix, item);
  let closeObj = findItemsById(closeBlocks, items);
  const fixed = closeObj.find((value) => value[cols].fixed);
  if (fixed)
    return items;
  items = updateItem(items, active, item, cols);
  matrix = makeMatrixFromItemsIgnore(items, closeBlocks, getRowsCount(items, cols), cols);
  let tempItems = items;
  let tempCloseBlocks = closeBlocks;
  let exclude2 = [];
  closeObj.forEach((item2) => {
    let position = findFreeSpaceForItem(matrix, item2[cols]);
    exclude2.push(item2.id);
    tempItems = updateItem(tempItems, item2, position, cols);
    let getIgnoreItems = tempCloseBlocks.filter((value) => exclude2.indexOf(value) === -1);
    matrix = makeMatrixFromItemsIgnore(tempItems, getIgnoreItems, getRowsCount(tempItems, cols), cols);
  });
  return tempItems;
}
function normalize(items, col) {
  let result = items.slice();
  result.forEach((value) => {
    const getItem2 = value[col];
    if (!getItem2.static) {
      result = moveItem(getItem2, result, col, { ...getItem2 });
    }
  });
  return result;
}
function adjust(items, col) {
  let matrix = makeMatrix(getRowsCount(items, col), col);
  const order = items.toSorted((a3, b2) => {
    const aItem = a3[col];
    const bItem = b2[col];
    return aItem.x - bItem.x || aItem.y - bItem.y;
  });
  return order.reduce((acc, item) => {
    let position = findFreeSpaceForItem(matrix, item[col]);
    acc.push({
      ...item,
      [col]: {
        ...item[col],
        ...position
      }
    });
    matrix = makeMatrixFromItems(acc, getRowsCount(acc, col), col);
    return acc;
  }, []);
}
function getUndefinedItems(items, col, breakpoints) {
  return items.map((value) => {
    if (!value[col]) {
      return value.id;
    }
  }).filter(Boolean);
}
function getClosestColumn(items, item, col, breakpoints) {
  return breakpoints.map(([_, column]) => item[column] && column).filter(Boolean).reduce(function(acc, value) {
    const isLower = Math.abs(value - col) < Math.abs(acc - col);
    return isLower ? value : acc;
  });
}
function specifyUndefinedColumns(items, col, breakpoints) {
  let matrix = makeMatrixFromItems(items, getRowsCount(items, col), col);
  const getUndefinedElements = getUndefinedItems(items, col);
  let newItems = [...items];
  getUndefinedElements.forEach((elementId) => {
    const getElement = items.find((item) => item.id === elementId);
    const closestColumn = getClosestColumn(items, getElement, col, breakpoints);
    const position = findFreeSpaceForItem(matrix, getElement[closestColumn]);
    const newItem = {
      ...getElement,
      [col]: {
        ...getElement[closestColumn],
        ...position
      }
    };
    newItems = newItems.map((value) => value.id === elementId ? newItem : value);
    matrix = makeMatrixFromItems(newItems, getRowsCount(newItems, col), col);
  });
  return newItems;
}
const index_svelte_svelte_type_style_lang$1 = "";
const get_default_slot_changes$1 = (dirty) => ({});
const get_default_slot_context$1 = (ctx) => ({
  movePointerDown: (
    /*pointerdown*/
    ctx[18]
  ),
  resizePointerDown: (
    /*resizePointerDown*/
    ctx[19]
  )
});
function create_if_block_1$2(ctx) {
  let div;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "svlt-grid-resizer svelte-1iyj4z4");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (!mounted) {
        dispose = listen(
          div,
          "pointerdown",
          /*resizePointerDown*/
          ctx[19]
        );
        mounted = true;
      }
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$3(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true, style: true });
      children(div).forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "svlt-grid-shadow shadow-active svelte-1iyj4z4");
      set_style(
        div,
        "width",
        /*shadow*/
        ctx[12].w * /*xPerPx*/
        ctx[6] - /*gapX*/
        ctx[8] * 2 + "px"
      );
      set_style(
        div,
        "height",
        /*shadow*/
        ctx[12].h * /*yPerPx*/
        ctx[7] - /*gapY*/
        ctx[9] * 2 + "px"
      );
      set_style(div, "transform", "translate(" + /*shadow*/
      (ctx[12].x * /*xPerPx*/
      ctx[6] + /*gapX*/
      ctx[8]) + "px, " + /*shadow*/
      (ctx[12].y * /*yPerPx*/
      ctx[7] + /*gapY*/
      ctx[9]) + "px)");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      ctx[29](div);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*shadow, xPerPx, gapX*/
      4416) {
        set_style(
          div,
          "width",
          /*shadow*/
          ctx2[12].w * /*xPerPx*/
          ctx2[6] - /*gapX*/
          ctx2[8] * 2 + "px"
        );
      }
      if (dirty[0] & /*shadow, yPerPx, gapY*/
      4736) {
        set_style(
          div,
          "height",
          /*shadow*/
          ctx2[12].h * /*yPerPx*/
          ctx2[7] - /*gapY*/
          ctx2[9] * 2 + "px"
        );
      }
      if (dirty[0] & /*shadow, xPerPx, gapX, yPerPx, gapY*/
      5056) {
        set_style(div, "transform", "translate(" + /*shadow*/
        (ctx2[12].x * /*xPerPx*/
        ctx2[6] + /*gapX*/
        ctx2[8]) + "px, " + /*shadow*/
        (ctx2[12].y * /*yPerPx*/
        ctx2[7] + /*gapY*/
        ctx2[9]) + "px)");
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      ctx[29](null);
    }
  };
}
function create_fragment$3(ctx) {
  let div;
  let t0;
  let div_style_value;
  let t1;
  let if_block1_anchor;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[28].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[27],
    get_default_slot_context$1
  );
  let if_block0 = (
    /*resizable*/
    ctx[4] && !/*item*/
    ctx[10].customResizer && create_if_block_1$2(ctx)
  );
  let if_block1 = (
    /*active*/
    (ctx[13] || /*trans*/
    ctx[16]) && create_if_block$3(ctx)
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {
        draggable: true,
        class: true,
        style: true
      });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      t0 = claim_space(div_nodes);
      if (if_block0)
        if_block0.l(div_nodes);
      div_nodes.forEach(detach);
      t1 = claim_space(nodes);
      if (if_block1)
        if_block1.l(nodes);
      if_block1_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "draggable", false);
      attr(div, "class", "svlt-grid-item svelte-1iyj4z4");
      attr(div, "style", div_style_value = "width: " + /*active*/
      (ctx[13] ? (
        /*newSize*/
        ctx[15].width
      ) : (
        /*width*/
        ctx[0]
      )) + "px; height:" + /*active*/
      (ctx[13] ? (
        /*newSize*/
        ctx[15].height
      ) : (
        /*height*/
        ctx[1]
      )) + "px; " + /*active*/
      (ctx[13] ? `transform: translate(${/*cordDiff*/
      ctx[14].x}px, ${/*cordDiff*/
      ctx[14].y}px);top:${/*rect*/
      ctx[17].top}px;left:${/*rect*/
      ctx[17].left}px;` : (
        /*trans*/
        ctx[16] ? `transform: translate(${/*cordDiff*/
        ctx[14].x}px, ${/*cordDiff*/
        ctx[14].y}px); position:absolute; transition: width 0.2s, height 0.2s;` : `transition: transform 0.2s, opacity 0.2s; transform: translate(${/*left*/
        ctx[2]}px, ${/*top*/
        ctx[3]}px); `
      )));
      toggle_class(
        div,
        "svlt-grid-active",
        /*active*/
        ctx[13] || /*trans*/
        ctx[16] && /*rect*/
        ctx[17]
      );
      toggle_class(
        div,
        "touch-none",
        /*draggable*/
        ctx[5]
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      append_hydration(div, t0);
      if (if_block0)
        if_block0.m(div, null);
      insert_hydration(target, t1, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert_hydration(target, if_block1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(div, "pointerdown", function() {
          if (is_function(
            /*item*/
            ctx[10] && /*item*/
            ctx[10].customDragger ? null : (
              /*draggable*/
              ctx[5] && /*pointerdown*/
              ctx[18]
            )
          ))
            /*item*/
            (ctx[10] && /*item*/
            ctx[10].customDragger ? null : (
              /*draggable*/
              ctx[5] && /*pointerdown*/
              ctx[18]
            )).apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        134217728)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[27],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[27]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx[27],
              dirty,
              get_default_slot_changes$1
            ),
            get_default_slot_context$1
          );
        }
      }
      if (
        /*resizable*/
        ctx[4] && !/*item*/
        ctx[10].customResizer
      ) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
        } else {
          if_block0 = create_if_block_1$2(ctx);
          if_block0.c();
          if_block0.m(div, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (!current || dirty[0] & /*active, newSize, width, height, cordDiff, rect, trans, left, top*/
      253967 && div_style_value !== (div_style_value = "width: " + /*active*/
      (ctx[13] ? (
        /*newSize*/
        ctx[15].width
      ) : (
        /*width*/
        ctx[0]
      )) + "px; height:" + /*active*/
      (ctx[13] ? (
        /*newSize*/
        ctx[15].height
      ) : (
        /*height*/
        ctx[1]
      )) + "px; " + /*active*/
      (ctx[13] ? `transform: translate(${/*cordDiff*/
      ctx[14].x}px, ${/*cordDiff*/
      ctx[14].y}px);top:${/*rect*/
      ctx[17].top}px;left:${/*rect*/
      ctx[17].left}px;` : (
        /*trans*/
        ctx[16] ? `transform: translate(${/*cordDiff*/
        ctx[14].x}px, ${/*cordDiff*/
        ctx[14].y}px); position:absolute; transition: width 0.2s, height 0.2s;` : `transition: transform 0.2s, opacity 0.2s; transform: translate(${/*left*/
        ctx[2]}px, ${/*top*/
        ctx[3]}px); `
      )))) {
        attr(div, "style", div_style_value);
      }
      if (!current || dirty[0] & /*active, trans, rect*/
      204800) {
        toggle_class(
          div,
          "svlt-grid-active",
          /*active*/
          ctx[13] || /*trans*/
          ctx[16] && /*rect*/
          ctx[17]
        );
      }
      if (!current || dirty[0] & /*draggable*/
      32) {
        toggle_class(
          div,
          "touch-none",
          /*draggable*/
          ctx[5]
        );
      }
      if (
        /*active*/
        ctx[13] || /*trans*/
        ctx[16]
      ) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
        } else {
          if_block1 = create_if_block$3(ctx);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t1);
        detach(if_block1_anchor);
      }
      if (default_slot)
        default_slot.d(detaching);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance$3($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  const dispatch2 = createEventDispatcher();
  let { sensor } = $$props;
  let { width } = $$props;
  let { height } = $$props;
  let { left } = $$props;
  let { top } = $$props;
  let { resizable } = $$props;
  let { draggable } = $$props;
  let { id } = $$props;
  let { container } = $$props;
  let { xPerPx } = $$props;
  let { yPerPx } = $$props;
  let { gapX } = $$props;
  let { gapY } = $$props;
  let { item } = $$props;
  let { max } = $$props;
  let { min } = $$props;
  let { cols } = $$props;
  let { nativeContainer } = $$props;
  let shadowElement;
  let shadow = {};
  let active = false;
  let initX, initY;
  let capturePos = { x: 0, y: 0 };
  let cordDiff = { x: 0, y: 0 };
  let newSize = { width, height };
  let trans = false;
  let anima;
  const inActivate = () => {
    const shadowBound = shadowElement.getBoundingClientRect();
    const xdragBound = rect.left + cordDiff.x;
    const ydragBound = rect.top + cordDiff.y;
    $$invalidate(14, cordDiff.x = shadow.x * xPerPx + gapX - (shadowBound.x - xdragBound), cordDiff);
    $$invalidate(14, cordDiff.y = shadow.y * yPerPx + gapY - (shadowBound.y - ydragBound), cordDiff);
    $$invalidate(13, active = false);
    $$invalidate(16, trans = true);
    clearTimeout(anima);
    anima = setTimeout(
      () => {
        $$invalidate(16, trans = false);
      },
      100
    );
    dispatch2("pointerup", { id });
  };
  let repaint = (cb, isPointerUp) => {
    dispatch2("repaint", { id, shadow, isPointerUp, onUpdate: cb });
  };
  let _scrollTop = 0;
  let containerFrame;
  let rect;
  let scrollElement;
  const getContainerFrame = (element2) => {
    if (element2 === document.documentElement || !element2) {
      const { height: height2, top: top2, right, bottom, left: left2 } = nativeContainer.getBoundingClientRect();
      return {
        top: Math.max(0, top2),
        bottom: Math.min(window.innerHeight, bottom)
      };
    }
    return element2.getBoundingClientRect();
  };
  const getScroller = (element2) => !element2 ? document.documentElement : element2;
  const pointerdown = ({ clientX, clientY, target }) => {
    initX = clientX;
    initY = clientY;
    capturePos = { x: left, y: top };
    $$invalidate(12, shadow = {
      x: item.x,
      y: item.y,
      w: item.w,
      h: item.h
    });
    $$invalidate(15, newSize = { width, height });
    containerFrame = getContainerFrame(container);
    scrollElement = getScroller(container);
    $$invalidate(14, cordDiff = { x: 0, y: 0 });
    $$invalidate(17, rect = target.closest(".svlt-grid-item").getBoundingClientRect());
    $$invalidate(13, active = true);
    $$invalidate(16, trans = false);
    _scrollTop = scrollElement.scrollTop;
    window.addEventListener("pointermove", pointermove);
    window.addEventListener("pointerup", pointerup);
  };
  let sign2 = { x: 0, y: 0 };
  let vel = { x: 0, y: 0 };
  let intervalId = 0;
  const stopAutoscroll = () => {
    clearInterval(intervalId);
    intervalId = false;
    sign2 = { x: 0, y: 0 };
    vel = { x: 0, y: 0 };
  };
  const update = () => {
    const _newScrollTop = scrollElement.scrollTop - _scrollTop;
    const boundX = capturePos.x + cordDiff.x;
    const boundY = capturePos.y + (cordDiff.y + _newScrollTop);
    let gridX = Math.round(boundX / xPerPx);
    let gridY = Math.round(boundY / yPerPx);
    $$invalidate(12, shadow.x = Math.max(Math.min(gridX, cols - shadow.w), 0), shadow);
    $$invalidate(12, shadow.y = Math.max(gridY, 0), shadow);
    if (max.y) {
      $$invalidate(12, shadow.y = Math.min(shadow.y, max.y), shadow);
    }
    repaint();
  };
  const pointermove = (event) => {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    const { clientX, clientY } = event;
    $$invalidate(14, cordDiff = { x: clientX - initX, y: clientY - initY });
    const Y_SENSOR = sensor;
    let velocityTop = Math.max(0, (containerFrame.top + Y_SENSOR - clientY) / Y_SENSOR);
    let velocityBottom = Math.max(0, (clientY - (containerFrame.bottom - Y_SENSOR)) / Y_SENSOR);
    const topSensor = velocityTop > 0 && velocityBottom === 0;
    const bottomSensor = velocityBottom > 0 && velocityTop === 0;
    sign2.y = topSensor ? -1 : bottomSensor ? 1 : 0;
    vel.y = sign2.y === -1 ? velocityTop : velocityBottom;
    if (vel.y > 0) {
      if (!intervalId) {
        intervalId = setInterval(
          () => {
            scrollElement.scrollTop += 2 * (vel.y + Math.sign(vel.y)) * sign2.y;
            update();
          },
          10
        );
      }
    } else if (intervalId) {
      stopAutoscroll();
    } else {
      update();
    }
  };
  const pointerup = (e2) => {
    stopAutoscroll();
    window.removeEventListener("pointerdown", pointerdown);
    window.removeEventListener("pointermove", pointermove);
    window.removeEventListener("pointerup", pointerup);
    repaint(inActivate, true);
  };
  let resizeInitPos = { x: 0, y: 0 };
  let initSize = { width: 0, height: 0 };
  const resizePointerDown = (e2) => {
    e2.stopPropagation();
    const { pageX, pageY } = e2;
    resizeInitPos = { x: pageX, y: pageY };
    initSize = { width, height };
    $$invalidate(14, cordDiff = { x: 0, y: 0 });
    $$invalidate(17, rect = e2.target.closest(".svlt-grid-item").getBoundingClientRect());
    $$invalidate(15, newSize = { width, height });
    $$invalidate(13, active = true);
    $$invalidate(16, trans = false);
    $$invalidate(12, shadow = {
      x: item.x,
      y: item.y,
      w: item.w,
      h: item.h
    });
    containerFrame = getContainerFrame(container);
    scrollElement = getScroller(container);
    window.addEventListener("pointermove", resizePointerMove);
    window.addEventListener("pointerup", resizePointerUp);
  };
  const resizePointerMove = ({ pageX, pageY }) => {
    $$invalidate(15, newSize.width = initSize.width + pageX - resizeInitPos.x, newSize);
    $$invalidate(15, newSize.height = initSize.height + pageY - resizeInitPos.y, newSize);
    let maxWidth = cols - shadow.x;
    maxWidth = Math.min(max.w, maxWidth) || maxWidth;
    $$invalidate(15, newSize.width = Math.max(Math.min(newSize.width, maxWidth * xPerPx - gapX * 2), min.w * xPerPx - gapX * 2), newSize);
    $$invalidate(15, newSize.height = Math.max(newSize.height, min.h * yPerPx - gapY * 2), newSize);
    if (max.h) {
      $$invalidate(15, newSize.height = Math.min(newSize.height, max.h * yPerPx - gapY * 2), newSize);
    }
    $$invalidate(12, shadow.w = Math.round((newSize.width + gapX * 2) / xPerPx), shadow);
    $$invalidate(12, shadow.h = Math.round((newSize.height + gapY * 2) / yPerPx), shadow);
    repaint();
  };
  const resizePointerUp = (e2) => {
    e2.stopPropagation();
    repaint(inActivate, true);
    window.removeEventListener("pointermove", resizePointerMove);
    window.removeEventListener("pointerup", resizePointerUp);
  };
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      shadowElement = $$value;
      $$invalidate(11, shadowElement);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("sensor" in $$props2)
      $$invalidate(20, sensor = $$props2.sensor);
    if ("width" in $$props2)
      $$invalidate(0, width = $$props2.width);
    if ("height" in $$props2)
      $$invalidate(1, height = $$props2.height);
    if ("left" in $$props2)
      $$invalidate(2, left = $$props2.left);
    if ("top" in $$props2)
      $$invalidate(3, top = $$props2.top);
    if ("resizable" in $$props2)
      $$invalidate(4, resizable = $$props2.resizable);
    if ("draggable" in $$props2)
      $$invalidate(5, draggable = $$props2.draggable);
    if ("id" in $$props2)
      $$invalidate(21, id = $$props2.id);
    if ("container" in $$props2)
      $$invalidate(22, container = $$props2.container);
    if ("xPerPx" in $$props2)
      $$invalidate(6, xPerPx = $$props2.xPerPx);
    if ("yPerPx" in $$props2)
      $$invalidate(7, yPerPx = $$props2.yPerPx);
    if ("gapX" in $$props2)
      $$invalidate(8, gapX = $$props2.gapX);
    if ("gapY" in $$props2)
      $$invalidate(9, gapY = $$props2.gapY);
    if ("item" in $$props2)
      $$invalidate(10, item = $$props2.item);
    if ("max" in $$props2)
      $$invalidate(23, max = $$props2.max);
    if ("min" in $$props2)
      $$invalidate(24, min = $$props2.min);
    if ("cols" in $$props2)
      $$invalidate(25, cols = $$props2.cols);
    if ("nativeContainer" in $$props2)
      $$invalidate(26, nativeContainer = $$props2.nativeContainer);
    if ("$$scope" in $$props2)
      $$invalidate(27, $$scope = $$props2.$$scope);
  };
  return [
    width,
    height,
    left,
    top,
    resizable,
    draggable,
    xPerPx,
    yPerPx,
    gapX,
    gapY,
    item,
    shadowElement,
    shadow,
    active,
    cordDiff,
    newSize,
    trans,
    rect,
    pointerdown,
    resizePointerDown,
    sensor,
    id,
    container,
    max,
    min,
    cols,
    nativeContainer,
    $$scope,
    slots,
    div_binding
  ];
}
class MoveResize extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$3,
      create_fragment$3,
      safe_not_equal,
      {
        sensor: 20,
        width: 0,
        height: 1,
        left: 2,
        top: 3,
        resizable: 4,
        draggable: 5,
        id: 21,
        container: 22,
        xPerPx: 6,
        yPerPx: 7,
        gapX: 8,
        gapY: 9,
        item: 10,
        max: 23,
        min: 24,
        cols: 25,
        nativeContainer: 26
      },
      null,
      [-1, -1]
    );
  }
}
const index_svelte_svelte_type_style_lang = "";
function get_each_context$1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i2];
  child_ctx[30] = i2;
  return child_ctx;
}
const get_default_slot_changes = (dirty) => ({
  movePointerDown: dirty[1] & /*movePointerDown*/
  2,
  resizePointerDown: dirty[1] & /*resizePointerDown*/
  1,
  dataItem: dirty[0] & /*items*/
  1,
  item: dirty[0] & /*items, getComputedCols*/
  17,
  index: dirty[0] & /*items*/
  1
});
const get_default_slot_context = (ctx) => ({
  movePointerDown: (
    /*movePointerDown*/
    ctx[32]
  ),
  resizePointerDown: (
    /*resizePointerDown*/
    ctx[31]
  ),
  dataItem: (
    /*item*/
    ctx[28]
  ),
  item: (
    /*item*/
    ctx[28][
      /*getComputedCols*/
      ctx[4]
    ]
  ),
  index: (
    /*i*/
    ctx[30]
  )
});
function create_if_block$2(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*items*/
    ctx[0]
  );
  const get_key = (ctx2) => (
    /*item*/
    ctx2[28].id
  );
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$1(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$1(key, child_ctx));
  }
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*items, getComputedCols, xPerPx, yPerPx, gapX, gapY, sensor, scroller, container, handleRepaint, pointerup, $$scope*/
      2105213 | dirty[1] & /*movePointerDown, resizePointerDown*/
      3) {
        each_value = ensure_array_like(
          /*items*/
          ctx2[0]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$1, each_1_anchor, get_each_context$1);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d(detaching);
      }
    }
  };
}
function create_if_block_1$1(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[19].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[21],
    get_default_slot_context
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    l(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope, items, getComputedCols*/
        2097169 | dirty[1] & /*movePointerDown, resizePointerDown*/
        3)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[21],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[21]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[21],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_default_slot$2(ctx) {
  let t2;
  let current;
  let if_block = (
    /*item*/
    ctx[28][
      /*getComputedCols*/
      ctx[4]
    ] && create_if_block_1$1(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      t2 = space();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*item*/
        ctx2[28][
          /*getComputedCols*/
          ctx2[4]
        ]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*items, getComputedCols*/
          17) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$1(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_each_block$1(key_1, ctx) {
  let first;
  let moveresize;
  let current;
  moveresize = new MoveResize({
    props: {
      id: (
        /*item*/
        ctx[28].id
      ),
      resizable: (
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].resizable
      ),
      draggable: (
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].draggable
      ),
      xPerPx: (
        /*xPerPx*/
        ctx[6]
      ),
      yPerPx: (
        /*yPerPx*/
        ctx[10]
      ),
      width: Math.min(
        /*getComputedCols*/
        ctx[4],
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].w
      ) * /*xPerPx*/
      ctx[6] - /*gapX*/
      ctx[9] * 2,
      height: (
        /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].h) * /*yPerPx*/
        ctx[10] - /*gapY*/
        ctx[8] * 2
      ),
      top: (
        /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].y) * /*yPerPx*/
        ctx[10] + /*gapY*/
        ctx[8]
      ),
      left: (
        /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].x) * /*xPerPx*/
        ctx[6] + /*gapX*/
        ctx[9]
      ),
      item: (
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ]
      ),
      min: (
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].min
      ),
      max: (
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].max
      ),
      cols: (
        /*getComputedCols*/
        ctx[4]
      ),
      gapX: (
        /*gapX*/
        ctx[9]
      ),
      gapY: (
        /*gapY*/
        ctx[8]
      ),
      sensor: (
        /*sensor*/
        ctx[3]
      ),
      container: (
        /*scroller*/
        ctx[2]
      ),
      nativeContainer: (
        /*container*/
        ctx[5]
      ),
      $$slots: {
        default: [
          create_default_slot$2,
          ({ resizePointerDown, movePointerDown }) => ({
            31: resizePointerDown,
            32: movePointerDown
          }),
          ({ resizePointerDown, movePointerDown }) => [0, (resizePointerDown ? 1 : 0) | (movePointerDown ? 2 : 0)]
        ]
      },
      $$scope: { ctx }
    }
  });
  moveresize.$on(
    "repaint",
    /*handleRepaint*/
    ctx[12]
  );
  moveresize.$on(
    "pointerup",
    /*pointerup*/
    ctx[11]
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(moveresize.$$.fragment);
      this.h();
    },
    l(nodes) {
      first = empty();
      claim_component(moveresize.$$.fragment, nodes);
      this.h();
    },
    h() {
      this.first = first;
    },
    m(target, anchor) {
      insert_hydration(target, first, anchor);
      mount_component(moveresize, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const moveresize_changes = {};
      if (dirty[0] & /*items*/
      1)
        moveresize_changes.id = /*item*/
        ctx[28].id;
      if (dirty[0] & /*items, getComputedCols*/
      17)
        moveresize_changes.resizable = /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].resizable;
      if (dirty[0] & /*items, getComputedCols*/
      17)
        moveresize_changes.draggable = /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].draggable;
      if (dirty[0] & /*xPerPx*/
      64)
        moveresize_changes.xPerPx = /*xPerPx*/
        ctx[6];
      if (dirty[0] & /*getComputedCols, items, xPerPx, gapX*/
      593)
        moveresize_changes.width = Math.min(
          /*getComputedCols*/
          ctx[4],
          /*item*/
          ctx[28][
            /*getComputedCols*/
            ctx[4]
          ] && /*item*/
          ctx[28][
            /*getComputedCols*/
            ctx[4]
          ].w
        ) * /*xPerPx*/
        ctx[6] - /*gapX*/
        ctx[9] * 2;
      if (dirty[0] & /*items, getComputedCols, gapY*/
      273)
        moveresize_changes.height = /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].h) * /*yPerPx*/
        ctx[10] - /*gapY*/
        ctx[8] * 2;
      if (dirty[0] & /*items, getComputedCols, gapY*/
      273)
        moveresize_changes.top = /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].y) * /*yPerPx*/
        ctx[10] + /*gapY*/
        ctx[8];
      if (dirty[0] & /*items, getComputedCols, xPerPx, gapX*/
      593)
        moveresize_changes.left = /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].x) * /*xPerPx*/
        ctx[6] + /*gapX*/
        ctx[9];
      if (dirty[0] & /*items, getComputedCols*/
      17)
        moveresize_changes.item = /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ];
      if (dirty[0] & /*items, getComputedCols*/
      17)
        moveresize_changes.min = /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].min;
      if (dirty[0] & /*items, getComputedCols*/
      17)
        moveresize_changes.max = /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].max;
      if (dirty[0] & /*getComputedCols*/
      16)
        moveresize_changes.cols = /*getComputedCols*/
        ctx[4];
      if (dirty[0] & /*gapX*/
      512)
        moveresize_changes.gapX = /*gapX*/
        ctx[9];
      if (dirty[0] & /*gapY*/
      256)
        moveresize_changes.gapY = /*gapY*/
        ctx[8];
      if (dirty[0] & /*sensor*/
      8)
        moveresize_changes.sensor = /*sensor*/
        ctx[3];
      if (dirty[0] & /*scroller*/
      4)
        moveresize_changes.container = /*scroller*/
        ctx[2];
      if (dirty[0] & /*container*/
      32)
        moveresize_changes.nativeContainer = /*container*/
        ctx[5];
      if (dirty[0] & /*$$scope, items, getComputedCols*/
      2097169 | dirty[1] & /*movePointerDown, resizePointerDown*/
      3) {
        moveresize_changes.$$scope = { dirty, ctx };
      }
      moveresize.$set(moveresize_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(moveresize.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(moveresize.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
      }
      destroy_component(moveresize, detaching);
    }
  };
}
function create_fragment$2(ctx) {
  let div;
  let current;
  let if_block = (
    /*xPerPx*/
    (ctx[6] || !/*fastStart*/
    ctx[1]) && create_if_block$2(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true, style: true });
      var div_nodes = children(div);
      if (if_block)
        if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "svlt-grid-container svelte-1k5vgfu");
      set_style(
        div,
        "height",
        /*containerHeight*/
        ctx[7] + "px"
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      ctx[20](div);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*xPerPx*/
        ctx2[6] || !/*fastStart*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*xPerPx, fastStart*/
          66) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*containerHeight*/
      128) {
        set_style(
          div,
          "height",
          /*containerHeight*/
          ctx2[7] + "px"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
      ctx[20](null);
    }
  };
}
function instance$2($$self, $$props, $$invalidate) {
  let gapX;
  let gapY;
  let containerHeight;
  let { $$slots: slots = {}, $$scope } = $$props;
  const dispatch2 = createEventDispatcher();
  let { fillSpace = false } = $$props;
  let { items } = $$props;
  let { rowHeight } = $$props;
  let { cols } = $$props;
  let { gap = [10, 10] } = $$props;
  let { fastStart = false } = $$props;
  let { throttleUpdate = 100 } = $$props;
  let { throttleResize = 100 } = $$props;
  let { scroller = void 0 } = $$props;
  let { sensor = 20 } = $$props;
  let getComputedCols;
  let container;
  let xPerPx = 0;
  let yPerPx = rowHeight;
  let containerWidth;
  const pointerup = (ev) => {
    dispatch2("pointerup", { id: ev.detail.id, cols: getComputedCols });
  };
  const onResize = throttle(
    () => {
      $$invalidate(0, items = specifyUndefinedColumns(items, getComputedCols, cols));
      dispatch2("resize", {
        cols: getComputedCols,
        xPerPx,
        yPerPx,
        width: containerWidth
      });
    },
    throttleUpdate
  );
  onMount(() => {
    const sizeObserver = new ResizeObserver((entries) => {
      requestAnimationFrame(() => {
        let width = entries[0].contentRect.width;
        if (width === containerWidth)
          return;
        $$invalidate(4, getComputedCols = getColumn(width, cols));
        $$invalidate(6, xPerPx = width / getComputedCols);
        if (!containerWidth) {
          $$invalidate(0, items = specifyUndefinedColumns(items, getComputedCols, cols));
          dispatch2("mount", { cols: getComputedCols, xPerPx, yPerPx });
        } else {
          onResize();
        }
        containerWidth = width;
      });
    });
    sizeObserver.observe(container);
    return () => sizeObserver.disconnect();
  });
  const updateMatrix = ({ detail }) => {
    let activeItem = getItemById(detail.id, items);
    if (activeItem) {
      activeItem = {
        ...activeItem,
        [getComputedCols]: {
          ...activeItem[getComputedCols],
          ...detail.shadow
        }
      };
      if (fillSpace) {
        $$invalidate(0, items = moveItemsAroundItem(activeItem, items, getComputedCols, getItemById(detail.id, items)));
      } else {
        $$invalidate(0, items = moveItem(activeItem, items, getComputedCols, getItemById(detail.id, items)));
      }
      if (detail.onUpdate)
        detail.onUpdate();
      dispatch2("change", {
        unsafeItem: activeItem,
        id: activeItem.id,
        cols: getComputedCols
      });
    }
  };
  const throttleMatrix = throttle(updateMatrix, throttleResize);
  const handleRepaint = ({ detail }) => {
    if (!detail.isPointerUp) {
      throttleMatrix({ detail });
    } else {
      updateMatrix({ detail });
    }
  };
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      container = $$value;
      $$invalidate(5, container);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("fillSpace" in $$props2)
      $$invalidate(13, fillSpace = $$props2.fillSpace);
    if ("items" in $$props2)
      $$invalidate(0, items = $$props2.items);
    if ("rowHeight" in $$props2)
      $$invalidate(14, rowHeight = $$props2.rowHeight);
    if ("cols" in $$props2)
      $$invalidate(15, cols = $$props2.cols);
    if ("gap" in $$props2)
      $$invalidate(16, gap = $$props2.gap);
    if ("fastStart" in $$props2)
      $$invalidate(1, fastStart = $$props2.fastStart);
    if ("throttleUpdate" in $$props2)
      $$invalidate(17, throttleUpdate = $$props2.throttleUpdate);
    if ("throttleResize" in $$props2)
      $$invalidate(18, throttleResize = $$props2.throttleResize);
    if ("scroller" in $$props2)
      $$invalidate(2, scroller = $$props2.scroller);
    if ("sensor" in $$props2)
      $$invalidate(3, sensor = $$props2.sensor);
    if ("$$scope" in $$props2)
      $$invalidate(21, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*gap*/
    65536) {
      $$invalidate(9, [gapX, gapY] = gap, gapX, ($$invalidate(8, gapY), $$invalidate(16, gap)));
    }
    if ($$self.$$.dirty[0] & /*items, getComputedCols*/
    17) {
      $$invalidate(7, containerHeight = getContainerHeight(items, yPerPx, getComputedCols));
    }
  };
  return [
    items,
    fastStart,
    scroller,
    sensor,
    getComputedCols,
    container,
    xPerPx,
    containerHeight,
    gapY,
    gapX,
    yPerPx,
    pointerup,
    handleRepaint,
    fillSpace,
    rowHeight,
    cols,
    gap,
    throttleUpdate,
    throttleResize,
    slots,
    div_binding,
    $$scope
  ];
}
class Grid extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$2,
      create_fragment$2,
      safe_not_equal,
      {
        fillSpace: 13,
        items: 0,
        rowHeight: 14,
        cols: 15,
        gap: 16,
        fastStart: 1,
        throttleUpdate: 17,
        throttleResize: 18,
        scroller: 2,
        sensor: 3
      },
      null,
      [-1, -1]
    );
  }
}
function makeItem(item) {
  const { min = { w: 1, h: 1 }, max } = item;
  return {
    fixed: false,
    resizable: !item.fixed,
    draggable: !item.fixed,
    customDragger: false,
    customResizer: false,
    min: {
      w: Math.max(1, min.w),
      h: Math.max(1, min.h)
    },
    max: { ...max },
    ...item
  };
}
const gridHelp = {
  normalize(items, col) {
    getRowsCount(items, col);
    return normalize(items, col);
  },
  adjust(items, col) {
    return adjust(items, col);
  },
  item(obj) {
    return makeItem(obj);
  },
  findSpace(item, items, cols) {
    let matrix = makeMatrixFromItems(items, getRowsCount(items, cols), cols);
    let position = findFreeSpaceForItem(matrix, item[cols]);
    return position;
  }
};
const WidgetContainer_svelte_svelte_type_style_lang = "";
function create_if_block$1(ctx) {
  let div;
  let fab;
  let t2;
  let menu;
  let updating_open;
  let current;
  fab = new Fab({
    props: {
      style: "z-index: 9;",
      color: "primary",
      mini: true,
      $$slots: { default: [create_default_slot_9$1] },
      $$scope: { ctx }
    }
  });
  fab.$on(
    "click",
    /*click_handler_1*/
    ctx[5]
  );
  function menu_open_binding(value) {
    ctx[9](value);
  }
  let menu_props = {
    $$slots: { default: [create_default_slot_1$1] },
    $$scope: { ctx }
  };
  if (
    /*menuOpen*/
    ctx[1] !== void 0
  ) {
    menu_props.open = /*menuOpen*/
    ctx[1];
  }
  menu = new Menu({ props: menu_props });
  binding_callbacks.push(() => bind(menu, "open", menu_open_binding));
  return {
    c() {
      div = element("div");
      create_component(fab.$$.fragment);
      t2 = space();
      create_component(menu.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(fab.$$.fragment, div_nodes);
      t2 = claim_space(div_nodes);
      claim_component(menu.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "widget-edit svelte-n9506d");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(fab, div, null);
      append_hydration(div, t2);
      mount_component(menu, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const fab_changes = {};
      if (dirty & /*$$scope*/
      2048) {
        fab_changes.$$scope = { dirty, ctx: ctx2 };
      }
      fab.$set(fab_changes);
      const menu_changes = {};
      if (dirty & /*$$scope, fixed*/
      2049) {
        menu_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_open && dirty & /*menuOpen*/
      2) {
        updating_open = true;
        menu_changes.open = /*menuOpen*/
        ctx2[1];
        add_flush_callback(() => updating_open = false);
      }
      menu.$set(menu_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(fab.$$.fragment, local);
      transition_in(menu.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fab.$$.fragment, local);
      transition_out(menu.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(fab);
      destroy_component(menu);
    }
  };
}
function create_default_slot_10$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("menu");
    },
    l(nodes) {
      t2 = claim_text(nodes, "menu");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_9$1(ctx) {
  let icon;
  let current;
  icon = new CommonIcon({
    props: {
      class: "material-icons",
      $$slots: { default: [create_default_slot_10$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*$$scope*/
      2048) {
        icon_changes.$$scope = { dirty, ctx: ctx2 };
      }
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_default_slot_8$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Edit");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Edit");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_7$1(ctx) {
  let text_1;
  let current;
  text_1 = new Text({
    props: {
      $$slots: { default: [create_default_slot_8$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(text_1.$$.fragment);
    },
    l(nodes) {
      claim_component(text_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(text_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const text_1_changes = {};
      if (dirty & /*$$scope*/
      2048) {
        text_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      text_1.$set(text_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(text_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(text_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(text_1, detaching);
    }
  };
}
function create_default_slot_6$1(ctx) {
  let t_value = (
    /*fixed*/
    ctx[0] ? "Unlock" : "Lock"
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*fixed*/
      1 && t_value !== (t_value = /*fixed*/
      ctx2[0] ? "Unlock" : "Lock"))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_5$1(ctx) {
  let text_1;
  let current;
  text_1 = new Text({
    props: {
      $$slots: { default: [create_default_slot_6$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(text_1.$$.fragment);
    },
    l(nodes) {
      claim_component(text_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(text_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const text_1_changes = {};
      if (dirty & /*$$scope, fixed*/
      2049) {
        text_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      text_1.$set(text_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(text_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(text_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(text_1, detaching);
    }
  };
}
function create_default_slot_4$1(ctx) {
  let span;
  let textContent = "Delete";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-dwla2h")
        span.textContent = textContent;
      this.h();
    },
    h() {
      attr(span, "class", "delete svelte-n9506d");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_default_slot_3$1(ctx) {
  let text_1;
  let current;
  text_1 = new Text({
    props: {
      $$slots: { default: [create_default_slot_4$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(text_1.$$.fragment);
    },
    l(nodes) {
      claim_component(text_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(text_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const text_1_changes = {};
      if (dirty & /*$$scope*/
      2048) {
        text_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      text_1.$set(text_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(text_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(text_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(text_1, detaching);
    }
  };
}
function create_default_slot_2$1(ctx) {
  let item0;
  let t0;
  let item1;
  let t1;
  let item2;
  let current;
  item0 = new Item({
    props: {
      $$slots: { default: [create_default_slot_7$1] },
      $$scope: { ctx }
    }
  });
  item0.$on(
    "SMUI:action",
    /*SMUI_action_handler*/
    ctx[6]
  );
  item1 = new Item({
    props: {
      $$slots: { default: [create_default_slot_5$1] },
      $$scope: { ctx }
    }
  });
  item1.$on(
    "SMUI:action",
    /*SMUI_action_handler_1*/
    ctx[7]
  );
  item2 = new Item({
    props: {
      $$slots: { default: [create_default_slot_3$1] },
      $$scope: { ctx }
    }
  });
  item2.$on(
    "SMUI:action",
    /*SMUI_action_handler_2*/
    ctx[8]
  );
  return {
    c() {
      create_component(item0.$$.fragment);
      t0 = space();
      create_component(item1.$$.fragment);
      t1 = space();
      create_component(item2.$$.fragment);
    },
    l(nodes) {
      claim_component(item0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(item1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(item2.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(item0, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(item1, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(item2, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const item0_changes = {};
      if (dirty & /*$$scope*/
      2048) {
        item0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      item0.$set(item0_changes);
      const item1_changes = {};
      if (dirty & /*$$scope, fixed*/
      2049) {
        item1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      item1.$set(item1_changes);
      const item2_changes = {};
      if (dirty & /*$$scope*/
      2048) {
        item2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      item2.$set(item2_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(item0.$$.fragment, local);
      transition_in(item1.$$.fragment, local);
      transition_in(item2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(item0.$$.fragment, local);
      transition_out(item1.$$.fragment, local);
      transition_out(item2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(item0, detaching);
      destroy_component(item1, detaching);
      destroy_component(item2, detaching);
    }
  };
}
function create_default_slot_1$1(ctx) {
  let list;
  let current;
  list = new List({
    props: {
      $$slots: { default: [create_default_slot_2$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list.$$.fragment);
    },
    l(nodes) {
      claim_component(list.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_changes = {};
      if (dirty & /*$$scope, fixed*/
      2049) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list, detaching);
    }
  };
}
function create_default_slot$1(ctx) {
  let t2;
  let current;
  let if_block = (
    /*$editing*/
    ctx[2] && create_if_block$1(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    null
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      t2 = space();
      if (default_slot)
        default_slot.c();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
      if (default_slot)
        default_slot.l(nodes);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$editing*/
        ctx2[2]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$editing*/
          4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$1(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      if (if_block)
        if_block.d(detaching);
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment$1(ctx) {
  let card;
  let current;
  card = new Card({
    props: {
      style: "height: 100%; width: 100%; padding: 0px",
      $$slots: { default: [create_default_slot$1] },
      $$scope: { ctx }
    }
  });
  card.$on(
    "click",
    /*click_handler*/
    ctx[10]
  );
  return {
    c() {
      create_component(card.$$.fragment);
    },
    l(nodes) {
      claim_component(card.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(card, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const card_changes = {};
      if (dirty & /*$$scope, menuOpen, fixed, $editing*/
      2055) {
        card_changes.$$scope = { dirty, ctx: ctx2 };
      }
      card.$set(card_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(card.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(card.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(card, detaching);
    }
  };
}
function instance$1($$self, $$props, $$invalidate) {
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(2, $editing = $$value));
  let { $$slots: slots = {}, $$scope } = $$props;
  const dispatch2 = createEventDispatcher();
  let { fixed } = $$props;
  let menuOpen = false;
  const click_handler_1 = (e2) => {
    $$invalidate(1, menuOpen = true);
  };
  const SMUI_action_handler = () => dispatch2("edit");
  const SMUI_action_handler_1 = () => dispatch2("fixed", !fixed);
  const SMUI_action_handler_2 = () => dispatch2("delete");
  function menu_open_binding(value) {
    menuOpen = value;
    $$invalidate(1, menuOpen);
  }
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("fixed" in $$props2)
      $$invalidate(0, fixed = $$props2.fixed);
    if ("$$scope" in $$props2)
      $$invalidate(11, $$scope = $$props2.$$scope);
  };
  return [
    fixed,
    menuOpen,
    $editing,
    dispatch2,
    slots,
    click_handler_1,
    SMUI_action_handler,
    SMUI_action_handler_1,
    SMUI_action_handler_2,
    menu_open_binding,
    click_handler,
    $$scope
  ];
}
class WidgetContainer extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1, create_fragment$1, safe_not_equal, { fixed: 0 });
  }
}
const _page_svelte_svelte_type_style_lang = "";
function get_each_context(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[62] = list[i2];
  return child_ctx;
}
function create_if_block(ctx) {
  let drawer;
  let updating_open;
  let t0;
  let scrim;
  let t1;
  let appcontent;
  let current;
  function drawer_open_binding(value) {
    ctx[32](value);
  }
  let drawer_props = {
    variant: "modal",
    $$slots: { default: [create_default_slot_19] },
    $$scope: { ctx }
  };
  if (
    /*editOpen*/
    ctx[6] !== void 0
  ) {
    drawer_props.open = /*editOpen*/
    ctx[6];
  }
  drawer = new Drawer({ props: drawer_props });
  binding_callbacks.push(() => bind(drawer, "open", drawer_open_binding));
  scrim = new Scrim({});
  appcontent = new AppContent({
    props: {
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(drawer.$$.fragment);
      t0 = space();
      create_component(scrim.$$.fragment);
      t1 = space();
      create_component(appcontent.$$.fragment);
    },
    l(nodes) {
      claim_component(drawer.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(scrim.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(appcontent.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(drawer, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(scrim, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(appcontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const drawer_changes = {};
      if (dirty[0] & /*editItem, editOpen*/
      192 | dirty[2] & /*$$scope*/
      8) {
        drawer_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_open && dirty[0] & /*editOpen*/
      64) {
        updating_open = true;
        drawer_changes.open = /*editOpen*/
        ctx2[6];
        add_flush_callback(() => updating_open = false);
      }
      drawer.$set(drawer_changes);
      const appcontent_changes = {};
      if (dirty[0] & /*addWidgetOpen, viewOpen, viewComponent, viewItem, $grid, items, deleteDashboardOpen, dashboard, savingDashboard, $editing*/
      12094 | dirty[2] & /*$$scope*/
      8) {
        appcontent_changes.$$scope = { dirty, ctx: ctx2 };
      }
      appcontent.$set(appcontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(drawer.$$.fragment, local);
      transition_in(scrim.$$.fragment, local);
      transition_in(appcontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(drawer.$$.fragment, local);
      transition_out(scrim.$$.fragment, local);
      transition_out(appcontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(drawer, detaching);
      destroy_component(scrim, detaching);
      destroy_component(appcontent, detaching);
    }
  };
}
function create_default_slot_23(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Settings");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Settings");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_22(ctx) {
  var _a2, _b2;
  let t0;
  let t1_value = findLabel(
    /*editItem*/
    (_b2 = (_a2 = ctx[7]) == null ? void 0 : _a2.settings) == null ? void 0 : _b2.type
  ) + "";
  let t1;
  let t2;
  return {
    c() {
      t0 = text("Editing settings for ");
      t1 = text(t1_value);
      t2 = text(" widget");
    },
    l(nodes) {
      t0 = claim_text(nodes, "Editing settings for ");
      t1 = claim_text(nodes, t1_value);
      t2 = claim_text(nodes, " widget");
    },
    m(target, anchor) {
      insert_hydration(target, t0, anchor);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      var _a3, _b3;
      if (dirty[0] & /*editItem*/
      128 && t1_value !== (t1_value = findLabel(
        /*editItem*/
        (_b3 = (_a3 = ctx2[7]) == null ? void 0 : _a3.settings) == null ? void 0 : _b3.type
      ) + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
      }
    }
  };
}
function create_default_slot_21(ctx) {
  let title;
  let t2;
  let subtitle;
  let current;
  title = new Title$1({
    props: {
      $$slots: { default: [create_default_slot_23] },
      $$scope: { ctx }
    }
  });
  subtitle = new Subtitle({
    props: {
      $$slots: { default: [create_default_slot_22] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(title.$$.fragment);
      t2 = space();
      create_component(subtitle.$$.fragment);
    },
    l(nodes) {
      claim_component(title.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(subtitle.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(title, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(subtitle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const title_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        title_changes.$$scope = { dirty, ctx: ctx2 };
      }
      title.$set(title_changes);
      const subtitle_changes = {};
      if (dirty[0] & /*editItem*/
      128 | dirty[2] & /*$$scope*/
      8) {
        subtitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      subtitle.$set(subtitle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(title.$$.fragment, local);
      transition_in(subtitle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(title.$$.fragment, local);
      transition_out(subtitle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(title, detaching);
      destroy_component(subtitle, detaching);
    }
  };
}
function create_if_block_5(ctx) {
  let editwidgetview;
  let current;
  editwidgetview = new EditWidgetView({ props: { item: (
    /*editItem*/
    ctx[7]
  ) } });
  editwidgetview.$on(
    "settings",
    /*settings_handler*/
    ctx[31]
  );
  return {
    c() {
      create_component(editwidgetview.$$.fragment);
    },
    l(nodes) {
      claim_component(editwidgetview.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(editwidgetview, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const editwidgetview_changes = {};
      if (dirty[0] & /*editItem*/
      128)
        editwidgetview_changes.item = /*editItem*/
        ctx2[7];
      editwidgetview.$set(editwidgetview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(editwidgetview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(editwidgetview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(editwidgetview, detaching);
    }
  };
}
function create_default_slot_20(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*editOpen*/
    ctx[6] && create_if_block_5(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*editOpen*/
        ctx2[6]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*editOpen*/
          64) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_5(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_default_slot_19(ctx) {
  let header;
  let t2;
  let content;
  let current;
  header = new Header({
    props: {
      $$slots: { default: [create_default_slot_21] },
      $$scope: { ctx }
    }
  });
  content = new Content({
    props: {
      $$slots: { default: [create_default_slot_20] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(header.$$.fragment);
      t2 = space();
      create_component(content.$$.fragment);
    },
    l(nodes) {
      claim_component(header.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(header, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const header_changes = {};
      if (dirty[0] & /*editItem*/
      128 | dirty[2] & /*$$scope*/
      8) {
        header_changes.$$scope = { dirty, ctx: ctx2 };
      }
      header.$set(header_changes);
      const content_changes = {};
      if (dirty[0] & /*editItem, editOpen*/
      192 | dirty[2] & /*$$scope*/
      8) {
        content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      content.$set(content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(header.$$.fragment, local);
      transition_in(content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(header.$$.fragment, local);
      transition_out(content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(header, detaching);
      destroy_component(content, detaching);
    }
  };
}
function create_if_block_2(ctx) {
  var _a2;
  let div0;
  let t0;
  let div1;
  let button0;
  let t1;
  let button1;
  let t2;
  let button2;
  let t3;
  let if_block_anchor;
  let current;
  let each_value = ensure_array_like(widgets);
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block(get_each_context(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  button0 = new Button({
    props: {
      color: "secondary",
      $$slots: { default: [create_default_slot_14] },
      $$scope: { ctx }
    }
  });
  button0.$on(
    "click",
    /*click_handler_1*/
    ctx[34]
  );
  button1 = new Button({
    props: {
      color: "secondary",
      $$slots: { default: [create_default_slot_11] },
      $$scope: { ctx }
    }
  });
  button1.$on(
    "click",
    /*click_handler_2*/
    ctx[35]
  );
  button2 = new Button({
    props: {
      color: "secondary",
      $$slots: { default: [create_default_slot_8] },
      $$scope: { ctx }
    }
  });
  button2.$on(
    "click",
    /*click_handler_3*/
    ctx[36]
  );
  let if_block = (
    /*dashboard*/
    ((_a2 = ctx[10]) == null ? void 0 : _a2.source) === "localstorage" && create_if_block_3(ctx)
  );
  return {
    c() {
      div0 = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t0 = space();
      div1 = element("div");
      create_component(button0.$$.fragment);
      t1 = space();
      create_component(button1.$$.fragment);
      t2 = space();
      create_component(button2.$$.fragment);
      t3 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", {});
      var div0_nodes = children(div0);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div0_nodes);
      }
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", {});
      var div1_nodes = children(div1);
      claim_component(button0.$$.fragment, div1_nodes);
      t1 = claim_space(div1_nodes);
      claim_component(button1.$$.fragment, div1_nodes);
      t2 = claim_space(div1_nodes);
      claim_component(button2.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      t3 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div0, null);
        }
      }
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div1, anchor);
      mount_component(button0, div1, null);
      append_hydration(div1, t1);
      mount_component(button1, div1, null);
      append_hydration(div1, t2);
      mount_component(button2, div1, null);
      insert_hydration(target, t3, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty[0] & /*addWidget*/
      16384) {
        each_value = ensure_array_like(widgets);
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(div0, null);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
      const button0_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty[0] & /*savingDashboard*/
      2048 | dirty[2] & /*$$scope*/
      8) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
      if (
        /*dashboard*/
        ((_a3 = ctx2[10]) == null ? void 0 : _a3.source) === "localstorage"
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*dashboard*/
          1024) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_3(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      transition_in(button2.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      transition_out(button2.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(div1);
        detach(t3);
        detach(if_block_anchor);
      }
      destroy_each(each_blocks, detaching);
      destroy_component(button0);
      destroy_component(button1);
      destroy_component(button2);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_default_slot_18(ctx) {
  let t_value = (
    /*widget*/
    ctx[62].icon + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_17(ctx) {
  let icon;
  let t2;
  let current;
  icon = new CommonIcon({
    props: {
      class: "material-icons",
      $$slots: { default: [create_default_slot_18] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
      t2 = space();
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
      t2 = claim_space(nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      insert_hydration(target, t2, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        icon_changes.$$scope = { dirty, ctx: ctx2 };
      }
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(icon, detaching);
    }
  };
}
function create_each_block(ctx) {
  let button;
  let current;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[33](
        /*widget*/
        ctx[62]
      )
    );
  }
  button = new Button({
    props: {
      variant: "text",
      color: "secondary",
      title: (
        /*widget*/
        ctx[62].label
      ),
      $$slots: { default: [create_default_slot_17] },
      $$scope: { ctx }
    }
  });
  button.$on("click", click_handler);
  return {
    c() {
      create_component(button.$$.fragment);
    },
    l(nodes) {
      claim_component(button.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const button_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        button_changes.$$scope = { dirty, ctx };
      }
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(button, detaching);
    }
  };
}
function create_default_slot_16(ctx) {
  let t2;
  return {
    c() {
      t2 = text("open_in_new");
    },
    l(nodes) {
      t2 = claim_text(nodes, "open_in_new");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_15(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Add");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Add");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_14(ctx) {
  let icon;
  let t2;
  let label;
  let current;
  icon = new CommonIcon({
    props: {
      class: "material-icons",
      $$slots: { default: [create_default_slot_16] },
      $$scope: { ctx }
    }
  });
  label = new CommonLabel({
    props: {
      $$slots: { default: [create_default_slot_15] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
      t2 = space();
      create_component(label.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        icon_changes.$$scope = { dirty, ctx: ctx2 };
      }
      icon.$set(icon_changes);
      const label_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      label.$set(label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      transition_in(label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      transition_out(label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(icon, detaching);
      destroy_component(label, detaching);
    }
  };
}
function create_if_block_4(ctx) {
  let circularprogress;
  let current;
  circularprogress = new CircularProgress({
    props: {
      style: "height: 28px; width: 28px;",
      indeterminate: true
    }
  });
  return {
    c() {
      create_component(circularprogress.$$.fragment);
    },
    l(nodes) {
      claim_component(circularprogress.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(circularprogress, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(circularprogress.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(circularprogress.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(circularprogress, detaching);
    }
  };
}
function create_default_slot_13(ctx) {
  let t2;
  return {
    c() {
      t2 = text("save");
    },
    l(nodes) {
      t2 = claim_text(nodes, "save");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_12(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Save");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Save");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_11(ctx) {
  let t0;
  let icon;
  let t1;
  let label;
  let current;
  let if_block = (
    /*savingDashboard*/
    ctx[11] && create_if_block_4()
  );
  icon = new CommonIcon({
    props: {
      class: "material-icons",
      $$slots: { default: [create_default_slot_13] },
      $$scope: { ctx }
    }
  });
  label = new CommonLabel({
    props: {
      $$slots: { default: [create_default_slot_12] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      if (if_block)
        if_block.c();
      t0 = space();
      create_component(icon.$$.fragment);
      t1 = space();
      create_component(label.$$.fragment);
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t0 = claim_space(nodes);
      claim_component(icon.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(label.$$.fragment, nodes);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(icon, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*savingDashboard*/
        ctx2[11]
      ) {
        if (if_block) {
          if (dirty[0] & /*savingDashboard*/
          2048) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_4();
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t0.parentNode, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const icon_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        icon_changes.$$scope = { dirty, ctx: ctx2 };
      }
      icon.$set(icon_changes);
      const label_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      label.$set(label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(icon.$$.fragment, local);
      transition_in(label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(icon.$$.fragment, local);
      transition_out(label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      if (if_block)
        if_block.d(detaching);
      destroy_component(icon, detaching);
      destroy_component(label, detaching);
    }
  };
}
function create_default_slot_10(ctx) {
  let t2;
  return {
    c() {
      t2 = text("cancel");
    },
    l(nodes) {
      t2 = claim_text(nodes, "cancel");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_9(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Cancel");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Cancel");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_8(ctx) {
  let icon;
  let t2;
  let label;
  let current;
  icon = new CommonIcon({
    props: {
      class: "material-icons",
      $$slots: { default: [create_default_slot_10] },
      $$scope: { ctx }
    }
  });
  label = new CommonLabel({
    props: {
      $$slots: { default: [create_default_slot_9] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
      t2 = space();
      create_component(label.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        icon_changes.$$scope = { dirty, ctx: ctx2 };
      }
      icon.$set(icon_changes);
      const label_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      label.$set(label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      transition_in(label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      transition_out(label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(icon, detaching);
      destroy_component(label, detaching);
    }
  };
}
function create_if_block_3(ctx) {
  let div1;
  let div0;
  let t0;
  let button;
  let t1;
  let confirmdialog;
  let updating_open;
  let current;
  button = new Button({
    props: {
      color: "secondary",
      $$slots: { default: [create_default_slot_5] },
      $$scope: { ctx }
    }
  });
  button.$on(
    "click",
    /*click_handler_4*/
    ctx[37]
  );
  function confirmdialog_open_binding(value) {
    ctx[38](value);
  }
  let confirmdialog_props = {
    text: "Are you sure you want to delete this dashboard?"
  };
  if (
    /*deleteDashboardOpen*/
    ctx[9] !== void 0
  ) {
    confirmdialog_props.open = /*deleteDashboardOpen*/
    ctx[9];
  }
  confirmdialog = new ConfirmDialog({ props: confirmdialog_props });
  binding_callbacks.push(() => bind(confirmdialog, "open", confirmdialog_open_binding));
  confirmdialog.$on(
    "confirm",
    /*confirm_handler*/
    ctx[39]
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      create_component(button.$$.fragment);
      t1 = space();
      create_component(confirmdialog.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", {});
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      children(div0).forEach(detach);
      t0 = claim_space(div1_nodes);
      claim_component(button.$$.fragment, div1_nodes);
      t1 = claim_space(div1_nodes);
      claim_component(confirmdialog.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "toolbar-spacer svelte-3bg1v");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      append_hydration(div1, t0);
      mount_component(button, div1, null);
      append_hydration(div1, t1);
      mount_component(confirmdialog, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      const button_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
      const confirmdialog_changes = {};
      if (!updating_open && dirty[0] & /*deleteDashboardOpen*/
      512) {
        updating_open = true;
        confirmdialog_changes.open = /*deleteDashboardOpen*/
        ctx2[9];
        add_flush_callback(() => updating_open = false);
      }
      confirmdialog.$set(confirmdialog_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      transition_in(confirmdialog.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      transition_out(confirmdialog.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(button);
      destroy_component(confirmdialog);
    }
  };
}
function create_default_slot_7(ctx) {
  let t2;
  return {
    c() {
      t2 = text("delete");
    },
    l(nodes) {
      t2 = claim_text(nodes, "delete");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_6(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Delete dashboard");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Delete dashboard");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_5(ctx) {
  let icon;
  let t2;
  let label;
  let current;
  icon = new CommonIcon({
    props: {
      class: "material-icons",
      $$slots: { default: [create_default_slot_7] },
      $$scope: { ctx }
    }
  });
  label = new CommonLabel({
    props: {
      $$slots: { default: [create_default_slot_6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
      t2 = space();
      create_component(label.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        icon_changes.$$scope = { dirty, ctx: ctx2 };
      }
      icon.$set(icon_changes);
      const label_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      label.$set(label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      transition_in(label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      transition_out(label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(icon, detaching);
      destroy_component(label, detaching);
    }
  };
}
function create_default_slot_4(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  var switch_value = findWidget(
    /*dataItem*/
    ctx[61].settings.type
  );
  function switch_props(ctx2) {
    return {
      props: { settings: (
        /*dataItem*/
        ctx2[61].settings
      ) }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
  }
  return {
    c() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const switch_instance_changes = {};
      if (dirty[1] & /*dataItem*/
      1073741824)
        switch_instance_changes.settings = /*dataItem*/
        ctx2[61].settings;
      if (dirty[1] & /*dataItem*/
      1073741824 && switch_value !== (switch_value = findWidget(
        /*dataItem*/
        ctx2[61].settings.type
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(switch_instance_anchor);
      }
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function create_default_slot_3(ctx) {
  let widgetcontainer;
  let current;
  function fixed_handler(...args) {
    return (
      /*fixed_handler*/
      ctx[40](
        /*dataItem*/
        ctx[61],
        ...args
      )
    );
  }
  function edit_handler() {
    return (
      /*edit_handler*/
      ctx[41](
        /*dataItem*/
        ctx[61]
      )
    );
  }
  function delete_handler() {
    return (
      /*delete_handler*/
      ctx[42](
        /*dataItem*/
        ctx[61]
      )
    );
  }
  function click_handler_5() {
    return (
      /*click_handler_5*/
      ctx[43](
        /*dataItem*/
        ctx[61]
      )
    );
  }
  widgetcontainer = new WidgetContainer({
    props: {
      fixed: (
        /*item*/
        ctx[60].fixed ?? false
      ),
      $$slots: { default: [create_default_slot_4] },
      $$scope: { ctx }
    }
  });
  widgetcontainer.$on("fixed", fixed_handler);
  widgetcontainer.$on("edit", edit_handler);
  widgetcontainer.$on("delete", delete_handler);
  widgetcontainer.$on("click", click_handler_5);
  return {
    c() {
      create_component(widgetcontainer.$$.fragment);
    },
    l(nodes) {
      claim_component(widgetcontainer.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widgetcontainer, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const widgetcontainer_changes = {};
      if (dirty[1] & /*item*/
      536870912)
        widgetcontainer_changes.fixed = /*item*/
        ctx[60].fixed ?? false;
      if (dirty[1] & /*dataItem*/
      1073741824 | dirty[2] & /*$$scope*/
      8) {
        widgetcontainer_changes.$$scope = { dirty, ctx };
      }
      widgetcontainer.$set(widgetcontainer_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widgetcontainer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widgetcontainer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widgetcontainer, detaching);
    }
  };
}
function create_default_slot_2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("close");
    },
    l(nodes) {
      t2 = claim_text(nodes, "close");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_1(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  var switch_value = (
    /*viewComponent*/
    ctx[5]
  );
  function switch_props(ctx2) {
    return {
      props: { settings: (
        /*viewItem*/
        ctx2[4].settings
      ) }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
  }
  return {
    c() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const switch_instance_changes = {};
      if (dirty[0] & /*viewItem*/
      16)
        switch_instance_changes.settings = /*viewItem*/
        ctx2[4].settings;
      if (dirty[0] & /*viewComponent*/
      32 && switch_value !== (switch_value = /*viewComponent*/
      ctx2[5])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(switch_instance_anchor);
      }
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function create_default_slot_1(ctx) {
  let div;
  let iconbutton;
  let t2;
  let current;
  iconbutton = new IconButton({
    props: {
      style: "position: absolute; top: 0px; right: 0px;",
      action: "close",
      class: "material-icons",
      $$slots: { default: [create_default_slot_2] },
      $$scope: { ctx }
    }
  });
  let if_block = (
    /*viewItem*/
    ctx[4] !== void 0 && /*viewComponent*/
    ctx[5] !== void 0 && create_if_block_1(ctx)
  );
  return {
    c() {
      div = element("div");
      create_component(iconbutton.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { style: true });
      var div_nodes = children(div);
      claim_component(iconbutton.$$.fragment, div_nodes);
      t2 = claim_space(div_nodes);
      if (if_block)
        if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_style(div, "position", "relative");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(iconbutton, div, null);
      append_hydration(div, t2);
      if (if_block)
        if_block.m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const iconbutton_changes = {};
      if (dirty[2] & /*$$scope*/
      8) {
        iconbutton_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbutton.$set(iconbutton_changes);
      if (
        /*viewItem*/
        ctx2[4] !== void 0 && /*viewComponent*/
        ctx2[5] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*viewItem, viewComponent*/
          48) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(iconbutton);
      if (if_block)
        if_block.d();
    }
  };
}
function create_default_slot(ctx) {
  let div;
  let t0;
  let grid_1;
  let updating_items;
  let t1;
  let dialog;
  let updating_open;
  let t2;
  let addwidgetdialog;
  let updating_open_1;
  let current;
  let if_block = (
    /*$editing*/
    ctx[1] && create_if_block_2(ctx)
  );
  function grid_1_items_binding(value) {
    ctx[44](value);
  }
  let grid_1_props = {
    fastStart: true,
    cols: (
      /*breakpointColumns*/
      ctx[0]
    ),
    gap: (
      /*$grid*/
      ctx[13].gaps
    ),
    rowHeight: 50,
    $$slots: {
      default: [
        create_default_slot_3,
        ({ item, dataItem }) => ({ 60: item, 61: dataItem }),
        ({ item, dataItem }) => [0, (item ? 536870912 : 0) | (dataItem ? 1073741824 : 0)]
      ]
    },
    $$scope: { ctx }
  };
  if (
    /*items*/
    ctx[2] !== void 0
  ) {
    grid_1_props.items = /*items*/
    ctx[2];
  }
  grid_1 = new Grid({ props: grid_1_props });
  binding_callbacks.push(() => bind(grid_1, "items", grid_1_items_binding));
  grid_1.$on(
    "mount",
    /*mount_handler*/
    ctx[45]
  );
  grid_1.$on(
    "resize",
    /*resize_handler*/
    ctx[46]
  );
  function dialog_open_binding(value) {
    ctx[47](value);
  }
  let dialog_props = {
    fullscreen: true,
    sheet: true,
    noContentPadding: true,
    $$slots: { default: [create_default_slot_1] },
    $$scope: { ctx }
  };
  if (
    /*viewOpen*/
    ctx[3] !== void 0
  ) {
    dialog_props.open = /*viewOpen*/
    ctx[3];
  }
  dialog = new Dialog({ props: dialog_props });
  binding_callbacks.push(() => bind(dialog, "open", dialog_open_binding));
  function addwidgetdialog_open_binding(value) {
    ctx[48](value);
  }
  let addwidgetdialog_props = {};
  if (
    /*addWidgetOpen*/
    ctx[8] !== void 0
  ) {
    addwidgetdialog_props.open = /*addWidgetOpen*/
    ctx[8];
  }
  addwidgetdialog = new AddWidgetDialog({ props: addwidgetdialog_props });
  binding_callbacks.push(() => bind(addwidgetdialog, "open", addwidgetdialog_open_binding));
  addwidgetdialog.$on(
    "selected",
    /*selected_handler*/
    ctx[49]
  );
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      t0 = space();
      create_component(grid_1.$$.fragment);
      t1 = space();
      create_component(dialog.$$.fragment);
      t2 = space();
      create_component(addwidgetdialog.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (if_block)
        if_block.l(div_nodes);
      div_nodes.forEach(detach);
      t0 = claim_space(nodes);
      claim_component(grid_1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(dialog.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(addwidgetdialog.$$.fragment, nodes);
      this.h();
    },
    h() {
      attr(div, "class", "align-center overflow-wrap svelte-3bg1v");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      insert_hydration(target, t0, anchor);
      mount_component(grid_1, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(dialog, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(addwidgetdialog, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$editing*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*$editing*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const grid_1_changes = {};
      if (dirty[0] & /*$grid*/
      8192)
        grid_1_changes.gap = /*$grid*/
        ctx2[13].gaps;
      if (dirty[1] & /*item, dataItem*/
      1610612736 | dirty[2] & /*$$scope*/
      8) {
        grid_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_items && dirty[0] & /*items*/
      4) {
        updating_items = true;
        grid_1_changes.items = /*items*/
        ctx2[2];
        add_flush_callback(() => updating_items = false);
      }
      grid_1.$set(grid_1_changes);
      const dialog_changes = {};
      if (dirty[0] & /*viewComponent, viewItem*/
      48 | dirty[2] & /*$$scope*/
      8) {
        dialog_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_open && dirty[0] & /*viewOpen*/
      8) {
        updating_open = true;
        dialog_changes.open = /*viewOpen*/
        ctx2[3];
        add_flush_callback(() => updating_open = false);
      }
      dialog.$set(dialog_changes);
      const addwidgetdialog_changes = {};
      if (!updating_open_1 && dirty[0] & /*addWidgetOpen*/
      256) {
        updating_open_1 = true;
        addwidgetdialog_changes.open = /*addWidgetOpen*/
        ctx2[8];
        add_flush_callback(() => updating_open_1 = false);
      }
      addwidgetdialog.$set(addwidgetdialog_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(grid_1.$$.fragment, local);
      transition_in(dialog.$$.fragment, local);
      transition_in(addwidgetdialog.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(grid_1.$$.fragment, local);
      transition_out(dialog.$$.fragment, local);
      transition_out(addwidgetdialog.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t0);
        detach(t1);
        detach(t2);
      }
      if (if_block)
        if_block.d();
      destroy_component(grid_1, detaching);
      destroy_component(dialog, detaching);
      destroy_component(addwidgetdialog, detaching);
    }
  };
}
function create_fragment(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*$homey*/
    ctx[12] !== void 0 && create_if_block(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$homey*/
        ctx2[12] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*$homey*/
          4096) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
const smallBreakpoint = 640;
const mediumBreakpoint = 768;
const largeBreakpoint = 1024;
const xlargeBreakpoint = 1280;
const smallColumns = 6;
const mediumColumns = 12;
const largeColumns = 18;
const xlargeColumns = 24;
function instance($$self, $$props, $$invalidate) {
  let dashboards$2;
  let dashboardId;
  let resolvedDashboard;
  let $homey;
  let $scopes;
  let $devices;
  let $editing;
  let $page;
  let $localDashboards;
  let $homeyDashboards;
  let $grid;
  component_subscribe($$self, homey, ($$value) => $$invalidate(12, $homey = $$value));
  component_subscribe($$self, scopes, ($$value) => $$invalidate(51, $scopes = $$value));
  component_subscribe($$self, devices, ($$value) => $$invalidate(52, $devices = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(1, $editing = $$value));
  component_subscribe($$self, page, ($$value) => $$invalidate(28, $page = $$value));
  component_subscribe($$self, dashboards, ($$value) => $$invalidate(29, $localDashboards = $$value));
  component_subscribe($$self, dashboards$1, ($$value) => $$invalidate(30, $homeyDashboards = $$value));
  component_subscribe($$self, grid, ($$value) => $$invalidate(13, $grid = $$value));
  const breakpoints = [smallBreakpoint, mediumBreakpoint, largeBreakpoint, xlargeBreakpoint];
  const columns = [smallColumns, mediumColumns, largeColumns, xlargeColumns];
  const breakpointColumns = [
    [smallBreakpoint, smallColumns],
    [mediumBreakpoint, mediumColumns],
    [largeBreakpoint, largeColumns],
    [xlargeBreakpoint, xlargeColumns]
  ];
  let items = [];
  let viewOpen = false;
  let viewItem;
  let viewComponent;
  let editOpen = false;
  let editItem;
  let addWidgetOpen = false;
  let deleteDashboardOpen = false;
  let dashboard$1;
  let savingDashboard = false;
  let heartbeat;
  onMount(() => {
    heartbeat = setInterval(() => sendHeartbeat(), 30 * 1e3);
  });
  onDestroy(() => {
    if (heartbeat !== void 0) {
      clearInterval(heartbeat);
    }
  });
  function onDashboard(d3) {
    if (d3 !== void 0 && !$editing && d3.items !== items) {
      dashboard.set(d3);
      $$invalidate(10, dashboard$1 = d3);
      $$invalidate(2, items = migrateWidgets(d3.items));
    }
  }
  function onEditing(edit) {
    const result = [...items];
    result.forEach((item) => {
      columns.forEach((column) => {
        item[column].draggable = edit;
        item[column].resizable = edit;
      });
    });
    $$invalidate(2, items = result);
  }
  function migrateWidgets(i2) {
    const result = [];
    let changes = false;
    for (let item of i2) {
      const migration = findMigration(item.settings.type);
      const migrated = migration !== void 0 ? migration(item.settings) : item.settings;
      if (migrated !== item.settings) {
        changes = true;
      }
      result.push({ ...item, settings: migrated });
    }
    if (changes) {
      return result;
    }
    return i2;
  }
  function addWidget(type) {
    if (type === void 0) {
      return;
    }
    const create2 = findCreate(type);
    if (create2 !== void 0) {
      const settings = create2();
      const item = { id: settings == null ? void 0 : settings.id, settings };
      $$invalidate(7, editItem = addItem(item));
      $$invalidate(6, editOpen = true);
    }
  }
  function editWidget(item) {
    $$invalidate(7, editItem = item);
    $$invalidate(6, editOpen = true);
  }
  function saveWidget(settings) {
    $$invalidate(6, editOpen = false);
    setItemSettings(editItem.id, settings);
  }
  function openView(item) {
    if ($editing) {
      return;
    }
    $$invalidate(4, viewItem = item);
    $$invalidate(5, viewComponent = findView(viewItem.settings.type));
    if (viewItem !== void 0 && viewComponent !== void 0) {
      $$invalidate(3, viewOpen = true);
    }
  }
  function addItem(item) {
    const result = [...items, item];
    columns.forEach((column) => {
      item[column] = gridHelp.item({
        x: 0,
        y: 0,
        w: 3,
        h: 3,
        resizable: true,
        draggable: true
      });
      const findOutPosition = gridHelp.findSpace(item, result, column);
      item[column] = { ...item[column], ...findOutPosition };
    });
    $$invalidate(2, items = result);
    return item;
  }
  function removeItem(id) {
    $$invalidate(2, items = items.filter((item) => item.id !== id));
  }
  function setItemFixed(id, fixed) {
    const result = [...items];
    const item = result.find((i2) => i2.id === id);
    if (item) {
      columns.forEach((column) => {
        item[column].fixed = fixed;
        item[column].draggable = !fixed;
        item[column].resizable = !fixed;
      });
    }
    $$invalidate(2, items = result);
  }
  function setItemSettings(id, settings) {
    const result = [...items];
    const item = result.find((i2) => i2.id === id);
    if (item) {
      item.settings = settings;
    }
    $$invalidate(2, items = result);
  }
  async function saveDashboard() {
    if (dashboard$1 === void 0) {
      editing.set(false);
      return;
    } else {
      $$invalidate(11, savingDashboard = true);
      $$invalidate(10, dashboard$1.items = items, dashboard$1);
      if (dashboard$1.source === "localstorage") {
        const d3 = { ...dashboard$1, items: stripGrid(items) };
        dashboards.update(d3);
      } else if (dashboard$1.source === "homey") {
        const settings = { items: stripGrid(items) };
        let success = false;
        const dashboardDevice = Object.values($devices).find((device) => device.data.id === dashboard$1.id);
        if (dashboardDevice !== void 0) {
          dashboardDevice.settings = settings;
        }
        try {
          const url = webhookUrl + webhookId + "?homey=" + $homey.id + "&operation=save_dashboard&dashboardId=" + dashboard$1.id;
          const response = await fetch(url, {
            method: "POST",
            body: JSON.stringify(settings)
          });
          if (response.ok) {
            success = true;
          }
        } catch (e2) {
        }
        if (!success) {
          if ($scopes.includes("homey") || $scopes.includes("homey.app")) {
            try {
              const app = await $homey.apps.getApp({ id: "skogsaas.dashboards" });
              if (app !== void 0) {
                await app.put({
                  path: "/dashboards/" + dashboard$1.id,
                  body: settings
                });
                success = true;
              }
            } catch (e2) {
            }
          }
        }
      }
    }
    $$invalidate(11, savingDashboard = false);
    editing.set(false);
  }
  function cancelDashboard() {
    if (dashboard$1 === void 0) {
      return;
    }
    $$invalidate(2, items = migrateWidgets(dashboard$1.items ?? []));
    editing.set(false);
  }
  async function deleteDashboard() {
    if (dashboard$1 === void 0) {
      return;
    }
    dashboards.delete(dashboard$1);
    editing.set(false);
    await goto(base + "/");
  }
  function stripGrid(i2) {
    const result = [...i2];
    result.forEach((item) => {
      columns.forEach((column) => {
        delete item[column].draggable;
        delete item[column].resizable;
        delete item[column].customDragger;
        delete item[column].customResizer;
      });
    });
    return result;
  }
  async function sendHeartbeat() {
    let success = false;
    try {
      let url = webhookUrl + webhookId + "?homey=" + $homey.id + "&operation=active_dashboard";
      if (dashboard$1 !== void 0) {
        url += "&dashboardId=" + dashboard$1.id;
      }
      const response = await fetch(url, { method: "POST", body: "" });
      if (response.ok) {
        success = true;
      }
    } catch (e2) {
    }
  }
  const settings_handler = (e2) => saveWidget(e2.detail);
  function drawer_open_binding(value) {
    editOpen = value;
    $$invalidate(6, editOpen);
  }
  const click_handler = (widget) => addWidget(widget.type);
  const click_handler_1 = () => $$invalidate(8, addWidgetOpen = true);
  const click_handler_2 = () => saveDashboard();
  const click_handler_3 = () => cancelDashboard();
  const click_handler_4 = () => $$invalidate(9, deleteDashboardOpen = true);
  function confirmdialog_open_binding(value) {
    deleteDashboardOpen = value;
    $$invalidate(9, deleteDashboardOpen);
  }
  const confirm_handler = async () => deleteDashboard();
  const fixed_handler = (dataItem, e2) => setItemFixed(dataItem.id, e2.detail);
  const edit_handler = (dataItem) => editWidget(dataItem);
  const delete_handler = (dataItem) => removeItem(dataItem.id);
  const click_handler_5 = (dataItem) => openView(dataItem);
  function grid_1_items_binding(value) {
    items = value;
    $$invalidate(2, items);
  }
  const mount_handler = (e2) => grid.updateSize(e2.detail);
  const resize_handler = (e2) => grid.updateSize(e2.detail);
  function dialog_open_binding(value) {
    viewOpen = value;
    $$invalidate(3, viewOpen);
  }
  function addwidgetdialog_open_binding(value) {
    addWidgetOpen = value;
    $$invalidate(8, addWidgetOpen);
  }
  const selected_handler = (e2) => addWidget(e2.detail);
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*$homeyDashboards, $localDashboards*/
    1610612736) {
      $$invalidate(27, dashboards$2 = { ...$homeyDashboards, ...$localDashboards });
    }
    if ($$self.$$.dirty[0] & /*$page*/
    268435456) {
      $$invalidate(26, dashboardId = $page.url.searchParams.get("id"));
    }
    if ($$self.$$.dirty[0] & /*dashboardId, dashboards*/
    201326592) {
      $$invalidate(25, resolvedDashboard = dashboardId !== null ? dashboards$2[dashboardId] : void 0);
    }
    if ($$self.$$.dirty[0] & /*resolvedDashboard*/
    33554432) {
      onDashboard(resolvedDashboard);
    }
    if ($$self.$$.dirty[0] & /*$editing*/
    2) {
      onEditing($editing);
    }
  };
  return [
    breakpointColumns,
    $editing,
    items,
    viewOpen,
    viewItem,
    viewComponent,
    editOpen,
    editItem,
    addWidgetOpen,
    deleteDashboardOpen,
    dashboard$1,
    savingDashboard,
    $homey,
    $grid,
    addWidget,
    editWidget,
    saveWidget,
    openView,
    removeItem,
    setItemFixed,
    saveDashboard,
    cancelDashboard,
    deleteDashboard,
    breakpoints,
    columns,
    resolvedDashboard,
    dashboardId,
    dashboards$2,
    $page,
    $localDashboards,
    $homeyDashboards,
    settings_handler,
    drawer_open_binding,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    click_handler_4,
    confirmdialog_open_binding,
    confirm_handler,
    fixed_handler,
    edit_handler,
    delete_handler,
    click_handler_5,
    grid_1_items_binding,
    mount_handler,
    resize_handler,
    dialog_open_binding,
    addwidgetdialog_open_binding,
    selected_handler
  ];
}
class Page extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        breakpoints: 23,
        columns: 24,
        breakpointColumns: 0
      },
      null,
      [-1, -1, -1]
    );
  }
  get breakpoints() {
    return this.$$.ctx[23];
  }
  get columns() {
    return this.$$.ctx[24];
  }
  get breakpointColumns() {
    return this.$$.ctx[0];
  }
}
export {
  Page as component
};
