var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var _a, _b;
import { w as webhookUrl, p as webhookId, d as devices, h as homey, q as scopes, n as v4, t as templates, j as dashboards$1, z as zones, f as flowFolders, a as advancedFlows, b as basicFlows, i as insights, v as variables, g as baseUrl, o as stores } from "./v4.eedf8624.js";
import { s as safe_not_equal, f as element, g as claim_element, h as children, d as detach, k as set_style, O as set_custom_element_data, P as add_render_callback, i as insert_hydration, w as append_hydration, Q as add_iframe_resize_listener, r as listen, o as onMount, y as create_slot, a as space, c as claim_space, z as update_slot_base, A as get_all_dirty_from_scope, B as get_slot_changes, t as tick, p as binding_callbacks, l as text, m as claim_text, j as attr, J as set_input_value, n as set_data, D as run_all, u as component_subscribe, L as createEventDispatcher, x as noop$1, e as empty, E as src_url_equal, K as add_flush_callback, R as toggle_class, S as bubble, F as stop_propagation, q as construct_svelte_component, T as action_destroyer, U as is_function, v as get_svelte_dataset, N as select_option, C as destroy_each, V as select_value, M as init_binding_group, W as onDestroy, X as to_number, Y as current_component, Z as assign$1, _ as set_attributes, b as afterUpdate, $ as exclude_internal_props, a0 as prevent_default } from "./scheduler.a7fc7cea.js";
import { S as SvelteComponent, i as init, g as group_outros, c as check_outros, a as transition_in, t as transition_out, b as create_component, d as claim_component, m as mount_component, e as destroy_component, f as bind } from "./index.20c35f04.js";
import { e as ensure_array_like, q as update_keyed_each, r as outro_and_destroy_block, h as handle_promise, I as Icon, s as mdiClose, u as update_await_block_branch, t as mdiMagnify, v as lookup, i as getIcon, w as mdiMinus, x as mdiAlert, y as mdiTune, z as mdiCursorMove, A as mdiCreditCard, m as mdiViewDashboard, B as mdiMeterElectric, C as mdiFolder, D as mdiPlay, E as mdiDatabaseSearchOutline, d as mdiMenu, o as mdiInformation, p as mdiTrashCan, F as mdiCardMultiple, G as mdiPlus, H as mdiGrid, J as mdiImageFrame, K as mdiImage, L as mdiChartLine, M as mdiDelete, N as mdiTableColumn, O as mdiViewColumnOutline, P as mdiArrowLeft, Q as mdiEye, R as mdiArrowLeftRight, S as mdiVariable, T as mdiArrowDecision, a as mdiPostageStamp, U as mdiTextBoxEdit, V as mdiToggleSwitch, W as mdiHeadQuestion, X as mdiContentSave, Y as mdiApplication, Z as mdiHelp, _ as mdiPencil, $ as mdiFloppy, a0 as mdiWidgets, a1 as mdiDatabase } from "./utils.3c8237ea.js";
import { e as editing } from "./editing.0bdfa4bc.js";
import { d as dashboards } from "./localstorage.379dfb0c.js";
import { e as base, j as derived, w as writable } from "./singletons.e168a4d6.js";
import { a as alerts } from "./alerting.6c127aa6.js";
async function saveDashboard(homeyId, storeId, dashboard) {
  try {
    const url = webhookUrl + webhookId + "?homey=" + homeyId + "&operation=save_dashboard&storeId=" + storeId + "&dashboardId=" + dashboard.id;
    const request = { method: "POST", body: JSON.stringify(dashboard) };
    const response = await fetch(url, request);
    if (response.ok) {
      return true;
    }
  } catch (e2) {
  }
  return false;
}
async function deleteDashboard(homeyId, storeId, dashboard) {
  try {
    const url = webhookUrl + webhookId + "?homey=" + homeyId + "&operation=delete_dashboard&storeId=" + storeId + "&dashboardId=" + dashboard.id;
    const request = { method: "POST" };
    const response = await fetch(url, request);
    if (response.ok) {
      return true;
    }
  } catch (e2) {
  }
  return false;
}
async function saveTemplate(homeyId, storeId, template) {
  try {
    const url = webhookUrl + webhookId + "?homey=" + homeyId + "&operation=save_template&storeId=" + storeId + "&templateId=" + template.id;
    const request = { method: "POST", body: JSON.stringify(template) };
    const response = await fetch(url, request);
    if (response.ok) {
      return true;
    }
  } catch (e2) {
  }
  return false;
}
const VirtualList_svelte_svelte_type_style_lang = "";
function get_each_context$l(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[22] = list[i2];
  return child_ctx;
}
const get_default_slot_changes$2 = (dirty) => ({ item: dirty & /*visible*/
16 });
const get_default_slot_context$2 = (ctx) => ({ item: (
  /*row*/
  ctx[22].data
) });
function fallback_block(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Missing template");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Missing template");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block$l(key_1, ctx) {
  let svelte_virtual_list_row;
  let t2;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[14].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[13],
    get_default_slot_context$2
  );
  const default_slot_or_fallback = default_slot || fallback_block();
  return {
    key: key_1,
    first: null,
    c() {
      svelte_virtual_list_row = element("svelte-virtual-list-row");
      if (default_slot_or_fallback)
        default_slot_or_fallback.c();
      t2 = space();
      this.h();
    },
    l(nodes) {
      svelte_virtual_list_row = claim_element(nodes, "SVELTE-VIRTUAL-LIST-ROW", { class: true });
      var svelte_virtual_list_row_nodes = children(svelte_virtual_list_row);
      if (default_slot_or_fallback)
        default_slot_or_fallback.l(svelte_virtual_list_row_nodes);
      t2 = claim_space(svelte_virtual_list_row_nodes);
      svelte_virtual_list_row_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_custom_element_data(svelte_virtual_list_row, "class", "svelte-1tqh76q");
      this.first = svelte_virtual_list_row;
    },
    m(target, anchor) {
      insert_hydration(target, svelte_virtual_list_row, anchor);
      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(svelte_virtual_list_row, null);
      }
      append_hydration(svelte_virtual_list_row, t2);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, visible*/
        8208)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[13],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[13]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx[13],
              dirty,
              get_default_slot_changes$2
            ),
            get_default_slot_context$2
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot_or_fallback, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot_or_fallback, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(svelte_virtual_list_row);
      }
      if (default_slot_or_fallback)
        default_slot_or_fallback.d(detaching);
    }
  };
}
function create_fragment$1t(ctx) {
  let svelte_virtual_list_viewport;
  let svelte_virtual_list_contents;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let svelte_virtual_list_viewport_resize_listener;
  let current;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*visible*/
    ctx[4]
  );
  const get_key = (ctx2) => (
    /*row*/
    ctx2[22].index
  );
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$l(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$l(key, child_ctx));
  }
  return {
    c() {
      svelte_virtual_list_viewport = element("svelte-virtual-list-viewport");
      svelte_virtual_list_contents = element("svelte-virtual-list-contents");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      svelte_virtual_list_viewport = claim_element(nodes, "SVELTE-VIRTUAL-LIST-VIEWPORT", { style: true, class: true });
      var svelte_virtual_list_viewport_nodes = children(svelte_virtual_list_viewport);
      svelte_virtual_list_contents = claim_element(svelte_virtual_list_viewport_nodes, "SVELTE-VIRTUAL-LIST-CONTENTS", { style: true, class: true });
      var svelte_virtual_list_contents_nodes = children(svelte_virtual_list_contents);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(svelte_virtual_list_contents_nodes);
      }
      svelte_virtual_list_contents_nodes.forEach(detach);
      svelte_virtual_list_viewport_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_style(
        svelte_virtual_list_contents,
        "padding-top",
        /*top*/
        ctx[5] + "px"
      );
      set_style(
        svelte_virtual_list_contents,
        "padding-bottom",
        /*bottom*/
        ctx[6] + "px"
      );
      set_custom_element_data(svelte_virtual_list_contents, "class", "svelte-1tqh76q");
      set_style(
        svelte_virtual_list_viewport,
        "height",
        /*height*/
        ctx[0]
      );
      set_custom_element_data(svelte_virtual_list_viewport, "class", "svelte-1tqh76q");
      add_render_callback(() => (
        /*svelte_virtual_list_viewport_elementresize_handler*/
        ctx[17].call(svelte_virtual_list_viewport)
      ));
    },
    m(target, anchor) {
      insert_hydration(target, svelte_virtual_list_viewport, anchor);
      append_hydration(svelte_virtual_list_viewport, svelte_virtual_list_contents);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(svelte_virtual_list_contents, null);
        }
      }
      ctx[15](svelte_virtual_list_contents);
      ctx[16](svelte_virtual_list_viewport);
      svelte_virtual_list_viewport_resize_listener = add_iframe_resize_listener(
        svelte_virtual_list_viewport,
        /*svelte_virtual_list_viewport_elementresize_handler*/
        ctx[17].bind(svelte_virtual_list_viewport)
      );
      current = true;
      if (!mounted) {
        dispose = listen(
          svelte_virtual_list_viewport,
          "scroll",
          /*handle_scroll*/
          ctx[7]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*$$scope, visible*/
      8208) {
        each_value = ensure_array_like(
          /*visible*/
          ctx2[4]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, svelte_virtual_list_contents, outro_and_destroy_block, create_each_block$l, null, get_each_context$l);
        check_outros();
      }
      if (!current || dirty & /*top*/
      32) {
        set_style(
          svelte_virtual_list_contents,
          "padding-top",
          /*top*/
          ctx2[5] + "px"
        );
      }
      if (!current || dirty & /*bottom*/
      64) {
        set_style(
          svelte_virtual_list_contents,
          "padding-bottom",
          /*bottom*/
          ctx2[6] + "px"
        );
      }
      if (!current || dirty & /*height*/
      1) {
        set_style(
          svelte_virtual_list_viewport,
          "height",
          /*height*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(svelte_virtual_list_viewport);
      }
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d();
      }
      ctx[15](null);
      ctx[16](null);
      svelte_virtual_list_viewport_resize_listener();
      mounted = false;
      dispose();
    }
  };
}
function instance$1v($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { items } = $$props;
  let { height = "100%" } = $$props;
  let { itemHeight = void 0 } = $$props;
  let { start = 0 } = $$props;
  let { end = 0 } = $$props;
  let height_map = [];
  let rows;
  let viewport;
  let contents;
  let viewport_height = 0;
  let visible;
  let mounted;
  let top = 0;
  let bottom = 0;
  let average_height;
  async function refresh(items2, viewport_height2, itemHeight2) {
    const { scrollTop } = viewport;
    await tick();
    let content_height = top - scrollTop;
    let i2 = start;
    while (content_height < viewport_height2 && i2 < items2.length) {
      let row = rows[i2 - start];
      if (!row) {
        $$invalidate(9, end = i2 + 1);
        await tick();
        row = rows[i2 - start];
      }
      const row_height = height_map[i2] = itemHeight2 || row.offsetHeight;
      content_height += row_height;
      i2 += 1;
    }
    $$invalidate(9, end = i2);
    const remaining = items2.length - end;
    average_height = (top + content_height) / end;
    $$invalidate(6, bottom = remaining * average_height);
    height_map.length = items2.length;
  }
  async function handle_scroll() {
    const { scrollTop } = viewport;
    const old_start = start;
    for (let v = 0; v < rows.length; v += 1) {
      height_map[start + v] = itemHeight || rows[v].offsetHeight;
    }
    let i2 = 0;
    let y3 = 0;
    while (i2 < items.length) {
      const row_height = height_map[i2] || average_height;
      if (y3 + row_height > scrollTop) {
        $$invalidate(8, start = i2);
        $$invalidate(5, top = y3);
        break;
      }
      y3 += row_height;
      i2 += 1;
    }
    while (i2 < items.length) {
      y3 += height_map[i2] || average_height;
      i2 += 1;
      if (y3 > scrollTop + viewport_height)
        break;
    }
    $$invalidate(9, end = i2);
    const remaining = items.length - end;
    average_height = y3 / end;
    while (i2 < items.length)
      height_map[i2++] = average_height;
    $$invalidate(6, bottom = remaining * average_height);
    if (start < old_start) {
      await tick();
      let expected_height = 0;
      let actual_height = 0;
      for (let i3 = start; i3 < old_start; i3 += 1) {
        if (rows[i3 - start]) {
          expected_height += height_map[i3];
          actual_height += itemHeight || rows[i3 - start].offsetHeight;
        }
      }
      const d3 = actual_height - expected_height;
      viewport.scrollTo(0, scrollTop + d3);
    }
  }
  onMount(() => {
    rows = contents.getElementsByTagName("svelte-virtual-list-row");
    $$invalidate(12, mounted = true);
  });
  function svelte_virtual_list_contents_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      contents = $$value;
      $$invalidate(3, contents);
    });
  }
  function svelte_virtual_list_viewport_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      viewport = $$value;
      $$invalidate(2, viewport);
    });
  }
  function svelte_virtual_list_viewport_elementresize_handler() {
    viewport_height = this.offsetHeight;
    $$invalidate(1, viewport_height);
  }
  $$self.$$set = ($$props2) => {
    if ("items" in $$props2)
      $$invalidate(10, items = $$props2.items);
    if ("height" in $$props2)
      $$invalidate(0, height = $$props2.height);
    if ("itemHeight" in $$props2)
      $$invalidate(11, itemHeight = $$props2.itemHeight);
    if ("start" in $$props2)
      $$invalidate(8, start = $$props2.start);
    if ("end" in $$props2)
      $$invalidate(9, end = $$props2.end);
    if ("$$scope" in $$props2)
      $$invalidate(13, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*items, start, end*/
    1792) {
      $$invalidate(4, visible = items.slice(start, end).map((data, i2) => {
        return { index: i2 + start, data };
      }));
    }
    if ($$self.$$.dirty & /*mounted, items, viewport_height, itemHeight*/
    7170) {
      if (mounted)
        refresh(items, viewport_height, itemHeight);
    }
  };
  return [
    height,
    viewport_height,
    viewport,
    contents,
    visible,
    top,
    bottom,
    handle_scroll,
    start,
    end,
    items,
    itemHeight,
    mounted,
    $$scope,
    slots,
    svelte_virtual_list_contents_binding,
    svelte_virtual_list_viewport_binding,
    svelte_virtual_list_viewport_elementresize_handler
  ];
}
class VirtualList extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1v, create_fragment$1t, safe_not_equal, {
      items: 10,
      height: 0,
      itemHeight: 11,
      start: 8,
      end: 9
    });
  }
}
function create_catch_block_1$1(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d: noop$1
  };
}
function create_then_block_1$1(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_2$l, create_else_block$w];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    var _a2, _b2;
    if (
      /*selected*/
      ctx2[4] !== void 0 && /*selected*/
      ((_b2 = (_a2 = ctx2[4].capability) == null ? void 0 : _a2.iconObj) == null ? void 0 : _b2.url)
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$w(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMagnify } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_2$l(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
      this.h();
    },
    h() {
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[24] + /*selected*/
      ctx[4].capability.iconObj.url))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*selected*/
      ctx[4].capability.title);
      attr(img, "class", "h-6 w-6 mr-2 dark:invert inline");
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$homey, selected*/
      144 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[24] + /*selected*/
      ctx2[4].capability.iconObj.url)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*selected*/
      16 && img_alt_value !== (img_alt_value = /*selected*/
      ctx2[4].capability.title)) {
        attr(img, "alt", img_alt_value);
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block_1$1(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMagnify } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_1$x(ctx) {
  let span;
  let t_value = (
    /*selected*/
    ctx[4].title + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text-alt");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*selected*/
      16 && t_value !== (t_value = /*selected*/
      ctx2[4].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_catch_block$8(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block$8(ctx) {
  var _a2, _b2;
  let if_block_anchor;
  let if_block = (
    /*item*/
    ((_b2 = (_a2 = ctx[23].capability) == null ? void 0 : _a2.iconObj) == null ? void 0 : _b2.url) && create_if_block$Y(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      var _a3, _b3;
      if (
        /*item*/
        (_b3 = (_a3 = ctx2[23].capability) == null ? void 0 : _a3.iconObj) == null ? void 0 : _b3.url
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$Y(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block$Y(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
      this.h();
    },
    h() {
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[24] + /*item*/
      ctx[23].capability.iconObj.url))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*item*/
      ctx[23].capability.title);
      attr(img, "class", "h-6 w-6 mr-2 dark:invert inline");
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$homey, item*/
      8388736 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[24] + /*item*/
      ctx2[23].capability.iconObj.url)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*item*/
      8388608 && img_alt_value !== (img_alt_value = /*item*/
      ctx2[23].capability.title)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block$8(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_default_slot$g(ctx) {
  var _a2, _b2;
  let button;
  let h3;
  let promise;
  let t0;
  let t1_value = (
    /*item*/
    ctx[23].device.name + ""
  );
  let t1;
  let t2;
  let div0;
  let span0;
  let t3_value = (
    /*item*/
    ctx[23].capability.title + ""
  );
  let t3;
  let t4;
  let span1;
  let t5_value = (
    /*item*/
    ((_a2 = ctx[23].capability) == null ? void 0 : _a2.value) + ""
  );
  let t5;
  let t6;
  let t7_value = (
    /*item*/
    (((_b2 = ctx[23].capability) == null ? void 0 : _b2.units) ?? "") + ""
  );
  let t7;
  let t8;
  let div1;
  let mounted;
  let dispose;
  let info2 = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$8,
    then: create_then_block$8,
    catch: create_catch_block$8,
    value: 24
  };
  handle_promise(promise = /*$homey*/
  ctx[7].baseUrl, info2);
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[18](
        /*item*/
        ctx[23]
      )
    );
  }
  return {
    c() {
      button = element("button");
      h3 = element("h3");
      info2.block.c();
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      div0 = element("div");
      span0 = element("span");
      t3 = text(t3_value);
      t4 = space();
      span1 = element("span");
      t5 = text(t5_value);
      t6 = space();
      t7 = text(t7_value);
      t8 = space();
      div1 = element("div");
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      h3 = claim_element(button_nodes, "H3", { class: true });
      var h3_nodes = children(h3);
      info2.block.l(h3_nodes);
      t0 = claim_space(h3_nodes);
      t1 = claim_text(h3_nodes, t1_value);
      h3_nodes.forEach(detach);
      t2 = claim_space(button_nodes);
      div0 = claim_element(button_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", {});
      var span0_nodes = children(span0);
      t3 = claim_text(span0_nodes, t3_value);
      span0_nodes.forEach(detach);
      t4 = claim_space(div0_nodes);
      span1 = claim_element(div0_nodes, "SPAN", {});
      var span1_nodes = children(span1);
      t5 = claim_text(span1_nodes, t5_value);
      t6 = claim_space(span1_nodes);
      t7 = claim_text(span1_nodes, t7_value);
      span1_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      button_nodes.forEach(detach);
      t8 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      children(div1).forEach(detach);
      this.h();
    },
    h() {
      attr(h3, "class", "w-full flex justify-start");
      attr(div0, "class", "w-full flex justify-between");
      attr(button, "class", "btn btn-ghost w-full");
      attr(div1, "class", "divider divider-neutral my-1");
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, h3);
      info2.block.m(h3, info2.anchor = null);
      info2.mount = () => h3;
      info2.anchor = t0;
      append_hydration(h3, t0);
      append_hydration(h3, t1);
      append_hydration(button, t2);
      append_hydration(button, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t3);
      append_hydration(div0, t4);
      append_hydration(div0, span1);
      append_hydration(span1, t5);
      append_hydration(span1, t6);
      append_hydration(span1, t7);
      insert_hydration(target, t8, anchor);
      insert_hydration(target, div1, anchor);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      var _a3, _b3;
      ctx = new_ctx;
      info2.ctx = ctx;
      if (dirty & /*$homey*/
      128 && promise !== (promise = /*$homey*/
      ctx[7].baseUrl) && handle_promise(promise, info2))
        ;
      else {
        update_await_block_branch(info2, ctx, dirty);
      }
      if (dirty & /*item*/
      8388608 && t1_value !== (t1_value = /*item*/
      ctx[23].device.name + ""))
        set_data(t1, t1_value);
      if (dirty & /*item*/
      8388608 && t3_value !== (t3_value = /*item*/
      ctx[23].capability.title + ""))
        set_data(t3, t3_value);
      if (dirty & /*item*/
      8388608 && t5_value !== (t5_value = /*item*/
      ((_a3 = ctx[23].capability) == null ? void 0 : _a3.value) + ""))
        set_data(t5, t5_value);
      if (dirty & /*item*/
      8388608 && t7_value !== (t7_value = /*item*/
      (((_b3 = ctx[23].capability) == null ? void 0 : _b3.units) ?? "") + ""))
        set_data(t7, t7_value);
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t8);
        detach(div1);
      }
      info2.block.d();
      info2.token = null;
      info2 = null;
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$1s(ctx) {
  let label;
  let div0;
  let span0;
  let t0;
  let t1;
  let div1;
  let input0;
  let t2;
  let button0;
  let promise;
  let t3;
  let div2;
  let span1;
  let t4;
  let t5;
  let dialog;
  let div5;
  let div3;
  let form;
  let button1;
  let icon;
  let t6;
  let input1;
  let t7;
  let div4;
  let virtuallist;
  let current;
  let mounted;
  let dispose;
  let info2 = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block_1$1,
    then: create_then_block_1$1,
    catch: create_catch_block_1$1,
    value: 24,
    blocks: [, , ,]
  };
  handle_promise(promise = /*$homey*/
  ctx[7].baseUrl, info2);
  let if_block = (
    /*selected*/
    ctx[4] !== void 0 && create_if_block_1$x(ctx)
  );
  icon = new Icon({ props: { data: mdiClose } });
  virtuallist = new VirtualList({
    props: {
      items: (
        /*filtered*/
        ctx[6]
      ),
      height: "50vh",
      $$slots: {
        default: [
          create_default_slot$g,
          ({ item }) => ({ 23: item }),
          ({ item }) => item ? 8388608 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      label = element("label");
      div0 = element("div");
      span0 = element("span");
      t0 = text(
        /*name*/
        ctx[1]
      );
      t1 = space();
      div1 = element("div");
      input0 = element("input");
      t2 = space();
      button0 = element("button");
      info2.block.c();
      t3 = space();
      div2 = element("div");
      span1 = element("span");
      t4 = space();
      if (if_block)
        if_block.c();
      t5 = space();
      dialog = element("dialog");
      div5 = element("div");
      div3 = element("div");
      form = element("form");
      button1 = element("button");
      create_component(icon.$$.fragment);
      t6 = space();
      input1 = element("input");
      t7 = space();
      div4 = element("div");
      create_component(virtuallist.$$.fragment);
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div0 = claim_element(label_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t0 = claim_text(
        span0_nodes,
        /*name*/
        ctx[1]
      );
      span0_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t1 = claim_space(label_nodes);
      div1 = claim_element(label_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      input0 = claim_element(div1_nodes, "INPUT", {
        type: true,
        class: true,
        placeholder: true
      });
      t2 = claim_space(div1_nodes);
      button0 = claim_element(div1_nodes, "BUTTON", { class: true });
      var button0_nodes = children(button0);
      info2.block.l(button0_nodes);
      button0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t3 = claim_space(label_nodes);
      div2 = claim_element(label_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      span1 = claim_element(div2_nodes, "SPAN", { class: true });
      children(span1).forEach(detach);
      t4 = claim_space(div2_nodes);
      if (if_block)
        if_block.l(div2_nodes);
      div2_nodes.forEach(detach);
      label_nodes.forEach(detach);
      t5 = claim_space(nodes);
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div5 = claim_element(dialog_nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      div3 = claim_element(div5_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      form = claim_element(div3_nodes, "FORM", { method: true });
      var form_nodes = children(form);
      button1 = claim_element(form_nodes, "BUTTON", { class: true });
      var button1_nodes = children(button1);
      claim_component(icon.$$.fragment, button1_nodes);
      button1_nodes.forEach(detach);
      form_nodes.forEach(detach);
      t6 = claim_space(div3_nodes);
      input1 = claim_element(div3_nodes, "INPUT", {
        type: true,
        class: true,
        name: true,
        placeholder: true
      });
      div3_nodes.forEach(detach);
      t7 = claim_space(div5_nodes);
      div4 = claim_element(div5_nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      claim_component(virtuallist.$$.fragment, div4_nodes);
      div4_nodes.forEach(detach);
      div5_nodes.forEach(detach);
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span0, "class", "label-text");
      attr(div0, "class", "label");
      attr(input0, "type", "text");
      attr(input0, "class", "input input-bordered grow join-item");
      attr(
        input0,
        "placeholder",
        /*placeholder*/
        ctx[2]
      );
      attr(button0, "class", "btn btn-outline btn-primary join-item");
      attr(div1, "class", "join flex items-center");
      attr(span1, "class", "label-text");
      attr(div2, "class", "label whitespace-nowrap overflow-ellipsis");
      attr(label, "class", "form-control w-full");
      attr(button1, "class", "btn btn-sm btn-circle btn-ghost absolute right-2 top-2");
      attr(form, "method", "dialog");
      attr(input1, "type", "text");
      attr(input1, "class", "input w-full input-primary");
      attr(input1, "name", "search");
      attr(input1, "placeholder", "Search");
      attr(div3, "class", "flex-shrink-0 mb-2");
      attr(div4, "class", "flex-grow overflow-auto");
      attr(div5, "class", "modal-box flex flex-col");
      attr(dialog, "class", "modal");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t0);
      append_hydration(label, t1);
      append_hydration(label, div1);
      append_hydration(div1, input0);
      set_input_value(
        input0,
        /*capabilityUri*/
        ctx[0]
      );
      append_hydration(div1, t2);
      append_hydration(div1, button0);
      info2.block.m(button0, info2.anchor = null);
      info2.mount = () => button0;
      info2.anchor = null;
      append_hydration(label, t3);
      append_hydration(label, div2);
      append_hydration(div2, span1);
      append_hydration(div2, t4);
      if (if_block)
        if_block.m(div2, null);
      insert_hydration(target, t5, anchor);
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div5);
      append_hydration(div5, div3);
      append_hydration(div3, form);
      append_hydration(form, button1);
      mount_component(icon, button1, null);
      append_hydration(div3, t6);
      append_hydration(div3, input1);
      set_input_value(
        input1,
        /*search*/
        ctx[3]
      );
      append_hydration(div5, t7);
      append_hydration(div5, div4);
      mount_component(virtuallist, div4, null);
      ctx[19](dialog);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input0,
            "input",
            /*input0_input_handler*/
            ctx[15]
          ),
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[16]
          ),
          listen(
            input1,
            "input",
            /*input1_input_handler*/
            ctx[17]
          )
        ];
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (!current || dirty & /*name*/
      2)
        set_data(
          t0,
          /*name*/
          ctx[1]
        );
      if (!current || dirty & /*placeholder*/
      4) {
        attr(
          input0,
          "placeholder",
          /*placeholder*/
          ctx[2]
        );
      }
      if (dirty & /*capabilityUri*/
      1 && input0.value !== /*capabilityUri*/
      ctx[0]) {
        set_input_value(
          input0,
          /*capabilityUri*/
          ctx[0]
        );
      }
      info2.ctx = ctx;
      if (dirty & /*$homey*/
      128 && promise !== (promise = /*$homey*/
      ctx[7].baseUrl) && handle_promise(promise, info2))
        ;
      else {
        update_await_block_branch(info2, ctx, dirty);
      }
      if (
        /*selected*/
        ctx[4] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block_1$x(ctx);
          if_block.c();
          if_block.m(div2, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*search*/
      8 && input1.value !== /*search*/
      ctx[3]) {
        set_input_value(
          input1,
          /*search*/
          ctx[3]
        );
      }
      const virtuallist_changes = {};
      if (dirty & /*filtered*/
      64)
        virtuallist_changes.items = /*filtered*/
        ctx[6];
      if (dirty & /*$$scope, item, $homey*/
      41943168) {
        virtuallist_changes.$$scope = { dirty, ctx };
      }
      virtuallist.$set(virtuallist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(info2.block);
      transition_in(icon.$$.fragment, local);
      transition_in(virtuallist.$$.fragment, local);
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        const block = info2.blocks[i2];
        transition_out(block);
      }
      transition_out(icon.$$.fragment, local);
      transition_out(virtuallist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label);
        detach(t5);
        detach(dialog);
      }
      info2.block.d();
      info2.token = null;
      info2 = null;
      if (if_block)
        if_block.d();
      destroy_component(icon);
      destroy_component(virtuallist);
      ctx[19](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$1u($$self, $$props, $$invalidate) {
  let flatDevices;
  let flatCapabilities;
  let sorted;
  let $devices;
  let $homey;
  component_subscribe($$self, devices, ($$value) => $$invalidate(14, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(7, $homey = $$value));
  let { capabilityUri } = $$props;
  let { name = "Capability" } = $$props;
  let { placeholder = "Capability" } = $$props;
  let { deviceFilter = void 0 } = $$props;
  let { capabilityFilter: capabilityFilter2 = void 0 } = $$props;
  const dispatch = createEventDispatcher();
  let modal;
  let search = "";
  let filtered = [];
  let selected;
  function filterCapabilities(value, s3) {
    const normalized = value.toLowerCase();
    if (value.length > 0) {
      $$invalidate(6, filtered = sorted.filter((d3) => d3.search.includes(normalized)));
    } else {
      $$invalidate(6, filtered = sorted);
    }
  }
  function onItem(item) {
    $$invalidate(0, capabilityUri = item.uri);
    modal.close();
  }
  function onSelected(item) {
    dispatch("device", item == null ? void 0 : item.device);
    dispatch("capability", item == null ? void 0 : item.capability);
  }
  function input0_input_handler() {
    capabilityUri = this.value;
    $$invalidate(0, capabilityUri);
  }
  const click_handler = () => modal.showModal();
  function input1_input_handler() {
    search = this.value;
    $$invalidate(3, search);
  }
  const click_handler_1 = (item) => onItem(item);
  function dialog_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(5, modal);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("capabilityUri" in $$props2)
      $$invalidate(0, capabilityUri = $$props2.capabilityUri);
    if ("name" in $$props2)
      $$invalidate(1, name = $$props2.name);
    if ("placeholder" in $$props2)
      $$invalidate(2, placeholder = $$props2.placeholder);
    if ("deviceFilter" in $$props2)
      $$invalidate(9, deviceFilter = $$props2.deviceFilter);
    if ("capabilityFilter" in $$props2)
      $$invalidate(10, capabilityFilter2 = $$props2.capabilityFilter);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$devices, deviceFilter*/
    16896) {
      $$invalidate(13, flatDevices = Object.values($devices ?? {}).filter((device) => deviceFilter ? deviceFilter(device) : true));
    }
    if ($$self.$$.dirty & /*flatDevices, capabilityFilter*/
    9216) {
      $$invalidate(12, flatCapabilities = flatDevices.flatMap((device) => Object.values(device.capabilitiesObj ?? {}).filter((capability) => capabilityFilter2 ? capabilityFilter2(capability) : true).map((capability) => ({
        device,
        capability,
        uri: device.uri + ":" + capability.id,
        title: device.name + " - " + capability.title,
        search: (device.name + " " + capability.title).toLowerCase()
      }))));
    }
    if ($$self.$$.dirty & /*flatCapabilities*/
    4096) {
      $$invalidate(11, sorted = (flatCapabilities ?? []).sort((a3, b2) => {
        if (a3.title === b2.title)
          return 0;
        if (a3.title < b2.title)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*capabilityUri, flatCapabilities*/
    4097) {
      $$invalidate(4, selected = capabilityUri !== void 0 ? flatCapabilities.find((c2) => c2.uri === capabilityUri) ?? void 0 : void 0);
    }
    if ($$self.$$.dirty & /*search, sorted*/
    2056) {
      filterCapabilities(search);
    }
    if ($$self.$$.dirty & /*selected*/
    16) {
      onSelected(selected);
    }
    if ($$self.$$.dirty & /*capabilityUri*/
    1) {
      dispatch("capabilityUri", capabilityUri);
    }
  };
  return [
    capabilityUri,
    name,
    placeholder,
    search,
    selected,
    modal,
    filtered,
    $homey,
    onItem,
    deviceFilter,
    capabilityFilter2,
    sorted,
    flatCapabilities,
    flatDevices,
    $devices,
    input0_input_handler,
    click_handler,
    input1_input_handler,
    click_handler_1,
    dialog_binding
  ];
}
class CapabilityPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1u, create_fragment$1s, safe_not_equal, {
      capabilityUri: 0,
      name: 1,
      placeholder: 2,
      deviceFilter: 9,
      capabilityFilter: 10
    });
  }
}
function create_else_block$v(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMagnify } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block$X(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: { data: (
      /*selected*/
      ctx[3].icon
    ) }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*selected*/
      8)
        icon_changes.data = /*selected*/
        ctx2[3].icon;
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_default_slot$f(ctx) {
  let button;
  let h3;
  let icon;
  let t0;
  let div0;
  let span;
  let t1_value = (
    /*item*/
    ctx[16].id + ""
  );
  let t1;
  let t2;
  let div1;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: (
    /*item*/
    ctx[16].icon
  ) } });
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[10](
        /*item*/
        ctx[16]
      )
    );
  }
  return {
    c() {
      button = element("button");
      h3 = element("h3");
      create_component(icon.$$.fragment);
      t0 = space();
      div0 = element("div");
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      div1 = element("div");
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      h3 = claim_element(button_nodes, "H3", { class: true });
      var h3_nodes = children(h3);
      claim_component(icon.$$.fragment, h3_nodes);
      h3_nodes.forEach(detach);
      t0 = claim_space(button_nodes);
      div0 = claim_element(button_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span = claim_element(div0_nodes, "SPAN", {});
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      button_nodes.forEach(detach);
      t2 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      children(div1).forEach(detach);
      this.h();
    },
    h() {
      attr(h3, "class", "w-full flex justify-start");
      attr(div0, "class", "w-full flex justify-between");
      attr(button, "class", "btn btn-ghost w-full");
      attr(div1, "class", "divider divider-neutral my-1");
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, h3);
      mount_component(icon, h3, null);
      append_hydration(button, t0);
      append_hydration(button, div0);
      append_hydration(div0, span);
      append_hydration(span, t1);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, div1, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const icon_changes = {};
      if (dirty & /*item*/
      65536)
        icon_changes.data = /*item*/
        ctx[16].icon;
      icon.$set(icon_changes);
      if ((!current || dirty & /*item*/
      65536) && t1_value !== (t1_value = /*item*/
      ctx[16].id + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t2);
        detach(div1);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$1r(ctx) {
  let label;
  let div0;
  let span;
  let t0;
  let t1;
  let div1;
  let input0;
  let t2;
  let button0;
  let current_block_type_index;
  let if_block;
  let t3;
  let dialog;
  let div4;
  let div2;
  let form;
  let button1;
  let icon;
  let t4;
  let input1;
  let t5;
  let div3;
  let virtuallist;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block$X, create_else_block$v];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*selected*/
      ctx2[3] !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  icon = new Icon({ props: { data: mdiClose } });
  virtuallist = new VirtualList({
    props: {
      items: (
        /*filtered*/
        ctx[5]
      ),
      height: "50vh",
      $$slots: {
        default: [
          create_default_slot$f,
          ({ item }) => ({ 16: item }),
          ({ item }) => item ? 65536 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      label = element("label");
      div0 = element("div");
      span = element("span");
      t0 = text(
        /*name*/
        ctx[1]
      );
      t1 = space();
      div1 = element("div");
      input0 = element("input");
      t2 = space();
      button0 = element("button");
      if_block.c();
      t3 = space();
      dialog = element("dialog");
      div4 = element("div");
      div2 = element("div");
      form = element("form");
      button1 = element("button");
      create_component(icon.$$.fragment);
      t4 = space();
      input1 = element("input");
      t5 = space();
      div3 = element("div");
      create_component(virtuallist.$$.fragment);
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div0 = claim_element(label_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span = claim_element(div0_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(
        span_nodes,
        /*name*/
        ctx[1]
      );
      span_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t1 = claim_space(label_nodes);
      div1 = claim_element(label_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      input0 = claim_element(div1_nodes, "INPUT", {
        type: true,
        class: true,
        placeholder: true
      });
      t2 = claim_space(div1_nodes);
      button0 = claim_element(div1_nodes, "BUTTON", { class: true });
      var button0_nodes = children(button0);
      if_block.l(button0_nodes);
      button0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      label_nodes.forEach(detach);
      t3 = claim_space(nodes);
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div4 = claim_element(dialog_nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      div2 = claim_element(div4_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      form = claim_element(div2_nodes, "FORM", { method: true });
      var form_nodes = children(form);
      button1 = claim_element(form_nodes, "BUTTON", { class: true });
      var button1_nodes = children(button1);
      claim_component(icon.$$.fragment, button1_nodes);
      button1_nodes.forEach(detach);
      form_nodes.forEach(detach);
      t4 = claim_space(div2_nodes);
      input1 = claim_element(div2_nodes, "INPUT", {
        type: true,
        class: true,
        name: true,
        placeholder: true
      });
      div2_nodes.forEach(detach);
      t5 = claim_space(div4_nodes);
      div3 = claim_element(div4_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      claim_component(virtuallist.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      div4_nodes.forEach(detach);
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text");
      attr(div0, "class", "label");
      attr(input0, "type", "text");
      attr(input0, "class", "input input-bordered grow join-item");
      attr(input0, "placeholder", "Icon");
      attr(button0, "class", "btn btn-outline btn-primary join-item");
      attr(div1, "class", "join flex items-center");
      attr(label, "class", "form-control w-full");
      attr(button1, "class", "btn btn-sm btn-circle btn-ghost absolute right-2 top-2");
      attr(form, "method", "dialog");
      attr(input1, "type", "text");
      attr(input1, "class", "input w-full input-primary");
      attr(input1, "name", "search");
      attr(input1, "placeholder", "Search");
      attr(div2, "class", "flex-shrink-0 mb-2");
      attr(div3, "class", "flex-grow overflow-auto");
      attr(div4, "class", "modal-box flex flex-col");
      attr(dialog, "class", "modal");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div0);
      append_hydration(div0, span);
      append_hydration(span, t0);
      append_hydration(label, t1);
      append_hydration(label, div1);
      append_hydration(div1, input0);
      set_input_value(
        input0,
        /*iconId*/
        ctx[0]
      );
      append_hydration(div1, t2);
      append_hydration(div1, button0);
      if_blocks[current_block_type_index].m(button0, null);
      insert_hydration(target, t3, anchor);
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div4);
      append_hydration(div4, div2);
      append_hydration(div2, form);
      append_hydration(form, button1);
      mount_component(icon, button1, null);
      append_hydration(div2, t4);
      append_hydration(div2, input1);
      set_input_value(
        input1,
        /*search*/
        ctx[2]
      );
      append_hydration(div4, t5);
      append_hydration(div4, div3);
      mount_component(virtuallist, div3, null);
      ctx[11](dialog);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input0,
            "input",
            /*input0_input_handler*/
            ctx[7]
          ),
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[8]
          ),
          listen(
            input1,
            "input",
            /*input1_input_handler*/
            ctx[9]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*name*/
      2)
        set_data(
          t0,
          /*name*/
          ctx2[1]
        );
      if (dirty & /*iconId*/
      1 && input0.value !== /*iconId*/
      ctx2[0]) {
        set_input_value(
          input0,
          /*iconId*/
          ctx2[0]
        );
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(button0, null);
      }
      if (dirty & /*search*/
      4 && input1.value !== /*search*/
      ctx2[2]) {
        set_input_value(
          input1,
          /*search*/
          ctx2[2]
        );
      }
      const virtuallist_changes = {};
      if (dirty & /*filtered*/
      32)
        virtuallist_changes.items = /*filtered*/
        ctx2[5];
      if (dirty & /*$$scope, item*/
      196608) {
        virtuallist_changes.$$scope = { dirty, ctx: ctx2 };
      }
      virtuallist.$set(virtuallist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(icon.$$.fragment, local);
      transition_in(virtuallist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(icon.$$.fragment, local);
      transition_out(virtuallist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label);
        detach(t3);
        detach(dialog);
      }
      if_blocks[current_block_type_index].d();
      destroy_component(icon);
      destroy_component(virtuallist);
      ctx[11](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$1t($$self, $$props, $$invalidate) {
  let { iconId } = $$props;
  let { name = "Icon" } = $$props;
  const dispatch = createEventDispatcher();
  let modal;
  let search = "";
  let filtered;
  let selected;
  function onIconId(id) {
    $$invalidate(3, selected = id !== void 0 ? lookup.find((icon) => icon.id === id) ?? void 0 : void 0);
  }
  function onSearch(s3) {
    if (s3.length === 0) {
      return lookup;
    } else {
      const result = [];
      const normalized = s3.toLowerCase();
      for (let index2 = 0; index2 < lookup.length; index2++) {
        const item = lookup[index2];
        if (item.id.includes(normalized)) {
          result.push(item);
        }
      }
      return result;
    }
  }
  function onSelected(s3) {
    if ((s3 == null ? void 0 : s3.id) !== iconId) {
      $$invalidate(0, iconId = s3 == null ? void 0 : s3.id);
    }
  }
  function onItem(item) {
    $$invalidate(3, selected = item);
    $$invalidate(0, iconId = item.id);
    modal.close();
    dispatch("iconId", selected.id);
  }
  function input0_input_handler() {
    iconId = this.value;
    $$invalidate(0, iconId);
  }
  const click_handler = () => modal.showModal();
  function input1_input_handler() {
    search = this.value;
    $$invalidate(2, search);
  }
  const click_handler_1 = (item) => onItem(item);
  function dialog_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(4, modal);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("iconId" in $$props2)
      $$invalidate(0, iconId = $$props2.iconId);
    if ("name" in $$props2)
      $$invalidate(1, name = $$props2.name);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*search*/
    4) {
      $$invalidate(5, filtered = onSearch(search));
    }
    if ($$self.$$.dirty & /*iconId*/
    1) {
      onIconId(iconId);
    }
    if ($$self.$$.dirty & /*selected*/
    8) {
      onSelected(selected);
    }
  };
  return [
    iconId,
    name,
    search,
    selected,
    modal,
    filtered,
    onItem,
    input0_input_handler,
    click_handler,
    input1_input_handler,
    click_handler_1,
    dialog_binding
  ];
}
class IconPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1t, create_fragment$1r, safe_not_equal, { iconId: 0, name: 1 });
  }
}
function create_fragment$1q(ctx) {
  let label_1;
  let div;
  let span;
  let t0;
  let t1;
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      label_1 = element("label");
      div = element("div");
      span = element("span");
      t0 = text(
        /*label*/
        ctx[1]
      );
      t1 = space();
      input = element("input");
      this.h();
    },
    l(nodes) {
      label_1 = claim_element(nodes, "LABEL", { class: true });
      var label_1_nodes = children(label_1);
      div = claim_element(label_1_nodes, "DIV", { class: true });
      var div_nodes = children(div);
      span = claim_element(div_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(
        span_nodes,
        /*label*/
        ctx[1]
      );
      span_nodes.forEach(detach);
      div_nodes.forEach(detach);
      t1 = claim_space(label_1_nodes);
      input = claim_element(label_1_nodes, "INPUT", {
        type: true,
        class: true,
        placeholder: true
      });
      label_1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text");
      attr(div, "class", "label");
      attr(input, "type", "text");
      attr(input, "class", "input w-full");
      attr(
        input,
        "placeholder",
        /*placeholder*/
        ctx[2]
      );
      attr(label_1, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label_1, anchor);
      append_hydration(label_1, div);
      append_hydration(div, span);
      append_hydration(span, t0);
      append_hydration(label_1, t1);
      append_hydration(label_1, input);
      set_input_value(
        input,
        /*value*/
        ctx[0]
      );
      if (!mounted) {
        dispose = listen(
          input,
          "input",
          /*input_input_handler*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*label*/
      2)
        set_data(
          t0,
          /*label*/
          ctx2[1]
        );
      if (dirty & /*placeholder*/
      4) {
        attr(
          input,
          "placeholder",
          /*placeholder*/
          ctx2[2]
        );
      }
      if (dirty & /*value*/
      1 && input.value !== /*value*/
      ctx2[0]) {
        set_input_value(
          input,
          /*value*/
          ctx2[0]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label_1);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$1s($$self, $$props, $$invalidate) {
  let { label } = $$props;
  let { placeholder } = $$props;
  let { value } = $$props;
  const dispatch = createEventDispatcher();
  function input_input_handler() {
    value = this.value;
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
    if ("placeholder" in $$props2)
      $$invalidate(2, placeholder = $$props2.placeholder);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value*/
    1) {
      dispatch("value", value);
    }
  };
  return [value, label, placeholder, input_input_handler];
}
class TextPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1s, create_fragment$1q, safe_not_equal, { label: 1, placeholder: 2, value: 0 });
  }
}
function create_if_block$W(ctx) {
  let textpicker;
  let updating_value;
  let current;
  function textpicker_value_binding(value) {
    ctx[7](value);
  }
  let textpicker_props = {
    placeholder: (
      /*capability*/
      ctx[3].title
    ),
    label: "Title"
  };
  if (
    /*title*/
    ctx[1] !== void 0
  ) {
    textpicker_props.value = /*title*/
    ctx[1];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  return {
    c() {
      create_component(textpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const textpicker_changes = {};
      if (dirty & /*capability*/
      8)
        textpicker_changes.placeholder = /*capability*/
        ctx2[3].title;
      if (!updating_value && dirty & /*title*/
      2) {
        updating_value = true;
        textpicker_changes.value = /*title*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(textpicker, detaching);
    }
  };
}
function create_fragment$1p(ctx) {
  let capabilitypicker;
  let updating_capabilityUri;
  let t0;
  let t1;
  let iconpicker;
  let updating_iconId;
  let current;
  function capabilitypicker_capabilityUri_binding(value) {
    ctx[5](value);
  }
  let capabilitypicker_props = {};
  if (
    /*capabilityUri*/
    ctx[0] !== void 0
  ) {
    capabilitypicker_props.capabilityUri = /*capabilityUri*/
    ctx[0];
  }
  capabilitypicker = new CapabilityPicker({ props: capabilitypicker_props });
  binding_callbacks.push(() => bind(capabilitypicker, "capabilityUri", capabilitypicker_capabilityUri_binding));
  capabilitypicker.$on(
    "capability",
    /*capability_handler*/
    ctx[6]
  );
  let if_block = (
    /*capability*/
    ctx[3] && create_if_block$W(ctx)
  );
  function iconpicker_iconId_binding(value) {
    ctx[8](value);
  }
  let iconpicker_props = {};
  if (
    /*iconId*/
    ctx[2] !== void 0
  ) {
    iconpicker_props.iconId = /*iconId*/
    ctx[2];
  }
  iconpicker = new IconPicker({ props: iconpicker_props });
  binding_callbacks.push(() => bind(iconpicker, "iconId", iconpicker_iconId_binding));
  return {
    c() {
      create_component(capabilitypicker.$$.fragment);
      t0 = space();
      if (if_block)
        if_block.c();
      t1 = space();
      create_component(iconpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(capabilitypicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      t1 = claim_space(nodes);
      claim_component(iconpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(capabilitypicker, target, anchor);
      insert_hydration(target, t0, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(iconpicker, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const capabilitypicker_changes = {};
      if (!updating_capabilityUri && dirty & /*capabilityUri*/
      1) {
        updating_capabilityUri = true;
        capabilitypicker_changes.capabilityUri = /*capabilityUri*/
        ctx2[0];
        add_flush_callback(() => updating_capabilityUri = false);
      }
      capabilitypicker.$set(capabilitypicker_changes);
      if (
        /*capability*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$W(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t1.parentNode, t1);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const iconpicker_changes = {};
      if (!updating_iconId && dirty & /*iconId*/
      4) {
        updating_iconId = true;
        iconpicker_changes.iconId = /*iconId*/
        ctx2[2];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker.$set(iconpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(capabilitypicker.$$.fragment, local);
      transition_in(if_block);
      transition_in(iconpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(capabilitypicker.$$.fragment, local);
      transition_out(if_block);
      transition_out(iconpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(capabilitypicker, detaching);
      if (if_block)
        if_block.d(detaching);
      destroy_component(iconpicker, detaching);
    }
  };
}
function instance$1r($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let capabilityUri;
  let title;
  let iconId;
  let capability;
  function onSettings(s3) {
    $$invalidate(0, capabilityUri = s3 == null ? void 0 : s3.capabilityUri);
    $$invalidate(1, title = s3 == null ? void 0 : s3.title);
    $$invalidate(2, iconId = s3 == null ? void 0 : s3.iconId);
  }
  function onCapability(id) {
    if (id !== settings.capabilityUri) {
      dispatch("settings", { ...settings, capabilityUri: id });
    }
  }
  function onTitle(t2) {
    const value = t2 !== void 0 && t2.length > 0 ? t2 : void 0;
    if (value !== settings.title) {
      dispatch("settings", { ...settings, title: value });
    }
  }
  function onIcon(id) {
    if (id !== settings.iconId) {
      dispatch("settings", { ...settings, iconId: id });
    }
  }
  function capabilitypicker_capabilityUri_binding(value) {
    capabilityUri = value;
    $$invalidate(0, capabilityUri);
  }
  const capability_handler = (c2) => $$invalidate(3, capability = c2.detail);
  function textpicker_value_binding(value) {
    title = value;
    $$invalidate(1, title);
  }
  function iconpicker_iconId_binding(value) {
    iconId = value;
    $$invalidate(2, iconId);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(4, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    16) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*capabilityUri*/
    1) {
      onCapability(capabilityUri);
    }
    if ($$self.$$.dirty & /*title*/
    2) {
      onTitle(title);
    }
    if ($$self.$$.dirty & /*iconId*/
    4) {
      onIcon(iconId);
    }
  };
  return [
    capabilityUri,
    title,
    iconId,
    capability,
    settings,
    capabilitypicker_capabilityUri_binding,
    capability_handler,
    textpicker_value_binding,
    iconpicker_iconId_binding
  ];
}
class CapabilityEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1r, create_fragment$1p, safe_not_equal, { settings: 4 });
  }
}
function create_fragment$1o(ctx) {
  let span;
  let t0_value = (
    /*formatValue*/
    (ctx[2](
      /*value*/
      ctx[1]
    ) ?? "...") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (ctx[0].units ?? "%") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*value*/
      2 && t0_value !== (t0_value = /*formatValue*/
      (ctx2[2](
        /*value*/
        ctx2[1]
      ) ?? "...") + ""))
        set_data(t0, t0_value);
      if (dirty & /*capability*/
      1 && t2_value !== (t2_value = /*capability*/
      (ctx2[0].units ?? "%") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function instance$1q($$self, $$props, $$invalidate) {
  let disabled;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(7, $editing = $$value));
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let value;
  function onCapability(c2) {
    $$invalidate(1, value = c2.value);
  }
  async function onValue(v) {
    if (v !== (capability == null ? void 0 : capability.value)) {
      if (!disabled) {
        await setCapabilityValue(v);
      }
    }
  }
  function formatValue(v) {
    if (v === null || v === void 0) {
      return v;
    }
    if (capability.units === "%" || !capability.units) {
      return (100 / (capability.max - capability.min) * v).toFixed(0);
    }
    return v.toFixed(capability.decimals);
  }
  async function setCapabilityValue(v) {
    await device.setCapabilityValue({
      deviceId: device.id,
      capabilityId: capability.id,
      value: v
    });
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(3, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(4, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(0, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(5, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(6, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    160) {
      disabled = !controllable || $editing;
    }
    if ($$self.$$.dirty & /*capability*/
    1) {
      onCapability(capability);
    }
    if ($$self.$$.dirty & /*value*/
    2) {
      onValue(value);
    }
  };
  return [capability, value, formatValue, settings, device, controllable, mode, $editing];
}
let Slider$1 = class Slider extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1q, create_fragment$1o, safe_not_equal, {
      settings: 3,
      device: 4,
      capability: 0,
      controllable: 5,
      mode: 6
    });
  }
};
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
var MILLISECONDS_IN_HOUR = 36e5;
function addHours(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
}
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function startOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}
var MILLISECONDS_IN_DAY$1 = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY$1);
}
var MILLISECONDS_IN_MINUTE = 6e4;
function addMinutes(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
}
function addQuarters(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var months = amount * 3;
  return addMonths(dirtyDate, months);
}
function addSeconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * 1e3);
}
function addWeeks(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var days = amount * 7;
  return addDays(dirtyDate, days);
}
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}
function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}
function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() - dateRight.getFullYear();
}
function compareLocalAsc(dateLeft, dateRight) {
  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
function differenceInDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareLocalAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
  dateLeft.setDate(dateLeft.getDate() - sign2 * difference);
  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign2);
  var result = sign2 * (difference - isLastDayNotFull);
  return result === 0 ? 0 : result;
}
function differenceInMilliseconds(dateLeft, dateRight) {
  requiredArgs(2, arguments);
  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
}
var roundingMap = {
  ceil: Math.ceil,
  round: Math.round,
  floor: Math.floor,
  trunc: function trunc(value) {
    return value < 0 ? Math.ceil(value) : Math.floor(value);
  }
  // Math.trunc is not supported by IE
};
var defaultRoundingMethod = "trunc";
function getRoundingMethod(method) {
  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
}
function differenceInHours(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInMinutes(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function isLastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return endOfDay(date).getTime() === endOfMonth(date).getTime();
}
function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
  var result;
  if (difference < 1) {
    result = 0;
  } else {
    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
      dateLeft.setDate(30);
    }
    dateLeft.setMonth(dateLeft.getMonth() - sign2 * difference);
    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign2;
    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
      isLastMonthNotFull = false;
    }
    result = sign2 * (difference - Number(isLastMonthNotFull));
  }
  return result === 0 ? 0 : result;
}
function differenceInQuarters(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMonths(dateLeft, dateRight) / 3;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInSeconds(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1e3;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInWeeks(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInDays(dateLeft, dateRight) / 7;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight));
  dateLeft.setFullYear(1584);
  dateRight.setFullYear(1584);
  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign2;
  var result = sign2 * (difference - Number(isLastYearNotFull));
  return result === 0 ? 0 : result;
}
function startOfMinute(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setSeconds(0, 0);
  return date;
}
function startOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3;
  date.setMonth(month, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function endOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  date.setFullYear(year + 1, 0, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date = /* @__PURE__ */ new Date(0);
  date.setFullYear(cleanDate.getFullYear(), 0, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function endOfHour(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMinutes(59, 59, 999);
  return date;
}
function endOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfMinute(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setSeconds(59, 999);
  return date;
}
function endOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3 + 3;
  date.setMonth(month, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfSecond(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMilliseconds(999);
  return date;
}
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}
var MILLISECONDS_IN_WEEK$1 = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
function addLeadingZeros(number, targetLength) {
  var sign2 = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign2 + output;
}
var formatters$3 = {
  // Year
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
const formatters$4 = formatters$3;
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters$1 = {
  // Era
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return formatters$4.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return formatters$4.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return formatters$4.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return formatters$4.h(date, token);
  },
  // Hour [0-23]
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return formatters$4.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return formatters$4.m(date, token);
  },
  // Second
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return formatters$4.s(date, token);
  },
  // Fraction of second
  S: function S2(date, token) {
    return formatters$4.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign2 + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign2 + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign2 = offset > 0 ? "-" : "+";
    return sign2 + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign2 + hours + delimiter + minutes;
}
const formatters$2 = formatters$1;
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
const longFormatters$1 = longFormatters;
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}
var formatDistanceLocale$1 = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance$3 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$1[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
const formatDistance$4 = formatDistance$3;
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}
var dateFormats$2 = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats$2 = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats$2 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong$4 = {
  date: buildFormatLongFn({
    formats: dateFormats$2,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats$2,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$2,
    defaultWidth: "full"
  })
};
const formatLong$5 = formatLong$4;
var formatRelativeLocale$1 = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative$2 = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$1[token];
};
const formatRelative$3 = formatRelative$2;
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index2 = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index2];
  };
}
var eraValues$1 = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues$1 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues$1 = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues$1 = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues$1 = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber$1 = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize$2 = {
  ordinalNumber: ordinalNumber$1,
  era: buildLocalizeFn({
    values: eraValues$1,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues$1,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
const localize$3 = localize$2;
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
var matchOrdinalNumberPattern$1 = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$1 = /\d+/i;
var matchEraPatterns$1 = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns$1 = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns$1 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns$1 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1 = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns$1 = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$1 = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns$1 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$1 = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns$1 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match$2 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1,
    parsePattern: parseOrdinalNumberPattern$1,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index2) {
      return index2 + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$1,
    defaultParseWidth: "any"
  })
};
const match$3 = match$2;
var locale$3 = {
  code: "en-US",
  formatDistance: formatDistance$4,
  formatLong: formatLong$5,
  formatRelative: formatRelative$3,
  localize: localize$3,
  match: match$3,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
const enUS = locale$3;
var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp$1 = /^'([^]*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;
var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : enUS;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp$1).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp$1).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString$1(substring);
    }
    var formatter = formatters$2[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString$1(input) {
  var matched = input.match(escapedStringRegExp$1);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp$1, "'");
}
function assign(target, object) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      target[property] = object[property];
    }
  }
  return target;
}
function cloneObject(object) {
  return assign({}, object);
}
var MINUTES_IN_DAY = 1440;
var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
var MINUTES_IN_MONTH = 43200;
var MINUTES_IN_TWO_MONTHS = 86400;
function formatDistance$2(dirtyDate, dirtyBaseDate, options) {
  var _ref, _options$locale;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : enUS;
  if (!locale2.formatDistance) {
    throw new RangeError("locale must contain formatDistance property");
  }
  var comparison = compareAsc(dirtyDate, dirtyBaseDate);
  if (isNaN(comparison)) {
    throw new RangeError("Invalid time value");
  }
  var localizeOptions = assign(cloneObject(options), {
    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),
    comparison
  });
  var dateLeft;
  var dateRight;
  if (comparison > 0) {
    dateLeft = toDate(dirtyBaseDate);
    dateRight = toDate(dirtyDate);
  } else {
    dateLeft = toDate(dirtyDate);
    dateRight = toDate(dirtyBaseDate);
  }
  var seconds = differenceInSeconds(dateRight, dateLeft);
  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1e3;
  var minutes = Math.round((seconds - offsetInSeconds) / 60);
  var months;
  if (minutes < 2) {
    if (options !== null && options !== void 0 && options.includeSeconds) {
      if (seconds < 5) {
        return locale2.formatDistance("lessThanXSeconds", 5, localizeOptions);
      } else if (seconds < 10) {
        return locale2.formatDistance("lessThanXSeconds", 10, localizeOptions);
      } else if (seconds < 20) {
        return locale2.formatDistance("lessThanXSeconds", 20, localizeOptions);
      } else if (seconds < 40) {
        return locale2.formatDistance("halfAMinute", 0, localizeOptions);
      } else if (seconds < 60) {
        return locale2.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale2.formatDistance("xMinutes", 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale2.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale2.formatDistance("xMinutes", minutes, localizeOptions);
      }
    }
  } else if (minutes < 45) {
    return locale2.formatDistance("xMinutes", minutes, localizeOptions);
  } else if (minutes < 90) {
    return locale2.formatDistance("aboutXHours", 1, localizeOptions);
  } else if (minutes < MINUTES_IN_DAY) {
    var hours = Math.round(minutes / 60);
    return locale2.formatDistance("aboutXHours", hours, localizeOptions);
  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
    return locale2.formatDistance("xDays", 1, localizeOptions);
  } else if (minutes < MINUTES_IN_MONTH) {
    var days = Math.round(minutes / MINUTES_IN_DAY);
    return locale2.formatDistance("xDays", days, localizeOptions);
  } else if (minutes < MINUTES_IN_TWO_MONTHS) {
    months = Math.round(minutes / MINUTES_IN_MONTH);
    return locale2.formatDistance("aboutXMonths", months, localizeOptions);
  }
  months = differenceInMonths(dateRight, dateLeft);
  if (months < 12) {
    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
    return locale2.formatDistance("xMonths", nearestMonth, localizeOptions);
  } else {
    var monthsSinceStartOfYear = months % 12;
    var years = Math.floor(months / 12);
    if (monthsSinceStartOfYear < 3) {
      return locale2.formatDistance("aboutXYears", years, localizeOptions);
    } else if (monthsSinceStartOfYear < 9) {
      return locale2.formatDistance("overXYears", years, localizeOptions);
    } else {
      return locale2.formatDistance("almostXYears", years + 1, localizeOptions);
    }
  }
}
function _arrayLikeToArray(r, a3) {
  (null == a3 || a3 > r.length) && (a3 = r.length);
  for (var e2 = 0, n = Array(a3); e2 < a3; e2++)
    n[e2] = r[e2];
  return n;
}
function _unsupportedIterableToArray(r, a3) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a3);
    var t2 = {}.toString.call(r).slice(8, -1);
    return "Object" === t2 && r.constructor && (t2 = r.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray(r, a3) : void 0;
  }
}
function _createForOfIteratorHelper(r, e2) {
  var t2 = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t2) {
    if (Array.isArray(r) || (t2 = _unsupportedIterableToArray(r)) || e2 && r && "number" == typeof r.length) {
      t2 && (r = t2);
      var _n = 0, F = function F2() {
      };
      return {
        s: F,
        n: function n() {
          return _n >= r.length ? {
            done: true
          } : {
            done: false,
            value: r[_n++]
          };
        },
        e: function e3(r2) {
          throw r2;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o, a3 = true, u2 = false;
  return {
    s: function s3() {
      t2 = t2.call(r);
    },
    n: function n() {
      var r2 = t2.next();
      return a3 = r2.done, r2;
    },
    e: function e3(r2) {
      u2 = true, o = r2;
    },
    f: function f() {
      try {
        a3 || null == t2["return"] || t2["return"]();
      } finally {
        if (u2)
          throw o;
      }
    }
  };
}
function _assertThisInitialized(e2) {
  if (void 0 === e2)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e2;
}
function _setPrototypeOf(t2, e2) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
    return t3.__proto__ = e3, t3;
  }, _setPrototypeOf(t2, e2);
}
function _inherits(t2, e2) {
  if ("function" != typeof e2 && null !== e2)
    throw new TypeError("Super expression must either be null or a function");
  t2.prototype = Object.create(e2 && e2.prototype, {
    constructor: {
      value: t2,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t2, "prototype", {
    writable: false
  }), e2 && _setPrototypeOf(t2, e2);
}
function _getPrototypeOf(t2) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
    return t3.__proto__ || Object.getPrototypeOf(t3);
  }, _getPrototypeOf(t2);
}
function _isNativeReflectConstruct() {
  try {
    var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t3) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t2;
  })();
}
function _possibleConstructorReturn(t2, e2) {
  if (e2 && ("object" == _typeof(e2) || "function" == typeof e2))
    return e2;
  if (void 0 !== e2)
    throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t2);
}
function _createSuper(t2) {
  var r = _isNativeReflectConstruct();
  return function() {
    var e2, o = _getPrototypeOf(t2);
    if (r) {
      var s3 = _getPrototypeOf(this).constructor;
      e2 = Reflect.construct(o, arguments, s3);
    } else
      e2 = o.apply(this, arguments);
    return _possibleConstructorReturn(this, e2);
  };
}
function _classCallCheck(a3, n) {
  if (!(a3 instanceof n))
    throw new TypeError("Cannot call a class as a function");
}
function toPrimitive(t2, r) {
  if ("object" != _typeof(t2) || !t2)
    return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i2 = e2.call(t2, r || "default");
    if ("object" != _typeof(i2))
      return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t2);
}
function toPropertyKey(t2) {
  var i2 = toPrimitive(t2, "string");
  return "symbol" == _typeof(i2) ? i2 : i2 + "";
}
function _defineProperties(e2, r) {
  for (var t2 = 0; t2 < r.length; t2++) {
    var o = r[t2];
    o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e2, toPropertyKey(o.key), o);
  }
}
function _createClass(e2, r, t2) {
  return r && _defineProperties(e2.prototype, r), t2 && _defineProperties(e2, t2), Object.defineProperty(e2, "prototype", {
    writable: false
  }), e2;
}
function _defineProperty(e2, r, t2) {
  return (r = toPropertyKey(r)) in e2 ? Object.defineProperty(e2, r, {
    value: t2,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e2[r] = t2, e2;
}
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /* @__PURE__ */ function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = /* @__PURE__ */ function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = /* @__PURE__ */ function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = /* @__PURE__ */ new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);
var Parser = /* @__PURE__ */ function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run(dateString, token, match2, options) {
      var result = this.parse(dateString, token, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();
var EraParser = /* @__PURE__ */ function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign2 = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign2 * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex$1(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
var YearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback5 = function valueCallback6(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback5);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback5);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback5);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);
var LocalWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback5 = function valueCallback6(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback5);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback5);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback5);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);
var ISOWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = /* @__PURE__ */ new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);
var ExtendedYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);
var QuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);
var StandAloneQuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);
var MonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback5 = function valueCallback6(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback5);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback5);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback5);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);
var StandAloneMonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback5 = function valueCallback6(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback5);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback5);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback5);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
var LocalWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
var ISOWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);
var DayOfYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var DayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);
var LocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback5 = function valueCallback6(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback5);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback5);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);
var StandAloneLocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback5 = function valueCallback6(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback5);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback5);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var ISODayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback5 = function valueCallback6(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback5);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback5);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback5);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback5);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);
var AMPMParser = /* @__PURE__ */ function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);
var AMPMMidnightParser = /* @__PURE__ */ function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);
var DayPeriodParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);
var Hour1to12Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);
var Hour0to23Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);
var Hour0To11Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);
var Hour1To24Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);
var MinuteParser = /* @__PURE__ */ function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);
var SecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);
var FractionOfSecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback5 = function valueCallback6(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback5);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);
var ISOTimezoneWithZParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);
var ISOTimezoneParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);
var TimestampSecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);
var TimestampMillisecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function parse$1(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : enUS;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters$1) {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens), _step;
  try {
    var _loop = function _loop2() {
      var token = _step.value;
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser = parsers[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function(usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser.run(dateString, token, locale2.match, subFnOptions);
        if (!parseResult) {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString(token);
        }
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if (_typeof(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a3, b2) {
    return b2 - a3;
  }).filter(function(priority, index2, array) {
    return array.indexOf(priority) === index2;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a3, b2) {
      return b2.subPriority - a3.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign(flags, result[1]);
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}
function startOfHour(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMinutes(0, 0, 0);
  return date;
}
function startOfSecond(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMilliseconds(0);
  return date;
}
function parseISO(argument, options) {
  var _options$additionalDi;
  requiredArgs(1, arguments);
  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date;
  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date || isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var timestamp = date.getTime();
  var time = 0;
  var offset;
  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);
    if (isNaN(offset)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time);
    var result = /* @__PURE__ */ new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time + offset);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear(dateString, additionalDigits) {
  var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex);
  if (!captures)
    return {
      year: NaN,
      restDateString: ""
    };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null)
    return /* @__PURE__ */ new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures)
    return /* @__PURE__ */ new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = /* @__PURE__ */ new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures)
    return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z")
    return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures)
    return 0;
  var sign2 = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign2 * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = /* @__PURE__ */ new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}
function create_if_block$V(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$w, create_else_block_2$3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block_2$3(ctx) {
  let div;
  let t0;
  let h3;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? /*capability*/
    ctx[1].title) + ""
  );
  let t1;
  let t2;
  let t3;
  let show_if;
  let current_block_type_index;
  let if_block2;
  let current;
  let if_block0 = (
    /*settings*/
    ctx[0].iconId !== void 0 && create_if_block_11$3(ctx)
  );
  let if_block1 = (
    /*capability*/
    ctx[1].lastUpdated && create_if_block_10$3(ctx)
  );
  const if_block_creators = [create_if_block_6$7, create_if_block_8$5, create_if_block_9$4, create_else_block_4];
  const if_blocks = [];
  function select_block_type_3(ctx2, dirty) {
    if (dirty & /*capability*/
    2)
      show_if = null;
    if (show_if == null)
      show_if = !!/*capability*/
      ctx2[1].id.startsWith("alarm_");
    if (show_if)
      return 0;
    if (
      /*capability*/
      ctx2[1].type === "boolean"
    )
      return 1;
    if (
      /*capability*/
      ctx2[1].type === "enum"
    )
      return 2;
    return 3;
  }
  current_block_type_index = select_block_type_3(ctx, -1);
  if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      h3 = element("h3");
      t1 = text(t1_value);
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      if_block2.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (if_block0)
        if_block0.l(div_nodes);
      t0 = claim_space(div_nodes);
      h3 = claim_element(div_nodes, "H3", {});
      var h3_nodes = children(h3);
      t1 = claim_text(h3_nodes, t1_value);
      h3_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      if (if_block1)
        if_block1.l(div_nodes);
      t3 = claim_space(div_nodes);
      if_block2.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex items-center w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (if_block0)
        if_block0.m(div, null);
      append_hydration(div, t0);
      append_hydration(div, h3);
      append_hydration(h3, t1);
      append_hydration(div, t2);
      if (if_block1)
        if_block1.m(div, null);
      append_hydration(div, t3);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*settings*/
        ctx2[0].iconId !== void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*settings*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_11$3(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*settings, capability*/
      3) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? /*capability*/
      ctx2[1].title) + ""))
        set_data(t1, t1_value);
      if (
        /*capability*/
        ctx2[1].lastUpdated
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_10$3(ctx2);
          if_block1.c();
          if_block1.m(div, t3);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_3(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block2 = if_blocks[current_block_type_index];
        if (!if_block2) {
          if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block2.c();
        } else {
          if_block2.p(ctx2, dirty);
        }
        transition_in(if_block2, 1);
        if_block2.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_if_block_1$w(ctx) {
  let show_if;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_2$k, create_if_block_4$b, create_if_block_5$8, create_else_block_1$a];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (dirty & /*capability*/
    2)
      show_if = null;
    if (show_if == null)
      show_if = !!/*capability*/
      ctx2[1].id.startsWith("alarm_");
    if (show_if)
      return 0;
    if (
      /*capability*/
      ctx2[1].type === "boolean"
    )
      return 1;
    if (
      /*capability*/
      ctx2[1].type === "enum"
    )
      return 2;
    return 3;
  }
  current_block_type_index = select_block_type_1(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_if_block_11$3(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      ),
      extraClass: "mr-1"
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_10$3(ctx) {
  let span;
  let t0;
  let t1_value = formatDistance$2(new Date(
    /*capability*/
    ctx[1].lastUpdated
  ), /* @__PURE__ */ new Date(), { addSuffix: true }) + "";
  let t1;
  return {
    c() {
      span = element("span");
      t0 = text("- ");
      t1 = text(t1_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, "- ");
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "font-extralight ml-2 text-xs mr-auto");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*capability*/
      2 && t1_value !== (t1_value = formatDistance$2(new Date(
        /*capability*/
        ctx2[1].lastUpdated
      ), /* @__PURE__ */ new Date(), { addSuffix: true }) + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_else_block_4(ctx) {
  var _a2;
  let h12;
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (((_a2 = ctx[1]) == null ? void 0 : _a2.units) ?? "") + ""
  );
  let t2;
  return {
    c() {
      h12 = element("h1");
      t0 = text(
        /*value*/
        ctx[3]
      );
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", { class: true });
      var h1_nodes = children(h12);
      t0 = claim_text(
        h1_nodes,
        /*value*/
        ctx[3]
      );
      t1 = claim_space(h1_nodes);
      t2 = claim_text(h1_nodes, t2_value);
      h1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h12, "class", "whitespace-nowrap");
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, t0);
      append_hydration(h12, t1);
      append_hydration(h12, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*value*/
      8)
        set_data(
          t0,
          /*value*/
          ctx2[3]
        );
      if (dirty & /*capability*/
      2 && t2_value !== (t2_value = /*capability*/
      (((_a3 = ctx2[1]) == null ? void 0 : _a3.units) ?? "") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_if_block_9$4(ctx) {
  var _a2;
  let h12;
  let t_value = (
    /*capability*/
    (((_a2 = ctx[1].values.find(
      /*func_1*/
      ctx[7]
    )) == null ? void 0 : _a2.title) ?? /*value*/
    ctx[3]) + ""
  );
  let t2;
  return {
    c() {
      h12 = element("h1");
      t2 = text(t_value);
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", {});
      var h1_nodes = children(h12);
      t2 = claim_text(h1_nodes, t_value);
      h1_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*capability, value*/
      10 && t_value !== (t_value = /*capability*/
      (((_a3 = ctx2[1].values.find(
        /*func_1*/
        ctx2[7]
      )) == null ? void 0 : _a3.title) ?? /*value*/
      ctx2[3]) + ""))
        set_data(t2, t_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_if_block_8$5(ctx) {
  let h12;
  let t_value = (
    /*value*/
    ctx[3] ? "Yes" : "No"
  );
  let t2;
  return {
    c() {
      h12 = element("h1");
      t2 = text(t_value);
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", {});
      var h1_nodes = children(h12);
      t2 = claim_text(h1_nodes, t_value);
      h1_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      8 && t_value !== (t_value = /*value*/
      ctx2[3] ? "Yes" : "No"))
        set_data(t2, t_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_if_block_6$7(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_7$6, create_else_block_3$1];
  const if_blocks = [];
  function select_block_type_4(ctx2, dirty) {
    if (
      /*value*/
      ctx2[3]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_4(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_4(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block_3$1(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMinus } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_7$6(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      extraClass: "bg-warn-icon",
      data: mdiAlert
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_else_block_1$a(ctx) {
  var _a2;
  let span;
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (((_a2 = ctx[1]) == null ? void 0 : _a2.units) ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(
        /*value*/
        ctx[3]
      );
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(
        span_nodes,
        /*value*/
        ctx[3]
      );
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*value*/
      8)
        set_data(
          t0,
          /*value*/
          ctx2[3]
        );
      if (dirty & /*capability*/
      2 && t2_value !== (t2_value = /*capability*/
      (((_a3 = ctx2[1]) == null ? void 0 : _a3.units) ?? "") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_5$8(ctx) {
  var _a2;
  let span;
  let t_value = (
    /*capability*/
    (((_a2 = ctx[1].values.find(
      /*func*/
      ctx[6]
    )) == null ? void 0 : _a2.title) ?? /*value*/
    ctx[3]) + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*capability, value*/
      10 && t_value !== (t_value = /*capability*/
      (((_a3 = ctx2[1].values.find(
        /*func*/
        ctx2[6]
      )) == null ? void 0 : _a3.title) ?? /*value*/
      ctx2[3]) + ""))
        set_data(t2, t_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_4$b(ctx) {
  let span;
  let t_value = (
    /*value*/
    ctx[3] ? "Yes" : "No"
  );
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      8 && t_value !== (t_value = /*value*/
      ctx2[3] ? "Yes" : "No"))
        set_data(t2, t_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_2$k(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_3$e, create_else_block$u];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*value*/
      ctx2[3]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_2(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$u(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMinus } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_3$e(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      extraClass: "bg-warn-icon",
      data: mdiAlert
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_fragment$1n(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*capability*/
    ctx[1] !== void 0 && create_if_block$V(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[1] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$V(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$1p($$self, $$props, $$invalidate) {
  let value;
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  const func2 = (v) => v.id === value;
  const func_1 = (v) => v.id === value;
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(4, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(1, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(5, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*capability*/
    2) {
      $$invalidate(3, value = capability == null ? void 0 : capability.value);
    }
  };
  return [settings, capability, mode, value, device, controllable, func2, func_1];
}
class Sensor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1p, create_fragment$1n, safe_not_equal, {
      settings: 0,
      device: 4,
      capability: 1,
      controllable: 5,
      mode: 2
    });
  }
}
function create_if_block_1$v(ctx) {
  let span;
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      data: (
        /*currentIconTrue*/
        ctx[7]
      ),
      color: (
        /*colorTrue*/
        ctx[2] ?? /*color*/
        ctx[1] ?? defaultColor$3
      )
    }
  });
  return {
    c() {
      span = element("span");
      create_component(icon_1.$$.fragment);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      claim_component(icon_1.$$.fragment, span_nodes);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "text-sm absolute left-0.5 flex items-center justify-center h-4 w-4");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      mount_component(icon_1, span, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconTrue*/
      128)
        icon_1_changes.data = /*currentIconTrue*/
        ctx2[7];
      if (dirty & /*colorTrue, color*/
      6)
        icon_1_changes.color = /*colorTrue*/
        ctx2[2] ?? /*color*/
        ctx2[1] ?? defaultColor$3;
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(icon_1);
    }
  };
}
function create_if_block$U(ctx) {
  let span;
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      data: (
        /*currentIconFalse*/
        ctx[6]
      ),
      color: (
        /*colorFalse*/
        ctx[3] ?? /*color*/
        ctx[1] ?? defaultColor$3
      )
    }
  });
  return {
    c() {
      span = element("span");
      create_component(icon_1.$$.fragment);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      claim_component(icon_1.$$.fragment, span_nodes);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "text-sm absolute right-0.5 flex items-center justify-center h-4 w-4");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      mount_component(icon_1, span, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconFalse*/
      64)
        icon_1_changes.data = /*currentIconFalse*/
        ctx2[6];
      if (dirty & /*colorFalse, color*/
      10)
        icon_1_changes.color = /*colorFalse*/
        ctx2[3] ?? /*color*/
        ctx2[1] ?? defaultColor$3;
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(icon_1);
    }
  };
}
function create_fragment$1m(ctx) {
  let div1;
  let div0;
  let button;
  let span;
  let span_class_value;
  let t0;
  let t1;
  let div0_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*currentIconTrue*/
    ctx[7] !== void 0 && create_if_block_1$v(ctx)
  );
  let if_block1 = (
    /*currentIconFalse*/
    ctx[6] !== void 0 && create_if_block$U(ctx)
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      button = element("button");
      span = element("span");
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      button = claim_element(div0_nodes, "BUTTON", {
        "aria-label": true,
        type: true,
        class: true
      });
      var button_nodes = children(button);
      span = claim_element(button_nodes, "SPAN", { "aria-hidden": true, class: true });
      children(span).forEach(detach);
      t0 = claim_space(button_nodes);
      if (if_block0)
        if_block0.l(button_nodes);
      t1 = claim_space(button_nodes);
      if (if_block1)
        if_block1.l(button_nodes);
      button_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "aria-hidden", "true");
      attr(span, "class", span_class_value = "relative z-10 inline-block bg-surface h-5 w-5 rounded-full shadow transform transition-transform ease-in-out duration-150 border border-border " + /*translate*/
      ctx[4]);
      attr(button, "aria-label", "toggle");
      attr(button, "type", "button");
      attr(button, "class", "relative inline-flex items-center justify-between flex-shrink-0 h-full w-full border-2 border-transparent rounded-full cursor-pointer ease-in-out outline-none focus:outline-none");
      toggle_class(
        button,
        "bg-default",
        /*value*/
        ctx[0] !== true
      );
      toggle_class(
        button,
        "bg-primary",
        /*value*/
        ctx[0] === true
      );
      attr(div0, "class", div0_class_value = "border relative inline-flex flex-shrink-0 h-[1.6rem] rounded-full cursor-pointer outline-none focus:outline-none " + /*width*/
      ctx[5]);
      toggle_class(
        div0,
        "border-border",
        /*value*/
        ctx[0] !== true
      );
      toggle_class(
        div0,
        "border-primary",
        /*value*/
        ctx[0] === true
      );
      attr(div1, "class", "flex items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      append_hydration(div0, button);
      append_hydration(button, span);
      append_hydration(button, t0);
      if (if_block0)
        if_block0.m(button, null);
      append_hydration(button, t1);
      if (if_block1)
        if_block1.m(button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[13]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*translate*/
      16 && span_class_value !== (span_class_value = "relative z-10 inline-block bg-surface h-5 w-5 rounded-full shadow transform transition-transform ease-in-out duration-150 border border-border " + /*translate*/
      ctx2[4])) {
        attr(span, "class", span_class_value);
      }
      if (
        /*currentIconTrue*/
        ctx2[7] !== void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*currentIconTrue*/
          128) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$v(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(button, t1);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*currentIconFalse*/
        ctx2[6] !== void 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*currentIconFalse*/
          64) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$U(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(button, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*value*/
      1) {
        toggle_class(
          button,
          "bg-default",
          /*value*/
          ctx2[0] !== true
        );
      }
      if (!current || dirty & /*value*/
      1) {
        toggle_class(
          button,
          "bg-primary",
          /*value*/
          ctx2[0] === true
        );
      }
      if (!current || dirty & /*width*/
      32 && div0_class_value !== (div0_class_value = "border relative inline-flex flex-shrink-0 h-[1.6rem] rounded-full cursor-pointer outline-none focus:outline-none " + /*width*/
      ctx2[5])) {
        attr(div0, "class", div0_class_value);
      }
      if (!current || dirty & /*width, value*/
      33) {
        toggle_class(
          div0,
          "border-border",
          /*value*/
          ctx2[0] !== true
        );
      }
      if (!current || dirty & /*width, value*/
      33) {
        toggle_class(
          div0,
          "border-primary",
          /*value*/
          ctx2[0] === true
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      dispose();
    }
  };
}
const defaultColor$3 = "currentColor";
function instance$1o($$self, $$props, $$invalidate) {
  let currentIconTrue;
  let currentIconFalse;
  let width;
  let translate;
  let { value } = $$props;
  let { disabled = false } = $$props;
  let { icon = void 0 } = $$props;
  let { iconTrue = void 0 } = $$props;
  let { iconFalse = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  let { colorTrue = void 0 } = $$props;
  let { colorFalse = void 0 } = $$props;
  function setValue(v) {
    if (!disabled) {
      $$invalidate(0, value = v === true);
    }
  }
  const click_handler = () => setValue(!value);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(9, disabled = $$props2.disabled);
    if ("icon" in $$props2)
      $$invalidate(10, icon = $$props2.icon);
    if ("iconTrue" in $$props2)
      $$invalidate(11, iconTrue = $$props2.iconTrue);
    if ("iconFalse" in $$props2)
      $$invalidate(12, iconFalse = $$props2.iconFalse);
    if ("color" in $$props2)
      $$invalidate(1, color2 = $$props2.color);
    if ("colorTrue" in $$props2)
      $$invalidate(2, colorTrue = $$props2.colorTrue);
    if ("colorFalse" in $$props2)
      $$invalidate(3, colorFalse = $$props2.colorFalse);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*iconTrue, icon*/
    3072) {
      $$invalidate(7, currentIconTrue = iconTrue ?? icon ? getIcon(iconTrue ?? icon ?? "") : void 0);
    }
    if ($$self.$$.dirty & /*iconFalse, icon*/
    5120) {
      $$invalidate(6, currentIconFalse = iconFalse ?? icon ? getIcon(iconFalse ?? icon ?? "") : void 0);
    }
    if ($$self.$$.dirty & /*iconTrue, icon, iconFalse*/
    7168) {
      $$invalidate(5, width = (iconTrue ?? icon) || (iconFalse ?? icon) ? "w-[48px]" : "w-[2.8rem]");
    }
    if ($$self.$$.dirty & /*value, iconTrue, icon, iconFalse*/
    7169) {
      $$invalidate(4, translate = value === true && ((iconTrue ?? icon) || (iconFalse ?? icon)) ? "translate-x-[calc(100%+0.1rem)]" : value !== true ? "translate-x-[0.1rem]" : "translate-x-[calc(100%-0.1rem)]");
    }
  };
  return [
    value,
    color2,
    colorTrue,
    colorFalse,
    translate,
    width,
    currentIconFalse,
    currentIconTrue,
    setValue,
    disabled,
    icon,
    iconTrue,
    iconFalse,
    click_handler
  ];
}
class Toggle extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1o, create_fragment$1m, safe_not_equal, {
      value: 0,
      disabled: 9,
      icon: 10,
      iconTrue: 11,
      iconFalse: 12,
      color: 1,
      colorTrue: 2,
      colorFalse: 3
    });
  }
}
function create_if_block$T(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$u, create_else_block$t];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$t(ctx) {
  let div;
  let t0;
  let h3;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? /*capability*/
    ctx[1].title) + ""
  );
  let t1;
  let t2;
  let span;
  let t3_value = formatDistance$2(new Date(
    /*capability*/
    ctx[1].lastUpdated
  ), /* @__PURE__ */ new Date(), { addSuffix: true }) + "";
  let t3;
  let t4;
  let toggle;
  let updating_value;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*settings*/
    ctx[0].iconId !== void 0 && create_if_block_2$j(ctx)
  );
  function toggle_value_binding_1(value) {
    ctx[10](value);
  }
  let toggle_props = {};
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    toggle_props.value = /*value*/
    ctx[3];
  }
  toggle = new Toggle({ props: toggle_props });
  binding_callbacks.push(() => bind(toggle, "value", toggle_value_binding_1));
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      t0 = space();
      h3 = element("h3");
      t1 = text(t1_value);
      t2 = space();
      span = element("span");
      t3 = text(t3_value);
      t4 = space();
      create_component(toggle.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (if_block)
        if_block.l(div_nodes);
      t0 = claim_space(div_nodes);
      h3 = claim_element(div_nodes, "H3", {});
      var h3_nodes = children(h3);
      t1 = claim_text(h3_nodes, t1_value);
      h3_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t3 = claim_text(span_nodes, t3_value);
      span_nodes.forEach(detach);
      t4 = claim_space(div_nodes);
      claim_component(toggle.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "font-extralight ml-2 text-xs mr-auto");
      attr(div, "class", "flex items-center w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      append_hydration(div, t0);
      append_hydration(div, h3);
      append_hydration(h3, t1);
      append_hydration(div, t2);
      append_hydration(div, span);
      append_hydration(span, t3);
      append_hydration(div, t4);
      mount_component(toggle, div, null);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", stop_propagation(
          /*click_handler_1*/
          ctx[8]
        ));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*settings*/
        ctx2[0].iconId !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*settings*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_2$j(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*settings, capability*/
      3) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? /*capability*/
      ctx2[1].title) + ""))
        set_data(t1, t1_value);
      if ((!current || dirty & /*capability*/
      2) && t3_value !== (t3_value = formatDistance$2(new Date(
        /*capability*/
        ctx2[1].lastUpdated
      ), /* @__PURE__ */ new Date(), { addSuffix: true }) + ""))
        set_data(t3, t3_value);
      const toggle_changes = {};
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        toggle_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
      destroy_component(toggle);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$u(ctx) {
  let div;
  let toggle;
  let updating_value;
  let current;
  let mounted;
  let dispose;
  function toggle_value_binding(value) {
    ctx[9](value);
  }
  let toggle_props = {};
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    toggle_props.value = /*value*/
    ctx[3];
  }
  toggle = new Toggle({ props: toggle_props });
  binding_callbacks.push(() => bind(toggle, "value", toggle_value_binding));
  return {
    c() {
      div = element("div");
      create_component(toggle.$$.fragment);
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      claim_component(toggle.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(toggle, div, null);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", stop_propagation(
          /*click_handler*/
          ctx[7]
        ));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        toggle_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(toggle);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$j(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      ),
      extraClass: "mr-1"
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_fragment$1l(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*capability*/
    ctx[1] !== void 0 && create_if_block$T(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[1] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$T(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$1n($$self, $$props, $$invalidate) {
  let disabled;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(6, $editing = $$value));
  createEventDispatcher();
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let value;
  function onCapability(c2) {
    $$invalidate(3, value = c2.value);
  }
  async function onValue(v) {
    if (v !== (capability == null ? void 0 : capability.value)) {
      if (!disabled) {
        await setCapabilityValue(v);
      } else {
        $$invalidate(3, value = !v);
      }
    }
  }
  async function setCapabilityValue(value2) {
    await device.setCapabilityValue({
      deviceId: device.id,
      capabilityId: capability.id,
      value: value2
    });
  }
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function click_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function toggle_value_binding(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  function toggle_value_binding_1(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(4, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(1, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(5, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    96) {
      disabled = !controllable || $editing;
    }
    if ($$self.$$.dirty & /*capability*/
    2) {
      onCapability(capability);
    }
    if ($$self.$$.dirty & /*value*/
    8) {
      onValue(value);
    }
  };
  return [
    settings,
    capability,
    mode,
    value,
    device,
    controllable,
    $editing,
    click_handler,
    click_handler_1,
    toggle_value_binding,
    toggle_value_binding_1
  ];
}
class Toggle_1 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1n, create_fragment$1l, safe_not_equal, {
      settings: 0,
      device: 4,
      capability: 1,
      controllable: 5,
      mode: 2
    });
  }
}
function create_if_block$S(ctx) {
  let button;
  let t_value = (
    /*settings*/
    (ctx[0].title ?? /*capability*/
    ctx[1].title) + ""
  );
  let t2;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      t2 = claim_text(button_nodes, t_value);
      button_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(button, "class", "btn btn-primary");
      button.disabled = /*disabled*/
      ctx[2];
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, t2);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[7]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*settings, capability*/
      3 && t_value !== (t_value = /*settings*/
      (ctx2[0].title ?? /*capability*/
      ctx2[1].title) + ""))
        set_data(t2, t_value);
      if (dirty & /*disabled*/
      4) {
        button.disabled = /*disabled*/
        ctx2[2];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$1k(ctx) {
  let if_block_anchor;
  let if_block = (
    /*capability*/
    ctx[1] && create_if_block$S(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$S(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$1m($$self, $$props, $$invalidate) {
  let disabled;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(6, $editing = $$value));
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  async function setValue(value) {
    await device.setCapabilityValue({
      deviceId: device.id,
      capabilityId: capability.id,
      value
    });
  }
  const click_handler = () => setValue(true);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(4, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(1, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(5, controllable = $$props2.controllable);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    96) {
      $$invalidate(2, disabled = !controllable || $editing);
    }
  };
  return [
    settings,
    capability,
    disabled,
    setValue,
    device,
    controllable,
    $editing,
    click_handler
  ];
}
class Button extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1m, create_fragment$1k, safe_not_equal, {
      settings: 0,
      device: 4,
      capability: 1,
      controllable: 5
    });
  }
}
function create_fragment$1j(ctx) {
  let span;
  let t0_value = (
    /*capability*/
    (ctx[0].value ?? "...") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (ctx[0].units ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*capability*/
      1 && t0_value !== (t0_value = /*capability*/
      (ctx2[0].value ?? "...") + ""))
        set_data(t0, t0_value);
      if (dirty & /*capability*/
      1 && t2_value !== (t2_value = /*capability*/
      (ctx2[0].units ?? "") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function instance$1l($$self, $$props, $$invalidate) {
  let disabled;
  let postfix;
  let targetTemperature;
  let thermostatMode;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(9, $editing = $$value));
  const dispatcher = createEventDispatcher();
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let targetValue;
  onMount(() => {
    onThermostatMode(thermostatMode);
  });
  function onTargetTemperature(c2) {
    $$invalidate(5, targetValue = c2.value);
  }
  function onThermostatMode(c2) {
    if (thermostatMode === void 0) {
      return;
    }
    if (c2.value === "cool") {
      dispatcher("style", "bg-gradient-to-r from-cyan-400 to-cyan-600 border-none");
    } else if (c2.value === "heat") {
      dispatcher("style", "bg-gradient-to-r from-orange-400 to-orange-600 border-none");
    } else if (c2.value === "auto") {
      dispatcher("style", "bg-gradient-to-r from-cyan-400 to-orange-600 border-none");
    } else {
      dispatcher("style", "");
    }
  }
  function onTargetValue(v) {
    if (capability.setable && v !== (capability == null ? void 0 : capability.value)) {
      if (!disabled) {
        setCapabilityValue(capability.id, v);
      }
    }
  }
  async function setCapabilityValue(capabilityId, value) {
    await device.setCapabilityValue({ deviceId: device.id, capabilityId, value });
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(1, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(2, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(0, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(3, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(4, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    520) {
      disabled = !controllable || $editing;
    }
    if ($$self.$$.dirty & /*capability*/
    1) {
      $$invalidate(8, postfix = capability.id.indexOf(".") > -1 ? capability.id.slice(capability.id.indexOf(".")) : "");
    }
    if ($$self.$$.dirty & /*capability, postfix, device*/
    261) {
      capability.id === "measure_temperature" + postfix ? capability : device.capabilitiesObj["measure_temperature" + postfix];
    }
    if ($$self.$$.dirty & /*capability, postfix, device*/
    261) {
      $$invalidate(7, targetTemperature = capability.id === "target_temperature" + postfix ? capability : device.capabilitiesObj["target_temperature" + postfix]);
    }
    if ($$self.$$.dirty & /*capability, postfix, device*/
    261) {
      $$invalidate(6, thermostatMode = capability.id === "thermostat_mode" + postfix ? capability : device.capabilitiesObj["thermostat_mode" + postfix]);
    }
    if ($$self.$$.dirty & /*targetTemperature*/
    128) {
      onTargetTemperature(targetTemperature);
    }
    if ($$self.$$.dirty & /*thermostatMode*/
    64) {
      onThermostatMode(thermostatMode);
    }
    if ($$self.$$.dirty & /*targetValue*/
    32) {
      onTargetValue(targetValue);
    }
  };
  return [
    capability,
    settings,
    device,
    controllable,
    mode,
    targetValue,
    thermostatMode,
    targetTemperature,
    postfix,
    $editing
  ];
}
class Thermostat extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1l, create_fragment$1j, safe_not_equal, {
      settings: 1,
      device: 2,
      capability: 0,
      controllable: 3,
      mode: 4
    });
  }
}
function create_if_block$R(ctx) {
  let span;
  let t0_value = (
    /*capability*/
    (ctx[0].value ?? "...") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (ctx[0].units ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*capability*/
      1 && t0_value !== (t0_value = /*capability*/
      (ctx2[0].value ?? "...") + ""))
        set_data(t0, t0_value);
      if (dirty & /*capability*/
      1 && t2_value !== (t2_value = /*capability*/
      (ctx2[0].units ?? "") + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$1i(ctx) {
  let if_block_anchor;
  let if_block = (
    /*capability*/
    ctx[0] !== void 0 && create_if_block$R(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[0] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$R(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$1k($$self, $$props, $$invalidate) {
  let disabled;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(5, $editing = $$value));
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  let value;
  onMount(() => {
    $$invalidate(4, value = capability.value);
  });
  async function onValue(v) {
    if (capability.setable && v !== (capability == null ? void 0 : capability.value) && v !== void 0) {
      if (!disabled) {
        await setCapabilityValue(v);
      }
    }
  }
  async function setCapabilityValue(value2) {
    await device.setCapabilityValue({
      deviceId: device.id,
      capabilityId: capability.id,
      value: value2
    });
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(1, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(2, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(0, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(3, controllable = $$props2.controllable);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    40) {
      disabled = !controllable || $editing;
    }
    if ($$self.$$.dirty & /*value*/
    16) {
      onValue(value);
    }
  };
  return [capability, settings, device, controllable, value, $editing];
}
class Picker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1k, create_fragment$1i, safe_not_equal, {
      settings: 1,
      device: 2,
      capability: 0,
      controllable: 3
    });
  }
}
function create_else_block$s(ctx) {
  let span;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].capabilityUri !== void 0
    )
      return create_if_block_2$i;
    return create_else_block_1$9;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      span = element("span");
      if_block.c();
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      if_block.l(span_nodes);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "w-full h-8 overflow-hidden overflow-ellipsis font-extralight");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      if_block.m(span, null);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(span, null);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      if_block.d();
    }
  };
}
function create_if_block$Q(ctx) {
  let div1;
  let t0;
  let div0;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? /*capability*/
    ctx[2].title) + ""
  );
  let t1;
  let t2;
  let switch_instance;
  let current;
  let if_block = (
    /*settings*/
    ctx[0].iconId !== void 0 && create_if_block_1$t(ctx)
  );
  var switch_value = (
    /*getComponent*/
    ctx[4](
      /*capability*/
      ctx[2]
    )
  );
  function switch_props(ctx2, dirty) {
    return {
      props: {
        settings: (
          /*settings*/
          ctx2[0]
        ),
        device: (
          /*device*/
          ctx2[1]
        ),
        capability: (
          /*capability*/
          ctx2[2]
        ),
        controllable: (
          /*controllable*/
          ctx2[3]
        )
      }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
  }
  return {
    c() {
      div1 = element("div");
      if (if_block)
        if_block.c();
      t0 = space();
      div0 = element("div");
      t1 = text(t1_value);
      t2 = space();
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      if (if_block)
        if_block.l(div1_nodes);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      t1 = claim_text(div0_nodes, t1_value);
      div0_nodes.forEach(detach);
      t2 = claim_space(div1_nodes);
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "font-extralight overflow-hidden overflow-ellipsis whitespace-nowrap flex-grow");
      attr(div1, "class", "flex items-center justify-between w-full pl-1 pr-1 leading-normal cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      if (if_block)
        if_block.m(div1, null);
      append_hydration(div1, t0);
      append_hydration(div1, div0);
      append_hydration(div0, t1);
      append_hydration(div1, t2);
      if (switch_instance)
        mount_component(switch_instance, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*settings*/
        ctx2[0].iconId !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*settings*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$t(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*settings, capability*/
      5) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? /*capability*/
      ctx2[2].title) + ""))
        set_data(t1, t1_value);
      if (dirty & /*capability*/
      4 && switch_value !== (switch_value = /*getComponent*/
      ctx2[4](
        /*capability*/
        ctx2[2]
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, div1, null);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty & /*settings*/
        1)
          switch_instance_changes.settings = /*settings*/
          ctx2[0];
        if (dirty & /*device*/
        2)
          switch_instance_changes.device = /*device*/
          ctx2[1];
        if (dirty & /*capability*/
        4)
          switch_instance_changes.capability = /*capability*/
          ctx2[2];
        if (dirty & /*controllable*/
        8)
          switch_instance_changes.controllable = /*controllable*/
          ctx2[3];
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block)
        if_block.d();
      if (switch_instance)
        destroy_component(switch_instance);
    }
  };
}
function create_else_block_1$9(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Capability not configured");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Capability not configured");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_2$i(ctx) {
  let if_block_anchor;
  function select_block_type_2(ctx2, dirty) {
    if (
      /*capability*/
      ctx2[2] === void 0
    )
      return create_if_block_3$d;
    if (
      /*device*/
      ctx2[1] === void 0
    )
      return create_if_block_4$a;
  }
  let current_block_type = select_block_type_2(ctx);
  let if_block = current_block_type && current_block_type(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_2(ctx2))) {
        if (if_block)
          if_block.d(1);
        if_block = current_block_type && current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) {
        if_block.d(detaching);
      }
    }
  };
}
function create_if_block_4$a(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Device not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Device not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_3$d(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Capability not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Capability not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_1$t(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      )
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_fragment$1h(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$Q, create_else_block$s];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*device*/
      ctx2[1] !== void 0 && /*capability*/
      ctx2[2] !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$1j($$self, $$props, $$invalidate) {
  let controllable;
  let $scopes;
  let $devices;
  component_subscribe($$self, scopes, ($$value) => $$invalidate(9, $scopes = $$value));
  component_subscribe($$self, devices, ($$value) => $$invalidate(10, $devices = $$value));
  let { gridItem } = $$props;
  let { context } = $$props;
  let { settings } = $$props;
  let deviceId = "";
  let capabilityId = "";
  let device;
  let capability;
  let subscribedDevice;
  function onSettings(s3) {
    if (s3.capabilityUri) {
      const segments = s3.capabilityUri.split(":");
      $$invalidate(7, deviceId = segments[2]);
      $$invalidate(8, capabilityId = segments[3]);
    }
  }
  function onDevice(_device) {
    if (subscribedDevice !== void 0 && subscribedDevice.off !== void 0) {
      subscribedDevice.off("capability", updateCapability);
    }
    if (_device !== void 0) {
      subscribedDevice = _device;
      if (subscribedDevice.on !== void 0) {
        subscribedDevice.on("capability", updateCapability);
      }
    }
  }
  function updateCapability(event) {
    if (device !== void 0 && event.capabilityId === capabilityId) {
      $$invalidate(2, capability = device.capabilitiesObj[event.capabilityId]);
    }
  }
  function getComponent(capability2) {
    if (device !== void 0) {
      for (var component of device.ui.components) {
        if (component.capabilities.includes(capability2.id)) {
          switch (component.id) {
            case "slider":
              return Slider$1;
            case "toggle":
              return Toggle_1;
            case "button":
              return Button;
            case "thermostat":
              return Thermostat;
            case "picker":
              return Picker;
            case "battery":
            case "color":
            case "media":
            case "ternary":
            case "sensor":
            default:
              return Sensor;
          }
        }
      }
    }
    return Sensor;
  }
  $$self.$$set = ($$props2) => {
    if ("gridItem" in $$props2)
      $$invalidate(5, gridItem = $$props2.gridItem);
    if ("context" in $$props2)
      $$invalidate(6, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*$devices, deviceId*/
    1152) {
      $$invalidate(1, device = $devices[deviceId]);
    }
    if ($$self.$$.dirty & /*device, capabilityId*/
    258) {
      $$invalidate(2, capability = device !== void 0 && capabilityId !== void 0 ? device.capabilitiesObj[capabilityId] : void 0);
    }
    if ($$self.$$.dirty & /*$scopes*/
    512) {
      $$invalidate(3, controllable = $scopes.includes("homey") || $scopes.includes("homey.device") || $scopes.includes("homey.device.control"));
    }
    if ($$self.$$.dirty & /*device*/
    2) {
      onDevice(device);
    }
  };
  return [
    settings,
    device,
    capability,
    controllable,
    getComponent,
    gridItem,
    context,
    deviceId,
    capabilityId,
    $scopes,
    $devices
  ];
}
class CapabilityWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1j, create_fragment$1h, safe_not_equal, { gridItem: 5, context: 6, settings: 0 });
  }
}
function create$6() {
  return {
    id: v4(),
    type: "capability",
    version: 5
  };
}
function migrate$6(settings) {
  while (settings.version !== 5) {
    settings = migrateOnce$6(settings);
  }
  return settings;
}
function migrateOnce$6(settings) {
  switch (settings.version) {
    case 5:
      return settings;
    case 4:
      return migrate_v4_v5$1(settings);
    case 3:
      return migrate_v3_v4$1(settings);
    case 2:
      return migrate_v2_v3$3(settings);
    case 1:
    default:
      return migrate_v1_v2$3(settings);
  }
}
function migrate_v4_v5$1(v42) {
  const settings = {
    id: v42.id,
    type: v42.type,
    version: 5,
    capabilityUri: "homey:device:" + v42.deviceId + ":" + v42.capabilityId,
    title: v42.title,
    iconId: v42.iconId
  };
  return settings;
}
function migrate_v3_v4$1(v3) {
  return { ...v3, version: 4 };
}
function migrate_v2_v3$3(v2) {
  var _a2;
  const settings = {
    id: v2.id,
    type: v2.type,
    version: 3,
    deviceId: v2.deviceId,
    capabilities: ((_a2 = v2.capabilityIds) == null ? void 0 : _a2.map((id) => ({ capabilityId: id, title: void 0 }))) ?? []
  };
  return settings;
}
function migrate_v1_v2$3(v1) {
  const settings = {
    id: v1.id,
    type: v1.type,
    version: 2,
    deviceId: v1.deviceId,
    capabilityIds: v1.capabilityId ? [v1.capabilityId] : []
  };
  return settings;
}
const info$l = {
  type: "capability",
  label: "Capability",
  icon: mdiTune,
  category: "component",
  widget: CapabilityWidget,
  editor: CapabilityEditor,
  scopes: [
    { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] }
  ],
  create: create$6,
  migration: migrate$6,
  deprecated: true
};
function instance$1i($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  createEventDispatcher();
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1)
      ;
  };
  return [settings];
}
class CardEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1i, null, safe_not_equal, { settings: 0 });
  }
}
const FINALIZE_EVENT_NAME = "finalize";
const CONSIDER_EVENT_NAME = "consider";
function dispatchFinalizeEvent(el, items, info2) {
  el.dispatchEvent(
    new CustomEvent(FINALIZE_EVENT_NAME, {
      detail: { items, info: info2 }
    })
  );
}
function dispatchConsiderEvent(el, items, info2) {
  el.dispatchEvent(
    new CustomEvent(CONSIDER_EVENT_NAME, {
      detail: { items, info: info2 }
    })
  );
}
const DRAGGED_ENTERED_EVENT_NAME = "draggedEntered";
const DRAGGED_LEFT_EVENT_NAME = "draggedLeft";
const DRAGGED_OVER_INDEX_EVENT_NAME = "draggedOverIndex";
const DRAGGED_LEFT_DOCUMENT_EVENT_NAME = "draggedLeftDocument";
const DRAGGED_LEFT_TYPES = {
  LEFT_FOR_ANOTHER: "leftForAnother",
  OUTSIDE_OF_ANY: "outsideOfAny"
};
function dispatchDraggedElementEnteredContainer(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(
    new CustomEvent(DRAGGED_ENTERED_EVENT_NAME, {
      detail: { indexObj, draggedEl: draggedEl2 }
    })
  );
}
function dispatchDraggedElementLeftContainerForAnother(containerEl, draggedEl2, theOtherDz) {
  containerEl.dispatchEvent(
    new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
      detail: { draggedEl: draggedEl2, type: DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER, theOtherDz }
    })
  );
}
function dispatchDraggedElementLeftContainerForNone(containerEl, draggedEl2) {
  containerEl.dispatchEvent(
    new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
      detail: { draggedEl: draggedEl2, type: DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY }
    })
  );
}
function dispatchDraggedElementIsOverIndex(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(
    new CustomEvent(DRAGGED_OVER_INDEX_EVENT_NAME, {
      detail: { indexObj, draggedEl: draggedEl2 }
    })
  );
}
function dispatchDraggedLeftDocument(draggedEl2) {
  window.dispatchEvent(
    new CustomEvent(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, {
      detail: { draggedEl: draggedEl2 }
    })
  );
}
const TRIGGERS = {
  DRAG_STARTED: "dragStarted",
  DRAGGED_ENTERED: DRAGGED_ENTERED_EVENT_NAME,
  DRAGGED_ENTERED_ANOTHER: "dragEnteredAnother",
  DRAGGED_OVER_INDEX: DRAGGED_OVER_INDEX_EVENT_NAME,
  DRAGGED_LEFT: DRAGGED_LEFT_EVENT_NAME,
  DRAGGED_LEFT_ALL: "draggedLeftAll",
  DROPPED_INTO_ZONE: "droppedIntoZone",
  DROPPED_INTO_ANOTHER: "droppedIntoAnother",
  DROPPED_OUTSIDE_OF_ANY: "droppedOutsideOfAny",
  DRAG_STOPPED: "dragStopped"
};
const SOURCES = {
  POINTER: "pointer",
  KEYBOARD: "keyboard"
};
const SHADOW_ITEM_MARKER_PROPERTY_NAME = "isDndShadowItem";
const SHADOW_ELEMENT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item-internal";
const SHADOW_ELEMENT_HINT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item-hint";
const SHADOW_PLACEHOLDER_ITEM_ID = "id:dnd-shadow-placeholder-0000";
const DRAGGED_ELEMENT_ID = "dnd-action-dragged-el";
let ITEM_ID_KEY = "id";
let activeDndZoneCount = 0;
function incrementActiveDropZoneCount() {
  activeDndZoneCount++;
}
function decrementActiveDropZoneCount() {
  if (activeDndZoneCount === 0) {
    throw new Error("Bug! trying to decrement when there are no dropzones");
  }
  activeDndZoneCount--;
}
const isOnServer = typeof window === "undefined";
function getBoundingRectNoTransforms(el, onlyVisible = true) {
  let ta;
  const rect = onlyVisible ? getVisibleRectRecursive(el) : el.getBoundingClientRect();
  const style = getComputedStyle(el);
  const tx = style.transform;
  if (tx) {
    let sx, sy, dx, dy;
    if (tx.startsWith("matrix3d(")) {
      ta = tx.slice(9, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[5];
      dx = +ta[12];
      dy = +ta[13];
    } else if (tx.startsWith("matrix(")) {
      ta = tx.slice(7, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[3];
      dx = +ta[4];
      dy = +ta[5];
    } else {
      return rect;
    }
    const to2 = style.transformOrigin;
    const x2 = rect.x - dx - (1 - sx) * parseFloat(to2);
    const y3 = rect.y - dy - (1 - sy) * parseFloat(to2.slice(to2.indexOf(" ") + 1));
    const w2 = sx ? rect.width / sx : el.offsetWidth;
    const h3 = sy ? rect.height / sy : el.offsetHeight;
    return {
      x: x2,
      y: y3,
      width: w2,
      height: h3,
      top: y3,
      right: x2 + w2,
      bottom: y3 + h3,
      left: x2
    };
  } else {
    return rect;
  }
}
function getAbsoluteRectNoTransforms(el) {
  const rect = getBoundingRectNoTransforms(el);
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function getAbsoluteRect(el) {
  const rect = el.getBoundingClientRect();
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function findCenter(rect) {
  return {
    x: (rect.left + rect.right) / 2,
    y: (rect.top + rect.bottom) / 2
  };
}
function calcDistance(pointA, pointB) {
  return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
}
function isPointInsideRect(point, rect) {
  return point.y <= rect.bottom && point.y >= rect.top && point.x >= rect.left && point.x <= rect.right;
}
function findCenterOfElement(el) {
  return findCenter(getAbsoluteRect(el));
}
function isCenterOfAInsideB(elA, elB) {
  const centerOfA = findCenterOfElement(elA);
  const rectOfB = getAbsoluteRectNoTransforms(elB);
  return isPointInsideRect(centerOfA, rectOfB);
}
function calcDistanceBetweenCenters(elA, elB) {
  const centerOfA = findCenterOfElement(elA);
  const centerOfB = findCenterOfElement(elB);
  return calcDistance(centerOfA, centerOfB);
}
function isElementOffDocument(el) {
  const rect = getAbsoluteRect(el);
  return rect.right < 0 || rect.left > document.documentElement.scrollWidth || rect.bottom < 0 || rect.top > document.documentElement.scrollHeight;
}
function getVisibleRectRecursive(element2) {
  let rect = element2.getBoundingClientRect();
  let visibleRect = {
    top: rect.top,
    bottom: rect.bottom,
    left: rect.left,
    right: rect.right
  };
  let parent = element2.parentElement;
  while (parent && parent !== document.body) {
    let parentRect = parent.getBoundingClientRect();
    const overflowY = window.getComputedStyle(parent).overflowY;
    const overflowX = window.getComputedStyle(parent).overflowX;
    const isScrollableY = overflowY === "scroll" || overflowY === "auto";
    const isScrollableX = overflowX === "scroll" || overflowX === "auto";
    if (isScrollableY) {
      visibleRect.top = Math.max(visibleRect.top, parentRect.top);
      visibleRect.bottom = Math.min(visibleRect.bottom, parentRect.bottom);
    }
    if (isScrollableX) {
      visibleRect.left = Math.max(visibleRect.left, parentRect.left);
      visibleRect.right = Math.min(visibleRect.right, parentRect.right);
    }
    parent = parent.parentElement;
  }
  visibleRect.top = Math.max(visibleRect.top, 0);
  visibleRect.bottom = Math.min(visibleRect.bottom, window.innerHeight);
  visibleRect.left = Math.max(visibleRect.left, 0);
  visibleRect.right = Math.min(visibleRect.right, window.innerWidth);
  return {
    top: visibleRect.top,
    bottom: visibleRect.bottom,
    left: visibleRect.left,
    right: visibleRect.right,
    width: Math.max(0, visibleRect.right - visibleRect.left),
    height: Math.max(0, visibleRect.bottom - visibleRect.top)
  };
}
let dzToShadowIndexToRect;
function resetIndexesCache() {
  dzToShadowIndexToRect = /* @__PURE__ */ new Map();
}
resetIndexesCache();
function cacheShadowRect(dz) {
  const shadowElIndex = Array.from(dz.children).findIndex((child) => child.getAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME));
  if (shadowElIndex >= 0) {
    if (!dzToShadowIndexToRect.has(dz)) {
      dzToShadowIndexToRect.set(dz, /* @__PURE__ */ new Map());
    }
    dzToShadowIndexToRect.get(dz).set(shadowElIndex, getAbsoluteRectNoTransforms(dz.children[shadowElIndex]));
    return shadowElIndex;
  }
  return void 0;
}
function findWouldBeIndex(floatingAboveEl, collectionBelowEl) {
  if (!isCenterOfAInsideB(floatingAboveEl, collectionBelowEl)) {
    return null;
  }
  const children2 = collectionBelowEl.children;
  if (children2.length === 0) {
    return { index: 0, isProximityBased: true };
  }
  const shadowElIndex = cacheShadowRect(collectionBelowEl);
  for (let i2 = 0; i2 < children2.length; i2++) {
    if (isCenterOfAInsideB(floatingAboveEl, children2[i2])) {
      const cachedShadowRect = dzToShadowIndexToRect.has(collectionBelowEl) && dzToShadowIndexToRect.get(collectionBelowEl).get(i2);
      if (cachedShadowRect) {
        if (!isPointInsideRect(findCenterOfElement(floatingAboveEl), cachedShadowRect)) {
          return { index: shadowElIndex, isProximityBased: false };
        }
      }
      return { index: i2, isProximityBased: false };
    }
  }
  let minDistanceSoFar = Number.MAX_VALUE;
  let indexOfMin = void 0;
  for (let i2 = 0; i2 < children2.length; i2++) {
    const distance = calcDistanceBetweenCenters(floatingAboveEl, children2[i2]);
    if (distance < minDistanceSoFar) {
      minDistanceSoFar = distance;
      indexOfMin = i2;
    }
  }
  return { index: indexOfMin, isProximityBased: true };
}
function toString(object) {
  return JSON.stringify(object, null, 2);
}
function getDepth(node) {
  if (!node) {
    throw new Error("cannot get depth of a falsy node");
  }
  return _getDepth(node, 0);
}
function _getDepth(node, countSoFar = 0) {
  if (!node.parentElement) {
    return countSoFar - 1;
  }
  return _getDepth(node.parentElement, countSoFar + 1);
}
function areObjectsShallowEqual(objA, objB) {
  if (Object.keys(objA).length !== Object.keys(objB).length) {
    return false;
  }
  for (const keyA in objA) {
    if (!{}.hasOwnProperty.call(objB, keyA) || objB[keyA] !== objA[keyA]) {
      return false;
    }
  }
  return true;
}
function areArraysShallowEqualSameOrder(arrA, arrB) {
  if (arrA.length !== arrB.length) {
    return false;
  }
  for (let i2 = 0; i2 < arrA.length; i2++) {
    if (arrA[i2] !== arrB[i2]) {
      return false;
    }
  }
  return true;
}
const INTERVAL_MS = 200;
const TOLERANCE_PX = 10;
let next;
function observe(draggedEl2, dropZones, intervalMs = INTERVAL_MS, multiScroller2) {
  let lastDropZoneFound;
  let lastIndexFound;
  let lastIsDraggedInADropZone = false;
  let lastCentrePositionOfDragged;
  const dropZonesFromDeepToShallow = Array.from(dropZones).sort((dz1, dz2) => getDepth(dz2) - getDepth(dz1));
  function andNow() {
    const currentCenterOfDragged = findCenterOfElement(draggedEl2);
    const scrolled = multiScroller2.multiScrollIfNeeded();
    if (!scrolled && lastCentrePositionOfDragged && Math.abs(lastCentrePositionOfDragged.x - currentCenterOfDragged.x) < TOLERANCE_PX && Math.abs(lastCentrePositionOfDragged.y - currentCenterOfDragged.y) < TOLERANCE_PX) {
      next = window.setTimeout(andNow, intervalMs);
      return;
    }
    if (isElementOffDocument(draggedEl2)) {
      dispatchDraggedLeftDocument(draggedEl2);
      return;
    }
    lastCentrePositionOfDragged = currentCenterOfDragged;
    let isDraggedInADropZone = false;
    for (const dz of dropZonesFromDeepToShallow) {
      if (scrolled)
        resetIndexesCache();
      const indexObj = findWouldBeIndex(draggedEl2, dz);
      if (indexObj === null) {
        continue;
      }
      const { index: index2 } = indexObj;
      isDraggedInADropZone = true;
      if (dz !== lastDropZoneFound) {
        lastDropZoneFound && dispatchDraggedElementLeftContainerForAnother(lastDropZoneFound, draggedEl2, dz);
        dispatchDraggedElementEnteredContainer(dz, indexObj, draggedEl2);
        lastDropZoneFound = dz;
      } else if (index2 !== lastIndexFound) {
        dispatchDraggedElementIsOverIndex(dz, indexObj, draggedEl2);
        lastIndexFound = index2;
      }
      break;
    }
    if (!isDraggedInADropZone && lastIsDraggedInADropZone && lastDropZoneFound) {
      dispatchDraggedElementLeftContainerForNone(lastDropZoneFound, draggedEl2);
      lastDropZoneFound = void 0;
      lastIndexFound = void 0;
      lastIsDraggedInADropZone = false;
    } else {
      lastIsDraggedInADropZone = true;
    }
    next = window.setTimeout(andNow, intervalMs);
  }
  andNow();
}
function unobserve() {
  clearTimeout(next);
  resetIndexesCache();
}
const SCROLL_ZONE_PX = 30;
function makeScroller() {
  let scrollingInfo;
  function resetScrolling() {
    scrollingInfo = { directionObj: void 0, stepPx: 0 };
  }
  resetScrolling();
  function scrollContainer(containerEl) {
    const { directionObj, stepPx } = scrollingInfo;
    if (directionObj) {
      containerEl.scrollBy(directionObj.x * stepPx, directionObj.y * stepPx);
      window.requestAnimationFrame(() => scrollContainer(containerEl));
    }
  }
  function calcScrollStepPx(distancePx) {
    return SCROLL_ZONE_PX - distancePx;
  }
  function scrollIfNeeded(pointer, elementToScroll) {
    if (!elementToScroll) {
      return false;
    }
    const distances = calcInnerDistancesBetweenPointAndSidesOfElement(pointer, elementToScroll);
    const isAlreadyScrolling = !!scrollingInfo.directionObj;
    if (distances === null) {
      if (isAlreadyScrolling)
        resetScrolling();
      return false;
    }
    let [scrollingVertically, scrollingHorizontally] = [false, false];
    if (elementToScroll.scrollHeight > elementToScroll.clientHeight) {
      if (distances.bottom < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = { x: 0, y: 1 };
        scrollingInfo.stepPx = calcScrollStepPx(distances.bottom);
      } else if (distances.top < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = { x: 0, y: -1 };
        scrollingInfo.stepPx = calcScrollStepPx(distances.top);
      }
      if (!isAlreadyScrolling && scrollingVertically) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    if (elementToScroll.scrollWidth > elementToScroll.clientWidth) {
      if (distances.right < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = { x: 1, y: 0 };
        scrollingInfo.stepPx = calcScrollStepPx(distances.right);
      } else if (distances.left < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = { x: -1, y: 0 };
        scrollingInfo.stepPx = calcScrollStepPx(distances.left);
      }
      if (!isAlreadyScrolling && scrollingHorizontally) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    resetScrolling();
    return false;
  }
  return {
    scrollIfNeeded,
    resetScrolling
  };
}
function calcInnerDistancesBetweenPointAndSidesOfElement(point, el) {
  const rect = el === document.scrollingElement ? {
    top: 0,
    bottom: window.innerHeight,
    left: 0,
    right: window.innerWidth
  } : el.getBoundingClientRect();
  if (!isPointInsideRect(point, rect)) {
    return null;
  }
  return {
    top: point.y - rect.top,
    bottom: rect.bottom - point.y,
    left: point.x - rect.left,
    right: rect.right - point.x
  };
}
function createMultiScroller(baseElementsForScrolling = [], getPointerPosition) {
  const scrollingContainersSet = findRelevantScrollContainers(baseElementsForScrolling);
  const scrollingContainersDeepToShallow = Array.from(scrollingContainersSet).sort((dz1, dz2) => getDepth(dz2) - getDepth(dz1));
  const { scrollIfNeeded, resetScrolling } = makeScroller();
  function tick2() {
    const mousePosition = getPointerPosition();
    if (!mousePosition || !scrollingContainersDeepToShallow) {
      return false;
    }
    const scrollContainersUnderCursor = scrollingContainersDeepToShallow.filter(
      (el) => isPointInsideRect(mousePosition, el.getBoundingClientRect()) || el === document.scrollingElement
    );
    for (let i2 = 0; i2 < scrollContainersUnderCursor.length; i2++) {
      const scrolled = scrollIfNeeded(mousePosition, scrollContainersUnderCursor[i2]);
      if (scrolled) {
        return true;
      }
    }
    return false;
  }
  return {
    multiScrollIfNeeded: scrollingContainersSet.size > 0 ? tick2 : () => false,
    destroy: () => resetScrolling()
  };
}
function findScrollableParents(element2) {
  if (!element2) {
    return [];
  }
  const scrollableContainers = [];
  let parent = element2;
  while (parent) {
    const { overflow } = window.getComputedStyle(parent);
    if (overflow.split(" ").some((o) => o.includes("auto") || o.includes("scroll"))) {
      scrollableContainers.push(parent);
    }
    parent = parent.parentElement;
  }
  return scrollableContainers;
}
function findRelevantScrollContainers(dropZones) {
  const scrollingContainers = /* @__PURE__ */ new Set();
  for (let dz of dropZones) {
    findScrollableParents(dz).forEach((container) => scrollingContainers.add(container));
  }
  if (document.scrollingElement.scrollHeight > document.scrollingElement.clientHeight || document.scrollingElement.scrollWidth > document.scrollingElement.clientHeight) {
    scrollingContainers.add(document.scrollingElement);
  }
  return scrollingContainers;
}
function svelteNodeClone(el) {
  const cloned = el.cloneNode(true);
  const values = [];
  const elIsSelect = el.tagName === "SELECT";
  const selects = elIsSelect ? [el] : [...el.querySelectorAll("select")];
  for (const select of selects) {
    values.push(select.value);
  }
  if (selects.length > 0) {
    const clonedSelects = elIsSelect ? [cloned] : [...cloned.querySelectorAll("select")];
    for (let i2 = 0; i2 < clonedSelects.length; i2++) {
      const select = clonedSelects[i2];
      const value = values[i2];
      const optionEl = select.querySelector(`option[value="${value}"`);
      if (optionEl) {
        optionEl.setAttribute("selected", true);
      }
    }
  }
  const elIsCanvas = el.tagName === "CANVAS";
  const canvases = elIsCanvas ? [el] : [...el.querySelectorAll("canvas")];
  if (canvases.length > 0) {
    const clonedCanvases = elIsCanvas ? [cloned] : [...cloned.querySelectorAll("canvas")];
    for (let i2 = 0; i2 < clonedCanvases.length; i2++) {
      const canvas = canvases[i2];
      const clonedCanvas = clonedCanvases[i2];
      clonedCanvas.width = canvas.width;
      clonedCanvas.height = canvas.height;
      if (canvas.width > 0 && canvas.height > 0) {
        clonedCanvas.getContext("2d").drawImage(canvas, 0, 0);
      }
    }
  }
  return cloned;
}
const FEATURE_FLAG_NAMES = Object.freeze({
  // This flag exists as a workaround for issue 454 (basically a browser bug) - seems like these rect values take time to update when in grid layout. Setting it to true can cause strange behaviour in the REPL for non-grid zones, see issue 470
  USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT: "USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT"
});
const featureFlagsMap = {
  [FEATURE_FLAG_NAMES.USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT]: false
};
function getFeatureFlag(flagName) {
  if (!FEATURE_FLAG_NAMES[flagName])
    throw new Error(`Can't get non existing feature flag ${flagName}! Supported flags: ${Object.keys(FEATURE_FLAG_NAMES)}`);
  return featureFlagsMap[flagName];
}
const TRANSITION_DURATION_SECONDS = 0.2;
function trs(property) {
  return `${property} ${TRANSITION_DURATION_SECONDS}s ease`;
}
function createDraggedElementFrom(originalElement, positionCenterOnXY) {
  const rect = originalElement.getBoundingClientRect();
  const draggedEl2 = svelteNodeClone(originalElement);
  copyStylesFromTo(originalElement, draggedEl2);
  draggedEl2.id = DRAGGED_ELEMENT_ID;
  draggedEl2.style.position = "fixed";
  let elTopPx = rect.top;
  let elLeftPx = rect.left;
  draggedEl2.style.top = `${elTopPx}px`;
  draggedEl2.style.left = `${elLeftPx}px`;
  if (positionCenterOnXY) {
    const center = findCenter(rect);
    elTopPx -= center.y - positionCenterOnXY.y;
    elLeftPx -= center.x - positionCenterOnXY.x;
    window.setTimeout(() => {
      draggedEl2.style.top = `${elTopPx}px`;
      draggedEl2.style.left = `${elLeftPx}px`;
    }, 0);
  }
  draggedEl2.style.margin = "0";
  draggedEl2.style.boxSizing = "border-box";
  draggedEl2.style.height = `${rect.height}px`;
  draggedEl2.style.width = `${rect.width}px`;
  draggedEl2.style.transition = `${trs("top")}, ${trs("left")}, ${trs("background-color")}, ${trs("opacity")}, ${trs("color")} `;
  window.setTimeout(() => draggedEl2.style.transition += `, ${trs("width")}, ${trs("height")}`, 0);
  draggedEl2.style.zIndex = "9999";
  draggedEl2.style.cursor = "grabbing";
  return draggedEl2;
}
function moveDraggedElementToWasDroppedState(draggedEl2) {
  draggedEl2.style.cursor = "grab";
}
function morphDraggedElementToBeLike(draggedEl2, copyFromEl, currentMouseX, currentMouseY) {
  copyStylesFromTo(copyFromEl, draggedEl2);
  const newRect = copyFromEl.getBoundingClientRect();
  const draggedElRect = draggedEl2.getBoundingClientRect();
  const widthChange = newRect.width - draggedElRect.width;
  const heightChange = newRect.height - draggedElRect.height;
  if (widthChange || heightChange) {
    const relativeDistanceOfMousePointerFromDraggedSides = {
      left: (currentMouseX - draggedElRect.left) / draggedElRect.width,
      top: (currentMouseY - draggedElRect.top) / draggedElRect.height
    };
    if (!getFeatureFlag(FEATURE_FLAG_NAMES.USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT)) {
      draggedEl2.style.height = `${newRect.height}px`;
      draggedEl2.style.width = `${newRect.width}px`;
    }
    draggedEl2.style.left = `${parseFloat(draggedEl2.style.left) - relativeDistanceOfMousePointerFromDraggedSides.left * widthChange}px`;
    draggedEl2.style.top = `${parseFloat(draggedEl2.style.top) - relativeDistanceOfMousePointerFromDraggedSides.top * heightChange}px`;
  }
}
function copyStylesFromTo(copyFromEl, copyToEl) {
  const computedStyle = window.getComputedStyle(copyFromEl);
  Array.from(computedStyle).filter(
    (s3) => s3.startsWith("background") || s3.startsWith("padding") || s3.startsWith("font") || s3.startsWith("text") || s3.startsWith("align") || s3.startsWith("justify") || s3.startsWith("display") || s3.startsWith("flex") || s3.startsWith("border") || s3 === "opacity" || s3 === "color" || s3 === "list-style-type" || // copying with and height to make up for rect update timing issues in some browsers
    getFeatureFlag(FEATURE_FLAG_NAMES.USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT) && (s3 === "width" || s3 === "height")
  ).forEach((s3) => copyToEl.style.setProperty(s3, computedStyle.getPropertyValue(s3), computedStyle.getPropertyPriority(s3)));
}
function styleDraggable(draggableEl, dragDisabled) {
  draggableEl.draggable = false;
  draggableEl.ondragstart = () => false;
  if (!dragDisabled) {
    draggableEl.style.userSelect = "none";
    draggableEl.style.WebkitUserSelect = "none";
    draggableEl.style.cursor = "grab";
  } else {
    draggableEl.style.userSelect = "";
    draggableEl.style.WebkitUserSelect = "";
    draggableEl.style.cursor = "";
  }
}
function hideElement(dragTarget) {
  dragTarget.style.display = "none";
  dragTarget.style.position = "fixed";
  dragTarget.style.zIndex = "-5";
}
function decorateShadowEl(shadowEl) {
  shadowEl.style.visibility = "hidden";
  shadowEl.setAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME, "true");
}
function unDecorateShadowElement(shadowEl) {
  shadowEl.style.visibility = "";
  shadowEl.removeAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
}
function styleActiveDropZones(dropZones, getStyles = () => {
}, getClasses = () => []) {
  dropZones.forEach((dz) => {
    const styles = getStyles(dz);
    Object.keys(styles).forEach((style) => {
      dz.style[style] = styles[style];
    });
    getClasses(dz).forEach((c2) => dz.classList.add(c2));
  });
}
function styleInactiveDropZones(dropZones, getStyles = () => {
}, getClasses = () => []) {
  dropZones.forEach((dz) => {
    const styles = getStyles(dz);
    Object.keys(styles).forEach((style) => {
      dz.style[style] = "";
    });
    getClasses(dz).forEach((c2) => dz.classList.contains(c2) && dz.classList.remove(c2));
  });
}
function preventShrinking(el) {
  const originalMinHeight = el.style.minHeight;
  el.style.minHeight = window.getComputedStyle(el).getPropertyValue("height");
  const originalMinWidth = el.style.minWidth;
  el.style.minWidth = window.getComputedStyle(el).getPropertyValue("width");
  return function undo() {
    el.style.minHeight = originalMinHeight;
    el.style.minWidth = originalMinWidth;
  };
}
const DEFAULT_DROP_ZONE_TYPE$1 = "--any--";
const MIN_OBSERVATION_INTERVAL_MS = 100;
const DISABLED_OBSERVATION_INTERVAL_MS = 20;
const MIN_MOVEMENT_BEFORE_DRAG_START_PX = 3;
const DEFAULT_DROP_TARGET_STYLE$1 = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
const ORIGINAL_DRAGGED_ITEM_MARKER_ATTRIBUTE = "data-is-dnd-original-dragged-item";
let originalDragTarget;
let draggedEl;
let draggedElData;
let draggedElType;
let originDropZone;
let originIndex;
let shadowElData;
let shadowElDropZone;
let dragStartMousePosition;
let currentMousePosition;
let isWorkingOnPreviousDrag = false;
let finalizingPreviousDrag = false;
let unlockOriginDzMinDimensions;
let isDraggedOutsideOfAnyDz = false;
let scheduledForRemovalAfterDrop = [];
let multiScroller;
const typeToDropZones$1 = /* @__PURE__ */ new Map();
const dzToConfig$1 = /* @__PURE__ */ new Map();
const elToMouseDownListener = /* @__PURE__ */ new WeakMap();
function registerDropZone$1(dropZoneEl, type) {
  if (!typeToDropZones$1.has(type)) {
    typeToDropZones$1.set(type, /* @__PURE__ */ new Set());
  }
  if (!typeToDropZones$1.get(type).has(dropZoneEl)) {
    typeToDropZones$1.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone$1(dropZoneEl, type) {
  typeToDropZones$1.get(type).delete(dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones$1.get(type).size === 0) {
    typeToDropZones$1.delete(type);
  }
}
function watchDraggedElement() {
  const dropZones = typeToDropZones$1.get(draggedElType);
  for (const dz of dropZones) {
    dz.addEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
    dz.addEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
    dz.addEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
  }
  window.addEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop$1);
  const setIntervalMs = Math.max(...Array.from(dropZones.keys()).map((dz) => dzToConfig$1.get(dz).dropAnimationDurationMs));
  const observationIntervalMs = setIntervalMs === 0 ? DISABLED_OBSERVATION_INTERVAL_MS : Math.max(setIntervalMs, MIN_OBSERVATION_INTERVAL_MS);
  multiScroller = createMultiScroller(dropZones, () => currentMousePosition);
  observe(draggedEl, dropZones, observationIntervalMs * 1.07, multiScroller);
}
function unWatchDraggedElement() {
  const dropZones = typeToDropZones$1.get(draggedElType);
  for (const dz of dropZones) {
    dz.removeEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
    dz.removeEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
    dz.removeEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
  }
  window.removeEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop$1);
  if (multiScroller) {
    multiScroller.destroy();
    multiScroller = void 0;
  }
  unobserve();
}
function findShadowElementIdx(items) {
  return items.findIndex((item) => !!item[SHADOW_ITEM_MARKER_PROPERTY_NAME]);
}
function createShadowElData(draggedElData2) {
  return { ...draggedElData2, [SHADOW_ITEM_MARKER_PROPERTY_NAME]: true, [ITEM_ID_KEY]: SHADOW_PLACEHOLDER_ITEM_ID };
}
function handleDraggedEntered(e2) {
  let { items, dropFromOthersDisabled } = dzToConfig$1.get(e2.currentTarget);
  if (dropFromOthersDisabled && e2.currentTarget !== originDropZone) {
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  items = items.filter((item) => item[ITEM_ID_KEY] !== shadowElData[ITEM_ID_KEY]);
  if (originDropZone !== e2.currentTarget) {
    const originZoneItems = dzToConfig$1.get(originDropZone).items;
    const newOriginZoneItems = originZoneItems.filter((item) => !item[SHADOW_ITEM_MARKER_PROPERTY_NAME]);
    dispatchConsiderEvent(originDropZone, newOriginZoneItems, {
      trigger: TRIGGERS.DRAGGED_ENTERED_ANOTHER,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  const { index: index2, isProximityBased } = e2.detail.indexObj;
  const shadowElIdx = isProximityBased && index2 === e2.currentTarget.children.length - 1 ? index2 + 1 : index2;
  shadowElDropZone = e2.currentTarget;
  items.splice(shadowElIdx, 0, shadowElData);
  dispatchConsiderEvent(e2.currentTarget, items, { trigger: TRIGGERS.DRAGGED_ENTERED, id: draggedElData[ITEM_ID_KEY], source: SOURCES.POINTER });
}
function handleDraggedLeft(e2) {
  if (!isWorkingOnPreviousDrag)
    return;
  const { items: originalItems, dropFromOthersDisabled } = dzToConfig$1.get(e2.currentTarget);
  if (dropFromOthersDisabled && e2.currentTarget !== originDropZone && e2.currentTarget !== shadowElDropZone) {
    return;
  }
  const items = [...originalItems];
  const shadowElIdx = findShadowElementIdx(items);
  if (shadowElIdx !== -1) {
    items.splice(shadowElIdx, 1);
  }
  const origShadowDz = shadowElDropZone;
  shadowElDropZone = void 0;
  const { type, theOtherDz } = e2.detail;
  if (type === DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY || type === DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER && theOtherDz !== originDropZone && dzToConfig$1.get(theOtherDz).dropFromOthersDisabled) {
    isDraggedOutsideOfAnyDz = true;
    shadowElDropZone = originDropZone;
    const originZoneItems = origShadowDz === originDropZone ? items : [...dzToConfig$1.get(originDropZone).items];
    originZoneItems.splice(originIndex, 0, shadowElData);
    dispatchConsiderEvent(originDropZone, originZoneItems, {
      trigger: TRIGGERS.DRAGGED_LEFT_ALL,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  dispatchConsiderEvent(e2.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_LEFT,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedIsOverIndex(e2) {
  const { items: originalItems, dropFromOthersDisabled } = dzToConfig$1.get(e2.currentTarget);
  if (dropFromOthersDisabled && e2.currentTarget !== originDropZone) {
    return;
  }
  const items = [...originalItems];
  isDraggedOutsideOfAnyDz = false;
  const { index: index2 } = e2.detail.indexObj;
  const shadowElIdx = findShadowElementIdx(items);
  if (shadowElIdx !== -1) {
    items.splice(shadowElIdx, 1);
  }
  items.splice(index2, 0, shadowElData);
  dispatchConsiderEvent(e2.currentTarget, items, { trigger: TRIGGERS.DRAGGED_OVER_INDEX, id: draggedElData[ITEM_ID_KEY], source: SOURCES.POINTER });
}
function handleMouseMove(e2) {
  e2.preventDefault();
  const c2 = e2.touches ? e2.touches[0] : e2;
  currentMousePosition = { x: c2.clientX, y: c2.clientY };
  draggedEl.style.transform = `translate3d(${currentMousePosition.x - dragStartMousePosition.x}px, ${currentMousePosition.y - dragStartMousePosition.y}px, 0)`;
}
function handleDrop$1() {
  finalizingPreviousDrag = true;
  window.removeEventListener("mousemove", handleMouseMove);
  window.removeEventListener("touchmove", handleMouseMove);
  window.removeEventListener("mouseup", handleDrop$1);
  window.removeEventListener("touchend", handleDrop$1);
  unWatchDraggedElement();
  moveDraggedElementToWasDroppedState(draggedEl);
  if (!shadowElDropZone) {
    shadowElDropZone = originDropZone;
  }
  let { items, type } = dzToConfig$1.get(shadowElDropZone);
  styleInactiveDropZones(
    typeToDropZones$1.get(type),
    (dz) => dzToConfig$1.get(dz).dropTargetStyle,
    (dz) => dzToConfig$1.get(dz).dropTargetClasses
  );
  let shadowElIdx = findShadowElementIdx(items);
  if (shadowElIdx === -1) {
    if (shadowElDropZone === originDropZone) {
      shadowElIdx = originIndex;
    }
  }
  items = items.map((item) => item[SHADOW_ITEM_MARKER_PROPERTY_NAME] ? draggedElData : item);
  function finalizeWithinZone() {
    unlockOriginDzMinDimensions();
    dispatchFinalizeEvent(shadowElDropZone, items, {
      trigger: isDraggedOutsideOfAnyDz ? TRIGGERS.DROPPED_OUTSIDE_OF_ANY : TRIGGERS.DROPPED_INTO_ZONE,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    if (shadowElDropZone !== originDropZone) {
      dispatchFinalizeEvent(originDropZone, dzToConfig$1.get(originDropZone).items, {
        trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
    }
    const domShadowEl = Array.from(shadowElDropZone.children).find((c2) => c2.getAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME));
    if (domShadowEl)
      unDecorateShadowElement(domShadowEl);
    cleanupPostDrop();
  }
  if (dzToConfig$1.get(shadowElDropZone).dropAnimationDisabled) {
    finalizeWithinZone();
  } else {
    animateDraggedToFinalPosition(shadowElIdx, finalizeWithinZone);
  }
}
function animateDraggedToFinalPosition(shadowElIdx, callback2) {
  const shadowElRect = shadowElIdx > -1 ? getBoundingRectNoTransforms(shadowElDropZone.children[shadowElIdx], false) : getBoundingRectNoTransforms(shadowElDropZone, false);
  const newTransform = {
    x: shadowElRect.left - parseFloat(draggedEl.style.left),
    y: shadowElRect.top - parseFloat(draggedEl.style.top)
  };
  const { dropAnimationDurationMs } = dzToConfig$1.get(shadowElDropZone);
  const transition = `transform ${dropAnimationDurationMs}ms ease`;
  draggedEl.style.transition = draggedEl.style.transition ? draggedEl.style.transition + "," + transition : transition;
  draggedEl.style.transform = `translate3d(${newTransform.x}px, ${newTransform.y}px, 0)`;
  window.setTimeout(callback2, dropAnimationDurationMs);
}
function scheduleDZForRemovalAfterDrop(dz, destroy) {
  scheduledForRemovalAfterDrop.push({ dz, destroy });
  window.requestAnimationFrame(() => {
    hideElement(dz);
    document.body.appendChild(dz);
  });
}
function cleanupPostDrop() {
  draggedEl.remove();
  originalDragTarget.remove();
  if (scheduledForRemovalAfterDrop.length) {
    scheduledForRemovalAfterDrop.forEach(({ dz, destroy }) => {
      destroy();
      dz.remove();
    });
    scheduledForRemovalAfterDrop = [];
  }
  draggedEl = void 0;
  originalDragTarget = void 0;
  draggedElData = void 0;
  draggedElType = void 0;
  originDropZone = void 0;
  originIndex = void 0;
  shadowElData = void 0;
  shadowElDropZone = void 0;
  dragStartMousePosition = void 0;
  currentMousePosition = void 0;
  isWorkingOnPreviousDrag = false;
  finalizingPreviousDrag = false;
  unlockOriginDzMinDimensions = void 0;
  isDraggedOutsideOfAnyDz = false;
}
function dndzone$2(node, options) {
  let initialized = false;
  const config = {
    items: void 0,
    type: void 0,
    flipDurationMs: 0,
    dragDisabled: false,
    morphDisabled: false,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE$1,
    dropTargetClasses: [],
    transformDraggedElement: () => {
    },
    centreDraggedOnCursor: false,
    dropAnimationDisabled: false
  };
  let elToIdx = /* @__PURE__ */ new Map();
  function addMaybeListeners() {
    window.addEventListener("mousemove", handleMouseMoveMaybeDragStart, { passive: false });
    window.addEventListener("touchmove", handleMouseMoveMaybeDragStart, { passive: false, capture: false });
    window.addEventListener("mouseup", handleFalseAlarm, { passive: false });
    window.addEventListener("touchend", handleFalseAlarm, { passive: false });
  }
  function removeMaybeListeners() {
    window.removeEventListener("mousemove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("touchmove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("mouseup", handleFalseAlarm);
    window.removeEventListener("touchend", handleFalseAlarm);
  }
  function handleFalseAlarm(e2) {
    removeMaybeListeners();
    originalDragTarget = void 0;
    dragStartMousePosition = void 0;
    currentMousePosition = void 0;
    if (e2.type === "touchend") {
      const clickEvent = new Event("click", {
        bubbles: true,
        cancelable: true
      });
      e2.target.dispatchEvent(clickEvent);
    }
  }
  function handleMouseMoveMaybeDragStart(e2) {
    e2.preventDefault();
    const c2 = e2.touches ? e2.touches[0] : e2;
    currentMousePosition = { x: c2.clientX, y: c2.clientY };
    if (Math.abs(currentMousePosition.x - dragStartMousePosition.x) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX || Math.abs(currentMousePosition.y - dragStartMousePosition.y) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX) {
      removeMaybeListeners();
      handleDragStart();
    }
  }
  function handleMouseDown(e2) {
    if (e2.target !== e2.currentTarget && (e2.target.value !== void 0 || e2.target.isContentEditable)) {
      return;
    }
    if (e2.button) {
      return;
    }
    if (isWorkingOnPreviousDrag) {
      return;
    }
    e2.preventDefault();
    e2.stopPropagation();
    const c2 = e2.touches ? e2.touches[0] : e2;
    dragStartMousePosition = { x: c2.clientX, y: c2.clientY };
    currentMousePosition = { ...dragStartMousePosition };
    originalDragTarget = e2.currentTarget;
    addMaybeListeners();
  }
  function handleDragStart() {
    isWorkingOnPreviousDrag = true;
    const currentIdx = elToIdx.get(originalDragTarget);
    originIndex = currentIdx;
    originDropZone = originalDragTarget.parentElement;
    const rootNode = originDropZone.closest("dialog") || originDropZone.closest("[popover]") || originDropZone.getRootNode();
    const originDropZoneRoot = rootNode.body || rootNode;
    const { items: originalItems, type, centreDraggedOnCursor } = config;
    const items = [...originalItems];
    draggedElData = items[currentIdx];
    draggedElType = type;
    shadowElData = createShadowElData(draggedElData);
    draggedEl = createDraggedElementFrom(originalDragTarget, centreDraggedOnCursor && currentMousePosition);
    originDropZoneRoot.appendChild(draggedEl);
    function keepOriginalElementInDom() {
      if (!originalDragTarget.parentElement) {
        originalDragTarget.setAttribute(ORIGINAL_DRAGGED_ITEM_MARKER_ATTRIBUTE, true);
        originDropZoneRoot.appendChild(originalDragTarget);
        watchDraggedElement();
        hideElement(originalDragTarget);
        shadowElData[ITEM_ID_KEY] = draggedElData[ITEM_ID_KEY];
        draggedEl.focus();
      } else {
        window.requestAnimationFrame(keepOriginalElementInDom);
      }
    }
    window.requestAnimationFrame(keepOriginalElementInDom);
    styleActiveDropZones(
      Array.from(typeToDropZones$1.get(config.type)).filter((dz) => dz === originDropZone || !dzToConfig$1.get(dz).dropFromOthersDisabled),
      (dz) => dzToConfig$1.get(dz).dropTargetStyle,
      (dz) => dzToConfig$1.get(dz).dropTargetClasses
    );
    items.splice(currentIdx, 1, shadowElData);
    unlockOriginDzMinDimensions = preventShrinking(originDropZone);
    dispatchConsiderEvent(originDropZone, items, { trigger: TRIGGERS.DRAG_STARTED, id: draggedElData[ITEM_ID_KEY], source: SOURCES.POINTER });
    window.addEventListener("mousemove", handleMouseMove, { passive: false });
    window.addEventListener("touchmove", handleMouseMove, { passive: false, capture: false });
    window.addEventListener("mouseup", handleDrop$1, { passive: false });
    window.addEventListener("touchend", handleDrop$1, { passive: false });
  }
  function configure({
    items = void 0,
    flipDurationMs: dropAnimationDurationMs = 0,
    type: newType = DEFAULT_DROP_ZONE_TYPE$1,
    dragDisabled = false,
    morphDisabled = false,
    dropFromOthersDisabled = false,
    dropTargetStyle = DEFAULT_DROP_TARGET_STYLE$1,
    dropTargetClasses = [],
    transformDraggedElement = () => {
    },
    centreDraggedOnCursor = false,
    dropAnimationDisabled = false
  }) {
    config.dropAnimationDurationMs = dropAnimationDurationMs;
    if (config.type && newType !== config.type) {
      unregisterDropZone$1(node, config.type);
    }
    config.type = newType;
    config.items = [...items];
    config.dragDisabled = dragDisabled;
    config.morphDisabled = morphDisabled;
    config.transformDraggedElement = transformDraggedElement;
    config.centreDraggedOnCursor = centreDraggedOnCursor;
    config.dropAnimationDisabled = dropAnimationDisabled;
    if (initialized && isWorkingOnPreviousDrag && !finalizingPreviousDrag && (!areObjectsShallowEqual(dropTargetStyle, config.dropTargetStyle) || !areArraysShallowEqualSameOrder(dropTargetClasses, config.dropTargetClasses))) {
      styleInactiveDropZones(
        [node],
        () => config.dropTargetStyle,
        () => dropTargetClasses
      );
      styleActiveDropZones(
        [node],
        () => dropTargetStyle,
        () => dropTargetClasses
      );
    }
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = [...dropTargetClasses];
    function getConfigProp(dz, propName) {
      return dzToConfig$1.get(dz) ? dzToConfig$1.get(dz)[propName] : config[propName];
    }
    if (initialized && isWorkingOnPreviousDrag && config.dropFromOthersDisabled !== dropFromOthersDisabled) {
      if (dropFromOthersDisabled) {
        styleInactiveDropZones(
          [node],
          (dz) => getConfigProp(dz, "dropTargetStyle"),
          (dz) => getConfigProp(dz, "dropTargetClasses")
        );
      } else {
        styleActiveDropZones(
          [node],
          (dz) => getConfigProp(dz, "dropTargetStyle"),
          (dz) => getConfigProp(dz, "dropTargetClasses")
        );
      }
    }
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    dzToConfig$1.set(node, config);
    registerDropZone$1(node, newType);
    const shadowElIdx = isWorkingOnPreviousDrag ? findShadowElementIdx(config.items) : -1;
    for (let idx = 0; idx < node.children.length; idx++) {
      const draggableEl = node.children[idx];
      styleDraggable(draggableEl, dragDisabled);
      if (idx === shadowElIdx) {
        if (!morphDisabled) {
          morphDraggedElementToBeLike(draggedEl, draggableEl, currentMousePosition.x, currentMousePosition.y);
        }
        config.transformDraggedElement(draggedEl, draggedElData, idx);
        decorateShadowEl(draggableEl);
        continue;
      }
      draggableEl.removeEventListener("mousedown", elToMouseDownListener.get(draggableEl));
      draggableEl.removeEventListener("touchstart", elToMouseDownListener.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("mousedown", handleMouseDown);
        draggableEl.addEventListener("touchstart", handleMouseDown);
        elToMouseDownListener.set(draggableEl, handleMouseDown);
      }
      elToIdx.set(draggableEl, idx);
      if (!initialized) {
        initialized = true;
      }
    }
  }
  configure(options);
  return {
    update: (newOptions) => {
      configure(newOptions);
    },
    destroy: () => {
      function destroyDz() {
        unregisterDropZone$1(node, dzToConfig$1.get(node).type);
        dzToConfig$1.delete(node);
      }
      if (isWorkingOnPreviousDrag && !node.closest(`[${ORIGINAL_DRAGGED_ITEM_MARKER_ATTRIBUTE}]`)) {
        scheduleDZForRemovalAfterDrop(node, destroyDz);
      } else {
        destroyDz();
      }
    }
  };
}
const INSTRUCTION_IDs$1 = {
  DND_ZONE_ACTIVE: "dnd-zone-active",
  DND_ZONE_DRAG_DISABLED: "dnd-zone-drag-disabled"
};
const ID_TO_INSTRUCTION = {
  [INSTRUCTION_IDs$1.DND_ZONE_ACTIVE]: "Tab to one the items and press space-bar or enter to start dragging it",
  [INSTRUCTION_IDs$1.DND_ZONE_DRAG_DISABLED]: "This is a disabled drag and drop list"
};
const ALERT_DIV_ID = "dnd-action-aria-alert";
let alertsDiv;
function initAriaOnBrowser() {
  if (alertsDiv) {
    return;
  }
  alertsDiv = document.createElement("div");
  (function initAlertsDiv() {
    alertsDiv.id = ALERT_DIV_ID;
    alertsDiv.style.position = "fixed";
    alertsDiv.style.bottom = "0";
    alertsDiv.style.left = "0";
    alertsDiv.style.zIndex = "-5";
    alertsDiv.style.opacity = "0";
    alertsDiv.style.height = "0";
    alertsDiv.style.width = "0";
    alertsDiv.setAttribute("role", "alert");
  })();
  document.body.prepend(alertsDiv);
  Object.entries(ID_TO_INSTRUCTION).forEach(([id, txt]) => document.body.prepend(instructionToHiddenDiv(id, txt)));
}
function initAria() {
  if (isOnServer)
    return null;
  if (document.readyState === "complete") {
    initAriaOnBrowser();
  } else {
    window.addEventListener("DOMContentLoaded", initAriaOnBrowser);
  }
  return { ...INSTRUCTION_IDs$1 };
}
function destroyAria() {
  if (isOnServer || !alertsDiv)
    return;
  Object.keys(ID_TO_INSTRUCTION).forEach((id) => {
    var _a2;
    return (_a2 = document.getElementById(id)) == null ? void 0 : _a2.remove();
  });
  alertsDiv.remove();
  alertsDiv = void 0;
}
function instructionToHiddenDiv(id, txt) {
  const div = document.createElement("div");
  div.id = id;
  div.innerHTML = `<p>${txt}</p>`;
  div.style.display = "none";
  div.style.position = "fixed";
  div.style.zIndex = "-5";
  return div;
}
function alertToScreenReader(txt) {
  if (isOnServer)
    return;
  if (!alertsDiv) {
    initAriaOnBrowser();
  }
  alertsDiv.innerHTML = "";
  const alertText = document.createTextNode(txt);
  alertsDiv.appendChild(alertText);
  alertsDiv.style.display = "none";
  alertsDiv.style.display = "inline";
}
const DEFAULT_DROP_ZONE_TYPE = "--any--";
const DEFAULT_DROP_TARGET_STYLE = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
let isDragging = false;
let draggedItemType;
let focusedDz;
let focusedDzLabel = "";
let focusedItem;
let focusedItemId;
let focusedItemLabel = "";
const allDragTargets = /* @__PURE__ */ new WeakSet();
const elToKeyDownListeners = /* @__PURE__ */ new WeakMap();
const elToFocusListeners = /* @__PURE__ */ new WeakMap();
const dzToHandles = /* @__PURE__ */ new Map();
const dzToConfig = /* @__PURE__ */ new Map();
const typeToDropZones = /* @__PURE__ */ new Map();
let INSTRUCTION_IDs;
function registerDropZone(dropZoneEl, type) {
  if (typeToDropZones.size === 0) {
    INSTRUCTION_IDs = initAria();
    window.addEventListener("keydown", globalKeyDownHandler);
    window.addEventListener("click", globalClickHandler);
  }
  if (!typeToDropZones.has(type)) {
    typeToDropZones.set(type, /* @__PURE__ */ new Set());
  }
  if (!typeToDropZones.get(type).has(dropZoneEl)) {
    typeToDropZones.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone(dropZoneEl, type) {
  if (focusedDz === dropZoneEl) {
    handleDrop();
  }
  typeToDropZones.get(type).delete(dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones.get(type).size === 0) {
    typeToDropZones.delete(type);
  }
  if (typeToDropZones.size === 0) {
    window.removeEventListener("keydown", globalKeyDownHandler);
    window.removeEventListener("click", globalClickHandler);
    INSTRUCTION_IDs = void 0;
    destroyAria();
  }
}
function globalKeyDownHandler(e2) {
  if (!isDragging)
    return;
  switch (e2.key) {
    case "Escape": {
      handleDrop();
      break;
    }
  }
}
function globalClickHandler() {
  if (!isDragging)
    return;
  if (!allDragTargets.has(document.activeElement)) {
    handleDrop();
  }
}
function handleZoneFocus(e2) {
  if (!isDragging)
    return;
  const newlyFocusedDz = e2.currentTarget;
  if (newlyFocusedDz === focusedDz)
    return;
  focusedDzLabel = newlyFocusedDz.getAttribute("aria-label") || "";
  const { items: originItems } = dzToConfig.get(focusedDz);
  const originItem = originItems.find((item) => item[ITEM_ID_KEY] === focusedItemId);
  const originIdx = originItems.indexOf(originItem);
  const itemToMove = originItems.splice(originIdx, 1)[0];
  const { items: targetItems, autoAriaDisabled } = dzToConfig.get(newlyFocusedDz);
  if (newlyFocusedDz.getBoundingClientRect().top < focusedDz.getBoundingClientRect().top || newlyFocusedDz.getBoundingClientRect().left < focusedDz.getBoundingClientRect().left) {
    targetItems.push(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader(`Moved item ${focusedItemLabel} to the end of the list ${focusedDzLabel}`);
    }
  } else {
    targetItems.unshift(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader(`Moved item ${focusedItemLabel} to the beginning of the list ${focusedDzLabel}`);
    }
  }
  const dzFrom = focusedDz;
  dispatchFinalizeEvent(dzFrom, originItems, { trigger: TRIGGERS.DROPPED_INTO_ANOTHER, id: focusedItemId, source: SOURCES.KEYBOARD });
  dispatchFinalizeEvent(newlyFocusedDz, targetItems, { trigger: TRIGGERS.DROPPED_INTO_ZONE, id: focusedItemId, source: SOURCES.KEYBOARD });
  focusedDz = newlyFocusedDz;
}
function triggerAllDzsUpdate() {
  dzToHandles.forEach(({ update }, dz) => update(dzToConfig.get(dz)));
}
function handleDrop(dispatchConsider = true) {
  if (!dzToConfig.get(focusedDz).autoAriaDisabled) {
    alertToScreenReader(`Stopped dragging item ${focusedItemLabel}`);
  }
  if (allDragTargets.has(document.activeElement)) {
    document.activeElement.blur();
  }
  if (dispatchConsider) {
    dispatchConsiderEvent(focusedDz, dzToConfig.get(focusedDz).items, {
      trigger: TRIGGERS.DRAG_STOPPED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
  }
  styleInactiveDropZones(
    typeToDropZones.get(draggedItemType),
    (dz) => dzToConfig.get(dz).dropTargetStyle,
    (dz) => dzToConfig.get(dz).dropTargetClasses
  );
  focusedItem = null;
  focusedItemId = null;
  focusedItemLabel = "";
  draggedItemType = null;
  focusedDz = null;
  focusedDzLabel = "";
  isDragging = false;
  triggerAllDzsUpdate();
}
function dndzone$1(node, options) {
  const config = {
    items: void 0,
    type: void 0,
    dragDisabled: false,
    zoneTabIndex: 0,
    zoneItemTabIndex: 0,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE,
    dropTargetClasses: [],
    autoAriaDisabled: false
  };
  function swap2(arr, i2, j) {
    if (arr.length <= 1)
      return;
    arr.splice(j, 1, arr.splice(i2, 1, arr[j])[0]);
  }
  function handleKeyDown(e2) {
    switch (e2.key) {
      case "Enter":
      case " ": {
        if ((e2.target.disabled !== void 0 || e2.target.href || e2.target.isContentEditable) && !allDragTargets.has(e2.target)) {
          return;
        }
        e2.preventDefault();
        e2.stopPropagation();
        if (isDragging) {
          handleDrop();
        } else {
          handleDragStart(e2);
        }
        break;
      }
      case "ArrowDown":
      case "ArrowRight": {
        if (!isDragging)
          return;
        e2.preventDefault();
        e2.stopPropagation();
        const { items } = dzToConfig.get(node);
        const children2 = Array.from(node.children);
        const idx = children2.indexOf(e2.currentTarget);
        if (idx < children2.length - 1) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader(`Moved item ${focusedItemLabel} to position ${idx + 2} in the list ${focusedDzLabel}`);
          }
          swap2(items, idx, idx + 1);
          dispatchFinalizeEvent(node, items, { trigger: TRIGGERS.DROPPED_INTO_ZONE, id: focusedItemId, source: SOURCES.KEYBOARD });
        }
        break;
      }
      case "ArrowUp":
      case "ArrowLeft": {
        if (!isDragging)
          return;
        e2.preventDefault();
        e2.stopPropagation();
        const { items } = dzToConfig.get(node);
        const children2 = Array.from(node.children);
        const idx = children2.indexOf(e2.currentTarget);
        if (idx > 0) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader(`Moved item ${focusedItemLabel} to position ${idx} in the list ${focusedDzLabel}`);
          }
          swap2(items, idx, idx - 1);
          dispatchFinalizeEvent(node, items, { trigger: TRIGGERS.DROPPED_INTO_ZONE, id: focusedItemId, source: SOURCES.KEYBOARD });
        }
        break;
      }
    }
  }
  function handleDragStart(e2) {
    setCurrentFocusedItem(e2.currentTarget);
    focusedDz = node;
    draggedItemType = config.type;
    isDragging = true;
    const dropTargets = Array.from(typeToDropZones.get(config.type)).filter((dz) => dz === focusedDz || !dzToConfig.get(dz).dropFromOthersDisabled);
    styleActiveDropZones(
      dropTargets,
      (dz) => dzToConfig.get(dz).dropTargetStyle,
      (dz) => dzToConfig.get(dz).dropTargetClasses
    );
    if (!config.autoAriaDisabled) {
      let msg = `Started dragging item ${focusedItemLabel}. Use the arrow keys to move it within its list ${focusedDzLabel}`;
      if (dropTargets.length > 1) {
        msg += `, or tab to another list in order to move the item into it`;
      }
      alertToScreenReader(msg);
    }
    dispatchConsiderEvent(node, dzToConfig.get(node).items, { trigger: TRIGGERS.DRAG_STARTED, id: focusedItemId, source: SOURCES.KEYBOARD });
    triggerAllDzsUpdate();
  }
  function handleClick(e2) {
    if (!isDragging)
      return;
    if (e2.currentTarget === focusedItem)
      return;
    e2.stopPropagation();
    handleDrop(false);
    handleDragStart(e2);
  }
  function setCurrentFocusedItem(draggableEl) {
    const { items } = dzToConfig.get(node);
    const children2 = Array.from(node.children);
    const focusedItemIdx = children2.indexOf(draggableEl);
    focusedItem = draggableEl;
    focusedItem.tabIndex = config.zoneItemTabIndex;
    focusedItemId = items[focusedItemIdx][ITEM_ID_KEY];
    focusedItemLabel = children2[focusedItemIdx].getAttribute("aria-label") || "";
  }
  function configure({
    items = [],
    type: newType = DEFAULT_DROP_ZONE_TYPE,
    dragDisabled = false,
    zoneTabIndex = 0,
    zoneItemTabIndex = 0,
    dropFromOthersDisabled = false,
    dropTargetStyle = DEFAULT_DROP_TARGET_STYLE,
    dropTargetClasses = [],
    autoAriaDisabled = false
  }) {
    config.items = [...items];
    config.dragDisabled = dragDisabled;
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    config.zoneTabIndex = zoneTabIndex;
    config.zoneItemTabIndex = zoneItemTabIndex;
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = dropTargetClasses;
    config.autoAriaDisabled = autoAriaDisabled;
    if (config.type && newType !== config.type) {
      unregisterDropZone(node, config.type);
    }
    config.type = newType;
    registerDropZone(node, newType);
    if (!autoAriaDisabled) {
      node.setAttribute("aria-disabled", dragDisabled);
      node.setAttribute("role", "list");
      node.setAttribute("aria-describedby", dragDisabled ? INSTRUCTION_IDs.DND_ZONE_DRAG_DISABLED : INSTRUCTION_IDs.DND_ZONE_ACTIVE);
    }
    dzToConfig.set(node, config);
    if (isDragging) {
      node.tabIndex = node === focusedDz || focusedItem.contains(node) || config.dropFromOthersDisabled || focusedDz && config.type !== dzToConfig.get(focusedDz).type ? -1 : 0;
    } else {
      node.tabIndex = config.zoneTabIndex;
    }
    node.addEventListener("focus", handleZoneFocus);
    for (let i2 = 0; i2 < node.children.length; i2++) {
      const draggableEl = node.children[i2];
      allDragTargets.add(draggableEl);
      draggableEl.tabIndex = isDragging ? -1 : config.zoneItemTabIndex;
      if (!autoAriaDisabled) {
        draggableEl.setAttribute("role", "listitem");
      }
      draggableEl.removeEventListener("keydown", elToKeyDownListeners.get(draggableEl));
      draggableEl.removeEventListener("click", elToFocusListeners.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("keydown", handleKeyDown);
        elToKeyDownListeners.set(draggableEl, handleKeyDown);
        draggableEl.addEventListener("click", handleClick);
        elToFocusListeners.set(draggableEl, handleClick);
      }
      if (isDragging && config.items[i2][ITEM_ID_KEY] === focusedItemId) {
        focusedItem = draggableEl;
        focusedItem.tabIndex = config.zoneItemTabIndex;
        draggableEl.focus();
      }
    }
  }
  configure(options);
  const handles = {
    update: (newOptions) => {
      configure(newOptions);
    },
    destroy: () => {
      unregisterDropZone(node, config.type);
      dzToConfig.delete(node);
      dzToHandles.delete(node);
    }
  };
  dzToHandles.set(node, handles);
  return handles;
}
function dndzone(node, options) {
  if (shouldIgnoreZone(node)) {
    return {
      update: () => {
      },
      destroy: () => {
      }
    };
  }
  validateOptions(options);
  const pointerZone = dndzone$2(node, options);
  const keyboardZone = dndzone$1(node, options);
  return {
    update: (newOptions) => {
      validateOptions(newOptions);
      pointerZone.update(newOptions);
      keyboardZone.update(newOptions);
    },
    destroy: () => {
      pointerZone.destroy();
      keyboardZone.destroy();
    }
  };
}
function shouldIgnoreZone(node) {
  return !!node.closest(`[${SHADOW_ELEMENT_HINT_ATTRIBUTE_NAME}="true"]`);
}
function validateOptions(options) {
  const {
    items,
    flipDurationMs: flipDurationMs2,
    type,
    dragDisabled,
    morphDisabled,
    dropFromOthersDisabled,
    zoneTabIndex,
    zoneItemTabIndex,
    dropTargetStyle,
    dropTargetClasses,
    transformDraggedElement,
    autoAriaDisabled,
    centreDraggedOnCursor,
    dropAnimationDisabled,
    ...rest
  } = options;
  if (Object.keys(rest).length > 0) {
    console.warn(`dndzone will ignore unknown options`, rest);
  }
  if (!items) {
    throw new Error("no 'items' key provided to dndzone");
  }
  const itemWithMissingId = items.find((item) => !{}.hasOwnProperty.call(item, ITEM_ID_KEY));
  if (itemWithMissingId) {
    throw new Error(`missing '${ITEM_ID_KEY}' property for item ${toString(itemWithMissingId)}`);
  }
  if (dropTargetClasses && !Array.isArray(dropTargetClasses)) {
    throw new Error(`dropTargetClasses should be an array but instead it is a ${typeof dropTargetClasses}, ${toString(dropTargetClasses)}`);
  }
  if (zoneTabIndex && !isInt(zoneTabIndex)) {
    throw new Error(`zoneTabIndex should be a number but instead it is a ${typeof zoneTabIndex}, ${toString(zoneTabIndex)}`);
  }
  if (zoneItemTabIndex && !isInt(zoneItemTabIndex)) {
    throw new Error(`zoneItemTabIndex should be a number but instead it is a ${typeof zoneItemTabIndex}, ${toString(zoneItemTabIndex)}`);
  }
}
function isInt(value) {
  return !isNaN(value) && function(x2) {
    return (x2 | 0) === x2;
  }(parseFloat(value));
}
function createStore(initialValue) {
  let _val = initialValue;
  const subs = /* @__PURE__ */ new Set();
  return {
    get: () => _val,
    set: (newVal) => {
      _val = newVal;
      Array.from(subs).forEach((cb) => cb(_val));
    },
    subscribe: (cb) => {
      subs.add(cb);
      cb(_val);
    },
    unsubscribe: (cb) => {
      subs.delete(cb);
    }
  };
}
const isItemsDragDisabled = createStore(true);
function getAddedOptions(isItemsDragDisabled2 = true) {
  return {
    dragDisabled: isItemsDragDisabled2,
    zoneItemTabIndex: -1
  };
}
function dragHandleZone(node, options) {
  let currentOptions = options;
  const zone = dndzone(node, {
    ...currentOptions,
    ...getAddedOptions()
  });
  function isItemDisabledCB(isItemsDragDisabled2) {
    zone.update({
      ...currentOptions,
      ...getAddedOptions(isItemsDragDisabled2)
    });
  }
  isItemsDragDisabled.subscribe(isItemDisabledCB);
  function consider(e2) {
    const {
      info: { source, trigger }
    } = e2.detail;
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      isItemsDragDisabled.set(true);
    }
  }
  function finalize(e2) {
    const {
      info: { source }
    } = e2.detail;
    if (source === SOURCES.POINTER) {
      isItemsDragDisabled.set(true);
    }
  }
  node.addEventListener("consider", consider);
  node.addEventListener("finalize", finalize);
  return {
    update: (newOptions) => {
      currentOptions = newOptions;
      zone.update({
        ...currentOptions,
        ...getAddedOptions(isItemsDragDisabled.get())
      });
    },
    destroy: () => {
      node.removeEventListener("consider", consider);
      node.removeEventListener("finalize", finalize);
      isItemsDragDisabled.unsubscribe(isItemDisabledCB);
    }
  };
}
function dragHandle(handle) {
  handle.setAttribute("role", "button");
  function startDrag(e2) {
    e2.preventDefault();
    isItemsDragDisabled.set(false);
  }
  function handleKeyDown(e2) {
    if (e2.key === "Enter" || e2.key === " ")
      isItemsDragDisabled.set(false);
  }
  isItemsDragDisabled.subscribe((disabled) => {
    handle.tabIndex = disabled ? 0 : -1;
    handle.style.cursor = disabled ? "grab" : "grabbing";
  });
  handle.addEventListener("mousedown", startDrag);
  handle.addEventListener("touchstart", startDrag);
  handle.addEventListener("keydown", handleKeyDown);
  return {
    update: () => {
    },
    destroy: () => {
      handle.removeEventListener("mousedown", startDrag);
      handle.removeEventListener("touchstart", startDrag);
      handle.removeEventListener("keydown", handleKeyDown);
    }
  };
}
function create_else_block$r(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  var switch_value = findWidget(
    /*settings*/
    ctx[0].type
  );
  function switch_props(ctx2, dirty) {
    return {
      props: {
        settings: (
          /*settings*/
          ctx2[0]
        ),
        context: (
          /*context*/
          ctx2[1]
        )
      }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
  }
  return {
    c() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*settings*/
      1 && switch_value !== (switch_value = findWidget(
        /*settings*/
        ctx2[0].type
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty & /*settings*/
        1)
          switch_instance_changes.settings = /*settings*/
          ctx2[0];
        if (dirty & /*context*/
        2)
          switch_instance_changes.context = /*context*/
          ctx2[1];
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(switch_instance_anchor);
      }
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function create_if_block$P(ctx) {
  let fieldset;
  let legend;
  let icon;
  let t0;
  let t1_value = (
    /*getLabel*/
    ctx[5]() + ""
  );
  let t1;
  let t2;
  let switch_instance;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({
    props: {
      data: mdiCursorMove,
      class: "inline-block w-5 h-5 dark:invert"
    }
  });
  var switch_value = findWidget(
    /*settings*/
    ctx[0].type
  );
  function switch_props(ctx2, dirty) {
    return {
      props: {
        settings: (
          /*settings*/
          ctx2[0]
        ),
        context: (
          /*childContext*/
          ctx2[2]
        )
      }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    switch_instance.$on(
      "settings",
      /*settings_handler*/
      ctx[7]
    );
  }
  return {
    c() {
      fieldset = element("fieldset");
      legend = element("legend");
      create_component(icon.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      this.h();
    },
    l(nodes) {
      fieldset = claim_element(nodes, "FIELDSET", { class: true });
      var fieldset_nodes = children(fieldset);
      legend = claim_element(fieldset_nodes, "LEGEND", { class: true });
      var legend_nodes = children(legend);
      claim_component(icon.$$.fragment, legend_nodes);
      t0 = claim_space(legend_nodes);
      t1 = claim_text(legend_nodes, t1_value);
      legend_nodes.forEach(detach);
      t2 = claim_space(fieldset_nodes);
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, fieldset_nodes);
      fieldset_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(legend, "class", "ml-2 cursor-grab");
      attr(fieldset, "class", "border-dashed border m-0.5");
    },
    m(target, anchor) {
      insert_hydration(target, fieldset, anchor);
      append_hydration(fieldset, legend);
      mount_component(icon, legend, null);
      append_hydration(legend, t0);
      append_hydration(legend, t1);
      append_hydration(fieldset, t2);
      if (switch_instance)
        mount_component(switch_instance, fieldset, null);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(dragHandle.call(null, legend)),
          listen(fieldset, "click", stop_propagation(
            /*click_handler*/
            ctx[8]
          ))
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*settings*/
      1 && switch_value !== (switch_value = findWidget(
        /*settings*/
        ctx2[0].type
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          switch_instance.$on(
            "settings",
            /*settings_handler*/
            ctx2[7]
          );
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, fieldset, null);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty & /*settings*/
        1)
          switch_instance_changes.settings = /*settings*/
          ctx2[0];
        if (dirty & /*childContext*/
        4)
          switch_instance_changes.context = /*childContext*/
          ctx2[2];
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(fieldset);
      }
      destroy_component(icon);
      if (switch_instance)
        destroy_component(switch_instance);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment$1g(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$P, create_else_block$r];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*context*/
      ctx2[1].editable
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$1h($$self, $$props, $$invalidate) {
  let breadcrumbs;
  let childContext;
  let $templates;
  component_subscribe($$self, templates, ($$value) => $$invalidate(9, $templates = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  const dispatch = createEventDispatcher();
  function select() {
    context.select(breadcrumbs);
  }
  function update(_settings) {
    $$invalidate(0, settings = _settings);
    dispatch("settings", settings);
  }
  function getLabel() {
    var _a2;
    if (settings.type === "template") {
      return ((_a2 = $templates[settings.templateId]) == null ? void 0 : _a2.title) ?? findLabel(settings.type);
    }
    return findLabel(settings.type);
  }
  const settings_handler = (e2) => update(e2.detail);
  const click_handler = () => select();
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(1, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*context, settings*/
    3) {
      $$invalidate(6, breadcrumbs = [...context.breadcrumbs, { settings, update }]);
    }
    if ($$self.$$.dirty & /*context, breadcrumbs*/
    66) {
      $$invalidate(2, childContext = { ...context, breadcrumbs });
    }
  };
  return [
    settings,
    context,
    childContext,
    select,
    update,
    getLabel,
    breadcrumbs,
    settings_handler,
    click_handler
  ];
}
class Widget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1h, create_fragment$1g, safe_not_equal, { settings: 0, context: 1 });
  }
}
function get_each_context_1$4(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i2];
  child_ctx[18] = i2;
  return child_ctx;
}
const get_default_slot_changes_1 = (dirty) => ({
  item: dirty & /*inner*/
  8,
  index: dirty & /*inner*/
  8
});
const get_default_slot_context_1 = (ctx) => ({
  item: (
    /*item*/
    ctx[16]
  ),
  index: (
    /*index*/
    ctx[18]
  )
});
function get_each_context$k(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i2];
  child_ctx[18] = i2;
  return child_ctx;
}
const get_default_slot_changes$1 = (dirty) => ({
  item: dirty & /*inner*/
  8,
  index: dirty & /*inner*/
  8
});
const get_default_slot_context$1 = (ctx) => ({
  item: (
    /*item*/
    ctx[16]
  ),
  index: (
    /*index*/
    ctx[18]
  )
});
function create_else_block$q(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let current;
  let each_value_1 = ensure_array_like(
    /*inner*/
    ctx[3]
  );
  const get_key = (ctx2) => (
    /*item*/
    ctx2[16].id
  );
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    let child_ctx = get_each_context_1$4(ctx, each_value_1, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block_1$4(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div_nodes);
      }
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(
        div,
        "class",
        /*classes*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*$$scope, inner*/
      520) {
        each_value_1 = ensure_array_like(
          /*inner*/
          ctx2[3]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value_1, each_1_lookup, div, outro_and_destroy_block, create_each_block_1$4, null, get_each_context_1$4);
        check_outros();
      }
      if (!current || dirty & /*classes*/
      4) {
        attr(
          div,
          "class",
          /*classes*/
          ctx2[2]
        );
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d();
      }
    }
  };
}
function create_if_block$O(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let dragHandleZone_action;
  let current;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*inner*/
    ctx[3]
  );
  const get_key = (ctx2) => (
    /*item*/
    ctx2[16].id
  );
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$k(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$k(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div_nodes);
      }
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(
        div,
        "class",
        /*classes*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(dragHandleZone_action = dragHandleZone.call(null, div, {
            items: (
              /*inner*/
              ctx[3]
            ),
            flipDurationMs: flipDurationMs$2,
            morphDisabled: false,
            centreDraggedOnCursor: true,
            dropFromOthersDisabled: (
              /*dropDisabled*/
              ctx[1]
            ),
            dropTargetStyle: (
              /*dropTargetStyle*/
              ctx[5]
            ),
            dropTargetClasses: (
              /*dropTargetClasses*/
              ctx[4]
            )
          })),
          listen(
            div,
            "consider",
            /*consider_handler*/
            ctx[11]
          ),
          listen(
            div,
            "finalize",
            /*finalize_handler*/
            ctx[12]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*$$scope, inner*/
      520) {
        each_value = ensure_array_like(
          /*inner*/
          ctx2[3]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$k, null, get_each_context$k);
        check_outros();
      }
      if (!current || dirty & /*classes*/
      4) {
        attr(
          div,
          "class",
          /*classes*/
          ctx2[2]
        );
      }
      if (dragHandleZone_action && is_function(dragHandleZone_action.update) && dirty & /*inner, dropDisabled*/
      10)
        dragHandleZone_action.update.call(null, {
          items: (
            /*inner*/
            ctx2[3]
          ),
          flipDurationMs: flipDurationMs$2,
          morphDisabled: false,
          centreDraggedOnCursor: true,
          dropFromOthersDisabled: (
            /*dropDisabled*/
            ctx2[1]
          ),
          dropTargetStyle: (
            /*dropTargetStyle*/
            ctx2[5]
          ),
          dropTargetClasses: (
            /*dropTargetClasses*/
            ctx2[4]
          )
        });
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_each_block_1$4(key_1, ctx) {
  let first;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    get_default_slot_context_1
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l(nodes) {
      first = empty();
      if (default_slot)
        default_slot.l(nodes);
      this.h();
    },
    h() {
      this.first = first;
    },
    m(target, anchor) {
      insert_hydration(target, first, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, inner*/
        520)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx[9],
              dirty,
              get_default_slot_changes_1
            ),
            get_default_slot_context_1
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_each_block$k(key_1, ctx) {
  let first;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    get_default_slot_context$1
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l(nodes) {
      first = empty();
      if (default_slot)
        default_slot.l(nodes);
      this.h();
    },
    h() {
      this.first = first;
    },
    m(target, anchor) {
      insert_hydration(target, first, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, inner*/
        520)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx[9],
              dirty,
              get_default_slot_changes$1
            ),
            get_default_slot_context$1
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment$1f(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$O, create_else_block$q];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*editable*/
      ctx2[0]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
const flipDurationMs$2 = 500;
function instance$1g($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { editable } = $$props;
  let { items } = $$props;
  let { dropDisabled = false } = $$props;
  let { class: classes = "" } = $$props;
  const dispatch = createEventDispatcher();
  let inner;
  let modifying = false;
  const dropTargetClasses = ["border-secondary", "border-2"];
  const dropTargetStyle = {};
  function onItems(_items) {
    if (!modifying) {
      $$invalidate(3, inner = _items ?? []);
    }
  }
  function handleDndConsider(_items, info2) {
    if (info2.trigger === "dragStarted") {
      modifying = true;
    }
    $$invalidate(3, inner = _items);
  }
  function handleDndFinalize(_items, info2) {
    modifying = false;
    if (info2.trigger === "droppedOutsideOfAny") {
      _items = items ?? [];
    }
    if (info2.trigger === "droppedIntoAnother" && items !== void 0) {
      for (let index2 = 0; index2 < _items.length; index2++) {
        const item = _items[index2];
        const existing = items.find((i2) => i2.id === item.id);
        if (existing !== void 0) {
          for (var key in existing) {
            item[key] = existing[key];
          }
        }
      }
    }
    $$invalidate(3, inner = [..._items]);
    $$invalidate(8, items = inner);
    dispatch("items", items);
  }
  const consider_handler = (e2) => handleDndConsider(e2.detail.items, e2.detail.info);
  const finalize_handler = (e2) => handleDndFinalize(e2.detail.items, e2.detail.info);
  $$self.$$set = ($$props2) => {
    if ("editable" in $$props2)
      $$invalidate(0, editable = $$props2.editable);
    if ("items" in $$props2)
      $$invalidate(8, items = $$props2.items);
    if ("dropDisabled" in $$props2)
      $$invalidate(1, dropDisabled = $$props2.dropDisabled);
    if ("class" in $$props2)
      $$invalidate(2, classes = $$props2.class);
    if ("$$scope" in $$props2)
      $$invalidate(9, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*items*/
    256) {
      onItems(items);
    }
  };
  return [
    editable,
    dropDisabled,
    classes,
    inner,
    dropTargetClasses,
    dropTargetStyle,
    handleDndConsider,
    handleDndFinalize,
    items,
    $$scope,
    slots,
    consider_handler,
    finalize_handler
  ];
}
class DndList extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1g, create_fragment$1f, safe_not_equal, {
      editable: 0,
      items: 8,
      dropDisabled: 1,
      class: 2
    });
  }
}
function create_default_slot$e(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      context: (
        /*context*/
        ctx[1]
      ),
      settings: (
        /*item*/
        ctx[9]
      )
    }
  });
  widget.$on(
    "settings",
    /*settings_handler*/
    ctx[5]
  );
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty & /*context*/
      2)
        widget_changes.context = /*context*/
        ctx2[1];
      if (dirty & /*item*/
      512)
        widget_changes.settings = /*item*/
        ctx2[9];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_fragment$1e(ctx) {
  let div;
  let dndlist;
  let current;
  dndlist = new DndList({
    props: {
      items: (
        /*items*/
        ctx[2]
      ),
      editable: (
        /*context*/
        ctx[1].editable
      ),
      class: "card-body w-full h-full " + /*context*/
      (ctx[1].editable ? "min-h-[50px]" : "") + " " + /*settings*/
      (ctx[0].padding ?? ""),
      $$slots: {
        default: [
          create_default_slot$e,
          ({ item }) => ({ 9: item }),
          ({ item }) => item ? 512 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  dndlist.$on(
    "items",
    /*items_handler*/
    ctx[6]
  );
  return {
    c() {
      div = element("div");
      create_component(dndlist.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(dndlist.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "card bg-base-200 shadow-md overflow-hidden w-full h-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(dndlist, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dndlist_changes = {};
      if (dirty & /*items*/
      4)
        dndlist_changes.items = /*items*/
        ctx2[2];
      if (dirty & /*context*/
      2)
        dndlist_changes.editable = /*context*/
        ctx2[1].editable;
      if (dirty & /*context, settings*/
      3)
        dndlist_changes.class = "card-body w-full h-full " + /*context*/
        (ctx2[1].editable ? "min-h-[50px]" : "") + " " + /*settings*/
        (ctx2[0].padding ?? "");
      if (dirty & /*$$scope, context, item*/
      1538) {
        dndlist_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dndlist.$set(dndlist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dndlist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dndlist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(dndlist);
    }
  };
}
function instance$1f($$self, $$props, $$invalidate) {
  let { context } = $$props;
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let items;
  function onSettings(_settings) {
    $$invalidate(2, items = settings.items ?? []);
  }
  function onItems(_items) {
    $$invalidate(2, items = [..._items]);
    $$invalidate(0, settings = { ...settings, items });
    dispatch("settings", settings);
  }
  function updateWidget(_section) {
    const index2 = items.findIndex((s3) => s3.id === _section.id);
    $$invalidate(2, items[index2] = { ..._section }, items);
    $$invalidate(2, items = [...items]);
    $$invalidate(0, settings = { ...settings, items });
    dispatch("settings", settings);
  }
  const settings_handler = (e2) => updateWidget(e2.detail);
  const items_handler = (e2) => onItems(e2.detail);
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(1, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings();
    }
  };
  return [
    settings,
    context,
    items,
    onItems,
    updateWidget,
    settings_handler,
    items_handler
  ];
}
class CardWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1f, create_fragment$1e, safe_not_equal, { context: 1, settings: 0 });
  }
}
const info$k = {
  type: "card",
  label: "Card",
  icon: mdiCreditCard,
  category: "component",
  widget: CardWidget,
  editor: CardEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "card", version: 1 }),
  migration: (e2) => e2
};
function get_each_context$j(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i2];
  return child_ctx;
}
function get_each_context_1$3(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i2];
  return child_ctx;
}
function create_if_block$N(ctx) {
  let option_1;
  return {
    c() {
      option_1 = element("option");
      this.h();
    },
    l(nodes) {
      option_1 = claim_element(nodes, "OPTION", {});
      children(option_1).forEach(detach);
      this.h();
    },
    h() {
      option_1.selected = true;
      option_1.__value = "";
      set_input_value(option_1, option_1.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option_1, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(option_1);
      }
    }
  };
}
function create_each_block_1$3(ctx) {
  let option_1;
  let t_value = (
    /*option*/
    ctx[14].label + ""
  );
  let t2;
  let option_1_value_value;
  let option_1_selected_value;
  return {
    c() {
      option_1 = element("option");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      option_1 = claim_element(nodes, "OPTION", {});
      var option_1_nodes = children(option_1);
      t2 = claim_text(option_1_nodes, t_value);
      option_1_nodes.forEach(detach);
      this.h();
    },
    h() {
      option_1.__value = option_1_value_value = /*option*/
      ctx[14].value;
      set_input_value(option_1, option_1.__value);
      option_1.selected = option_1_selected_value = /*option*/
      ctx[14].value === /*dashboardId*/
      ctx[1];
    },
    m(target, anchor) {
      insert_hydration(target, option_1, anchor);
      append_hydration(option_1, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboards*/
      8 && t_value !== (t_value = /*option*/
      ctx2[14].label + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboards*/
      8 && option_1_value_value !== (option_1_value_value = /*option*/
      ctx2[14].value)) {
        option_1.__value = option_1_value_value;
        set_input_value(option_1, option_1.__value);
      }
      if (dirty & /*dashboards, dashboardId*/
      10 && option_1_selected_value !== (option_1_selected_value = /*option*/
      ctx2[14].value === /*dashboardId*/
      ctx2[1])) {
        option_1.selected = option_1_selected_value;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(option_1);
      }
    }
  };
}
function create_each_block$j(ctx) {
  let option_1;
  let t_value = (
    /*option*/
    ctx[14].label + ""
  );
  let t2;
  return {
    c() {
      option_1 = element("option");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      option_1 = claim_element(nodes, "OPTION", {});
      var option_1_nodes = children(option_1);
      t2 = claim_text(option_1_nodes, t_value);
      option_1_nodes.forEach(detach);
      this.h();
    },
    h() {
      option_1.__value = /*option*/
      ctx[14].value;
      set_input_value(option_1, option_1.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option_1, anchor);
      append_hydration(option_1, t2);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(option_1);
      }
    }
  };
}
function create_fragment$1d(ctx) {
  let label0;
  let div0;
  let textContent = `<span class="label-text">Dashboard</span>`;
  let t1;
  let select0;
  let if_block_anchor;
  let t2;
  let label1;
  let div1;
  let textContent_1 = `<span class="label-text">Font size</span>`;
  let t4;
  let select1;
  let t5;
  let iconpicker;
  let updating_iconId;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*dashboardId*/
    ctx[1] === void 0 && create_if_block$N()
  );
  let each_value_1 = ensure_array_like(
    /*dashboards*/
    ctx[3]
  );
  let each_blocks_1 = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks_1[i2] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i2));
  }
  let each_value = ensure_array_like(
    /*sizes*/
    ctx[4]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$j(get_each_context$j(ctx, each_value, i2));
  }
  function iconpicker_iconId_binding(value) {
    ctx[10](value);
  }
  let iconpicker_props = {};
  if (
    /*iconId*/
    ctx[2] !== void 0
  ) {
    iconpicker_props.iconId = /*iconId*/
    ctx[2];
  }
  iconpicker = new IconPicker({ props: iconpicker_props });
  binding_callbacks.push(() => bind(iconpicker, "iconId", iconpicker_iconId_binding));
  return {
    c() {
      label0 = element("label");
      div0 = element("div");
      div0.innerHTML = textContent;
      t1 = space();
      select0 = element("select");
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        each_blocks_1[i2].c();
      }
      t2 = space();
      label1 = element("label");
      div1 = element("div");
      div1.innerHTML = textContent_1;
      t4 = space();
      select1 = element("select");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t5 = space();
      create_component(iconpicker.$$.fragment);
      this.h();
    },
    l(nodes) {
      label0 = claim_element(nodes, "LABEL", { class: true });
      var label0_nodes = children(label0);
      div0 = claim_element(label0_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div0) !== "svelte-1vdlumx")
        div0.innerHTML = textContent;
      t1 = claim_space(label0_nodes);
      select0 = claim_element(label0_nodes, "SELECT", { class: true, placeholder: true });
      var select0_nodes = children(select0);
      if (if_block)
        if_block.l(select0_nodes);
      if_block_anchor = empty();
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        each_blocks_1[i2].l(select0_nodes);
      }
      select0_nodes.forEach(detach);
      label0_nodes.forEach(detach);
      t2 = claim_space(nodes);
      label1 = claim_element(nodes, "LABEL", { class: true });
      var label1_nodes = children(label1);
      div1 = claim_element(label1_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div1) !== "svelte-110achj")
        div1.innerHTML = textContent_1;
      t4 = claim_space(label1_nodes);
      select1 = claim_element(label1_nodes, "SELECT", { class: true, placeholder: true });
      var select1_nodes = children(select1);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(select1_nodes);
      }
      select1_nodes.forEach(detach);
      label1_nodes.forEach(detach);
      t5 = claim_space(nodes);
      claim_component(iconpicker.$$.fragment, nodes);
      this.h();
    },
    h() {
      attr(div0, "class", "label");
      attr(select0, "class", "select w-full");
      attr(select0, "placeholder", "Dashboard");
      if (
        /*dashboardId*/
        ctx[1] === void 0
      )
        add_render_callback(() => (
          /*select0_change_handler*/
          ctx[8].call(select0)
        ));
      attr(label0, "class", "form-control w-full");
      attr(div1, "class", "label");
      attr(select1, "class", "select w-full");
      attr(select1, "placeholder", "Font size");
      if (
        /*size*/
        ctx[0] === void 0
      )
        add_render_callback(() => (
          /*select1_change_handler*/
          ctx[9].call(select1)
        ));
      attr(label1, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label0, anchor);
      append_hydration(label0, div0);
      append_hydration(label0, t1);
      append_hydration(label0, select0);
      if (if_block)
        if_block.m(select0, null);
      append_hydration(select0, if_block_anchor);
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        if (each_blocks_1[i2]) {
          each_blocks_1[i2].m(select0, null);
        }
      }
      select_option(
        select0,
        /*dashboardId*/
        ctx[1],
        true
      );
      insert_hydration(target, t2, anchor);
      insert_hydration(target, label1, anchor);
      append_hydration(label1, div1);
      append_hydration(label1, t4);
      append_hydration(label1, select1);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(select1, null);
        }
      }
      select_option(
        select1,
        /*size*/
        ctx[0],
        true
      );
      insert_hydration(target, t5, anchor);
      mount_component(iconpicker, target, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            select0,
            "change",
            /*select0_change_handler*/
            ctx[8]
          ),
          listen(
            select1,
            "change",
            /*select1_change_handler*/
            ctx[9]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*dashboardId*/
        ctx2[1] === void 0
      ) {
        if (if_block)
          ;
        else {
          if_block = create_if_block$N();
          if_block.c();
          if_block.m(select0, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*dashboards, dashboardId*/
      10) {
        each_value_1 = ensure_array_like(
          /*dashboards*/
          ctx2[3]
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$3(ctx2, each_value_1, i2);
          if (each_blocks_1[i2]) {
            each_blocks_1[i2].p(child_ctx, dirty);
          } else {
            each_blocks_1[i2] = create_each_block_1$3(child_ctx);
            each_blocks_1[i2].c();
            each_blocks_1[i2].m(select0, null);
          }
        }
        for (; i2 < each_blocks_1.length; i2 += 1) {
          each_blocks_1[i2].d(1);
        }
        each_blocks_1.length = each_value_1.length;
      }
      if (dirty & /*dashboardId, dashboards*/
      10) {
        select_option(
          select0,
          /*dashboardId*/
          ctx2[1]
        );
      }
      if (dirty & /*sizes*/
      16) {
        each_value = ensure_array_like(
          /*sizes*/
          ctx2[4]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$j(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block$j(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(select1, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & /*size, sizes*/
      17) {
        select_option(
          select1,
          /*size*/
          ctx2[0]
        );
      }
      const iconpicker_changes = {};
      if (!updating_iconId && dirty & /*iconId*/
      4) {
        updating_iconId = true;
        iconpicker_changes.iconId = /*iconId*/
        ctx2[2];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker.$set(iconpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label0);
        detach(t2);
        detach(label1);
        detach(t5);
      }
      if (if_block)
        if_block.d();
      destroy_each(each_blocks_1, detaching);
      destroy_each(each_blocks, detaching);
      destroy_component(iconpicker, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$1e($$self, $$props, $$invalidate) {
  let dashboards$2;
  let $localDashboards;
  let $homeyDashboards;
  component_subscribe($$self, dashboards, ($$value) => $$invalidate(6, $localDashboards = $$value));
  component_subscribe($$self, dashboards$1, ($$value) => $$invalidate(7, $homeyDashboards = $$value));
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let size;
  let dashboardId;
  let iconId;
  const sizes = [
    { value: void 0, label: "Text" },
    ...[...Array(6).keys()].map((key) => ({ value: key + 1, label: "" + (key + 1) }))
  ];
  function onSettings(s3) {
    $$invalidate(1, dashboardId = settings.dashboardId);
    $$invalidate(0, size = settings.size);
    $$invalidate(2, iconId = settings.iconId);
  }
  function onChanges(_dashboardId, _size, _iconId) {
    if (_dashboardId !== settings.dashboardId || _size !== settings.size || _iconId !== settings.iconId) {
      dispatch("settings", {
        ...settings,
        dashboardId: _dashboardId,
        size: _size,
        iconId: _iconId
      });
    }
  }
  function select0_change_handler() {
    dashboardId = select_value(this);
    $$invalidate(1, dashboardId);
    $$invalidate(3, dashboards$2), $$invalidate(7, $homeyDashboards), $$invalidate(6, $localDashboards);
  }
  function select1_change_handler() {
    size = select_value(this);
    $$invalidate(0, size);
    $$invalidate(4, sizes);
  }
  function iconpicker_iconId_binding(value) {
    iconId = value;
    $$invalidate(2, iconId);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(5, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$homeyDashboards, $localDashboards*/
    192) {
      $$invalidate(3, dashboards$2 = Object.values({ ...$homeyDashboards, ...$localDashboards }).map((d3) => ({ value: d3.id, label: d3.title })));
    }
    if ($$self.$$.dirty & /*settings*/
    32) {
      onSettings();
    }
    if ($$self.$$.dirty & /*dashboardId, size, iconId*/
    7) {
      onChanges(dashboardId, size, iconId);
    }
  };
  return [
    size,
    dashboardId,
    iconId,
    dashboards$2,
    sizes,
    settings,
    $localDashboards,
    $homeyDashboards,
    select0_change_handler,
    select1_change_handler,
    iconpicker_iconId_binding
  ];
}
class DashboardLinkEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1e, create_fragment$1d, safe_not_equal, { settings: 5 });
  }
}
function create_else_block$p(ctx) {
  let div;
  let t2;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*settings*/
    ctx[0].iconId !== void 0 && create_if_block_15$1(ctx)
  );
  function select_block_type_1(ctx2, dirty) {
    if (
      /*dashboard*/
      ctx2[3] !== void 0
    )
      return create_if_block_1$s;
    return create_else_block_3;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block1 = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      if (if_block0)
        if_block0.c();
      t2 = space();
      if_block1.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (if_block0)
        if_block0.l(div_nodes);
      t2 = claim_space(div_nodes);
      if_block1.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "w-full h-full flex justify-center items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (if_block0)
        if_block0.m(div, null);
      append_hydration(div, t2);
      if_block1.m(div, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          div,
          "click",
          /*click_handler*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*settings*/
        ctx2[0].iconId !== void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*settings*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_15$1(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t2);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div, null);
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0)
        if_block0.d();
      if_block1.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$M(ctx) {
  let span;
  let textContent = "Dashboard not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1sl1c9x")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_15$1(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      ),
      class: "mr-1"
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_else_block_3(ctx) {
  let span;
  let textContent = "Dashboard not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-pyg9ol")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$s(ctx) {
  let if_block_anchor;
  function select_block_type_2(ctx2, dirty) {
    if (
      /*$editing*/
      ctx2[4]
    )
      return create_if_block_2$h;
    if (
      /*size*/
      ctx2[2] == 1
    )
      return create_if_block_9$3;
    if (
      /*size*/
      ctx2[2] == 2
    )
      return create_if_block_10$2;
    if (
      /*size*/
      ctx2[2] == 3
    )
      return create_if_block_11$2;
    if (
      /*size*/
      ctx2[2] == 4
    )
      return create_if_block_12$2;
    if (
      /*size*/
      ctx2[2] == 5
    )
      return create_if_block_13$2;
    if (
      /*size*/
      ctx2[2] == 6
    )
      return create_if_block_14$2;
    return create_else_block_2$2;
  }
  let current_block_type = select_block_type_2(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_2(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_else_block_2$2(ctx) {
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      a3 = claim_element(nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
    },
    m(target, anchor) {
      insert_hydration(target, a3, anchor);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(a3);
      }
    }
  };
}
function create_if_block_14$2(ctx) {
  let h6;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h6 = element("h6");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h6 = claim_element(nodes, "H6", { class: true });
      var h6_nodes = children(h6);
      a3 = claim_element(h6_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h6_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h6, "class", "text-lg no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h6, anchor);
      append_hydration(h6, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h6);
      }
    }
  };
}
function create_if_block_13$2(ctx) {
  let h5;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h5 = element("h5");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h5 = claim_element(nodes, "H5", { class: true });
      var h5_nodes = children(h5);
      a3 = claim_element(h5_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h5_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h5, "class", "text-xl no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h5, anchor);
      append_hydration(h5, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h5);
      }
    }
  };
}
function create_if_block_12$2(ctx) {
  let h4;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h4 = element("h4");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h4 = claim_element(nodes, "H4", { class: true });
      var h4_nodes = children(h4);
      a3 = claim_element(h4_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h4, "class", "text-2xl no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h4, anchor);
      append_hydration(h4, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h4);
      }
    }
  };
}
function create_if_block_11$2(ctx) {
  let h3;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h3 = element("h3");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h3 = claim_element(nodes, "H3", { class: true });
      var h3_nodes = children(h3);
      a3 = claim_element(h3_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h3, "class", "text-3xl no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h3, anchor);
      append_hydration(h3, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h3);
      }
    }
  };
}
function create_if_block_10$2(ctx) {
  let h23;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h23 = element("h2");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h23 = claim_element(nodes, "H2", { class: true });
      var h2_nodes = children(h23);
      a3 = claim_element(h2_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h23, "class", "text-4xl no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h23, anchor);
      append_hydration(h23, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h23);
      }
    }
  };
}
function create_if_block_9$3(ctx) {
  let h12;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h12 = element("h1");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", { class: true });
      var h1_nodes = children(h12);
      a3 = claim_element(h1_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h12, "class", "text-5xl no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_if_block_2$h(ctx) {
  let if_block_anchor;
  function select_block_type_3(ctx2, dirty) {
    if (
      /*size*/
      ctx2[2] == 1
    )
      return create_if_block_3$c;
    if (
      /*size*/
      ctx2[2] == 2
    )
      return create_if_block_4$9;
    if (
      /*size*/
      ctx2[2] == 3
    )
      return create_if_block_5$7;
    if (
      /*size*/
      ctx2[2] == 4
    )
      return create_if_block_6$6;
    if (
      /*size*/
      ctx2[2] == 5
    )
      return create_if_block_7$5;
    if (
      /*size*/
      ctx2[2] == 6
    )
      return create_if_block_8$4;
    return create_else_block_1$8;
  }
  let current_block_type = select_block_type_3(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_3(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_else_block_1$8(ctx) {
  let div;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      t2 = claim_text(div_nodes, t_value);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_8$4(ctx) {
  let h6;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h6 = element("h6");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h6 = claim_element(nodes, "H6", { class: true });
      var h6_nodes = children(h6);
      t2 = claim_text(h6_nodes, t_value);
      h6_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h6, "class", "text-lg no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h6, anchor);
      append_hydration(h6, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h6);
      }
    }
  };
}
function create_if_block_7$5(ctx) {
  let h5;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h5 = element("h5");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h5 = claim_element(nodes, "H5", { class: true });
      var h5_nodes = children(h5);
      t2 = claim_text(h5_nodes, t_value);
      h5_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h5, "class", "text-xl no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h5, anchor);
      append_hydration(h5, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h5);
      }
    }
  };
}
function create_if_block_6$6(ctx) {
  let h4;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h4 = element("h4");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h4 = claim_element(nodes, "H4", { class: true });
      var h4_nodes = children(h4);
      t2 = claim_text(h4_nodes, t_value);
      h4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h4, "class", "text-2xl no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h4, anchor);
      append_hydration(h4, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h4);
      }
    }
  };
}
function create_if_block_5$7(ctx) {
  let h3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h3 = element("h3");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h3 = claim_element(nodes, "H3", { class: true });
      var h3_nodes = children(h3);
      t2 = claim_text(h3_nodes, t_value);
      h3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h3, "class", "text-3xl no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h3, anchor);
      append_hydration(h3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h3);
      }
    }
  };
}
function create_if_block_4$9(ctx) {
  let h23;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h23 = element("h2");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h23 = claim_element(nodes, "H2", { class: true });
      var h2_nodes = children(h23);
      t2 = claim_text(h2_nodes, t_value);
      h2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h23, "class", "text-4xl no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h23, anchor);
      append_hydration(h23, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h23);
      }
    }
  };
}
function create_if_block_3$c(ctx) {
  let h12;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h12 = element("h1");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", { class: true });
      var h1_nodes = children(h12);
      t2 = claim_text(h1_nodes, t_value);
      h1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h12, "class", "text-5xl no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_fragment$1c(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$M, create_else_block$p];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*dashboardId*/
      ctx2[1] === void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$1d($$self, $$props, $$invalidate) {
  let dashboardId;
  let dashboards$2;
  let dashboard;
  let size;
  let $localDashboards;
  let $homeyDashboards;
  let $editing;
  component_subscribe($$self, dashboards, ($$value) => $$invalidate(7, $localDashboards = $$value));
  component_subscribe($$self, dashboards$1, ($$value) => $$invalidate(8, $homeyDashboards = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(4, $editing = $$value));
  let { context } = $$props;
  let { settings } = $$props;
  const click_handler = (e2) => {
    if (!$editing) {
      e2.stopPropagation();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(5, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(1, dashboardId = settings == null ? void 0 : settings.dashboardId);
    }
    if ($$self.$$.dirty & /*$homeyDashboards, $localDashboards*/
    384) {
      $$invalidate(6, dashboards$2 = { ...$homeyDashboards, ...$localDashboards });
    }
    if ($$self.$$.dirty & /*dashboardId, dashboards*/
    66) {
      $$invalidate(3, dashboard = dashboardId !== void 0 ? dashboards$2[dashboardId] : void 0);
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(2, size = settings == null ? void 0 : settings.size);
    }
  };
  return [
    settings,
    dashboardId,
    size,
    dashboard,
    $editing,
    context,
    dashboards$2,
    $localDashboards,
    $homeyDashboards,
    click_handler
  ];
}
class DashboardLinkWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1d, create_fragment$1c, safe_not_equal, { context: 5, settings: 0 });
  }
}
const info$j = {
  type: "dashboard-link",
  label: "Dashboard link",
  icon: mdiViewDashboard,
  category: "component",
  widget: DashboardLinkWidget,
  editor: DashboardLinkEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "dashboard-link", version: 1 }),
  migration: (e2) => e2
};
function create_catch_block_1(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d: noop$1
  };
}
function create_then_block_1(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_2$g, create_else_block$o];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    var _a2;
    if (
      /*selected*/
      ctx2[3] !== void 0 && /*selected*/
      ((_a2 = ctx2[3].iconObj) == null ? void 0 : _a2.url)
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$o(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMagnify } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_2$g(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
      this.h();
    },
    h() {
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[22] + /*selected*/
      ctx[3].iconObj.url))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*selected*/
      ctx[3].name);
      attr(img, "class", "h-6 w-6 mr-2 dark:invert inline");
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$homey, selected*/
      72 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[22] + /*selected*/
      ctx2[3].iconObj.url)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*selected*/
      8 && img_alt_value !== (img_alt_value = /*selected*/
      ctx2[3].name)) {
        attr(img, "alt", img_alt_value);
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block_1(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMagnify } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_1$r(ctx) {
  let span;
  let t_value = (
    /*selected*/
    ctx[3].name + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text-alt");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*selected*/
      8 && t_value !== (t_value = /*selected*/
      ctx2[3].name + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_catch_block$7(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block$7(ctx) {
  var _a2;
  let if_block_anchor;
  let if_block = (
    /*item*/
    ((_a2 = ctx[21].iconObj) == null ? void 0 : _a2.url) && create_if_block$L(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      var _a3;
      if (
        /*item*/
        (_a3 = ctx2[21].iconObj) == null ? void 0 : _a3.url
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$L(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block$L(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
      this.h();
    },
    h() {
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[22] + /*item*/
      ctx[21].iconObj.url))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*item*/
      ctx[21].title);
      attr(img, "class", "h-6 w-6 mr-2 dark:invert inline");
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$homey, item*/
      2097216 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[22] + /*item*/
      ctx2[21].iconObj.url)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*item*/
      2097152 && img_alt_value !== (img_alt_value = /*item*/
      ctx2[21].title)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block$7(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_default_slot$d(ctx) {
  let button;
  let h3;
  let promise;
  let t0;
  let t1_value = (
    /*item*/
    ctx[21].name + ""
  );
  let t1;
  let t2;
  let div0;
  let span0;
  let t3_value = (
    /*item*/
    (ctx[21].zone !== void 0 ? (
      /*$zones*/
      ctx[7][
        /*item*/
        ctx[21].zone
      ].name
    ) : "") + ""
  );
  let t3;
  let t4;
  let span1;
  let t5_value = (
    /*item*/
    ctx[21].class + ""
  );
  let t5;
  let t6;
  let div1;
  let mounted;
  let dispose;
  let info2 = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$7,
    then: create_then_block$7,
    catch: create_catch_block$7,
    value: 22
  };
  handle_promise(promise = /*$homey*/
  ctx[6].baseUrl, info2);
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[16](
        /*item*/
        ctx[21]
      )
    );
  }
  return {
    c() {
      button = element("button");
      h3 = element("h3");
      info2.block.c();
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      div0 = element("div");
      span0 = element("span");
      t3 = text(t3_value);
      t4 = space();
      span1 = element("span");
      t5 = text(t5_value);
      t6 = space();
      div1 = element("div");
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      h3 = claim_element(button_nodes, "H3", { class: true });
      var h3_nodes = children(h3);
      info2.block.l(h3_nodes);
      t0 = claim_space(h3_nodes);
      t1 = claim_text(h3_nodes, t1_value);
      h3_nodes.forEach(detach);
      t2 = claim_space(button_nodes);
      div0 = claim_element(button_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", {});
      var span0_nodes = children(span0);
      t3 = claim_text(span0_nodes, t3_value);
      span0_nodes.forEach(detach);
      t4 = claim_space(div0_nodes);
      span1 = claim_element(div0_nodes, "SPAN", {});
      var span1_nodes = children(span1);
      t5 = claim_text(span1_nodes, t5_value);
      span1_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      button_nodes.forEach(detach);
      t6 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      children(div1).forEach(detach);
      this.h();
    },
    h() {
      attr(h3, "class", "w-full flex justify-start");
      attr(div0, "class", "w-full flex justify-between");
      attr(button, "class", "btn btn-ghost w-full");
      attr(div1, "class", "divider divider-neutral my-1");
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, h3);
      info2.block.m(h3, info2.anchor = null);
      info2.mount = () => h3;
      info2.anchor = t0;
      append_hydration(h3, t0);
      append_hydration(h3, t1);
      append_hydration(button, t2);
      append_hydration(button, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t3);
      append_hydration(div0, t4);
      append_hydration(div0, span1);
      append_hydration(span1, t5);
      insert_hydration(target, t6, anchor);
      insert_hydration(target, div1, anchor);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info2.ctx = ctx;
      if (dirty & /*$homey*/
      64 && promise !== (promise = /*$homey*/
      ctx[6].baseUrl) && handle_promise(promise, info2))
        ;
      else {
        update_await_block_branch(info2, ctx, dirty);
      }
      if (dirty & /*item*/
      2097152 && t1_value !== (t1_value = /*item*/
      ctx[21].name + ""))
        set_data(t1, t1_value);
      if (dirty & /*item, $zones*/
      2097280 && t3_value !== (t3_value = /*item*/
      (ctx[21].zone !== void 0 ? (
        /*$zones*/
        ctx[7][
          /*item*/
          ctx[21].zone
        ].name
      ) : "") + ""))
        set_data(t3, t3_value);
      if (dirty & /*item*/
      2097152 && t5_value !== (t5_value = /*item*/
      ctx[21].class + ""))
        set_data(t5, t5_value);
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t6);
        detach(div1);
      }
      info2.block.d();
      info2.token = null;
      info2 = null;
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$1b(ctx) {
  let label;
  let div0;
  let span0;
  let t0;
  let t1;
  let div1;
  let input0;
  let t2;
  let button0;
  let promise;
  let t3;
  let div2;
  let span1;
  let t4;
  let t5;
  let dialog;
  let div5;
  let div3;
  let form;
  let button1;
  let icon;
  let t6;
  let input1;
  let t7;
  let div4;
  let virtuallist;
  let current;
  let mounted;
  let dispose;
  let info2 = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block_1,
    then: create_then_block_1,
    catch: create_catch_block_1,
    value: 22,
    blocks: [, , ,]
  };
  handle_promise(promise = /*$homey*/
  ctx[6].baseUrl, info2);
  let if_block = (
    /*selected*/
    ctx[3] !== void 0 && create_if_block_1$r(ctx)
  );
  icon = new Icon({ props: { data: mdiClose } });
  virtuallist = new VirtualList({
    props: {
      items: (
        /*filtered*/
        ctx[5]
      ),
      height: "50vh",
      $$slots: {
        default: [
          create_default_slot$d,
          ({ item }) => ({ 21: item }),
          ({ item }) => item ? 2097152 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      label = element("label");
      div0 = element("div");
      span0 = element("span");
      t0 = text(
        /*name*/
        ctx[1]
      );
      t1 = space();
      div1 = element("div");
      input0 = element("input");
      t2 = space();
      button0 = element("button");
      info2.block.c();
      t3 = space();
      div2 = element("div");
      span1 = element("span");
      t4 = space();
      if (if_block)
        if_block.c();
      t5 = space();
      dialog = element("dialog");
      div5 = element("div");
      div3 = element("div");
      form = element("form");
      button1 = element("button");
      create_component(icon.$$.fragment);
      t6 = space();
      input1 = element("input");
      t7 = space();
      div4 = element("div");
      create_component(virtuallist.$$.fragment);
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div0 = claim_element(label_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t0 = claim_text(
        span0_nodes,
        /*name*/
        ctx[1]
      );
      span0_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t1 = claim_space(label_nodes);
      div1 = claim_element(label_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      input0 = claim_element(div1_nodes, "INPUT", {
        type: true,
        class: true,
        placeholder: true
      });
      t2 = claim_space(div1_nodes);
      button0 = claim_element(div1_nodes, "BUTTON", { class: true });
      var button0_nodes = children(button0);
      info2.block.l(button0_nodes);
      button0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t3 = claim_space(label_nodes);
      div2 = claim_element(label_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      span1 = claim_element(div2_nodes, "SPAN", { class: true });
      children(span1).forEach(detach);
      t4 = claim_space(div2_nodes);
      if (if_block)
        if_block.l(div2_nodes);
      div2_nodes.forEach(detach);
      label_nodes.forEach(detach);
      t5 = claim_space(nodes);
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div5 = claim_element(dialog_nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      div3 = claim_element(div5_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      form = claim_element(div3_nodes, "FORM", { method: true });
      var form_nodes = children(form);
      button1 = claim_element(form_nodes, "BUTTON", { class: true });
      var button1_nodes = children(button1);
      claim_component(icon.$$.fragment, button1_nodes);
      button1_nodes.forEach(detach);
      form_nodes.forEach(detach);
      t6 = claim_space(div3_nodes);
      input1 = claim_element(div3_nodes, "INPUT", {
        type: true,
        class: true,
        name: true,
        placeholder: true
      });
      div3_nodes.forEach(detach);
      t7 = claim_space(div5_nodes);
      div4 = claim_element(div5_nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      claim_component(virtuallist.$$.fragment, div4_nodes);
      div4_nodes.forEach(detach);
      div5_nodes.forEach(detach);
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span0, "class", "label-text");
      attr(div0, "class", "label");
      attr(input0, "type", "text");
      attr(input0, "class", "input input-bordered grow join-item");
      attr(input0, "placeholder", "Device");
      attr(button0, "class", "btn btn-outline btn-primary join-item");
      attr(div1, "class", "join flex items-center");
      attr(span1, "class", "label-text");
      attr(div2, "class", "label whitespace-nowrap overflow-ellipsis");
      attr(label, "class", "form-control w-full");
      attr(button1, "class", "btn btn-sm btn-circle btn-ghost absolute right-2 top-2");
      attr(form, "method", "dialog");
      attr(input1, "type", "text");
      attr(input1, "class", "input w-full input-primary");
      attr(input1, "name", "search");
      attr(input1, "placeholder", "Search");
      attr(div3, "class", "flex-shrink-0 mb-2");
      attr(div4, "class", "flex-grow overflow-auto");
      attr(div5, "class", "modal-box flex flex-col");
      attr(dialog, "class", "modal");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t0);
      append_hydration(label, t1);
      append_hydration(label, div1);
      append_hydration(div1, input0);
      set_input_value(
        input0,
        /*deviceId*/
        ctx[0]
      );
      append_hydration(div1, t2);
      append_hydration(div1, button0);
      info2.block.m(button0, info2.anchor = null);
      info2.mount = () => button0;
      info2.anchor = null;
      append_hydration(label, t3);
      append_hydration(label, div2);
      append_hydration(div2, span1);
      append_hydration(div2, t4);
      if (if_block)
        if_block.m(div2, null);
      insert_hydration(target, t5, anchor);
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div5);
      append_hydration(div5, div3);
      append_hydration(div3, form);
      append_hydration(form, button1);
      mount_component(icon, button1, null);
      append_hydration(div3, t6);
      append_hydration(div3, input1);
      set_input_value(
        input1,
        /*search*/
        ctx[2]
      );
      append_hydration(div5, t7);
      append_hydration(div5, div4);
      mount_component(virtuallist, div4, null);
      ctx[17](dialog);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input0,
            "input",
            /*input0_input_handler*/
            ctx[13]
          ),
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[14]
          ),
          listen(
            input1,
            "input",
            /*input1_input_handler*/
            ctx[15]
          )
        ];
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (!current || dirty & /*name*/
      2)
        set_data(
          t0,
          /*name*/
          ctx[1]
        );
      if (dirty & /*deviceId*/
      1 && input0.value !== /*deviceId*/
      ctx[0]) {
        set_input_value(
          input0,
          /*deviceId*/
          ctx[0]
        );
      }
      info2.ctx = ctx;
      if (dirty & /*$homey*/
      64 && promise !== (promise = /*$homey*/
      ctx[6].baseUrl) && handle_promise(promise, info2))
        ;
      else {
        update_await_block_branch(info2, ctx, dirty);
      }
      if (
        /*selected*/
        ctx[3] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block_1$r(ctx);
          if_block.c();
          if_block.m(div2, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*search*/
      4 && input1.value !== /*search*/
      ctx[2]) {
        set_input_value(
          input1,
          /*search*/
          ctx[2]
        );
      }
      const virtuallist_changes = {};
      if (dirty & /*filtered*/
      32)
        virtuallist_changes.items = /*filtered*/
        ctx[5];
      if (dirty & /*$$scope, item, $zones, $homey*/
      10485952) {
        virtuallist_changes.$$scope = { dirty, ctx };
      }
      virtuallist.$set(virtuallist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(info2.block);
      transition_in(icon.$$.fragment, local);
      transition_in(virtuallist.$$.fragment, local);
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        const block = info2.blocks[i2];
        transition_out(block);
      }
      transition_out(icon.$$.fragment, local);
      transition_out(virtuallist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label);
        detach(t5);
        detach(dialog);
      }
      info2.block.d();
      info2.token = null;
      info2 = null;
      if (if_block)
        if_block.d();
      destroy_component(icon);
      destroy_component(virtuallist);
      ctx[17](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$1c($$self, $$props, $$invalidate) {
  let flatDevices;
  let sorted;
  let $devices;
  let $homey;
  let $zones;
  component_subscribe($$self, devices, ($$value) => $$invalidate(12, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(6, $homey = $$value));
  component_subscribe($$self, zones, ($$value) => $$invalidate(7, $zones = $$value));
  let { deviceId } = $$props;
  let { name = "Device" } = $$props;
  let { deviceFilter = void 0 } = $$props;
  const dispatch = createEventDispatcher();
  let modal;
  let search = "";
  let filtered = [];
  let selected;
  function filterDevices(value, s3) {
    const normalized = value.toLowerCase();
    if (value.length > 0) {
      $$invalidate(5, filtered = sorted.filter((d3) => d3.name.toLowerCase().includes(normalized)));
    } else {
      $$invalidate(5, filtered = sorted);
    }
  }
  function onDevice(device) {
    $$invalidate(0, deviceId = device.id);
    modal.close();
  }
  function onSelected(device) {
    dispatch("device", device);
  }
  function input0_input_handler() {
    deviceId = this.value;
    $$invalidate(0, deviceId);
  }
  const click_handler = () => modal.showModal();
  function input1_input_handler() {
    search = this.value;
    $$invalidate(2, search);
  }
  const click_handler_1 = (item) => onDevice(item);
  function dialog_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(4, modal);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("deviceId" in $$props2)
      $$invalidate(0, deviceId = $$props2.deviceId);
    if ("name" in $$props2)
      $$invalidate(1, name = $$props2.name);
    if ("deviceFilter" in $$props2)
      $$invalidate(9, deviceFilter = $$props2.deviceFilter);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$devices, deviceFilter*/
    4608) {
      $$invalidate(11, flatDevices = Object.values($devices).filter((device) => deviceFilter ? deviceFilter(device) : true));
    }
    if ($$self.$$.dirty & /*flatDevices*/
    2048) {
      $$invalidate(10, sorted = (flatDevices ?? []).sort((a3, b2) => {
        if (a3.name === b2.name)
          return 0;
        if (a3.name < b2.name)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*deviceId, flatDevices*/
    2049) {
      $$invalidate(3, selected = deviceId !== void 0 ? flatDevices.find((d3) => d3.id === deviceId) : void 0);
    }
    if ($$self.$$.dirty & /*search, sorted*/
    1028) {
      filterDevices(search);
    }
    if ($$self.$$.dirty & /*selected*/
    8) {
      onSelected(selected);
    }
    if ($$self.$$.dirty & /*deviceId*/
    1) {
      dispatch("deviceId", deviceId);
    }
  };
  return [
    deviceId,
    name,
    search,
    selected,
    modal,
    filtered,
    $homey,
    $zones,
    onDevice,
    deviceFilter,
    sorted,
    flatDevices,
    $devices,
    input0_input_handler,
    click_handler,
    input1_input_handler,
    click_handler_1,
    dialog_binding
  ];
}
class DevicePicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1c, create_fragment$1b, safe_not_equal, { deviceId: 0, name: 1, deviceFilter: 9 });
  }
}
function create_if_block$K(ctx) {
  let textpicker;
  let updating_value;
  let current;
  function textpicker_value_binding(value) {
    ctx[7](value);
  }
  let textpicker_props = {
    placeholder: (
      /*device*/
      ctx[3].name
    ),
    label: "Title"
  };
  if (
    /*title*/
    ctx[1] !== void 0
  ) {
    textpicker_props.value = /*title*/
    ctx[1];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  return {
    c() {
      create_component(textpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const textpicker_changes = {};
      if (dirty & /*device*/
      8)
        textpicker_changes.placeholder = /*device*/
        ctx2[3].name;
      if (!updating_value && dirty & /*title*/
      2) {
        updating_value = true;
        textpicker_changes.value = /*title*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(textpicker, detaching);
    }
  };
}
function create_fragment$1a(ctx) {
  let devicepicker;
  let updating_deviceId;
  let t0;
  let t1;
  let iconpicker;
  let updating_iconId;
  let current;
  function devicepicker_deviceId_binding(value) {
    ctx[6](value);
  }
  let devicepicker_props = {};
  if (
    /*deviceId*/
    ctx[0] !== void 0
  ) {
    devicepicker_props.deviceId = /*deviceId*/
    ctx[0];
  }
  devicepicker = new DevicePicker({ props: devicepicker_props });
  binding_callbacks.push(() => bind(devicepicker, "deviceId", devicepicker_deviceId_binding));
  let if_block = (
    /*device*/
    ctx[3] && create_if_block$K(ctx)
  );
  function iconpicker_iconId_binding(value) {
    ctx[8](value);
  }
  let iconpicker_props = {};
  if (
    /*iconId*/
    ctx[2] !== void 0
  ) {
    iconpicker_props.iconId = /*iconId*/
    ctx[2];
  }
  iconpicker = new IconPicker({ props: iconpicker_props });
  binding_callbacks.push(() => bind(iconpicker, "iconId", iconpicker_iconId_binding));
  return {
    c() {
      create_component(devicepicker.$$.fragment);
      t0 = space();
      if (if_block)
        if_block.c();
      t1 = space();
      create_component(iconpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(devicepicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      t1 = claim_space(nodes);
      claim_component(iconpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(devicepicker, target, anchor);
      insert_hydration(target, t0, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(iconpicker, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const devicepicker_changes = {};
      if (!updating_deviceId && dirty & /*deviceId*/
      1) {
        updating_deviceId = true;
        devicepicker_changes.deviceId = /*deviceId*/
        ctx2[0];
        add_flush_callback(() => updating_deviceId = false);
      }
      devicepicker.$set(devicepicker_changes);
      if (
        /*device*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*device*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$K(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t1.parentNode, t1);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const iconpicker_changes = {};
      if (!updating_iconId && dirty & /*iconId*/
      4) {
        updating_iconId = true;
        iconpicker_changes.iconId = /*iconId*/
        ctx2[2];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker.$set(iconpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(devicepicker.$$.fragment, local);
      transition_in(if_block);
      transition_in(iconpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(devicepicker.$$.fragment, local);
      transition_out(if_block);
      transition_out(iconpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(devicepicker, detaching);
      if (if_block)
        if_block.d(detaching);
      destroy_component(iconpicker, detaching);
    }
  };
}
function instance$1b($$self, $$props, $$invalidate) {
  let $devices;
  component_subscribe($$self, devices, ($$value) => $$invalidate(5, $devices = $$value));
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let deviceId;
  let title;
  let iconId;
  let device;
  function onSettings(s3) {
    $$invalidate(0, deviceId = s3 == null ? void 0 : s3.deviceId);
    $$invalidate(1, title = s3 == null ? void 0 : s3.title);
    $$invalidate(2, iconId = s3 == null ? void 0 : s3.iconId);
  }
  function onDevice(id) {
    if (id !== settings.deviceId) {
      dispatch("settings", {
        ...settings,
        deviceId: id,
        capabilityId: void 0
      });
    }
  }
  function onTitle(t2) {
    const value = t2 !== void 0 && t2.length > 0 ? t2 : void 0;
    if (value !== settings.title) {
      dispatch("settings", { ...settings, title: value });
    }
  }
  function onIcon(id) {
    if (id !== settings.iconId) {
      dispatch("settings", { ...settings, iconId: id });
    }
  }
  function devicepicker_deviceId_binding(value) {
    deviceId = value;
    $$invalidate(0, deviceId);
  }
  function textpicker_value_binding(value) {
    title = value;
    $$invalidate(1, title);
  }
  function iconpicker_iconId_binding(value) {
    iconId = value;
    $$invalidate(2, iconId);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(4, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    16) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*deviceId, $devices*/
    33) {
      $$invalidate(3, device = deviceId ? $devices[deviceId] : void 0);
    }
    if ($$self.$$.dirty & /*deviceId*/
    1) {
      onDevice(deviceId);
    }
    if ($$self.$$.dirty & /*title*/
    2) {
      onTitle(title);
    }
    if ($$self.$$.dirty & /*iconId*/
    4) {
      onIcon(iconId);
    }
  };
  return [
    deviceId,
    title,
    iconId,
    device,
    settings,
    $devices,
    devicepicker_deviceId_binding,
    textpicker_value_binding,
    iconpicker_iconId_binding
  ];
}
class DeviceEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1b, create_fragment$1a, safe_not_equal, { settings: 4 });
  }
}
function create_else_block_1$7(ctx) {
  var _a2;
  let current_block_type_index;
  let if_block;
  let t0;
  let span;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? /*device*/
    ((_a2 = ctx[1]) == null ? void 0 : _a2.name)) + ""
  );
  let t1;
  let current;
  const if_block_creators = [create_if_block_2$f, create_else_block_2$1];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].iconId !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_2(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      this.h();
    },
    l(nodes) {
      if_block.l(nodes);
      t0 = claim_space(nodes);
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "w-full overflow-hidden overflow-ellipsis");
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, span, anchor);
      append_hydration(span, t1);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3;
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(t0.parentNode, t0);
      }
      if ((!current || dirty & /*settings, device*/
      3) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? /*device*/
      ((_a3 = ctx2[1]) == null ? void 0 : _a3.name)) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(span);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_if_block$J(ctx) {
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    var _a2;
    if (
      /*settings*/
      ((_a2 = ctx2[0]) == null ? void 0 : _a2.deviceId) !== void 0
    )
      return create_if_block_1$q;
    return create_else_block$n;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_else_block_2$1(ctx) {
  let await_block_anchor;
  let promise;
  let info2 = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$6,
    then: create_then_block$6,
    catch: create_catch_block$6,
    value: 5
  };
  handle_promise(promise = /*$homey*/
  ctx[2].baseUrl, info2);
  return {
    c() {
      await_block_anchor = empty();
      info2.block.c();
    },
    l(nodes) {
      await_block_anchor = empty();
      info2.block.l(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, await_block_anchor, anchor);
      info2.block.m(target, info2.anchor = anchor);
      info2.mount = () => await_block_anchor.parentNode;
      info2.anchor = await_block_anchor;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info2.ctx = ctx;
      if (dirty & /*$homey*/
      4 && promise !== (promise = /*$homey*/
      ctx[2].baseUrl) && handle_promise(promise, info2))
        ;
      else {
        update_await_block_branch(info2, ctx, dirty);
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info2.block.d(detaching);
      info2.token = null;
      info2 = null;
    }
  };
}
function create_if_block_2$f(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      )
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_catch_block$6(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block$6(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
      this.h();
    },
    h() {
      var _a2, _b2;
      attr(img, "class", "w-8 h-8 m-1 dark:invert");
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[5] + /*device*/
      ((_a2 = ctx[1]) == null ? void 0 : _a2.iconObj.url)))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*device*/
      (_b2 = ctx[1]) == null ? void 0 : _b2.icon);
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      var _a2, _b2;
      if (dirty & /*$homey, device*/
      6 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[5] + /*device*/
      ((_a2 = ctx2[1]) == null ? void 0 : _a2.iconObj.url))) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*device*/
      2 && img_alt_value !== (img_alt_value = /*device*/
      (_b2 = ctx2[1]) == null ? void 0 : _b2.icon)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block$6(ctx) {
  let t2;
  return {
    c() {
      t2 = text("...");
    },
    l(nodes) {
      t2 = claim_text(nodes, "...");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_else_block$n(ctx) {
  let span;
  let textContent = "Device not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1lpomex")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$q(ctx) {
  let span;
  let textContent = "Device not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-izam8p")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$19(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block$J, create_else_block_1$7];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*device*/
      ctx2[1] === void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex items-center gap-1");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$1a($$self, $$props, $$invalidate) {
  let $devices;
  let $homey;
  component_subscribe($$self, devices, ($$value) => $$invalidate(4, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(2, $homey = $$value));
  let { context } = $$props;
  let { settings } = $$props;
  let device;
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(3, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$devices, settings*/
    17) {
      $$invalidate(1, device = $devices[settings.deviceId ?? ""]);
    }
  };
  return [settings, device, $homey, context, $devices];
}
class DeviceWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1a, create_fragment$19, safe_not_equal, { context: 3, settings: 0 });
  }
}
function create$5() {
  return {
    id: v4(),
    type: "device",
    version: 1
  };
}
function migrate$5(settings) {
  while (settings.version !== 2) {
    settings = migrateOnce$5(settings);
  }
  return settings;
}
function migrateOnce$5(settings) {
  switch (settings.version) {
    case 1:
    default:
      return settings;
  }
}
const info$i = {
  type: "device",
  label: "Device",
  icon: mdiMeterElectric,
  category: "component",
  widget: DeviceWidget,
  editor: DeviceEditor,
  scopes: [],
  create: create$5,
  migration: migrate$5,
  deprecated: true
};
function get_each_context$i(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[19] = list[i2];
  return child_ctx;
}
function create_if_block_2$e(ctx) {
  let span;
  let t_value = (
    /*selected*/
    ctx[5].flow.name + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text-alt");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*selected*/
      32 && t_value !== (t_value = /*selected*/
      ctx2[5].flow.name + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$p(ctx) {
  let span;
  let t0_value = (
    /*selected*/
    ctx[5].folders.map(func).join("/") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*selected*/
    ctx[5].flow.name + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = text(" - ");
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_text(span_nodes, " - ");
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text-alt");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*selected*/
      32 && t0_value !== (t0_value = /*selected*/
      ctx2[5].folders.map(func).join("/") + ""))
        set_data(t0, t0_value);
      if (dirty & /*selected*/
      32 && t2_value !== (t2_value = /*selected*/
      ctx2[5].flow.name + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block$I(ctx) {
  let span;
  return {
    c() {
      span = element("span");
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      children(span).forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_each_block$i(ctx) {
  let span;
  let icon;
  let t0;
  let t1_value = (
    /*folder*/
    ctx[19].name + ""
  );
  let t1;
  let current;
  icon = new Icon({ props: { data: mdiFolder } });
  return {
    c() {
      span = element("span");
      create_component(icon.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      claim_component(icon.$$.fragment, span_nodes);
      t0 = claim_space(span_nodes);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      mount_component(icon, span, null);
      append_hydration(span, t0);
      append_hydration(span, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & /*item*/
      262144) && t1_value !== (t1_value = /*folder*/
      ctx2[19].name + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(icon);
    }
  };
}
function create_default_slot$c(ctx) {
  let li;
  let a3;
  let t0;
  let t1;
  let span;
  let t2;
  let t3_value = (
    /*item*/
    ctx[18].flow.name + ""
  );
  let t3;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*item*/
    ctx[18].folders.length == 0 && create_if_block$I()
  );
  let each_value = ensure_array_like(
    /*item*/
    ctx[18].folders
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$i(get_each_context$i(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[12](
        /*item*/
        ctx[18]
      )
    );
  }
  return {
    c() {
      li = element("li");
      a3 = element("a");
      if (if_block)
        if_block.c();
      t0 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t1 = space();
      span = element("span");
      t2 = space();
      t3 = text(t3_value);
    },
    l(nodes) {
      li = claim_element(nodes, "LI", {});
      var li_nodes = children(li);
      a3 = claim_element(li_nodes, "A", {});
      var a_nodes = children(a3);
      if (if_block)
        if_block.l(a_nodes);
      t0 = claim_space(a_nodes);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(a_nodes);
      }
      t1 = claim_space(a_nodes);
      span = claim_element(a_nodes, "SPAN", {});
      children(span).forEach(detach);
      t2 = claim_space(a_nodes);
      t3 = claim_text(a_nodes, t3_value);
      a_nodes.forEach(detach);
      li_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, li, anchor);
      append_hydration(li, a3);
      if (if_block)
        if_block.m(a3, null);
      append_hydration(a3, t0);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(a3, null);
        }
      }
      append_hydration(a3, t1);
      append_hydration(a3, span);
      append_hydration(a3, t2);
      append_hydration(a3, t3);
      current = true;
      if (!mounted) {
        dispose = listen(a3, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*item*/
        ctx[18].folders.length == 0
      ) {
        if (if_block)
          ;
        else {
          if_block = create_if_block$I();
          if_block.c();
          if_block.m(a3, t0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*item*/
      262144) {
        each_value = ensure_array_like(
          /*item*/
          ctx[18].folders
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$i(ctx, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$i(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(a3, t1);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
      if ((!current || dirty & /*item*/
      262144) && t3_value !== (t3_value = /*item*/
      ctx[18].flow.name + ""))
        set_data(t3, t3_value);
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(li);
      }
      if (if_block)
        if_block.d();
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$18(ctx) {
  let label;
  let div0;
  let span0;
  let t0;
  let t1;
  let div1;
  let input0;
  let t2;
  let button0;
  let icon0;
  let t3;
  let div2;
  let span1;
  let t4;
  let t5;
  let dialog;
  let div5;
  let div3;
  let form;
  let button1;
  let icon1;
  let t6;
  let input1;
  let t7;
  let div4;
  let ul;
  let virtuallist;
  let current;
  let mounted;
  let dispose;
  icon0 = new Icon({ props: { data: mdiMagnify } });
  function select_block_type(ctx2, dirty) {
    if (
      /*selected*/
      ctx2[5] !== void 0 && /*selected*/
      ctx2[5].folders.length > 0
    )
      return create_if_block_1$p;
    if (
      /*selected*/
      ctx2[5] !== void 0
    )
      return create_if_block_2$e;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type && current_block_type(ctx);
  icon1 = new Icon({ props: { data: mdiClose } });
  virtuallist = new VirtualList({
    props: {
      items: (
        /*filtered*/
        ctx[4]
      ),
      height: "50vh",
      $$slots: {
        default: [
          create_default_slot$c,
          ({ item }) => ({ 18: item }),
          ({ item }) => item ? 262144 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      label = element("label");
      div0 = element("div");
      span0 = element("span");
      t0 = text(
        /*name*/
        ctx[1]
      );
      t1 = space();
      div1 = element("div");
      input0 = element("input");
      t2 = space();
      button0 = element("button");
      create_component(icon0.$$.fragment);
      t3 = space();
      div2 = element("div");
      span1 = element("span");
      t4 = space();
      if (if_block)
        if_block.c();
      t5 = space();
      dialog = element("dialog");
      div5 = element("div");
      div3 = element("div");
      form = element("form");
      button1 = element("button");
      create_component(icon1.$$.fragment);
      t6 = space();
      input1 = element("input");
      t7 = space();
      div4 = element("div");
      ul = element("ul");
      create_component(virtuallist.$$.fragment);
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div0 = claim_element(label_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t0 = claim_text(
        span0_nodes,
        /*name*/
        ctx[1]
      );
      span0_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t1 = claim_space(label_nodes);
      div1 = claim_element(label_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      input0 = claim_element(div1_nodes, "INPUT", {
        type: true,
        class: true,
        placeholder: true
      });
      t2 = claim_space(div1_nodes);
      button0 = claim_element(div1_nodes, "BUTTON", { class: true });
      var button0_nodes = children(button0);
      claim_component(icon0.$$.fragment, button0_nodes);
      button0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t3 = claim_space(label_nodes);
      div2 = claim_element(label_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      span1 = claim_element(div2_nodes, "SPAN", { class: true });
      children(span1).forEach(detach);
      t4 = claim_space(div2_nodes);
      if (if_block)
        if_block.l(div2_nodes);
      div2_nodes.forEach(detach);
      label_nodes.forEach(detach);
      t5 = claim_space(nodes);
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div5 = claim_element(dialog_nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      div3 = claim_element(div5_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      form = claim_element(div3_nodes, "FORM", { method: true });
      var form_nodes = children(form);
      button1 = claim_element(form_nodes, "BUTTON", { class: true });
      var button1_nodes = children(button1);
      claim_component(icon1.$$.fragment, button1_nodes);
      button1_nodes.forEach(detach);
      form_nodes.forEach(detach);
      t6 = claim_space(div3_nodes);
      input1 = claim_element(div3_nodes, "INPUT", {
        type: true,
        class: true,
        name: true,
        placeholder: true
      });
      div3_nodes.forEach(detach);
      t7 = claim_space(div5_nodes);
      div4 = claim_element(div5_nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      ul = claim_element(div4_nodes, "UL", { class: true });
      var ul_nodes = children(ul);
      claim_component(virtuallist.$$.fragment, ul_nodes);
      ul_nodes.forEach(detach);
      div4_nodes.forEach(detach);
      div5_nodes.forEach(detach);
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span0, "class", "label-text");
      attr(div0, "class", "label");
      attr(input0, "type", "text");
      attr(input0, "class", "input input-bordered grow join-item");
      attr(input0, "placeholder", "Flow");
      attr(button0, "class", "btn btn-outline btn-primary join-item");
      attr(div1, "class", "join flex items-center");
      attr(span1, "class", "label-text");
      attr(div2, "class", "label whitespace-nowrap overflow-ellipsis");
      attr(label, "class", "form-control w-full");
      attr(button1, "class", "btn btn-sm btn-circle btn-ghost absolute right-2 top-2");
      attr(form, "method", "dialog");
      attr(input1, "type", "text");
      attr(input1, "class", "input w-full input-primary");
      attr(input1, "name", "search");
      attr(input1, "placeholder", "Search");
      attr(div3, "class", "flex-shrink-0 mb-2");
      attr(ul, "class", "menu bg-base-200 rounded-box");
      attr(div4, "class", "flex-grow overflow-auto");
      attr(div5, "class", "modal-box flex flex-col");
      attr(dialog, "class", "modal");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t0);
      append_hydration(label, t1);
      append_hydration(label, div1);
      append_hydration(div1, input0);
      set_input_value(
        input0,
        /*flowId*/
        ctx[0]
      );
      append_hydration(div1, t2);
      append_hydration(div1, button0);
      mount_component(icon0, button0, null);
      append_hydration(label, t3);
      append_hydration(label, div2);
      append_hydration(div2, span1);
      append_hydration(div2, t4);
      if (if_block)
        if_block.m(div2, null);
      insert_hydration(target, t5, anchor);
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div5);
      append_hydration(div5, div3);
      append_hydration(div3, form);
      append_hydration(form, button1);
      mount_component(icon1, button1, null);
      append_hydration(div3, t6);
      append_hydration(div3, input1);
      set_input_value(
        input1,
        /*search*/
        ctx[2]
      );
      append_hydration(div5, t7);
      append_hydration(div5, div4);
      append_hydration(div4, ul);
      mount_component(virtuallist, ul, null);
      ctx[13](dialog);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input0,
            "input",
            /*input0_input_handler*/
            ctx[9]
          ),
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[10]
          ),
          listen(
            input1,
            "input",
            /*input1_input_handler*/
            ctx[11]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*name*/
      2)
        set_data(
          t0,
          /*name*/
          ctx2[1]
        );
      if (dirty & /*flowId*/
      1 && input0.value !== /*flowId*/
      ctx2[0]) {
        set_input_value(
          input0,
          /*flowId*/
          ctx2[0]
        );
      }
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if (if_block)
          if_block.d(1);
        if_block = current_block_type && current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div2, null);
        }
      }
      if (dirty & /*search*/
      4 && input1.value !== /*search*/
      ctx2[2]) {
        set_input_value(
          input1,
          /*search*/
          ctx2[2]
        );
      }
      const virtuallist_changes = {};
      if (dirty & /*filtered*/
      16)
        virtuallist_changes.items = /*filtered*/
        ctx2[4];
      if (dirty & /*$$scope, item*/
      4456448) {
        virtuallist_changes.$$scope = { dirty, ctx: ctx2 };
      }
      virtuallist.$set(virtuallist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon0.$$.fragment, local);
      transition_in(icon1.$$.fragment, local);
      transition_in(virtuallist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon0.$$.fragment, local);
      transition_out(icon1.$$.fragment, local);
      transition_out(virtuallist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label);
        detach(t5);
        detach(dialog);
      }
      destroy_component(icon0);
      if (if_block) {
        if_block.d();
      }
      destroy_component(icon1);
      destroy_component(virtuallist);
      ctx[13](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
const func = (f) => f.name;
function instance$19($$self, $$props, $$invalidate) {
  let sorted;
  let $flowFolders;
  component_subscribe($$self, flowFolders, ($$value) => $$invalidate(14, $flowFolders = $$value));
  let { flowId } = $$props;
  let { flows = [] } = $$props;
  let { name = "Flow" } = $$props;
  const dispatch = createEventDispatcher();
  let modal;
  let search = "";
  let filtered = [];
  let selected;
  function filterFlows(value, s3) {
    const normalized = value.toLowerCase();
    if (value.length > 0) {
      $$invalidate(4, filtered = s3.filter((d3) => d3.searchString.includes(normalized)));
    } else {
      $$invalidate(4, filtered = s3);
    }
  }
  function onItem(item) {
    $$invalidate(0, flowId = item.flow.id);
    modal.close();
    dispatch("flowId", flowId);
  }
  function getFolders(folderId) {
    const folder = $flowFolders[folderId];
    if ((folder == null ? void 0 : folder.parent) !== void 0 && folder.parent !== null) {
      return [folder, ...getFolders(folder.parent)];
    }
    return folder !== void 0 ? [folder] : [];
  }
  function input0_input_handler() {
    flowId = this.value;
    $$invalidate(0, flowId);
  }
  const click_handler = () => modal.showModal();
  function input1_input_handler() {
    search = this.value;
    $$invalidate(2, search);
  }
  const click_handler_1 = (item) => onItem(item);
  function dialog_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(3, modal);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("flowId" in $$props2)
      $$invalidate(0, flowId = $$props2.flowId);
    if ("flows" in $$props2)
      $$invalidate(7, flows = $$props2.flows);
    if ("name" in $$props2)
      $$invalidate(1, name = $$props2.name);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*flows*/
    128) {
      $$invalidate(8, sorted = (flows ?? []).map((flow) => {
        const folders = getFolders(flow.folder);
        return {
          flow,
          folders,
          searchString: (folders.map((f) => f.name).join("/") + " - " + flow.name).toLowerCase()
        };
      }).sort((a3, b2) => {
        if (a3.searchString === b2.searchString)
          return 0;
        if (a3.searchString < b2.searchString)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*flowId, sorted*/
    257) {
      $$invalidate(5, selected = flowId !== void 0 ? sorted.find((f) => f.flow.id === flowId) : void 0);
    }
    if ($$self.$$.dirty & /*search, sorted*/
    260) {
      filterFlows(search, sorted);
    }
  };
  return [
    flowId,
    name,
    search,
    modal,
    filtered,
    selected,
    onItem,
    flows,
    sorted,
    input0_input_handler,
    click_handler,
    input1_input_handler,
    click_handler_1,
    dialog_binding
  ];
}
class FlowPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$19, create_fragment$18, safe_not_equal, { flowId: 0, flows: 7, name: 1 });
  }
}
function create_if_block$H(ctx) {
  let textpicker;
  let updating_value;
  let current;
  function textpicker_value_binding(value) {
    ctx[9](value);
  }
  let textpicker_props = {
    placeholder: (
      /*flow*/
      ctx[4].name
    ),
    label: "Title"
  };
  if (
    /*title*/
    ctx[2] !== void 0
  ) {
    textpicker_props.value = /*title*/
    ctx[2];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  return {
    c() {
      create_component(textpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const textpicker_changes = {};
      if (dirty & /*flow*/
      16)
        textpicker_changes.placeholder = /*flow*/
        ctx2[4].name;
      if (!updating_value && dirty & /*title*/
      4) {
        updating_value = true;
        textpicker_changes.value = /*title*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(textpicker, detaching);
    }
  };
}
function create_fragment$17(ctx) {
  let flowpicker;
  let updating_flowId;
  let t0;
  let t1;
  let iconpicker;
  let updating_iconId;
  let current;
  function flowpicker_flowId_binding(value) {
    ctx[8](value);
  }
  let flowpicker_props = { flows: (
    /*flows*/
    ctx[3]
  ) };
  if (
    /*flowId*/
    ctx[0] !== void 0
  ) {
    flowpicker_props.flowId = /*flowId*/
    ctx[0];
  }
  flowpicker = new FlowPicker({ props: flowpicker_props });
  binding_callbacks.push(() => bind(flowpicker, "flowId", flowpicker_flowId_binding));
  let if_block = (
    /*flow*/
    ctx[4] !== void 0 && create_if_block$H(ctx)
  );
  function iconpicker_iconId_binding(value) {
    ctx[10](value);
  }
  let iconpicker_props = {};
  if (
    /*iconId*/
    ctx[1] !== void 0
  ) {
    iconpicker_props.iconId = /*iconId*/
    ctx[1];
  }
  iconpicker = new IconPicker({ props: iconpicker_props });
  binding_callbacks.push(() => bind(iconpicker, "iconId", iconpicker_iconId_binding));
  return {
    c() {
      create_component(flowpicker.$$.fragment);
      t0 = space();
      if (if_block)
        if_block.c();
      t1 = space();
      create_component(iconpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(flowpicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      t1 = claim_space(nodes);
      claim_component(iconpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(flowpicker, target, anchor);
      insert_hydration(target, t0, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(iconpicker, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const flowpicker_changes = {};
      if (dirty & /*flows*/
      8)
        flowpicker_changes.flows = /*flows*/
        ctx2[3];
      if (!updating_flowId && dirty & /*flowId*/
      1) {
        updating_flowId = true;
        flowpicker_changes.flowId = /*flowId*/
        ctx2[0];
        add_flush_callback(() => updating_flowId = false);
      }
      flowpicker.$set(flowpicker_changes);
      if (
        /*flow*/
        ctx2[4] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*flow*/
          16) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$H(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t1.parentNode, t1);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const iconpicker_changes = {};
      if (!updating_iconId && dirty & /*iconId*/
      2) {
        updating_iconId = true;
        iconpicker_changes.iconId = /*iconId*/
        ctx2[1];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker.$set(iconpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(flowpicker.$$.fragment, local);
      transition_in(if_block);
      transition_in(iconpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(flowpicker.$$.fragment, local);
      transition_out(if_block);
      transition_out(iconpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(flowpicker, detaching);
      if (if_block)
        if_block.d(detaching);
      destroy_component(iconpicker, detaching);
    }
  };
}
function instance$18($$self, $$props, $$invalidate) {
  let flows;
  let flow;
  let $advancedFlows;
  let $basicFlows;
  component_subscribe($$self, advancedFlows, ($$value) => $$invalidate(6, $advancedFlows = $$value));
  component_subscribe($$self, basicFlows, ($$value) => $$invalidate(7, $basicFlows = $$value));
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let flowId;
  let iconId;
  let title;
  function onSettings(s3) {
    $$invalidate(0, flowId = s3 == null ? void 0 : s3.flowId);
    $$invalidate(1, iconId = s3 == null ? void 0 : s3.iconId);
  }
  function onChange(_flowId, _iconId, _title) {
    if (_flowId !== settings.flowId || _iconId !== settings.iconId || _title !== settings.title) {
      $$invalidate(5, settings = {
        ...settings,
        flowId: _flowId,
        iconId: _iconId,
        title: _title
      });
      dispatch("settings", settings);
    }
  }
  function flowpicker_flowId_binding(value) {
    flowId = value;
    $$invalidate(0, flowId);
  }
  function textpicker_value_binding(value) {
    title = value;
    $$invalidate(2, title);
  }
  function iconpicker_iconId_binding(value) {
    iconId = value;
    $$invalidate(1, iconId);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(5, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$basicFlows, $advancedFlows*/
    192) {
      $$invalidate(3, flows = Object.values($basicFlows).concat(Object.values($advancedFlows)).filter((f) => f.triggerable).sort((a3, b2) => {
        if (a3.name === b2.name)
          return 0;
        if (a3.name < b2.name)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*flows, flowId*/
    9) {
      $$invalidate(4, flow = flows.find((f) => f.id === flowId) ?? void 0);
    }
    if ($$self.$$.dirty & /*settings*/
    32) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*flowId, iconId, title*/
    7) {
      onChange(flowId, iconId, title);
    }
  };
  return [
    flowId,
    iconId,
    title,
    flows,
    flow,
    settings,
    $advancedFlows,
    $basicFlows,
    flowpicker_flowId_binding,
    textpicker_value_binding,
    iconpicker_iconId_binding
  ];
}
class FlowEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$18, create_fragment$17, safe_not_equal, { settings: 5 });
  }
}
function create_else_block_1$6(ctx) {
  let div1;
  let button;
  let icon;
  let t0;
  let div0;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? /*flow*/
    ctx[1].name) + ""
  );
  let t1;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId ?? "play"
      )
    }
  });
  return {
    c() {
      div1 = element("div");
      button = element("button");
      create_component(icon.$$.fragment);
      t0 = space();
      div0 = element("div");
      t1 = text(t1_value);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      button = claim_element(div1_nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      button_nodes.forEach(detach);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      t1 = claim_text(div0_nodes, t1_value);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(button, "class", "btn btn-circle my-auto btn-lg btn-success");
      button.disabled = /*disabled*/
      ctx[2];
      attr(div0, "class", "my-auto ml-3 mr-1");
      attr(div1, "class", "flex w-full h-full");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, button);
      mount_component(icon, button, null);
      append_hydration(div1, t0);
      append_hydration(div1, div0);
      append_hydration(div0, t1);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[7]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId ?? "play"
        );
      icon.$set(icon_changes);
      if (!current || dirty & /*disabled*/
      4) {
        button.disabled = /*disabled*/
        ctx2[2];
      }
      if ((!current || dirty & /*settings, flow*/
      3) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? /*flow*/
      ctx2[1].name) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$G(ctx) {
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].flowId === void 0
    )
      return create_if_block_1$o;
    return create_else_block$m;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_else_block$m(ctx) {
  let span;
  let textContent = "Flow not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1p1sfrn")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$o(ctx) {
  let span;
  let textContent = "Flow not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-75f8s3")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$16(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$G, create_else_block_1$6];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*flow*/
      ctx2[1] === void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$17($$self, $$props, $$invalidate) {
  let flow;
  let disabled;
  let $homey;
  let $advancedFlows;
  let $basicFlows;
  let $editing;
  component_subscribe($$self, homey, ($$value) => $$invalidate(8, $homey = $$value));
  component_subscribe($$self, advancedFlows, ($$value) => $$invalidate(5, $advancedFlows = $$value));
  component_subscribe($$self, basicFlows, ($$value) => $$invalidate(6, $basicFlows = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(9, $editing = $$value));
  let { context } = $$props;
  let { settings } = $$props;
  async function triggerFlow() {
    if (!$editing && flow !== void 0) {
      if ($basicFlows[flow.id]) {
        await $homey.flow.triggerFlow({ id: flow.id });
      } else if ($advancedFlows[flow.id]) {
        await $homey.flow.triggerAdvancedFlow({ id: flow.id });
      }
    }
  }
  const click_handler = () => triggerFlow();
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(4, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings, $basicFlows, $advancedFlows*/
    97) {
      $$invalidate(1, flow = (settings == null ? void 0 : settings.flowId) !== void 0 ? $basicFlows[settings.flowId] ?? $advancedFlows[settings.flowId] : void 0);
    }
    if ($$self.$$.dirty & /*context*/
    16) {
      $$invalidate(2, disabled = context.editable || context.readonly);
    }
  };
  return [
    settings,
    flow,
    disabled,
    triggerFlow,
    context,
    $advancedFlows,
    $basicFlows,
    click_handler
  ];
}
class FlowWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$17, create_fragment$16, safe_not_equal, { context: 4, settings: 0 });
  }
}
const info$h = {
  type: "flow",
  label: "Flow",
  icon: mdiPlay,
  category: "component",
  widget: FlowWidget,
  editor: FlowEditor,
  scopes: [
    { oneOf: ["homey", "homey.flow", "homey.flow.start"] }
  ],
  create: () => ({ id: v4(), type: "flow", version: 1 }),
  migration: (e2) => e2
};
function get_each_context$h(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list[i2];
  return child_ctx;
}
function create_if_block$F(ctx) {
  let ul;
  let current;
  let each_value = ensure_array_like(
    /*getChildren*/
    ctx[1](
      /*zone*/
      ctx[0].id
    )
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$h(get_each_context$h(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      ul = element("ul");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
    },
    l(nodes) {
      ul = claim_element(nodes, "UL", {});
      var ul_nodes = children(ul);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(ul_nodes);
      }
      ul_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, ul, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(ul, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*getChildren, zone, select*/
      7) {
        each_value = ensure_array_like(
          /*getChildren*/
          ctx2[1](
            /*zone*/
            ctx2[0].id
          )
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$h(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$h(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(ul, null);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(ul);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block$h(ctx) {
  let zonepickeritem;
  let current;
  zonepickeritem = new ZonePickerItem({
    props: {
      zone: (
        /*item*/
        ctx[4]
      ),
      getChildren: (
        /*getChildren*/
        ctx[1]
      ),
      select: (
        /*select*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      create_component(zonepickeritem.$$.fragment);
    },
    l(nodes) {
      claim_component(zonepickeritem.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(zonepickeritem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const zonepickeritem_changes = {};
      if (dirty & /*getChildren, zone*/
      3)
        zonepickeritem_changes.zone = /*item*/
        ctx2[4];
      if (dirty & /*getChildren*/
      2)
        zonepickeritem_changes.getChildren = /*getChildren*/
        ctx2[1];
      if (dirty & /*select*/
      4)
        zonepickeritem_changes.select = /*select*/
        ctx2[2];
      zonepickeritem.$set(zonepickeritem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(zonepickeritem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(zonepickeritem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(zonepickeritem, detaching);
    }
  };
}
function create_fragment$15(ctx) {
  let li;
  let span;
  let t0_value = (
    /*zone*/
    ctx[0].name + ""
  );
  let t0;
  let t1;
  let show_if = (
    /*getChildren*/
    ctx[1](
      /*zone*/
      ctx[0].id
    ).length > 0
  );
  let current;
  let mounted;
  let dispose;
  let if_block = show_if && create_if_block$F(ctx);
  return {
    c() {
      li = element("li");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      if (if_block)
        if_block.c();
      this.h();
    },
    l(nodes) {
      li = claim_element(nodes, "LI", {});
      var li_nodes = children(li);
      span = claim_element(li_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      span_nodes.forEach(detach);
      t1 = claim_space(li_nodes);
      if (if_block)
        if_block.l(li_nodes);
      li_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "text-sm");
    },
    m(target, anchor) {
      insert_hydration(target, li, anchor);
      append_hydration(li, span);
      append_hydration(span, t0);
      append_hydration(li, t1);
      if (if_block)
        if_block.m(li, null);
      current = true;
      if (!mounted) {
        dispose = listen(li, "click", stop_propagation(
          /*click_handler*/
          ctx[3]
        ));
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & /*zone*/
      1) && t0_value !== (t0_value = /*zone*/
      ctx2[0].name + ""))
        set_data(t0, t0_value);
      if (dirty & /*getChildren, zone*/
      3)
        show_if = /*getChildren*/
        ctx2[1](
          /*zone*/
          ctx2[0].id
        ).length > 0;
      if (show_if) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*getChildren, zone*/
          3) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$F(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(li, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(li);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function instance$16($$self, $$props, $$invalidate) {
  let { zone } = $$props;
  let { getChildren } = $$props;
  let { select } = $$props;
  const click_handler = (e2) => select(zone);
  $$self.$$set = ($$props2) => {
    if ("zone" in $$props2)
      $$invalidate(0, zone = $$props2.zone);
    if ("getChildren" in $$props2)
      $$invalidate(1, getChildren = $$props2.getChildren);
    if ("select" in $$props2)
      $$invalidate(2, select = $$props2.select);
  };
  return [zone, getChildren, select, click_handler];
}
class ZonePickerItem extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$16, create_fragment$15, safe_not_equal, { zone: 0, getChildren: 1, select: 2 });
  }
}
function create_if_block$E(ctx) {
  let span;
  let t_value = (
    /*selected*/
    ctx[3].name + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text-alt");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*selected*/
      8 && t_value !== (t_value = /*selected*/
      ctx2[3].name + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$14(ctx) {
  let label_1;
  let div0;
  let span0;
  let t0;
  let t1;
  let div1;
  let input0;
  let t2;
  let button0;
  let icon0;
  let t3;
  let div2;
  let span1;
  let t4;
  let t5;
  let dialog;
  let div5;
  let div3;
  let form;
  let button1;
  let icon1;
  let t6;
  let input1;
  let t7;
  let div4;
  let ul;
  let zonepickeritem;
  let current;
  let mounted;
  let dispose;
  icon0 = new Icon({ props: { data: mdiMagnify } });
  let if_block = (
    /*selected*/
    ctx[3] !== void 0 && create_if_block$E(ctx)
  );
  icon1 = new Icon({ props: { data: mdiClose } });
  zonepickeritem = new ZonePickerItem({
    props: {
      zone: (
        /*root*/
        ctx[5]
      ),
      getChildren: (
        /*getChildren*/
        ctx[7]
      ),
      select: (
        /*onZone*/
        ctx[6]
      )
    }
  });
  return {
    c() {
      label_1 = element("label");
      div0 = element("div");
      span0 = element("span");
      t0 = text(
        /*label*/
        ctx[1]
      );
      t1 = space();
      div1 = element("div");
      input0 = element("input");
      t2 = space();
      button0 = element("button");
      create_component(icon0.$$.fragment);
      t3 = space();
      div2 = element("div");
      span1 = element("span");
      t4 = space();
      if (if_block)
        if_block.c();
      t5 = space();
      dialog = element("dialog");
      div5 = element("div");
      div3 = element("div");
      form = element("form");
      button1 = element("button");
      create_component(icon1.$$.fragment);
      t6 = space();
      input1 = element("input");
      t7 = space();
      div4 = element("div");
      ul = element("ul");
      create_component(zonepickeritem.$$.fragment);
      this.h();
    },
    l(nodes) {
      label_1 = claim_element(nodes, "LABEL", { class: true });
      var label_1_nodes = children(label_1);
      div0 = claim_element(label_1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t0 = claim_text(
        span0_nodes,
        /*label*/
        ctx[1]
      );
      span0_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t1 = claim_space(label_1_nodes);
      div1 = claim_element(label_1_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      input0 = claim_element(div1_nodes, "INPUT", {
        type: true,
        class: true,
        placeholder: true
      });
      t2 = claim_space(div1_nodes);
      button0 = claim_element(div1_nodes, "BUTTON", { class: true });
      var button0_nodes = children(button0);
      claim_component(icon0.$$.fragment, button0_nodes);
      button0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t3 = claim_space(label_1_nodes);
      div2 = claim_element(label_1_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      span1 = claim_element(div2_nodes, "SPAN", { class: true });
      children(span1).forEach(detach);
      t4 = claim_space(div2_nodes);
      if (if_block)
        if_block.l(div2_nodes);
      div2_nodes.forEach(detach);
      label_1_nodes.forEach(detach);
      t5 = claim_space(nodes);
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div5 = claim_element(dialog_nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      div3 = claim_element(div5_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      form = claim_element(div3_nodes, "FORM", { method: true });
      var form_nodes = children(form);
      button1 = claim_element(form_nodes, "BUTTON", { class: true });
      var button1_nodes = children(button1);
      claim_component(icon1.$$.fragment, button1_nodes);
      button1_nodes.forEach(detach);
      form_nodes.forEach(detach);
      t6 = claim_space(div3_nodes);
      input1 = claim_element(div3_nodes, "INPUT", {
        type: true,
        class: true,
        name: true,
        placeholder: true
      });
      div3_nodes.forEach(detach);
      t7 = claim_space(div5_nodes);
      div4 = claim_element(div5_nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      ul = claim_element(div4_nodes, "UL", { class: true });
      var ul_nodes = children(ul);
      claim_component(zonepickeritem.$$.fragment, ul_nodes);
      ul_nodes.forEach(detach);
      div4_nodes.forEach(detach);
      div5_nodes.forEach(detach);
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span0, "class", "label-text");
      attr(div0, "class", "label");
      attr(input0, "type", "text");
      attr(input0, "class", "input input-bordered grow join-item");
      attr(input0, "placeholder", "Zone");
      attr(button0, "class", "btn btn-outline btn-primary join-item");
      attr(div1, "class", "join flex items-center");
      attr(span1, "class", "label-text");
      attr(div2, "class", "label whitespace-nowrap overflow-ellipsis");
      attr(label_1, "class", "form-control w-full");
      attr(button1, "class", "btn btn-sm btn-circle btn-ghost absolute right-2 top-2");
      attr(form, "method", "dialog");
      attr(input1, "type", "text");
      attr(input1, "class", "input w-full input-primary");
      attr(input1, "name", "search");
      attr(input1, "placeholder", "Search");
      attr(div3, "class", "flex-shrink-0 mb-2");
      attr(ul, "class", "menu");
      attr(div4, "class", "flex-grow overflow-auto");
      attr(div5, "class", "modal-box flex flex-col");
      attr(dialog, "class", "modal");
    },
    m(target, anchor) {
      insert_hydration(target, label_1, anchor);
      append_hydration(label_1, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t0);
      append_hydration(label_1, t1);
      append_hydration(label_1, div1);
      append_hydration(div1, input0);
      set_input_value(
        input0,
        /*zoneId*/
        ctx[0]
      );
      append_hydration(div1, t2);
      append_hydration(div1, button0);
      mount_component(icon0, button0, null);
      append_hydration(label_1, t3);
      append_hydration(label_1, div2);
      append_hydration(div2, span1);
      append_hydration(div2, t4);
      if (if_block)
        if_block.m(div2, null);
      insert_hydration(target, t5, anchor);
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div5);
      append_hydration(div5, div3);
      append_hydration(div3, form);
      append_hydration(form, button1);
      mount_component(icon1, button1, null);
      append_hydration(div3, t6);
      append_hydration(div3, input1);
      set_input_value(
        input1,
        /*search*/
        ctx[2]
      );
      append_hydration(div5, t7);
      append_hydration(div5, div4);
      append_hydration(div4, ul);
      mount_component(zonepickeritem, ul, null);
      ctx[15](dialog);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input0,
            "input",
            /*input0_input_handler*/
            ctx[12]
          ),
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[13]
          ),
          listen(
            input1,
            "input",
            /*input1_input_handler*/
            ctx[14]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*label*/
      2)
        set_data(
          t0,
          /*label*/
          ctx2[1]
        );
      if (dirty & /*zoneId*/
      1 && input0.value !== /*zoneId*/
      ctx2[0]) {
        set_input_value(
          input0,
          /*zoneId*/
          ctx2[0]
        );
      }
      if (
        /*selected*/
        ctx2[3] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$E(ctx2);
          if_block.c();
          if_block.m(div2, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*search*/
      4 && input1.value !== /*search*/
      ctx2[2]) {
        set_input_value(
          input1,
          /*search*/
          ctx2[2]
        );
      }
      const zonepickeritem_changes = {};
      if (dirty & /*root*/
      32)
        zonepickeritem_changes.zone = /*root*/
        ctx2[5];
      zonepickeritem.$set(zonepickeritem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon0.$$.fragment, local);
      transition_in(icon1.$$.fragment, local);
      transition_in(zonepickeritem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon0.$$.fragment, local);
      transition_out(icon1.$$.fragment, local);
      transition_out(zonepickeritem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label_1);
        detach(t5);
        detach(dialog);
      }
      destroy_component(icon0);
      if (if_block)
        if_block.d();
      destroy_component(icon1);
      destroy_component(zonepickeritem);
      ctx[15](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$15($$self, $$props, $$invalidate) {
  let flatZones;
  let root;
  let $zones;
  component_subscribe($$self, zones, ($$value) => $$invalidate(11, $zones = $$value));
  let { zoneId } = $$props;
  let { label = "Zone" } = $$props;
  let { zoneFilter = void 0 } = $$props;
  const dispatch = createEventDispatcher();
  let modal;
  let search = "";
  let sorted = [];
  let selected;
  function filterZones(value, _zones) {
    const normalized = value.toLowerCase();
    if (value.length > 0) {
      sorted.filter((d3) => d3.name.toLowerCase().includes(normalized));
    }
  }
  function onZone(zone) {
    $$invalidate(0, zoneId = zone.id);
    modal.close();
    dispatch("zoneId", zoneId);
  }
  function onSelected(zone) {
    dispatch("zone", zone);
  }
  function getChildren(parentId) {
    return sorted.filter((zone) => zone.parent === parentId);
  }
  function input0_input_handler() {
    zoneId = this.value;
    $$invalidate(0, zoneId);
  }
  const click_handler = () => modal.showModal();
  function input1_input_handler() {
    search = this.value;
    $$invalidate(2, search);
  }
  function dialog_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(4, modal);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("zoneId" in $$props2)
      $$invalidate(0, zoneId = $$props2.zoneId);
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
    if ("zoneFilter" in $$props2)
      $$invalidate(8, zoneFilter = $$props2.zoneFilter);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$zones, zoneFilter*/
    2304) {
      $$invalidate(10, flatZones = Object.values($zones).filter((zone) => zoneFilter ? zoneFilter(zone) : true));
    }
    if ($$self.$$.dirty & /*flatZones*/
    1024) {
      $$invalidate(9, sorted = (flatZones ?? []).sort((a3, b2) => {
        if (a3.name === b2.name)
          return 0;
        if (a3.name < b2.name)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*sorted*/
    512) {
      $$invalidate(5, root = sorted.find((zone) => zone.parent === null));
    }
    if ($$self.$$.dirty & /*zoneId, sorted*/
    513) {
      $$invalidate(3, selected = zoneId !== void 0 ? sorted.find((zone) => zone.id === zoneId) : void 0);
    }
    if ($$self.$$.dirty & /*search, sorted*/
    516) {
      filterZones(search);
    }
    if ($$self.$$.dirty & /*selected*/
    8) {
      onSelected(selected);
    }
  };
  return [
    zoneId,
    label,
    search,
    selected,
    modal,
    root,
    onZone,
    getChildren,
    zoneFilter,
    sorted,
    flatZones,
    $zones,
    input0_input_handler,
    click_handler,
    input1_input_handler,
    dialog_binding
  ];
}
class ZonePicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$15, create_fragment$14, safe_not_equal, { zoneId: 0, label: 1, zoneFilter: 8 });
  }
}
function get_each_context$g(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[5] = list[i2];
  return child_ctx;
}
function create_if_block$D(ctx) {
  let div1;
  let div0;
  let t0;
  let icon;
  let t1;
  let ul;
  let current;
  icon = new Icon({
    props: { data: mdiDatabaseSearchOutline }
  });
  let each_value = ensure_array_like(Object.keys(
    /*obj*/
    ctx[0]
  ));
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$g(get_each_context$g(ctx, each_value, i2));
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = text("Example ");
      create_component(icon.$$.fragment);
      t1 = space();
      ul = element("ul");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { role: true, class: true });
      var div0_nodes = children(div0);
      t0 = claim_text(div0_nodes, "Example ");
      claim_component(icon.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t1 = claim_space(div1_nodes);
      ul = claim_element(div1_nodes, "UL", { class: true });
      var ul_nodes = children(ul);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(ul_nodes);
      }
      ul_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "role", "button");
      attr(div0, "class", "btn m-1");
      attr(ul, "class", "dropdown-content menu bg-base-100 rounded-box z-[1] w-64 p-2 shadow");
      attr(div1, "class", "dropdown dropdown-hover");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      append_hydration(div0, t0);
      mount_component(icon, div0, null);
      append_hydration(div1, t1);
      append_hydration(div1, ul);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(ul, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*obj, Object*/
      1) {
        each_value = ensure_array_like(Object.keys(
          /*obj*/
          ctx2[0]
        ));
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$g(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block$g(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(ul, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(icon);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block$g(ctx) {
  let li;
  let span1;
  let b2;
  let t0_value = (
    /*key*/
    ctx[5] + ""
  );
  let t0;
  let t1;
  let span0;
  let t2_value = (
    /*obj*/
    ctx[0][
      /*key*/
      ctx[5]
    ] + ""
  );
  let t2;
  let t3;
  return {
    c() {
      li = element("li");
      span1 = element("span");
      b2 = element("b");
      t0 = text(t0_value);
      t1 = space();
      span0 = element("span");
      t2 = text(t2_value);
      t3 = space();
      this.h();
    },
    l(nodes) {
      li = claim_element(nodes, "LI", {});
      var li_nodes = children(li);
      span1 = claim_element(li_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      b2 = claim_element(span1_nodes, "B", {});
      var b_nodes = children(b2);
      t0 = claim_text(b_nodes, t0_value);
      b_nodes.forEach(detach);
      t1 = claim_space(span1_nodes);
      span0 = claim_element(span1_nodes, "SPAN", {});
      var span0_nodes = children(span0);
      t2 = claim_text(span0_nodes, t2_value);
      span0_nodes.forEach(detach);
      span1_nodes.forEach(detach);
      t3 = claim_space(li_nodes);
      li_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span1, "class", "max-w-60 overflow-hidden text-nowrap p-1 flex flex-row justify-between");
    },
    m(target, anchor) {
      insert_hydration(target, li, anchor);
      append_hydration(li, span1);
      append_hydration(span1, b2);
      append_hydration(b2, t0);
      append_hydration(span1, t1);
      append_hydration(span1, span0);
      append_hydration(span0, t2);
      append_hydration(li, t3);
    },
    p(ctx2, dirty) {
      if (dirty & /*obj*/
      1 && t0_value !== (t0_value = /*key*/
      ctx2[5] + ""))
        set_data(t0, t0_value);
      if (dirty & /*obj*/
      1 && t2_value !== (t2_value = /*obj*/
      ctx2[0][
        /*key*/
        ctx2[5]
      ] + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(li);
      }
    }
  };
}
function create_fragment$13(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*obj*/
    ctx[0] !== void 0 && create_if_block$D(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*obj*/
        ctx2[0] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*obj*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$D(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function getRandomItem(list) {
  const length = list.length;
  const random = Math.floor(Math.random() * (length - 1));
  return list[random];
}
function instance$14($$self, $$props, $$invalidate) {
  let obj;
  let $zones;
  let $devices;
  component_subscribe($$self, zones, ($$value) => $$invalidate(2, $zones = $$value));
  component_subscribe($$self, devices, ($$value) => $$invalidate(3, $devices = $$value));
  let { type } = $$props;
  function getObject(_type) {
    switch (_type) {
      case "device":
        return getRandomItem(Object.values($devices));
      case "capability":
        return getRandomItem(Object.values($devices).flatMap((device) => Object.values(device.capabilitiesObj)));
      case "zone":
        return getRandomItem(Object.values($zones));
    }
    return void 0;
  }
  $$self.$$set = ($$props2) => {
    if ("type" in $$props2)
      $$invalidate(1, type = $$props2.type);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*type*/
    2) {
      $$invalidate(0, obj = getObject(type));
    }
  };
  return [obj, type];
}
class RandomObjectDropdown extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$14, create_fragment$13, safe_not_equal, { type: 1 });
  }
}
function generateItems(devices2, zones2, settings) {
  var items = [];
  if (settings.each !== void 0 && settings.in !== void 0 && settings.inArg !== void 0) {
    if (settings.each === "capability") {
      if (settings.in === "device") {
        const device = devices2[settings.inArg ?? ""];
        if (device !== void 0) {
          items = Object.keys(device.capabilitiesObj).map((key) => device.capabilitiesObj[key]);
        }
      } else if (settings.in === "zone") {
        const z2 = getZones(zones2, settings.inArg);
        items = Object.values(devices2).filter((device) => z2.some((zone) => zone.id === device.zone)).flatMap((device) => Object.keys(device.capabilitiesObj).map((key) => device.capabilitiesObj[key]));
      }
    } else if (settings.each === "device") {
      if (settings.in === "zone") {
        const z2 = getZones(zones2, settings.inArg);
        items = Object.values(devices2).filter((device) => z2.some((zone) => zone.id === device.zone));
      }
    } else if (settings.each === "zone") {
      if (settings.in === "zone") {
        items = getZones(zones2, settings.inArg);
      }
    } else if (settings.each === "flow")
      ;
    else if (settings.each === "folder")
      ;
    else if (settings.each === "image")
      ;
  }
  if (items.length > 0 && settings.where !== void 0 && settings.where.length > 0) {
    items = items.filter((item) => {
      switch (settings.whereOp) {
        case "or":
          return settings.where.some((where) => evaluateCondition(item, where));
        case "and":
        default:
          return settings.where.every((where) => evaluateCondition(item, where));
      }
    });
  }
  return items;
}
function evaluateCondition(item, where) {
  switch (where.operator) {
    case "equal":
      return item[where.key] === where.value;
    case "not-equal":
      return item[where.key] !== where.value;
    case "starts-with":
      return `${item[where.key]}`.startsWith(where.value);
    case "contains":
      return `${item[where.key]}`.includes(where.value);
    case "ends-with":
      return `${item[where.key]}`.endsWith(where.value);
    default:
      return false;
  }
}
function getZones(zones2, zoneId) {
  return Object.values(zones2).filter((zone) => zone.parent === zoneId).flatMap((zone) => [zone, ...getZones(zones2, zone.id)]);
}
function create_fragment$12(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Gap</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "0 px";
  let option1;
  let textContent_2 = "2 px";
  let option2;
  let textContent_3 = "4 px";
  let option3;
  let textContent_4 = "8 px";
  let option4;
  let textContent_5 = "12 px";
  let option5;
  let textContent_6 = "16 px";
  let option6;
  let textContent_7 = "20 px";
  let option7;
  let textContent_8 = "24 px";
  let option8;
  let textContent_9 = "28 px";
  let option9;
  let textContent_10 = "32 px";
  let option10;
  let textContent_11 = "36 px";
  let option11;
  let textContent_12 = "40 px";
  let mounted;
  let dispose;
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      option5 = element("option");
      option5.textContent = textContent_6;
      option6 = element("option");
      option6.textContent = textContent_7;
      option7 = element("option");
      option7.textContent = textContent_8;
      option8 = element("option");
      option8.textContent = textContent_9;
      option9 = element("option");
      option9.textContent = textContent_10;
      option10 = element("option");
      option10.textContent = textContent_11;
      option11 = element("option");
      option11.textContent = textContent_12;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1dfxg89")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-rs24tp")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-1ul4s52")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-g1co46")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-152pplb")
        option3.textContent = textContent_4;
      option4 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-1jk73p5")
        option4.textContent = textContent_5;
      option5 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-51dom8")
        option5.textContent = textContent_6;
      option6 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-k8h58q")
        option6.textContent = textContent_7;
      option7 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option7) !== "svelte-19vfysj")
        option7.textContent = textContent_8;
      option8 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option8) !== "svelte-c5dn1w")
        option8.textContent = textContent_9;
      option9 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option9) !== "svelte-1nb5iwa")
        option9.textContent = textContent_10;
      option10 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option10) !== "svelte-1skldz5")
        option10.textContent = textContent_11;
      option11 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option11) !== "svelte-1f2jl3q")
        option11.textContent = textContent_12;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "gap-0";
      set_input_value(option0, option0.__value);
      option1.__value = "gap-0.5";
      set_input_value(option1, option1.__value);
      option2.__value = "gap-1";
      set_input_value(option2, option2.__value);
      option3.__value = "gap-2";
      set_input_value(option3, option3.__value);
      option4.__value = "gap-3";
      set_input_value(option4, option4.__value);
      option5.__value = "gap-4";
      set_input_value(option5, option5.__value);
      option6.__value = "gap-5";
      set_input_value(option6, option6.__value);
      option7.__value = "gap-6";
      set_input_value(option7, option7.__value);
      option8.__value = "gap-7";
      set_input_value(option8, option8.__value);
      option9.__value = "gap-8";
      set_input_value(option9, option9.__value);
      option10.__value = "gap-9";
      set_input_value(option10, option10.__value);
      option11.__value = "gap-10";
      set_input_value(option11, option11.__value);
      attr(select, "class", "select");
      if (
        /*gap*/
        ctx[0] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler*/
          ctx[2].call(select)
        ));
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      append_hydration(select, option4);
      append_hydration(select, option5);
      append_hydration(select, option6);
      append_hydration(select, option7);
      append_hydration(select, option8);
      append_hydration(select, option9);
      append_hydration(select, option10);
      append_hydration(select, option11);
      select_option(
        select,
        /*gap*/
        ctx[0],
        true
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*select_change_handler*/
          ctx[2]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*gap*/
      1) {
        select_option(
          select,
          /*gap*/
          ctx2[0]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$13($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let gap;
  function onSettings(s3) {
    $$invalidate(0, gap = s3.gap ?? "gap-0");
  }
  function onChange(_gap) {
    if (settings.gap !== _gap) {
      $$invalidate(1, settings = { ...settings, gap: _gap });
      dispatch("settings", settings);
    }
  }
  function select_change_handler() {
    gap = select_value(this);
    $$invalidate(0, gap);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(1, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    2) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*gap*/
    1) {
      onChange(gap);
    }
  };
  return [gap, settings, select_change_handler];
}
class ListEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$13, create_fragment$12, safe_not_equal, { settings: 1 });
  }
}
function create_default_slot$b(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      context: (
        /*context*/
        ctx[1]
      ),
      settings: (
        /*item*/
        ctx[9]
      )
    }
  });
  widget.$on(
    "settings",
    /*settings_handler*/
    ctx[4]
  );
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty & /*context*/
      2)
        widget_changes.context = /*context*/
        ctx2[1];
      if (dirty & /*item*/
      512)
        widget_changes.settings = /*item*/
        ctx2[9];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_fragment$11(ctx) {
  let dndlist;
  let current;
  dndlist = new DndList({
    props: {
      items: (
        /*settings*/
        ctx[0].items
      ),
      editable: (
        /*context*/
        ctx[1].editable
      ),
      class: "w-full flex flex-col " + /*settings*/
      (ctx[0].gap ?? "gap-0") + " " + /*context*/
      (ctx[1].editable ? "min-h-[50px]" : ""),
      $$slots: {
        default: [
          create_default_slot$b,
          ({ item }) => ({ 9: item }),
          ({ item }) => item ? 512 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  dndlist.$on(
    "items",
    /*items_handler*/
    ctx[5]
  );
  return {
    c() {
      create_component(dndlist.$$.fragment);
    },
    l(nodes) {
      claim_component(dndlist.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(dndlist, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dndlist_changes = {};
      if (dirty & /*settings*/
      1)
        dndlist_changes.items = /*settings*/
        ctx2[0].items;
      if (dirty & /*context*/
      2)
        dndlist_changes.editable = /*context*/
        ctx2[1].editable;
      if (dirty & /*settings, context*/
      3)
        dndlist_changes.class = "w-full flex flex-col " + /*settings*/
        (ctx2[0].gap ?? "gap-0") + " " + /*context*/
        (ctx2[1].editable ? "min-h-[50px]" : "");
      if (dirty & /*$$scope, context, item*/
      1538) {
        dndlist_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dndlist.$set(dndlist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dndlist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dndlist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dndlist, detaching);
    }
  };
}
function instance$12($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  let { context } = $$props;
  const dispatch = createEventDispatcher();
  let items;
  function onSettings(_settings) {
    items = settings.items ?? [];
  }
  function onItems(_items) {
    items = [..._items];
    $$invalidate(0, settings = { ...settings, items });
    dispatch("settings", settings);
  }
  function updateWidget(_widget) {
    const index2 = items.findIndex((s3) => s3.id === _widget.id);
    items[index2] = { ..._widget };
    items = [...items];
    $$invalidate(0, settings = { ...settings, items });
    dispatch("settings", settings);
  }
  const settings_handler = (e2) => updateWidget(e2.detail);
  const items_handler = (e2) => onItems(e2.detail);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(1, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings();
    }
  };
  return [settings, context, onItems, updateWidget, settings_handler, items_handler];
}
class ListWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$12, create_fragment$11, safe_not_equal, { settings: 0, context: 1 });
  }
}
const info$g = {
  type: "list",
  label: "List",
  icon: mdiMenu,
  category: "layout",
  widget: ListWidget,
  editor: ListEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "list", version: 1 }),
  migration: (e2) => e2
};
function transform(template, data, slug) {
  if (template === void 0)
    return void 0;
  if (Array.isArray(template)) {
    return template.map((a3) => transform(a3, data, slug));
  } else if (typeof template === "object") {
    const copy = { ...template };
    if (isWidget(copy)) {
      copy.id = v4();
      if (copy.type === "template") {
        copy.arguments = (copy.arguments ?? []).map((a3) => ({
          argId: a3.argId,
          value: transform(a3.value, data, slug)
        }));
        return copy;
      }
    }
    Object.keys(copy).forEach((key) => copy[key] = transform(copy[key], data, slug));
    return copy;
  } else if (typeof template === "string") {
    let copy = template;
    const variableRegex = /\$\{([^}]+)\.([^}]+)\}/g;
    const matches = [...copy.matchAll(variableRegex)];
    for (const match2 of matches) {
      const fullMatch = match2[0];
      const matchSlug = match2[1];
      const itemKey = match2[2];
      if (matchSlug !== slug)
        continue;
      if (Object.hasOwn(data, itemKey)) {
        const itemValue = data[itemKey];
        if (copy === fullMatch) {
          copy = itemValue;
        } else {
          copy = copy.replaceAll(fullMatch, itemValue);
        }
      }
    }
    return copy;
  } else {
    return template;
  }
}
function isWidget(element2) {
  return Object.hasOwn(element2, "id") && Object.hasOwn(element2, "type") && Object.hasOwn(element2, "version");
}
function get_each_context$f(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[37] = list[i2];
  child_ctx[38] = list;
  child_ctx[39] = i2;
  return child_ctx;
}
function create_if_block_15(ctx) {
  let option;
  return {
    c() {
      option = element("option");
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", {});
      children(option).forEach(detach);
      this.h();
    },
    h() {
      option.__value = void 0;
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_10$1(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">In</span>`;
  let t1;
  let select;
  let if_block0_anchor;
  let if_block1_anchor;
  let if_block2_anchor;
  let mounted;
  let dispose;
  let if_block0 = (
    /*inType*/
    ctx[2] === void 0 && create_if_block_14$1()
  );
  let if_block1 = (
    /*eachType*/
    ctx[1] === "capability" && create_if_block_13$1()
  );
  let if_block2 = (
    /*eachType*/
    (ctx[1] === "device" || /*eachType*/
    ctx[1] === "zone") && create_if_block_12$1()
  );
  let if_block3 = (
    /*eachType*/
    (ctx[1] === "flow" || /*eachType*/
    ctx[1] === "folder") && create_if_block_11$1()
  );
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      if (if_block0)
        if_block0.c();
      if_block0_anchor = empty();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      if (if_block2)
        if_block2.c();
      if_block2_anchor = empty();
      if (if_block3)
        if_block3.c();
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1uu0xto")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      if (if_block0)
        if_block0.l(select_nodes);
      if_block0_anchor = empty();
      if (if_block1)
        if_block1.l(select_nodes);
      if_block1_anchor = empty();
      if (if_block2)
        if_block2.l(select_nodes);
      if_block2_anchor = empty();
      if (if_block3)
        if_block3.l(select_nodes);
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      attr(select, "class", "select w-full mt-4");
      attr(select, "placeholder", "In");
      if (
        /*inType*/
        ctx[2] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler*/
          ctx[16].call(select)
        ));
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      if (if_block0)
        if_block0.m(select, null);
      append_hydration(select, if_block0_anchor);
      if (if_block1)
        if_block1.m(select, null);
      append_hydration(select, if_block1_anchor);
      if (if_block2)
        if_block2.m(select, null);
      append_hydration(select, if_block2_anchor);
      if (if_block3)
        if_block3.m(select, null);
      select_option(
        select,
        /*inType*/
        ctx[2],
        true
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*select_change_handler*/
          ctx[16]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*inType*/
        ctx2[2] === void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_14$1();
          if_block0.c();
          if_block0.m(select, if_block0_anchor);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*eachType*/
        ctx2[1] === "capability"
      ) {
        if (if_block1)
          ;
        else {
          if_block1 = create_if_block_13$1();
          if_block1.c();
          if_block1.m(select, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*eachType*/
        ctx2[1] === "device" || /*eachType*/
        ctx2[1] === "zone"
      ) {
        if (if_block2)
          ;
        else {
          if_block2 = create_if_block_12$1();
          if_block2.c();
          if_block2.m(select, if_block2_anchor);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if (
        /*eachType*/
        ctx2[1] === "flow" || /*eachType*/
        ctx2[1] === "folder"
      ) {
        if (if_block3)
          ;
        else {
          if_block3 = create_if_block_11$1();
          if_block3.c();
          if_block3.m(select, null);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
      if (dirty[0] & /*inType*/
      4) {
        select_option(
          select,
          /*inType*/
          ctx2[2]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_14$1(ctx) {
  let option;
  return {
    c() {
      option = element("option");
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", {});
      children(option).forEach(detach);
      this.h();
    },
    h() {
      option.__value = void 0;
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_13$1(ctx) {
  let option;
  let textContent = "Device";
  return {
    c() {
      option = element("option");
      option.textContent = textContent;
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option) !== "svelte-am1d6a")
        option.textContent = textContent;
      this.h();
    },
    h() {
      option.__value = "device";
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_12$1(ctx) {
  let option;
  let textContent = "Zone";
  return {
    c() {
      option = element("option");
      option.textContent = textContent;
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option) !== "svelte-xx4fl2")
        option.textContent = textContent;
      this.h();
    },
    h() {
      option.__value = "zone";
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_11$1(ctx) {
  let option;
  let textContent = "Flow folder";
  return {
    c() {
      option = element("option");
      option.textContent = textContent;
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option) !== "svelte-1tscnwo")
        option.textContent = textContent;
      this.h();
    },
    h() {
      option.__value = "folder";
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_9$2(ctx) {
  let p;
  let textContent = "Flow folder picker not implemented!";
  return {
    c() {
      p = element("p");
      p.textContent = textContent;
    },
    l(nodes) {
      p = claim_element(nodes, "P", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(p) !== "svelte-nqyx7q")
        p.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, p, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(p);
      }
    }
  };
}
function create_if_block_8$3(ctx) {
  let zonepicker;
  let updating_zoneId;
  let current;
  function zonepicker_zoneId_binding(value) {
    ctx[18](value);
  }
  let zonepicker_props = {};
  if (
    /*inArg*/
    ctx[3] !== void 0
  ) {
    zonepicker_props.zoneId = /*inArg*/
    ctx[3];
  }
  zonepicker = new ZonePicker({ props: zonepicker_props });
  binding_callbacks.push(() => bind(zonepicker, "zoneId", zonepicker_zoneId_binding));
  return {
    c() {
      create_component(zonepicker.$$.fragment);
    },
    l(nodes) {
      claim_component(zonepicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(zonepicker, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const zonepicker_changes = {};
      if (!updating_zoneId && dirty[0] & /*inArg*/
      8) {
        updating_zoneId = true;
        zonepicker_changes.zoneId = /*inArg*/
        ctx2[3];
        add_flush_callback(() => updating_zoneId = false);
      }
      zonepicker.$set(zonepicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(zonepicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(zonepicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(zonepicker, detaching);
    }
  };
}
function create_if_block_7$4(ctx) {
  let devicepicker;
  let updating_deviceId;
  let current;
  function devicepicker_deviceId_binding(value) {
    ctx[17](value);
  }
  let devicepicker_props = {};
  if (
    /*inArg*/
    ctx[3] !== void 0
  ) {
    devicepicker_props.deviceId = /*inArg*/
    ctx[3];
  }
  devicepicker = new DevicePicker({ props: devicepicker_props });
  binding_callbacks.push(() => bind(devicepicker, "deviceId", devicepicker_deviceId_binding));
  return {
    c() {
      create_component(devicepicker.$$.fragment);
    },
    l(nodes) {
      claim_component(devicepicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(devicepicker, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const devicepicker_changes = {};
      if (!updating_deviceId && dirty[0] & /*inArg*/
      8) {
        updating_deviceId = true;
        devicepicker_changes.deviceId = /*inArg*/
        ctx2[3];
        add_flush_callback(() => updating_deviceId = false);
      }
      devicepicker.$set(devicepicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(devicepicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(devicepicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(devicepicker, detaching);
    }
  };
}
function create_if_block$C(ctx) {
  let div;
  let button;
  let textContent = "Add condition";
  let t1;
  let t2;
  let each_1_anchor;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*where*/
    ctx[4].length > 1 && create_if_block_6$5(ctx)
  );
  let each_value = ensure_array_like(
    /*where*/
    ctx[4]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$f(get_each_context$f(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      div = element("div");
      button = element("button");
      button.textContent = textContent;
      t1 = space();
      if (if_block)
        if_block.c();
      t2 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      button = claim_element(div_nodes, "BUTTON", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(button) !== "svelte-ry8h1")
        button.textContent = textContent;
      div_nodes.forEach(detach);
      t1 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
      this.h();
    },
    h() {
      attr(button, "class", "btn btn-primary mt-2");
      attr(div, "class", "flex justify-center my-1");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, button);
      insert_hydration(target, t1, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[19]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*where*/
        ctx2[4].length > 1
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_6$5(ctx2);
          if_block.c();
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty[0] & /*removeWhere, where, updateWhereValue, updateWhereOperator, updateWhereKey, eachType, selectedWhereId, whereOp*/
      7858) {
        each_value = ensure_array_like(
          /*where*/
          ctx2[4]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$f(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$f(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t1);
        detach(t2);
        detach(each_1_anchor);
      }
      if (if_block)
        if_block.d(detaching);
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_6$5(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Mode</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "AND";
  let option1;
  let textContent_2 = "OR";
  let mounted;
  let dispose;
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-18y8je8")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-12hz9j8")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-8s00lq")
        option1.textContent = textContent_2;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "and";
      set_input_value(option0, option0.__value);
      option1.__value = "or";
      set_input_value(option1, option1.__value);
      attr(select, "class", "select w-full mt-4");
      attr(select, "placeholder", "Mode");
      if (
        /*whereOp*/
        ctx[5] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler_1*/
          ctx[20].call(select)
        ));
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      select_option(
        select,
        /*whereOp*/
        ctx[5],
        true
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*select_change_handler_1*/
          ctx[20]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*whereOp*/
      32) {
        select_option(
          select,
          /*whereOp*/
          ctx2[5]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_5$6(ctx) {
  let div;
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(
        /*whereOp*/
        ctx[5]
      );
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      t2 = claim_text(
        div_nodes,
        /*whereOp*/
        ctx[5]
      );
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "divider capitalize");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*whereOp*/
      32)
        set_data(
          t2,
          /*whereOp*/
          ctx2[5]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_4$8(ctx) {
  let option;
  return {
    c() {
      option = element("option");
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", {});
      children(option).forEach(detach);
      this.h();
    },
    h() {
      option.__value = void 0;
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_3$b(ctx) {
  let option0;
  let textContent = "Type";
  let option1;
  let textContent_1 = "Title";
  return {
    c() {
      option0 = element("option");
      option0.textContent = textContent;
      option1 = element("option");
      option1.textContent = textContent_1;
      this.h();
    },
    l(nodes) {
      option0 = claim_element(nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-vhyzu6")
        option0.textContent = textContent;
      option1 = claim_element(nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-130i4xa")
        option1.textContent = textContent_1;
      this.h();
    },
    h() {
      option0.__value = "type";
      set_input_value(option0, option0.__value);
      option1.__value = "title";
      set_input_value(option1, option1.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option0, anchor);
      insert_hydration(target, option1, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(option0);
        detach(option1);
      }
    }
  };
}
function create_if_block_2$d(ctx) {
  let option0;
  let textContent = "Class";
  let option1;
  let textContent_1 = "Virtual class";
  let option2;
  let textContent_2 = "DriverID";
  return {
    c() {
      option0 = element("option");
      option0.textContent = textContent;
      option1 = element("option");
      option1.textContent = textContent_1;
      option2 = element("option");
      option2.textContent = textContent_2;
      this.h();
    },
    l(nodes) {
      option0 = claim_element(nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-16uowre")
        option0.textContent = textContent;
      option1 = claim_element(nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-167yzr4")
        option1.textContent = textContent_1;
      option2 = claim_element(nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-imvko6")
        option2.textContent = textContent_2;
      this.h();
    },
    h() {
      option0.__value = "class";
      set_input_value(option0, option0.__value);
      option1.__value = "virtualClass";
      set_input_value(option1, option1.__value);
      option2.__value = "driverId";
      set_input_value(option2, option2.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option0, anchor);
      insert_hydration(target, option1, anchor);
      insert_hydration(target, option2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(option0);
        detach(option1);
        detach(option2);
      }
    }
  };
}
function create_if_block_1$n(ctx) {
  let option0;
  let textContent = "Enabled";
  let option1;
  let textContent_1 = "Broken";
  let option2;
  let textContent_2 = "Triggerable";
  return {
    c() {
      option0 = element("option");
      option0.textContent = textContent;
      option1 = element("option");
      option1.textContent = textContent_1;
      option2 = element("option");
      option2.textContent = textContent_2;
      this.h();
    },
    l(nodes) {
      option0 = claim_element(nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-12yb6ns")
        option0.textContent = textContent;
      option1 = claim_element(nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-oc7cbm")
        option1.textContent = textContent_1;
      option2 = claim_element(nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-gg6qg2")
        option2.textContent = textContent_2;
      this.h();
    },
    h() {
      option0.__value = "enabled";
      set_input_value(option0, option0.__value);
      option1.__value = "broken";
      set_input_value(option1, option1.__value);
      option2.__value = "triggerable";
      set_input_value(option2, option2.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option0, anchor);
      insert_hydration(target, option1, anchor);
      insert_hydration(target, option2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(option0);
        detach(option1);
        detach(option2);
      }
    }
  };
}
function create_each_block$f(ctx) {
  let t0;
  let div4;
  let input;
  let input_value_value;
  let value_has_changed = false;
  let t1;
  let div0;
  let span0;
  let t2_value = (
    /*w*/
    (ctx[37].key ?? "") + ""
  );
  let t2;
  let t3;
  let span1;
  let t4_value = (
    /*w*/
    (ctx[37].operator ?? "") + ""
  );
  let t4;
  let t5;
  let span2;
  let t6_value = (
    /*w*/
    (ctx[37].value ?? "") + ""
  );
  let t6;
  let t7;
  let div3;
  let label0;
  let div1;
  let textContent = `<span class="label-text">Where</span>`;
  let t9;
  let select0;
  let if_block1_anchor;
  let if_block2_anchor;
  let if_block3_anchor;
  let select0_value_value;
  let t10;
  let label1;
  let div2;
  let textContent_1 = `<span class="label-text">Operator</span>`;
  let t12;
  let select1;
  let option0;
  let textContent_2 = "Equal";
  let option1;
  let textContent_3 = "Not equal";
  let option2;
  let textContent_4 = "Starts with";
  let option3;
  let textContent_5 = "Contains";
  let option4;
  let textContent_6 = "Ends with";
  let select1_value_value;
  let t18;
  let textpicker;
  let updating_value;
  let t19;
  let button;
  let icon;
  let t20;
  let t21;
  let current;
  let binding_group;
  let mounted;
  let dispose;
  let if_block0 = (
    /*index*/
    ctx[39] > 0 && create_if_block_5$6(ctx)
  );
  let if_block1 = (
    /*w*/
    ctx[37].key === void 0 && create_if_block_4$8()
  );
  let if_block2 = (
    /*eachType*/
    ctx[1] === "capability" && create_if_block_3$b()
  );
  let if_block3 = (
    /*eachType*/
    ctx[1] === "device" && create_if_block_2$d()
  );
  let if_block4 = (
    /*eachType*/
    ctx[1] === "flow" && create_if_block_1$n()
  );
  function change_handler(...args) {
    return (
      /*change_handler*/
      ctx[23](
        /*index*/
        ctx[39],
        ...args
      )
    );
  }
  function change_handler_1(...args) {
    return (
      /*change_handler_1*/
      ctx[24](
        /*index*/
        ctx[39],
        ...args
      )
    );
  }
  function textpicker_value_binding(value) {
    ctx[25](
      value,
      /*w*/
      ctx[37]
    );
  }
  function value_handler(...args) {
    return (
      /*value_handler*/
      ctx[26](
        /*index*/
        ctx[39],
        ...args
      )
    );
  }
  let textpicker_props = { label: "Value", placeholder: "Value" };
  if (
    /*w*/
    ctx[37].value !== void 0
  ) {
    textpicker_props.value = /*w*/
    ctx[37].value;
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  textpicker.$on("value", value_handler);
  icon = new Icon({ props: { data: mdiTrashCan } });
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[27](
        /*index*/
        ctx[39]
      )
    );
  }
  binding_group = init_binding_group(
    /*$$binding_groups*/
    ctx[22][0]
  );
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t0 = space();
      div4 = element("div");
      input = element("input");
      t1 = space();
      div0 = element("div");
      span0 = element("span");
      t2 = text(t2_value);
      t3 = space();
      span1 = element("span");
      t4 = text(t4_value);
      t5 = space();
      span2 = element("span");
      t6 = text(t6_value);
      t7 = space();
      div3 = element("div");
      label0 = element("label");
      div1 = element("div");
      div1.innerHTML = textContent;
      t9 = space();
      select0 = element("select");
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      if (if_block2)
        if_block2.c();
      if_block2_anchor = empty();
      if (if_block3)
        if_block3.c();
      if_block3_anchor = empty();
      if (if_block4)
        if_block4.c();
      t10 = space();
      label1 = element("label");
      div2 = element("div");
      div2.innerHTML = textContent_1;
      t12 = space();
      select1 = element("select");
      option0 = element("option");
      option0.textContent = textContent_2;
      option1 = element("option");
      option1.textContent = textContent_3;
      option2 = element("option");
      option2.textContent = textContent_4;
      option3 = element("option");
      option3.textContent = textContent_5;
      option4 = element("option");
      option4.textContent = textContent_6;
      t18 = space();
      create_component(textpicker.$$.fragment);
      t19 = space();
      button = element("button");
      create_component(icon.$$.fragment);
      t20 = text("Remove");
      t21 = space();
      this.h();
    },
    l(nodes) {
      if (if_block0)
        if_block0.l(nodes);
      t0 = claim_space(nodes);
      div4 = claim_element(nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      input = claim_element(div4_nodes, "INPUT", { type: true, name: true });
      t1 = claim_space(div4_nodes);
      div0 = claim_element(div4_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t2 = claim_text(span0_nodes, t2_value);
      span0_nodes.forEach(detach);
      t3 = claim_space(div0_nodes);
      span1 = claim_element(div0_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      t4 = claim_text(span1_nodes, t4_value);
      span1_nodes.forEach(detach);
      t5 = claim_space(div0_nodes);
      span2 = claim_element(div0_nodes, "SPAN", { class: true });
      var span2_nodes = children(span2);
      t6 = claim_text(span2_nodes, t6_value);
      span2_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t7 = claim_space(div4_nodes);
      div3 = claim_element(div4_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      label0 = claim_element(div3_nodes, "LABEL", { class: true });
      var label0_nodes = children(label0);
      div1 = claim_element(label0_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div1) !== "svelte-f1bn1m")
        div1.innerHTML = textContent;
      t9 = claim_space(label0_nodes);
      select0 = claim_element(label0_nodes, "SELECT", { class: true, placeholder: true });
      var select0_nodes = children(select0);
      if (if_block1)
        if_block1.l(select0_nodes);
      if_block1_anchor = empty();
      if (if_block2)
        if_block2.l(select0_nodes);
      if_block2_anchor = empty();
      if (if_block3)
        if_block3.l(select0_nodes);
      if_block3_anchor = empty();
      if (if_block4)
        if_block4.l(select0_nodes);
      select0_nodes.forEach(detach);
      label0_nodes.forEach(detach);
      t10 = claim_space(div3_nodes);
      label1 = claim_element(div3_nodes, "LABEL", { class: true });
      var label1_nodes = children(label1);
      div2 = claim_element(label1_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div2) !== "svelte-1pc9xs9")
        div2.innerHTML = textContent_1;
      t12 = claim_space(label1_nodes);
      select1 = claim_element(label1_nodes, "SELECT", { class: true, placeholder: true });
      var select1_nodes = children(select1);
      option0 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-tjv9ae")
        option0.textContent = textContent_2;
      option1 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-191ama9")
        option1.textContent = textContent_3;
      option2 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-1d1tpur")
        option2.textContent = textContent_4;
      option3 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-3z0d3y")
        option3.textContent = textContent_5;
      option4 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-1jfmbq9")
        option4.textContent = textContent_6;
      select1_nodes.forEach(detach);
      label1_nodes.forEach(detach);
      t18 = claim_space(div3_nodes);
      claim_component(textpicker.$$.fragment, div3_nodes);
      t19 = claim_space(div3_nodes);
      button = claim_element(div3_nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      t20 = claim_text(button_nodes, "Remove");
      button_nodes.forEach(detach);
      div3_nodes.forEach(detach);
      t21 = claim_space(div4_nodes);
      div4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(input, "type", "radio");
      attr(input, "name", "cases");
      input.__value = input_value_value = /*w*/
      ctx[37].id;
      set_input_value(input, input.__value);
      attr(span0, "class", "text-secondary");
      attr(span1, "class", "italic");
      attr(span2, "class", "text-accent");
      attr(div0, "class", "collapse-title text-lg font-medium");
      attr(div1, "class", "label");
      attr(select0, "class", "select w-full mt-4");
      attr(select0, "placeholder", "Where");
      attr(label0, "class", "form-control w-full");
      attr(div2, "class", "label");
      option0.__value = "equal";
      set_input_value(option0, option0.__value);
      option1.__value = "not-equal";
      set_input_value(option1, option1.__value);
      option2.__value = "starts-with";
      set_input_value(option2, option2.__value);
      option3.__value = "contains";
      set_input_value(option3, option3.__value);
      option4.__value = "ends-with";
      set_input_value(option4, option4.__value);
      attr(select1, "class", "select w-full");
      attr(select1, "placeholder", "Where");
      attr(label1, "class", "form-control w-full");
      attr(button, "class", "btn btn-warning btn-outline w-full mt-2");
      attr(div3, "class", "collapse-content");
      attr(div4, "class", "collapse collapse-arrow bg-base-300 mt-2");
      binding_group.p(input);
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div4, anchor);
      append_hydration(div4, input);
      input.checked = input.__value === /*selectedWhereId*/
      ctx[7];
      append_hydration(div4, t1);
      append_hydration(div4, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t2);
      append_hydration(div0, t3);
      append_hydration(div0, span1);
      append_hydration(span1, t4);
      append_hydration(div0, t5);
      append_hydration(div0, span2);
      append_hydration(span2, t6);
      append_hydration(div4, t7);
      append_hydration(div4, div3);
      append_hydration(div3, label0);
      append_hydration(label0, div1);
      append_hydration(label0, t9);
      append_hydration(label0, select0);
      if (if_block1)
        if_block1.m(select0, null);
      append_hydration(select0, if_block1_anchor);
      if (if_block2)
        if_block2.m(select0, null);
      append_hydration(select0, if_block2_anchor);
      if (if_block3)
        if_block3.m(select0, null);
      append_hydration(select0, if_block3_anchor);
      if (if_block4)
        if_block4.m(select0, null);
      select_option(
        select0,
        /*w*/
        ctx[37].key
      );
      append_hydration(div3, t10);
      append_hydration(div3, label1);
      append_hydration(label1, div2);
      append_hydration(label1, t12);
      append_hydration(label1, select1);
      append_hydration(select1, option0);
      append_hydration(select1, option1);
      append_hydration(select1, option2);
      append_hydration(select1, option3);
      append_hydration(select1, option4);
      select_option(
        select1,
        /*w*/
        ctx[37].operator
      );
      append_hydration(div3, t18);
      mount_component(textpicker, div3, null);
      append_hydration(div3, t19);
      append_hydration(div3, button);
      mount_component(icon, button, null);
      append_hydration(button, t20);
      append_hydration(div4, t21);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "change",
            /*input_change_handler*/
            ctx[21]
          ),
          listen(select0, "change", change_handler),
          listen(select1, "change", change_handler_1),
          listen(button, "click", click_handler_1)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*index*/
        ctx[39] > 0
      )
        if_block0.p(ctx, dirty);
      if (!current || dirty[0] & /*where*/
      16 && input_value_value !== (input_value_value = /*w*/
      ctx[37].id)) {
        input.__value = input_value_value;
        set_input_value(input, input.__value);
        value_has_changed = true;
      }
      if (value_has_changed || dirty[0] & /*selectedWhereId, where*/
      144) {
        input.checked = input.__value === /*selectedWhereId*/
        ctx[7];
      }
      if ((!current || dirty[0] & /*where*/
      16) && t2_value !== (t2_value = /*w*/
      (ctx[37].key ?? "") + ""))
        set_data(t2, t2_value);
      if ((!current || dirty[0] & /*where*/
      16) && t4_value !== (t4_value = /*w*/
      (ctx[37].operator ?? "") + ""))
        set_data(t4, t4_value);
      if ((!current || dirty[0] & /*where*/
      16) && t6_value !== (t6_value = /*w*/
      (ctx[37].value ?? "") + ""))
        set_data(t6, t6_value);
      if (
        /*w*/
        ctx[37].key === void 0
      ) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
        } else {
          if_block1 = create_if_block_4$8();
          if_block1.c();
          if_block1.m(select0, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*eachType*/
        ctx[1] === "capability"
      ) {
        if (if_block2)
          ;
        else {
          if_block2 = create_if_block_3$b();
          if_block2.c();
          if_block2.m(select0, if_block2_anchor);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if (
        /*eachType*/
        ctx[1] === "device"
      ) {
        if (if_block3)
          ;
        else {
          if_block3 = create_if_block_2$d();
          if_block3.c();
          if_block3.m(select0, if_block3_anchor);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
      if (
        /*eachType*/
        ctx[1] === "flow"
      ) {
        if (if_block4)
          ;
        else {
          if_block4 = create_if_block_1$n();
          if_block4.c();
          if_block4.m(select0, null);
        }
      } else if (if_block4) {
        if_block4.d(1);
        if_block4 = null;
      }
      if (!current || dirty[0] & /*where*/
      16 && select0_value_value !== (select0_value_value = /*w*/
      ctx[37].key)) {
        select_option(
          select0,
          /*w*/
          ctx[37].key
        );
      }
      if (!current || dirty[0] & /*where*/
      16 && select1_value_value !== (select1_value_value = /*w*/
      ctx[37].operator)) {
        select_option(
          select1,
          /*w*/
          ctx[37].operator
        );
      }
      const textpicker_changes = {};
      if (!updating_value && dirty[0] & /*where*/
      16) {
        updating_value = true;
        textpicker_changes.value = /*w*/
        ctx[37].value;
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div4);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
      if (if_block4)
        if_block4.d();
      destroy_component(textpicker);
      destroy_component(icon);
      binding_group.r();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment$10(ctx) {
  let label0;
  let div0;
  let textContent = `<span class="label-text">For each</span>`;
  let t1;
  let select0;
  let option0;
  let textContent_1 = "Capability";
  let option1;
  let textContent_2 = "Device";
  let option2;
  let textContent_3 = "Zone";
  let option3;
  let textContent_4 = "⛔ Flow";
  let option4;
  let textContent_5 = "⛔ Flow folder";
  let option5;
  let textContent_6 = "⛔ Image";
  let t8;
  let t9;
  let current_block_type_index;
  let if_block2;
  let t10;
  let t11;
  let label1;
  let div1;
  let textContent_7 = `<span class="label-text">Gap</span>`;
  let t13;
  let select1;
  let option6;
  let textContent_8 = "0 px";
  let option7;
  let textContent_9 = "2 px";
  let option8;
  let textContent_10 = "4 px";
  let option9;
  let textContent_11 = "8 px";
  let option10;
  let textContent_12 = "12 px";
  let option11;
  let textContent_13 = "16 px";
  let option12;
  let textContent_14 = "20 px";
  let option13;
  let textContent_15 = "24 px";
  let option14;
  let textContent_16 = "28 px";
  let option15;
  let textContent_17 = "32 px";
  let option16;
  let textContent_18 = "36 px";
  let option17;
  let textContent_19 = "40 px";
  let t26;
  let textpicker;
  let updating_value;
  let t27;
  let div2;
  let icon0;
  let t28;
  let p0;
  let t29;
  let br0;
  let code;
  let t30;
  let t31_value = "{";
  let t31;
  let t32;
  let t33_value = ".[property]}";
  let t33;
  let t34;
  let br1;
  let t35;
  let randomobjectdropdown;
  let t36;
  let div4;
  let div3;
  let textContent_20 = `<p>This foreach can be replaced with a static list, if you want to customize it further. 
            <span class="text-warning">Note:</span> this is a non-reversable action!</p>`;
  let t40;
  let button;
  let icon1;
  let t41;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*eachType*/
    ctx[1] === void 0 && create_if_block_15()
  );
  let if_block1 = (
    /*eachType*/
    ctx[1] !== void 0 && create_if_block_10$1(ctx)
  );
  const if_block_creators = [create_if_block_7$4, create_if_block_8$3, create_if_block_9$2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*inType*/
      ctx2[2] === "device"
    )
      return 0;
    if (
      /*inType*/
      ctx2[2] === "zone"
    )
      return 1;
    if (
      /*inType*/
      ctx2[2] === "folder"
    )
      return 2;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  let if_block3 = (
    /*inArg*/
    ctx[3] !== void 0 && create_if_block$C(ctx)
  );
  function textpicker_value_binding_1(value) {
    ctx[29](value);
  }
  let textpicker_props = {
    label: "Slug",
    placeholder: (
      /*slug*/
      ctx[0]
    )
  };
  if (
    /*slug*/
    ctx[0] !== void 0
  ) {
    textpicker_props.value = /*slug*/
    ctx[0];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding_1));
  icon0 = new Icon({ props: { data: mdiInformation } });
  randomobjectdropdown = new RandomObjectDropdown({ props: { type: (
    /*eachType*/
    ctx[1]
  ) } });
  icon1 = new Icon({ props: { data: mdiAlert } });
  return {
    c() {
      label0 = element("label");
      div0 = element("div");
      div0.innerHTML = textContent;
      t1 = space();
      select0 = element("select");
      if (if_block0)
        if_block0.c();
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      option5 = element("option");
      option5.textContent = textContent_6;
      t8 = space();
      if (if_block1)
        if_block1.c();
      t9 = space();
      if (if_block2)
        if_block2.c();
      t10 = space();
      if (if_block3)
        if_block3.c();
      t11 = space();
      label1 = element("label");
      div1 = element("div");
      div1.innerHTML = textContent_7;
      t13 = space();
      select1 = element("select");
      option6 = element("option");
      option6.textContent = textContent_8;
      option7 = element("option");
      option7.textContent = textContent_9;
      option8 = element("option");
      option8.textContent = textContent_10;
      option9 = element("option");
      option9.textContent = textContent_11;
      option10 = element("option");
      option10.textContent = textContent_12;
      option11 = element("option");
      option11.textContent = textContent_13;
      option12 = element("option");
      option12.textContent = textContent_14;
      option13 = element("option");
      option13.textContent = textContent_15;
      option14 = element("option");
      option14.textContent = textContent_16;
      option15 = element("option");
      option15.textContent = textContent_17;
      option16 = element("option");
      option16.textContent = textContent_18;
      option17 = element("option");
      option17.textContent = textContent_19;
      t26 = space();
      create_component(textpicker.$$.fragment);
      t27 = space();
      div2 = element("div");
      create_component(icon0.$$.fragment);
      t28 = space();
      p0 = element("p");
      t29 = text("All properties are available in the form: ");
      br0 = element("br");
      code = element("code");
      t30 = text("$");
      t31 = text(t31_value);
      t32 = text(
        /*slug*/
        ctx[0]
      );
      t33 = text(t33_value);
      t34 = text(".\r\n        ");
      br1 = element("br");
      t35 = space();
      create_component(randomobjectdropdown.$$.fragment);
      t36 = space();
      div4 = element("div");
      div3 = element("div");
      div3.innerHTML = textContent_20;
      t40 = space();
      button = element("button");
      create_component(icon1.$$.fragment);
      t41 = text("Replace with list");
      this.h();
    },
    l(nodes) {
      label0 = claim_element(nodes, "LABEL", { class: true });
      var label0_nodes = children(label0);
      div0 = claim_element(label0_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div0) !== "svelte-hi3bz5")
        div0.innerHTML = textContent;
      t1 = claim_space(label0_nodes);
      select0 = claim_element(label0_nodes, "SELECT", { class: true, placeholder: true });
      var select0_nodes = children(select0);
      if (if_block0)
        if_block0.l(select0_nodes);
      option0 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-cx2j8y")
        option0.textContent = textContent_1;
      option1 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-am1d6a")
        option1.textContent = textContent_2;
      option2 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-xx4fl2")
        option2.textContent = textContent_3;
      option3 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-qb796c")
        option3.textContent = textContent_4;
      option4 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-1uyhbia")
        option4.textContent = textContent_5;
      option5 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-dkbj1o")
        option5.textContent = textContent_6;
      select0_nodes.forEach(detach);
      label0_nodes.forEach(detach);
      t8 = claim_space(nodes);
      if (if_block1)
        if_block1.l(nodes);
      t9 = claim_space(nodes);
      if (if_block2)
        if_block2.l(nodes);
      t10 = claim_space(nodes);
      if (if_block3)
        if_block3.l(nodes);
      t11 = claim_space(nodes);
      label1 = claim_element(nodes, "LABEL", { class: true });
      var label1_nodes = children(label1);
      div1 = claim_element(label1_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div1) !== "svelte-1dfxg89")
        div1.innerHTML = textContent_7;
      t13 = claim_space(label1_nodes);
      select1 = claim_element(label1_nodes, "SELECT", { class: true });
      var select1_nodes = children(select1);
      option6 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-rs24tp")
        option6.textContent = textContent_8;
      option7 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option7) !== "svelte-1ul4s52")
        option7.textContent = textContent_9;
      option8 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option8) !== "svelte-g1co46")
        option8.textContent = textContent_10;
      option9 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option9) !== "svelte-152pplb")
        option9.textContent = textContent_11;
      option10 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option10) !== "svelte-1jk73p5")
        option10.textContent = textContent_12;
      option11 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option11) !== "svelte-51dom8")
        option11.textContent = textContent_13;
      option12 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option12) !== "svelte-k8h58q")
        option12.textContent = textContent_14;
      option13 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option13) !== "svelte-19vfysj")
        option13.textContent = textContent_15;
      option14 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option14) !== "svelte-c5dn1w")
        option14.textContent = textContent_16;
      option15 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option15) !== "svelte-1nb5iwa")
        option15.textContent = textContent_17;
      option16 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option16) !== "svelte-1skldz5")
        option16.textContent = textContent_18;
      option17 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option17) !== "svelte-1f2jl3q")
        option17.textContent = textContent_19;
      select1_nodes.forEach(detach);
      label1_nodes.forEach(detach);
      t26 = claim_space(nodes);
      claim_component(textpicker.$$.fragment, nodes);
      t27 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", { role: true, class: true });
      var div2_nodes = children(div2);
      claim_component(icon0.$$.fragment, div2_nodes);
      t28 = claim_space(div2_nodes);
      p0 = claim_element(div2_nodes, "P", {});
      var p0_nodes = children(p0);
      t29 = claim_text(p0_nodes, "All properties are available in the form: ");
      br0 = claim_element(p0_nodes, "BR", {});
      code = claim_element(p0_nodes, "CODE", {});
      var code_nodes = children(code);
      t30 = claim_text(code_nodes, "$");
      t31 = claim_text(code_nodes, t31_value);
      t32 = claim_text(
        code_nodes,
        /*slug*/
        ctx[0]
      );
      t33 = claim_text(code_nodes, t33_value);
      code_nodes.forEach(detach);
      t34 = claim_text(p0_nodes, ".\r\n        ");
      br1 = claim_element(p0_nodes, "BR", {});
      t35 = claim_space(p0_nodes);
      claim_component(randomobjectdropdown.$$.fragment, p0_nodes);
      p0_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      t36 = claim_space(nodes);
      div4 = claim_element(nodes, "DIV", { role: true, class: true });
      var div4_nodes = children(div4);
      div3 = claim_element(div4_nodes, "DIV", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(div3) !== "svelte-u0rlb3")
        div3.innerHTML = textContent_20;
      t40 = claim_space(div4_nodes);
      button = claim_element(div4_nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon1.$$.fragment, button_nodes);
      t41 = claim_text(button_nodes, "Replace with list");
      button_nodes.forEach(detach);
      div4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "label");
      option0.__value = "capability";
      set_input_value(option0, option0.__value);
      option1.__value = "device";
      set_input_value(option1, option1.__value);
      option2.__value = "zone";
      set_input_value(option2, option2.__value);
      option3.__value = "flow";
      set_input_value(option3, option3.__value);
      option3.disabled = true;
      option4.__value = "folder";
      set_input_value(option4, option4.__value);
      option4.disabled = true;
      option5.__value = "image";
      set_input_value(option5, option5.__value);
      option5.disabled = true;
      attr(select0, "class", "select w-full mt-4");
      attr(select0, "placeholder", "For each");
      if (
        /*eachType*/
        ctx[1] === void 0
      )
        add_render_callback(() => (
          /*select0_change_handler*/
          ctx[15].call(select0)
        ));
      attr(label0, "class", "form-control w-full");
      attr(div1, "class", "label");
      option6.__value = "gap-0";
      set_input_value(option6, option6.__value);
      option7.__value = "gap-0.5";
      set_input_value(option7, option7.__value);
      option8.__value = "gap-1";
      set_input_value(option8, option8.__value);
      option9.__value = "gap-2";
      set_input_value(option9, option9.__value);
      option10.__value = "gap-3";
      set_input_value(option10, option10.__value);
      option11.__value = "gap-4";
      set_input_value(option11, option11.__value);
      option12.__value = "gap-5";
      set_input_value(option12, option12.__value);
      option13.__value = "gap-6";
      set_input_value(option13, option13.__value);
      option14.__value = "gap-7";
      set_input_value(option14, option14.__value);
      option15.__value = "gap-8";
      set_input_value(option15, option15.__value);
      option16.__value = "gap-9";
      set_input_value(option16, option16.__value);
      option17.__value = "gap-10";
      set_input_value(option17, option17.__value);
      attr(select1, "class", "select");
      if (
        /*gap*/
        ctx[6] === void 0
      )
        add_render_callback(() => (
          /*select1_change_handler*/
          ctx[28].call(select1)
        ));
      attr(label1, "class", "form-control w-full");
      attr(div2, "role", "alert");
      attr(div2, "class", "alert mt-2 bg-base-100");
      attr(button, "class", "btn btn-error btn-outline");
      attr(div4, "role", "alert");
      attr(div4, "class", "alert mt-2 flex flex-col");
    },
    m(target, anchor) {
      insert_hydration(target, label0, anchor);
      append_hydration(label0, div0);
      append_hydration(label0, t1);
      append_hydration(label0, select0);
      if (if_block0)
        if_block0.m(select0, null);
      append_hydration(select0, option0);
      append_hydration(select0, option1);
      append_hydration(select0, option2);
      append_hydration(select0, option3);
      append_hydration(select0, option4);
      append_hydration(select0, option5);
      select_option(
        select0,
        /*eachType*/
        ctx[1],
        true
      );
      insert_hydration(target, t8, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert_hydration(target, t9, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_hydration(target, t10, anchor);
      if (if_block3)
        if_block3.m(target, anchor);
      insert_hydration(target, t11, anchor);
      insert_hydration(target, label1, anchor);
      append_hydration(label1, div1);
      append_hydration(label1, t13);
      append_hydration(label1, select1);
      append_hydration(select1, option6);
      append_hydration(select1, option7);
      append_hydration(select1, option8);
      append_hydration(select1, option9);
      append_hydration(select1, option10);
      append_hydration(select1, option11);
      append_hydration(select1, option12);
      append_hydration(select1, option13);
      append_hydration(select1, option14);
      append_hydration(select1, option15);
      append_hydration(select1, option16);
      append_hydration(select1, option17);
      select_option(
        select1,
        /*gap*/
        ctx[6],
        true
      );
      insert_hydration(target, t26, anchor);
      mount_component(textpicker, target, anchor);
      insert_hydration(target, t27, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(icon0, div2, null);
      append_hydration(div2, t28);
      append_hydration(div2, p0);
      append_hydration(p0, t29);
      append_hydration(p0, br0);
      append_hydration(p0, code);
      append_hydration(code, t30);
      append_hydration(code, t31);
      append_hydration(code, t32);
      append_hydration(code, t33);
      append_hydration(p0, t34);
      append_hydration(p0, br1);
      append_hydration(p0, t35);
      mount_component(randomobjectdropdown, p0, null);
      insert_hydration(target, t36, anchor);
      insert_hydration(target, div4, anchor);
      append_hydration(div4, div3);
      append_hydration(div4, t40);
      append_hydration(div4, button);
      mount_component(icon1, button, null);
      append_hydration(button, t41);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            select0,
            "change",
            /*select0_change_handler*/
            ctx[15]
          ),
          listen(
            select1,
            "change",
            /*select1_change_handler*/
            ctx[28]
          ),
          listen(
            button,
            "click",
            /*click_handler_2*/
            ctx[30]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*eachType*/
        ctx2[1] === void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_15();
          if_block0.c();
          if_block0.m(select0, option0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty[0] & /*eachType*/
      2) {
        select_option(
          select0,
          /*eachType*/
          ctx2[1]
        );
      }
      if (
        /*eachType*/
        ctx2[1] !== void 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_10$1(ctx2);
          if_block1.c();
          if_block1.m(t9.parentNode, t9);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block2) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block2 = if_blocks[current_block_type_index];
          if (!if_block2) {
            if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block2.c();
          } else {
            if_block2.p(ctx2, dirty);
          }
          transition_in(if_block2, 1);
          if_block2.m(t10.parentNode, t10);
        } else {
          if_block2 = null;
        }
      }
      if (
        /*inArg*/
        ctx2[3] !== void 0
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty[0] & /*inArg*/
          8) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block$C(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(t11.parentNode, t11);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
      if (dirty[0] & /*gap*/
      64) {
        select_option(
          select1,
          /*gap*/
          ctx2[6]
        );
      }
      const textpicker_changes = {};
      if (dirty[0] & /*slug*/
      1)
        textpicker_changes.placeholder = /*slug*/
        ctx2[0];
      if (!updating_value && dirty[0] & /*slug*/
      1) {
        updating_value = true;
        textpicker_changes.value = /*slug*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
      if (!current || dirty[0] & /*slug*/
      1)
        set_data(
          t32,
          /*slug*/
          ctx2[0]
        );
      const randomobjectdropdown_changes = {};
      if (dirty[0] & /*eachType*/
      2)
        randomobjectdropdown_changes.type = /*eachType*/
        ctx2[1];
      randomobjectdropdown.$set(randomobjectdropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(textpicker.$$.fragment, local);
      transition_in(icon0.$$.fragment, local);
      transition_in(randomobjectdropdown.$$.fragment, local);
      transition_in(icon1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(textpicker.$$.fragment, local);
      transition_out(icon0.$$.fragment, local);
      transition_out(randomobjectdropdown.$$.fragment, local);
      transition_out(icon1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label0);
        detach(t8);
        detach(t9);
        detach(t10);
        detach(t11);
        detach(label1);
        detach(t26);
        detach(t27);
        detach(div2);
        detach(t36);
        detach(div4);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d(detaching);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
      if (if_block3)
        if_block3.d(detaching);
      destroy_component(textpicker, detaching);
      destroy_component(icon0);
      destroy_component(randomobjectdropdown);
      destroy_component(icon1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$11($$self, $$props, $$invalidate) {
  let $zones;
  let $devices;
  component_subscribe($$self, zones, ($$value) => $$invalidate(31, $zones = $$value));
  component_subscribe($$self, devices, ($$value) => $$invalidate(32, $devices = $$value));
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let slug;
  let eachType;
  let inType;
  let inArg;
  let where;
  let whereOp;
  let selectedWhereId;
  let gap;
  function onSettings(_settings) {
    $$invalidate(0, slug = _settings.slug ?? _settings.id.substring(0, 8));
    $$invalidate(1, eachType = _settings.each);
    $$invalidate(2, inType = _settings.in);
    $$invalidate(3, inArg = _settings.inArg);
    $$invalidate(4, where = _settings.where ?? []);
    $$invalidate(5, whereOp = _settings.whereOp ?? "and");
    $$invalidate(6, gap = _settings.gap ?? "gap-0");
  }
  function onChange(_slug, _each, _in, _inArg, _where, _whereOp, _gap) {
    if (_slug !== settings.slug || _each !== settings.each || _in !== settings.in || _inArg !== settings.inArg || _where !== settings.where || _whereOp !== settings.whereOp || _gap !== settings.gap) {
      $$invalidate(14, settings = {
        ...settings,
        slug: _slug,
        each: _each,
        in: _in,
        inArg: _inArg,
        where: _where,
        whereOp: _whereOp,
        gap: _gap
      });
      dispatch("settings", settings);
    }
  }
  function onEachType(_each) {
    if (_each !== settings.each) {
      $$invalidate(2, inType = void 0);
      $$invalidate(3, inArg = void 0);
    }
  }
  function addWhere() {
    const w2 = { id: v4() };
    $$invalidate(4, where = [...where, w2]);
    $$invalidate(7, selectedWhereId = w2.id);
  }
  function removeWhere(index2) {
    $$invalidate(4, where = where.filter((a3, i2) => i2 !== index2));
  }
  function updateWhereKey(index2, key) {
    $$invalidate(4, where[index2] = { ...where[index2], key }, where);
    $$invalidate(4, where = [...where]);
  }
  function updateWhereOperator(index2, operator) {
    $$invalidate(4, where[index2] = { ...where[index2], operator }, where);
    $$invalidate(4, where = [...where]);
  }
  function updateWhereValue(index2, value) {
    $$invalidate(4, where[index2] = { ...where[index2], value }, where);
    $$invalidate(4, where = [...where]);
  }
  function renderList() {
    var items = generateItems($devices, $zones, settings);
    var children2 = items.map((data) => transform(settings.item, data, slug));
    var list = {
      ...info$g.create(),
      id: settings.id,
      items: children2
    };
    console.log(list);
    $$invalidate(14, settings = list);
    dispatch("settings", settings);
  }
  const $$binding_groups = [[]];
  function select0_change_handler() {
    eachType = select_value(this);
    $$invalidate(1, eachType);
  }
  function select_change_handler() {
    inType = select_value(this);
    $$invalidate(2, inType);
  }
  function devicepicker_deviceId_binding(value) {
    inArg = value;
    $$invalidate(3, inArg);
  }
  function zonepicker_zoneId_binding(value) {
    inArg = value;
    $$invalidate(3, inArg);
  }
  const click_handler = () => addWhere();
  function select_change_handler_1() {
    whereOp = select_value(this);
    $$invalidate(5, whereOp);
  }
  function input_change_handler() {
    selectedWhereId = this.__value;
    $$invalidate(7, selectedWhereId);
  }
  const change_handler = (index2, e2) => updateWhereKey(index2, e2.currentTarget.value);
  const change_handler_1 = (index2, e2) => updateWhereOperator(index2, e2.currentTarget.value);
  function textpicker_value_binding(value, w2) {
    if ($$self.$$.not_equal(w2.value, value)) {
      w2.value = value;
      $$invalidate(4, where);
    }
  }
  const value_handler = (index2, e2) => updateWhereValue(index2, e2.detail);
  const click_handler_1 = (index2) => removeWhere(index2);
  function select1_change_handler() {
    gap = select_value(this);
    $$invalidate(6, gap);
  }
  function textpicker_value_binding_1(value) {
    slug = value;
    $$invalidate(0, slug);
  }
  const click_handler_22 = (e2) => renderList();
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(14, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*settings*/
    16384) {
      onSettings(settings);
    }
    if ($$self.$$.dirty[0] & /*eachType*/
    2) {
      onEachType(eachType);
    }
    if ($$self.$$.dirty[0] & /*slug, eachType, inType, inArg, where, whereOp, gap*/
    127) {
      onChange(slug, eachType, inType, inArg, where, whereOp, gap);
    }
  };
  return [
    slug,
    eachType,
    inType,
    inArg,
    where,
    whereOp,
    gap,
    selectedWhereId,
    addWhere,
    removeWhere,
    updateWhereKey,
    updateWhereOperator,
    updateWhereValue,
    renderList,
    settings,
    select0_change_handler,
    select_change_handler,
    devicepicker_deviceId_binding,
    zonepicker_zoneId_binding,
    click_handler,
    select_change_handler_1,
    input_change_handler,
    $$binding_groups,
    change_handler,
    change_handler_1,
    textpicker_value_binding,
    value_handler,
    click_handler_1,
    select1_change_handler,
    textpicker_value_binding_1,
    click_handler_22
  ];
}
class ForeachEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$11, create_fragment$10, safe_not_equal, { settings: 14 }, null, [-1, -1]);
  }
}
const get_default_slot_changes = (dirty) => ({ item: dirty & /*child*/
1024 });
const get_default_slot_context = (ctx) => ({ item: (
  /*child*/
  ctx[10]
) });
function create_default_slot$a(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    get_default_slot_context
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    l(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, child*/
        1280)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment$$(ctx) {
  let dndlist;
  let current;
  dndlist = new DndList({
    props: {
      editable: (
        /*editable*/
        ctx[0]
      ),
      items: (
        /*items*/
        ctx[2]
      ),
      dropDisabled: (
        /*dropDisabled*/
        ctx[3]
      ),
      class: (
        /*classes*/
        ctx[1]
      ),
      $$slots: {
        default: [
          create_default_slot$a,
          ({ item: child }) => ({ 10: child }),
          ({ item: child }) => child ? 1024 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  dndlist.$on(
    "items",
    /*items_handler*/
    ctx[7]
  );
  return {
    c() {
      create_component(dndlist.$$.fragment);
    },
    l(nodes) {
      claim_component(dndlist.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(dndlist, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const dndlist_changes = {};
      if (dirty & /*editable*/
      1)
        dndlist_changes.editable = /*editable*/
        ctx2[0];
      if (dirty & /*items*/
      4)
        dndlist_changes.items = /*items*/
        ctx2[2];
      if (dirty & /*dropDisabled*/
      8)
        dndlist_changes.dropDisabled = /*dropDisabled*/
        ctx2[3];
      if (dirty & /*classes*/
      2)
        dndlist_changes.class = /*classes*/
        ctx2[1];
      if (dirty & /*$$scope, child*/
      1280) {
        dndlist_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dndlist.$set(dndlist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dndlist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dndlist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dndlist, detaching);
    }
  };
}
function instance$10($$self, $$props, $$invalidate) {
  let dropDisabled;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { editable } = $$props;
  let { item } = $$props;
  let { class: classes = "min-h-[50px]" } = $$props;
  const dispatch = createEventDispatcher();
  let items;
  function onItems(_items) {
    if (_items.length > 0) {
      $$invalidate(5, item = _items[0]);
    } else {
      $$invalidate(5, item = void 0);
    }
    dispatch("item", item);
  }
  const items_handler = (e2) => onItems(e2.detail);
  $$self.$$set = ($$props2) => {
    if ("editable" in $$props2)
      $$invalidate(0, editable = $$props2.editable);
    if ("item" in $$props2)
      $$invalidate(5, item = $$props2.item);
    if ("class" in $$props2)
      $$invalidate(1, classes = $$props2.class);
    if ("$$scope" in $$props2)
      $$invalidate(8, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*item*/
    32) {
      $$invalidate(2, items = item ? [item] : []);
    }
    if ($$self.$$.dirty & /*items*/
    4) {
      $$invalidate(3, dropDisabled = items.length > 0);
    }
  };
  return [
    editable,
    classes,
    items,
    dropDisabled,
    onItems,
    item,
    slots,
    items_handler,
    $$scope
  ];
}
class DndSingle extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$10, create_fragment$$, safe_not_equal, { editable: 0, item: 5, class: 1 });
  }
}
function get_each_context$e(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i2];
  return child_ctx;
}
function create_else_block$l(ctx) {
  let div;
  let div_class_value;
  let current;
  let each_value = ensure_array_like(
    /*renderSettings*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$e(get_each_context$e(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div_nodes);
      }
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", div_class_value = "flex flex-col " + /*settings*/
      (ctx[0].gap ?? "gap-0"));
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*renderContext, renderSettings*/
      24) {
        each_value = ensure_array_like(
          /*renderSettings*/
          ctx2[3]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$e(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$e(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(div, null);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
      if (!current || dirty & /*settings*/
      1 && div_class_value !== (div_class_value = "flex flex-col " + /*settings*/
      (ctx2[0].gap ?? "gap-0"))) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block$B(ctx) {
  let dndsingle;
  let current;
  dndsingle = new DndSingle({
    props: {
      item: (
        /*child*/
        ctx[2]
      ),
      editable: (
        /*context*/
        ctx[1].editable
      ),
      class: "w-full " + /*settings*/
      (ctx[0].gap ?? "gap-0") + " " + /*context*/
      (ctx[1].editable ? "min-h-[50px]" : ""),
      $$slots: {
        default: [
          create_default_slot$9,
          ({ item }) => ({ 15: item }),
          ({ item }) => item ? 32768 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  dndsingle.$on(
    "item",
    /*item_handler*/
    ctx[11]
  );
  return {
    c() {
      create_component(dndsingle.$$.fragment);
    },
    l(nodes) {
      claim_component(dndsingle.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(dndsingle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dndsingle_changes = {};
      if (dirty & /*child*/
      4)
        dndsingle_changes.item = /*child*/
        ctx2[2];
      if (dirty & /*context*/
      2)
        dndsingle_changes.editable = /*context*/
        ctx2[1].editable;
      if (dirty & /*settings, context*/
      3)
        dndsingle_changes.class = "w-full " + /*settings*/
        (ctx2[0].gap ?? "gap-0") + " " + /*context*/
        (ctx2[1].editable ? "min-h-[50px]" : "");
      if (dirty & /*$$scope, context, item*/
      557058) {
        dndsingle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dndsingle.$set(dndsingle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dndsingle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dndsingle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dndsingle, detaching);
    }
  };
}
function create_each_block$e(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      context: (
        /*renderContext*/
        ctx[4]
      ),
      settings: (
        /*s*/
        ctx[16]
      )
    }
  });
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty & /*renderContext*/
      16)
        widget_changes.context = /*renderContext*/
        ctx2[4];
      if (dirty & /*renderSettings*/
      8)
        widget_changes.settings = /*s*/
        ctx2[16];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_default_slot$9(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      context: (
        /*context*/
        ctx[1]
      ),
      settings: (
        /*item*/
        ctx[15]
      )
    }
  });
  widget.$on(
    "settings",
    /*settings_handler*/
    ctx[10]
  );
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty & /*context*/
      2)
        widget_changes.context = /*context*/
        ctx2[1];
      if (dirty & /*item*/
      32768)
        widget_changes.settings = /*item*/
        ctx2[15];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_fragment$_(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$B, create_else_block$l];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*context*/
      ctx2[1].editable
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$$($$self, $$props, $$invalidate) {
  let $zones;
  let $devices;
  component_subscribe($$self, zones, ($$value) => $$invalidate(8, $zones = $$value));
  component_subscribe($$self, devices, ($$value) => $$invalidate(9, $devices = $$value));
  let { context } = $$props;
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let items;
  let child;
  let renderSettings;
  let renderContext;
  function onSettings(_settings) {
    $$invalidate(2, child = _settings.item);
  }
  function onItem(_item) {
    $$invalidate(2, child = _item ? { ..._item } : void 0);
    $$invalidate(0, settings = { ...settings, item: child });
    dispatch("settings", settings);
  }
  function updateWidget(_item) {
    $$invalidate(2, child = _item ? { ..._item } : void 0);
    $$invalidate(0, settings = { ...settings, item: child });
    dispatch("settings", settings);
  }
  function onChildItems(_child, _items) {
    return _items.map((item) => transform(_child, item, settings.slug));
  }
  const settings_handler = (e2) => updateWidget(e2.detail);
  const item_handler = (e2) => onItem(e2.detail);
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(1, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*$devices, $zones, settings*/
    769) {
      $$invalidate(7, items = generateItems($devices, $zones, settings));
    }
    if ($$self.$$.dirty & /*child, items*/
    132) {
      $$invalidate(3, renderSettings = onChildItems(child, items));
    }
    if ($$self.$$.dirty & /*context*/
    2) {
      $$invalidate(4, renderContext = { ...context, editable: false });
    }
  };
  return [
    settings,
    context,
    child,
    renderSettings,
    renderContext,
    onItem,
    updateWidget,
    items,
    $zones,
    $devices,
    settings_handler,
    item_handler
  ];
}
class ForeachWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$$, create_fragment$_, safe_not_equal, { context: 1, settings: 0 });
  }
}
const info$f = {
  type: "foreach",
  label: "Foreach",
  icon: mdiCardMultiple,
  category: "logic",
  widget: ForeachWidget,
  editor: ForeachEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "foreach", version: 1 }),
  migration: (e2) => e2
};
function instance$_($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  createEventDispatcher();
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1)
      ;
  };
  return [settings];
}
class GridEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$_, null, safe_not_equal, { settings: 0 });
  }
}
function obsolete(self, f, oldName, newName, rev) {
  let wrapper = (...args) => {
    console.warn("gridstack.js: Function `" + oldName + "` is deprecated in " + rev + " and has been replaced with `" + newName + "`. It will be **removed** in a future release");
    return f.apply(self, args);
  };
  wrapper.prototype = f.prototype;
  return wrapper;
}
class Utils {
  /** convert a potential selector into actual list of html elements. optional root which defaults to document (for shadow dom) */
  static getElements(els, root = document) {
    if (typeof els === "string") {
      const doc = "getElementById" in root ? root : void 0;
      if (doc && !isNaN(+els[0])) {
        const el = doc.getElementById(els);
        return el ? [el] : [];
      }
      let list = root.querySelectorAll(els);
      if (!list.length && els[0] !== "." && els[0] !== "#") {
        list = root.querySelectorAll("." + els);
        if (!list.length) {
          list = root.querySelectorAll("#" + els);
        }
      }
      return Array.from(list);
    }
    return [els];
  }
  /** convert a potential selector into actual single element. optional root which defaults to document (for shadow dom) */
  static getElement(els, root = document) {
    if (typeof els === "string") {
      const doc = "getElementById" in root ? root : void 0;
      if (!els.length)
        return null;
      if (doc && els[0] === "#") {
        return doc.getElementById(els.substring(1));
      }
      if (els[0] === "#" || els[0] === "." || els[0] === "[") {
        return root.querySelector(els);
      }
      if (doc && !isNaN(+els[0])) {
        return doc.getElementById(els);
      }
      let el = root.querySelector(els);
      if (doc && !el) {
        el = doc.getElementById(els);
      }
      if (!el) {
        el = root.querySelector("." + els);
      }
      return el;
    }
    return els;
  }
  /** true if we should resize to content. strict=true when only 'sizeToContent:true' and not a number which lets user adjust */
  static shouldSizeToContent(n, strict = false) {
    return (n == null ? void 0 : n.grid) && (strict ? n.sizeToContent === true || n.grid.opts.sizeToContent === true && n.sizeToContent === void 0 : !!n.sizeToContent || n.grid.opts.sizeToContent && n.sizeToContent !== false);
  }
  /** returns true if a and b overlap */
  static isIntercepted(a3, b2) {
    return !(a3.y >= b2.y + b2.h || a3.y + a3.h <= b2.y || a3.x + a3.w <= b2.x || a3.x >= b2.x + b2.w);
  }
  /** returns true if a and b touch edges or corners */
  static isTouching(a3, b2) {
    return Utils.isIntercepted(a3, { x: b2.x - 0.5, y: b2.y - 0.5, w: b2.w + 1, h: b2.h + 1 });
  }
  /** returns the area a and b overlap */
  static areaIntercept(a3, b2) {
    let x0 = a3.x > b2.x ? a3.x : b2.x;
    let x1 = a3.x + a3.w < b2.x + b2.w ? a3.x + a3.w : b2.x + b2.w;
    if (x1 <= x0)
      return 0;
    let y0 = a3.y > b2.y ? a3.y : b2.y;
    let y1 = a3.y + a3.h < b2.y + b2.h ? a3.y + a3.h : b2.y + b2.h;
    if (y1 <= y0)
      return 0;
    return (x1 - x0) * (y1 - y0);
  }
  /** returns the area */
  static area(a3) {
    return a3.w * a3.h;
  }
  /**
   * Sorts array of nodes
   * @param nodes array to sort
   * @param dir 1 for ascending, -1 for descending (optional)
   **/
  static sort(nodes, dir = 1) {
    const und = 1e4;
    return nodes.sort((a3, b2) => {
      let diffY = dir * ((a3.y ?? und) - (b2.y ?? und));
      if (diffY === 0)
        return dir * ((a3.x ?? und) - (b2.x ?? und));
      return diffY;
    });
  }
  /** find an item by id */
  static find(nodes, id) {
    return id ? nodes.find((n) => n.id === id) : void 0;
  }
  /**
   * creates a style sheet with style id under given parent
   * @param id will set the 'gs-style-id' attribute to that id
   * @param parent to insert the stylesheet as first child,
   * if none supplied it will be appended to the document head instead.
   */
  static createStylesheet(id, parent, options) {
    let style = document.createElement("style");
    const nonce = options == null ? void 0 : options.nonce;
    if (nonce)
      style.nonce = nonce;
    style.setAttribute("type", "text/css");
    style.setAttribute("gs-style-id", id);
    if (style.styleSheet) {
      style.styleSheet.cssText = "";
    } else {
      style.appendChild(document.createTextNode(""));
    }
    if (!parent) {
      parent = document.getElementsByTagName("head")[0];
      parent.appendChild(style);
    } else {
      parent.insertBefore(style, parent.firstChild);
    }
    return style.sheet;
  }
  /** removed the given stylesheet id */
  static removeStylesheet(id, parent) {
    const target = parent || document;
    let el = target.querySelector("STYLE[gs-style-id=" + id + "]");
    if (el && el.parentNode)
      el.remove();
  }
  /** inserts a CSS rule */
  static addCSSRule(sheet, selector, rules) {
    if (typeof sheet.addRule === "function") {
      sheet.addRule(selector, rules);
    } else if (typeof sheet.insertRule === "function") {
      sheet.insertRule(`${selector}{${rules}}`);
    }
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  static toBool(v) {
    if (typeof v === "boolean") {
      return v;
    }
    if (typeof v === "string") {
      v = v.toLowerCase();
      return !(v === "" || v === "no" || v === "false" || v === "0");
    }
    return Boolean(v);
  }
  static toNumber(value) {
    return value === null || value.length === 0 ? void 0 : Number(value);
  }
  static parseHeight(val) {
    let h3;
    let unit = "px";
    if (typeof val === "string") {
      if (val === "auto" || val === "")
        h3 = 0;
      else {
        let match2 = val.match(/^(-[0-9]+\.[0-9]+|[0-9]*\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%|cm|mm)?$/);
        if (!match2) {
          throw new Error(`Invalid height val = ${val}`);
        }
        unit = match2[2] || "px";
        h3 = parseFloat(match2[1]);
      }
    } else {
      h3 = val;
    }
    return { h: h3, unit };
  }
  /** copies unset fields in target to use the given default sources values */
  // eslint-disable-next-line
  static defaults(target, ...sources) {
    sources.forEach((source) => {
      for (const key in source) {
        if (!source.hasOwnProperty(key))
          return;
        if (target[key] === null || target[key] === void 0) {
          target[key] = source[key];
        } else if (typeof source[key] === "object" && typeof target[key] === "object") {
          this.defaults(target[key], source[key]);
        }
      }
    });
    return target;
  }
  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */
  static same(a3, b2) {
    if (typeof a3 !== "object")
      return a3 == b2;
    if (typeof a3 !== typeof b2)
      return false;
    if (Object.keys(a3).length !== Object.keys(b2).length)
      return false;
    for (const key in a3) {
      if (a3[key] !== b2[key])
        return false;
    }
    return true;
  }
  /** copies over b size & position (GridStackPosition), and optionally min/max as well */
  static copyPos(a3, b2, doMinMax = false) {
    if (b2.x !== void 0)
      a3.x = b2.x;
    if (b2.y !== void 0)
      a3.y = b2.y;
    if (b2.w !== void 0)
      a3.w = b2.w;
    if (b2.h !== void 0)
      a3.h = b2.h;
    if (doMinMax) {
      if (b2.minW)
        a3.minW = b2.minW;
      if (b2.minH)
        a3.minH = b2.minH;
      if (b2.maxW)
        a3.maxW = b2.maxW;
      if (b2.maxH)
        a3.maxH = b2.maxH;
    }
    return a3;
  }
  /** true if a and b has same size & position */
  static samePos(a3, b2) {
    return a3 && b2 && a3.x === b2.x && a3.y === b2.y && (a3.w || 1) === (b2.w || 1) && (a3.h || 1) === (b2.h || 1);
  }
  /** given a node, makes sure it's min/max are valid */
  static sanitizeMinMax(node) {
    if (!node.minW) {
      delete node.minW;
    }
    if (!node.minH) {
      delete node.minH;
    }
    if (!node.maxW) {
      delete node.maxW;
    }
    if (!node.maxH) {
      delete node.maxH;
    }
  }
  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */
  static removeInternalAndSame(a3, b2) {
    if (typeof a3 !== "object" || typeof b2 !== "object")
      return;
    for (let key in a3) {
      const aVal = a3[key];
      const bVal = b2[key];
      if (key[0] === "_" || aVal === bVal) {
        delete a3[key];
      } else if (aVal && typeof aVal === "object" && bVal !== void 0) {
        Utils.removeInternalAndSame(aVal, bVal);
        if (!Object.keys(aVal).length) {
          delete a3[key];
        }
      }
    }
  }
  /** removes internal fields '_' and default values for saving */
  static removeInternalForSave(n, removeEl = true) {
    for (let key in n) {
      if (key[0] === "_" || n[key] === null || n[key] === void 0)
        delete n[key];
    }
    delete n.grid;
    if (removeEl)
      delete n.el;
    if (!n.autoPosition)
      delete n.autoPosition;
    if (!n.noResize)
      delete n.noResize;
    if (!n.noMove)
      delete n.noMove;
    if (!n.locked)
      delete n.locked;
    if (n.w === 1 || n.w === n.minW)
      delete n.w;
    if (n.h === 1 || n.h === n.minH)
      delete n.h;
  }
  /** return the closest parent (or itself) matching the given class */
  // static closestUpByClass(el: HTMLElement, name: string): HTMLElement {
  //   while (el) {
  //     if (el.classList.contains(name)) return el;
  //     el = el.parentElement
  //   }
  //   return null;
  // }
  /** delay calling the given function for given delay, preventing new calls from happening while waiting */
  static throttle(func2, delay) {
    let isWaiting = false;
    return (...args) => {
      if (!isWaiting) {
        isWaiting = true;
        setTimeout(() => {
          func2(...args);
          isWaiting = false;
        }, delay);
      }
    };
  }
  static removePositioningStyles(el) {
    let style = el.style;
    if (style.position) {
      style.removeProperty("position");
    }
    if (style.left) {
      style.removeProperty("left");
    }
    if (style.top) {
      style.removeProperty("top");
    }
    if (style.width) {
      style.removeProperty("width");
    }
    if (style.height) {
      style.removeProperty("height");
    }
  }
  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */
  static getScrollElement(el) {
    if (!el)
      return document.scrollingElement || document.documentElement;
    const style = getComputedStyle(el);
    const overflowRegex = /(auto|scroll)/;
    if (overflowRegex.test(style.overflow + style.overflowY)) {
      return el;
    } else {
      return this.getScrollElement(el.parentElement);
    }
  }
  /** @internal */
  static updateScrollPosition(el, position, distance) {
    let rect = el.getBoundingClientRect();
    let innerHeightOrClientHeight = window.innerHeight || document.documentElement.clientHeight;
    if (rect.top < 0 || rect.bottom > innerHeightOrClientHeight) {
      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;
      let offsetDiffUp = rect.top;
      let scrollEl = this.getScrollElement(el);
      if (scrollEl !== null) {
        let prevScroll = scrollEl.scrollTop;
        if (rect.top < 0 && distance < 0) {
          if (el.offsetHeight > innerHeightOrClientHeight) {
            scrollEl.scrollTop += distance;
          } else {
            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;
          }
        } else if (distance > 0) {
          if (el.offsetHeight > innerHeightOrClientHeight) {
            scrollEl.scrollTop += distance;
          } else {
            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;
          }
        }
        position.top += scrollEl.scrollTop - prevScroll;
      }
    }
  }
  /**
   * @internal Function used to scroll the page.
   *
   * @param event `MouseEvent` that triggers the resize
   * @param el `HTMLElement` that's being resized
   * @param distance Distance from the V edges to start scrolling
   */
  static updateScrollResize(event, el, distance) {
    const scrollEl = this.getScrollElement(el);
    const height = scrollEl.clientHeight;
    const offsetTop = scrollEl === this.getScrollElement() ? 0 : scrollEl.getBoundingClientRect().top;
    const pointerPosY = event.clientY - offsetTop;
    const top = pointerPosY < distance;
    const bottom = pointerPosY > height - distance;
    if (top) {
      scrollEl.scrollBy({ behavior: "smooth", top: pointerPosY - distance });
    } else if (bottom) {
      scrollEl.scrollBy({ behavior: "smooth", top: distance - (height - pointerPosY) });
    }
  }
  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */
  static clone(obj) {
    if (obj === null || obj === void 0 || typeof obj !== "object") {
      return obj;
    }
    if (obj instanceof Array) {
      return [...obj];
    }
    return { ...obj };
  }
  /**
   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.
   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.
   */
  static cloneDeep(obj) {
    const skipFields = ["parentGrid", "el", "grid", "subGrid", "engine"];
    const ret = Utils.clone(obj);
    for (const key in ret) {
      if (ret.hasOwnProperty(key) && typeof ret[key] === "object" && key.substring(0, 2) !== "__" && !skipFields.find((k2) => k2 === key)) {
        ret[key] = Utils.cloneDeep(obj[key]);
      }
    }
    return ret;
  }
  /** deep clone the given HTML node, removing teh unique id field */
  static cloneNode(el) {
    const node = el.cloneNode(true);
    node.removeAttribute("id");
    return node;
  }
  static appendTo(el, parent) {
    let parentNode;
    if (typeof parent === "string") {
      parentNode = Utils.getElement(parent);
    } else {
      parentNode = parent;
    }
    if (parentNode) {
      parentNode.appendChild(el);
    }
  }
  // public static setPositionRelative(el: HTMLElement): void {
  //   if (!(/^(?:r|a|f)/).test(getComputedStyle(el).position)) {
  //     el.style.position = "relative";
  //   }
  // }
  static addElStyles(el, styles) {
    if (styles instanceof Object) {
      for (const s3 in styles) {
        if (styles.hasOwnProperty(s3)) {
          if (Array.isArray(styles[s3])) {
            styles[s3].forEach((val) => {
              el.style[s3] = val;
            });
          } else {
            el.style[s3] = styles[s3];
          }
        }
      }
    }
  }
  static initEvent(e2, info2) {
    const evt = { type: info2.type };
    const obj = {
      button: 0,
      which: 0,
      buttons: 1,
      bubbles: true,
      cancelable: true,
      target: info2.target ? info2.target : e2.target
    };
    ["altKey", "ctrlKey", "metaKey", "shiftKey"].forEach((p) => evt[p] = e2[p]);
    ["pageX", "pageY", "clientX", "clientY", "screenX", "screenY"].forEach((p) => evt[p] = e2[p]);
    return { ...evt, ...obj };
  }
  /** copies the MouseEvent properties and sends it as another event to the given target */
  static simulateMouseEvent(e2, simulatedType, target) {
    const simulatedEvent = document.createEvent("MouseEvents");
    simulatedEvent.initMouseEvent(
      simulatedType,
      // type
      true,
      // bubbles
      true,
      // cancelable
      window,
      // view
      1,
      // detail
      e2.screenX,
      // screenX
      e2.screenY,
      // screenY
      e2.clientX,
      // clientX
      e2.clientY,
      // clientY
      e2.ctrlKey,
      // ctrlKey
      e2.altKey,
      // altKey
      e2.shiftKey,
      // shiftKey
      e2.metaKey,
      // metaKey
      0,
      // button
      e2.target
      // relatedTarget
    );
    (target || e2.target).dispatchEvent(simulatedEvent);
  }
  /**
   * defines an element that is used to get the offset and scale from grid transforms
   * returns the scale and offsets from said element
  */
  static getValuesFromTransformedElement(parent) {
    const transformReference = document.createElement("div");
    Utils.addElStyles(transformReference, {
      opacity: "0",
      position: "fixed",
      top: "0px",
      left: "0px",
      width: "1px",
      height: "1px",
      zIndex: "-999999"
    });
    parent.appendChild(transformReference);
    const transformValues = transformReference.getBoundingClientRect();
    parent.removeChild(transformReference);
    transformReference.remove();
    return {
      xScale: 1 / transformValues.width,
      yScale: 1 / transformValues.height,
      xOffset: transformValues.left,
      yOffset: transformValues.top
    };
  }
  /** swap the given object 2 field values */
  static swap(o, a3, b2) {
    if (!o)
      return;
    const tmp = o[a3];
    o[a3] = o[b2];
    o[b2] = tmp;
  }
  /** returns true if event is inside the given element rectangle */
  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead
  //    this.el.contains(event.relatedTarget as HTMLElement)
  // public static inside(e: MouseEvent, el: HTMLElement): boolean {
  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)
  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;
  //   if (!target) {
  //     const { bottom, left, right, top } = el.getBoundingClientRect();
  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);
  //   }
  //   return el.contains(target);
  // }
  /** true if the item can be rotated (checking for prop, not space available) */
  static canBeRotated(n) {
    var _a2;
    return !(!n || n.w === n.h || n.locked || n.noResize || ((_a2 = n.grid) == null ? void 0 : _a2.opts.disableResize) || n.minW && n.minW === n.maxW || n.minH && n.minH === n.maxH);
  }
}
class GridStackEngine {
  constructor(opts = {}) {
    this.addedNodes = [];
    this.removedNodes = [];
    this.column = opts.column || 12;
    this.maxRow = opts.maxRow;
    this._float = opts.float;
    this.nodes = opts.nodes || [];
    this.onChange = opts.onChange;
  }
  batchUpdate(flag = true, doPack = true) {
    if (!!this.batchMode === flag)
      return this;
    this.batchMode = flag;
    if (flag) {
      this._prevFloat = this._float;
      this._float = true;
      this.cleanNodes();
      this.saveInitial();
    } else {
      this._float = this._prevFloat;
      delete this._prevFloat;
      if (doPack)
        this._packNodes();
      this._notify();
    }
    return this;
  }
  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip
  _useEntireRowArea(node, nn) {
    return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);
  }
  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.
   * return true if we moved. */
  _fixCollisions(node, nn = node, collide, opt = {}) {
    this.sortNodes(-1);
    collide = collide || this.collide(node, nn);
    if (!collide)
      return false;
    if (node._moving && !opt.nested && !this.float) {
      if (this.swap(node, collide))
        return true;
    }
    let area = nn;
    if (!this._loading && this._useEntireRowArea(node, nn)) {
      area = { x: 0, w: this.column, y: nn.y, h: nn.h };
      collide = this.collide(node, area, opt.skip);
    }
    let didMove = false;
    let newOpt = { nested: true, pack: false };
    while (collide = collide || this.collide(node, area, opt.skip)) {
      let moved;
      if (collide.locked || this._loading || node._moving && !node._skipDown && nn.y > node.y && !this.float && // can take space we had, or before where we're going
      (!this.collide(collide, { ...collide, y: node.y }, node) || !this.collide(collide, { ...collide, y: nn.y - collide.h }, node))) {
        node._skipDown = node._skipDown || nn.y > node.y;
        moved = this.moveNode(node, { ...nn, y: collide.y + collide.h, ...newOpt });
        if ((collide.locked || this._loading) && moved) {
          Utils.copyPos(nn, node);
        } else if (!collide.locked && moved && opt.pack) {
          this._packNodes();
          nn.y = collide.y + collide.h;
          Utils.copyPos(node, nn);
        }
        didMove = didMove || moved;
      } else {
        moved = this.moveNode(collide, { ...collide, y: nn.y + nn.h, skip: node, ...newOpt });
      }
      if (!moved) {
        return didMove;
      }
      collide = void 0;
    }
    return didMove;
  }
  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */
  collide(skip2, area = skip2, skip22) {
    const skipId = skip2._id;
    const skip2Id = skip22 == null ? void 0 : skip22._id;
    return this.nodes.find((n) => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));
  }
  collideAll(skip2, area = skip2, skip22) {
    const skipId = skip2._id;
    const skip2Id = skip22 == null ? void 0 : skip22._id;
    return this.nodes.filter((n) => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));
  }
  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */
  directionCollideCoverage(node, o, collides) {
    if (!o.rect || !node._rect)
      return;
    let r0 = node._rect;
    let r = { ...o.rect };
    if (r.y > r0.y) {
      r.h += r.y - r0.y;
      r.y = r0.y;
    } else {
      r.h += r0.y - r.y;
    }
    if (r.x > r0.x) {
      r.w += r.x - r0.x;
      r.x = r0.x;
    } else {
      r.w += r0.x - r.x;
    }
    let collide;
    let overMax = 0.5;
    for (let n of collides) {
      if (n.locked || !n._rect) {
        break;
      }
      let r2 = n._rect;
      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE;
      if (r0.y < r2.y) {
        yOver = (r.y + r.h - r2.y) / r2.h;
      } else if (r0.y + r0.h > r2.y + r2.h) {
        yOver = (r2.y + r2.h - r.y) / r2.h;
      }
      if (r0.x < r2.x) {
        xOver = (r.x + r.w - r2.x) / r2.w;
      } else if (r0.x + r0.w > r2.x + r2.w) {
        xOver = (r2.x + r2.w - r.x) / r2.w;
      }
      let over = Math.min(xOver, yOver);
      if (over > overMax) {
        overMax = over;
        collide = n;
      }
    }
    o.collide = collide;
    return collide;
  }
  /** does a pixel coverage returning the node that has the most coverage by area */
  /*
  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {
    let collide: GridStackNode;
    let overMax = 0;
    collides.forEach(n => {
      if (n.locked || !n._rect) return;
      let over = Utils.areaIntercept(r, n._rect);
      if (over > overMax) {
        overMax = over;
        collide = n;
      }
    });
    return {collide, over: overMax};
  }
  */
  /** called to cache the nodes pixel rectangles used for collision detection during drag */
  cacheRects(w2, h3, top, right, bottom, left) {
    this.nodes.forEach((n) => n._rect = {
      y: n.y * h3 + top,
      x: n.x * w2 + left,
      w: n.w * w2 - left - right,
      h: n.h * h3 - top - bottom
    });
    return this;
  }
  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */
  swap(a3, b2) {
    if (!b2 || b2.locked || !a3 || a3.locked)
      return false;
    function _doSwap() {
      let x2 = b2.x, y3 = b2.y;
      b2.x = a3.x;
      b2.y = a3.y;
      if (a3.h != b2.h) {
        a3.x = x2;
        a3.y = b2.y + b2.h;
      } else if (a3.w != b2.w) {
        a3.x = b2.x + b2.w;
        a3.y = y3;
      } else {
        a3.x = x2;
        a3.y = y3;
      }
      a3._dirty = b2._dirty = true;
      return true;
    }
    let touching;
    if (a3.w === b2.w && a3.h === b2.h && (a3.x === b2.x || a3.y === b2.y) && (touching = Utils.isTouching(a3, b2)))
      return _doSwap();
    if (touching === false)
      return;
    if (a3.w === b2.w && a3.x === b2.x && (touching || (touching = Utils.isTouching(a3, b2)))) {
      if (b2.y < a3.y) {
        let t2 = a3;
        a3 = b2;
        b2 = t2;
      }
      return _doSwap();
    }
    if (touching === false)
      return;
    if (a3.h === b2.h && a3.y === b2.y && (touching || (touching = Utils.isTouching(a3, b2)))) {
      if (b2.x < a3.x) {
        let t2 = a3;
        a3 = b2;
        b2 = t2;
      }
      return _doSwap();
    }
    return false;
  }
  isAreaEmpty(x2, y3, w2, h3) {
    let nn = { x: x2 || 0, y: y3 || 0, w: w2 || 1, h: h3 || 1 };
    return !this.collide(nn);
  }
  /** re-layout grid items to reclaim any empty space - optionally keeping the sort order exactly the same ('list' mode) vs truly finding an empty spaces */
  compact(layout = "compact", doSort = true) {
    if (this.nodes.length === 0)
      return this;
    if (doSort)
      this.sortNodes();
    const wasBatch = this.batchMode;
    if (!wasBatch)
      this.batchUpdate();
    const wasColumnResize = this._inColumnResize;
    if (!wasColumnResize)
      this._inColumnResize = true;
    let copyNodes = this.nodes;
    this.nodes = [];
    copyNodes.forEach((n, index2, list) => {
      let after;
      if (!n.locked) {
        n.autoPosition = true;
        if (layout === "list" && index2)
          after = list[index2 - 1];
      }
      this.addNode(n, false, after);
    });
    if (!wasColumnResize)
      delete this._inColumnResize;
    if (!wasBatch)
      this.batchUpdate(false);
    return this;
  }
  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */
  set float(val) {
    if (this._float === val)
      return;
    this._float = val || false;
    if (!val) {
      this._packNodes()._notify();
    }
  }
  /** float getter method */
  get float() {
    return this._float || false;
  }
  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */
  sortNodes(dir = 1) {
    this.nodes = Utils.sort(this.nodes, dir);
    return this;
  }
  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */
  _packNodes() {
    if (this.batchMode) {
      return this;
    }
    this.sortNodes();
    if (this.float) {
      this.nodes.forEach((n) => {
        if (n._updating || n._orig === void 0 || n.y === n._orig.y)
          return;
        let newY = n.y;
        while (newY > n._orig.y) {
          --newY;
          let collide = this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });
          if (!collide) {
            n._dirty = true;
            n.y = newY;
          }
        }
      });
    } else {
      this.nodes.forEach((n, i2) => {
        if (n.locked)
          return;
        while (n.y > 0) {
          let newY = i2 === 0 ? 0 : n.y - 1;
          let canBeMoved = i2 === 0 || !this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });
          if (!canBeMoved)
            break;
          n._dirty = n.y !== newY;
          n.y = newY;
        }
      });
    }
    return this;
  }
  /**
   * given a random node, makes sure it's coordinates/values are valid in the current grid
   * @param node to adjust
   * @param resizing if out of bound, resize down or move into the grid to fit ?
   */
  prepareNode(node, resizing) {
    node._id = node._id ?? GridStackEngine._idSeq++;
    if (node.x === void 0 || node.y === void 0 || node.x === null || node.y === null) {
      node.autoPosition = true;
    }
    let defaults2 = { x: 0, y: 0, w: 1, h: 1 };
    Utils.defaults(node, defaults2);
    if (!node.autoPosition) {
      delete node.autoPosition;
    }
    if (!node.noResize) {
      delete node.noResize;
    }
    if (!node.noMove) {
      delete node.noMove;
    }
    Utils.sanitizeMinMax(node);
    if (typeof node.x == "string") {
      node.x = Number(node.x);
    }
    if (typeof node.y == "string") {
      node.y = Number(node.y);
    }
    if (typeof node.w == "string") {
      node.w = Number(node.w);
    }
    if (typeof node.h == "string") {
      node.h = Number(node.h);
    }
    if (isNaN(node.x)) {
      node.x = defaults2.x;
      node.autoPosition = true;
    }
    if (isNaN(node.y)) {
      node.y = defaults2.y;
      node.autoPosition = true;
    }
    if (isNaN(node.w)) {
      node.w = defaults2.w;
    }
    if (isNaN(node.h)) {
      node.h = defaults2.h;
    }
    this.nodeBoundFix(node, resizing);
    return node;
  }
  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */
  nodeBoundFix(node, resizing) {
    let before = node._orig || Utils.copyPos({}, node);
    if (node.maxW) {
      node.w = Math.min(node.w, node.maxW);
    }
    if (node.maxH) {
      node.h = Math.min(node.h, node.maxH);
    }
    if (node.minW && node.minW <= this.column) {
      node.w = Math.max(node.w, node.minW);
    }
    if (node.minH) {
      node.h = Math.max(node.h, node.minH);
    }
    const saveOrig = (node.x || 0) + (node.w || 1) > this.column;
    if (saveOrig && this.column < 12 && !this._inColumnResize && node._id && this.findCacheLayout(node, 12) === -1) {
      let copy = { ...node };
      if (copy.autoPosition || copy.x === void 0) {
        delete copy.x;
        delete copy.y;
      } else
        copy.x = Math.min(11, copy.x);
      copy.w = Math.min(12, copy.w || 1);
      this.cacheOneLayout(copy, 12);
    }
    if (node.w > this.column) {
      node.w = this.column;
    } else if (node.w < 1) {
      node.w = 1;
    }
    if (this.maxRow && node.h > this.maxRow) {
      node.h = this.maxRow;
    } else if (node.h < 1) {
      node.h = 1;
    }
    if (node.x < 0) {
      node.x = 0;
    }
    if (node.y < 0) {
      node.y = 0;
    }
    if (node.x + node.w > this.column) {
      if (resizing) {
        node.w = this.column - node.x;
      } else {
        node.x = this.column - node.w;
      }
    }
    if (this.maxRow && node.y + node.h > this.maxRow) {
      if (resizing) {
        node.h = this.maxRow - node.y;
      } else {
        node.y = this.maxRow - node.h;
      }
    }
    if (!Utils.samePos(node, before)) {
      node._dirty = true;
    }
    return this;
  }
  /** returns a list of modified nodes from their original values */
  getDirtyNodes(verify) {
    if (verify) {
      return this.nodes.filter((n) => n._dirty && !Utils.samePos(n, n._orig));
    }
    return this.nodes.filter((n) => n._dirty);
  }
  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */
  _notify(removedNodes) {
    if (this.batchMode || !this.onChange)
      return this;
    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());
    this.onChange(dirtyNodes);
    return this;
  }
  /** @internal remove dirty and last tried info */
  cleanNodes() {
    if (this.batchMode)
      return this;
    this.nodes.forEach((n) => {
      delete n._dirty;
      delete n._lastTried;
    });
    return this;
  }
  /** @internal called to save initial position/size to track real dirty state.
   * Note: should be called right after we call change event (so next API is can detect changes)
   * as well as right before we start move/resize/enter (so we can restore items to prev values) */
  saveInitial() {
    this.nodes.forEach((n) => {
      n._orig = Utils.copyPos({}, n);
      delete n._dirty;
    });
    this._hasLocked = this.nodes.some((n) => n.locked);
    return this;
  }
  /** @internal restore all the nodes back to initial values (called when we leave) */
  restoreInitial() {
    this.nodes.forEach((n) => {
      if (Utils.samePos(n, n._orig))
        return;
      Utils.copyPos(n, n._orig);
      n._dirty = true;
    });
    this._notify();
    return this;
  }
  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.
   * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.
   * Optionally pass a widget to start search AFTER, meaning the order will remain the same but possibly have empty slots we skipped
   */
  findEmptyPosition(node, nodeList = this.nodes, column = this.column, after) {
    let start = after ? after.y * column + (after.x + after.w) : 0;
    let found = false;
    for (let i2 = start; !found; ++i2) {
      let x2 = i2 % column;
      let y3 = Math.floor(i2 / column);
      if (x2 + node.w > column) {
        continue;
      }
      let box = { x: x2, y: y3, w: node.w, h: node.h };
      if (!nodeList.find((n) => Utils.isIntercepted(box, n))) {
        if (node.x !== x2 || node.y !== y3)
          node._dirty = true;
        node.x = x2;
        node.y = y3;
        delete node.autoPosition;
        found = true;
      }
    }
    return found;
  }
  /** call to add the given node to our list, fixing collision and re-packing */
  addNode(node, triggerAddEvent = false, after) {
    let dup = this.nodes.find((n) => n._id === node._id);
    if (dup)
      return dup;
    this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);
    delete node._temporaryRemoved;
    delete node._removeDOM;
    let skipCollision;
    if (node.autoPosition && this.findEmptyPosition(node, this.nodes, this.column, after)) {
      delete node.autoPosition;
      skipCollision = true;
    }
    this.nodes.push(node);
    if (triggerAddEvent) {
      this.addedNodes.push(node);
    }
    if (!skipCollision)
      this._fixCollisions(node);
    if (!this.batchMode) {
      this._packNodes()._notify();
    }
    return node;
  }
  removeNode(node, removeDOM = true, triggerEvent = false) {
    if (!this.nodes.find((n) => n._id === node._id)) {
      return this;
    }
    if (triggerEvent) {
      this.removedNodes.push(node);
    }
    if (removeDOM)
      node._removeDOM = true;
    this.nodes = this.nodes.filter((n) => n._id !== node._id);
    if (!node._isAboutToRemove)
      this._packNodes();
    this._notify([node]);
    return this;
  }
  removeAll(removeDOM = true, triggerEvent = true) {
    delete this._layouts;
    if (!this.nodes.length)
      return this;
    removeDOM && this.nodes.forEach((n) => n._removeDOM = true);
    const removedNodes = this.nodes;
    this.removedNodes = triggerEvent ? removedNodes : [];
    this.nodes = [];
    return this._notify(removedNodes);
  }
  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.
   * In more complicated cases (maxRow) it will attempt at moving the item and fixing
   * others in a clone first, then apply those changes if still within specs. */
  moveNodeCheck(node, o) {
    if (!this.changedPosConstrain(node, o))
      return false;
    o.pack = true;
    if (!this.maxRow) {
      return this.moveNode(node, o);
    }
    let clonedNode;
    let clone2 = new GridStackEngine({
      column: this.column,
      float: this.float,
      nodes: this.nodes.map((n) => {
        if (n._id === node._id) {
          clonedNode = { ...n };
          return clonedNode;
        }
        return { ...n };
      })
    });
    if (!clonedNode)
      return false;
    let canMove = clone2.moveNode(clonedNode, o) && clone2.getRow() <= Math.max(this.getRow(), this.maxRow);
    if (!canMove && !o.resizing && o.collide) {
      let collide = o.collide.el.gridstackNode;
      if (this.swap(node, collide)) {
        this._notify();
        return true;
      }
    }
    if (!canMove)
      return false;
    clone2.nodes.filter((n) => n._dirty).forEach((c2) => {
      let n = this.nodes.find((a3) => a3._id === c2._id);
      if (!n)
        return;
      Utils.copyPos(n, c2);
      n._dirty = true;
    });
    this._notify();
    return true;
  }
  /** return true if can fit in grid height constrain only (always true if no maxRow) */
  willItFit(node) {
    delete node._willFitPos;
    if (!this.maxRow)
      return true;
    let clone2 = new GridStackEngine({
      column: this.column,
      float: this.float,
      nodes: this.nodes.map((n2) => {
        return { ...n2 };
      })
    });
    let n = { ...node };
    this.cleanupNode(n);
    delete n.el;
    delete n._id;
    delete n.content;
    delete n.grid;
    clone2.addNode(n);
    if (clone2.getRow() <= this.maxRow) {
      node._willFitPos = Utils.copyPos({}, n);
      return true;
    }
    return false;
  }
  /** true if x,y or w,h are different after clamping to min/max */
  changedPosConstrain(node, p) {
    p.w = p.w || node.w;
    p.h = p.h || node.h;
    if (node.x !== p.x || node.y !== p.y)
      return true;
    if (node.maxW) {
      p.w = Math.min(p.w, node.maxW);
    }
    if (node.maxH) {
      p.h = Math.min(p.h, node.maxH);
    }
    if (node.minW) {
      p.w = Math.max(p.w, node.minW);
    }
    if (node.minH) {
      p.h = Math.max(p.h, node.minH);
    }
    return node.w !== p.w || node.h !== p.h;
  }
  /** return true if the passed in node was actually moved (checks for no-op and locked) */
  moveNode(node, o) {
    var _a2, _b2;
    if (!node || /*node.locked ||*/
    !o)
      return false;
    let wasUndefinedPack;
    if (o.pack === void 0 && !this.batchMode) {
      wasUndefinedPack = o.pack = true;
    }
    if (typeof o.x !== "number") {
      o.x = node.x;
    }
    if (typeof o.y !== "number") {
      o.y = node.y;
    }
    if (typeof o.w !== "number") {
      o.w = node.w;
    }
    if (typeof o.h !== "number") {
      o.h = node.h;
    }
    let resizing = node.w !== o.w || node.h !== o.h;
    let nn = Utils.copyPos({}, node, true);
    Utils.copyPos(nn, o);
    this.nodeBoundFix(nn, resizing);
    Utils.copyPos(o, nn);
    if (!o.forceCollide && Utils.samePos(node, o))
      return false;
    let prevPos = Utils.copyPos({}, node);
    let collides = this.collideAll(node, nn, o.skip);
    let needToMove = true;
    if (collides.length) {
      let activeDrag = node._moving && !o.nested;
      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];
      if (activeDrag && collide && ((_b2 = (_a2 = node.grid) == null ? void 0 : _a2.opts) == null ? void 0 : _b2.subGridDynamic) && !node.grid._isTemp) {
        let over = Utils.areaIntercept(o.rect, collide._rect);
        let a1 = Utils.area(o.rect);
        let a22 = Utils.area(collide._rect);
        let perc = over / (a1 < a22 ? a1 : a22);
        if (perc > 0.8) {
          collide.grid.makeSubGrid(collide.el, void 0, node);
          collide = void 0;
        }
      }
      if (collide) {
        needToMove = !this._fixCollisions(node, nn, collide, o);
      } else {
        needToMove = false;
        if (wasUndefinedPack)
          delete o.pack;
      }
    }
    if (needToMove) {
      node._dirty = true;
      Utils.copyPos(node, nn);
    }
    if (o.pack) {
      this._packNodes()._notify();
    }
    return !Utils.samePos(node, prevPos);
  }
  getRow() {
    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);
  }
  beginUpdate(node) {
    if (!node._updating) {
      node._updating = true;
      delete node._skipDown;
      if (!this.batchMode)
        this.saveInitial();
    }
    return this;
  }
  endUpdate() {
    let n = this.nodes.find((n2) => n2._updating);
    if (n) {
      delete n._updating;
      delete n._skipDown;
    }
    return this;
  }
  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,
   * returning a list of widgets for serialization */
  save(saveElement = true, saveCB) {
    var _a2;
    let len = (_a2 = this._layouts) == null ? void 0 : _a2.length;
    let layout = len && this.column !== len - 1 ? this._layouts[len - 1] : null;
    let list = [];
    this.sortNodes();
    this.nodes.forEach((n) => {
      let wl = layout == null ? void 0 : layout.find((l) => l._id === n._id);
      let w2 = { ...n, ...wl || {} };
      Utils.removeInternalForSave(w2, !saveElement);
      if (saveCB)
        saveCB(n, w2);
      list.push(w2);
    });
    return list;
  }
  /** @internal called whenever a node is added or moved - updates the cached layouts */
  layoutsNodesChange(nodes) {
    if (!this._layouts || this._inColumnResize)
      return this;
    this._layouts.forEach((layout, column) => {
      if (!layout || column === this.column)
        return this;
      if (column < this.column) {
        this._layouts[column] = void 0;
      } else {
        let ratio = column / this.column;
        nodes.forEach((node) => {
          if (!node._orig)
            return;
          let n = layout.find((l) => l._id === node._id);
          if (!n)
            return;
          if (n.y >= 0 && node.y !== node._orig.y) {
            n.y += node.y - node._orig.y;
          }
          if (node.x !== node._orig.x) {
            n.x = Math.round(node.x * ratio);
          }
          if (node.w !== node._orig.w) {
            n.w = Math.round(node.w * ratio);
          }
        });
      }
    });
    return this;
  }
  /**
   * @internal Called to scale the widget width & position up/down based on the column change.
   * Note we store previous layouts (especially original ones) to make it possible to go
   * from say 12 -> 1 -> 12 and get back to where we were.
   *
   * @param prevColumn previous number of columns
   * @param column  new column number
   * @param layout specify the type of re-layout that will happen (position, size, etc...).
   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column
   */
  columnChanged(prevColumn, column, layout = "moveScale") {
    var _a2;
    if (!this.nodes.length || !column || prevColumn === column)
      return this;
    if (layout === "none")
      return this;
    const doCompact = layout === "compact" || layout === "list";
    if (doCompact) {
      this.sortNodes(1);
    }
    if (column < prevColumn)
      this.cacheLayout(this.nodes, prevColumn);
    this.batchUpdate();
    let newNodes = [];
    let nodes = doCompact ? this.nodes : Utils.sort(this.nodes, -1);
    if (column > prevColumn && this._layouts) {
      const cacheNodes = this._layouts[column] || [];
      let lastIndex = this._layouts.length - 1;
      if (!cacheNodes.length && prevColumn !== lastIndex && ((_a2 = this._layouts[lastIndex]) == null ? void 0 : _a2.length)) {
        prevColumn = lastIndex;
        this._layouts[lastIndex].forEach((cacheNode) => {
          let n = nodes.find((n2) => n2._id === cacheNode._id);
          if (n) {
            if (!doCompact && !cacheNode.autoPosition) {
              n.x = cacheNode.x ?? n.x;
              n.y = cacheNode.y ?? n.y;
            }
            n.w = cacheNode.w ?? n.w;
            if (cacheNode.x == void 0 || cacheNode.y === void 0)
              n.autoPosition = true;
          }
        });
      }
      cacheNodes.forEach((cacheNode) => {
        let j = nodes.findIndex((n) => n._id === cacheNode._id);
        if (j !== -1) {
          const n = nodes[j];
          if (doCompact) {
            n.w = cacheNode.w;
            return;
          }
          if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {
            this.findEmptyPosition(cacheNode, newNodes);
          }
          if (!cacheNode.autoPosition) {
            n.x = cacheNode.x ?? n.x;
            n.y = cacheNode.y ?? n.y;
            n.w = cacheNode.w ?? n.w;
            newNodes.push(n);
          }
          nodes.splice(j, 1);
        }
      });
    }
    if (doCompact) {
      this.compact(layout, false);
    } else {
      if (nodes.length) {
        if (typeof layout === "function") {
          layout(column, prevColumn, newNodes, nodes);
        } else {
          let ratio = doCompact ? 1 : column / prevColumn;
          let move = layout === "move" || layout === "moveScale";
          let scale = layout === "scale" || layout === "moveScale";
          nodes.forEach((node) => {
            node.x = column === 1 ? 0 : move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1);
            node.w = column === 1 || prevColumn === 1 ? 1 : scale ? Math.round(node.w * ratio) || 1 : Math.min(node.w, column);
            newNodes.push(node);
          });
          nodes = [];
        }
      }
      newNodes = Utils.sort(newNodes, -1);
      this._inColumnResize = true;
      this.nodes = [];
      newNodes.forEach((node) => {
        this.addNode(node, false);
        delete node._orig;
      });
    }
    this.nodes.forEach((n) => delete n._orig);
    this.batchUpdate(false, !doCompact);
    delete this._inColumnResize;
    return this;
  }
  /**
   * call to cache the given layout internally to the given location so we can restore back when column changes size
   * @param nodes list of nodes
   * @param column corresponding column index to save it under
   * @param clear if true, will force other caches to be removed (default false)
   */
  cacheLayout(nodes, column, clear = false) {
    let copy = [];
    nodes.forEach((n, i2) => {
      if (n._id === void 0) {
        const existing = n.id ? this.nodes.find((n2) => n2.id === n.id) : void 0;
        n._id = (existing == null ? void 0 : existing._id) ?? GridStackEngine._idSeq++;
      }
      copy[i2] = { x: n.x, y: n.y, w: n.w, _id: n._id };
    });
    this._layouts = clear ? [] : this._layouts || [];
    this._layouts[column] = copy;
    return this;
  }
  /**
   * call to cache the given node layout internally to the given location so we can restore back when column changes size
   * @param node single node to cache
   * @param column corresponding column index to save it under
   */
  cacheOneLayout(n, column) {
    n._id = n._id ?? GridStackEngine._idSeq++;
    let l = { x: n.x, y: n.y, w: n.w, _id: n._id };
    if (n.autoPosition || n.x === void 0) {
      delete l.x;
      delete l.y;
      if (n.autoPosition)
        l.autoPosition = true;
    }
    this._layouts = this._layouts || [];
    this._layouts[column] = this._layouts[column] || [];
    let index2 = this.findCacheLayout(n, column);
    if (index2 === -1)
      this._layouts[column].push(l);
    else
      this._layouts[column][index2] = l;
    return this;
  }
  findCacheLayout(n, column) {
    var _a2, _b2;
    return ((_b2 = (_a2 = this._layouts) == null ? void 0 : _a2[column]) == null ? void 0 : _b2.findIndex((l) => l._id === n._id)) ?? -1;
  }
  removeNodeFromLayoutCache(n) {
    if (!this._layouts) {
      return;
    }
    for (let i2 = 0; i2 < this._layouts.length; i2++) {
      let index2 = this.findCacheLayout(n, i2);
      if (index2 !== -1) {
        this._layouts[i2].splice(index2, 1);
      }
    }
  }
  /** called to remove all internal values but the _id */
  cleanupNode(node) {
    for (let prop in node) {
      if (prop[0] === "_" && prop !== "_id")
        delete node[prop];
    }
    return this;
  }
}
GridStackEngine._idSeq = 0;
const gridDefaults = {
  alwaysShowResizeHandle: "mobile",
  animate: true,
  auto: true,
  cellHeight: "auto",
  cellHeightThrottle: 100,
  cellHeightUnit: "px",
  column: 12,
  draggable: { handle: ".grid-stack-item-content", appendTo: "body", scroll: true },
  handle: ".grid-stack-item-content",
  itemClass: "grid-stack-item",
  margin: 10,
  marginUnit: "px",
  maxRow: 0,
  minRow: 0,
  placeholderClass: "grid-stack-placeholder",
  placeholderText: "",
  removableOptions: { accept: "grid-stack-item", decline: "grid-stack-non-removable" },
  resizable: { handles: "se" },
  rtl: "auto"
  // **** same as not being set ****
  // disableDrag: false,
  // disableResize: false,
  // float: false,
  // handleClass: null,
  // removable: false,
  // staticGrid: false,
  // styleInHead: false,
  //removable
};
const dragInDefaultOptions = {
  handle: ".grid-stack-item-content",
  appendTo: "body"
  // revert: 'invalid',
  // scroll: false,
};
class DDManager {
}
const isTouch = typeof window !== "undefined" && typeof document !== "undefined" && ("ontouchstart" in document || "ontouchstart" in window || window.DocumentTouch && document instanceof window.DocumentTouch || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);
class DDTouch {
}
function simulateMouseEvent(e2, simulatedType) {
  if (e2.touches.length > 1)
    return;
  if (e2.cancelable)
    e2.preventDefault();
  const touch = e2.changedTouches[0], simulatedEvent = document.createEvent("MouseEvents");
  simulatedEvent.initMouseEvent(
    simulatedType,
    // type
    true,
    // bubbles
    true,
    // cancelable
    window,
    // view
    1,
    // detail
    touch.screenX,
    // screenX
    touch.screenY,
    // screenY
    touch.clientX,
    // clientX
    touch.clientY,
    // clientY
    false,
    // ctrlKey
    false,
    // altKey
    false,
    // shiftKey
    false,
    // metaKey
    0,
    // button
    null
    // relatedTarget
  );
  e2.target.dispatchEvent(simulatedEvent);
}
function simulatePointerMouseEvent(e2, simulatedType) {
  if (e2.cancelable)
    e2.preventDefault();
  const simulatedEvent = document.createEvent("MouseEvents");
  simulatedEvent.initMouseEvent(
    simulatedType,
    // type
    true,
    // bubbles
    true,
    // cancelable
    window,
    // view
    1,
    // detail
    e2.screenX,
    // screenX
    e2.screenY,
    // screenY
    e2.clientX,
    // clientX
    e2.clientY,
    // clientY
    false,
    // ctrlKey
    false,
    // altKey
    false,
    // shiftKey
    false,
    // metaKey
    0,
    // button
    null
    // relatedTarget
  );
  e2.target.dispatchEvent(simulatedEvent);
}
function touchstart(e2) {
  if (DDTouch.touchHandled)
    return;
  DDTouch.touchHandled = true;
  simulateMouseEvent(e2, "mousedown");
}
function touchmove(e2) {
  if (!DDTouch.touchHandled)
    return;
  simulateMouseEvent(e2, "mousemove");
}
function touchend(e2) {
  if (!DDTouch.touchHandled)
    return;
  if (DDTouch.pointerLeaveTimeout) {
    window.clearTimeout(DDTouch.pointerLeaveTimeout);
    delete DDTouch.pointerLeaveTimeout;
  }
  const wasDragging = !!DDManager.dragElement;
  simulateMouseEvent(e2, "mouseup");
  if (!wasDragging) {
    simulateMouseEvent(e2, "click");
  }
  DDTouch.touchHandled = false;
}
function pointerdown(e2) {
  if (e2.pointerType === "mouse")
    return;
  e2.target.releasePointerCapture(e2.pointerId);
}
function pointerenter(e2) {
  if (!DDManager.dragElement) {
    return;
  }
  if (e2.pointerType === "mouse")
    return;
  simulatePointerMouseEvent(e2, "mouseenter");
}
function pointerleave(e2) {
  if (!DDManager.dragElement) {
    return;
  }
  if (e2.pointerType === "mouse")
    return;
  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {
    delete DDTouch.pointerLeaveTimeout;
    simulatePointerMouseEvent(e2, "mouseleave");
  }, 10);
}
class DDResizableHandle {
  constructor(host, dir, option) {
    this.host = host;
    this.dir = dir;
    this.option = option;
    this.moving = false;
    this._mouseDown = this._mouseDown.bind(this);
    this._mouseMove = this._mouseMove.bind(this);
    this._mouseUp = this._mouseUp.bind(this);
    this._keyEvent = this._keyEvent.bind(this);
    this._init();
  }
  /** @internal */
  _init() {
    const el = this.el = document.createElement("div");
    el.classList.add("ui-resizable-handle");
    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);
    el.style.zIndex = "100";
    el.style.userSelect = "none";
    this.host.appendChild(this.el);
    this.el.addEventListener("mousedown", this._mouseDown);
    if (isTouch) {
      this.el.addEventListener("touchstart", touchstart);
      this.el.addEventListener("pointerdown", pointerdown);
    }
    return this;
  }
  /** call this when resize handle needs to be removed and cleaned up */
  destroy() {
    if (this.moving)
      this._mouseUp(this.mouseDownEvent);
    this.el.removeEventListener("mousedown", this._mouseDown);
    if (isTouch) {
      this.el.removeEventListener("touchstart", touchstart);
      this.el.removeEventListener("pointerdown", pointerdown);
    }
    this.host.removeChild(this.el);
    delete this.el;
    delete this.host;
    return this;
  }
  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */
  _mouseDown(e2) {
    this.mouseDownEvent = e2;
    document.addEventListener("mousemove", this._mouseMove, { capture: true, passive: true });
    document.addEventListener("mouseup", this._mouseUp, true);
    if (isTouch) {
      this.el.addEventListener("touchmove", touchmove);
      this.el.addEventListener("touchend", touchend);
    }
    e2.stopPropagation();
    e2.preventDefault();
  }
  /** @internal */
  _mouseMove(e2) {
    let s3 = this.mouseDownEvent;
    if (this.moving) {
      this._triggerEvent("move", e2);
    } else if (Math.abs(e2.x - s3.x) + Math.abs(e2.y - s3.y) > 2) {
      this.moving = true;
      this._triggerEvent("start", this.mouseDownEvent);
      this._triggerEvent("move", e2);
      document.addEventListener("keydown", this._keyEvent);
    }
    e2.stopPropagation();
  }
  /** @internal */
  _mouseUp(e2) {
    if (this.moving) {
      this._triggerEvent("stop", e2);
      document.removeEventListener("keydown", this._keyEvent);
    }
    document.removeEventListener("mousemove", this._mouseMove, true);
    document.removeEventListener("mouseup", this._mouseUp, true);
    if (isTouch) {
      this.el.removeEventListener("touchmove", touchmove);
      this.el.removeEventListener("touchend", touchend);
    }
    delete this.moving;
    delete this.mouseDownEvent;
    e2.stopPropagation();
    e2.preventDefault();
  }
  /** @internal call when keys are being pressed - use Esc to cancel */
  _keyEvent(e2) {
    var _a2, _b2;
    if (e2.key === "Escape") {
      (_b2 = (_a2 = this.host.gridstackNode) == null ? void 0 : _a2.grid) == null ? void 0 : _b2.engine.restoreInitial();
      this._mouseUp(this.mouseDownEvent);
    }
  }
  /** @internal */
  _triggerEvent(name, event) {
    if (this.option[name])
      this.option[name](event);
    return this;
  }
}
DDResizableHandle.prefix = "ui-resizable-";
class DDBaseImplement {
  constructor() {
    this._eventRegister = {};
  }
  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */
  get disabled() {
    return this._disabled;
  }
  on(event, callback2) {
    this._eventRegister[event] = callback2;
  }
  off(event) {
    delete this._eventRegister[event];
  }
  enable() {
    this._disabled = false;
  }
  disable() {
    this._disabled = true;
  }
  destroy() {
    delete this._eventRegister;
  }
  triggerEvent(eventName, event) {
    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])
      return this._eventRegister[eventName](event);
  }
}
class DDResizable extends DDBaseImplement {
  // have to be public else complains for HTMLElementExtendOpt ?
  constructor(el, option = {}) {
    super();
    this.el = el;
    this.option = option;
    this.rectScale = { x: 1, y: 1 };
    this._ui = () => {
      const containmentEl = this.el.parentElement;
      const containmentRect = containmentEl.getBoundingClientRect();
      const newRect = {
        width: this.originalRect.width,
        height: this.originalRect.height + this.scrolled,
        left: this.originalRect.left,
        top: this.originalRect.top - this.scrolled
      };
      const rect = this.temporalRect || newRect;
      return {
        position: {
          left: (rect.left - containmentRect.left) * this.rectScale.x,
          top: (rect.top - containmentRect.top) * this.rectScale.y
        },
        size: {
          width: rect.width * this.rectScale.x,
          height: rect.height * this.rectScale.y
        }
        /* Gridstack ONLY needs position set above... keep around in case.
        element: [this.el], // The object representing the element to be resized
        helper: [], // TODO: not support yet - The object representing the helper that's being resized
        originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped
        originalPosition: { // The position represented as { left, top } before the resizable is resized
          left: this.originalRect.left - containmentRect.left,
          top: this.originalRect.top - containmentRect.top
        },
        originalSize: { // The size represented as { width, height } before the resizable is resized
          width: this.originalRect.width,
          height: this.originalRect.height
        }
        */
      };
    };
    this._mouseOver = this._mouseOver.bind(this);
    this._mouseOut = this._mouseOut.bind(this);
    this.enable();
    this._setupAutoHide(this.option.autoHide);
    this._setupHandlers();
  }
  on(event, callback2) {
    super.on(event, callback2);
  }
  off(event) {
    super.off(event);
  }
  enable() {
    super.enable();
    this.el.classList.remove("ui-resizable-disabled");
    this._setupAutoHide(this.option.autoHide);
  }
  disable() {
    super.disable();
    this.el.classList.add("ui-resizable-disabled");
    this._setupAutoHide(false);
  }
  destroy() {
    this._removeHandlers();
    this._setupAutoHide(false);
    delete this.el;
    super.destroy();
  }
  updateOption(opts) {
    let updateHandles = opts.handles && opts.handles !== this.option.handles;
    let updateAutoHide = opts.autoHide && opts.autoHide !== this.option.autoHide;
    Object.keys(opts).forEach((key) => this.option[key] = opts[key]);
    if (updateHandles) {
      this._removeHandlers();
      this._setupHandlers();
    }
    if (updateAutoHide) {
      this._setupAutoHide(this.option.autoHide);
    }
    return this;
  }
  /** @internal turns auto hide on/off */
  _setupAutoHide(auto) {
    if (auto) {
      this.el.classList.add("ui-resizable-autohide");
      this.el.addEventListener("mouseover", this._mouseOver);
      this.el.addEventListener("mouseout", this._mouseOut);
    } else {
      this.el.classList.remove("ui-resizable-autohide");
      this.el.removeEventListener("mouseover", this._mouseOver);
      this.el.removeEventListener("mouseout", this._mouseOut);
      if (DDManager.overResizeElement === this) {
        delete DDManager.overResizeElement;
      }
    }
    return this;
  }
  /** @internal */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _mouseOver(e2) {
    if (DDManager.overResizeElement || DDManager.dragElement)
      return;
    DDManager.overResizeElement = this;
    this.el.classList.remove("ui-resizable-autohide");
  }
  /** @internal */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _mouseOut(e2) {
    if (DDManager.overResizeElement !== this)
      return;
    delete DDManager.overResizeElement;
    this.el.classList.add("ui-resizable-autohide");
  }
  /** @internal */
  _setupHandlers() {
    this.handlers = this.option.handles.split(",").map((dir) => dir.trim()).map((dir) => new DDResizableHandle(this.el, dir, {
      start: (event) => {
        this._resizeStart(event);
      },
      stop: (event) => {
        this._resizeStop(event);
      },
      move: (event) => {
        this._resizing(event, dir);
      }
    }));
    return this;
  }
  /** @internal */
  _resizeStart(event) {
    this.sizeToContent = Utils.shouldSizeToContent(this.el.gridstackNode, true);
    this.originalRect = this.el.getBoundingClientRect();
    this.scrollEl = Utils.getScrollElement(this.el);
    this.scrollY = this.scrollEl.scrollTop;
    this.scrolled = 0;
    this.startEvent = event;
    this._setupHelper();
    this._applyChange();
    const ev = Utils.initEvent(event, { type: "resizestart", target: this.el });
    if (this.option.start) {
      this.option.start(ev, this._ui());
    }
    this.el.classList.add("ui-resizable-resizing");
    this.triggerEvent("resizestart", ev);
    return this;
  }
  /** @internal */
  _resizing(event, dir) {
    this.scrolled = this.scrollEl.scrollTop - this.scrollY;
    this.temporalRect = this._getChange(event, dir);
    this._applyChange();
    const ev = Utils.initEvent(event, { type: "resize", target: this.el });
    if (this.option.resize) {
      this.option.resize(ev, this._ui());
    }
    this.triggerEvent("resize", ev);
    return this;
  }
  /** @internal */
  _resizeStop(event) {
    const ev = Utils.initEvent(event, { type: "resizestop", target: this.el });
    if (this.option.stop) {
      this.option.stop(ev);
    }
    this.el.classList.remove("ui-resizable-resizing");
    this.triggerEvent("resizestop", ev);
    this._cleanHelper();
    delete this.startEvent;
    delete this.originalRect;
    delete this.temporalRect;
    delete this.scrollY;
    delete this.scrolled;
    return this;
  }
  /** @internal */
  _setupHelper() {
    this.elOriginStyleVal = DDResizable._originStyleProp.map((prop) => this.el.style[prop]);
    this.parentOriginStylePosition = this.el.parentElement.style.position;
    const parent = this.el.parentElement;
    const dragTransform = Utils.getValuesFromTransformedElement(parent);
    this.rectScale = {
      x: dragTransform.xScale,
      y: dragTransform.yScale
    };
    if (getComputedStyle(this.el.parentElement).position.match(/static/)) {
      this.el.parentElement.style.position = "relative";
    }
    this.el.style.position = "absolute";
    this.el.style.opacity = "0.8";
    return this;
  }
  /** @internal */
  _cleanHelper() {
    DDResizable._originStyleProp.forEach((prop, i2) => {
      this.el.style[prop] = this.elOriginStyleVal[i2] || null;
    });
    this.el.parentElement.style.position = this.parentOriginStylePosition || null;
    return this;
  }
  /** @internal */
  _getChange(event, dir) {
    const oEvent = this.startEvent;
    const newRect = {
      width: this.originalRect.width,
      height: this.originalRect.height + this.scrolled,
      left: this.originalRect.left,
      top: this.originalRect.top - this.scrolled
    };
    const offsetX = event.clientX - oEvent.clientX;
    const offsetY = this.sizeToContent ? 0 : event.clientY - oEvent.clientY;
    let moveLeft;
    let moveUp;
    if (dir.indexOf("e") > -1) {
      newRect.width += offsetX;
    } else if (dir.indexOf("w") > -1) {
      newRect.width -= offsetX;
      newRect.left += offsetX;
      moveLeft = true;
    }
    if (dir.indexOf("s") > -1) {
      newRect.height += offsetY;
    } else if (dir.indexOf("n") > -1) {
      newRect.height -= offsetY;
      newRect.top += offsetY;
      moveUp = true;
    }
    const constrain = this._constrainSize(newRect.width, newRect.height, moveLeft, moveUp);
    if (Math.round(newRect.width) !== Math.round(constrain.width)) {
      if (dir.indexOf("w") > -1) {
        newRect.left += newRect.width - constrain.width;
      }
      newRect.width = constrain.width;
    }
    if (Math.round(newRect.height) !== Math.round(constrain.height)) {
      if (dir.indexOf("n") > -1) {
        newRect.top += newRect.height - constrain.height;
      }
      newRect.height = constrain.height;
    }
    return newRect;
  }
  /** @internal constrain the size to the set min/max values */
  _constrainSize(oWidth, oHeight, moveLeft, moveUp) {
    const o = this.option;
    const maxWidth = (moveLeft ? o.maxWidthMoveLeft : o.maxWidth) || Number.MAX_SAFE_INTEGER;
    const minWidth = o.minWidth / this.rectScale.x || oWidth;
    const maxHeight = (moveUp ? o.maxHeightMoveUp : o.maxHeight) || Number.MAX_SAFE_INTEGER;
    const minHeight = o.minHeight / this.rectScale.y || oHeight;
    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));
    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));
    return { width, height };
  }
  /** @internal */
  _applyChange() {
    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };
    if (this.el.style.position === "absolute") {
      const containmentEl = this.el.parentElement;
      const { left, top } = containmentEl.getBoundingClientRect();
      containmentRect = { left, top, width: 0, height: 0 };
    }
    if (!this.temporalRect)
      return this;
    Object.keys(this.temporalRect).forEach((key) => {
      const value = this.temporalRect[key];
      const scaleReciprocal = key === "width" || key === "left" ? this.rectScale.x : key === "height" || key === "top" ? this.rectScale.y : 1;
      this.el.style[key] = (value - containmentRect[key]) * scaleReciprocal + "px";
    });
    return this;
  }
  /** @internal */
  _removeHandlers() {
    this.handlers.forEach((handle) => handle.destroy());
    delete this.handlers;
    return this;
  }
}
DDResizable._originStyleProp = ["width", "height", "position", "left", "top", "opacity", "zIndex"];
const skipMouseDown = 'input,textarea,button,select,option,[contenteditable="true"],.ui-resizable-handle';
class DDDraggable extends DDBaseImplement {
  constructor(el, option = {}) {
    super();
    this.el = el;
    this.option = option;
    this.dragTransform = {
      xScale: 1,
      yScale: 1,
      xOffset: 0,
      yOffset: 0
    };
    const handleName = option.handle.substring(1);
    const n = el.gridstackNode;
    this.dragEls = el.classList.contains(handleName) ? [el] : (n == null ? void 0 : n.subGrid) ? [el.querySelector(option.handle) || el] : Array.from(el.querySelectorAll(option.handle));
    if (this.dragEls.length === 0) {
      this.dragEls = [el];
    }
    this._mouseDown = this._mouseDown.bind(this);
    this._mouseMove = this._mouseMove.bind(this);
    this._mouseUp = this._mouseUp.bind(this);
    this._keyEvent = this._keyEvent.bind(this);
    this.enable();
  }
  on(event, callback2) {
    super.on(event, callback2);
  }
  off(event) {
    super.off(event);
  }
  enable() {
    if (this.disabled === false)
      return;
    super.enable();
    this.dragEls.forEach((dragEl) => {
      dragEl.addEventListener("mousedown", this._mouseDown);
      if (isTouch) {
        dragEl.addEventListener("touchstart", touchstart);
        dragEl.addEventListener("pointerdown", pointerdown);
      }
    });
    this.el.classList.remove("ui-draggable-disabled");
  }
  disable(forDestroy = false) {
    if (this.disabled === true)
      return;
    super.disable();
    this.dragEls.forEach((dragEl) => {
      dragEl.removeEventListener("mousedown", this._mouseDown);
      if (isTouch) {
        dragEl.removeEventListener("touchstart", touchstart);
        dragEl.removeEventListener("pointerdown", pointerdown);
      }
    });
    if (!forDestroy)
      this.el.classList.add("ui-draggable-disabled");
  }
  destroy() {
    if (this.dragTimeout)
      window.clearTimeout(this.dragTimeout);
    delete this.dragTimeout;
    if (this.mouseDownEvent)
      this._mouseUp(this.mouseDownEvent);
    this.disable(true);
    delete this.el;
    delete this.helper;
    delete this.option;
    super.destroy();
  }
  updateOption(opts) {
    Object.keys(opts).forEach((key) => this.option[key] = opts[key]);
    return this;
  }
  /** @internal call when mouse goes down before a dragstart happens */
  _mouseDown(e2) {
    if (DDManager.mouseHandled)
      return;
    if (e2.button !== 0)
      return true;
    if (!this.dragEls.find((el) => el === e2.target) && e2.target.closest(skipMouseDown))
      return true;
    if (this.option.cancel) {
      if (e2.target.closest(this.option.cancel))
        return true;
    }
    this.mouseDownEvent = e2;
    delete this.dragging;
    delete DDManager.dragElement;
    delete DDManager.dropElement;
    document.addEventListener("mousemove", this._mouseMove, { capture: true, passive: true });
    document.addEventListener("mouseup", this._mouseUp, true);
    if (isTouch) {
      e2.target.addEventListener("touchmove", touchmove);
      e2.target.addEventListener("touchend", touchend);
    }
    e2.preventDefault();
    if (document.activeElement)
      document.activeElement.blur();
    DDManager.mouseHandled = true;
    return true;
  }
  /** @internal method to call actual drag event */
  _callDrag(e2) {
    if (!this.dragging)
      return;
    const ev = Utils.initEvent(e2, { target: this.el, type: "drag" });
    if (this.option.drag) {
      this.option.drag(ev, this.ui());
    }
    this.triggerEvent("drag", ev);
  }
  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */
  _mouseMove(e2) {
    var _a2;
    let s3 = this.mouseDownEvent;
    this.lastDrag = e2;
    if (this.dragging) {
      this._dragFollow(e2);
      if (DDManager.pauseDrag) {
        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag : 100;
        if (this.dragTimeout)
          window.clearTimeout(this.dragTimeout);
        this.dragTimeout = window.setTimeout(() => this._callDrag(e2), pause);
      } else {
        this._callDrag(e2);
      }
    } else if (Math.abs(e2.x - s3.x) + Math.abs(e2.y - s3.y) > 3) {
      this.dragging = true;
      DDManager.dragElement = this;
      let grid = (_a2 = this.el.gridstackNode) == null ? void 0 : _a2.grid;
      if (grid) {
        DDManager.dropElement = grid.el.ddElement.ddDroppable;
      } else {
        delete DDManager.dropElement;
      }
      this.helper = this._createHelper(e2);
      this._setupHelperContainmentStyle();
      this.dragTransform = Utils.getValuesFromTransformedElement(this.helperContainment);
      this.dragOffset = this._getDragOffset(e2, this.el, this.helperContainment);
      this._setupHelperStyle(e2);
      const ev = Utils.initEvent(e2, { target: this.el, type: "dragstart" });
      if (this.option.start) {
        this.option.start(ev, this.ui());
      }
      this.triggerEvent("dragstart", ev);
      document.addEventListener("keydown", this._keyEvent);
    }
    return true;
  }
  /** @internal call when the mouse gets released to drop the item at current location */
  _mouseUp(e2) {
    var _a2, _b2;
    document.removeEventListener("mousemove", this._mouseMove, true);
    document.removeEventListener("mouseup", this._mouseUp, true);
    if (isTouch) {
      e2.target.removeEventListener("touchmove", touchmove, true);
      e2.target.removeEventListener("touchend", touchend, true);
    }
    if (this.dragging) {
      delete this.dragging;
      (_a2 = this.el.gridstackNode) == null ? true : delete _a2._origRotate;
      document.removeEventListener("keydown", this._keyEvent);
      if (((_b2 = DDManager.dropElement) == null ? void 0 : _b2.el) === this.el.parentElement) {
        delete DDManager.dropElement;
      }
      this.helperContainment.style.position = this.parentOriginStylePosition || null;
      if (this.helper === this.el) {
        this._removeHelperStyle();
      } else {
        this.helper.remove();
      }
      const ev = Utils.initEvent(e2, { target: this.el, type: "dragstop" });
      if (this.option.stop) {
        this.option.stop(ev);
      }
      this.triggerEvent("dragstop", ev);
      if (DDManager.dropElement) {
        DDManager.dropElement.drop(e2);
      }
    }
    delete this.helper;
    delete this.mouseDownEvent;
    delete DDManager.dragElement;
    delete DDManager.dropElement;
    delete DDManager.mouseHandled;
    e2.preventDefault();
  }
  /** @internal call when keys are being pressed - use Esc to cancel, R to rotate */
  _keyEvent(e2) {
    const n = this.el.gridstackNode;
    if (!(n == null ? void 0 : n.grid))
      return;
    const grid = n.grid;
    if (e2.key === "Escape") {
      if (n._origRotate) {
        n._orig = n._origRotate;
        delete n._origRotate;
      }
      grid.engine.restoreInitial();
      this._mouseUp(this.mouseDownEvent);
    } else if (e2.key === "r" || e2.key === "R") {
      if (!Utils.canBeRotated(n))
        return;
      n._origRotate = n._origRotate || { ...n._orig };
      delete n._moving;
      grid.setAnimation(false).rotate(n.el, { top: -this.dragOffset.offsetTop, left: -this.dragOffset.offsetLeft }).setAnimation();
      n._moving = true;
      this.dragOffset = this._getDragOffset(this.lastDrag, n.el, this.helperContainment);
      this.helper.style.width = this.dragOffset.width + "px";
      this.helper.style.height = this.dragOffset.height + "px";
      Utils.swap(n._orig, "w", "h");
      delete n._rect;
      this._mouseMove(this.lastDrag);
    }
  }
  /** @internal create a clone copy (or user defined method) of the original drag item if set */
  _createHelper(event) {
    let helper = this.el;
    if (typeof this.option.helper === "function") {
      helper = this.option.helper(event);
    } else if (this.option.helper === "clone") {
      helper = Utils.cloneNode(this.el);
    }
    if (!document.body.contains(helper)) {
      Utils.appendTo(helper, this.option.appendTo === "parent" ? this.el.parentElement : this.option.appendTo);
    }
    if (helper === this.el) {
      this.dragElementOriginStyle = DDDraggable.originStyleProp.map((prop) => this.el.style[prop]);
    }
    return helper;
  }
  /** @internal set the fix position of the dragged item */
  _setupHelperStyle(e2) {
    this.helper.classList.add("ui-draggable-dragging");
    const style = this.helper.style;
    style.pointerEvents = "none";
    style.width = this.dragOffset.width + "px";
    style.height = this.dragOffset.height + "px";
    style.willChange = "left, top";
    style.position = "fixed";
    this._dragFollow(e2);
    style.transition = "none";
    setTimeout(() => {
      if (this.helper) {
        style.transition = null;
      }
    }, 0);
    return this;
  }
  /** @internal restore back the original style before dragging */
  _removeHelperStyle() {
    var _a2;
    this.helper.classList.remove("ui-draggable-dragging");
    let node = (_a2 = this.helper) == null ? void 0 : _a2.gridstackNode;
    if (!(node == null ? void 0 : node._isAboutToRemove) && this.dragElementOriginStyle) {
      let helper = this.helper;
      let transition = this.dragElementOriginStyle["transition"] || null;
      helper.style.transition = this.dragElementOriginStyle["transition"] = "none";
      DDDraggable.originStyleProp.forEach((prop) => helper.style[prop] = this.dragElementOriginStyle[prop] || null);
      setTimeout(() => helper.style.transition = transition, 50);
    }
    delete this.dragElementOriginStyle;
    return this;
  }
  /** @internal updates the top/left position to follow the mouse */
  _dragFollow(e2) {
    let containmentRect = { left: 0, top: 0 };
    const style = this.helper.style;
    const offset = this.dragOffset;
    style.left = (e2.clientX + offset.offsetLeft - containmentRect.left) * this.dragTransform.xScale + "px";
    style.top = (e2.clientY + offset.offsetTop - containmentRect.top) * this.dragTransform.yScale + "px";
  }
  /** @internal */
  _setupHelperContainmentStyle() {
    this.helperContainment = this.helper.parentElement;
    if (this.helper.style.position !== "fixed") {
      this.parentOriginStylePosition = this.helperContainment.style.position;
      if (getComputedStyle(this.helperContainment).position.match(/static/)) {
        this.helperContainment.style.position = "relative";
      }
    }
    return this;
  }
  /** @internal */
  _getDragOffset(event, el, parent) {
    let xformOffsetX = 0;
    let xformOffsetY = 0;
    if (parent) {
      xformOffsetX = this.dragTransform.xOffset;
      xformOffsetY = this.dragTransform.yOffset;
    }
    const targetOffset = el.getBoundingClientRect();
    return {
      left: targetOffset.left,
      top: targetOffset.top,
      offsetLeft: -event.clientX + targetOffset.left - xformOffsetX,
      offsetTop: -event.clientY + targetOffset.top - xformOffsetY,
      width: targetOffset.width * this.dragTransform.xScale,
      height: targetOffset.height * this.dragTransform.yScale
    };
  }
  /** @internal TODO: set to public as called by DDDroppable! */
  ui() {
    const containmentEl = this.el.parentElement;
    const containmentRect = containmentEl.getBoundingClientRect();
    const offset = this.helper.getBoundingClientRect();
    return {
      position: {
        top: (offset.top - containmentRect.top) * this.dragTransform.yScale,
        left: (offset.left - containmentRect.left) * this.dragTransform.xScale
      }
      /* not used by GridStack for now...
      helper: [this.helper], //The object arr representing the helper that's being dragged.
      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.
      */
    };
  }
}
DDDraggable.originStyleProp = ["transition", "pointerEvents", "position", "left", "top", "minWidth", "willChange"];
class DDDroppable extends DDBaseImplement {
  constructor(el, option = {}) {
    super();
    this.el = el;
    this.option = option;
    this._mouseEnter = this._mouseEnter.bind(this);
    this._mouseLeave = this._mouseLeave.bind(this);
    this.enable();
    this._setupAccept();
  }
  on(event, callback2) {
    super.on(event, callback2);
  }
  off(event) {
    super.off(event);
  }
  enable() {
    if (this.disabled === false)
      return;
    super.enable();
    this.el.classList.add("ui-droppable");
    this.el.classList.remove("ui-droppable-disabled");
    this.el.addEventListener("mouseenter", this._mouseEnter);
    this.el.addEventListener("mouseleave", this._mouseLeave);
    if (isTouch) {
      this.el.addEventListener("pointerenter", pointerenter);
      this.el.addEventListener("pointerleave", pointerleave);
    }
  }
  disable(forDestroy = false) {
    if (this.disabled === true)
      return;
    super.disable();
    this.el.classList.remove("ui-droppable");
    if (!forDestroy)
      this.el.classList.add("ui-droppable-disabled");
    this.el.removeEventListener("mouseenter", this._mouseEnter);
    this.el.removeEventListener("mouseleave", this._mouseLeave);
    if (isTouch) {
      this.el.removeEventListener("pointerenter", pointerenter);
      this.el.removeEventListener("pointerleave", pointerleave);
    }
  }
  destroy() {
    this.disable(true);
    this.el.classList.remove("ui-droppable");
    this.el.classList.remove("ui-droppable-disabled");
    super.destroy();
  }
  updateOption(opts) {
    Object.keys(opts).forEach((key) => this.option[key] = opts[key]);
    this._setupAccept();
    return this;
  }
  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */
  _mouseEnter(e2) {
    if (!DDManager.dragElement)
      return;
    if (!this._canDrop(DDManager.dragElement.el))
      return;
    e2.preventDefault();
    e2.stopPropagation();
    if (DDManager.dropElement && DDManager.dropElement !== this) {
      DDManager.dropElement._mouseLeave(e2, true);
    }
    DDManager.dropElement = this;
    const ev = Utils.initEvent(e2, { target: this.el, type: "dropover" });
    if (this.option.over) {
      this.option.over(ev, this._ui(DDManager.dragElement));
    }
    this.triggerEvent("dropover", ev);
    this.el.classList.add("ui-droppable-over");
  }
  /** @internal called when the item is leaving our area, stop tracking if we had moving item */
  _mouseLeave(e2, calledByEnter = false) {
    var _a2;
    if (!DDManager.dragElement || DDManager.dropElement !== this)
      return;
    e2.preventDefault();
    e2.stopPropagation();
    const ev = Utils.initEvent(e2, { target: this.el, type: "dropout" });
    if (this.option.out) {
      this.option.out(ev, this._ui(DDManager.dragElement));
    }
    this.triggerEvent("dropout", ev);
    if (DDManager.dropElement === this) {
      delete DDManager.dropElement;
      if (!calledByEnter) {
        let parentDrop;
        let parent = this.el.parentElement;
        while (!parentDrop && parent) {
          parentDrop = (_a2 = parent.ddElement) == null ? void 0 : _a2.ddDroppable;
          parent = parent.parentElement;
        }
        if (parentDrop) {
          parentDrop._mouseEnter(e2);
        }
      }
    }
  }
  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */
  drop(e2) {
    e2.preventDefault();
    const ev = Utils.initEvent(e2, { target: this.el, type: "drop" });
    if (this.option.drop) {
      this.option.drop(ev, this._ui(DDManager.dragElement));
    }
    this.triggerEvent("drop", ev);
  }
  /** @internal true if element matches the string/method accept option */
  _canDrop(el) {
    return el && (!this.accept || this.accept(el));
  }
  /** @internal */
  _setupAccept() {
    if (!this.option.accept)
      return this;
    if (typeof this.option.accept === "string") {
      this.accept = (el) => el.classList.contains(this.option.accept) || el.matches(this.option.accept);
    } else {
      this.accept = this.option.accept;
    }
    return this;
  }
  /** @internal */
  _ui(drag) {
    return {
      draggable: drag.el,
      ...drag.ui()
    };
  }
}
class DDElement {
  static init(el) {
    if (!el.ddElement) {
      el.ddElement = new DDElement(el);
    }
    return el.ddElement;
  }
  constructor(el) {
    this.el = el;
  }
  on(eventName, callback2) {
    if (this.ddDraggable && ["drag", "dragstart", "dragstop"].indexOf(eventName) > -1) {
      this.ddDraggable.on(eventName, callback2);
    } else if (this.ddDroppable && ["drop", "dropover", "dropout"].indexOf(eventName) > -1) {
      this.ddDroppable.on(eventName, callback2);
    } else if (this.ddResizable && ["resizestart", "resize", "resizestop"].indexOf(eventName) > -1) {
      this.ddResizable.on(eventName, callback2);
    }
    return this;
  }
  off(eventName) {
    if (this.ddDraggable && ["drag", "dragstart", "dragstop"].indexOf(eventName) > -1) {
      this.ddDraggable.off(eventName);
    } else if (this.ddDroppable && ["drop", "dropover", "dropout"].indexOf(eventName) > -1) {
      this.ddDroppable.off(eventName);
    } else if (this.ddResizable && ["resizestart", "resize", "resizestop"].indexOf(eventName) > -1) {
      this.ddResizable.off(eventName);
    }
    return this;
  }
  setupDraggable(opts) {
    if (!this.ddDraggable) {
      this.ddDraggable = new DDDraggable(this.el, opts);
    } else {
      this.ddDraggable.updateOption(opts);
    }
    return this;
  }
  cleanDraggable() {
    if (this.ddDraggable) {
      this.ddDraggable.destroy();
      delete this.ddDraggable;
    }
    return this;
  }
  setupResizable(opts) {
    if (!this.ddResizable) {
      this.ddResizable = new DDResizable(this.el, opts);
    } else {
      this.ddResizable.updateOption(opts);
    }
    return this;
  }
  cleanResizable() {
    if (this.ddResizable) {
      this.ddResizable.destroy();
      delete this.ddResizable;
    }
    return this;
  }
  setupDroppable(opts) {
    if (!this.ddDroppable) {
      this.ddDroppable = new DDDroppable(this.el, opts);
    } else {
      this.ddDroppable.updateOption(opts);
    }
    return this;
  }
  cleanDroppable() {
    if (this.ddDroppable) {
      this.ddDroppable.destroy();
      delete this.ddDroppable;
    }
    return this;
  }
}
class DDGridStack {
  resizable(el, opts, key, value) {
    this._getDDElements(el).forEach((dEl) => {
      if (opts === "disable" || opts === "enable") {
        dEl.ddResizable && dEl.ddResizable[opts]();
      } else if (opts === "destroy") {
        dEl.ddResizable && dEl.cleanResizable();
      } else if (opts === "option") {
        dEl.setupResizable({ [key]: value });
      } else {
        const n = dEl.el.gridstackNode;
        const grid = n.grid;
        let handles = dEl.el.getAttribute("gs-resize-handles") || grid.opts.resizable.handles || "e,s,se";
        if (handles === "all")
          handles = "n,e,s,w,se,sw,ne,nw";
        const autoHide = !grid.opts.alwaysShowResizeHandle;
        dEl.setupResizable({
          ...grid.opts.resizable,
          ...{ handles, autoHide },
          ...{
            start: opts.start,
            stop: opts.stop,
            resize: opts.resize
          }
        });
      }
    });
    return this;
  }
  draggable(el, opts, key, value) {
    this._getDDElements(el).forEach((dEl) => {
      if (opts === "disable" || opts === "enable") {
        dEl.ddDraggable && dEl.ddDraggable[opts]();
      } else if (opts === "destroy") {
        dEl.ddDraggable && dEl.cleanDraggable();
      } else if (opts === "option") {
        dEl.setupDraggable({ [key]: value });
      } else {
        const grid = dEl.el.gridstackNode.grid;
        dEl.setupDraggable({
          ...grid.opts.draggable,
          ...{
            // containment: (grid.parentGridItem && grid.opts.dragOut === false) ? grid.el.parentElement : (grid.opts.draggable.containment || null),
            start: opts.start,
            stop: opts.stop,
            drag: opts.drag
          }
        });
      }
    });
    return this;
  }
  dragIn(el, opts) {
    this._getDDElements(el).forEach((dEl) => dEl.setupDraggable(opts));
    return this;
  }
  droppable(el, opts, key, value) {
    if (typeof opts.accept === "function" && !opts._accept) {
      opts._accept = opts.accept;
      opts.accept = (el2) => opts._accept(el2);
    }
    this._getDDElements(el).forEach((dEl) => {
      if (opts === "disable" || opts === "enable") {
        dEl.ddDroppable && dEl.ddDroppable[opts]();
      } else if (opts === "destroy") {
        if (dEl.ddDroppable) {
          dEl.cleanDroppable();
        }
      } else if (opts === "option") {
        dEl.setupDroppable({ [key]: value });
      } else {
        dEl.setupDroppable(opts);
      }
    });
    return this;
  }
  /** true if element is droppable */
  isDroppable(el) {
    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);
  }
  /** true if element is draggable */
  isDraggable(el) {
    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);
  }
  /** true if element is draggable */
  isResizable(el) {
    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);
  }
  on(el, name, callback2) {
    this._getDDElements(el).forEach((dEl) => dEl.on(name, (event) => {
      callback2(event, DDManager.dragElement ? DDManager.dragElement.el : event.target, DDManager.dragElement ? DDManager.dragElement.helper : null);
    }));
    return this;
  }
  off(el, name) {
    this._getDDElements(el).forEach((dEl) => dEl.off(name));
    return this;
  }
  /** @internal returns a list of DD elements, creating them on the fly by default */
  _getDDElements(els, create2 = true) {
    let hosts = Utils.getElements(els);
    if (!hosts.length)
      return [];
    let list = hosts.map((e2) => e2.ddElement || (create2 ? DDElement.init(e2) : null));
    if (!create2) {
      list.filter((d3) => d3);
    }
    return list;
  }
}
/*!
 * GridStack 10.3.1
 * https://gridstackjs.com/
 *
 * Copyright (c) 2021-2022 Alain Dumesny
 * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE
 */
const dd = new DDGridStack();
class GridStack {
  /**
   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will
   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support
   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.
   * @param options grid options (optional)
   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)
   *
   * @example
   * let grid = GridStack.init();
   *
   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later
   * let grid = document.querySelector('.grid-stack').gridstack;
   */
  static init(options = {}, elOrString = ".grid-stack") {
    if (typeof document === "undefined")
      return null;
    let el = GridStack.getGridElement(elOrString);
    if (!el) {
      if (typeof elOrString === "string") {
        console.error('GridStack.initAll() no grid was found with selector "' + elOrString + '" - element missing or wrong selector ?\nNote: ".grid-stack" is required for proper CSS styling and drag/drop, and is the default selector.');
      } else {
        console.error("GridStack.init() no grid element was passed.");
      }
      return null;
    }
    if (!el.gridstack) {
      el.gridstack = new GridStack(el, Utils.cloneDeep(options));
    }
    return el.gridstack;
  }
  /**
   * Will initialize a list of elements (given a selector) and return an array of grids.
   * @param options grid options (optional)
   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)
   *
   * @example
   * let grids = GridStack.initAll();
   * grids.forEach(...)
   */
  static initAll(options = {}, selector = ".grid-stack") {
    let grids = [];
    if (typeof document === "undefined")
      return grids;
    GridStack.getGridElements(selector).forEach((el) => {
      if (!el.gridstack) {
        el.gridstack = new GridStack(el, Utils.cloneDeep(options));
      }
      grids.push(el.gridstack);
    });
    if (grids.length === 0) {
      console.error('GridStack.initAll() no grid was found with selector "' + selector + '" - element missing or wrong selector ?\nNote: ".grid-stack" is required for proper CSS styling and drag/drop, and is the default selector.');
    }
    return grids;
  }
  /**
   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then
   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from
   * JSON serialized data, including options.
   * @param parent HTML element parent to the grid
   * @param opt grids options used to initialize the grid, and list of children
   */
  static addGrid(parent, opt = {}) {
    if (!parent)
      return null;
    let el = parent;
    if (el.gridstack) {
      const grid2 = el.gridstack;
      if (opt)
        grid2.opts = { ...grid2.opts, ...opt };
      if (opt.children !== void 0)
        grid2.load(opt.children);
      return grid2;
    }
    const parentIsGrid = parent.classList.contains("grid-stack");
    if (!parentIsGrid || GridStack.addRemoveCB) {
      if (GridStack.addRemoveCB) {
        el = GridStack.addRemoveCB(parent, opt, true, true);
      } else {
        let doc = document.implementation.createHTMLDocument("");
        doc.body.innerHTML = `<div class="grid-stack ${opt.class || ""}"></div>`;
        el = doc.body.children[0];
        parent.appendChild(el);
      }
    }
    let grid = GridStack.init(opt, el);
    return grid;
  }
  /** call this method to register your engine instead of the default one.
   * See instead `GridStackOptions.engineClass` if you only need to
   * replace just one instance.
   */
  static registerEngine(engineClass) {
    GridStack.engineClass = engineClass;
  }
  /** @internal create placeholder DIV as needed */
  get placeholder() {
    if (!this._placeholder) {
      let placeholderChild = document.createElement("div");
      placeholderChild.className = "placeholder-content";
      if (this.opts.placeholderText) {
        placeholderChild.innerHTML = this.opts.placeholderText;
      }
      this._placeholder = document.createElement("div");
      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);
      this.placeholder.appendChild(placeholderChild);
    }
    return this._placeholder;
  }
  /**
   * Construct a grid item from the given element and options
   * @param el the HTML element tied to this grid after it's been initialized
   * @param opts grid options - public for classes to access, but use methods to modify!
   */
  constructor(el, opts = {}) {
    var _a2, _b2, _c, _d;
    this.el = el;
    this.opts = opts;
    this._gsEventHandler = {};
    this._extraDragRow = 0;
    this.dragTransform = { xScale: 1, yScale: 1, xOffset: 0, yOffset: 0 };
    el.gridstack = this;
    opts = opts || {};
    if (!el.classList.contains("grid-stack")) {
      this.el.classList.add("grid-stack");
    }
    if (opts.row) {
      opts.minRow = opts.maxRow = opts.row;
      delete opts.row;
    }
    let rowAttr = Utils.toNumber(el.getAttribute("gs-row"));
    if (opts.column === "auto") {
      delete opts.column;
    }
    if (opts.alwaysShowResizeHandle !== void 0) {
      opts._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;
    }
    let bk = (_a2 = opts.columnOpts) == null ? void 0 : _a2.breakpoints;
    const oldOpts = opts;
    if (oldOpts.oneColumnModeDomSort) {
      delete oldOpts.oneColumnModeDomSort;
      console.log("warning: Gridstack oneColumnModeDomSort no longer supported. Use GridStackOptions.columnOpts instead.");
    }
    if (oldOpts.oneColumnSize || oldOpts.disableOneColumnMode === false) {
      const oneSize = oldOpts.oneColumnSize || 768;
      delete oldOpts.oneColumnSize;
      delete oldOpts.disableOneColumnMode;
      opts.columnOpts = opts.columnOpts || {};
      bk = opts.columnOpts.breakpoints = opts.columnOpts.breakpoints || [];
      let oneColumn = bk.find((b2) => b2.c === 1);
      if (!oneColumn) {
        oneColumn = { c: 1, w: oneSize };
        bk.push(oneColumn, { c: 12, w: oneSize + 1 });
      } else
        oneColumn.w = oneSize;
    }
    const resp = opts.columnOpts;
    if (resp) {
      if (!resp.columnWidth && !((_b2 = resp.breakpoints) == null ? void 0 : _b2.length)) {
        delete opts.columnOpts;
        bk = void 0;
      } else {
        resp.columnMax = resp.columnMax || 12;
      }
    }
    if ((bk == null ? void 0 : bk.length) > 1)
      bk.sort((a3, b2) => (b2.w || 0) - (a3.w || 0));
    let defaults2 = {
      ...Utils.cloneDeep(gridDefaults),
      column: Utils.toNumber(el.getAttribute("gs-column")) || gridDefaults.column,
      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute("gs-min-row")) || gridDefaults.minRow,
      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute("gs-max-row")) || gridDefaults.maxRow,
      staticGrid: Utils.toBool(el.getAttribute("gs-static")) || gridDefaults.staticGrid,
      draggable: {
        handle: (opts.handleClass ? "." + opts.handleClass : opts.handle ? opts.handle : "") || gridDefaults.draggable.handle
      },
      removableOptions: {
        accept: opts.itemClass || gridDefaults.removableOptions.accept,
        decline: gridDefaults.removableOptions.decline
      }
    };
    if (el.getAttribute("gs-animate")) {
      defaults2.animate = Utils.toBool(el.getAttribute("gs-animate"));
    }
    opts = Utils.defaults(opts, defaults2);
    this._initMargin();
    this.checkDynamicColumn();
    this.el.classList.add("gs-" + opts.column);
    if (opts.rtl === "auto") {
      opts.rtl = el.style.direction === "rtl";
    }
    if (opts.rtl) {
      this.el.classList.add("grid-stack-rtl");
    }
    const grandParent = (_c = this.el.parentElement) == null ? void 0 : _c.parentElement;
    let parentGridItem = (grandParent == null ? void 0 : grandParent.classList.contains(gridDefaults.itemClass)) ? grandParent.gridstackNode : void 0;
    if (parentGridItem) {
      parentGridItem.subGrid = this;
      this.parentGridItem = parentGridItem;
      this.el.classList.add("grid-stack-nested");
      parentGridItem.el.classList.add("grid-stack-sub-grid");
    }
    this._isAutoCellHeight = opts.cellHeight === "auto";
    if (this._isAutoCellHeight || opts.cellHeight === "initial") {
      this.cellHeight(void 0, false);
    } else {
      if (typeof opts.cellHeight == "number" && opts.cellHeightUnit && opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {
        opts.cellHeight = opts.cellHeight + opts.cellHeightUnit;
        delete opts.cellHeightUnit;
      }
      this.cellHeight(opts.cellHeight, false);
    }
    if (opts.alwaysShowResizeHandle === "mobile") {
      opts.alwaysShowResizeHandle = isTouch;
    }
    this._styleSheetClass = "gs-id-" + GridStackEngine._idSeq++;
    this.el.classList.add(this._styleSheetClass);
    this._setStaticClass();
    let engineClass = opts.engineClass || GridStack.engineClass || GridStackEngine;
    this.engine = new engineClass({
      column: this.getColumn(),
      float: opts.float,
      maxRow: opts.maxRow,
      onChange: (cbNodes) => {
        let maxH = 0;
        this.engine.nodes.forEach((n) => {
          maxH = Math.max(maxH, n.y + n.h);
        });
        cbNodes.forEach((n) => {
          let el2 = n.el;
          if (!el2)
            return;
          if (n._removeDOM) {
            if (el2)
              el2.remove();
            delete n._removeDOM;
          } else {
            this._writePosAttr(el2, n);
          }
        });
        this._updateStyles(false, maxH);
      }
    });
    this._updateStyles(false, 0);
    if (opts.auto) {
      this.batchUpdate();
      this.engine._loading = true;
      this.getGridItems().forEach((el2) => this._prepareElement(el2));
      delete this.engine._loading;
      this.batchUpdate(false);
    }
    if (opts.children) {
      const children2 = opts.children;
      delete opts.children;
      if (children2.length)
        this.load(children2);
    }
    this.setAnimation();
    if (opts.subGridDynamic && !DDManager.pauseDrag)
      DDManager.pauseDrag = true;
    if (((_d = opts.draggable) == null ? void 0 : _d.pause) !== void 0)
      DDManager.pauseDrag = opts.draggable.pause;
    this._setupRemoveDrop();
    this._setupAcceptWidget();
    this._updateResizeEvent();
  }
  /**
   * add a new widget and returns it.
   *
   * Widget will be always placed even if result height is more than actual grid height.
   * You need to use `willItFit()` before calling addWidget for additional check.
   * See also `makeWidget()`.
   *
   * @example
   * let grid = GridStack.init();
   * grid.addWidget({w: 3, content: 'hello'});
   * grid.addWidget('<div class="grid-stack-item"><div class="grid-stack-item-content">hello</div></div>', {w: 3});
   *
   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add
   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget
   */
  addWidget(els, options) {
    function isGridStackWidget(w2) {
      return w2.el !== void 0 || w2.x !== void 0 || w2.y !== void 0 || w2.w !== void 0 || w2.h !== void 0 || w2.content !== void 0 ? true : false;
    }
    let el;
    let node;
    if (typeof els === "string") {
      let doc = document.implementation.createHTMLDocument("");
      doc.body.innerHTML = els;
      el = doc.body.children[0];
    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {
      node = options = els;
      if (node == null ? void 0 : node.el) {
        el = node.el;
      } else if (GridStack.addRemoveCB) {
        el = GridStack.addRemoveCB(this.el, options, true, false);
      } else {
        let content = (options == null ? void 0 : options.content) || "";
        let doc = document.implementation.createHTMLDocument("");
        doc.body.innerHTML = `<div class="grid-stack-item ${this.opts.itemClass || ""}"><div class="grid-stack-item-content">${content}</div></div>`;
        el = doc.body.children[0];
      }
    } else {
      el = els;
    }
    if (!el)
      return;
    node = el.gridstackNode;
    if (node && el.parentElement === this.el && this.engine.nodes.find((n) => n._id === node._id))
      return el;
    let domAttr = this._readAttr(el);
    options = Utils.cloneDeep(options) || {};
    Utils.defaults(options, domAttr);
    node = this.engine.prepareNode(options);
    this._writeAttr(el, options);
    this.el.appendChild(el);
    this.makeWidget(el, options);
    return el;
  }
  /**
   * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them
   * from the parent's subGrid options.
   * @param el gridItem element to convert
   * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults
   * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)
   * @param saveContent if true (default) the html inside .grid-stack-content will be saved to child widget
   * @returns newly created grid
   */
  makeSubGrid(el, ops, nodeToAdd, saveContent = true) {
    var _a2, _b2, _c;
    let node = el.gridstackNode;
    if (!node) {
      node = this.makeWidget(el).gridstackNode;
    }
    if ((_a2 = node.subGrid) == null ? void 0 : _a2.el)
      return node.subGrid;
    let subGridTemplate;
    let grid = this;
    while (grid && !subGridTemplate) {
      subGridTemplate = (_b2 = grid.opts) == null ? void 0 : _b2.subGridOpts;
      grid = (_c = grid.parentGridItem) == null ? void 0 : _c.grid;
    }
    ops = Utils.cloneDeep({ ...subGridTemplate || {}, children: void 0, ...ops || node.subGridOpts || {} });
    node.subGridOpts = ops;
    let autoColumn;
    if (ops.column === "auto") {
      autoColumn = true;
      ops.column = Math.max(node.w || 1, (nodeToAdd == null ? void 0 : nodeToAdd.w) || 1);
      delete ops.columnOpts;
    }
    let content = node.el.querySelector(".grid-stack-item-content");
    let newItem;
    let newItemOpt;
    if (saveContent) {
      this._removeDD(node.el);
      newItemOpt = { ...node, x: 0, y: 0 };
      Utils.removeInternalForSave(newItemOpt);
      delete newItemOpt.subGridOpts;
      if (node.content) {
        newItemOpt.content = node.content;
        delete node.content;
      }
      if (GridStack.addRemoveCB) {
        newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);
      } else {
        let doc = document.implementation.createHTMLDocument("");
        doc.body.innerHTML = `<div class="grid-stack-item"></div>`;
        newItem = doc.body.children[0];
        newItem.appendChild(content);
        doc.body.innerHTML = `<div class="grid-stack-item-content"></div>`;
        content = doc.body.children[0];
        node.el.appendChild(content);
      }
      this._prepareDragDropByNode(node);
    }
    if (nodeToAdd) {
      let w2 = autoColumn ? ops.column : node.w;
      let h3 = node.h + nodeToAdd.h;
      let style = node.el.style;
      style.transition = "none";
      this.update(node.el, { w: w2, h: h3 });
      setTimeout(() => style.transition = null);
    }
    let subGrid = node.subGrid = GridStack.addGrid(content, ops);
    if (nodeToAdd == null ? void 0 : nodeToAdd._moving)
      subGrid._isTemp = true;
    if (autoColumn)
      subGrid._autoColumn = true;
    if (saveContent) {
      subGrid.addWidget(newItem, newItemOpt);
    }
    if (nodeToAdd) {
      if (nodeToAdd._moving) {
        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, "mouseenter", subGrid.el), 0);
      } else {
        subGrid.addWidget(node.el, node);
      }
    }
    return subGrid;
  }
  /**
   * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back
   * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)
   */
  removeAsSubGrid(nodeThatRemoved) {
    var _a2;
    let pGrid = (_a2 = this.parentGridItem) == null ? void 0 : _a2.grid;
    if (!pGrid)
      return;
    pGrid.batchUpdate();
    pGrid.removeWidget(this.parentGridItem.el, true, true);
    this.engine.nodes.forEach((n) => {
      n.x += this.parentGridItem.x;
      n.y += this.parentGridItem.y;
      pGrid.addWidget(n.el, n);
    });
    pGrid.batchUpdate(false);
    if (this.parentGridItem)
      delete this.parentGridItem.subGrid;
    delete this.parentGridItem;
    if (nodeThatRemoved) {
      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, "mouseenter", pGrid.el), 0);
    }
  }
  /**
   * saves the current layout returning a list of widgets for serialization which might include any nested grids.
   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will
   * be removed.
   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()
   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.
   * @param saveCB callback for each node -> widget, so application can insert additional data to be saved into the widget data structure.
   * @returns list of widgets or full grid option, including .children list of widgets
   */
  save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB) {
    let list = this.engine.save(saveContent, saveCB);
    list.forEach((n) => {
      var _a2;
      if (saveContent && n.el && !n.subGrid && !saveCB) {
        let sub = n.el.querySelector(".grid-stack-item-content");
        n.content = sub ? sub.innerHTML : void 0;
        if (!n.content)
          delete n.content;
      } else {
        if (!saveContent && !saveCB) {
          delete n.content;
        }
        if ((_a2 = n.subGrid) == null ? void 0 : _a2.el) {
          const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);
          n.subGridOpts = saveGridOpt ? listOrOpt : { children: listOrOpt };
          delete n.subGrid;
        }
      }
      delete n.el;
    });
    if (saveGridOpt) {
      let o = Utils.cloneDeep(this.opts);
      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {
        o.margin = o.marginTop;
        delete o.marginTop;
        delete o.marginRight;
        delete o.marginBottom;
        delete o.marginLeft;
      }
      if (o.rtl === (this.el.style.direction === "rtl")) {
        o.rtl = "auto";
      }
      if (this._isAutoCellHeight) {
        o.cellHeight = "auto";
      }
      if (this._autoColumn) {
        o.column = "auto";
      }
      const origShow = o._alwaysShowResizeHandle;
      delete o._alwaysShowResizeHandle;
      if (origShow !== void 0) {
        o.alwaysShowResizeHandle = origShow;
      } else {
        delete o.alwaysShowResizeHandle;
      }
      Utils.removeInternalAndSame(o, gridDefaults);
      o.children = list;
      return o;
    }
    return list;
  }
  /**
   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.
   *
   * @param layout list of widgets definition to update/create
   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving
   * the user control of insertion.
   *
   * @example
   * see http://gridstackjs.com/demo/serialization.html
   */
  load(items, addRemove = GridStack.addRemoveCB || true) {
    var _a2;
    items = Utils.cloneDeep(items);
    const column = this.getColumn();
    items.forEach((n) => {
      n.w = n.w || 1;
      n.h = n.h || 1;
    });
    items = Utils.sort(items);
    let maxColumn = 0;
    items.forEach((n) => {
      maxColumn = Math.max(maxColumn, (n.x || 0) + n.w);
    });
    if (maxColumn > column) {
      this._ignoreLayoutsNodeChange = true;
      this.engine.cacheLayout(items, maxColumn, true);
    }
    const prevCB = GridStack.addRemoveCB;
    if (typeof addRemove === "function")
      GridStack.addRemoveCB = addRemove;
    let removed = [];
    this.batchUpdate();
    const blank = !this.engine.nodes.length;
    if (blank)
      this.setAnimation(false);
    if (!blank && addRemove) {
      let copyNodes = [...this.engine.nodes];
      copyNodes.forEach((n) => {
        if (!n.id)
          return;
        let item = Utils.find(items, n.id);
        if (!item) {
          if (GridStack.addRemoveCB)
            GridStack.addRemoveCB(this.el, n, false, false);
          removed.push(n);
          this.removeWidget(n.el, true, false);
        }
      });
    }
    this.engine._loading = true;
    let updateNodes = [];
    this.engine.nodes = this.engine.nodes.filter((n) => {
      if (Utils.find(items, n.id)) {
        updateNodes.push(n);
        return false;
      }
      return true;
    });
    items.forEach((w2) => {
      var _a3;
      let item = Utils.find(updateNodes, w2.id);
      if (item) {
        if (Utils.shouldSizeToContent(item))
          w2.h = item.h;
        this.engine.nodeBoundFix(w2);
        if (w2.autoPosition || w2.x === void 0 || w2.y === void 0) {
          w2.w = w2.w || item.w;
          w2.h = w2.h || item.h;
          this.engine.findEmptyPosition(w2);
        }
        this.engine.nodes.push(item);
        if (Utils.samePos(item, w2)) {
          this.moveNode(item, { ...w2, forceCollide: true });
        }
        this.update(item.el, w2);
        if ((_a3 = w2.subGridOpts) == null ? void 0 : _a3.children) {
          let sub = item.el.querySelector(".grid-stack");
          if (sub && sub.gridstack) {
            sub.gridstack.load(w2.subGridOpts.children);
          }
        }
      } else if (addRemove) {
        this.addWidget(w2);
      }
    });
    delete this.engine._loading;
    this.engine.removedNodes = removed;
    this.batchUpdate(false);
    delete this._ignoreLayoutsNodeChange;
    prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;
    if (blank && ((_a2 = this.opts) == null ? void 0 : _a2.animate))
      this.setAnimation(this.opts.animate, true);
    return this;
  }
  /**
   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)
   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.
   */
  batchUpdate(flag = true) {
    this.engine.batchUpdate(flag);
    if (!flag) {
      this._updateContainerHeight();
      this._triggerRemoveEvent();
      this._triggerAddEvent();
      this._triggerChangeEvent();
    }
    return this;
  }
  /**
   * Gets current cell height.
   */
  getCellHeight(forcePixel = false) {
    if (this.opts.cellHeight && this.opts.cellHeight !== "auto" && (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === "px")) {
      return this.opts.cellHeight;
    }
    if (this.opts.cellHeightUnit === "rem") {
      return this.opts.cellHeight * parseFloat(getComputedStyle(document.documentElement).fontSize);
    }
    if (this.opts.cellHeightUnit === "em") {
      return this.opts.cellHeight * parseFloat(getComputedStyle(this.el).fontSize);
    }
    if (this.opts.cellHeightUnit === "cm") {
      return this.opts.cellHeight * (96 / 2.54);
    }
    if (this.opts.cellHeightUnit === "mm") {
      return this.opts.cellHeight * (96 / 2.54) / 10;
    }
    let el = this.el.querySelector("." + this.opts.itemClass);
    if (el) {
      let h3 = Utils.toNumber(el.getAttribute("gs-h")) || 1;
      return Math.round(el.offsetHeight / h3);
    }
    let rows = parseInt(this.el.getAttribute("gs-current-row"));
    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight;
  }
  /**
   * Update current cell height - see `GridStackOptions.cellHeight` for format.
   * This method rebuilds an internal CSS style sheet.
   * Note: You can expect performance issues if call this method too often.
   *
   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),
   * if pass 0 the CSS will be generated by the application instead.
   * @param update (Optional) if false, styles will not be updated
   *
   * @example
   * grid.cellHeight(100); // same as 100px
   * grid.cellHeight('70px');
   * grid.cellHeight(grid.cellWidth() * 1.2);
   */
  cellHeight(val, update = true) {
    if (update && val !== void 0) {
      if (this._isAutoCellHeight !== (val === "auto")) {
        this._isAutoCellHeight = val === "auto";
        this._updateResizeEvent();
      }
    }
    if (val === "initial" || val === "auto") {
      val = void 0;
    }
    if (val === void 0) {
      let marginDiff = -this.opts.marginRight - this.opts.marginLeft + this.opts.marginTop + this.opts.marginBottom;
      val = this.cellWidth() + marginDiff;
    }
    let data = Utils.parseHeight(val);
    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {
      return this;
    }
    this.opts.cellHeightUnit = data.unit;
    this.opts.cellHeight = data.h;
    this.resizeToContentCheck();
    if (update) {
      this._updateStyles(true);
    }
    return this;
  }
  /** Gets current cell width. */
  cellWidth() {
    return this._widthOrContainer() / this.getColumn();
  }
  /** return our expected width (or parent) , and optionally of window for dynamic column check */
  _widthOrContainer(forBreakpoint = false) {
    var _a2;
    return forBreakpoint && ((_a2 = this.opts.columnOpts) == null ? void 0 : _a2.breakpointForWindow) ? window.innerWidth : this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth;
  }
  /** checks for dynamic column count for our current size, returning true if changed */
  checkDynamicColumn() {
    var _a2, _b2;
    const resp = this.opts.columnOpts;
    if (!resp || !resp.columnWidth && !((_a2 = resp.breakpoints) == null ? void 0 : _a2.length))
      return false;
    const column = this.getColumn();
    let newColumn = column;
    const w2 = this._widthOrContainer(true);
    if (resp.columnWidth) {
      newColumn = Math.min(Math.round(w2 / resp.columnWidth) || 1, resp.columnMax);
    } else {
      newColumn = resp.columnMax;
      let i2 = 0;
      while (i2 < resp.breakpoints.length && w2 <= resp.breakpoints[i2].w) {
        newColumn = resp.breakpoints[i2++].c || column;
      }
    }
    if (newColumn !== column) {
      const bk = (_b2 = resp.breakpoints) == null ? void 0 : _b2.find((b2) => b2.c === newColumn);
      this.column(newColumn, (bk == null ? void 0 : bk.layout) || resp.layout);
      return true;
    }
    return false;
  }
  /**
   * re-layout grid items to reclaim any empty space. Options are:
   * 'list' keep the widget left->right order the same, even if that means leaving an empty slot if things don't fit
   * 'compact' might re-order items to fill any empty space
   *
   * doSort - 'false' to let you do your own sorting ahead in case you need to control a different order. (default to sort)
   */
  compact(layout = "compact", doSort = true) {
    this.engine.compact(layout, doSort);
    this._triggerChangeEvent();
    return this;
  }
  /**
   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,
   * as well as cache the original layout so you can revert back to previous positions without loss.
   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],
   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)
   * @param column - Integer > 0 (default 12).
   * @param layout specify the type of re-layout that will happen (position, size, etc...).
   * Note: items will never be outside of the current column boundaries. default ('moveScale'). Ignored for 1 column
   */
  column(column, layout = "moveScale") {
    if (!column || column < 1 || this.opts.column === column)
      return this;
    let oldColumn = this.getColumn();
    this.opts.column = column;
    if (!this.engine)
      return this;
    this.engine.column = column;
    this.el.classList.remove("gs-" + oldColumn);
    this.el.classList.add("gs-" + column);
    this.engine.columnChanged(oldColumn, column, layout);
    if (this._isAutoCellHeight)
      this.cellHeight();
    this.resizeToContentCheck(true);
    this._ignoreLayoutsNodeChange = true;
    this._triggerChangeEvent();
    delete this._ignoreLayoutsNodeChange;
    return this;
  }
  /**
   * get the number of columns in the grid (default 12)
   */
  getColumn() {
    return this.opts.column;
  }
  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */
  getGridItems() {
    return Array.from(this.el.children).filter((el) => el.matches("." + this.opts.itemClass) && !el.matches("." + this.opts.placeholderClass));
  }
  /**
   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.
   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).
   */
  destroy(removeDOM = true) {
    if (!this.el)
      return;
    this.offAll();
    this._updateResizeEvent(true);
    this.setStatic(true, false);
    this.setAnimation(false);
    if (!removeDOM) {
      this.removeAll(removeDOM);
      this.el.classList.remove(this._styleSheetClass);
      this.el.removeAttribute("gs-current-row");
    } else {
      this.el.parentNode.removeChild(this.el);
    }
    this._removeStylesheet();
    if (this.parentGridItem)
      delete this.parentGridItem.subGrid;
    delete this.parentGridItem;
    delete this.opts;
    delete this._placeholder;
    delete this.engine;
    delete this.el.gridstack;
    delete this.el;
    return this;
  }
  /**
   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)
   */
  float(val) {
    if (this.opts.float !== val) {
      this.opts.float = this.engine.float = val;
      this._triggerChangeEvent();
    }
    return this;
  }
  /**
   * get the current float mode
   */
  getFloat() {
    return this.engine.float;
  }
  /**
   * Get the position of the cell under a pixel on screen.
   * @param position the position of the pixel to resolve in
   * absolute coordinates, as an object with top and left properties
   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).
   * Useful when grid is within `position: relative` element
   *
   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.
   */
  getCellFromPixel(position, useDocRelative = false) {
    let box = this.el.getBoundingClientRect();
    let containerPos;
    if (useDocRelative) {
      containerPos = { top: box.top + document.documentElement.scrollTop, left: box.left };
    } else {
      containerPos = { top: this.el.offsetTop, left: this.el.offsetLeft };
    }
    let relativeLeft = position.left - containerPos.left;
    let relativeTop = position.top - containerPos.top;
    let columnWidth = box.width / this.getColumn();
    let rowHeight = box.height / parseInt(this.el.getAttribute("gs-current-row"));
    return { x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight) };
  }
  /** returns the current number of rows, which will be at least `minRow` if set */
  getRow() {
    return Math.max(this.engine.getRow(), this.opts.minRow);
  }
  /**
   * Checks if specified area is empty.
   * @param x the position x.
   * @param y the position y.
   * @param w the width of to check
   * @param h the height of to check
   */
  isAreaEmpty(x2, y3, w2, h3) {
    return this.engine.isAreaEmpty(x2, y3, w2, h3);
  }
  /**
   * If you add elements to your grid by hand (or have some framework creating DOM), you have to tell gridstack afterwards to make them widgets.
   * If you want gridstack to add the elements for you, use `addWidget()` instead.
   * Makes the given element a widget and returns it.
   * @param els widget or single selector to convert.
   * @param options widget definition to use instead of reading attributes or using default sizing values
   *
   * @example
   * let grid = GridStack.init();
   * grid.el.appendChild('<div id="1" gs-w="3"></div>');
   * grid.el.appendChild('<div id="2"></div>');
   * grid.makeWidget('1');
   * grid.makeWidget('2', {w:2, content: 'hello'});
   */
  makeWidget(els, options) {
    let el = GridStack.getElement(els);
    this._prepareElement(el, true, options);
    const node = el.gridstackNode;
    this._updateContainerHeight();
    if (node.subGridOpts) {
      this.makeSubGrid(el, node.subGridOpts, void 0, false);
    }
    if (this.opts.column === 1) {
      this._ignoreLayoutsNodeChange = true;
    }
    this._triggerAddEvent();
    this._triggerChangeEvent();
    delete this._ignoreLayoutsNodeChange;
    return el;
  }
  on(name, callback2) {
    if (name.indexOf(" ") !== -1) {
      let names2 = name.split(" ");
      names2.forEach((name2) => this.on(name2, callback2));
      return this;
    }
    if (name === "change" || name === "added" || name === "removed" || name === "enable" || name === "disable") {
      let noData = name === "enable" || name === "disable";
      if (noData) {
        this._gsEventHandler[name] = (event) => callback2(event);
      } else {
        this._gsEventHandler[name] = (event) => callback2(event, event.detail);
      }
      this.el.addEventListener(name, this._gsEventHandler[name]);
    } else if (name === "drag" || name === "dragstart" || name === "dragstop" || name === "resizestart" || name === "resize" || name === "resizestop" || name === "dropped" || name === "resizecontent") {
      this._gsEventHandler[name] = callback2;
    } else {
      console.error("GridStack.on(" + name + ") event not supported");
    }
    return this;
  }
  /**
   * unsubscribe from the 'on' event GridStackEvent
   * @param name of the event (see possible values) or list of names space separated
   */
  off(name) {
    if (name.indexOf(" ") !== -1) {
      let names2 = name.split(" ");
      names2.forEach((name2) => this.off(name2));
      return this;
    }
    if (name === "change" || name === "added" || name === "removed" || name === "enable" || name === "disable") {
      if (this._gsEventHandler[name]) {
        this.el.removeEventListener(name, this._gsEventHandler[name]);
      }
    }
    delete this._gsEventHandler[name];
    return this;
  }
  /** remove all event handlers */
  offAll() {
    Object.keys(this._gsEventHandler).forEach((key) => this.off(key));
    return this;
  }
  /**
   * Removes widget from the grid.
   * @param el  widget or selector to modify
   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).
   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).
   */
  removeWidget(els, removeDOM = true, triggerEvent = true) {
    GridStack.getElements(els).forEach((el) => {
      if (el.parentElement && el.parentElement !== this.el)
        return;
      let node = el.gridstackNode;
      if (!node) {
        node = this.engine.nodes.find((n) => el === n.el);
      }
      if (!node)
        return;
      if (removeDOM && GridStack.addRemoveCB) {
        GridStack.addRemoveCB(this.el, node, false, false);
      }
      delete el.gridstackNode;
      this._removeDD(el);
      this.engine.removeNode(node, removeDOM, triggerEvent);
      if (removeDOM && el.parentElement) {
        el.remove();
      }
    });
    if (triggerEvent) {
      this._triggerRemoveEvent();
      this._triggerChangeEvent();
    }
    return this;
  }
  /**
   * Removes all widgets from the grid.
   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).
   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).
   */
  removeAll(removeDOM = true, triggerEvent = true) {
    this.engine.nodes.forEach((n) => {
      if (removeDOM && GridStack.addRemoveCB) {
        GridStack.addRemoveCB(this.el, n, false, false);
      }
      delete n.el.gridstackNode;
      if (!this.opts.staticGrid)
        this._removeDD(n.el);
    });
    this.engine.removeAll(removeDOM, triggerEvent);
    if (triggerEvent)
      this._triggerRemoveEvent();
    return this;
  }
  /**
   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.
   * @param doAnimate if true the grid will animate.
   * @param delay if true setting will be set on next event loop.
   */
  setAnimation(doAnimate = this.opts.animate, delay) {
    if (delay) {
      setTimeout(() => {
        if (this.opts)
          this.setAnimation(doAnimate);
      });
    } else if (doAnimate) {
      this.el.classList.add("grid-stack-animate");
    } else {
      this.el.classList.remove("grid-stack-animate");
    }
    return this;
  }
  /** @internal */
  hasAnimationCSS() {
    return this.el.classList.contains("grid-stack-animate");
  }
  /**
   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.
   * Also toggle the grid-stack-static class.
   * @param val if true the grid become static.
   * @param updateClass true (default) if css class gets updated
   * @param recurse true (default) if sub-grids also get updated
   */
  setStatic(val, updateClass = true, recurse = true) {
    if (!!this.opts.staticGrid === val)
      return this;
    val ? this.opts.staticGrid = true : delete this.opts.staticGrid;
    this._setupRemoveDrop();
    this._setupAcceptWidget();
    this.engine.nodes.forEach((n) => {
      this._prepareDragDropByNode(n);
      if (n.subGrid && recurse)
        n.subGrid.setStatic(val, updateClass, recurse);
    });
    if (updateClass) {
      this._setStaticClass();
    }
    return this;
  }
  /**
   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.
   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)
   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.
   */
  update(els, opt) {
    if (arguments.length > 2) {
      console.warn("gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon");
      let a3 = arguments, i2 = 1;
      opt = { x: a3[i2++], y: a3[i2++], w: a3[i2++], h: a3[i2++] };
      return this.update(els, opt);
    }
    GridStack.getElements(els).forEach((el) => {
      var _a2;
      let n = el == null ? void 0 : el.gridstackNode;
      if (!n)
        return;
      let w2 = Utils.cloneDeep(opt);
      this.engine.nodeBoundFix(w2);
      delete w2.autoPosition;
      delete w2.id;
      let keys = ["x", "y", "w", "h"];
      let m3;
      if (keys.some((k2) => w2[k2] !== void 0 && w2[k2] !== n[k2])) {
        m3 = {};
        keys.forEach((k2) => {
          m3[k2] = w2[k2] !== void 0 ? w2[k2] : n[k2];
          delete w2[k2];
        });
      }
      if (!m3 && (w2.minW || w2.minH || w2.maxW || w2.maxH)) {
        m3 = {};
      }
      if (w2.content !== void 0) {
        const itemContent = el.querySelector(".grid-stack-item-content");
        if (itemContent && itemContent.innerHTML !== w2.content) {
          itemContent.innerHTML = w2.content;
          if ((_a2 = n.subGrid) == null ? void 0 : _a2.el) {
            itemContent.appendChild(n.subGrid.el);
            if (!n.subGrid.opts.styleInHead)
              n.subGrid._updateStyles(true);
          }
        }
        delete w2.content;
      }
      let changed = false;
      let ddChanged = false;
      for (const key in w2) {
        if (key[0] !== "_" && n[key] !== w2[key]) {
          n[key] = w2[key];
          changed = true;
          ddChanged = ddChanged || !this.opts.staticGrid && (key === "noResize" || key === "noMove" || key === "locked");
        }
      }
      Utils.sanitizeMinMax(n);
      if (m3) {
        const widthChanged = m3.w !== void 0 && m3.w !== n.w;
        this.moveNode(n, m3);
        this.resizeToContentCheck(widthChanged, n);
        delete n._orig;
      }
      if (m3 || changed) {
        this._writeAttr(el, n);
      }
      if (ddChanged) {
        this._prepareDragDropByNode(n);
      }
    });
    return this;
  }
  moveNode(n, m3) {
    const wasUpdating = n._updating;
    if (!wasUpdating)
      this.engine.cleanNodes().beginUpdate(n);
    this.engine.moveNode(n, m3);
    this._updateContainerHeight();
    if (!wasUpdating) {
      this._triggerChangeEvent();
      this.engine.endUpdate();
    }
  }
  /**
   * Updates widget height to match the content height to avoid v-scrollbar or dead space.
   * Note: this assumes only 1 child under resizeToContentParent='.grid-stack-item-content' (sized to gridItem minus padding) that is at the entire content size wanted.
   * @param el grid item element
   * @param useNodeH set to true if GridStackNode.h should be used instead of actual container height when we don't need to wait for animation to finish to get actual DOM heights
   */
  resizeToContent(el) {
    var _a2, _b2;
    if (!el)
      return;
    el.classList.remove("size-to-content-max");
    if (!el.clientHeight)
      return;
    const n = el.gridstackNode;
    if (!n)
      return;
    const grid = n.grid;
    if (!grid || el.parentElement !== grid.el)
      return;
    const cell = grid.getCellHeight(true);
    if (!cell)
      return;
    let height = n.h ? n.h * cell : el.clientHeight;
    let item;
    if (n.resizeToContentParent)
      item = el.querySelector(n.resizeToContentParent);
    if (!item)
      item = el.querySelector(GridStack.resizeToContentParent);
    if (!item)
      return;
    const padding = el.clientHeight - item.clientHeight;
    const itemH = n.h ? n.h * cell - padding : item.clientHeight;
    let wantedH;
    if (n.subGrid) {
      wantedH = n.subGrid.getRow() * n.subGrid.getCellHeight(true);
    } else if ((_b2 = (_a2 = n.subGridOpts) == null ? void 0 : _a2.children) == null ? void 0 : _b2.length) {
      return;
    } else {
      const child = item.firstElementChild;
      if (!child) {
        console.error(`Error: GridStack.resizeToContent() widget id:${n.id} '${GridStack.resizeToContentParent}'.firstElementChild is null, make sure to have a div like container. Skipping sizing.`);
        return;
      }
      wantedH = child.getBoundingClientRect().height || itemH;
    }
    if (itemH === wantedH)
      return;
    height += wantedH - itemH;
    let h3 = Math.ceil(height / cell);
    const softMax = Number.isInteger(n.sizeToContent) ? n.sizeToContent : 0;
    if (softMax && h3 > softMax) {
      h3 = softMax;
      el.classList.add("size-to-content-max");
    }
    if (n.minH && h3 < n.minH)
      h3 = n.minH;
    else if (n.maxH && h3 > n.maxH)
      h3 = n.maxH;
    if (h3 !== n.h) {
      grid._ignoreLayoutsNodeChange = true;
      grid.moveNode(n, { h: h3 });
      delete grid._ignoreLayoutsNodeChange;
    }
  }
  /** call the user resize (so they can do extra work) else our build in version */
  resizeToContentCBCheck(el) {
    if (GridStack.resizeToContentCB)
      GridStack.resizeToContentCB(el);
    else
      this.resizeToContent(el);
  }
  /** rotate (by swapping w & h) the passed in node - called when user press 'r' during dragging
   * @param els  widget or selector of objects to modify
   * @param relative optional pixel coord relative to upper/left corner to rotate around (will keep that cell under cursor)
   */
  rotate(els, relative) {
    GridStack.getElements(els).forEach((el) => {
      let n = el.gridstackNode;
      if (!Utils.canBeRotated(n))
        return;
      const rot = { w: n.h, h: n.w, minH: n.minW, minW: n.minH, maxH: n.maxW, maxW: n.maxH };
      if (relative) {
        let pivotX = relative.left > 0 ? Math.floor(relative.left / this.cellWidth()) : 0;
        let pivotY = relative.top > 0 ? Math.floor(relative.top / this.opts.cellHeight) : 0;
        rot.x = n.x + pivotX - (n.h - (pivotY + 1));
        rot.y = n.y + pivotY - pivotX;
      }
      Object.keys(rot).forEach((k2) => {
        if (rot[k2] === void 0)
          delete rot[k2];
      });
      const _orig = n._orig;
      this.update(el, rot);
      n._orig = _orig;
    });
    return this;
  }
  /**
   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).
   * @param value margin value
   */
  margin(value) {
    let isMultiValue = typeof value === "string" && value.split(" ").length > 1;
    if (!isMultiValue) {
      let data = Utils.parseHeight(value);
      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h)
        return;
    }
    this.opts.margin = value;
    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = void 0;
    this._initMargin();
    this._updateStyles(true);
    return this;
  }
  /** returns current margin number value (undefined if 4 sides don't match) */
  getMargin() {
    return this.opts.margin;
  }
  /**
   * Returns true if the height of the grid will be less than the vertical
   * constraint. Always returns true if grid doesn't have height constraint.
   * @param node contains x,y,w,h,auto-position options
   *
   * @example
   * if (grid.willItFit(newWidget)) {
   *   grid.addWidget(newWidget);
   * } else {
   *   alert('Not enough free space to place the widget');
   * }
   */
  willItFit(node) {
    if (arguments.length > 1) {
      console.warn("gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon");
      let a3 = arguments, i2 = 0, w2 = { x: a3[i2++], y: a3[i2++], w: a3[i2++], h: a3[i2++], autoPosition: a3[i2++] };
      return this.willItFit(w2);
    }
    return this.engine.willItFit(node);
  }
  /** @internal */
  _triggerChangeEvent() {
    if (this.engine.batchMode)
      return this;
    let elements2 = this.engine.getDirtyNodes(true);
    if (elements2 && elements2.length) {
      if (!this._ignoreLayoutsNodeChange) {
        this.engine.layoutsNodesChange(elements2);
      }
      this._triggerEvent("change", elements2);
    }
    this.engine.saveInitial();
    return this;
  }
  /** @internal */
  _triggerAddEvent() {
    var _a2;
    if (this.engine.batchMode)
      return this;
    if ((_a2 = this.engine.addedNodes) == null ? void 0 : _a2.length) {
      if (!this._ignoreLayoutsNodeChange) {
        this.engine.layoutsNodesChange(this.engine.addedNodes);
      }
      this.engine.addedNodes.forEach((n) => {
        delete n._dirty;
      });
      const addedNodes = [...this.engine.addedNodes];
      this.engine.addedNodes = [];
      this._triggerEvent("added", addedNodes);
    }
    return this;
  }
  /** @internal */
  _triggerRemoveEvent() {
    var _a2;
    if (this.engine.batchMode)
      return this;
    if ((_a2 = this.engine.removedNodes) == null ? void 0 : _a2.length) {
      const removedNodes = [...this.engine.removedNodes];
      this.engine.removedNodes = [];
      this._triggerEvent("removed", removedNodes);
    }
    return this;
  }
  /** @internal */
  _triggerEvent(type, data) {
    let event = data ? new CustomEvent(type, { bubbles: false, detail: data }) : new Event(type);
    this.el.dispatchEvent(event);
    return this;
  }
  /** @internal called to delete the current dynamic style sheet used for our layout */
  _removeStylesheet() {
    if (this._styles) {
      const styleLocation = this.opts.styleInHead ? void 0 : this.el.parentNode;
      Utils.removeStylesheet(this._styleSheetClass, styleLocation);
      delete this._styles;
    }
    return this;
  }
  /** @internal updated/create the CSS styles for row based layout and initial margin setting */
  _updateStyles(forceUpdate = false, maxH) {
    if (forceUpdate) {
      this._removeStylesheet();
    }
    if (maxH === void 0)
      maxH = this.getRow();
    this._updateContainerHeight();
    if (this.opts.cellHeight === 0) {
      return this;
    }
    let cellHeight = this.opts.cellHeight;
    let cellHeightUnit = this.opts.cellHeightUnit;
    let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;
    if (!this._styles) {
      const styleLocation = this.opts.styleInHead ? void 0 : this.el.parentNode;
      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation, {
        nonce: this.opts.nonce
      });
      if (!this._styles)
        return this;
      this._styles._max = 0;
      Utils.addCSSRule(this._styles, prefix, `height: ${cellHeight}${cellHeightUnit}`);
      let top = this.opts.marginTop + this.opts.marginUnit;
      let bottom = this.opts.marginBottom + this.opts.marginUnit;
      let right = this.opts.marginRight + this.opts.marginUnit;
      let left = this.opts.marginLeft + this.opts.marginUnit;
      let content = `${prefix} > .grid-stack-item-content`;
      let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;
      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);
      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-n`, `top: ${top};`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-s`, `bottom: ${bottom}`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);
    }
    maxH = maxH || this._styles._max;
    if (maxH > this._styles._max) {
      let getHeight = (rows) => cellHeight * rows + cellHeightUnit;
      for (let i2 = this._styles._max + 1; i2 <= maxH; i2++) {
        Utils.addCSSRule(this._styles, `${prefix}[gs-y="${i2}"]`, `top: ${getHeight(i2)}`);
        Utils.addCSSRule(this._styles, `${prefix}[gs-h="${i2 + 1}"]`, `height: ${getHeight(i2 + 1)}`);
      }
      this._styles._max = maxH;
    }
    return this;
  }
  /** @internal */
  _updateContainerHeight() {
    if (!this.engine || this.engine.batchMode)
      return this;
    const parent = this.parentGridItem;
    let row = this.getRow() + this._extraDragRow;
    const cellHeight = this.opts.cellHeight;
    const unit = this.opts.cellHeightUnit;
    if (!cellHeight)
      return this;
    if (!parent) {
      const cssMinHeight = Utils.parseHeight(getComputedStyle(this.el)["minHeight"]);
      if (cssMinHeight.h > 0 && cssMinHeight.unit === unit) {
        const minRow = Math.floor(cssMinHeight.h / cellHeight);
        if (row < minRow) {
          row = minRow;
        }
      }
    }
    this.el.setAttribute("gs-current-row", String(row));
    this.el.style.removeProperty("min-height");
    this.el.style.removeProperty("height");
    if (row) {
      this.el.style[parent ? "minHeight" : "height"] = row * cellHeight + unit;
    }
    if (parent && !parent.grid.engine.batchMode && Utils.shouldSizeToContent(parent)) {
      parent.grid.resizeToContentCBCheck(parent.el);
    }
    return this;
  }
  /** @internal */
  _prepareElement(el, triggerAddEvent = false, node) {
    node = node || this._readAttr(el);
    el.gridstackNode = node;
    node.el = el;
    node.grid = this;
    node = this.engine.addNode(node, triggerAddEvent);
    this._writeAttr(el, node);
    el.classList.add(gridDefaults.itemClass, this.opts.itemClass);
    const sizeToContent = Utils.shouldSizeToContent(node);
    sizeToContent ? el.classList.add("size-to-content") : el.classList.remove("size-to-content");
    if (sizeToContent)
      this.resizeToContentCheck(false, node);
    this._prepareDragDropByNode(node);
    return this;
  }
  /** @internal call to write position x,y,w,h attributes back to element */
  _writePosAttr(el, n) {
    if (n.x !== void 0 && n.x !== null) {
      el.setAttribute("gs-x", String(n.x));
    }
    if (n.y !== void 0 && n.y !== null) {
      el.setAttribute("gs-y", String(n.y));
    }
    n.w > 1 ? el.setAttribute("gs-w", String(n.w)) : el.removeAttribute("gs-w");
    n.h > 1 ? el.setAttribute("gs-h", String(n.h)) : el.removeAttribute("gs-h");
    return this;
  }
  /** @internal call to write any default attributes back to element */
  _writeAttr(el, node) {
    if (!node)
      return this;
    this._writePosAttr(el, node);
    let attrs = {
      autoPosition: "gs-auto-position",
      noResize: "gs-no-resize",
      noMove: "gs-no-move",
      locked: "gs-locked",
      id: "gs-id"
    };
    for (const key in attrs) {
      if (node[key]) {
        el.setAttribute(attrs[key], String(node[key]));
      } else {
        el.removeAttribute(attrs[key]);
      }
    }
    return this;
  }
  /** @internal call to read any default attributes from element */
  _readAttr(el, clearDefaultAttr = true) {
    let n = {};
    n.x = Utils.toNumber(el.getAttribute("gs-x"));
    n.y = Utils.toNumber(el.getAttribute("gs-y"));
    n.w = Utils.toNumber(el.getAttribute("gs-w"));
    n.h = Utils.toNumber(el.getAttribute("gs-h"));
    n.autoPosition = Utils.toBool(el.getAttribute("gs-auto-position"));
    n.noResize = Utils.toBool(el.getAttribute("gs-no-resize"));
    n.noMove = Utils.toBool(el.getAttribute("gs-no-move"));
    n.locked = Utils.toBool(el.getAttribute("gs-locked"));
    n.id = el.getAttribute("gs-id");
    n.maxW = Utils.toNumber(el.getAttribute("gs-max-w"));
    n.minW = Utils.toNumber(el.getAttribute("gs-min-w"));
    n.maxH = Utils.toNumber(el.getAttribute("gs-max-h"));
    n.minH = Utils.toNumber(el.getAttribute("gs-min-h"));
    if (clearDefaultAttr) {
      if (n.w === 1)
        el.removeAttribute("gs-w");
      if (n.h === 1)
        el.removeAttribute("gs-h");
      if (n.maxW)
        el.removeAttribute("gs-max-w");
      if (n.minW)
        el.removeAttribute("gs-min-w");
      if (n.maxH)
        el.removeAttribute("gs-max-h");
      if (n.minH)
        el.removeAttribute("gs-min-h");
    }
    for (const key in n) {
      if (!n.hasOwnProperty(key))
        return;
      if (!n[key] && n[key] !== 0) {
        delete n[key];
      }
    }
    return n;
  }
  /** @internal */
  _setStaticClass() {
    let classes = ["grid-stack-static"];
    if (this.opts.staticGrid) {
      this.el.classList.add(...classes);
      this.el.setAttribute("gs-static", "true");
    } else {
      this.el.classList.remove(...classes);
      this.el.removeAttribute("gs-static");
    }
    return this;
  }
  /**
   * called when we are being resized - check if the one Column Mode needs to be turned on/off
   * and remember the prev columns we used, or get our count from parent, as well as check for cellHeight==='auto' (square)
   * or `sizeToContent` gridItem options.
   */
  onResize() {
    var _a2;
    if (!((_a2 = this.el) == null ? void 0 : _a2.clientWidth))
      return;
    if (this.prevWidth === this.el.clientWidth)
      return;
    this.prevWidth = this.el.clientWidth;
    this.batchUpdate();
    let columnChanged = false;
    if (this._autoColumn && this.parentGridItem) {
      if (this.opts.column !== this.parentGridItem.w) {
        this.column(this.parentGridItem.w, "none");
        columnChanged = true;
      }
    } else {
      columnChanged = this.checkDynamicColumn();
    }
    if (this._isAutoCellHeight)
      this.cellHeight();
    this.engine.nodes.forEach((n) => {
      if (n.subGrid)
        n.subGrid.onResize();
    });
    if (!this._skipInitialResize)
      this.resizeToContentCheck(columnChanged);
    delete this._skipInitialResize;
    this.batchUpdate(false);
    return this;
  }
  /** resizes content for given node (or all) if shouldSizeToContent() is true */
  resizeToContentCheck(delay = false, n = void 0) {
    if (!this.engine)
      return;
    if (delay && this.hasAnimationCSS())
      return setTimeout(() => this.resizeToContentCheck(false, n), 300 + 10);
    if (n) {
      if (Utils.shouldSizeToContent(n))
        this.resizeToContentCBCheck(n.el);
    } else if (this.engine.nodes.some((n2) => Utils.shouldSizeToContent(n2))) {
      const nodes = [...this.engine.nodes];
      this.batchUpdate();
      nodes.forEach((n2) => {
        if (Utils.shouldSizeToContent(n2))
          this.resizeToContentCBCheck(n2.el);
      });
      this.batchUpdate(false);
    }
    if (this._gsEventHandler["resizecontent"])
      this._gsEventHandler["resizecontent"](null, n ? [n] : this.engine.nodes);
  }
  /** add or remove the grid element size event handler */
  _updateResizeEvent(forceRemove = false) {
    const trackSize = !this.parentGridItem && (this._isAutoCellHeight || this.opts.sizeToContent || this.opts.columnOpts || this.engine.nodes.find((n) => n.sizeToContent));
    if (!forceRemove && trackSize && !this.resizeObserver) {
      this._sizeThrottle = Utils.throttle(() => this.onResize(), this.opts.cellHeightThrottle);
      this.resizeObserver = new ResizeObserver(() => this._sizeThrottle());
      this.resizeObserver.observe(this.el);
      this._skipInitialResize = true;
    } else if ((forceRemove || !trackSize) && this.resizeObserver) {
      this.resizeObserver.disconnect();
      delete this.resizeObserver;
      delete this._sizeThrottle;
    }
    return this;
  }
  /** @internal convert a potential selector into actual element */
  static getElement(els = ".grid-stack-item") {
    return Utils.getElement(els);
  }
  /** @internal */
  static getElements(els = ".grid-stack-item") {
    return Utils.getElements(els);
  }
  /** @internal */
  static getGridElement(els) {
    return GridStack.getElement(els);
  }
  /** @internal */
  static getGridElements(els) {
    return Utils.getElements(els);
  }
  /** @internal initialize margin top/bottom/left/right and units */
  _initMargin() {
    let data;
    let margin = 0;
    let margins = [];
    if (typeof this.opts.margin === "string") {
      margins = this.opts.margin.split(" ");
    }
    if (margins.length === 2) {
      this.opts.marginTop = this.opts.marginBottom = margins[0];
      this.opts.marginLeft = this.opts.marginRight = margins[1];
    } else if (margins.length === 4) {
      this.opts.marginTop = margins[0];
      this.opts.marginRight = margins[1];
      this.opts.marginBottom = margins[2];
      this.opts.marginLeft = margins[3];
    } else {
      data = Utils.parseHeight(this.opts.margin);
      this.opts.marginUnit = data.unit;
      margin = this.opts.margin = data.h;
    }
    if (this.opts.marginTop === void 0) {
      this.opts.marginTop = margin;
    } else {
      data = Utils.parseHeight(this.opts.marginTop);
      this.opts.marginTop = data.h;
      delete this.opts.margin;
    }
    if (this.opts.marginBottom === void 0) {
      this.opts.marginBottom = margin;
    } else {
      data = Utils.parseHeight(this.opts.marginBottom);
      this.opts.marginBottom = data.h;
      delete this.opts.margin;
    }
    if (this.opts.marginRight === void 0) {
      this.opts.marginRight = margin;
    } else {
      data = Utils.parseHeight(this.opts.marginRight);
      this.opts.marginRight = data.h;
      delete this.opts.margin;
    }
    if (this.opts.marginLeft === void 0) {
      this.opts.marginLeft = margin;
    } else {
      data = Utils.parseHeight(this.opts.marginLeft);
      this.opts.marginLeft = data.h;
      delete this.opts.margin;
    }
    this.opts.marginUnit = data.unit;
    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {
      this.opts.margin = this.opts.marginTop;
    }
    return this;
  }
  /* ===========================================================================================
   * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts
   * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039
   * ===========================================================================================
   */
  /** get the global (but static to this code) DD implementation */
  static getDD() {
    return dd;
  }
  /**
   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.
   * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar
   * is dynamically create and needs to be set later.
   * @param dragIn string selector (ex: '.sidebar .grid-stack-item') or list of dom elements
   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}
   * @param root optional root which defaults to document (for shadow dom pas the parent HTMLDocument)
   */
  static setupDragIn(dragIn, dragInOptions, root = document) {
    if ((dragInOptions == null ? void 0 : dragInOptions.pause) !== void 0) {
      DDManager.pauseDrag = dragInOptions.pause;
    }
    dragInOptions = { ...dragInDefaultOptions, ...dragInOptions || {} };
    let els = typeof dragIn === "string" ? Utils.getElements(dragIn, root) : dragIn;
    if (els.length)
      els == null ? void 0 : els.forEach((el) => {
        if (!dd.isDraggable(el))
          dd.dragIn(el, dragInOptions);
      });
  }
  /**
   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.
   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.
   * @param els widget or selector to modify.
   * @param val if true widget will be draggable, assuming the parent grid isn't noMove or static.
   */
  movable(els, val) {
    if (this.opts.staticGrid)
      return this;
    GridStack.getElements(els).forEach((el) => {
      const n = el.gridstackNode;
      if (!n)
        return;
      val ? delete n.noMove : n.noMove = true;
      this._prepareDragDropByNode(n);
    });
    return this;
  }
  /**
   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.
   * @param els  widget or selector to modify
   * @param val  if true widget will be resizable, assuming the parent grid isn't noResize or static.
   */
  resizable(els, val) {
    if (this.opts.staticGrid)
      return this;
    GridStack.getElements(els).forEach((el) => {
      let n = el.gridstackNode;
      if (!n)
        return;
      val ? delete n.noResize : n.noResize = true;
      this._prepareDragDropByNode(n);
    });
    return this;
  }
  /**
   * Temporarily disables widgets moving/resizing.
   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.
   * Note: no-op for static grid
   * This is a shortcut for:
   * @example
   *  grid.enableMove(false);
   *  grid.enableResize(false);
   * @param recurse true (default) if sub-grids also get updated
   */
  disable(recurse = true) {
    if (this.opts.staticGrid)
      return;
    this.enableMove(false, recurse);
    this.enableResize(false, recurse);
    this._triggerEvent("disable");
    return this;
  }
  /**
   * Re-enables widgets moving/resizing - see disable().
   * Note: no-op for static grid.
   * This is a shortcut for:
   * @example
   *  grid.enableMove(true);
   *  grid.enableResize(true);
   * @param recurse true (default) if sub-grids also get updated
   */
  enable(recurse = true) {
    if (this.opts.staticGrid)
      return;
    this.enableMove(true, recurse);
    this.enableResize(true, recurse);
    this._triggerEvent("enable");
    return this;
  }
  /**
   * Enables/disables widget moving. No-op for static grids, and locally defined items still overrule
   * @param recurse true (default) if sub-grids also get updated
   */
  enableMove(doEnable, recurse = true) {
    if (this.opts.staticGrid)
      return this;
    doEnable ? delete this.opts.disableDrag : this.opts.disableDrag = true;
    this.engine.nodes.forEach((n) => {
      this._prepareDragDropByNode(n);
      if (n.subGrid && recurse)
        n.subGrid.enableMove(doEnable, recurse);
    });
    return this;
  }
  /**
   * Enables/disables widget resizing. No-op for static grids.
   * @param recurse true (default) if sub-grids also get updated
   */
  enableResize(doEnable, recurse = true) {
    if (this.opts.staticGrid)
      return this;
    doEnable ? delete this.opts.disableResize : this.opts.disableResize = true;
    this.engine.nodes.forEach((n) => {
      this._prepareDragDropByNode(n);
      if (n.subGrid && recurse)
        n.subGrid.enableResize(doEnable, recurse);
    });
    return this;
  }
  /** @internal removes any drag&drop present (called during destroy) */
  _removeDD(el) {
    dd.draggable(el, "destroy").resizable(el, "destroy");
    if (el.gridstackNode) {
      delete el.gridstackNode._initDD;
    }
    delete el.ddElement;
    return this;
  }
  /** @internal called to add drag over to support widgets being added externally */
  _setupAcceptWidget() {
    if (this.opts.staticGrid || !this.opts.acceptWidgets && !this.opts.removable) {
      dd.droppable(this.el, "destroy");
      return this;
    }
    let cellHeight, cellWidth;
    let onDrag = (event, el, helper) => {
      var _a2;
      let node = el.gridstackNode;
      if (!node)
        return;
      helper = helper || el;
      if (!((_a2 = node.grid) == null ? void 0 : _a2.el)) {
        helper.style.transform = `scale(${1 / this.dragTransform.xScale},${1 / this.dragTransform.yScale})`;
        const helperRect = helper.getBoundingClientRect();
        helper.style.left = helperRect.x + (this.dragTransform.xScale - 1) * (event.clientX - helperRect.x) / this.dragTransform.xScale + "px";
        helper.style.top = helperRect.y + (this.dragTransform.yScale - 1) * (event.clientY - helperRect.y) / this.dragTransform.yScale + "px";
        helper.style.transformOrigin = `0px 0px`;
      }
      let parent = this.el.getBoundingClientRect();
      let { top, left } = helper.getBoundingClientRect();
      left -= parent.left;
      top -= parent.top;
      let ui = {
        position: {
          top: top * this.dragTransform.xScale,
          left: left * this.dragTransform.yScale
        }
      };
      if (node._temporaryRemoved) {
        node.x = Math.max(0, Math.round(left / cellWidth));
        node.y = Math.max(0, Math.round(top / cellHeight));
        delete node.autoPosition;
        this.engine.nodeBoundFix(node);
        if (!this.engine.willItFit(node)) {
          node.autoPosition = true;
          if (!this.engine.willItFit(node)) {
            dd.off(el, "drag");
            return;
          }
          if (node._willFitPos) {
            Utils.copyPos(node, node._willFitPos);
            delete node._willFitPos;
          }
        }
        this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);
      } else {
        this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);
      }
    };
    dd.droppable(this.el, {
      accept: (el) => {
        let node = el.gridstackNode || this._readAttr(el, false);
        if ((node == null ? void 0 : node.grid) === this)
          return true;
        if (!this.opts.acceptWidgets)
          return false;
        let canAccept = true;
        if (typeof this.opts.acceptWidgets === "function") {
          canAccept = this.opts.acceptWidgets(el);
        } else {
          let selector = this.opts.acceptWidgets === true ? ".grid-stack-item" : this.opts.acceptWidgets;
          canAccept = el.matches(selector);
        }
        if (canAccept && node && this.opts.maxRow) {
          let n = { w: node.w, h: node.h, minW: node.minW, minH: node.minH };
          canAccept = this.engine.willItFit(n);
        }
        return canAccept;
      }
    }).on(this.el, "dropover", (event, el, helper) => {
      let node = el.gridstackNode;
      if ((node == null ? void 0 : node.grid) === this && !node._temporaryRemoved) {
        return false;
      }
      if ((node == null ? void 0 : node.grid) && node.grid !== this && !node._temporaryRemoved) {
        let otherGrid = node.grid;
        otherGrid._leave(el, helper);
      }
      cellWidth = this.cellWidth();
      cellHeight = this.getCellHeight(true);
      if (!node) {
        node = this._readAttr(el, false);
      }
      if (!node.grid) {
        node._isExternal = true;
        el.gridstackNode = node;
      }
      helper = helper || el;
      let w2 = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;
      let h3 = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;
      if (node.grid && node.grid !== this) {
        if (!el._gridstackNodeOrig)
          el._gridstackNodeOrig = node;
        el.gridstackNode = node = { ...node, w: w2, h: h3, grid: this };
        delete node.x;
        delete node.y;
        this.engine.cleanupNode(node).nodeBoundFix(node);
        node._initDD = node._isExternal = // DOM needs to be re-parented on a drop
        node._temporaryRemoved = true;
      } else {
        node.w = w2;
        node.h = h3;
        node._temporaryRemoved = true;
      }
      GridStack._itemRemoving(node.el, false);
      dd.on(el, "drag", onDrag);
      onDrag(event, el, helper);
      return false;
    }).on(this.el, "dropout", (event, el, helper) => {
      let node = el.gridstackNode;
      if (!node)
        return false;
      if (!node.grid || node.grid === this) {
        this._leave(el, helper);
        if (this._isTemp) {
          this.removeAsSubGrid(node);
        }
      }
      return false;
    }).on(this.el, "drop", (event, el, helper) => {
      var _a2, _b2, _c;
      let node = el.gridstackNode;
      if ((node == null ? void 0 : node.grid) === this && !node._isExternal)
        return false;
      const wasAdded = !!this.placeholder.parentElement;
      this.placeholder.remove();
      const noAnim = wasAdded && this.opts.animate;
      if (noAnim)
        this.setAnimation(false);
      let origNode = el._gridstackNodeOrig;
      delete el._gridstackNodeOrig;
      if (wasAdded && (origNode == null ? void 0 : origNode.grid) && origNode.grid !== this) {
        let oGrid = origNode.grid;
        oGrid.engine.removeNodeFromLayoutCache(origNode);
        oGrid.engine.removedNodes.push(origNode);
        oGrid._triggerRemoveEvent()._triggerChangeEvent();
        if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {
          oGrid.removeAsSubGrid();
        }
      }
      if (!node)
        return false;
      if (wasAdded) {
        this.engine.cleanupNode(node);
        node.grid = this;
      }
      (_a2 = node.grid) == null ? true : delete _a2._isTemp;
      dd.off(el, "drag");
      if (helper !== el) {
        helper.remove();
        el.gridstackNode = origNode;
        if (wasAdded) {
          el = el.cloneNode(true);
        }
      } else {
        el.remove();
        this._removeDD(el);
      }
      if (!wasAdded)
        return false;
      el.gridstackNode = node;
      node.el = el;
      let subGrid = (_c = (_b2 = node.subGrid) == null ? void 0 : _b2.el) == null ? void 0 : _c.gridstack;
      Utils.copyPos(node, this._readAttr(this.placeholder));
      Utils.removePositioningStyles(el);
      this.el.appendChild(el);
      this._prepareElement(el, true, node);
      if (subGrid) {
        subGrid.parentGridItem = node;
        if (!subGrid.opts.styleInHead)
          subGrid._updateStyles(true);
      }
      this._updateContainerHeight();
      this.engine.addedNodes.push(node);
      this._triggerAddEvent();
      this._triggerChangeEvent();
      this.engine.endUpdate();
      if (this._gsEventHandler["dropped"]) {
        this._gsEventHandler["dropped"]({ ...event, type: "dropped" }, origNode && origNode.grid ? origNode : void 0, node);
      }
      if (noAnim)
        this.setAnimation(this.opts.animate, true);
      return false;
    });
    return this;
  }
  /** @internal mark item for removal */
  static _itemRemoving(el, remove) {
    const node = el ? el.gridstackNode : void 0;
    if (!(node == null ? void 0 : node.grid) || el.classList.contains(node.grid.opts.removableOptions.decline))
      return;
    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;
    remove ? el.classList.add("grid-stack-item-removing") : el.classList.remove("grid-stack-item-removing");
  }
  /** @internal called to setup a trash drop zone if the user specifies it */
  _setupRemoveDrop() {
    if (typeof this.opts.removable !== "string")
      return this;
    let trashEl = document.querySelector(this.opts.removable);
    if (!trashEl)
      return this;
    if (!this.opts.staticGrid && !dd.isDroppable(trashEl)) {
      dd.droppable(trashEl, this.opts.removableOptions).on(trashEl, "dropover", (event, el) => GridStack._itemRemoving(el, true)).on(trashEl, "dropout", (event, el) => GridStack._itemRemoving(el, false));
    }
    return this;
  }
  /** @internal prepares the element for drag&drop */
  _prepareDragDropByNode(node) {
    let el = node.el;
    const noMove = node.noMove || this.opts.disableDrag;
    const noResize = node.noResize || this.opts.disableResize;
    if (this.opts.staticGrid || noMove && noResize) {
      if (node._initDD) {
        this._removeDD(el);
        delete node._initDD;
      }
      el.classList.add("ui-draggable-disabled", "ui-resizable-disabled");
      return this;
    }
    if (!node._initDD) {
      let cellWidth;
      let cellHeight;
      let onStartMoving = (event, ui) => {
        if (this._gsEventHandler[event.type]) {
          this._gsEventHandler[event.type](event, event.target);
        }
        cellWidth = this.cellWidth();
        cellHeight = this.getCellHeight(true);
        this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);
      };
      let dragOrResize = (event, ui) => {
        this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);
      };
      let onEndMoving = (event) => {
        this.placeholder.remove();
        delete node._moving;
        delete node._event;
        delete node._lastTried;
        const widthChanged = node.w !== node._orig.w;
        let target = event.target;
        if (!target.gridstackNode || target.gridstackNode.grid !== this)
          return;
        node.el = target;
        if (node._isAboutToRemove) {
          let grid = el.gridstackNode.grid;
          if (grid._gsEventHandler[event.type]) {
            grid._gsEventHandler[event.type](event, target);
          }
          grid.engine.nodes.push(node);
          grid.removeWidget(el, true, true);
        } else {
          Utils.removePositioningStyles(target);
          if (node._temporaryRemoved) {
            Utils.copyPos(node, node._orig);
            this._writePosAttr(target, node);
            this.engine.addNode(node);
          } else {
            this._writePosAttr(target, node);
          }
          if (this._gsEventHandler[event.type]) {
            this._gsEventHandler[event.type](event, target);
          }
        }
        this._extraDragRow = 0;
        this._updateContainerHeight();
        this._triggerChangeEvent();
        this.engine.endUpdate();
        if (event.type === "resizestop") {
          if (Number.isInteger(node.sizeToContent))
            node.sizeToContent = node.h;
          this.resizeToContentCheck(widthChanged, node);
        }
      };
      dd.draggable(el, {
        start: onStartMoving,
        stop: onEndMoving,
        drag: dragOrResize
      }).resizable(el, {
        start: onStartMoving,
        stop: onEndMoving,
        resize: dragOrResize
      });
      node._initDD = true;
    }
    dd.draggable(el, noMove ? "disable" : "enable").resizable(el, noResize ? "disable" : "enable");
    return this;
  }
  /** @internal handles actual drag/resize start */
  _onStartMoving(el, event, ui, node, cellWidth, cellHeight) {
    var _a2;
    this.engine.cleanNodes().beginUpdate(node);
    this._writePosAttr(this.placeholder, node);
    this.el.appendChild(this.placeholder);
    this.placeholder.gridstackNode = node;
    if ((_a2 = node.grid) == null ? void 0 : _a2.el) {
      this.dragTransform = Utils.getValuesFromTransformedElement(el);
    } else if (this.placeholder && this.placeholder.closest(".grid-stack")) {
      const gridEl = this.placeholder.closest(".grid-stack");
      this.dragTransform = Utils.getValuesFromTransformedElement(gridEl);
    } else {
      this.dragTransform = {
        xScale: 1,
        xOffset: 0,
        yScale: 1,
        yOffset: 0
      };
    }
    node.el = this.placeholder;
    node._lastUiPosition = ui.position;
    node._prevYPix = ui.position.top;
    node._moving = event.type === "dragstart";
    delete node._lastTried;
    if (event.type === "dropover" && node._temporaryRemoved) {
      this.engine.addNode(node);
      node._moving = true;
    }
    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);
    if (event.type === "resizestart") {
      const colLeft = this.getColumn() - node.x;
      const rowLeft = (this.opts.maxRow || Number.MAX_SAFE_INTEGER) - node.y;
      dd.resizable(el, "option", "minWidth", cellWidth * Math.min(node.minW || 1, colLeft)).resizable(el, "option", "minHeight", cellHeight * Math.min(node.minH || 1, rowLeft)).resizable(el, "option", "maxWidth", cellWidth * Math.min(node.maxW || Number.MAX_SAFE_INTEGER, colLeft)).resizable(el, "option", "maxWidthMoveLeft", cellWidth * Math.min(node.maxW || Number.MAX_SAFE_INTEGER, node.x + node.w)).resizable(el, "option", "maxHeight", cellHeight * Math.min(node.maxH || Number.MAX_SAFE_INTEGER, rowLeft)).resizable(el, "option", "maxHeightMoveUp", cellHeight * Math.min(node.maxH || Number.MAX_SAFE_INTEGER, node.y + node.h));
    }
  }
  /** @internal handles actual drag/resize */
  _dragOrResize(el, event, ui, node, cellWidth, cellHeight) {
    let p = { ...node._orig };
    let resizing;
    let mLeft = this.opts.marginLeft, mRight = this.opts.marginRight, mTop = this.opts.marginTop, mBottom = this.opts.marginBottom;
    let mHeight = Math.round(cellHeight * 0.1), mWidth = Math.round(cellWidth * 0.1);
    mLeft = Math.min(mLeft, mWidth);
    mRight = Math.min(mRight, mWidth);
    mTop = Math.min(mTop, mHeight);
    mBottom = Math.min(mBottom, mHeight);
    if (event.type === "drag") {
      if (node._temporaryRemoved)
        return;
      let distance = ui.position.top - node._prevYPix;
      node._prevYPix = ui.position.top;
      if (this.opts.draggable.scroll !== false) {
        Utils.updateScrollPosition(el, ui.position, distance);
      }
      let left = ui.position.left + (ui.position.left > node._lastUiPosition.left ? -mRight : mLeft);
      let top = ui.position.top + (ui.position.top > node._lastUiPosition.top ? -mBottom : mTop);
      p.x = Math.round(left / cellWidth);
      p.y = Math.round(top / cellHeight);
      let prev = this._extraDragRow;
      if (this.engine.collide(node, p)) {
        let row = this.getRow();
        let extra = Math.max(0, p.y + node.h - row);
        if (this.opts.maxRow && row + extra > this.opts.maxRow) {
          extra = Math.max(0, this.opts.maxRow - row);
        }
        this._extraDragRow = extra;
      } else
        this._extraDragRow = 0;
      if (this._extraDragRow !== prev)
        this._updateContainerHeight();
      if (node.x === p.x && node.y === p.y)
        return;
    } else if (event.type === "resize") {
      if (p.x < 0)
        return;
      Utils.updateScrollResize(event, el, cellHeight);
      p.w = Math.round((ui.size.width - mLeft) / cellWidth);
      p.h = Math.round((ui.size.height - mTop) / cellHeight);
      if (node.w === p.w && node.h === p.h)
        return;
      if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h)
        return;
      let left = ui.position.left + mLeft;
      let top = ui.position.top + mTop;
      p.x = Math.round(left / cellWidth);
      p.y = Math.round(top / cellHeight);
      resizing = true;
    }
    node._event = event;
    node._lastTried = p;
    let rect = {
      x: ui.position.left + mLeft,
      y: ui.position.top + mTop,
      w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,
      h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom
    };
    if (this.engine.moveNodeCheck(node, { ...p, cellWidth, cellHeight, rect, resizing })) {
      node._lastUiPosition = ui.position;
      this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);
      delete node._skipDown;
      if (resizing && node.subGrid)
        node.subGrid.onResize();
      this._extraDragRow = 0;
      this._updateContainerHeight();
      let target = event.target;
      this._writePosAttr(target, node);
      if (this._gsEventHandler[event.type]) {
        this._gsEventHandler[event.type](event, target);
      }
    }
  }
  /** @internal called when item leaving our area by either cursor dropout event
   * or shape is outside our boundaries. remove it from us, and mark temporary if this was
   * our item to start with else restore prev node values from prev grid it came from.
   */
  _leave(el, helper) {
    let node = el.gridstackNode;
    if (!node)
      return;
    helper = helper || el;
    helper.style.transform = "scale(1)";
    dd.off(el, "drag");
    if (node._temporaryRemoved)
      return;
    node._temporaryRemoved = true;
    this.engine.removeNode(node);
    node.el = node._isExternal && helper ? helper : el;
    if (this.opts.removable === true) {
      GridStack._itemRemoving(el, true);
    }
    if (el._gridstackNodeOrig) {
      el.gridstackNode = el._gridstackNodeOrig;
      delete el._gridstackNodeOrig;
    } else if (node._isExternal) {
      delete node.el;
      delete el.gridstackNode;
      this.engine.restoreInitial();
    }
  }
  // legacy method removed
  commit() {
    obsolete(this, this.batchUpdate(false), "commit", "batchUpdate", "5.2");
    return this;
  }
}
GridStack.resizeToContentParent = ".grid-stack-item-content";
GridStack.Utils = Utils;
GridStack.Engine = GridStackEngine;
GridStack.GDRev = "10.3.1";
const gridstackExtra_min = "";
const gridstack_min = "";
const GridstackColumns = "";
function get_each_context$d(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i2];
  child_ctx[22] = i2;
  return child_ctx;
}
function create_catch_block$5(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d: noop$1
  };
}
function create_then_block$5(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*items*/
    ctx[0]
  );
  const get_key = (ctx2) => (
    /*item*/
    ctx2[20].id
  );
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$d(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$d(key, child_ctx));
  }
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*items, context, update, undefined*/
      19) {
        each_value = ensure_array_like(
          /*items*/
          ctx2[0]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$d, each_1_anchor, get_each_context$d);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d(detaching);
      }
    }
  };
}
function create_if_block$A(ctx) {
  let widget;
  let current;
  function settings_handler(...args) {
    return (
      /*settings_handler*/
      ctx[8](
        /*index*/
        ctx[22],
        ...args
      )
    );
  }
  widget = new Widget({
    props: {
      settings: (
        /*item*/
        ctx[20].settings
      ),
      context: (
        /*context*/
        ctx[1]
      )
    }
  });
  widget.$on("settings", settings_handler);
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const widget_changes = {};
      if (dirty & /*items*/
      1)
        widget_changes.settings = /*item*/
        ctx[20].settings;
      if (dirty & /*context*/
      2)
        widget_changes.context = /*context*/
        ctx[1];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_each_block$d(key_1, ctx) {
  let div1;
  let div0;
  let t2;
  let addToGrid_action;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*item*/
    ctx[20].settings !== void 0 && create_if_block$A(ctx)
  );
  return {
    key: key_1,
    first: null,
    c() {
      div1 = element("div");
      div0 = element("div");
      if (if_block)
        if_block.c();
      t2 = space();
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      if (if_block)
        if_block.l(div0_nodes);
      div0_nodes.forEach(detach);
      t2 = claim_space(div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "grid-stack-item-content flex-grow");
      attr(div1, "class", "grid-stack-item flex");
      this.first = div1;
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      if (if_block)
        if_block.m(div0, null);
      append_hydration(div1, t2);
      current = true;
      if (!mounted) {
        dispose = action_destroyer(addToGrid_action = /*addToGrid*/
        ctx[5].call(
          null,
          div1,
          /*item*/
          ctx[20]
        ));
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*item*/
        ctx[20].settings !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
          if (dirty & /*items*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$A(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div0, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (addToGrid_action && is_function(addToGrid_action.update) && dirty & /*items*/
      1)
        addToGrid_action.update.call(
          null,
          /*item*/
          ctx[20]
        );
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_pending_block$5(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d: noop$1
  };
}
function create_fragment$Z(ctx) {
  let div;
  let current;
  let info2 = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$5,
    then: create_then_block$5,
    catch: create_catch_block$5,
    value: 19,
    blocks: [, , ,]
  };
  handle_promise(
    /*gridPromise*/
    ctx[3],
    info2
  );
  return {
    c() {
      div = element("div");
      info2.block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      info2.block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "w-full h-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      info2.block.m(div, info2.anchor = null);
      info2.mount = () => div;
      info2.anchor = null;
      ctx[9](div);
      current = true;
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      update_await_block_branch(info2, ctx, dirty);
    },
    i(local) {
      if (current)
        return;
      transition_in(info2.block);
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        const block = info2.blocks[i2];
        transition_out(block);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      info2.block.d();
      info2.token = null;
      info2 = null;
      ctx[9](null);
    }
  };
}
function instance$Z($$self, $$props, $$invalidate) {
  let { options } = $$props;
  let { items } = $$props;
  let { context } = $$props;
  let { editable } = $$props;
  let gridStackOptions;
  const dispatch = createEventDispatcher();
  let gridEl;
  let grid;
  const gridPromise = new Promise((resolve2) => {
    onMount(async () => {
      grid = GridStack.init(gridStackOptions, gridEl);
      GridStack.setupDragIn(".grid-stack-toolbar-item", { appendTo: "body", helper: "clone" });
      grid.on("dropped", dropped);
      grid.on("enable", (event) => {
        dispatch("enable", event);
      });
      grid.on("disable", (event) => {
        dispatch("disable", event);
      });
      grid.on("change", change);
      grid.on("added", added);
      grid.on("removed", removed);
      grid.on("resizecontent", (event, nodes) => {
        dispatch("resizecontent", { event, nodes });
      });
      grid.on("resizestart", (event, el) => {
        dispatch("resizing", true);
        dispatch("resizestart", { event, el });
      });
      grid.on("resize", (event, el) => {
        dispatch("resize", { event, el });
      });
      grid.on("resizestop", (event, el) => {
        dispatch("resizing", false);
        dispatch("resizestop", { event, el });
      });
      grid.on("dragstart", (event, el) => {
        dispatch("dragging", true);
        dispatch("dragstart", { event, el });
      });
      grid.on("drag", (event, el) => {
        dispatch("drag", { event, el });
      });
      grid.on("dragstop", (event, el) => {
        dispatch("dragging", false);
        dispatch("dragstop", { event, el });
      });
      resolve2(grid);
    });
  });
  onDestroy(() => {
    grid == null ? void 0 : grid.offAll();
    grid == null ? void 0 : grid.destroy();
  });
  function onEditable(_editable) {
    if (grid !== void 0) {
      if (_editable) {
        grid.enable();
      } else {
        grid.disable();
      }
    }
  }
  function dropped(event, previousNode, newNode) {
    var _a2;
    dispatch("dropped", { event, previousNode, newNode });
    if (previousNode)
      return;
    const type = (_a2 = newNode.el) == null ? void 0 : _a2.getAttribute("widget-type");
    if (type !== null && type !== void 0) {
      const info2 = findInfo(type);
      if (info2 !== void 0) {
        const settings = info2.create();
        const item = {
          id: v4(),
          settings,
          position: {
            x: newNode.x,
            y: newNode.y,
            w: newNode.w,
            h: newNode.h
          }
        };
        const removeDOM = true;
        const triggerEvent = true;
        grid.removeWidget(newNode.el, removeDOM, triggerEvent);
        $$invalidate(0, items = [...items, item]);
        dispatch("items", items);
      }
    }
  }
  function added(event, nodes) {
    const add = nodes.filter((n) => !items.some((i2) => i2.id === n.id)).map((n) => ({
      id: n.id,
      position: { x: n.x, y: n.y, w: n.w, h: n.h },
      settings: n.settings
    }));
    $$invalidate(0, items = [...items, ...add]);
    dispatch("items", items);
  }
  function removed(event, nodes) {
    $$invalidate(0, items = items.filter((i2) => !nodes.some((n) => n.id === i2.id)));
    dispatch("items", items);
  }
  function change(event, nodes) {
    dispatch("change", { event, nodes });
    nodes.forEach((node) => {
      let item = items.find((i2) => i2.id === node.id);
      if (item !== void 0) {
        item.position.x = node.x;
        item.position.y = node.y;
        item.position.w = node.w;
        item.position.h = node.h;
      }
    });
    dispatch("items", items);
  }
  function update(index2, updated) {
    const copy = [...items];
    copy[index2].settings = updated;
    $$invalidate(0, items = copy);
    dispatch("items", items);
  }
  function addToGrid(element2, item) {
    grid.makeWidget(element2, {
      id: item.id,
      ...item.position,
      settings: item.settings
    });
  }
  const settings_handler = (index2, e2) => update(index2, e2.detail);
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      gridEl = $$value;
      $$invalidate(2, gridEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("options" in $$props2)
      $$invalidate(6, options = $$props2.options);
    if ("items" in $$props2)
      $$invalidate(0, items = $$props2.items);
    if ("context" in $$props2)
      $$invalidate(1, context = $$props2.context);
    if ("editable" in $$props2)
      $$invalidate(7, editable = $$props2.editable);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*options, editable, context*/
    194) {
      gridStackOptions = {
        ...options,
        acceptWidgets: true,
        disableDrag: !(editable ?? context.editable),
        disableResize: !(editable ?? context.editable)
      };
    }
    if ($$self.$$.dirty & /*editable, context*/
    130) {
      onEditable(editable ?? context.editable);
    }
  };
  return [
    items,
    context,
    gridEl,
    gridPromise,
    update,
    addToGrid,
    options,
    editable,
    settings_handler,
    div_binding
  ];
}
class WidgetGrid extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$Z, create_fragment$Z, safe_not_equal, {
      options: 6,
      items: 0,
      context: 1,
      editable: 7
    });
  }
}
function create_if_block$z(ctx) {
  let div1;
  let button;
  let icon;
  let t0;
  let div0;
  let textContent = "Add card";
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: mdiPlus } });
  return {
    c() {
      div1 = element("div");
      button = element("button");
      create_component(icon.$$.fragment);
      t0 = space();
      div0 = element("div");
      div0.textContent = textContent;
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      button = claim_element(div1_nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      button_nodes.forEach(detach);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(div0) !== "svelte-tbj64p")
        div0.textContent = textContent;
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(button, "class", "btn btn-circle");
      attr(div1, "class", "flex align-middle justify-center w-full py-2");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, button);
      mount_component(icon, button, null);
      append_hydration(div1, t0);
      append_hydration(div1, div0);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$Y(ctx) {
  let t2;
  let widgetgrid;
  let current;
  let if_block = (
    /*context*/
    ctx[0].editable && create_if_block$z(ctx)
  );
  widgetgrid = new WidgetGrid({
    props: {
      options: (
        /*options*/
        ctx[2]
      ),
      context: (
        /*context*/
        ctx[0]
      ),
      items: (
        /*items*/
        ctx[1]
      ),
      editable: (
        /*context*/
        ctx[0].editable
      )
    }
  });
  widgetgrid.$on(
    "items",
    /*items_handler*/
    ctx[7]
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      t2 = space();
      create_component(widgetgrid.$$.fragment);
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
      claim_component(widgetgrid.$$.fragment, nodes);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(widgetgrid, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*context*/
        ctx2[0].editable
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*context*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$z(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const widgetgrid_changes = {};
      if (dirty & /*options*/
      4)
        widgetgrid_changes.options = /*options*/
        ctx2[2];
      if (dirty & /*context*/
      1)
        widgetgrid_changes.context = /*context*/
        ctx2[0];
      if (dirty & /*items*/
      2)
        widgetgrid_changes.items = /*items*/
        ctx2[1];
      if (dirty & /*context*/
      1)
        widgetgrid_changes.editable = /*context*/
        ctx2[0].editable;
      widgetgrid.$set(widgetgrid_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(widgetgrid.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(widgetgrid.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      if (if_block)
        if_block.d(detaching);
      destroy_component(widgetgrid, detaching);
    }
  };
}
function instance$Y($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  let { context } = $$props;
  const dispatch = createEventDispatcher();
  let items;
  let options;
  function onSettings(_settings) {
    $$invalidate(1, items = settings.items ?? []);
    $$invalidate(2, options = settings.options ?? { cellHeight: 50, column: 12, float: true });
  }
  function updateItems(_items) {
    $$invalidate(1, items = [..._items]);
    $$invalidate(5, settings = { ...settings, items });
    dispatch("settings", settings);
  }
  function addCard() {
    const card = info$k.create();
    const item = {
      id: settings.id,
      settings: card,
      position: {}
    };
    $$invalidate(1, items = [...items, item]);
    $$invalidate(5, settings = { ...settings, items });
    dispatch("settings", settings);
  }
  const click_handler = (e2) => addCard();
  const items_handler = (e2) => updateItems(e2.detail);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(5, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(0, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    32) {
      onSettings();
    }
  };
  return [
    context,
    items,
    options,
    updateItems,
    addCard,
    settings,
    click_handler,
    items_handler
  ];
}
class GridWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$Y, create_fragment$Y, safe_not_equal, { settings: 5, context: 0 });
  }
}
const info$e = {
  type: "grid",
  label: "Grid",
  icon: mdiGrid,
  category: "layout",
  widget: GridWidget,
  editor: GridEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "grid", version: 1 }),
  migration: (e2) => e2
};
function create_fragment$X(ctx) {
  let label_1;
  let div;
  let span;
  let t0;
  let t1;
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      label_1 = element("label");
      div = element("div");
      span = element("span");
      t0 = text(
        /*label*/
        ctx[1]
      );
      t1 = space();
      input = element("input");
      this.h();
    },
    l(nodes) {
      label_1 = claim_element(nodes, "LABEL", { class: true });
      var label_1_nodes = children(label_1);
      div = claim_element(label_1_nodes, "DIV", { class: true });
      var div_nodes = children(div);
      span = claim_element(div_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(
        span_nodes,
        /*label*/
        ctx[1]
      );
      span_nodes.forEach(detach);
      div_nodes.forEach(detach);
      t1 = claim_space(label_1_nodes);
      input = claim_element(label_1_nodes, "INPUT", {
        type: true,
        class: true,
        placeholder: true
      });
      label_1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text");
      attr(div, "class", "label");
      attr(input, "type", "number");
      attr(input, "class", "input w-full");
      attr(
        input,
        "placeholder",
        /*placeholder*/
        ctx[2]
      );
      attr(label_1, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label_1, anchor);
      append_hydration(label_1, div);
      append_hydration(div, span);
      append_hydration(span, t0);
      append_hydration(label_1, t1);
      append_hydration(label_1, input);
      set_input_value(
        input,
        /*value*/
        ctx[0]
      );
      if (!mounted) {
        dispose = listen(
          input,
          "input",
          /*input_input_handler*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*label*/
      2)
        set_data(
          t0,
          /*label*/
          ctx2[1]
        );
      if (dirty & /*placeholder*/
      4) {
        attr(
          input,
          "placeholder",
          /*placeholder*/
          ctx2[2]
        );
      }
      if (dirty & /*value*/
      1 && to_number(input.value) !== /*value*/
      ctx2[0]) {
        set_input_value(
          input,
          /*value*/
          ctx2[0]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label_1);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$X($$self, $$props, $$invalidate) {
  let { label } = $$props;
  let { placeholder } = $$props;
  let { value } = $$props;
  function input_input_handler() {
    value = to_number(this.value);
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
    if ("placeholder" in $$props2)
      $$invalidate(2, placeholder = $$props2.placeholder);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
  };
  return [value, label, placeholder, input_input_handler];
}
class NumberPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$X, create_fragment$X, safe_not_equal, { label: 1, placeholder: 2, value: 0 });
  }
}
function create_fragment$W(ctx) {
  let textpicker;
  let updating_value;
  let t0;
  let numberpicker0;
  let updating_value_1;
  let t1;
  let numberpicker1;
  let updating_value_2;
  let t2;
  let p;
  let textContent = "The iframe is by default completly sandboxed. This means that it cannot run scripts or escape the sandbox. \r\n    Most likely you will have to enable one of more of these in order to make your content work properly. \r\n    This reduces security, so only do it for sources you trust.";
  let t4;
  let div0;
  let label0;
  let span0;
  let textContent_1 = "Allow to run scripts";
  let t6;
  let input0;
  let t7;
  let div1;
  let label1;
  let span1;
  let textContent_2 = "Allow form submission";
  let t9;
  let input1;
  let t10;
  let div2;
  let label2;
  let span2;
  let textContent_3 = "Allow to open modal windows";
  let t12;
  let input2;
  let t13;
  let div3;
  let label3;
  let span3;
  let textContent_4 = "Allows to lock the screen orientation";
  let t15;
  let input3;
  let t16;
  let div4;
  let label4;
  let span4;
  let textContent_5 = "Allows to use the Pointer Lock API";
  let t18;
  let input4;
  let t19;
  let div5;
  let label5;
  let span5;
  let textContent_6 = "Allows popups";
  let t21;
  let input5;
  let t22;
  let div6;
  let label6;
  let span6;
  let textContent_7 = "Allows popups to open new windows without inheriting the sandboxing";
  let t24;
  let input6;
  let t25;
  let div7;
  let label7;
  let span7;
  let textContent_8 = "Allows to start a presentation session";
  let t27;
  let input7;
  let t28;
  let div8;
  let label8;
  let span8;
  let textContent_9 = "Allows the iframe content to be treated as being from the same origin";
  let t30;
  let input8;
  let t31;
  let div9;
  let label9;
  let span9;
  let textContent_10 = "Allows the iframe content to navigate its top-level browsing context";
  let t33;
  let input9;
  let t34;
  let div10;
  let label10;
  let span10;
  let textContent_11 = "Allows the iframe content to navigate its top-level browsing context, but only if initiated by user";
  let t36;
  let input10;
  let current;
  let mounted;
  let dispose;
  function textpicker_value_binding(value) {
    ctx[15](value);
  }
  let textpicker_props = { label: "Url", placeholder: "Url" };
  if (
    /*url*/
    ctx[0] !== void 0
  ) {
    textpicker_props.value = /*url*/
    ctx[0];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  function numberpicker0_value_binding(value) {
    ctx[16](value);
  }
  let numberpicker0_props = { label: "Height", placeholder: "Height" };
  if (
    /*height*/
    ctx[1] !== void 0
  ) {
    numberpicker0_props.value = /*height*/
    ctx[1];
  }
  numberpicker0 = new NumberPicker({ props: numberpicker0_props });
  binding_callbacks.push(() => bind(numberpicker0, "value", numberpicker0_value_binding));
  function numberpicker1_value_binding(value) {
    ctx[17](value);
  }
  let numberpicker1_props = { label: "Width", placeholder: "Width" };
  if (
    /*width*/
    ctx[2] !== void 0
  ) {
    numberpicker1_props.value = /*width*/
    ctx[2];
  }
  numberpicker1 = new NumberPicker({ props: numberpicker1_props });
  binding_callbacks.push(() => bind(numberpicker1, "value", numberpicker1_value_binding));
  return {
    c() {
      create_component(textpicker.$$.fragment);
      t0 = space();
      create_component(numberpicker0.$$.fragment);
      t1 = space();
      create_component(numberpicker1.$$.fragment);
      t2 = space();
      p = element("p");
      p.textContent = textContent;
      t4 = space();
      div0 = element("div");
      label0 = element("label");
      span0 = element("span");
      span0.textContent = textContent_1;
      t6 = space();
      input0 = element("input");
      t7 = space();
      div1 = element("div");
      label1 = element("label");
      span1 = element("span");
      span1.textContent = textContent_2;
      t9 = space();
      input1 = element("input");
      t10 = space();
      div2 = element("div");
      label2 = element("label");
      span2 = element("span");
      span2.textContent = textContent_3;
      t12 = space();
      input2 = element("input");
      t13 = space();
      div3 = element("div");
      label3 = element("label");
      span3 = element("span");
      span3.textContent = textContent_4;
      t15 = space();
      input3 = element("input");
      t16 = space();
      div4 = element("div");
      label4 = element("label");
      span4 = element("span");
      span4.textContent = textContent_5;
      t18 = space();
      input4 = element("input");
      t19 = space();
      div5 = element("div");
      label5 = element("label");
      span5 = element("span");
      span5.textContent = textContent_6;
      t21 = space();
      input5 = element("input");
      t22 = space();
      div6 = element("div");
      label6 = element("label");
      span6 = element("span");
      span6.textContent = textContent_7;
      t24 = space();
      input6 = element("input");
      t25 = space();
      div7 = element("div");
      label7 = element("label");
      span7 = element("span");
      span7.textContent = textContent_8;
      t27 = space();
      input7 = element("input");
      t28 = space();
      div8 = element("div");
      label8 = element("label");
      span8 = element("span");
      span8.textContent = textContent_9;
      t30 = space();
      input8 = element("input");
      t31 = space();
      div9 = element("div");
      label9 = element("label");
      span9 = element("span");
      span9.textContent = textContent_10;
      t33 = space();
      input9 = element("input");
      t34 = space();
      div10 = element("div");
      label10 = element("label");
      span10 = element("span");
      span10.textContent = textContent_11;
      t36 = space();
      input10 = element("input");
      this.h();
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(numberpicker0.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(numberpicker1.$$.fragment, nodes);
      t2 = claim_space(nodes);
      p = claim_element(nodes, "P", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(p) !== "svelte-1ju21ka")
        p.textContent = textContent;
      t4 = claim_space(nodes);
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      label0 = claim_element(div0_nodes, "LABEL", { class: true });
      var label0_nodes = children(label0);
      span0 = claim_element(label0_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span0) !== "svelte-1kux4cm")
        span0.textContent = textContent_1;
      t6 = claim_space(label0_nodes);
      input0 = claim_element(label0_nodes, "INPUT", { type: true, class: true });
      label0_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t7 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      label1 = claim_element(div1_nodes, "LABEL", { class: true });
      var label1_nodes = children(label1);
      span1 = claim_element(label1_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span1) !== "svelte-13vuto0")
        span1.textContent = textContent_2;
      t9 = claim_space(label1_nodes);
      input1 = claim_element(label1_nodes, "INPUT", { type: true, class: true });
      label1_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t10 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      label2 = claim_element(div2_nodes, "LABEL", { class: true });
      var label2_nodes = children(label2);
      span2 = claim_element(label2_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span2) !== "svelte-ztx3op")
        span2.textContent = textContent_3;
      t12 = claim_space(label2_nodes);
      input2 = claim_element(label2_nodes, "INPUT", { type: true, class: true });
      label2_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      t13 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      label3 = claim_element(div3_nodes, "LABEL", { class: true });
      var label3_nodes = children(label3);
      span3 = claim_element(label3_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span3) !== "svelte-x7kh5y")
        span3.textContent = textContent_4;
      t15 = claim_space(label3_nodes);
      input3 = claim_element(label3_nodes, "INPUT", { type: true, class: true });
      label3_nodes.forEach(detach);
      div3_nodes.forEach(detach);
      t16 = claim_space(nodes);
      div4 = claim_element(nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      label4 = claim_element(div4_nodes, "LABEL", { class: true });
      var label4_nodes = children(label4);
      span4 = claim_element(label4_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span4) !== "svelte-ksga60")
        span4.textContent = textContent_5;
      t18 = claim_space(label4_nodes);
      input4 = claim_element(label4_nodes, "INPUT", { type: true, class: true });
      label4_nodes.forEach(detach);
      div4_nodes.forEach(detach);
      t19 = claim_space(nodes);
      div5 = claim_element(nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      label5 = claim_element(div5_nodes, "LABEL", { class: true });
      var label5_nodes = children(label5);
      span5 = claim_element(label5_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span5) !== "svelte-s9vp82")
        span5.textContent = textContent_6;
      t21 = claim_space(label5_nodes);
      input5 = claim_element(label5_nodes, "INPUT", { type: true, class: true });
      label5_nodes.forEach(detach);
      div5_nodes.forEach(detach);
      t22 = claim_space(nodes);
      div6 = claim_element(nodes, "DIV", { class: true });
      var div6_nodes = children(div6);
      label6 = claim_element(div6_nodes, "LABEL", { class: true });
      var label6_nodes = children(label6);
      span6 = claim_element(label6_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span6) !== "svelte-1dyjamt")
        span6.textContent = textContent_7;
      t24 = claim_space(label6_nodes);
      input6 = claim_element(label6_nodes, "INPUT", { type: true, class: true });
      label6_nodes.forEach(detach);
      div6_nodes.forEach(detach);
      t25 = claim_space(nodes);
      div7 = claim_element(nodes, "DIV", { class: true });
      var div7_nodes = children(div7);
      label7 = claim_element(div7_nodes, "LABEL", { class: true });
      var label7_nodes = children(label7);
      span7 = claim_element(label7_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span7) !== "svelte-1b7iuc3")
        span7.textContent = textContent_8;
      t27 = claim_space(label7_nodes);
      input7 = claim_element(label7_nodes, "INPUT", { type: true, class: true });
      label7_nodes.forEach(detach);
      div7_nodes.forEach(detach);
      t28 = claim_space(nodes);
      div8 = claim_element(nodes, "DIV", { class: true });
      var div8_nodes = children(div8);
      label8 = claim_element(div8_nodes, "LABEL", { class: true });
      var label8_nodes = children(label8);
      span8 = claim_element(label8_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span8) !== "svelte-12zq1b8")
        span8.textContent = textContent_9;
      t30 = claim_space(label8_nodes);
      input8 = claim_element(label8_nodes, "INPUT", { type: true, class: true });
      label8_nodes.forEach(detach);
      div8_nodes.forEach(detach);
      t31 = claim_space(nodes);
      div9 = claim_element(nodes, "DIV", { class: true });
      var div9_nodes = children(div9);
      label9 = claim_element(div9_nodes, "LABEL", { class: true });
      var label9_nodes = children(label9);
      span9 = claim_element(label9_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span9) !== "svelte-1btee5d")
        span9.textContent = textContent_10;
      t33 = claim_space(label9_nodes);
      input9 = claim_element(label9_nodes, "INPUT", { type: true, class: true });
      label9_nodes.forEach(detach);
      div9_nodes.forEach(detach);
      t34 = claim_space(nodes);
      div10 = claim_element(nodes, "DIV", { class: true });
      var div10_nodes = children(div10);
      label10 = claim_element(div10_nodes, "LABEL", { class: true });
      var label10_nodes = children(label10);
      span10 = claim_element(label10_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span10) !== "svelte-1cbawpu")
        span10.textContent = textContent_11;
      t36 = claim_space(label10_nodes);
      input10 = claim_element(label10_nodes, "INPUT", { type: true, class: true });
      label10_nodes.forEach(detach);
      div10_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(p, "class", "m-4");
      attr(span0, "class", "label-text");
      attr(input0, "type", "checkbox");
      attr(input0, "class", "toggle");
      attr(label0, "class", "label cursor-pointer");
      attr(div0, "class", "form-control w-full");
      attr(span1, "class", "label-text");
      attr(input1, "type", "checkbox");
      attr(input1, "class", "toggle");
      attr(label1, "class", "label cursor-pointer");
      attr(div1, "class", "form-control w-full");
      attr(span2, "class", "label-text");
      attr(input2, "type", "checkbox");
      attr(input2, "class", "toggle");
      attr(label2, "class", "label cursor-pointer");
      attr(div2, "class", "form-control w-full");
      attr(span3, "class", "label-text");
      attr(input3, "type", "checkbox");
      attr(input3, "class", "toggle");
      attr(label3, "class", "label cursor-pointer");
      attr(div3, "class", "form-control w-full");
      attr(span4, "class", "label-text");
      attr(input4, "type", "checkbox");
      attr(input4, "class", "toggle");
      attr(label4, "class", "label cursor-pointer");
      attr(div4, "class", "form-control w-full");
      attr(span5, "class", "label-text");
      attr(input5, "type", "checkbox");
      attr(input5, "class", "toggle");
      attr(label5, "class", "label cursor-pointer");
      attr(div5, "class", "form-control w-full");
      attr(span6, "class", "label-text");
      attr(input6, "type", "checkbox");
      attr(input6, "class", "toggle");
      attr(label6, "class", "label cursor-pointer");
      attr(div6, "class", "form-control w-full");
      attr(span7, "class", "label-text");
      attr(input7, "type", "checkbox");
      attr(input7, "class", "toggle");
      attr(label7, "class", "label cursor-pointer");
      attr(div7, "class", "form-control w-full");
      attr(span8, "class", "label-text");
      attr(input8, "type", "checkbox");
      attr(input8, "class", "toggle");
      attr(label8, "class", "label cursor-pointer");
      attr(div8, "class", "form-control w-full");
      attr(span9, "class", "label-text");
      attr(input9, "type", "checkbox");
      attr(input9, "class", "toggle");
      attr(label9, "class", "label cursor-pointer");
      attr(div9, "class", "form-control w-full");
      attr(span10, "class", "label-text");
      attr(input10, "type", "checkbox");
      attr(input10, "class", "toggle");
      attr(label10, "class", "label cursor-pointer");
      attr(div10, "class", "form-control w-full");
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(numberpicker0, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(numberpicker1, target, anchor);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, p, anchor);
      insert_hydration(target, t4, anchor);
      insert_hydration(target, div0, anchor);
      append_hydration(div0, label0);
      append_hydration(label0, span0);
      append_hydration(label0, t6);
      append_hydration(label0, input0);
      input0.checked = /*allowScripts*/
      ctx[11];
      insert_hydration(target, t7, anchor);
      insert_hydration(target, div1, anchor);
      append_hydration(div1, label1);
      append_hydration(label1, span1);
      append_hydration(label1, t9);
      append_hydration(label1, input1);
      input1.checked = /*allowForms*/
      ctx[3];
      insert_hydration(target, t10, anchor);
      insert_hydration(target, div2, anchor);
      append_hydration(div2, label2);
      append_hydration(label2, span2);
      append_hydration(label2, t12);
      append_hydration(label2, input2);
      input2.checked = /*allowModals*/
      ctx[4];
      insert_hydration(target, t13, anchor);
      insert_hydration(target, div3, anchor);
      append_hydration(div3, label3);
      append_hydration(label3, span3);
      append_hydration(label3, t15);
      append_hydration(label3, input3);
      input3.checked = /*allowOrientationLock*/
      ctx[5];
      insert_hydration(target, t16, anchor);
      insert_hydration(target, div4, anchor);
      append_hydration(div4, label4);
      append_hydration(label4, span4);
      append_hydration(label4, t18);
      append_hydration(label4, input4);
      input4.checked = /*allowPointerLock*/
      ctx[6];
      insert_hydration(target, t19, anchor);
      insert_hydration(target, div5, anchor);
      append_hydration(div5, label5);
      append_hydration(label5, span5);
      append_hydration(label5, t21);
      append_hydration(label5, input5);
      input5.checked = /*allowPopups*/
      ctx[7];
      insert_hydration(target, t22, anchor);
      insert_hydration(target, div6, anchor);
      append_hydration(div6, label6);
      append_hydration(label6, span6);
      append_hydration(label6, t24);
      append_hydration(label6, input6);
      input6.checked = /*allowPopupsToEscapeSandbox*/
      ctx[8];
      insert_hydration(target, t25, anchor);
      insert_hydration(target, div7, anchor);
      append_hydration(div7, label7);
      append_hydration(label7, span7);
      append_hydration(label7, t27);
      append_hydration(label7, input7);
      input7.checked = /*allowPresentation*/
      ctx[9];
      insert_hydration(target, t28, anchor);
      insert_hydration(target, div8, anchor);
      append_hydration(div8, label8);
      append_hydration(label8, span8);
      append_hydration(label8, t30);
      append_hydration(label8, input8);
      input8.checked = /*allowSameOrigin*/
      ctx[10];
      insert_hydration(target, t31, anchor);
      insert_hydration(target, div9, anchor);
      append_hydration(div9, label9);
      append_hydration(label9, span9);
      append_hydration(label9, t33);
      append_hydration(label9, input9);
      input9.checked = /*allowTopNavigation*/
      ctx[12];
      insert_hydration(target, t34, anchor);
      insert_hydration(target, div10, anchor);
      append_hydration(div10, label10);
      append_hydration(label10, span10);
      append_hydration(label10, t36);
      append_hydration(label10, input10);
      input10.checked = /*allowTopLevelNavigationByUserActivation*/
      ctx[13];
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input0,
            "change",
            /*input0_change_handler*/
            ctx[18]
          ),
          listen(
            input1,
            "change",
            /*input1_change_handler*/
            ctx[19]
          ),
          listen(
            input2,
            "change",
            /*input2_change_handler*/
            ctx[20]
          ),
          listen(
            input3,
            "change",
            /*input3_change_handler*/
            ctx[21]
          ),
          listen(
            input4,
            "change",
            /*input4_change_handler*/
            ctx[22]
          ),
          listen(
            input5,
            "change",
            /*input5_change_handler*/
            ctx[23]
          ),
          listen(
            input6,
            "change",
            /*input6_change_handler*/
            ctx[24]
          ),
          listen(
            input7,
            "change",
            /*input7_change_handler*/
            ctx[25]
          ),
          listen(
            input8,
            "change",
            /*input8_change_handler*/
            ctx[26]
          ),
          listen(
            input9,
            "change",
            /*input9_change_handler*/
            ctx[27]
          ),
          listen(
            input10,
            "change",
            /*input10_change_handler*/
            ctx[28]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const textpicker_changes = {};
      if (!updating_value && dirty[0] & /*url*/
      1) {
        updating_value = true;
        textpicker_changes.value = /*url*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
      const numberpicker0_changes = {};
      if (!updating_value_1 && dirty[0] & /*height*/
      2) {
        updating_value_1 = true;
        numberpicker0_changes.value = /*height*/
        ctx2[1];
        add_flush_callback(() => updating_value_1 = false);
      }
      numberpicker0.$set(numberpicker0_changes);
      const numberpicker1_changes = {};
      if (!updating_value_2 && dirty[0] & /*width*/
      4) {
        updating_value_2 = true;
        numberpicker1_changes.value = /*width*/
        ctx2[2];
        add_flush_callback(() => updating_value_2 = false);
      }
      numberpicker1.$set(numberpicker1_changes);
      if (dirty[0] & /*allowScripts*/
      2048) {
        input0.checked = /*allowScripts*/
        ctx2[11];
      }
      if (dirty[0] & /*allowForms*/
      8) {
        input1.checked = /*allowForms*/
        ctx2[3];
      }
      if (dirty[0] & /*allowModals*/
      16) {
        input2.checked = /*allowModals*/
        ctx2[4];
      }
      if (dirty[0] & /*allowOrientationLock*/
      32) {
        input3.checked = /*allowOrientationLock*/
        ctx2[5];
      }
      if (dirty[0] & /*allowPointerLock*/
      64) {
        input4.checked = /*allowPointerLock*/
        ctx2[6];
      }
      if (dirty[0] & /*allowPopups*/
      128) {
        input5.checked = /*allowPopups*/
        ctx2[7];
      }
      if (dirty[0] & /*allowPopupsToEscapeSandbox*/
      256) {
        input6.checked = /*allowPopupsToEscapeSandbox*/
        ctx2[8];
      }
      if (dirty[0] & /*allowPresentation*/
      512) {
        input7.checked = /*allowPresentation*/
        ctx2[9];
      }
      if (dirty[0] & /*allowSameOrigin*/
      1024) {
        input8.checked = /*allowSameOrigin*/
        ctx2[10];
      }
      if (dirty[0] & /*allowTopNavigation*/
      4096) {
        input9.checked = /*allowTopNavigation*/
        ctx2[12];
      }
      if (dirty[0] & /*allowTopLevelNavigationByUserActivation*/
      8192) {
        input10.checked = /*allowTopLevelNavigationByUserActivation*/
        ctx2[13];
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      transition_in(numberpicker0.$$.fragment, local);
      transition_in(numberpicker1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      transition_out(numberpicker0.$$.fragment, local);
      transition_out(numberpicker1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(p);
        detach(t4);
        detach(div0);
        detach(t7);
        detach(div1);
        detach(t10);
        detach(div2);
        detach(t13);
        detach(div3);
        detach(t16);
        detach(div4);
        detach(t19);
        detach(div5);
        detach(t22);
        detach(div6);
        detach(t25);
        detach(div7);
        detach(t28);
        detach(div8);
        detach(t31);
        detach(div9);
        detach(t34);
        detach(div10);
      }
      destroy_component(textpicker, detaching);
      destroy_component(numberpicker0, detaching);
      destroy_component(numberpicker1, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$W($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let url;
  let height;
  let width;
  let allowForms;
  let allowModals;
  let allowOrientationLock;
  let allowPointerLock;
  let allowPopups;
  let allowPopupsToEscapeSandbox;
  let allowPresentation;
  let allowSameOrigin;
  let allowScripts;
  let allowTopNavigation;
  let allowTopLevelNavigationByUserActivation;
  function onSettings(s3) {
    $$invalidate(0, url = s3 == null ? void 0 : s3.url);
    $$invalidate(1, height = s3 == null ? void 0 : s3.height);
    $$invalidate(2, width = s3 == null ? void 0 : s3.width);
    $$invalidate(3, allowForms = s3 == null ? void 0 : s3.allowForms);
    $$invalidate(4, allowModals = s3 == null ? void 0 : s3.allowModals);
    $$invalidate(5, allowOrientationLock = s3 == null ? void 0 : s3.allowOrientationLock);
    $$invalidate(6, allowPointerLock = s3 == null ? void 0 : s3.allowPointerLock);
    $$invalidate(7, allowPopups = s3 == null ? void 0 : s3.allowPopups);
    $$invalidate(8, allowPopupsToEscapeSandbox = s3 == null ? void 0 : s3.allowPopupsToEscapeSandbox);
    $$invalidate(9, allowPresentation = s3 == null ? void 0 : s3.allowPresentation);
    $$invalidate(10, allowSameOrigin = s3 == null ? void 0 : s3.allowSameOrigin);
    $$invalidate(11, allowScripts = s3 == null ? void 0 : s3.allowScripts);
    $$invalidate(12, allowTopNavigation = s3 == null ? void 0 : s3.allowTopNavigation);
    $$invalidate(13, allowTopLevelNavigationByUserActivation = s3 == null ? void 0 : s3.allowTopLevelNavigationByUserActivation);
  }
  function onChange(_url, _height, _width, _allowForms, _allowModals, _allowOrientationLock, _allowPointerLock, _allowPopups, _allowPopupsToEscapeSandbox, _allowPresentation, _allowSameOrigin, _allowScripts, _allowTopNavigation, _allowTopLevelNavigationByUserActivation) {
    if (_url !== settings.url || _height !== settings.height || _width !== settings.width || _allowForms !== settings.allowForms || _allowModals !== settings.allowModals || _allowOrientationLock !== settings.allowOrientationLock || _allowPointerLock !== settings.allowPointerLock || _allowPopups !== settings.allowPopups || _allowPopupsToEscapeSandbox !== settings.allowPopupsToEscapeSandbox || _allowPresentation !== settings.allowPresentation || _allowSameOrigin !== settings.allowSameOrigin || _allowScripts !== settings.allowScripts || _allowTopNavigation !== settings.allowTopNavigation || _allowTopLevelNavigationByUserActivation !== settings.allowTopLevelNavigationByUserActivation) {
      dispatch("settings", {
        ...settings,
        url: _url,
        height: _height,
        width: _width,
        allowForms: _allowForms,
        allowModals: _allowModals,
        allowOrientationLock: _allowOrientationLock,
        allowPointerLock: _allowPointerLock,
        allowPopups: _allowPopups,
        allowPopupsToEscapeSandbox: _allowPopupsToEscapeSandbox,
        allowPresentation: _allowPresentation,
        allowSameOrigin: _allowSameOrigin,
        allowScripts: _allowScripts,
        allowTopNavigation: _allowTopNavigation,
        allowTopLevelNavigationByUserActivation: _allowTopLevelNavigationByUserActivation
      });
    }
  }
  function textpicker_value_binding(value) {
    url = value;
    $$invalidate(0, url);
  }
  function numberpicker0_value_binding(value) {
    height = value;
    $$invalidate(1, height);
  }
  function numberpicker1_value_binding(value) {
    width = value;
    $$invalidate(2, width);
  }
  function input0_change_handler() {
    allowScripts = this.checked;
    $$invalidate(11, allowScripts);
  }
  function input1_change_handler() {
    allowForms = this.checked;
    $$invalidate(3, allowForms);
  }
  function input2_change_handler() {
    allowModals = this.checked;
    $$invalidate(4, allowModals);
  }
  function input3_change_handler() {
    allowOrientationLock = this.checked;
    $$invalidate(5, allowOrientationLock);
  }
  function input4_change_handler() {
    allowPointerLock = this.checked;
    $$invalidate(6, allowPointerLock);
  }
  function input5_change_handler() {
    allowPopups = this.checked;
    $$invalidate(7, allowPopups);
  }
  function input6_change_handler() {
    allowPopupsToEscapeSandbox = this.checked;
    $$invalidate(8, allowPopupsToEscapeSandbox);
  }
  function input7_change_handler() {
    allowPresentation = this.checked;
    $$invalidate(9, allowPresentation);
  }
  function input8_change_handler() {
    allowSameOrigin = this.checked;
    $$invalidate(10, allowSameOrigin);
  }
  function input9_change_handler() {
    allowTopNavigation = this.checked;
    $$invalidate(12, allowTopNavigation);
  }
  function input10_change_handler() {
    allowTopLevelNavigationByUserActivation = this.checked;
    $$invalidate(13, allowTopLevelNavigationByUserActivation);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(14, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*settings*/
    16384) {
      onSettings(settings);
    }
    if ($$self.$$.dirty[0] & /*url, height, width, allowForms, allowModals, allowOrientationLock, allowPointerLock, allowPopups, allowPopupsToEscapeSandbox, allowPresentation, allowSameOrigin, allowScripts, allowTopNavigation, allowTopLevelNavigationByUserActivation*/
    16383) {
      onChange(url, height, width, allowForms, allowModals, allowOrientationLock, allowPointerLock, allowPopups, allowPopupsToEscapeSandbox, allowPresentation, allowSameOrigin, allowScripts, allowTopNavigation, allowTopLevelNavigationByUserActivation);
    }
  };
  return [
    url,
    height,
    width,
    allowForms,
    allowModals,
    allowOrientationLock,
    allowPointerLock,
    allowPopups,
    allowPopupsToEscapeSandbox,
    allowPresentation,
    allowSameOrigin,
    allowScripts,
    allowTopNavigation,
    allowTopLevelNavigationByUserActivation,
    settings,
    textpicker_value_binding,
    numberpicker0_value_binding,
    numberpicker1_value_binding,
    input0_change_handler,
    input1_change_handler,
    input2_change_handler,
    input3_change_handler,
    input4_change_handler,
    input5_change_handler,
    input6_change_handler,
    input7_change_handler,
    input8_change_handler,
    input9_change_handler,
    input10_change_handler
  ];
}
class IframeEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$W, create_fragment$W, safe_not_equal, { settings: 14 }, null, [-1, -1]);
  }
}
function create_else_block$k(ctx) {
  let div;
  let iframe;
  let iframe_title_value;
  let iframe_src_value;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      iframe = element("iframe");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      iframe = claim_element(div_nodes, "IFRAME", {
        style: true,
        title: true,
        src: true,
        sandbox: true
      });
      children(iframe).forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(
        iframe,
        "style",
        /*style*/
        ctx[2]
      );
      attr(iframe, "title", iframe_title_value = /*settings*/
      ctx[0].url);
      if (!src_url_equal(iframe.src, iframe_src_value = /*settings*/
      ctx[0].url))
        attr(iframe, "src", iframe_src_value);
      attr(
        iframe,
        "sandbox",
        /*sandbox*/
        ctx[1]
      );
      attr(div, "class", "w-full h-full flex justify-center items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, iframe);
      if (!mounted) {
        dispose = listen(
          div,
          "click",
          /*click_handler*/
          ctx[5]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*style*/
      4) {
        attr(
          iframe,
          "style",
          /*style*/
          ctx2[2]
        );
      }
      if (dirty & /*settings*/
      1 && iframe_title_value !== (iframe_title_value = /*settings*/
      ctx2[0].url)) {
        attr(iframe, "title", iframe_title_value);
      }
      if (dirty & /*settings*/
      1 && !src_url_equal(iframe.src, iframe_src_value = /*settings*/
      ctx2[0].url)) {
        attr(iframe, "src", iframe_src_value);
      }
      if (dirty & /*sandbox*/
      2) {
        attr(
          iframe,
          "sandbox",
          /*sandbox*/
          ctx2[1]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$y(ctx) {
  let span;
  let textContent = "Iframe not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-dnotqz")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$V(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].url === void 0
    )
      return create_if_block$y;
    return create_else_block$k;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function getSize(s3) {
  let result = "";
  if (s3.width) {
    result += "width: " + s3.width + "px;";
  } else {
    result += "width: 100%;";
  }
  if (s3.height) {
    result += "height: " + s3.height + "px;";
  } else {
    result += "height: 100%;";
  }
  return result;
}
function getSandbox(s3) {
  let result = "";
  if (s3.allowForms) {
    result += "allow-forms ";
  }
  if (s3.allowModals) {
    result += "allow-modals ";
  }
  if (s3.allowOrientationLock) {
    result += "allow-orientation-lock ";
  }
  if (s3.allowPopups) {
    result += "allow-popups ";
  }
  if (s3.allowPopupsToEscapeSandbox) {
    result += "allow-popups-to-escape-sandbox ";
  }
  if (s3.allowPresentation) {
    result += "allow-presentation ";
  }
  if (s3.allowSameOrigin) {
    result += "allow-same-origin ";
  }
  if (s3.allowScripts) {
    result += "allow-scripts ";
  }
  if (s3.allowTopNavigation) {
    result += "allow-top-navigation ";
  }
  if (s3.allowTopLevelNavigationByUserActivation) {
    result += "allow-top-navigation-by-user-activation ";
  }
  return result;
}
function instance$V($$self, $$props, $$invalidate) {
  let style;
  let sandbox;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(3, $editing = $$value));
  let { context } = $$props;
  let { settings } = $$props;
  const click_handler = (e2) => {
    if (!$editing) {
      e2.stopPropagation();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(4, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(2, style = getSize(settings));
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(1, sandbox = getSandbox(settings));
    }
  };
  return [settings, sandbox, style, $editing, context, click_handler];
}
class IframeWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$V, create_fragment$V, safe_not_equal, { context: 4, settings: 0 });
  }
}
const info$d = {
  type: "iframe",
  label: "Iframe",
  icon: mdiImageFrame,
  category: "component",
  widget: IframeWidget,
  editor: IframeEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "iframe", version: 1 }),
  migration: (e2) => e2
};
function get_each_context$c(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i2];
  return child_ctx;
}
function create_if_block_1$m(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Image</span>`;
  let t1;
  let select;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*images*/
    ctx[6]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$c(get_each_context$c(ctx, each_value, i2));
  }
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-zff7i8")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true });
      var select_nodes = children(select);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(select_nodes);
      }
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      attr(select, "class", "select");
      if (
        /*imageId*/
        ctx[1] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler*/
          ctx[10].call(select)
        ));
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(select, null);
        }
      }
      select_option(
        select,
        /*imageId*/
        ctx[1],
        true
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*select_change_handler*/
          ctx[10]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*images*/
      64) {
        each_value = ensure_array_like(
          /*images*/
          ctx2[6]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$c(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block$c(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(select, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & /*imageId, images*/
      66) {
        select_option(
          select,
          /*imageId*/
          ctx2[1]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$c(ctx) {
  let option;
  let t_value = (
    /*image*/
    ctx[20].title + ""
  );
  let t2;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", {});
      var option_nodes = children(option);
      t2 = claim_text(option_nodes, t_value);
      option_nodes.forEach(detach);
      this.h();
    },
    h() {
      option.__value = option_value_value = /*image*/
      ctx[20].id;
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
      append_hydration(option, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*images*/
      64 && t_value !== (t_value = /*image*/
      ctx2[20].title + ""))
        set_data(t2, t_value);
      if (dirty & /*images*/
      64 && option_value_value !== (option_value_value = /*image*/
      ctx2[20].id)) {
        option.__value = option_value_value;
        set_input_value(option, option.__value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block$x(ctx) {
  let div0;
  let label0;
  let span0;
  let textContent = "Blur background";
  let t1;
  let input;
  let t2;
  let label1;
  let div1;
  let textContent_1 = `<span class="label-text">Color</span>`;
  let t4;
  let select;
  let option0;
  let textContent_2 = "Black";
  let option1;
  let textContent_3 = "White";
  let option2;
  let textContent_4 = "Red";
  let option3;
  let textContent_5 = "Green";
  let option4;
  let textContent_6 = "Blue";
  let mounted;
  let dispose;
  return {
    c() {
      div0 = element("div");
      label0 = element("label");
      span0 = element("span");
      span0.textContent = textContent;
      t1 = space();
      input = element("input");
      t2 = space();
      label1 = element("label");
      div1 = element("div");
      div1.innerHTML = textContent_1;
      t4 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_2;
      option1 = element("option");
      option1.textContent = textContent_3;
      option2 = element("option");
      option2.textContent = textContent_4;
      option3 = element("option");
      option3.textContent = textContent_5;
      option4 = element("option");
      option4.textContent = textContent_6;
      this.h();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      label0 = claim_element(div0_nodes, "LABEL", { class: true });
      var label0_nodes = children(label0);
      span0 = claim_element(label0_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span0) !== "svelte-1x1aukg")
        span0.textContent = textContent;
      t1 = claim_space(label0_nodes);
      input = claim_element(label0_nodes, "INPUT", { type: true, class: true });
      label0_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t2 = claim_space(nodes);
      label1 = claim_element(nodes, "LABEL", { class: true });
      var label1_nodes = children(label1);
      div1 = claim_element(label1_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div1) !== "svelte-rueeiq")
        div1.innerHTML = textContent_1;
      t4 = claim_space(label1_nodes);
      select = claim_element(label1_nodes, "SELECT", { class: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-1r17tfo")
        option0.textContent = textContent_2;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-qdw5dk")
        option1.textContent = textContent_3;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-crfz20")
        option2.textContent = textContent_4;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-m7ul9o")
        option3.textContent = textContent_5;
      option4 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-179w4tq")
        option4.textContent = textContent_6;
      select_nodes.forEach(detach);
      label1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span0, "class", "label-text");
      attr(input, "type", "checkbox");
      attr(input, "class", "toggle");
      attr(label0, "class", "label cursor-pointer");
      attr(div0, "class", "form-control");
      attr(div1, "class", "label");
      option0.__value = "black";
      set_input_value(option0, option0.__value);
      option1.__value = "white";
      set_input_value(option1, option1.__value);
      option2.__value = "red";
      set_input_value(option2, option2.__value);
      option3.__value = "green";
      set_input_value(option3, option3.__value);
      option4.__value = "blue";
      set_input_value(option4, option4.__value);
      attr(select, "class", "select");
      if (
        /*fontColor*/
        ctx[4] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler_2*/
          ctx[14].call(select)
        ));
      attr(label1, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      append_hydration(div0, label0);
      append_hydration(label0, span0);
      append_hydration(label0, t1);
      append_hydration(label0, input);
      input.checked = /*fontBlur*/
      ctx[5];
      insert_hydration(target, t2, anchor);
      insert_hydration(target, label1, anchor);
      append_hydration(label1, div1);
      append_hydration(label1, t4);
      append_hydration(label1, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      append_hydration(select, option4);
      select_option(
        select,
        /*fontColor*/
        ctx[4],
        true
      );
      if (!mounted) {
        dispose = [
          listen(
            input,
            "change",
            /*input_change_handler_1*/
            ctx[13]
          ),
          listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[14]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*fontBlur*/
      32) {
        input.checked = /*fontBlur*/
        ctx2[5];
      }
      if (dirty & /*fontColor*/
      16) {
        select_option(
          select,
          /*fontColor*/
          ctx2[4]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t2);
        detach(label1);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment$U(ctx) {
  let devicepicker;
  let updating_deviceId;
  let t0;
  let t1;
  let label0;
  let div0;
  let textContent = `<span class="label-text">Refresh every</span>`;
  let t3;
  let select;
  let option0;
  let textContent_1 = "Never";
  let option1;
  let textContent_2 = "1 second";
  let option2;
  let textContent_3 = "5 seconds";
  let option3;
  let textContent_4 = "15 seconds";
  let option4;
  let textContent_5 = "30 seconds";
  let option5;
  let textContent_6 = "1 minute";
  let option6;
  let textContent_7 = "5 minutes";
  let option7;
  let textContent_8 = "10 minutes";
  let option8;
  let textContent_9 = "30 minutes";
  let option9;
  let textContent_10 = "1 hour";
  let option10;
  let textContent_11 = "6 hour";
  let option11;
  let textContent_12 = "12 hour";
  let option12;
  let textContent_13 = "24 hour";
  let t17;
  let div1;
  let label1;
  let span1;
  let textContent_14 = "Hide title";
  let t19;
  let input;
  let t20;
  let if_block1_anchor;
  let current;
  let mounted;
  let dispose;
  function devicepicker_deviceId_binding(value) {
    ctx[9](value);
  }
  let devicepicker_props = { deviceFilter: (
    /*deviceFilter*/
    ctx[7]
  ) };
  if (
    /*deviceId*/
    ctx[0] !== void 0
  ) {
    devicepicker_props.deviceId = /*deviceId*/
    ctx[0];
  }
  devicepicker = new DevicePicker({ props: devicepicker_props });
  binding_callbacks.push(() => bind(devicepicker, "deviceId", devicepicker_deviceId_binding));
  let if_block0 = (
    /*deviceId*/
    ctx[0] && create_if_block_1$m(ctx)
  );
  let if_block1 = !/*hideTitle*/
  ctx[3] && create_if_block$x(ctx);
  return {
    c() {
      create_component(devicepicker.$$.fragment);
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      label0 = element("label");
      div0 = element("div");
      div0.innerHTML = textContent;
      t3 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      option5 = element("option");
      option5.textContent = textContent_6;
      option6 = element("option");
      option6.textContent = textContent_7;
      option7 = element("option");
      option7.textContent = textContent_8;
      option8 = element("option");
      option8.textContent = textContent_9;
      option9 = element("option");
      option9.textContent = textContent_10;
      option10 = element("option");
      option10.textContent = textContent_11;
      option11 = element("option");
      option11.textContent = textContent_12;
      option12 = element("option");
      option12.textContent = textContent_13;
      t17 = space();
      div1 = element("div");
      label1 = element("label");
      span1 = element("span");
      span1.textContent = textContent_14;
      t19 = space();
      input = element("input");
      t20 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      this.h();
    },
    l(nodes) {
      claim_component(devicepicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      if (if_block0)
        if_block0.l(nodes);
      t1 = claim_space(nodes);
      label0 = claim_element(nodes, "LABEL", { class: true });
      var label0_nodes = children(label0);
      div0 = claim_element(label0_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div0) !== "svelte-1inlgl")
        div0.innerHTML = textContent;
      t3 = claim_space(label0_nodes);
      select = claim_element(label0_nodes, "SELECT", { class: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-1p506hw")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-9n2hhu")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-ryol3b")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-vg02tt")
        option3.textContent = textContent_4;
      option4 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-198g51t")
        option4.textContent = textContent_5;
      option5 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-sli1oj")
        option5.textContent = textContent_6;
      option6 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-o8unh5")
        option6.textContent = textContent_7;
      option7 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option7) !== "svelte-7rlkfq")
        option7.textContent = textContent_8;
      option8 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option8) !== "svelte-nl1mff")
        option8.textContent = textContent_9;
      option9 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option9) !== "svelte-1l3mz3o")
        option9.textContent = textContent_10;
      option10 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option10) !== "svelte-oj554t")
        option10.textContent = textContent_11;
      option11 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option11) !== "svelte-xvr02")
        option11.textContent = textContent_12;
      option12 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option12) !== "svelte-1l54zj0")
        option12.textContent = textContent_13;
      select_nodes.forEach(detach);
      label0_nodes.forEach(detach);
      t17 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      label1 = claim_element(div1_nodes, "LABEL", { class: true });
      var label1_nodes = children(label1);
      span1 = claim_element(label1_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span1) !== "svelte-l4ladd")
        span1.textContent = textContent_14;
      t19 = claim_space(label1_nodes);
      input = claim_element(label1_nodes, "INPUT", { type: true, class: true });
      label1_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t20 = claim_space(nodes);
      if (if_block1)
        if_block1.l(nodes);
      if_block1_anchor = empty();
      this.h();
    },
    h() {
      attr(div0, "class", "label");
      option0.__value = "0";
      set_input_value(option0, option0.__value);
      option1.__value = "1";
      set_input_value(option1, option1.__value);
      option2.__value = "5";
      set_input_value(option2, option2.__value);
      option3.__value = "15";
      set_input_value(option3, option3.__value);
      option4.__value = "30";
      set_input_value(option4, option4.__value);
      option5.__value = "60";
      set_input_value(option5, option5.__value);
      option6.__value = "300";
      set_input_value(option6, option6.__value);
      option7.__value = "600";
      set_input_value(option7, option7.__value);
      option8.__value = "1800";
      set_input_value(option8, option8.__value);
      option9.__value = "3600";
      set_input_value(option9, option9.__value);
      option10.__value = "21600";
      set_input_value(option10, option10.__value);
      option11.__value = "43200";
      set_input_value(option11, option11.__value);
      option12.__value = "86400";
      set_input_value(option12, option12.__value);
      attr(select, "class", "select");
      if (
        /*refresh*/
        ctx[2] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler_1*/
          ctx[11].call(select)
        ));
      attr(label0, "class", "form-control w-full");
      attr(span1, "class", "label-text");
      attr(input, "type", "checkbox");
      attr(input, "class", "toggle");
      attr(label1, "class", "label cursor-pointer");
      attr(div1, "class", "form-control");
    },
    m(target, anchor) {
      mount_component(devicepicker, target, anchor);
      insert_hydration(target, t0, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, label0, anchor);
      append_hydration(label0, div0);
      append_hydration(label0, t3);
      append_hydration(label0, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      append_hydration(select, option4);
      append_hydration(select, option5);
      append_hydration(select, option6);
      append_hydration(select, option7);
      append_hydration(select, option8);
      append_hydration(select, option9);
      append_hydration(select, option10);
      append_hydration(select, option11);
      append_hydration(select, option12);
      select_option(
        select,
        /*refresh*/
        ctx[2],
        true
      );
      insert_hydration(target, t17, anchor);
      insert_hydration(target, div1, anchor);
      append_hydration(div1, label1);
      append_hydration(label1, span1);
      append_hydration(label1, t19);
      append_hydration(label1, input);
      input.checked = /*hideTitle*/
      ctx[3];
      insert_hydration(target, t20, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert_hydration(target, if_block1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[11]
          ),
          listen(
            input,
            "change",
            /*input_change_handler*/
            ctx[12]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const devicepicker_changes = {};
      if (!updating_deviceId && dirty & /*deviceId*/
      1) {
        updating_deviceId = true;
        devicepicker_changes.deviceId = /*deviceId*/
        ctx2[0];
        add_flush_callback(() => updating_deviceId = false);
      }
      devicepicker.$set(devicepicker_changes);
      if (
        /*deviceId*/
        ctx2[0]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_1$m(ctx2);
          if_block0.c();
          if_block0.m(t1.parentNode, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & /*refresh*/
      4) {
        select_option(
          select,
          /*refresh*/
          ctx2[2]
        );
      }
      if (dirty & /*hideTitle*/
      8) {
        input.checked = /*hideTitle*/
        ctx2[3];
      }
      if (!/*hideTitle*/
      ctx2[3]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block$x(ctx2);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(devicepicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(devicepicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(label0);
        detach(t17);
        detach(div1);
        detach(t20);
        detach(if_block1_anchor);
      }
      destroy_component(devicepicker, detaching);
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$U($$self, $$props, $$invalidate) {
  let $devices;
  component_subscribe($$self, devices, ($$value) => $$invalidate(15, $devices = $$value));
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let deviceId;
  let imageId;
  let refresh;
  let hideTitle;
  let fontColor;
  let fontBlur;
  const deviceFilter = (device) => device.images.length > 0;
  let images = [];
  function onSettings(s3) {
    $$invalidate(0, deviceId = settings == null ? void 0 : settings.deviceId);
    if (deviceId) {
      const image = ($devices[deviceId].images ?? []).find((i2) => i2.id === (settings == null ? void 0 : settings.imageId));
      if (image !== void 0) {
        $$invalidate(1, imageId = image.id);
      }
    }
    $$invalidate(2, refresh = (settings == null ? void 0 : settings.refresh) ?? 0);
    $$invalidate(3, hideTitle = (settings == null ? void 0 : settings.hideTitle) ?? false);
    $$invalidate(4, fontColor = (settings == null ? void 0 : settings.fontColor) ?? "black");
    $$invalidate(5, fontBlur = (settings == null ? void 0 : settings.fontBlur) ?? false);
  }
  function onChanges(_deviceId, _imageId, _refresh, _hideTitle, _fontColor, _fontBlur) {
    if (_deviceId !== settings.deviceId || _imageId !== settings.imageId || _refresh !== settings.refresh || _hideTitle !== settings.hideTitle || _fontColor !== settings.fontColor || _fontBlur !== settings.fontBlur) {
      $$invalidate(8, settings = {
        ...settings,
        deviceId: _deviceId,
        imageId: _imageId,
        refresh: _refresh,
        hideTitle: _hideTitle,
        fontColor: _fontColor,
        fontBlur: _fontBlur
      });
      dispatch("settings", settings);
    }
  }
  function onDevice(_deviceId) {
    if (_deviceId === void 0) {
      $$invalidate(6, images = []);
      return;
    }
    $$invalidate(6, images = $devices[_deviceId].images);
  }
  function devicepicker_deviceId_binding(value) {
    deviceId = value;
    $$invalidate(0, deviceId);
  }
  function select_change_handler() {
    imageId = select_value(this);
    $$invalidate(1, imageId);
    $$invalidate(6, images);
  }
  function select_change_handler_1() {
    refresh = select_value(this);
    $$invalidate(2, refresh);
  }
  function input_change_handler() {
    hideTitle = this.checked;
    $$invalidate(3, hideTitle);
  }
  function input_change_handler_1() {
    fontBlur = this.checked;
    $$invalidate(5, fontBlur);
  }
  function select_change_handler_2() {
    fontColor = select_value(this);
    $$invalidate(4, fontColor);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(8, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    256) {
      onSettings();
    }
    if ($$self.$$.dirty & /*deviceId*/
    1) {
      onDevice(deviceId);
    }
    if ($$self.$$.dirty & /*deviceId, imageId, refresh, hideTitle, fontColor, fontBlur*/
    63) {
      onChanges(deviceId, imageId, refresh, hideTitle, fontColor, fontBlur);
    }
  };
  return [
    deviceId,
    imageId,
    refresh,
    hideTitle,
    fontColor,
    fontBlur,
    images,
    deviceFilter,
    settings,
    devicepicker_deviceId_binding,
    select_change_handler,
    select_change_handler_1,
    input_change_handler,
    input_change_handler_1,
    select_change_handler_2
  ];
}
class ImageEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$U, create_fragment$U, safe_not_equal, { settings: 8 });
  }
}
function create_else_block_1$5(ctx) {
  let t2;
  let await_block_anchor;
  let promise;
  let if_block = !/*hideTitle*/
  ctx[5] && create_if_block_3$a(ctx);
  let info2 = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$4,
    then: create_then_block$4,
    catch: create_catch_block$4,
    value: 11
  };
  handle_promise(promise = /*$homey*/
  ctx[7].baseUrl, info2);
  return {
    c() {
      if (if_block)
        if_block.c();
      t2 = space();
      await_block_anchor = empty();
      info2.block.c();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
      await_block_anchor = empty();
      info2.block.l(nodes);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, await_block_anchor, anchor);
      info2.block.m(target, info2.anchor = anchor);
      info2.mount = () => await_block_anchor.parentNode;
      info2.anchor = await_block_anchor;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (!/*hideTitle*/
      ctx[5]) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block_3$a(ctx);
          if_block.c();
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      info2.ctx = ctx;
      if (dirty & /*$homey*/
      128 && promise !== (promise = /*$homey*/
      ctx[7].baseUrl) && handle_promise(promise, info2))
        ;
      else {
        update_await_block_branch(info2, ctx, dirty);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(await_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
      info2.block.d(detaching);
      info2.token = null;
      info2 = null;
    }
  };
}
function create_if_block$w(ctx) {
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*device*/
      ctx2[1] === void 0 && /*settings*/
      ctx2[0].deviceId !== void 0
    )
      return create_if_block_1$l;
    if (
      /*image*/
      ctx2[6] === void 0 && /*settings*/
      ctx2[0].imageId !== void 0
    )
      return create_if_block_2$c;
    return create_else_block$j;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_if_block_3$a(ctx) {
  var _a2, _b2;
  let div2;
  let div0;
  let t0_value = (
    /*device*/
    ((_a2 = ctx[1]) == null ? void 0 : _a2.name) + ""
  );
  let t0;
  let t1;
  let div1;
  let t2_value = (
    /*image*/
    ((_b2 = ctx[6]) == null ? void 0 : _b2.title) + ""
  );
  let t2;
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      div2 = claim_element(nodes, "DIV", { class: true, style: true });
      var div2_nodes = children(div2);
      div0 = claim_element(div2_nodes, "DIV", {});
      var div0_nodes = children(div0);
      t0 = claim_text(div0_nodes, t0_value);
      div0_nodes.forEach(detach);
      t1 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      t2 = claim_text(div1_nodes, t2_value);
      div1_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div1, "class", "ml-4 font-extralight");
      attr(div2, "class", "flex pl-2 pb-2 absolute left-0 bottom-0 w-full");
      set_style(
        div2,
        "color",
        /*fontColor*/
        ctx[4]
      );
      toggle_class(
        div2,
        "backdrop-blur",
        /*fontBlur*/
        ctx[3]
      );
    },
    m(target, anchor) {
      insert_hydration(target, div2, anchor);
      append_hydration(div2, div0);
      append_hydration(div0, t0);
      append_hydration(div2, t1);
      append_hydration(div2, div1);
      append_hydration(div1, t2);
    },
    p(ctx2, dirty) {
      var _a3, _b3;
      if (dirty & /*device*/
      2 && t0_value !== (t0_value = /*device*/
      ((_a3 = ctx2[1]) == null ? void 0 : _a3.name) + ""))
        set_data(t0, t0_value);
      if (dirty & /*image*/
      64 && t2_value !== (t2_value = /*image*/
      ((_b3 = ctx2[6]) == null ? void 0 : _b3.title) + ""))
        set_data(t2, t2_value);
      if (dirty & /*fontColor*/
      16) {
        set_style(
          div2,
          "color",
          /*fontColor*/
          ctx2[4]
        );
      }
      if (dirty & /*fontBlur*/
      8) {
        toggle_class(
          div2,
          "backdrop-blur",
          /*fontBlur*/
          ctx2[3]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
    }
  };
}
function create_catch_block$4(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block$4(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
      this.h();
    },
    h() {
      attr(img, "class", "w-full h-full");
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[11] + /*image*/
      ctx[6].imageObj.url + "?v=" + /*refreshSlug*/
      ctx[2]))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*image*/
      ctx[6].title + " refreshed: " + /*refreshSlug*/
      ctx[2]);
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$homey, image, refreshSlug*/
      196 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[11] + /*image*/
      ctx2[6].imageObj.url + "?v=" + /*refreshSlug*/
      ctx2[2])) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*image, refreshSlug*/
      68 && img_alt_value !== (img_alt_value = /*image*/
      ctx2[6].title + " refreshed: " + /*refreshSlug*/
      ctx2[2])) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block$4(ctx) {
  let t2;
  return {
    c() {
      t2 = text("...");
    },
    l(nodes) {
      t2 = claim_text(nodes, "...");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_else_block$j(ctx) {
  let span;
  let textContent = "Image not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1wts2m6")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_2$c(ctx) {
  let span;
  let textContent = "Image not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1be1s2m")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$l(ctx) {
  let span;
  let textContent = "Device not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-izam8p")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$T(ctx) {
  let div;
  function select_block_type(ctx2, dirty) {
    if (
      /*device*/
      ctx2[1] === void 0 || /*image*/
      ctx2[6] === void 0
    )
      return create_if_block$w;
    return create_else_block_1$5;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "relative w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_block.m(div, null);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_block.d();
    }
  };
}
function instance$T($$self, $$props, $$invalidate) {
  let device;
  let image;
  let hideTitle;
  let fontColor;
  let fontBlur;
  let $devices;
  let $homey;
  component_subscribe($$self, devices, ($$value) => $$invalidate(10, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(7, $homey = $$value));
  let { context } = $$props;
  let { settings } = $$props;
  let refreshSlug = 0;
  let refreshClear;
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(8, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$devices, settings*/
    1025) {
      $$invalidate(1, device = $devices[settings.deviceId ?? ""]);
    }
    if ($$self.$$.dirty & /*device, settings*/
    3) {
      $$invalidate(6, image = device == null ? void 0 : device.images.find((image2) => image2.id === settings.imageId));
    }
    if ($$self.$$.dirty & /*refreshClear, settings*/
    513) {
      {
        if (refreshClear !== void 0)
          clearInterval(refreshClear);
        if (settings.refresh !== void 0 && settings.refresh > 0) {
          $$invalidate(9, refreshClear = setInterval(
            () => {
              $$invalidate(2, refreshSlug = Date.now());
            },
            settings.refresh * 1e3
          ));
        }
      }
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(5, hideTitle = (settings == null ? void 0 : settings.hideTitle) ?? false);
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(4, fontColor = (settings == null ? void 0 : settings.fontColor) ? settings.fontColor : "black");
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(3, fontBlur = (settings == null ? void 0 : settings.fontBlur) ?? false);
    }
  };
  return [
    settings,
    device,
    refreshSlug,
    fontBlur,
    fontColor,
    hideTitle,
    image,
    $homey,
    context,
    refreshClear,
    $devices
  ];
}
class ImageWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$T, create_fragment$T, safe_not_equal, { context: 8, settings: 0 });
  }
}
const info$c = {
  type: "image",
  label: "Image",
  icon: mdiImage,
  category: "component",
  widget: ImageWidget,
  editor: ImageEditor,
  scopes: [
    { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] }
  ],
  create: () => ({ id: v4(), type: "image", version: 1 }),
  migration: (e2) => e2
};
function create_else_block$i(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMagnify } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_1$k(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiChartLine } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block$v(ctx) {
  let span;
  let t0_value = (
    /*getOwnerName*/
    ctx[7](
      /*selected*/
      ctx[5].ownerUri
    ) + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*selected*/
    ctx[5].title + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = text(" - ");
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_text(span_nodes, " - ");
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text-alt");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*selected*/
      32 && t0_value !== (t0_value = /*getOwnerName*/
      ctx2[7](
        /*selected*/
        ctx2[5].ownerUri
      ) + ""))
        set_data(t0, t0_value);
      if (dirty & /*selected*/
      32 && t2_value !== (t2_value = /*selected*/
      ctx2[5].title + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_default_slot$8(ctx) {
  let button;
  let h3;
  let t0_value = (
    /*item*/
    ctx[19].ownerName + ""
  );
  let t0;
  let t1;
  let div0;
  let span0;
  let t2_value = (
    /*item*/
    ctx[19].log.title + ""
  );
  let t2;
  let t3;
  let span1;
  let t4_value = (
    /*item*/
    ctx[19].log.lastValue + ""
  );
  let t4;
  let t5;
  let t6_value = (
    /*item*/
    ctx[19].log.units + ""
  );
  let t6;
  let t7;
  let div1;
  let mounted;
  let dispose;
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[13](
        /*item*/
        ctx[19]
      )
    );
  }
  return {
    c() {
      button = element("button");
      h3 = element("h3");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      span0 = element("span");
      t2 = text(t2_value);
      t3 = space();
      span1 = element("span");
      t4 = text(t4_value);
      t5 = space();
      t6 = text(t6_value);
      t7 = space();
      div1 = element("div");
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      h3 = claim_element(button_nodes, "H3", { class: true });
      var h3_nodes = children(h3);
      t0 = claim_text(h3_nodes, t0_value);
      h3_nodes.forEach(detach);
      t1 = claim_space(button_nodes);
      div0 = claim_element(button_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", {});
      var span0_nodes = children(span0);
      t2 = claim_text(span0_nodes, t2_value);
      span0_nodes.forEach(detach);
      t3 = claim_space(div0_nodes);
      span1 = claim_element(div0_nodes, "SPAN", {});
      var span1_nodes = children(span1);
      t4 = claim_text(span1_nodes, t4_value);
      t5 = claim_space(span1_nodes);
      t6 = claim_text(span1_nodes, t6_value);
      span1_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      button_nodes.forEach(detach);
      t7 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      children(div1).forEach(detach);
      this.h();
    },
    h() {
      attr(h3, "class", "w-full flex justify-start");
      attr(div0, "class", "w-full flex justify-between");
      attr(button, "class", "btn btn-ghost w-full");
      attr(div1, "class", "divider divider-neutral my-1");
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, h3);
      append_hydration(h3, t0);
      append_hydration(button, t1);
      append_hydration(button, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t2);
      append_hydration(div0, t3);
      append_hydration(div0, span1);
      append_hydration(span1, t4);
      append_hydration(span1, t5);
      append_hydration(span1, t6);
      insert_hydration(target, t7, anchor);
      insert_hydration(target, div1, anchor);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*item*/
      524288 && t0_value !== (t0_value = /*item*/
      ctx[19].ownerName + ""))
        set_data(t0, t0_value);
      if (dirty & /*item*/
      524288 && t2_value !== (t2_value = /*item*/
      ctx[19].log.title + ""))
        set_data(t2, t2_value);
      if (dirty & /*item*/
      524288 && t4_value !== (t4_value = /*item*/
      ctx[19].log.lastValue + ""))
        set_data(t4, t4_value);
      if (dirty & /*item*/
      524288 && t6_value !== (t6_value = /*item*/
      ctx[19].log.units + ""))
        set_data(t6, t6_value);
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t7);
        detach(div1);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$S(ctx) {
  let label;
  let div0;
  let span0;
  let t0;
  let t1;
  let div1;
  let input0;
  let t2;
  let button0;
  let current_block_type_index;
  let if_block0;
  let t3;
  let div2;
  let span1;
  let t4;
  let t5;
  let dialog;
  let div5;
  let div3;
  let form;
  let button1;
  let icon;
  let t6;
  let input1;
  let t7;
  let div4;
  let virtuallist;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_1$k, create_else_block$i];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*selected*/
      ctx2[5] !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block1 = (
    /*selected*/
    ctx[5] !== void 0 && create_if_block$v(ctx)
  );
  icon = new Icon({ props: { data: mdiClose } });
  virtuallist = new VirtualList({
    props: {
      items: (
        /*filtered*/
        ctx[4]
      ),
      height: "50vh",
      $$slots: {
        default: [
          create_default_slot$8,
          ({ item }) => ({ 19: item }),
          ({ item }) => item ? 524288 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      label = element("label");
      div0 = element("div");
      span0 = element("span");
      t0 = text(
        /*name*/
        ctx[1]
      );
      t1 = space();
      div1 = element("div");
      input0 = element("input");
      t2 = space();
      button0 = element("button");
      if_block0.c();
      t3 = space();
      div2 = element("div");
      span1 = element("span");
      t4 = space();
      if (if_block1)
        if_block1.c();
      t5 = space();
      dialog = element("dialog");
      div5 = element("div");
      div3 = element("div");
      form = element("form");
      button1 = element("button");
      create_component(icon.$$.fragment);
      t6 = space();
      input1 = element("input");
      t7 = space();
      div4 = element("div");
      create_component(virtuallist.$$.fragment);
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div0 = claim_element(label_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t0 = claim_text(
        span0_nodes,
        /*name*/
        ctx[1]
      );
      span0_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t1 = claim_space(label_nodes);
      div1 = claim_element(label_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      input0 = claim_element(div1_nodes, "INPUT", {
        type: true,
        class: true,
        placeholder: true
      });
      t2 = claim_space(div1_nodes);
      button0 = claim_element(div1_nodes, "BUTTON", { class: true });
      var button0_nodes = children(button0);
      if_block0.l(button0_nodes);
      button0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t3 = claim_space(label_nodes);
      div2 = claim_element(label_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      span1 = claim_element(div2_nodes, "SPAN", { class: true });
      children(span1).forEach(detach);
      t4 = claim_space(div2_nodes);
      if (if_block1)
        if_block1.l(div2_nodes);
      div2_nodes.forEach(detach);
      label_nodes.forEach(detach);
      t5 = claim_space(nodes);
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div5 = claim_element(dialog_nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      div3 = claim_element(div5_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      form = claim_element(div3_nodes, "FORM", { method: true });
      var form_nodes = children(form);
      button1 = claim_element(form_nodes, "BUTTON", { class: true });
      var button1_nodes = children(button1);
      claim_component(icon.$$.fragment, button1_nodes);
      button1_nodes.forEach(detach);
      form_nodes.forEach(detach);
      t6 = claim_space(div3_nodes);
      input1 = claim_element(div3_nodes, "INPUT", {
        type: true,
        class: true,
        name: true,
        placeholder: true
      });
      div3_nodes.forEach(detach);
      t7 = claim_space(div5_nodes);
      div4 = claim_element(div5_nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      claim_component(virtuallist.$$.fragment, div4_nodes);
      div4_nodes.forEach(detach);
      div5_nodes.forEach(detach);
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span0, "class", "label-text");
      attr(div0, "class", "label");
      attr(input0, "type", "text");
      attr(input0, "class", "input input-bordered grow join-item");
      attr(input0, "placeholder", "Log");
      attr(button0, "class", "btn btn-outline btn-primary join-item");
      attr(div1, "class", "join flex items-center");
      attr(span1, "class", "label-text");
      attr(div2, "class", "label whitespace-nowrap overflow-ellipsis");
      attr(label, "class", "form-control w-full");
      attr(button1, "class", "btn btn-sm btn-circle btn-ghost absolute right-2 top-2");
      attr(form, "method", "dialog");
      attr(input1, "type", "text");
      attr(input1, "class", "input w-full input-primary");
      attr(input1, "name", "search");
      attr(input1, "placeholder", "Search");
      attr(div3, "class", "flex-shrink-0 mb-2");
      attr(div4, "class", "flex-grow overflow-auto");
      attr(div5, "class", "modal-box flex flex-col");
      attr(dialog, "class", "modal");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t0);
      append_hydration(label, t1);
      append_hydration(label, div1);
      append_hydration(div1, input0);
      set_input_value(
        input0,
        /*logId*/
        ctx[0]
      );
      append_hydration(div1, t2);
      append_hydration(div1, button0);
      if_blocks[current_block_type_index].m(button0, null);
      append_hydration(label, t3);
      append_hydration(label, div2);
      append_hydration(div2, span1);
      append_hydration(div2, t4);
      if (if_block1)
        if_block1.m(div2, null);
      insert_hydration(target, t5, anchor);
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div5);
      append_hydration(div5, div3);
      append_hydration(div3, form);
      append_hydration(form, button1);
      mount_component(icon, button1, null);
      append_hydration(div3, t6);
      append_hydration(div3, input1);
      set_input_value(
        input1,
        /*search*/
        ctx[2]
      );
      append_hydration(div5, t7);
      append_hydration(div5, div4);
      mount_component(virtuallist, div4, null);
      ctx[14](dialog);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input0,
            "input",
            /*input0_input_handler*/
            ctx[10]
          ),
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[11]
          ),
          listen(
            input1,
            "input",
            /*input1_input_handler*/
            ctx[12]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*name*/
      2)
        set_data(
          t0,
          /*name*/
          ctx2[1]
        );
      if (dirty & /*logId*/
      1 && input0.value !== /*logId*/
      ctx2[0]) {
        set_input_value(
          input0,
          /*logId*/
          ctx2[0]
        );
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        }
        transition_in(if_block0, 1);
        if_block0.m(button0, null);
      }
      if (
        /*selected*/
        ctx2[5] !== void 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block$v(ctx2);
          if_block1.c();
          if_block1.m(div2, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (dirty & /*search*/
      4 && input1.value !== /*search*/
      ctx2[2]) {
        set_input_value(
          input1,
          /*search*/
          ctx2[2]
        );
      }
      const virtuallist_changes = {};
      if (dirty & /*filtered*/
      16)
        virtuallist_changes.items = /*filtered*/
        ctx2[4];
      if (dirty & /*$$scope, item*/
      1572864) {
        virtuallist_changes.$$scope = { dirty, ctx: ctx2 };
      }
      virtuallist.$set(virtuallist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(icon.$$.fragment, local);
      transition_in(virtuallist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(icon.$$.fragment, local);
      transition_out(virtuallist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label);
        detach(t5);
        detach(dialog);
      }
      if_blocks[current_block_type_index].d();
      if (if_block1)
        if_block1.d();
      destroy_component(icon);
      destroy_component(virtuallist);
      ctx[14](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$S($$self, $$props, $$invalidate) {
  let sorted;
  let $devices;
  component_subscribe($$self, devices, ($$value) => $$invalidate(16, $devices = $$value));
  let { logId } = $$props;
  let { logs = [] } = $$props;
  let { name = "Log" } = $$props;
  const dispatch = createEventDispatcher();
  let modal;
  let search = "";
  let filtered = [];
  let selected;
  function filterCapabilities(value, s3) {
    const normalized = value.toLowerCase();
    if (value.length > 0) {
      $$invalidate(4, filtered = sorted.filter((d3) => d3.searchString.includes(normalized)));
    } else {
      $$invalidate(4, filtered = sorted);
    }
  }
  function onItem(item) {
    $$invalidate(0, logId = item.log.id);
    modal.close();
    dispatch("logId", logId);
  }
  function getOwnerName(uri) {
    var _a2;
    if (uri.startsWith("homey:device:")) {
      const prefix = "homey:device:";
      const id = uri.slice(prefix.length);
      return ((_a2 = $devices[id]) == null ? void 0 : _a2.name) ?? uri;
    } else if (uri.startsWith("homey:manager:apps")) {
      return "Homey Apps";
    } else if (uri.startsWith("homey:manager:system")) {
      return "Homey System";
    } else if (uri.startsWith("homey:manager:weather")) {
      return "Homey Weather";
    } else if (uri.startsWith("homey:manager:logic")) {
      return "Homey Logic";
    } else {
      return uri;
    }
  }
  function input0_input_handler() {
    logId = this.value;
    $$invalidate(0, logId);
  }
  const click_handler = () => modal.showModal();
  function input1_input_handler() {
    search = this.value;
    $$invalidate(2, search);
  }
  const click_handler_1 = (item) => onItem(item);
  function dialog_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(3, modal);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("logId" in $$props2)
      $$invalidate(0, logId = $$props2.logId);
    if ("logs" in $$props2)
      $$invalidate(8, logs = $$props2.logs);
    if ("name" in $$props2)
      $$invalidate(1, name = $$props2.name);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*logs*/
    256) {
      $$invalidate(9, sorted = (logs ?? []).map((log) => {
        const ownerName = getOwnerName(log.ownerUri);
        return {
          log,
          ownerName,
          searchString: `${ownerName} ${log.title}`.toLowerCase()
        };
      }).sort((a3, b2) => {
        if (a3.searchString === b2.searchString)
          return 0;
        if (a3.searchString < b2.searchString)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*logId, logs*/
    257) {
      $$invalidate(5, selected = logId !== void 0 ? logs.find((d3) => d3.id === logId) : void 0);
    }
    if ($$self.$$.dirty & /*search, sorted*/
    516) {
      filterCapabilities(search);
    }
  };
  return [
    logId,
    name,
    search,
    modal,
    filtered,
    selected,
    onItem,
    getOwnerName,
    logs,
    sorted,
    input0_input_handler,
    click_handler,
    input1_input_handler,
    click_handler_1,
    dialog_binding
  ];
}
class InsightPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$S, create_fragment$S, safe_not_equal, { logId: 0, logs: 8, name: 1 });
  }
}
const colors$1 = ["rgba(54,162,235,1)", "rgba(255,99,132,1)", "rgba(75,192,192,1)", "rgba(255,159,64,1)", "rgba(153,102,255,1)"];
const Slate = [
  "#f8fafc",
  "#f1f5f9",
  "#e2e8f0",
  "#cbd5e1",
  "#94a3b8",
  "#64748b",
  "#475569",
  "#334155",
  "#1e293b",
  "#0f172a",
  "#020617"
];
const Gray = [
  "#f9fafb",
  "#f3f4f6",
  "#e5e7eb",
  "#d1d5db",
  "#9ca3af",
  "#6b7280",
  "#4b5563",
  "#374151",
  "#1f2937",
  "#111827",
  "#030712"
];
const Zinc = [
  "#fafafa",
  "#f4f4f5",
  "#e4e4e7",
  "#d4d4d8",
  "#a1a1aa",
  "#71717a",
  "#52525b",
  "#3f3f46",
  "#27272a",
  "#18181b",
  "#09090b"
];
const Neutral = [
  "#fafafa",
  "#f5f5f5",
  "#e5e5e5",
  "#d4d4d4",
  "#a3a3a3",
  "#737373",
  "#525252",
  "#404040",
  "#262626",
  "#171717",
  "#0a0a0a"
];
const Stone = [
  "#fafaf9",
  "#f5f5f4",
  "#e7e5e4",
  "#d6d3d1",
  "#a8a29e",
  "#78716c",
  "#57534e",
  "#44403c",
  "#292524",
  "#1c1917",
  "#0c0a09"
];
const Red = [
  "#fef2f2",
  "#fee2e2",
  "#fecaca",
  "#fca5a5",
  "#f87171",
  "#ef4444",
  "#dc2626",
  "#b91c1c",
  "#991b1b",
  "#7f1d1d",
  "#450a0a"
];
const Orange = [
  "#fff7ed",
  "#ffedd5",
  "#fed7aa",
  "#fdba74",
  "#fb923c",
  "#f97316",
  "#ea580c",
  "#c2410c",
  "#9a3412",
  "#7c2d12",
  "#431407"
];
const Amber = [
  "#fffbeb",
  "#fef3c7",
  "#fde68a",
  "#fcd34d",
  "#fbbf24",
  "#f59e0b",
  "#d97706",
  "#b45309",
  "#92400e",
  "#78350f",
  "#451a03"
];
const Yellow = [
  "#fefce8",
  "#fef9c3",
  "#fef08a",
  "#fde047",
  "#facc15",
  "#eab308",
  "#ca8a04",
  "#a16207",
  "#854d0e",
  "#713f12",
  "#422006"
];
const Lime = [
  "#f7fee7",
  "#ecfccb",
  "#d9f99d",
  "#bef264",
  "#a3e635",
  "#84cc16",
  "#65a30d",
  "#4d7c0f",
  "#3f6212",
  "#365314",
  "#1a2e05"
];
const Green = [
  "#f0fdf4",
  "#dcfce7",
  "#bbf7d0",
  "#86efac",
  "#4ade80",
  "#22c55e",
  "#16a34a",
  "#15803d",
  "#166534",
  "#14532d",
  "#052e16"
];
const Emerald = [
  "#ecfdf5",
  "#d1fae5",
  "#a7f3d0",
  "#6ee7b7",
  "#34d399",
  "#10b981",
  "#059669",
  "#047857",
  "#065f46",
  "#064e3b",
  "#022c22"
];
const Teal = [
  "#f0fdfa",
  "#ccfbf1",
  "#99f6e4",
  "#5eead4",
  "#2dd4bf",
  "#14b8a6",
  "#0d9488",
  "#0f766e",
  "#115e59",
  "#134e4a",
  "#042f2e"
];
const Cyan = [
  "#ecfeff",
  "#cffafe",
  "#a5f3fc",
  "#67e8f9",
  "#22d3ee",
  "#06b6d4",
  "#0891b2",
  "#0e7490",
  "#155e75",
  "#164e63",
  "#083344"
];
const Sky = [
  "#f0f9ff",
  "#e0f2fe",
  "#bae6fd",
  "#7dd3fc",
  "#38bdf8",
  "#0ea5e9",
  "#0284c7",
  "#0369a1",
  "#075985",
  "#0c4a6e",
  "#082f49"
];
const Blue = [
  "#eff6ff",
  "#dbeafe",
  "#bfdbfe",
  "#93c5fd",
  "#60a5fa",
  "#3b82f6",
  "#2563eb",
  "#1d4ed8",
  "#1e40af",
  "#1e3a8a",
  "#172554"
];
const Indigo = [
  "#eef2ff",
  "#e0e7ff",
  "#c7d2fe",
  "#a5b4fc",
  "#818cf8",
  "#6366f1",
  "#4f46e5",
  "#4338ca",
  "#3730a3",
  "#312e81",
  "#1e1b4b"
];
const Violet = [
  "#f5f3ff",
  "#ede9fe",
  "#ddd6fe",
  "#c4b5fd",
  "#a78bfa",
  "#8b5cf6",
  "#7c3aed",
  "#6d28d9",
  "#5b21b6",
  "#4c1d95",
  "#2e1065"
];
const Purple = [
  "#faf5ff",
  "#f3e8ff",
  "#e9d5ff",
  "#d8b4fe",
  "#c084fc",
  "#a855f7",
  "#9333ea",
  "#7e22ce",
  "#6b21a8",
  "#581c87",
  "#3b0764"
];
const Fuchsia = [
  "#fdf4ff",
  "#fae8ff",
  "#f5d0fe",
  "#f0abfc",
  "#e879f9",
  "#d946ef",
  "#c026d3",
  "#a21caf",
  "#86198f",
  "#701a75",
  "#4a044e"
];
const Pink = [
  "#fdf2f8",
  "#fce7f3",
  "#fbcfe8",
  "#f9a8d4",
  "#f472b6",
  "#ec4899",
  "#db2777",
  "#be185d",
  "#9d174d",
  "#831843",
  "#500724"
];
const Rose = [
  "#fff1f2",
  "#ffe4e6",
  "#fecdd3",
  "#fda4af",
  "#fb7185",
  "#f43f5e",
  "#e11d48",
  "#be123c",
  "#9f1239",
  "#881337",
  "#4c0519"
];
const TailwindColors = {
  Slate,
  Gray,
  Zinc,
  Neutral,
  Stone,
  Red,
  Orange,
  Amber,
  Yellow,
  Lime,
  Green,
  Emerald,
  Teal,
  Cyan,
  Sky,
  Blue,
  Indigo,
  Violet,
  Purple,
  Fuchsia,
  Pink,
  Rose
};
function get_each_context$b(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i2];
  return child_ctx;
}
function get_each_context_1$2(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[17] = list[i2];
  child_ctx[19] = i2;
  return child_ctx;
}
function create_each_block_1$2(ctx) {
  let button;
  let t2;
  let mounted;
  let dispose;
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[11](
        /*color*/
        ctx[17]
      )
    );
  }
  return {
    c() {
      button = element("button");
      t2 = text(" \r\n                            ");
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { style: true, class: true });
      var button_nodes = children(button);
      t2 = claim_text(button_nodes, " \r\n                            ");
      button_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_style(
        button,
        "background-color",
        /*color*/
        ctx[17]
      );
      set_style(
        button,
        "opacity",
        /*alpha*/
        ctx[4] * 100 + "%"
      );
      attr(button, "class", "w-8 h-8 border-solid border-primary");
      toggle_class(
        button,
        "mx-2",
        /*i*/
        ctx[19] === 5
      );
      toggle_class(
        button,
        "border-border",
        /*rgb*/
        ctx[3] === /*color*/
        ctx[17]
      );
      toggle_class(
        button,
        "border-4",
        /*rgb*/
        ctx[3] === /*color*/
        ctx[17]
      );
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, t2);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*names*/
      32) {
        set_style(
          button,
          "background-color",
          /*color*/
          ctx[17]
        );
      }
      if (dirty & /*alpha*/
      16) {
        set_style(
          button,
          "opacity",
          /*alpha*/
          ctx[4] * 100 + "%"
        );
      }
      if (dirty & /*rgb, getColors, names*/
      104) {
        toggle_class(
          button,
          "border-border",
          /*rgb*/
          ctx[3] === /*color*/
          ctx[17]
        );
      }
      if (dirty & /*rgb, getColors, names*/
      104) {
        toggle_class(
          button,
          "border-4",
          /*rgb*/
          ctx[3] === /*color*/
          ctx[17]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$b(ctx) {
  let div1;
  let span;
  let t0_value = (
    /*name*/
    ctx[14] + ""
  );
  let t0;
  let t1;
  let div0;
  let t2;
  let each_value_1 = ensure_array_like(
    /*getColors*/
    ctx[6](
      /*name*/
      ctx[14]
    )
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i2));
  }
  return {
    c() {
      div1 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t2 = space();
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      span = claim_element(div1_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      span_nodes.forEach(detach);
      t1 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", {});
      var div0_nodes = children(div0);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div0_nodes);
      }
      div0_nodes.forEach(detach);
      t2 = claim_space(div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "font-thin");
      attr(div1, "class", "flex flex-row w-full justify-between");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, span);
      append_hydration(span, t0);
      append_hydration(div1, t1);
      append_hydration(div1, div0);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div0, null);
        }
      }
      append_hydration(div1, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*names*/
      32 && t0_value !== (t0_value = /*name*/
      ctx2[14] + ""))
        set_data(t0, t0_value);
      if (dirty & /*getColors, names, alpha, rgb, selectColor*/
      248) {
        each_value_1 = ensure_array_like(
          /*getColors*/
          ctx2[6](
            /*name*/
            ctx2[14]
          )
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$2(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block_1$2(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(div0, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment$R(ctx) {
  let button0;
  let t0;
  let t1;
  let dialog;
  let div5;
  let div1;
  let div0;
  let span0;
  let textContent = "Opacity";
  let t3;
  let input;
  let t4;
  let div2;
  let t5;
  let div4;
  let form;
  let button1;
  let div3;
  let t6;
  let span1;
  let textContent_1 = "Select";
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*names*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$b(get_each_context$b(ctx, each_value, i2));
  }
  return {
    c() {
      button0 = element("button");
      t0 = text(" ");
      t1 = space();
      dialog = element("dialog");
      div5 = element("div");
      div1 = element("div");
      div0 = element("div");
      span0 = element("span");
      span0.textContent = textContent;
      t3 = space();
      input = element("input");
      t4 = space();
      div2 = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t5 = space();
      div4 = element("div");
      form = element("form");
      button1 = element("button");
      div3 = element("div");
      t6 = space();
      span1 = element("span");
      span1.textContent = textContent_1;
      this.h();
    },
    l(nodes) {
      button0 = claim_element(nodes, "BUTTON", { style: true, class: true });
      var button0_nodes = children(button0);
      t0 = claim_text(button0_nodes, " ");
      button0_nodes.forEach(detach);
      t1 = claim_space(nodes);
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div5 = claim_element(dialog_nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      div1 = claim_element(div5_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span0) !== "svelte-hcmr85")
        span0.textContent = textContent;
      t3 = claim_space(div0_nodes);
      input = claim_element(div0_nodes, "INPUT", {
        type: true,
        min: true,
        max: true,
        step: true,
        class: true
      });
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t4 = claim_space(div5_nodes);
      div2 = claim_element(div5_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div2_nodes);
      }
      div2_nodes.forEach(detach);
      t5 = claim_space(div5_nodes);
      div4 = claim_element(div5_nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      form = claim_element(div4_nodes, "FORM", { method: true, class: true });
      var form_nodes = children(form);
      button1 = claim_element(form_nodes, "BUTTON", { class: true });
      var button1_nodes = children(button1);
      div3 = claim_element(button1_nodes, "DIV", { class: true, style: true });
      children(div3).forEach(detach);
      t6 = claim_space(button1_nodes);
      span1 = claim_element(button1_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span1) !== "svelte-buwd0q")
        span1.textContent = textContent_1;
      button1_nodes.forEach(detach);
      form_nodes.forEach(detach);
      div4_nodes.forEach(detach);
      div5_nodes.forEach(detach);
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_style(
        button0,
        "background-color",
        /*value*/
        ctx[0]
      );
      set_style(
        button0,
        "opacity",
        /*alpha*/
        ctx[4] * 100
      );
      attr(
        button0,
        "class",
        /*classes*/
        ctx[1]
      );
      toggle_class(
        button0,
        "border-border",
        /*value*/
        ctx[0] === void 0
      );
      toggle_class(
        button0,
        "border-2",
        /*value*/
        ctx[0] === void 0
      );
      attr(input, "type", "range");
      attr(input, "min", "0");
      attr(input, "max", "1");
      attr(input, "step", "0.01");
      attr(input, "class", "w-[440px] mx-2");
      attr(div0, "class", "flex flex-row w-full justify-between mb-4");
      attr(div1, "class", "flex-shrink-0 mb-2");
      attr(div2, "class", "flex-grow overflow-auto");
      attr(div3, "class", "badge badge-primary badge-lg");
      set_style(
        div3,
        "background-color",
        /*rgb*/
        ctx[3]
      );
      set_style(
        div3,
        "border-color",
        /*rgb*/
        ctx[3]
      );
      set_style(
        div3,
        "opacity",
        /*alpha*/
        ctx[4] * 100 + "%"
      );
      attr(button1, "class", "btn");
      attr(form, "method", "dialog");
      attr(form, "class", "flex justify-end w-full mb-4");
      attr(div4, "class", "flex-shrink-0 mt-4");
      attr(div5, "class", "modal-box flex flex-col");
      attr(dialog, "class", "modal");
    },
    m(target, anchor) {
      insert_hydration(target, button0, anchor);
      append_hydration(button0, t0);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div5);
      append_hydration(div5, div1);
      append_hydration(div1, div0);
      append_hydration(div0, span0);
      append_hydration(div0, t3);
      append_hydration(div0, input);
      set_input_value(
        input,
        /*alpha*/
        ctx[4]
      );
      append_hydration(div5, t4);
      append_hydration(div5, div2);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div2, null);
        }
      }
      append_hydration(div5, t5);
      append_hydration(div5, div4);
      append_hydration(div4, form);
      append_hydration(form, button1);
      append_hydration(button1, div3);
      append_hydration(button1, t6);
      append_hydration(button1, span1);
      ctx[12](dialog);
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[9]
          ),
          listen(
            input,
            "change",
            /*input_change_input_handler*/
            ctx[10]
          ),
          listen(
            input,
            "input",
            /*input_change_input_handler*/
            ctx[10]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*value*/
      1) {
        set_style(
          button0,
          "background-color",
          /*value*/
          ctx2[0]
        );
      }
      if (dirty & /*alpha*/
      16) {
        set_style(
          button0,
          "opacity",
          /*alpha*/
          ctx2[4] * 100
        );
      }
      if (dirty & /*classes*/
      2) {
        attr(
          button0,
          "class",
          /*classes*/
          ctx2[1]
        );
      }
      if (dirty & /*classes, value, undefined*/
      3) {
        toggle_class(
          button0,
          "border-border",
          /*value*/
          ctx2[0] === void 0
        );
      }
      if (dirty & /*classes, value, undefined*/
      3) {
        toggle_class(
          button0,
          "border-2",
          /*value*/
          ctx2[0] === void 0
        );
      }
      if (dirty & /*alpha*/
      16) {
        set_input_value(
          input,
          /*alpha*/
          ctx2[4]
        );
      }
      if (dirty & /*getColors, names, alpha, rgb, selectColor*/
      248) {
        each_value = ensure_array_like(
          /*names*/
          ctx2[5]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$b(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block$b(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(div2, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & /*rgb*/
      8) {
        set_style(
          div3,
          "background-color",
          /*rgb*/
          ctx2[3]
        );
      }
      if (dirty & /*rgb*/
      8) {
        set_style(
          div3,
          "border-color",
          /*rgb*/
          ctx2[3]
        );
      }
      if (dirty & /*alpha*/
      16) {
        set_style(
          div3,
          "opacity",
          /*alpha*/
          ctx2[4] * 100 + "%"
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(button0);
        detach(t1);
        detach(dialog);
      }
      destroy_each(each_blocks, detaching);
      ctx[12](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$R($$self, $$props, $$invalidate) {
  let names2;
  let { value } = $$props;
  let { mode = "rgb" } = $$props;
  let { class: classes = "btn btn-circle w-8" } = $$props;
  let modal;
  let rgb = void 0;
  let alpha2 = 1;
  function onValue(_value) {
    if (_value !== void 0) {
      if (mode === "rgba") {
        var result = /^rgba\((.+),(.+),(.+),(.+)\)$/i.exec(_value);
        const r = parseInt(result[1]);
        const g = parseInt(result[2]);
        const b2 = parseInt(result[3]);
        const a3 = parseFloat(result[4]);
        $$invalidate(3, rgb = "#" + r.toString(16) + g.toString(16) + b2.toString(16));
        $$invalidate(4, alpha2 = a3);
      } else {
        $$invalidate(3, rgb = value);
        $$invalidate(4, alpha2 = 1);
      }
    } else {
      $$invalidate(3, rgb = void 0);
      $$invalidate(4, alpha2 = 1);
    }
  }
  function getColors(name) {
    return TailwindColors[name];
  }
  function selectColor(color2) {
    if (mode === "rgb") {
      $$invalidate(0, value = color2);
    } else {
      const r = parseInt(color2.slice(1, 3), 16);
      const g = parseInt(color2.slice(3, 5), 16);
      const b2 = parseInt(color2.slice(5, 7), 16);
      $$invalidate(0, value = "rgba(" + r + "," + g + "," + b2 + "," + alpha2 + ")");
    }
  }
  const click_handler = () => modal.showModal();
  function input_change_input_handler() {
    alpha2 = to_number(this.value);
    $$invalidate(4, alpha2);
  }
  const click_handler_1 = (color2) => selectColor(color2);
  function dialog_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(2, modal);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("mode" in $$props2)
      $$invalidate(8, mode = $$props2.mode);
    if ("class" in $$props2)
      $$invalidate(1, classes = $$props2.class);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value*/
    1) {
      onValue(value);
    }
  };
  $$invalidate(5, names2 = Object.keys(TailwindColors));
  return [
    value,
    classes,
    modal,
    rgb,
    alpha2,
    names2,
    getColors,
    selectColor,
    mode,
    click_handler,
    input_change_input_handler,
    click_handler_1,
    dialog_binding
  ];
}
class ColorPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$R, create_fragment$R, safe_not_equal, { value: 0, mode: 8, class: 1 });
  }
}
function create_else_block$h(ctx) {
  let input;
  return {
    c() {
      input = element("input");
      this.h();
    },
    l(nodes) {
      input = claim_element(nodes, "INPUT", { class: true, type: true, name: true });
      this.h();
    },
    h() {
      attr(input, "class", "input join-item");
      attr(input, "type", "text");
      attr(input, "name", "value");
      input.value = "base";
      input.readOnly = true;
    },
    m(target, anchor) {
      insert_hydration(target, input, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(input);
      }
    }
  };
}
function create_if_block$u(ctx) {
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      this.h();
    },
    l(nodes) {
      input = claim_element(nodes, "INPUT", { class: true, type: true });
      this.h();
    },
    h() {
      attr(input, "class", "input join-item");
      attr(input, "type", "number");
    },
    m(target, anchor) {
      insert_hydration(target, input, anchor);
      set_input_value(
        input,
        /*_value*/
        ctx[3]
      );
      if (!mounted) {
        dispose = listen(
          input,
          "input",
          /*input_input_handler*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*_value*/
      8 && to_number(input.value) !== /*_value*/
      ctx2[3]) {
        set_input_value(
          input,
          /*_value*/
          ctx2[3]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$Q(ctx) {
  let div;
  let colorpicker;
  let updating_value;
  let t2;
  let current;
  function colorpicker_value_binding(value) {
    ctx[8](value);
  }
  let colorpicker_props = {
    mode: (
      /*colorMode*/
      ctx[0]
    ),
    class: "join-item border-solid w-10"
  };
  if (
    /*_color*/
    ctx[2] !== void 0
  ) {
    colorpicker_props.value = /*_color*/
    ctx[2];
  }
  colorpicker = new ColorPicker({ props: colorpicker_props });
  binding_callbacks.push(() => bind(colorpicker, "value", colorpicker_value_binding));
  function select_block_type(ctx2, dirty) {
    if (!/*base*/
    ctx2[1])
      return create_if_block$u;
    return create_else_block$h;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      create_component(colorpicker.$$.fragment);
      t2 = space();
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(colorpicker.$$.fragment, div_nodes);
      t2 = claim_space(div_nodes);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "join w-full flex");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(colorpicker, div, null);
      append_hydration(div, t2);
      if_block.m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const colorpicker_changes = {};
      if (dirty & /*colorMode*/
      1)
        colorpicker_changes.mode = /*colorMode*/
        ctx2[0];
      if (!updating_value && dirty & /*_color*/
      4) {
        updating_value = true;
        colorpicker_changes.value = /*_color*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      colorpicker.$set(colorpicker_changes);
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(colorpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(colorpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(colorpicker);
      if_block.d();
    }
  };
}
function instance$Q($$self, $$props, $$invalidate) {
  let { color: color2 } = $$props;
  let { value } = $$props;
  let { colorMode } = $$props;
  let { base: base2 } = $$props;
  let { min } = $$props;
  let { max } = $$props;
  let _color;
  let _value;
  const dispatch = createEventDispatcher();
  function onChanges(c2, v) {
    if (c2 !== _color)
      $$invalidate(2, _color = c2);
    if (v !== _value)
      $$invalidate(3, _value = v);
  }
  function onColor(c2) {
    dispatch("color", c2);
  }
  function onValue(v) {
    if (Number.isNaN(v))
      ;
    else if (v < min)
      ;
    else if (v > max)
      ;
    else {
      dispatch("value", v);
    }
  }
  function colorpicker_value_binding(value2) {
    _color = value2;
    $$invalidate(2, _color);
  }
  function input_input_handler() {
    _value = to_number(this.value);
    $$invalidate(3, _value);
  }
  $$self.$$set = ($$props2) => {
    if ("color" in $$props2)
      $$invalidate(4, color2 = $$props2.color);
    if ("value" in $$props2)
      $$invalidate(5, value = $$props2.value);
    if ("colorMode" in $$props2)
      $$invalidate(0, colorMode = $$props2.colorMode);
    if ("base" in $$props2)
      $$invalidate(1, base2 = $$props2.base);
    if ("min" in $$props2)
      $$invalidate(6, min = $$props2.min);
    if ("max" in $$props2)
      $$invalidate(7, max = $$props2.max);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*color, value*/
    48) {
      onChanges(color2, value);
    }
    if ($$self.$$.dirty & /*_color*/
    4) {
      onColor(_color);
    }
    if ($$self.$$.dirty & /*_value*/
    8) {
      onValue(_value);
    }
  };
  return [
    colorMode,
    base2,
    _color,
    _value,
    color2,
    value,
    min,
    max,
    colorpicker_value_binding,
    input_input_handler
  ];
}
class ThresholdLineEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$Q, create_fragment$Q, safe_not_equal, {
      color: 4,
      value: 5,
      colorMode: 0,
      base: 1,
      min: 6,
      max: 7
    });
  }
}
function get_each_context$a(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i2];
  child_ctx[16] = i2;
  return child_ctx;
}
function create_if_block$t(ctx) {
  let button;
  let icon;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: mdiDelete } });
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[12](
        /*threshold*/
        ctx[14]
      )
    );
  }
  return {
    c() {
      button = element("button");
      create_component(icon.$$.fragment);
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      button_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(button, "class", "btn");
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      mount_component(icon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$a(key_1, ctx) {
  let div;
  let thresholdlineeditor;
  let t0;
  let t1;
  let current;
  function value_handler(...args) {
    return (
      /*value_handler*/
      ctx[10](
        /*threshold*/
        ctx[14],
        ...args
      )
    );
  }
  function color_handler(...args) {
    return (
      /*color_handler*/
      ctx[11](
        /*threshold*/
        ctx[14],
        ...args
      )
    );
  }
  thresholdlineeditor = new ThresholdLineEditor({
    props: {
      value: (
        /*threshold*/
        ctx[14].value
      ),
      color: (
        /*threshold*/
        ctx[14].color
      ),
      colorMode: (
        /*colorMode*/
        ctx[0]
      ),
      min: (
        /*min*/
        ctx[1]
      ),
      max: (
        /*max*/
        ctx[2]
      ),
      base: (
        /*i*/
        ctx[16] === /*sorted*/
        ctx[3].length - 1
      )
    }
  });
  thresholdlineeditor.$on("value", value_handler);
  thresholdlineeditor.$on("color", color_handler);
  let if_block = (
    /*i*/
    ctx[16] !== /*sorted*/
    ctx[3].length - 1 && create_if_block$t(ctx)
  );
  return {
    key: key_1,
    first: null,
    c() {
      div = element("div");
      create_component(thresholdlineeditor.$$.fragment);
      t0 = space();
      if (if_block)
        if_block.c();
      t1 = space();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(thresholdlineeditor.$$.fragment, div_nodes);
      t0 = claim_space(div_nodes);
      if (if_block)
        if_block.l(div_nodes);
      t1 = claim_space(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "join w-full");
      this.first = div;
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(thresholdlineeditor, div, null);
      append_hydration(div, t0);
      if (if_block)
        if_block.m(div, null);
      append_hydration(div, t1);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const thresholdlineeditor_changes = {};
      if (dirty & /*sorted*/
      8)
        thresholdlineeditor_changes.value = /*threshold*/
        ctx[14].value;
      if (dirty & /*sorted*/
      8)
        thresholdlineeditor_changes.color = /*threshold*/
        ctx[14].color;
      if (dirty & /*colorMode*/
      1)
        thresholdlineeditor_changes.colorMode = /*colorMode*/
        ctx[0];
      if (dirty & /*min*/
      2)
        thresholdlineeditor_changes.min = /*min*/
        ctx[1];
      if (dirty & /*max*/
      4)
        thresholdlineeditor_changes.max = /*max*/
        ctx[2];
      if (dirty & /*sorted*/
      8)
        thresholdlineeditor_changes.base = /*i*/
        ctx[16] === /*sorted*/
        ctx[3].length - 1;
      thresholdlineeditor.$set(thresholdlineeditor_changes);
      if (
        /*i*/
        ctx[16] !== /*sorted*/
        ctx[3].length - 1
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
          if (dirty & /*sorted*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$t(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, t1);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(thresholdlineeditor.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(thresholdlineeditor.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(thresholdlineeditor);
      if (if_block)
        if_block.d();
    }
  };
}
function create_fragment$P(ctx) {
  let button;
  let icon;
  let t0;
  let span;
  let textContent = "Add threshold";
  let t2;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: mdiPlus } });
  let each_value = ensure_array_like(
    /*sorted*/
    ctx[3]
  );
  const get_key = (ctx2) => (
    /*threshold*/
    ctx2[14].id
  );
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$a(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$a(key, child_ctx));
  }
  return {
    c() {
      button = element("button");
      create_component(icon.$$.fragment);
      t0 = space();
      span = element("span");
      span.textContent = textContent;
      t2 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      t0 = claim_space(button_nodes);
      span = claim_element(button_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-j834yi")
        span.textContent = textContent;
      button_nodes.forEach(detach);
      t2 = claim_space(nodes);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
      this.h();
    },
    h() {
      attr(button, "class", "btn");
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      mount_component(icon, button, null);
      append_hydration(button, t0);
      append_hydration(button, span);
      insert_hydration(target, t2, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*remove, sorted, colorMode, min, max, setValue, setColor*/
      191) {
        each_value = ensure_array_like(
          /*sorted*/
          ctx2[3]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$a, each_1_anchor, get_each_context$a);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t2);
        detach(each_1_anchor);
      }
      destroy_component(icon);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d(detaching);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$P($$self, $$props, $$invalidate) {
  let sorted;
  let { thresholds } = $$props;
  let { colorMode } = $$props;
  let { min = Number.MIN_SAFE_INTEGER } = $$props;
  let { max = Number.MAX_SAFE_INTEGER } = $$props;
  function setColor(threshold, color2) {
    let copy = [...sorted];
    const index2 = copy.findIndex((t2) => t2.id === threshold.id);
    copy[index2] = { ...threshold, color: color2 };
    $$invalidate(8, thresholds = copy);
  }
  function setValue(threshold, value) {
    let copy = [...sorted];
    const index2 = copy.findIndex((t2) => t2.id === threshold.id);
    copy[index2] = { ...threshold, value };
    $$invalidate(8, thresholds = copy);
  }
  function add() {
    let value = 0;
    const first = sorted[0];
    if (first.value !== min) {
      value = first.value;
    }
    const threshold = {
      id: v4(),
      color: colorMode + "(255,255,255" + (colorMode === "rgba" ? ",1" : "") + ")",
      value: value + 1
    };
    $$invalidate(8, thresholds = [threshold, ...sorted]);
  }
  function remove(threshold) {
    $$invalidate(8, thresholds = thresholds == null ? void 0 : thresholds.filter((t2) => t2.id !== threshold.id));
  }
  function createBase() {
    const threshold = {
      id: v4(),
      color: colorMode + "(255,255,255" + (colorMode === "rgba" ? ",1" : "") + ")",
      value: min
    };
    $$invalidate(8, thresholds = [threshold]);
    return thresholds;
  }
  const click_handler = () => add();
  const value_handler = (threshold, e2) => setValue(threshold, e2.detail);
  const color_handler = (threshold, e2) => setColor(threshold, e2.detail);
  const click_handler_1 = (threshold) => remove(threshold);
  $$self.$$set = ($$props2) => {
    if ("thresholds" in $$props2)
      $$invalidate(8, thresholds = $$props2.thresholds);
    if ("colorMode" in $$props2)
      $$invalidate(0, colorMode = $$props2.colorMode);
    if ("min" in $$props2)
      $$invalidate(1, min = $$props2.min);
    if ("max" in $$props2)
      $$invalidate(2, max = $$props2.max);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*thresholds*/
    256) {
      $$invalidate(3, sorted = (thresholds ?? createBase()).sort((a3, b2) => {
        if (a3.value === b2.value)
          return 0;
        if (a3.value > b2.value)
          return -1;
        return 1;
      }));
    }
  };
  return [
    colorMode,
    min,
    max,
    sorted,
    setColor,
    setValue,
    add,
    remove,
    thresholds,
    click_handler,
    value_handler,
    color_handler,
    click_handler_1
  ];
}
class ThresholdEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$P, create_fragment$P, safe_not_equal, {
      thresholds: 8,
      colorMode: 0,
      min: 1,
      max: 2
    });
  }
}
function create_if_block$s(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Aggregation</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "10 seconds";
  let option1;
  let textContent_2 = "20 seconds";
  let option2;
  let textContent_3 = "30 seconds";
  let option3;
  let textContent_4 = "1 min";
  let option4;
  let textContent_5 = "5 min";
  let option5;
  let textContent_6 = "10 min";
  let option6;
  let textContent_7 = "15 min";
  let option7;
  let textContent_8 = "20 min";
  let option8;
  let textContent_9 = "30 min";
  let option9;
  let textContent_10 = "1 hour";
  let option10;
  let textContent_11 = "2 hours";
  let option11;
  let textContent_12 = "3 hours";
  let option12;
  let textContent_13 = "6 hours";
  let option13;
  let textContent_14 = "12 hours";
  let option14;
  let textContent_15 = "24 hours";
  let mounted;
  let dispose;
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      option5 = element("option");
      option5.textContent = textContent_6;
      option6 = element("option");
      option6.textContent = textContent_7;
      option7 = element("option");
      option7.textContent = textContent_8;
      option8 = element("option");
      option8.textContent = textContent_9;
      option9 = element("option");
      option9.textContent = textContent_10;
      option10 = element("option");
      option10.textContent = textContent_11;
      option11 = element("option");
      option11.textContent = textContent_12;
      option12 = element("option");
      option12.textContent = textContent_13;
      option13 = element("option");
      option13.textContent = textContent_14;
      option14 = element("option");
      option14.textContent = textContent_15;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-kshprb")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-fqd6xn")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-lm1b1")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-19t4dy3")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-e954px")
        option3.textContent = textContent_4;
      option4 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-16byasg")
        option4.textContent = textContent_5;
      option5 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-qv4m33")
        option5.textContent = textContent_6;
      option6 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-i5cigb")
        option6.textContent = textContent_7;
      option7 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option7) !== "svelte-1pnc6cr")
        option7.textContent = textContent_8;
      option8 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option8) !== "svelte-1kt2fny")
        option8.textContent = textContent_9;
      option9 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option9) !== "svelte-fqzs7y")
        option9.textContent = textContent_10;
      option10 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option10) !== "svelte-trmjt0")
        option10.textContent = textContent_11;
      option11 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option11) !== "svelte-7tizkx")
        option11.textContent = textContent_12;
      option12 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option12) !== "svelte-1nfv816")
        option12.textContent = textContent_13;
      option13 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option13) !== "svelte-1xgt7z")
        option13.textContent = textContent_14;
      option14 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option14) !== "svelte-1hzm4f")
        option14.textContent = textContent_15;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "10";
      set_input_value(option0, option0.__value);
      option1.__value = "20";
      set_input_value(option1, option1.__value);
      option2.__value = "30";
      set_input_value(option2, option2.__value);
      option3.__value = "60";
      set_input_value(option3, option3.__value);
      option4.__value = "300";
      set_input_value(option4, option4.__value);
      option5.__value = "600";
      set_input_value(option5, option5.__value);
      option6.__value = "900";
      set_input_value(option6, option6.__value);
      option7.__value = "1200";
      set_input_value(option7, option7.__value);
      option8.__value = "1800";
      set_input_value(option8, option8.__value);
      option9.__value = "3600";
      set_input_value(option9, option9.__value);
      option10.__value = "7200";
      set_input_value(option10, option10.__value);
      option11.__value = "10800";
      set_input_value(option11, option11.__value);
      option12.__value = "21600";
      set_input_value(option12, option12.__value);
      option13.__value = "43200";
      set_input_value(option13, option13.__value);
      option14.__value = "86400";
      set_input_value(option14, option14.__value);
      attr(select, "class", "select w-full mt-4");
      attr(select, "placeholder", "Sample rate");
      if (
        /*sampleRate*/
        ctx[6] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler*/
          ctx[13].call(select)
        ));
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      append_hydration(select, option4);
      append_hydration(select, option5);
      append_hydration(select, option6);
      append_hydration(select, option7);
      append_hydration(select, option8);
      append_hydration(select, option9);
      append_hydration(select, option10);
      append_hydration(select, option11);
      append_hydration(select, option12);
      append_hydration(select, option13);
      append_hydration(select, option14);
      select_option(
        select,
        /*sampleRate*/
        ctx[6],
        true
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*select_change_handler*/
          ctx[13]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*sampleRate*/
      64) {
        select_option(
          select,
          /*sampleRate*/
          ctx2[6]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$O(ctx) {
  let textpicker;
  let updating_value;
  let t0;
  let label0;
  let div0;
  let textContent = `<span class="label-text">Series type</span>`;
  let t2;
  let select0;
  let option0;
  let textContent_1 = "Line";
  let option1;
  let textContent_2 = "Bar";
  let t5;
  let label1;
  let div1;
  let textContent_3 = `<span class="label-text">Aggregation</span>`;
  let t7;
  let select1;
  let option2;
  let textContent_4 = "No aggregation";
  let option3;
  let textContent_5 = "Min";
  let option4;
  let textContent_6 = "Max";
  let option5;
  let textContent_7 = "Sum";
  let option6;
  let textContent_8 = "Avg";
  let option7;
  let textContent_9 = "First";
  let option8;
  let textContent_10 = "Las";
  let t15;
  let t16;
  let div2;
  let t17_value = (
    /*type*/
    ctx[1] + " color"
  );
  let t17;
  let t18;
  let thresholdeditor0;
  let updating_thresholds;
  let t19;
  let div3;
  let textContent_11 = "Background color";
  let t21;
  let thresholdeditor1;
  let updating_thresholds_1;
  let t22;
  let div4;
  let label2;
  let span2;
  let textContent_12 = "Fill background";
  let t24;
  let input;
  let current;
  let mounted;
  let dispose;
  function textpicker_value_binding(value) {
    ctx[10](value);
  }
  let textpicker_props = { label: "Title", placeholder: "Title" };
  if (
    /*title*/
    ctx[0] !== void 0
  ) {
    textpicker_props.value = /*title*/
    ctx[0];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  let if_block = (
    /*aggregation*/
    ctx[5] !== "none" && create_if_block$s(ctx)
  );
  function thresholdeditor0_thresholds_binding(value) {
    ctx[14](value);
  }
  let thresholdeditor0_props = { colorMode: "rgba" };
  if (
    /*border*/
    ctx[2] !== void 0
  ) {
    thresholdeditor0_props.thresholds = /*border*/
    ctx[2];
  }
  thresholdeditor0 = new ThresholdEditor({ props: thresholdeditor0_props });
  binding_callbacks.push(() => bind(thresholdeditor0, "thresholds", thresholdeditor0_thresholds_binding));
  function thresholdeditor1_thresholds_binding(value) {
    ctx[15](value);
  }
  let thresholdeditor1_props = { colorMode: "rgba" };
  if (
    /*background*/
    ctx[3] !== void 0
  ) {
    thresholdeditor1_props.thresholds = /*background*/
    ctx[3];
  }
  thresholdeditor1 = new ThresholdEditor({ props: thresholdeditor1_props });
  binding_callbacks.push(() => bind(thresholdeditor1, "thresholds", thresholdeditor1_thresholds_binding));
  return {
    c() {
      create_component(textpicker.$$.fragment);
      t0 = space();
      label0 = element("label");
      div0 = element("div");
      div0.innerHTML = textContent;
      t2 = space();
      select0 = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      t5 = space();
      label1 = element("label");
      div1 = element("div");
      div1.innerHTML = textContent_3;
      t7 = space();
      select1 = element("select");
      option2 = element("option");
      option2.textContent = textContent_4;
      option3 = element("option");
      option3.textContent = textContent_5;
      option4 = element("option");
      option4.textContent = textContent_6;
      option5 = element("option");
      option5.textContent = textContent_7;
      option6 = element("option");
      option6.textContent = textContent_8;
      option7 = element("option");
      option7.textContent = textContent_9;
      option8 = element("option");
      option8.textContent = textContent_10;
      t15 = space();
      if (if_block)
        if_block.c();
      t16 = space();
      div2 = element("div");
      t17 = text(t17_value);
      t18 = space();
      create_component(thresholdeditor0.$$.fragment);
      t19 = space();
      div3 = element("div");
      div3.textContent = textContent_11;
      t21 = space();
      create_component(thresholdeditor1.$$.fragment);
      t22 = space();
      div4 = element("div");
      label2 = element("label");
      span2 = element("span");
      span2.textContent = textContent_12;
      t24 = space();
      input = element("input");
      this.h();
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      label0 = claim_element(nodes, "LABEL", { class: true });
      var label0_nodes = children(label0);
      div0 = claim_element(label0_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div0) !== "svelte-e0i0sq")
        div0.innerHTML = textContent;
      t2 = claim_space(label0_nodes);
      select0 = claim_element(label0_nodes, "SELECT", { class: true });
      var select0_nodes = children(select0);
      option0 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-1uid2h2")
        option0.textContent = textContent_1;
      option1 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-1uefkc8")
        option1.textContent = textContent_2;
      select0_nodes.forEach(detach);
      label0_nodes.forEach(detach);
      t5 = claim_space(nodes);
      label1 = claim_element(nodes, "LABEL", { class: true });
      var label1_nodes = children(label1);
      div1 = claim_element(label1_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div1) !== "svelte-1tjwpev")
        div1.innerHTML = textContent_3;
      t7 = claim_space(label1_nodes);
      select1 = claim_element(label1_nodes, "SELECT", { class: true, placeholder: true });
      var select1_nodes = children(select1);
      option2 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-145srt7")
        option2.textContent = textContent_4;
      option3 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-14nmmaq")
        option3.textContent = textContent_5;
      option4 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-14udsz2")
        option4.textContent = textContent_6;
      option5 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-1d5dnig")
        option5.textContent = textContent_7;
      option6 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-1206w0m")
        option6.textContent = textContent_8;
      option7 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option7) !== "svelte-2x0w2e")
        option7.textContent = textContent_9;
      option8 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option8) !== "svelte-11o1vcg")
        option8.textContent = textContent_10;
      select1_nodes.forEach(detach);
      label1_nodes.forEach(detach);
      t15 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      t16 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      t17 = claim_text(div2_nodes, t17_value);
      div2_nodes.forEach(detach);
      t18 = claim_space(nodes);
      claim_component(thresholdeditor0.$$.fragment, nodes);
      t19 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div3) !== "svelte-1ddy3zz")
        div3.textContent = textContent_11;
      t21 = claim_space(nodes);
      claim_component(thresholdeditor1.$$.fragment, nodes);
      t22 = claim_space(nodes);
      div4 = claim_element(nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      label2 = claim_element(div4_nodes, "LABEL", { class: true });
      var label2_nodes = children(label2);
      span2 = claim_element(label2_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span2) !== "svelte-1g7huec")
        span2.textContent = textContent_12;
      t24 = claim_space(label2_nodes);
      input = claim_element(label2_nodes, "INPUT", { type: true, class: true });
      label2_nodes.forEach(detach);
      div4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "label");
      option0.__value = "line";
      set_input_value(option0, option0.__value);
      option1.__value = "bar";
      set_input_value(option1, option1.__value);
      attr(select0, "class", "select");
      if (
        /*type*/
        ctx[1] === void 0
      )
        add_render_callback(() => (
          /*select0_change_handler*/
          ctx[11].call(select0)
        ));
      attr(label0, "class", "form-control w-full");
      attr(div1, "class", "label");
      option2.__value = "none";
      set_input_value(option2, option2.__value);
      option3.__value = "min";
      set_input_value(option3, option3.__value);
      option4.__value = "max";
      set_input_value(option4, option4.__value);
      option5.__value = "sum";
      set_input_value(option5, option5.__value);
      option6.__value = "avg";
      set_input_value(option6, option6.__value);
      option7.__value = "first";
      set_input_value(option7, option7.__value);
      option8.__value = "last";
      set_input_value(option8, option8.__value);
      attr(select1, "class", "select w-full");
      attr(select1, "placeholder", "Aggregation");
      if (
        /*aggregation*/
        ctx[5] === void 0
      )
        add_render_callback(() => (
          /*select1_change_handler*/
          ctx[12].call(select1)
        ));
      attr(label1, "class", "form-control w-full");
      attr(div2, "class", "divider");
      attr(div3, "class", "divider");
      attr(span2, "class", "label-text");
      attr(input, "type", "checkbox");
      attr(input, "class", "toggle");
      attr(label2, "class", "label cursor-pointer");
      attr(div4, "class", "form-control mt-4");
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, label0, anchor);
      append_hydration(label0, div0);
      append_hydration(label0, t2);
      append_hydration(label0, select0);
      append_hydration(select0, option0);
      append_hydration(select0, option1);
      select_option(
        select0,
        /*type*/
        ctx[1],
        true
      );
      insert_hydration(target, t5, anchor);
      insert_hydration(target, label1, anchor);
      append_hydration(label1, div1);
      append_hydration(label1, t7);
      append_hydration(label1, select1);
      append_hydration(select1, option2);
      append_hydration(select1, option3);
      append_hydration(select1, option4);
      append_hydration(select1, option5);
      append_hydration(select1, option6);
      append_hydration(select1, option7);
      append_hydration(select1, option8);
      select_option(
        select1,
        /*aggregation*/
        ctx[5],
        true
      );
      insert_hydration(target, t15, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t16, anchor);
      insert_hydration(target, div2, anchor);
      append_hydration(div2, t17);
      insert_hydration(target, t18, anchor);
      mount_component(thresholdeditor0, target, anchor);
      insert_hydration(target, t19, anchor);
      insert_hydration(target, div3, anchor);
      insert_hydration(target, t21, anchor);
      mount_component(thresholdeditor1, target, anchor);
      insert_hydration(target, t22, anchor);
      insert_hydration(target, div4, anchor);
      append_hydration(div4, label2);
      append_hydration(label2, span2);
      append_hydration(label2, t24);
      append_hydration(label2, input);
      input.checked = /*fill*/
      ctx[4];
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            select0,
            "change",
            /*select0_change_handler*/
            ctx[11]
          ),
          listen(
            select1,
            "change",
            /*select1_change_handler*/
            ctx[12]
          ),
          listen(
            input,
            "change",
            /*input_change_handler*/
            ctx[16]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const textpicker_changes = {};
      if (!updating_value && dirty & /*title*/
      1) {
        updating_value = true;
        textpicker_changes.value = /*title*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
      if (dirty & /*type*/
      2) {
        select_option(
          select0,
          /*type*/
          ctx2[1]
        );
      }
      if (dirty & /*aggregation*/
      32) {
        select_option(
          select1,
          /*aggregation*/
          ctx2[5]
        );
      }
      if (
        /*aggregation*/
        ctx2[5] !== "none"
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$s(ctx2);
          if_block.c();
          if_block.m(t16.parentNode, t16);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if ((!current || dirty & /*type*/
      2) && t17_value !== (t17_value = /*type*/
      ctx2[1] + " color"))
        set_data(t17, t17_value);
      const thresholdeditor0_changes = {};
      if (!updating_thresholds && dirty & /*border*/
      4) {
        updating_thresholds = true;
        thresholdeditor0_changes.thresholds = /*border*/
        ctx2[2];
        add_flush_callback(() => updating_thresholds = false);
      }
      thresholdeditor0.$set(thresholdeditor0_changes);
      const thresholdeditor1_changes = {};
      if (!updating_thresholds_1 && dirty & /*background*/
      8) {
        updating_thresholds_1 = true;
        thresholdeditor1_changes.thresholds = /*background*/
        ctx2[3];
        add_flush_callback(() => updating_thresholds_1 = false);
      }
      thresholdeditor1.$set(thresholdeditor1_changes);
      if (dirty & /*fill*/
      16) {
        input.checked = /*fill*/
        ctx2[4];
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      transition_in(thresholdeditor0.$$.fragment, local);
      transition_in(thresholdeditor1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      transition_out(thresholdeditor0.$$.fragment, local);
      transition_out(thresholdeditor1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(label0);
        detach(t5);
        detach(label1);
        detach(t15);
        detach(t16);
        detach(div2);
        detach(t18);
        detach(t19);
        detach(div3);
        detach(t21);
        detach(t22);
        detach(div4);
      }
      destroy_component(textpicker, detaching);
      if (if_block)
        if_block.d(detaching);
      destroy_component(thresholdeditor0, detaching);
      destroy_component(thresholdeditor1, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$O($$self, $$props, $$invalidate) {
  let { series } = $$props;
  let { index: index2 } = $$props;
  const dispatch = createEventDispatcher();
  let insightId;
  let title;
  let type;
  let border;
  let background;
  let fill2;
  let aggregation;
  let sampleRate;
  function onSeries(s3) {
    $$invalidate(9, insightId = series.insightId);
    $$invalidate(0, title = series.title);
    $$invalidate(1, type = series.type ?? "line");
    $$invalidate(4, fill2 = series.fill ?? false);
    $$invalidate(5, aggregation = (series == null ? void 0 : series.aggregation) ?? "none");
    $$invalidate(6, sampleRate = (series == null ? void 0 : series.sampleRate) ?? 60);
    $$invalidate(2, border = s3.border ?? [
      {
        id: v4(),
        color: colors$1[index2 % colors$1.length],
        value: Number.MIN_SAFE_INTEGER
      }
    ]);
    $$invalidate(3, background = s3.background ?? [
      {
        id: v4(),
        color: colors$1[index2 % colors$1.length],
        value: Number.MIN_SAFE_INTEGER
      }
    ]);
  }
  function onChange(_insightId, _title, _type, _border, _background, _fill, _aggregation, _sampleRate) {
    if (_insightId !== series.insightId || _title !== series.title || _type !== series.type || _border !== series.border || _background !== series.background || _fill !== series.fill || _aggregation !== series.aggregation || _sampleRate !== series.sampleRate) {
      dispatch("series", {
        ...series,
        insightId: _insightId,
        title: _title,
        type: _type,
        border: _border,
        background: _background,
        fill: _fill,
        aggregation: _aggregation,
        sampleRate: _sampleRate
      });
    }
  }
  function textpicker_value_binding(value) {
    title = value;
    $$invalidate(0, title);
  }
  function select0_change_handler() {
    type = select_value(this);
    $$invalidate(1, type);
  }
  function select1_change_handler() {
    aggregation = select_value(this);
    $$invalidate(5, aggregation);
  }
  function select_change_handler() {
    sampleRate = select_value(this);
    $$invalidate(6, sampleRate);
  }
  function thresholdeditor0_thresholds_binding(value) {
    border = value;
    $$invalidate(2, border);
  }
  function thresholdeditor1_thresholds_binding(value) {
    background = value;
    $$invalidate(3, background);
  }
  function input_change_handler() {
    fill2 = this.checked;
    $$invalidate(4, fill2);
  }
  $$self.$$set = ($$props2) => {
    if ("series" in $$props2)
      $$invalidate(7, series = $$props2.series);
    if ("index" in $$props2)
      $$invalidate(8, index2 = $$props2.index);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*series*/
    128) {
      onSeries(series);
    }
    if ($$self.$$.dirty & /*insightId, title, type, border, background, fill, aggregation, sampleRate*/
    639) {
      onChange(insightId, title, type ?? "line", border, background, fill2, aggregation ?? "none", sampleRate ?? 60);
    }
  };
  return [
    title,
    type,
    border,
    background,
    fill2,
    aggregation,
    sampleRate,
    series,
    index2,
    insightId,
    textpicker_value_binding,
    select0_change_handler,
    select1_change_handler,
    select_change_handler,
    thresholdeditor0_thresholds_binding,
    thresholdeditor1_thresholds_binding,
    input_change_handler
  ];
}
class InsightEditorSeries extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$O, create_fragment$O, safe_not_equal, { series: 7, index: 8 });
  }
}
function get_each_context$9(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[22] = list[i2];
  child_ctx[24] = i2;
  return child_ctx;
}
function create_each_block$9(ctx) {
  let div2;
  let input;
  let input_checked_value;
  let t0;
  let div0;
  let button;
  let icon;
  let t1;
  let span;
  let t2_value = (
    /*getLogName*/
    ctx[8](
      /*s*/
      ctx[22].insightId
    ) + ""
  );
  let t2;
  let t3;
  let div1;
  let insighteditorseries;
  let t4;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: mdiDelete } });
  function click_handler() {
    return (
      /*click_handler*/
      ctx[15](
        /*i*/
        ctx[24]
      )
    );
  }
  function series_handler(...args) {
    return (
      /*series_handler*/
      ctx[16](
        /*i*/
        ctx[24],
        ...args
      )
    );
  }
  insighteditorseries = new InsightEditorSeries({
    props: {
      series: (
        /*s*/
        ctx[22]
      ),
      index: (
        /*i*/
        ctx[24]
      )
    }
  });
  insighteditorseries.$on("series", series_handler);
  return {
    c() {
      div2 = element("div");
      input = element("input");
      t0 = space();
      div0 = element("div");
      button = element("button");
      create_component(icon.$$.fragment);
      t1 = space();
      span = element("span");
      t2 = text(t2_value);
      t3 = space();
      div1 = element("div");
      create_component(insighteditorseries.$$.fragment);
      t4 = space();
      this.h();
    },
    l(nodes) {
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      input = claim_element(div2_nodes, "INPUT", { type: true, name: true });
      t0 = claim_space(div2_nodes);
      div0 = claim_element(div2_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      button = claim_element(div0_nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      button_nodes.forEach(detach);
      t1 = claim_space(div0_nodes);
      span = claim_element(div0_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t3 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      claim_component(insighteditorseries.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      t4 = claim_space(div2_nodes);
      div2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(input, "type", "radio");
      attr(input, "name", "insights");
      input.checked = input_checked_value = /*openInsightId*/
      ctx[5] === /*s*/
      ctx[22].insightId;
      attr(button, "class", "btn btn-circle");
      attr(span, "class", "my-auto");
      attr(div0, "class", "collapse-title text-lg font-medium flex justify-between");
      attr(div1, "class", "collapse-content p-0");
      attr(div2, "class", "collapse bg-base-200");
    },
    m(target, anchor) {
      insert_hydration(target, div2, anchor);
      append_hydration(div2, input);
      append_hydration(div2, t0);
      append_hydration(div2, div0);
      append_hydration(div0, button);
      mount_component(icon, button, null);
      append_hydration(div0, t1);
      append_hydration(div0, span);
      append_hydration(span, t2);
      append_hydration(div2, t3);
      append_hydration(div2, div1);
      mount_component(insighteditorseries, div1, null);
      append_hydration(div2, t4);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (!current || dirty & /*series*/
      4 && input_checked_value !== (input_checked_value = /*openInsightId*/
      ctx[5] === /*s*/
      ctx[22].insightId)) {
        input.checked = input_checked_value;
      }
      if ((!current || dirty & /*series*/
      4) && t2_value !== (t2_value = /*getLogName*/
      ctx[8](
        /*s*/
        ctx[22].insightId
      ) + ""))
        set_data(t2, t2_value);
      const insighteditorseries_changes = {};
      if (dirty & /*series*/
      4)
        insighteditorseries_changes.series = /*s*/
        ctx[22];
      insighteditorseries.$set(insighteditorseries_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      transition_in(insighteditorseries.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      transition_out(insighteditorseries.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      destroy_component(icon);
      destroy_component(insighteditorseries);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$N(ctx) {
  let insightpicker;
  let updating_logId;
  let t0;
  let label;
  let div0;
  let textContent = `<span class="label-text">Timespan</span>`;
  let t2;
  let select;
  let option0;
  let textContent_1 = "Last hour";
  let option1;
  let textContent_2 = "Last 6 hours";
  let option2;
  let textContent_3 = "Last 24 hours";
  let option3;
  let textContent_4 = "Last 7 days";
  let option4;
  let textContent_5 = "Last 14 days";
  let option5;
  let textContent_6 = "Last 31 days";
  let option6;
  let textContent_7 = "Today";
  let option7;
  let textContent_8 = "This week";
  let option8;
  let textContent_9 = "This month";
  let option9;
  let textContent_10 = "This year";
  let option10;
  let textContent_11 = "Yesterday";
  let option11;
  let textContent_12 = "Last week";
  let option12;
  let textContent_13 = "Last month";
  let option13;
  let textContent_14 = "Last year";
  let option14;
  let textContent_15 = "Last 2 years";
  let t18;
  let div3;
  let span1;
  let t19;
  let t20;
  let t21;
  let div2;
  let span2;
  let textContent_16 = "0 px";
  let t23;
  let div1;
  let input;
  let t24;
  let span3;
  let textContent_17 = "1000 px";
  let t26;
  let div4;
  let current;
  let mounted;
  let dispose;
  function insightpicker_logId_binding(value) {
    ctx[11](value);
  }
  let insightpicker_props = {
    logs: Object.values(
      /*$insights*/
      ctx[4]
    )
  };
  if (
    /*selectedLogId*/
    ctx[3] !== void 0
  ) {
    insightpicker_props.logId = /*selectedLogId*/
    ctx[3];
  }
  insightpicker = new InsightPicker({ props: insightpicker_props });
  binding_callbacks.push(() => bind(insightpicker, "logId", insightpicker_logId_binding));
  insightpicker.$on(
    "logId",
    /*logId_handler*/
    ctx[12]
  );
  let each_value = ensure_array_like(
    /*series*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$9(get_each_context$9(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      create_component(insightpicker.$$.fragment);
      t0 = space();
      label = element("label");
      div0 = element("div");
      div0.innerHTML = textContent;
      t2 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      option5 = element("option");
      option5.textContent = textContent_6;
      option6 = element("option");
      option6.textContent = textContent_7;
      option7 = element("option");
      option7.textContent = textContent_8;
      option8 = element("option");
      option8.textContent = textContent_9;
      option9 = element("option");
      option9.textContent = textContent_10;
      option10 = element("option");
      option10.textContent = textContent_11;
      option11 = element("option");
      option11.textContent = textContent_12;
      option12 = element("option");
      option12.textContent = textContent_13;
      option13 = element("option");
      option13.textContent = textContent_14;
      option14 = element("option");
      option14.textContent = textContent_15;
      t18 = space();
      div3 = element("div");
      span1 = element("span");
      t19 = text(
        /*height*/
        ctx[0]
      );
      t20 = text(" px");
      t21 = space();
      div2 = element("div");
      span2 = element("span");
      span2.textContent = textContent_16;
      t23 = space();
      div1 = element("div");
      input = element("input");
      t24 = space();
      span3 = element("span");
      span3.textContent = textContent_17;
      t26 = space();
      div4 = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      claim_component(insightpicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div0 = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div0) !== "svelte-17cyzma")
        div0.innerHTML = textContent;
      t2 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-dmvaw")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-8kx4fq")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-119hu10")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-30guss")
        option3.textContent = textContent_4;
      option4 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-r6ech0")
        option4.textContent = textContent_5;
      option5 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-6ne8me")
        option5.textContent = textContent_6;
      option6 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-1onxf0k")
        option6.textContent = textContent_7;
      option7 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option7) !== "svelte-t3822c")
        option7.textContent = textContent_8;
      option8 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option8) !== "svelte-19yl4pk")
        option8.textContent = textContent_9;
      option9 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option9) !== "svelte-6m5zai")
        option9.textContent = textContent_10;
      option10 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option10) !== "svelte-77xndy")
        option10.textContent = textContent_11;
      option11 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option11) !== "svelte-16fylpw")
        option11.textContent = textContent_12;
      option12 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option12) !== "svelte-15jcaow")
        option12.textContent = textContent_13;
      option13 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option13) !== "svelte-dyoqja")
        option13.textContent = textContent_14;
      option14 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option14) !== "svelte-148vdam")
        option14.textContent = textContent_15;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      t18 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      span1 = claim_element(div3_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      t19 = claim_text(
        span1_nodes,
        /*height*/
        ctx[0]
      );
      t20 = claim_text(span1_nodes, " px");
      span1_nodes.forEach(detach);
      t21 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      span2 = claim_element(div2_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span2) !== "svelte-ulywky")
        span2.textContent = textContent_16;
      t23 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      input = claim_element(div1_nodes, "INPUT", {
        type: true,
        class: true,
        min: true,
        max: true,
        step: true
      });
      div1_nodes.forEach(detach);
      t24 = claim_space(div2_nodes);
      span3 = claim_element(div2_nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span3) !== "svelte-1gs5213")
        span3.textContent = textContent_17;
      div2_nodes.forEach(detach);
      div3_nodes.forEach(detach);
      t26 = claim_space(nodes);
      div4 = claim_element(nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div4_nodes);
      }
      div4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "label");
      option0.__value = "lastHour";
      set_input_value(option0, option0.__value);
      option1.__value = "last6Hours";
      set_input_value(option1, option1.__value);
      option2.__value = "last24Hours";
      set_input_value(option2, option2.__value);
      option3.__value = "last7Days";
      set_input_value(option3, option3.__value);
      option4.__value = "last14Days";
      set_input_value(option4, option4.__value);
      option5.__value = "last31Days";
      set_input_value(option5, option5.__value);
      option6.__value = "today";
      set_input_value(option6, option6.__value);
      option7.__value = "thisWeek";
      set_input_value(option7, option7.__value);
      option8.__value = "thisMonth";
      set_input_value(option8, option8.__value);
      option9.__value = "thisYear";
      set_input_value(option9, option9.__value);
      option10.__value = "yesterday";
      set_input_value(option10, option10.__value);
      option11.__value = "lastWeek";
      set_input_value(option11, option11.__value);
      option12.__value = "lastMonth";
      set_input_value(option12, option12.__value);
      option13.__value = "lastYear";
      set_input_value(option13, option13.__value);
      option14.__value = "last2Years";
      set_input_value(option14, option14.__value);
      attr(select, "class", "select");
      if (
        /*resolution*/
        ctx[1] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler*/
          ctx[13].call(select)
        ));
      attr(label, "class", "form-control w-full");
      attr(span1, "class", "w-full text-center");
      attr(span2, "class", "whitespace-nowrap");
      attr(input, "type", "range");
      attr(input, "class", "range");
      attr(input, "min", 0);
      attr(input, "max", 1e3);
      attr(input, "step", 1);
      attr(div1, "class", "h-full flex-grow");
      attr(span3, "class", "whitespace-nowrap");
      attr(div2, "class", "flex flex-row mt-2 gap-1");
      attr(div3, "class", "flex flex-col w-full h-full px-1");
      attr(div4, "class", "mt-4");
    },
    m(target, anchor) {
      mount_component(insightpicker, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, label, anchor);
      append_hydration(label, div0);
      append_hydration(label, t2);
      append_hydration(label, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      append_hydration(select, option4);
      append_hydration(select, option5);
      append_hydration(select, option6);
      append_hydration(select, option7);
      append_hydration(select, option8);
      append_hydration(select, option9);
      append_hydration(select, option10);
      append_hydration(select, option11);
      append_hydration(select, option12);
      append_hydration(select, option13);
      append_hydration(select, option14);
      select_option(
        select,
        /*resolution*/
        ctx[1],
        true
      );
      insert_hydration(target, t18, anchor);
      insert_hydration(target, div3, anchor);
      append_hydration(div3, span1);
      append_hydration(span1, t19);
      append_hydration(span1, t20);
      append_hydration(div3, t21);
      append_hydration(div3, div2);
      append_hydration(div2, span2);
      append_hydration(div2, t23);
      append_hydration(div2, div1);
      append_hydration(div1, input);
      set_input_value(
        input,
        /*height*/
        ctx[0]
      );
      append_hydration(div2, t24);
      append_hydration(div2, span3);
      insert_hydration(target, t26, anchor);
      insert_hydration(target, div4, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div4, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[13]
          ),
          listen(
            input,
            "change",
            /*input_change_input_handler*/
            ctx[14]
          ),
          listen(
            input,
            "input",
            /*input_change_input_handler*/
            ctx[14]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const insightpicker_changes = {};
      if (dirty & /*$insights*/
      16)
        insightpicker_changes.logs = Object.values(
          /*$insights*/
          ctx2[4]
        );
      if (!updating_logId && dirty & /*selectedLogId*/
      8) {
        updating_logId = true;
        insightpicker_changes.logId = /*selectedLogId*/
        ctx2[3];
        add_flush_callback(() => updating_logId = false);
      }
      insightpicker.$set(insightpicker_changes);
      if (dirty & /*resolution*/
      2) {
        select_option(
          select,
          /*resolution*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*height*/
      1)
        set_data(
          t19,
          /*height*/
          ctx2[0]
        );
      if (dirty & /*height*/
      1) {
        set_input_value(
          input,
          /*height*/
          ctx2[0]
        );
      }
      if (dirty & /*series, onSeries, getLogName, removeInsight, openInsightId*/
      932) {
        each_value = ensure_array_like(
          /*series*/
          ctx2[2]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$9(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$9(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(div4, null);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(insightpicker.$$.fragment, local);
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      transition_out(insightpicker.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(label);
        detach(t18);
        detach(div3);
        detach(t26);
        detach(div4);
      }
      destroy_component(insightpicker, detaching);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$N($$self, $$props, $$invalidate) {
  let $devices;
  let $insights;
  component_subscribe($$self, devices, ($$value) => $$invalidate(17, $devices = $$value));
  component_subscribe($$self, insights, ($$value) => $$invalidate(4, $insights = $$value));
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let openInsightId;
  let height;
  let resolution;
  let series = [];
  let selectedLogId;
  function onSettings(_settings) {
    $$invalidate(1, resolution = _settings.resolution ?? "today");
    $$invalidate(2, series = [...(_settings == null ? void 0 : _settings.series) ?? []]);
    $$invalidate(0, height = settings.height ?? 200);
  }
  function onChanges(_series, _resolution, _height) {
    if (_series !== settings.series || _resolution !== settings.resolution || _height !== settings.height) {
      $$invalidate(10, settings = {
        ...settings,
        series: _series,
        resolution: _resolution,
        height: _height
      });
      dispatch("settings", settings);
    }
  }
  function onLog(logId) {
    $$invalidate(2, series = [...series, { insightId: logId }]);
    $$invalidate(3, selectedLogId = void 0);
  }
  function onSeries(index2, s3) {
    const updatedSeries = [...series];
    updatedSeries[index2] = { ...s3 };
    $$invalidate(2, series = updatedSeries);
  }
  function getLogName(logId) {
    if (logId !== void 0) {
      const log = $insights[logId];
      return getOwnerName(log.ownerUri) + " - " + log.title;
    }
    return "Unknown";
  }
  function getOwnerName(uri) {
    var _a2;
    if (uri.startsWith("homey:device:")) {
      const prefix = "homey:device:";
      const id = uri.slice(prefix.length);
      return ((_a2 = $devices[id]) == null ? void 0 : _a2.name) ?? uri;
    } else if (uri.startsWith("homey:manager:apps")) {
      return "Homey Apps";
    } else if (uri.startsWith("homey:manager:system")) {
      return "Homey System";
    } else if (uri.startsWith("homey:manager:weather")) {
      return "Homey Weather";
    } else if (uri.startsWith("homey:manager:logic")) {
      return "Homey Logic";
    } else {
      return uri;
    }
  }
  function removeInsight(index2) {
    $$invalidate(2, series = [...series.filter((s3, i2) => i2 !== index2)]);
  }
  function insightpicker_logId_binding(value) {
    selectedLogId = value;
    $$invalidate(3, selectedLogId);
  }
  const logId_handler = (e2) => onLog(e2.detail);
  function select_change_handler() {
    resolution = select_value(this);
    $$invalidate(1, resolution);
  }
  function input_change_input_handler() {
    height = to_number(this.value);
    $$invalidate(0, height);
  }
  const click_handler = (i2) => removeInsight(i2);
  const series_handler = (i2, e2) => onSeries(i2, e2.detail);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(10, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1024) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*series, resolution, height*/
    7) {
      onChanges(series, resolution, height);
    }
  };
  return [
    height,
    resolution,
    series,
    selectedLogId,
    $insights,
    openInsightId,
    onLog,
    onSeries,
    getLogName,
    removeInsight,
    settings,
    insightpicker_logId_binding,
    logId_handler,
    select_change_handler,
    input_change_input_handler,
    click_handler,
    series_handler
  ];
}
class InsightEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$N, create_fragment$N, safe_not_equal, { settings: 10 });
  }
}
/*!
 * @kurkle/color v0.3.4
 * https://github.com/kurkle/color#readme
 * (c) 2024 Jukka Kurkela
 * Released under the MIT License
 */
function round$1(v) {
  return v + 0.5 | 0;
}
const lim = (v, l, h3) => Math.max(Math.min(v, h3), l);
function p2b(v) {
  return lim(round$1(v * 2.55), 0, 255);
}
function n2b(v) {
  return lim(round$1(v * 255), 0, 255);
}
function b2n(v) {
  return lim(round$1(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
  return lim(round$1(v * 100), 0, 100);
}
const map$1 = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };
const hex = [..."0123456789ABCDEF"];
const h1 = (b2) => hex[b2 & 15];
const h22 = (b2) => hex[(b2 & 240) >> 4] + hex[b2 & 15];
const eq = (b2) => (b2 & 240) >> 4 === (b2 & 15);
const isShort = (v) => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
function hexParse(str) {
  var len = str.length;
  var ret;
  if (str[0] === "#") {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map$1[str[1]] * 17,
        g: 255 & map$1[str[2]] * 17,
        b: 255 & map$1[str[3]] * 17,
        a: len === 5 ? map$1[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map$1[str[1]] << 4 | map$1[str[2]],
        g: map$1[str[3]] << 4 | map$1[str[4]],
        b: map$1[str[5]] << 4 | map$1[str[6]],
        a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
      };
    }
  }
  return ret;
}
const alpha = (a3, f) => a3 < 255 ? f(a3) : "";
function hexString(v) {
  var f = isShort(v) ? h1 : h22;
  return v ? "#" + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : void 0;
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h3, s3, l) {
  const a3 = s3 * Math.min(l, 1 - l);
  const f = (n, k2 = (n + h3 / 30) % 12) => l - a3 * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
  return [f(0), f(8), f(4)];
}
function hsv2rgbn(h3, s3, v) {
  const f = (n, k2 = (n + h3 / 60) % 6) => v - v * s3 * Math.max(Math.min(k2, 4 - k2, 1), 0);
  return [f(5), f(3), f(1)];
}
function hwb2rgbn(h3, w2, b2) {
  const rgb = hsl2rgbn(h3, 1, 0.5);
  let i2;
  if (w2 + b2 > 1) {
    i2 = 1 / (w2 + b2);
    w2 *= i2;
    b2 *= i2;
  }
  for (i2 = 0; i2 < 3; i2++) {
    rgb[i2] *= 1 - w2 - b2;
    rgb[i2] += w2;
  }
  return rgb;
}
function hueValue(r, g, b2, d3, max) {
  if (r === max) {
    return (g - b2) / d3 + (g < b2 ? 6 : 0);
  }
  if (g === max) {
    return (b2 - r) / d3 + 2;
  }
  return (r - g) / d3 + 4;
}
function rgb2hsl(v) {
  const range = 255;
  const r = v.r / range;
  const g = v.g / range;
  const b2 = v.b / range;
  const max = Math.max(r, g, b2);
  const min = Math.min(r, g, b2);
  const l = (max + min) / 2;
  let h3, s3, d3;
  if (max !== min) {
    d3 = max - min;
    s3 = l > 0.5 ? d3 / (2 - max - min) : d3 / (max + min);
    h3 = hueValue(r, g, b2, d3, max);
    h3 = h3 * 60 + 0.5;
  }
  return [h3 | 0, s3 || 0, l];
}
function calln(f, a3, b2, c2) {
  return (Array.isArray(a3) ? f(a3[0], a3[1], a3[2]) : f(a3, b2, c2)).map(n2b);
}
function hsl2rgb(h3, s3, l) {
  return calln(hsl2rgbn, h3, s3, l);
}
function hwb2rgb(h3, w2, b2) {
  return calln(hwb2rgbn, h3, w2, b2);
}
function hsv2rgb(h3, s3, v) {
  return calln(hsv2rgbn, h3, s3, v);
}
function hue(h3) {
  return (h3 % 360 + 360) % 360;
}
function hueParse(str) {
  const m3 = HUE_RE.exec(str);
  let a3 = 255;
  let v;
  if (!m3) {
    return;
  }
  if (m3[5] !== v) {
    a3 = m3[6] ? p2b(+m3[5]) : n2b(+m3[5]);
  }
  const h3 = hue(+m3[2]);
  const p1 = +m3[3] / 100;
  const p2 = +m3[4] / 100;
  if (m3[1] === "hwb") {
    v = hwb2rgb(h3, p1, p2);
  } else if (m3[1] === "hsv") {
    v = hsv2rgb(h3, p1, p2);
  } else {
    v = hsl2rgb(h3, p1, p2);
  }
  return {
    r: v[0],
    g: v[1],
    b: v[2],
    a: a3
  };
}
function rotate(v, deg) {
  var h3 = rgb2hsl(v);
  h3[0] = hue(h3[0] + deg);
  h3 = hsl2rgb(h3);
  v.r = h3[0];
  v.g = h3[1];
  v.b = h3[2];
}
function hslString(v) {
  if (!v) {
    return;
  }
  const a3 = rgb2hsl(v);
  const h3 = a3[0];
  const s3 = n2p(a3[1]);
  const l = n2p(a3[2]);
  return v.a < 255 ? `hsla(${h3}, ${s3}%, ${l}%, ${b2n(v.a)})` : `hsl(${h3}, ${s3}%, ${l}%)`;
}
const map$2 = {
  x: "dark",
  Z: "light",
  Y: "re",
  X: "blu",
  W: "gr",
  V: "medium",
  U: "slate",
  A: "ee",
  T: "ol",
  S: "or",
  B: "ra",
  C: "lateg",
  D: "ights",
  R: "in",
  Q: "turquois",
  E: "hi",
  P: "ro",
  O: "al",
  N: "le",
  M: "de",
  L: "yello",
  F: "en",
  K: "ch",
  G: "arks",
  H: "ea",
  I: "ightg",
  J: "wh"
};
const names$1 = {
  OiceXe: "f0f8ff",
  antiquewEte: "faebd7",
  aqua: "ffff",
  aquamarRe: "7fffd4",
  azuY: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "0",
  blanKedOmond: "ffebcd",
  Xe: "ff",
  XeviTet: "8a2be2",
  bPwn: "a52a2a",
  burlywood: "deb887",
  caMtXe: "5f9ea0",
  KartYuse: "7fff00",
  KocTate: "d2691e",
  cSO: "ff7f50",
  cSnflowerXe: "6495ed",
  cSnsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "ffff",
  xXe: "8b",
  xcyan: "8b8b",
  xgTMnPd: "b8860b",
  xWay: "a9a9a9",
  xgYF: "6400",
  xgYy: "a9a9a9",
  xkhaki: "bdb76b",
  xmagFta: "8b008b",
  xTivegYF: "556b2f",
  xSange: "ff8c00",
  xScEd: "9932cc",
  xYd: "8b0000",
  xsOmon: "e9967a",
  xsHgYF: "8fbc8f",
  xUXe: "483d8b",
  xUWay: "2f4f4f",
  xUgYy: "2f4f4f",
  xQe: "ced1",
  xviTet: "9400d3",
  dAppRk: "ff1493",
  dApskyXe: "bfff",
  dimWay: "696969",
  dimgYy: "696969",
  dodgerXe: "1e90ff",
  fiYbrick: "b22222",
  flSOwEte: "fffaf0",
  foYstWAn: "228b22",
  fuKsia: "ff00ff",
  gaRsbSo: "dcdcdc",
  ghostwEte: "f8f8ff",
  gTd: "ffd700",
  gTMnPd: "daa520",
  Way: "808080",
  gYF: "8000",
  gYFLw: "adff2f",
  gYy: "808080",
  honeyMw: "f0fff0",
  hotpRk: "ff69b4",
  RdianYd: "cd5c5c",
  Rdigo: "4b0082",
  ivSy: "fffff0",
  khaki: "f0e68c",
  lavFMr: "e6e6fa",
  lavFMrXsh: "fff0f5",
  lawngYF: "7cfc00",
  NmoncEffon: "fffacd",
  ZXe: "add8e6",
  ZcSO: "f08080",
  Zcyan: "e0ffff",
  ZgTMnPdLw: "fafad2",
  ZWay: "d3d3d3",
  ZgYF: "90ee90",
  ZgYy: "d3d3d3",
  ZpRk: "ffb6c1",
  ZsOmon: "ffa07a",
  ZsHgYF: "20b2aa",
  ZskyXe: "87cefa",
  ZUWay: "778899",
  ZUgYy: "778899",
  ZstAlXe: "b0c4de",
  ZLw: "ffffe0",
  lime: "ff00",
  limegYF: "32cd32",
  lRF: "faf0e6",
  magFta: "ff00ff",
  maPon: "800000",
  VaquamarRe: "66cdaa",
  VXe: "cd",
  VScEd: "ba55d3",
  VpurpN: "9370db",
  VsHgYF: "3cb371",
  VUXe: "7b68ee",
  VsprRggYF: "fa9a",
  VQe: "48d1cc",
  VviTetYd: "c71585",
  midnightXe: "191970",
  mRtcYam: "f5fffa",
  mistyPse: "ffe4e1",
  moccasR: "ffe4b5",
  navajowEte: "ffdead",
  navy: "80",
  Tdlace: "fdf5e6",
  Tive: "808000",
  TivedBb: "6b8e23",
  Sange: "ffa500",
  SangeYd: "ff4500",
  ScEd: "da70d6",
  pOegTMnPd: "eee8aa",
  pOegYF: "98fb98",
  pOeQe: "afeeee",
  pOeviTetYd: "db7093",
  papayawEp: "ffefd5",
  pHKpuff: "ffdab9",
  peru: "cd853f",
  pRk: "ffc0cb",
  plum: "dda0dd",
  powMrXe: "b0e0e6",
  purpN: "800080",
  YbeccapurpN: "663399",
  Yd: "ff0000",
  Psybrown: "bc8f8f",
  PyOXe: "4169e1",
  saddNbPwn: "8b4513",
  sOmon: "fa8072",
  sandybPwn: "f4a460",
  sHgYF: "2e8b57",
  sHshell: "fff5ee",
  siFna: "a0522d",
  silver: "c0c0c0",
  skyXe: "87ceeb",
  UXe: "6a5acd",
  UWay: "708090",
  UgYy: "708090",
  snow: "fffafa",
  sprRggYF: "ff7f",
  stAlXe: "4682b4",
  tan: "d2b48c",
  teO: "8080",
  tEstN: "d8bfd8",
  tomato: "ff6347",
  Qe: "40e0d0",
  viTet: "ee82ee",
  JHt: "f5deb3",
  wEte: "ffffff",
  wEtesmoke: "f5f5f5",
  Lw: "ffff00",
  LwgYF: "9acd32"
};
function unpack() {
  const unpacked = {};
  const keys = Object.keys(names$1);
  const tkeys = Object.keys(map$2);
  let i2, j, k2, ok, nk;
  for (i2 = 0; i2 < keys.length; i2++) {
    ok = nk = keys[i2];
    for (j = 0; j < tkeys.length; j++) {
      k2 = tkeys[j];
      nk = nk.replace(k2, map$2[k2]);
    }
    k2 = parseInt(names$1[ok], 16);
    unpacked[nk] = [k2 >> 16 & 255, k2 >> 8 & 255, k2 & 255];
  }
  return unpacked;
}
let names;
function nameParse(str) {
  if (!names) {
    names = unpack();
    names.transparent = [0, 0, 0, 0];
  }
  const a3 = names[str.toLowerCase()];
  return a3 && {
    r: a3[0],
    g: a3[1],
    b: a3[2],
    a: a3.length === 4 ? a3[3] : 255
  };
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
  const m3 = RGB_RE.exec(str);
  let a3 = 255;
  let r, g, b2;
  if (!m3) {
    return;
  }
  if (m3[7] !== r) {
    const v = +m3[7];
    a3 = m3[8] ? p2b(v) : lim(v * 255, 0, 255);
  }
  r = +m3[1];
  g = +m3[3];
  b2 = +m3[5];
  r = 255 & (m3[2] ? p2b(r) : lim(r, 0, 255));
  g = 255 & (m3[4] ? p2b(g) : lim(g, 0, 255));
  b2 = 255 & (m3[6] ? p2b(b2) : lim(b2, 0, 255));
  return {
    r,
    g,
    b: b2,
    a: a3
  };
}
function rgbString(v) {
  return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);
}
const to = (v) => v <= 31308e-7 ? v * 12.92 : Math.pow(v, 1 / 2.4) * 1.055 - 0.055;
const from = (v) => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
function interpolate$1(rgb1, rgb2, t2) {
  const r = from(b2n(rgb1.r));
  const g = from(b2n(rgb1.g));
  const b2 = from(b2n(rgb1.b));
  return {
    r: n2b(to(r + t2 * (from(b2n(rgb2.r)) - r))),
    g: n2b(to(g + t2 * (from(b2n(rgb2.g)) - g))),
    b: n2b(to(b2 + t2 * (from(b2n(rgb2.b)) - b2))),
    a: rgb1.a + t2 * (rgb2.a - rgb1.a)
  };
}
function modHSL(v, i2, ratio) {
  if (v) {
    let tmp = rgb2hsl(v);
    tmp[i2] = Math.max(0, Math.min(tmp[i2] + tmp[i2] * ratio, i2 === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v.r = tmp[0];
    v.g = tmp[1];
    v.b = tmp[2];
  }
}
function clone$1(v, proto) {
  return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
  var v = { r: 0, g: 0, b: 0, a: 255 };
  if (Array.isArray(input)) {
    if (input.length >= 3) {
      v = { r: input[0], g: input[1], b: input[2], a: 255 };
      if (input.length > 3) {
        v.a = n2b(input[3]);
      }
    }
  } else {
    v = clone$1(input, { r: 0, g: 0, b: 0, a: 1 });
    v.a = n2b(v.a);
  }
  return v;
}
function functionParse(str) {
  if (str.charAt(0) === "r") {
    return rgbParse(str);
  }
  return hueParse(str);
}
class Color {
  constructor(input) {
    if (input instanceof Color) {
      return input;
    }
    const type = typeof input;
    let v;
    if (type === "object") {
      v = fromObject(input);
    } else if (type === "string") {
      v = hexParse(input) || nameParse(input) || functionParse(input);
    }
    this._rgb = v;
    this._valid = !!v;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
    var v = clone$1(this._rgb);
    if (v) {
      v.a = b2n(v.a);
    }
    return v;
  }
  set rgb(obj) {
    this._rgb = fromObject(obj);
  }
  rgbString() {
    return this._valid ? rgbString(this._rgb) : void 0;
  }
  hexString() {
    return this._valid ? hexString(this._rgb) : void 0;
  }
  hslString() {
    return this._valid ? hslString(this._rgb) : void 0;
  }
  mix(color2, weight) {
    if (color2) {
      const c1 = this.rgb;
      const c2 = color2.rgb;
      let w2;
      const p = weight === w2 ? 0.5 : weight;
      const w3 = 2 * p - 1;
      const a3 = c1.a - c2.a;
      const w1 = ((w3 * a3 === -1 ? w3 : (w3 + a3) / (1 + w3 * a3)) + 1) / 2;
      w2 = 1 - w1;
      c1.r = 255 & w1 * c1.r + w2 * c2.r + 0.5;
      c1.g = 255 & w1 * c1.g + w2 * c2.g + 0.5;
      c1.b = 255 & w1 * c1.b + w2 * c2.b + 0.5;
      c1.a = p * c1.a + (1 - p) * c2.a;
      this.rgb = c1;
    }
    return this;
  }
  interpolate(color2, t2) {
    if (color2) {
      this._rgb = interpolate$1(this._rgb, color2._rgb, t2);
    }
    return this;
  }
  clone() {
    return new Color(this.rgb);
  }
  alpha(a3) {
    this._rgb.a = n2b(a3);
    return this;
  }
  clearer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 - ratio;
    return this;
  }
  greyscale() {
    const rgb = this._rgb;
    const val = round$1(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    rgb.r = rgb.g = rgb.b = val;
    return this;
  }
  opaquer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 + ratio;
    return this;
  }
  negate() {
    const v = this._rgb;
    v.r = 255 - v.r;
    v.g = 255 - v.g;
    v.b = 255 - v.b;
    return this;
  }
  lighten(ratio) {
    modHSL(this._rgb, 2, ratio);
    return this;
  }
  darken(ratio) {
    modHSL(this._rgb, 2, -ratio);
    return this;
  }
  saturate(ratio) {
    modHSL(this._rgb, 1, ratio);
    return this;
  }
  desaturate(ratio) {
    modHSL(this._rgb, 1, -ratio);
    return this;
  }
  rotate(deg) {
    rotate(this._rgb, deg);
    return this;
  }
}
/*!
 * Chart.js v4.4.9
 * https://www.chartjs.org
 * (c) 2025 Chart.js Contributors
 * Released under the MIT License
 */
function noop() {
}
const uid = (() => {
  let id = 0;
  return () => id++;
})();
function isNullOrUndef(value) {
  return value === null || value === void 0;
}
function isArray(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }
  const type = Object.prototype.toString.call(value);
  if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") {
    return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
function isNumberFinite(value) {
  return (typeof value === "number" || value instanceof Number) && isFinite(+value);
}
function finiteOrDefault(value, defaultValue) {
  return isNumberFinite(value) ? value : defaultValue;
}
function valueOrDefault(value, defaultValue) {
  return typeof value === "undefined" ? defaultValue : value;
}
const toPercentage = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : +value / dimension;
const toDimension = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === "function") {
    return fn.apply(thisArg, args);
  }
}
function each(loopable, fn, thisArg, reverse) {
  let i2, len, keys;
  if (isArray(loopable)) {
    len = loopable.length;
    if (reverse) {
      for (i2 = len - 1; i2 >= 0; i2--) {
        fn.call(thisArg, loopable[i2], i2);
      }
    } else {
      for (i2 = 0; i2 < len; i2++) {
        fn.call(thisArg, loopable[i2], i2);
      }
    }
  } else if (isObject(loopable)) {
    keys = Object.keys(loopable);
    len = keys.length;
    for (i2 = 0; i2 < len; i2++) {
      fn.call(thisArg, loopable[keys[i2]], keys[i2]);
    }
  }
}
function _elementsEqual(a0, a1) {
  let i2, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i2 = 0, ilen = a0.length; i2 < ilen; ++i2) {
    v0 = a0[i2];
    v1 = a1[i2];
    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }
  return true;
}
function clone(source) {
  if (isArray(source)) {
    return source.map(clone);
  }
  if (isObject(source)) {
    const target = /* @__PURE__ */ Object.create(null);
    const keys = Object.keys(source);
    const klen = keys.length;
    let k2 = 0;
    for (; k2 < klen; ++k2) {
      target[keys[k2]] = clone(source[keys[k2]]);
    }
    return target;
  }
  return source;
}
function isValidKey(key) {
  return [
    "__proto__",
    "prototype",
    "constructor"
  ].indexOf(key) === -1;
}
function _merger(key, target, source, options) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    merge(tval, sval, options);
  } else {
    target[key] = clone(sval);
  }
}
function merge(target, source, options) {
  const sources = isArray(source) ? source : [
    source
  ];
  const ilen = sources.length;
  if (!isObject(target)) {
    return target;
  }
  options = options || {};
  const merger = options.merger || _merger;
  let current;
  for (let i2 = 0; i2 < ilen; ++i2) {
    current = sources[i2];
    if (!isObject(current)) {
      continue;
    }
    const keys = Object.keys(current);
    for (let k2 = 0, klen = keys.length; k2 < klen; ++k2) {
      merger(keys[k2], target, current, options);
    }
  }
  return target;
}
function mergeIf(target, source) {
  return merge(target, source, {
    merger: _mergerIf
  });
}
function _mergerIf(key, target, source) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
    target[key] = clone(sval);
  }
}
const keyResolvers = {
  // Chart.helpers.core resolveObjectKey should resolve empty key to root object
  "": (v) => v,
  // default resolvers
  x: (o) => o.x,
  y: (o) => o.y
};
function _splitKey(key) {
  const parts = key.split(".");
  const keys = [];
  let tmp = "";
  for (const part of parts) {
    tmp += part;
    if (tmp.endsWith("\\")) {
      tmp = tmp.slice(0, -1) + ".";
    } else {
      keys.push(tmp);
      tmp = "";
    }
  }
  return keys;
}
function _getKeyResolver(key) {
  const keys = _splitKey(key);
  return (obj) => {
    for (const k2 of keys) {
      if (k2 === "") {
        break;
      }
      obj = obj && obj[k2];
    }
    return obj;
  };
}
function resolveObjectKey(obj, key) {
  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
  return resolver(obj);
}
function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value) => typeof value !== "undefined";
const isFunction = (value) => typeof value === "function";
const setsEqual = (a3, b2) => {
  if (a3.size !== b2.size) {
    return false;
  }
  for (const item of a3) {
    if (!b2.has(item)) {
      return false;
    }
  }
  return true;
};
function _isClickEvent(e2) {
  return e2.type === "mouseup" || e2.type === "click" || e2.type === "contextmenu";
}
const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function almostEquals(x2, y3, epsilon) {
  return Math.abs(x2 - y3) < epsilon;
}
function niceNum(range) {
  const roundedRange = Math.round(range);
  range = almostEquals(range, roundedRange, range / 1e3) ? roundedRange : range;
  const niceRange = Math.pow(10, Math.floor(log10(range)));
  const fraction = range / niceRange;
  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
  return niceFraction * niceRange;
}
function _factorize(value) {
  const result = [];
  const sqrt = Math.sqrt(value);
  let i2;
  for (i2 = 1; i2 < sqrt; i2++) {
    if (value % i2 === 0) {
      result.push(i2);
      result.push(value / i2);
    }
  }
  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }
  result.sort((a3, b2) => a3 - b2).pop();
  return result;
}
function isNonPrimitive(n) {
  return typeof n === "symbol" || typeof n === "object" && n !== null && !(Symbol.toPrimitive in n || "toString" in n || "valueOf" in n);
}
function isNumber(n) {
  return !isNonPrimitive(n) && !isNaN(parseFloat(n)) && isFinite(n);
}
function almostWhole(x2, epsilon) {
  const rounded = Math.round(x2);
  return rounded - epsilon <= x2 && rounded + epsilon >= x2;
}
function _setMinAndMaxByKey(array, target, property) {
  let i2, ilen, value;
  for (i2 = 0, ilen = array.length; i2 < ilen; i2++) {
    value = array[i2][property];
    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}
function toRadians(degrees) {
  return degrees * (PI / 180);
}
function toDegrees(radians) {
  return radians * (180 / PI);
}
function _decimalPlaces(x2) {
  if (!isNumberFinite(x2)) {
    return;
  }
  let e2 = 1;
  let p = 0;
  while (Math.round(x2 * e2) / e2 !== x2) {
    e2 *= 10;
    p++;
  }
  return p;
}
function getAngleFromPoint(centrePoint, anglePoint) {
  const distanceFromXCenter = anglePoint.x - centrePoint.x;
  const distanceFromYCenter = anglePoint.y - centrePoint.y;
  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
  if (angle < -0.5 * PI) {
    angle += TAU;
  }
  return {
    angle,
    distance: radialDistanceFromCenter
  };
}
function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _angleDiff(a3, b2) {
  return (a3 - b2 + PITAU) % TAU - PI;
}
function _normalizeAngle(a3) {
  return (a3 % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
  const a3 = _normalizeAngle(angle);
  const s3 = _normalizeAngle(start);
  const e2 = _normalizeAngle(end);
  const angleToStart = _normalizeAngle(s3 - a3);
  const angleToEnd = _normalizeAngle(e2 - a3);
  const startToAngle = _normalizeAngle(a3 - s3);
  const endToAngle = _normalizeAngle(a3 - e2);
  return a3 === s3 || a3 === e2 || sameAngleIsFullCircle && s3 === e2 || angleToStart > angleToEnd && startToAngle < endToAngle;
}
function _limitValue(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function _int16Range(value) {
  return _limitValue(value, -32768, 32767);
}
function _isBetween(value, start, end, epsilon = 1e-6) {
  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table, value, cmp) {
  cmp = cmp || ((index2) => table[index2] < value);
  let hi = table.length - 1;
  let lo = 0;
  let mid;
  while (hi - lo > 1) {
    mid = lo + hi >> 1;
    if (cmp(mid)) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return {
    lo,
    hi
  };
}
const _lookupByKey = (table, key, value, last) => _lookup(table, value, last ? (index2) => {
  const ti = table[index2][key];
  return ti < value || ti === value && table[index2 + 1][key] === value;
} : (index2) => table[index2][key] < value);
const _rlookupByKey = (table, key, value) => _lookup(table, value, (index2) => table[index2][key] >= value);
function _filterBetween(values, min, max) {
  let start = 0;
  let end = values.length;
  while (start < end && values[start] < min) {
    start++;
  }
  while (end > start && values[end - 1] > max) {
    end--;
  }
  return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const arrayEvents = [
  "push",
  "pop",
  "shift",
  "splice",
  "unshift"
];
function listenArrayEvents(array, listener) {
  if (array._chartjs) {
    array._chartjs.listeners.push(listener);
    return;
  }
  Object.defineProperty(array, "_chartjs", {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [
        listener
      ]
    }
  });
  arrayEvents.forEach((key) => {
    const method = "_onData" + _capitalize(key);
    const base2 = array[key];
    Object.defineProperty(array, key, {
      configurable: true,
      enumerable: false,
      value(...args) {
        const res = base2.apply(this, args);
        array._chartjs.listeners.forEach((object) => {
          if (typeof object[method] === "function") {
            object[method](...args);
          }
        });
        return res;
      }
    });
  });
}
function unlistenArrayEvents(array, listener) {
  const stub = array._chartjs;
  if (!stub) {
    return;
  }
  const listeners = stub.listeners;
  const index2 = listeners.indexOf(listener);
  if (index2 !== -1) {
    listeners.splice(index2, 1);
  }
  if (listeners.length > 0) {
    return;
  }
  arrayEvents.forEach((key) => {
    delete array[key];
  });
  delete array._chartjs;
}
function _arrayUnique(items) {
  const set2 = new Set(items);
  if (set2.size === items.length) {
    return items;
  }
  return Array.from(set2);
}
const requestAnimFrame = function() {
  if (typeof window === "undefined") {
    return function(callback2) {
      return callback2();
    };
  }
  return window.requestAnimationFrame;
}();
function throttled(fn, thisArg) {
  let argsToUse = [];
  let ticking = false;
  return function(...args) {
    argsToUse = args;
    if (!ticking) {
      ticking = true;
      requestAnimFrame.call(window, () => {
        ticking = false;
        fn.apply(thisArg, argsToUse);
      });
    }
  };
}
function debounce(fn, delay) {
  let timeout;
  return function(...args) {
    if (delay) {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay, args);
    } else {
      fn.apply(this, args);
    }
    return delay;
  };
}
const _toLeftRightCenter = (align) => align === "start" ? "left" : align === "end" ? "right" : "center";
const _alignStartEnd = (align, start, end) => align === "start" ? start : align === "end" ? end : (start + end) / 2;
const _textX = (align, left, right, rtl) => {
  const check = rtl ? "left" : "right";
  return align === check ? right : align === "center" ? (left + right) / 2 : left;
};
function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
  const pointCount = points.length;
  let start = 0;
  let count = pointCount;
  if (meta._sorted) {
    const { iScale, vScale, _parsed } = meta;
    const spanGaps = meta.dataset ? meta.dataset.options ? meta.dataset.options.spanGaps : null : null;
    const axis = iScale.axis;
    const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
    if (minDefined) {
      start = Math.min(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, axis, min).lo,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo
      );
      if (spanGaps) {
        const distanceToDefinedLo = _parsed.slice(0, start + 1).reverse().findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        start -= Math.max(0, distanceToDefinedLo);
      }
      start = _limitValue(start, 0, pointCount - 1);
    }
    if (maxDefined) {
      let end = Math.max(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1
      );
      if (spanGaps) {
        const distanceToDefinedHi = _parsed.slice(end - 1).findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        end += Math.max(0, distanceToDefinedHi);
      }
      count = _limitValue(end, start, pointCount) - start;
    } else {
      count = pointCount - start;
    }
  }
  return {
    start,
    count
  };
}
function _scaleRangesChanged(meta) {
  const { xScale, yScale, _scaleRanges } = meta;
  const newRanges = {
    xmin: xScale.min,
    xmax: xScale.max,
    ymin: yScale.min,
    ymax: yScale.max
  };
  if (!_scaleRanges) {
    meta._scaleRanges = newRanges;
    return true;
  }
  const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
  Object.assign(_scaleRanges, newRanges);
  return changed;
}
const atEdge = (t2) => t2 === 0 || t2 === 1;
const elasticIn = (t2, s3, p) => -(Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 - s3) * TAU / p));
const elasticOut = (t2, s3, p) => Math.pow(2, -10 * t2) * Math.sin((t2 - s3) * TAU / p) + 1;
const effects = {
  linear: (t2) => t2,
  easeInQuad: (t2) => t2 * t2,
  easeOutQuad: (t2) => -t2 * (t2 - 2),
  easeInOutQuad: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 : -0.5 * (--t2 * (t2 - 2) - 1),
  easeInCubic: (t2) => t2 * t2 * t2,
  easeOutCubic: (t2) => (t2 -= 1) * t2 * t2 + 1,
  easeInOutCubic: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 + 2),
  easeInQuart: (t2) => t2 * t2 * t2 * t2,
  easeOutQuart: (t2) => -((t2 -= 1) * t2 * t2 * t2 - 1),
  easeInOutQuart: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 : -0.5 * ((t2 -= 2) * t2 * t2 * t2 - 2),
  easeInQuint: (t2) => t2 * t2 * t2 * t2 * t2,
  easeOutQuint: (t2) => (t2 -= 1) * t2 * t2 * t2 * t2 + 1,
  easeInOutQuint: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2),
  easeInSine: (t2) => -Math.cos(t2 * HALF_PI) + 1,
  easeOutSine: (t2) => Math.sin(t2 * HALF_PI),
  easeInOutSine: (t2) => -0.5 * (Math.cos(PI * t2) - 1),
  easeInExpo: (t2) => t2 === 0 ? 0 : Math.pow(2, 10 * (t2 - 1)),
  easeOutExpo: (t2) => t2 === 1 ? 1 : -Math.pow(2, -10 * t2) + 1,
  easeInOutExpo: (t2) => atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * Math.pow(2, 10 * (t2 * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t2 * 2 - 1)) + 2),
  easeInCirc: (t2) => t2 >= 1 ? t2 : -(Math.sqrt(1 - t2 * t2) - 1),
  easeOutCirc: (t2) => Math.sqrt(1 - (t2 -= 1) * t2),
  easeInOutCirc: (t2) => (t2 /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t2 * t2) - 1) : 0.5 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1),
  easeInElastic: (t2) => atEdge(t2) ? t2 : elasticIn(t2, 0.075, 0.3),
  easeOutElastic: (t2) => atEdge(t2) ? t2 : elasticOut(t2, 0.075, 0.3),
  easeInOutElastic(t2) {
    const s3 = 0.1125;
    const p = 0.45;
    return atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * elasticIn(t2 * 2, s3, p) : 0.5 + 0.5 * elasticOut(t2 * 2 - 1, s3, p);
  },
  easeInBack(t2) {
    const s3 = 1.70158;
    return t2 * t2 * ((s3 + 1) * t2 - s3);
  },
  easeOutBack(t2) {
    const s3 = 1.70158;
    return (t2 -= 1) * t2 * ((s3 + 1) * t2 + s3) + 1;
  },
  easeInOutBack(t2) {
    let s3 = 1.70158;
    if ((t2 /= 0.5) < 1) {
      return 0.5 * (t2 * t2 * (((s3 *= 1.525) + 1) * t2 - s3));
    }
    return 0.5 * ((t2 -= 2) * t2 * (((s3 *= 1.525) + 1) * t2 + s3) + 2);
  },
  easeInBounce: (t2) => 1 - effects.easeOutBounce(1 - t2),
  easeOutBounce(t2) {
    const m3 = 7.5625;
    const d3 = 2.75;
    if (t2 < 1 / d3) {
      return m3 * t2 * t2;
    }
    if (t2 < 2 / d3) {
      return m3 * (t2 -= 1.5 / d3) * t2 + 0.75;
    }
    if (t2 < 2.5 / d3) {
      return m3 * (t2 -= 2.25 / d3) * t2 + 0.9375;
    }
    return m3 * (t2 -= 2.625 / d3) * t2 + 0.984375;
  },
  easeInOutBounce: (t2) => t2 < 0.5 ? effects.easeInBounce(t2 * 2) * 0.5 : effects.easeOutBounce(t2 * 2 - 1) * 0.5 + 0.5
};
function isPatternOrGradient(value) {
  if (value && typeof value === "object") {
    const type = value.toString();
    return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
  }
  return false;
}
function color(value) {
  return isPatternOrGradient(value) ? value : new Color(value);
}
function getHoverColor(value) {
  return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
}
const numbers = [
  "x",
  "y",
  "borderWidth",
  "radius",
  "tension"
];
const colors = [
  "color",
  "borderColor",
  "backgroundColor"
];
function applyAnimationsDefaults(defaults2) {
  defaults2.set("animation", {
    delay: void 0,
    duration: 1e3,
    easing: "easeOutQuart",
    fn: void 0,
    from: void 0,
    loop: void 0,
    to: void 0,
    type: void 0
  });
  defaults2.describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (name) => name !== "onProgress" && name !== "onComplete" && name !== "fn"
  });
  defaults2.set("animations", {
    colors: {
      type: "color",
      properties: colors
    },
    numbers: {
      type: "number",
      properties: numbers
    }
  });
  defaults2.describe("animations", {
    _fallback: "animation"
  });
  defaults2.set("transitions", {
    active: {
      animation: {
        duration: 400
      }
    },
    resize: {
      animation: {
        duration: 0
      }
    },
    show: {
      animations: {
        colors: {
          from: "transparent"
        },
        visible: {
          type: "boolean",
          duration: 0
        }
      }
    },
    hide: {
      animations: {
        colors: {
          to: "transparent"
        },
        visible: {
          type: "boolean",
          easing: "linear",
          fn: (v) => v | 0
        }
      }
    }
  });
}
function applyLayoutsDefaults(defaults2) {
  defaults2.set("layout", {
    autoPadding: true,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
}
const intlCache = /* @__PURE__ */ new Map();
function getNumberFormat(locale2, options) {
  options = options || {};
  const cacheKey = locale2 + JSON.stringify(options);
  let formatter = intlCache.get(cacheKey);
  if (!formatter) {
    formatter = new Intl.NumberFormat(locale2, options);
    intlCache.set(cacheKey, formatter);
  }
  return formatter;
}
function formatNumber(num, locale2, options) {
  return getNumberFormat(locale2, options).format(num);
}
const formatters = {
  values(value) {
    return isArray(value) ? value : "" + value;
  },
  numeric(tickValue, index2, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const locale2 = this.chart.options.locale;
    let notation;
    let delta = tickValue;
    if (ticks.length > 1) {
      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
      if (maxTick < 1e-4 || maxTick > 1e15) {
        notation = "scientific";
      }
      delta = calculateDelta(tickValue, ticks);
    }
    const logDelta = log10(Math.abs(delta));
    const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
    const options = {
      notation,
      minimumFractionDigits: numDecimal,
      maximumFractionDigits: numDecimal
    };
    Object.assign(options, this.options.ticks.format);
    return formatNumber(tickValue, locale2, options);
  },
  logarithmic(tickValue, index2, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const remain = ticks[index2].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
    if ([
      1,
      2,
      3,
      5,
      10,
      15
    ].includes(remain) || index2 > 0.8 * ticks.length) {
      return formatters.numeric.call(this, tickValue, index2, ticks);
    }
    return "";
  }
};
function calculateDelta(tickValue, ticks) {
  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
    delta = tickValue - Math.floor(tickValue);
  }
  return delta;
}
var Ticks = {
  formatters
};
function applyScaleDefaults(defaults2) {
  defaults2.set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    clip: true,
    grace: 0,
    grid: {
      display: true,
      lineWidth: 1,
      drawOnChartArea: true,
      drawTicks: true,
      tickLength: 8,
      tickWidth: (_ctx, options) => options.lineWidth,
      tickColor: (_ctx, options) => options.color,
      offset: false
    },
    border: {
      display: true,
      dash: [],
      dashOffset: 0,
      width: 1
    },
    title: {
      display: false,
      text: "",
      padding: {
        top: 4,
        bottom: 4
      }
    },
    ticks: {
      minRotation: 0,
      maxRotation: 50,
      mirror: false,
      textStrokeWidth: 0,
      textStrokeColor: "",
      padding: 3,
      display: true,
      autoSkip: true,
      autoSkipPadding: 3,
      labelOffset: 0,
      callback: Ticks.formatters.values,
      minor: {},
      major: {},
      align: "center",
      crossAlign: "near",
      showLabelBackdrop: false,
      backdropColor: "rgba(255, 255, 255, 0.75)",
      backdropPadding: 2
    }
  });
  defaults2.route("scale.ticks", "color", "", "color");
  defaults2.route("scale.grid", "color", "", "borderColor");
  defaults2.route("scale.border", "color", "", "borderColor");
  defaults2.route("scale.title", "color", "", "color");
  defaults2.describe("scale", {
    _fallback: false,
    _scriptable: (name) => !name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser",
    _indexable: (name) => name !== "borderDash" && name !== "tickBorderDash" && name !== "dash"
  });
  defaults2.describe("scales", {
    _fallback: "scale"
  });
  defaults2.describe("scale.ticks", {
    _scriptable: (name) => name !== "backdropPadding" && name !== "callback",
    _indexable: (name) => name !== "backdropPadding"
  });
}
const overrides = /* @__PURE__ */ Object.create(null);
const descriptors = /* @__PURE__ */ Object.create(null);
function getScope$1(node, key) {
  if (!key) {
    return node;
  }
  const keys = key.split(".");
  for (let i2 = 0, n = keys.length; i2 < n; ++i2) {
    const k2 = keys[i2];
    node = node[k2] || (node[k2] = /* @__PURE__ */ Object.create(null));
  }
  return node;
}
function set(root, scope, values) {
  if (typeof scope === "string") {
    return merge(getScope$1(root, scope), values);
  }
  return merge(getScope$1(root, ""), scope);
}
class Defaults {
  constructor(_descriptors2, _appliers) {
    this.animation = void 0;
    this.backgroundColor = "rgba(0,0,0,0.1)";
    this.borderColor = "rgba(0,0,0,0.1)";
    this.color = "#666";
    this.datasets = {};
    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
    this.elements = {};
    this.events = [
      "mousemove",
      "mouseout",
      "click",
      "touchstart",
      "touchmove"
    ];
    this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: "normal",
      lineHeight: 1.2,
      weight: null
    };
    this.hover = {};
    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);
    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);
    this.hoverColor = (ctx, options) => getHoverColor(options.color);
    this.indexAxis = "x";
    this.interaction = {
      mode: "nearest",
      intersect: true,
      includeInvisible: false
    };
    this.maintainAspectRatio = true;
    this.onHover = null;
    this.onClick = null;
    this.parsing = true;
    this.plugins = {};
    this.responsive = true;
    this.scale = void 0;
    this.scales = {};
    this.showLine = true;
    this.drawActiveElementsOnTop = true;
    this.describe(_descriptors2);
    this.apply(_appliers);
  }
  set(scope, values) {
    return set(this, scope, values);
  }
  get(scope) {
    return getScope$1(this, scope);
  }
  describe(scope, values) {
    return set(descriptors, scope, values);
  }
  override(scope, values) {
    return set(overrides, scope, values);
  }
  route(scope, name, targetScope, targetName) {
    const scopeObject = getScope$1(this, scope);
    const targetScopeObject = getScope$1(this, targetScope);
    const privateName = "_" + name;
    Object.defineProperties(scopeObject, {
      [privateName]: {
        value: scopeObject[name],
        writable: true
      },
      [name]: {
        enumerable: true,
        get() {
          const local = this[privateName];
          const target = targetScopeObject[targetName];
          if (isObject(local)) {
            return Object.assign({}, target, local);
          }
          return valueOrDefault(local, target);
        },
        set(value) {
          this[privateName] = value;
        }
      }
    });
  }
  apply(appliers) {
    appliers.forEach((apply) => apply(this));
  }
}
var defaults = /* @__PURE__ */ new Defaults({
  _scriptable: (name) => !name.startsWith("on"),
  _indexable: (name) => name !== "events",
  hover: {
    _fallback: "interaction"
  },
  interaction: {
    _scriptable: false,
    _indexable: false
  }
}, [
  applyAnimationsDefaults,
  applyLayoutsDefaults,
  applyScaleDefaults
]);
function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }
  return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
function _measureText(ctx, data, gc, longest, string) {
  let textWidth = data[string];
  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc.push(string);
  }
  if (textWidth > longest) {
    longest = textWidth;
  }
  return longest;
}
function _longestText(ctx, font, arrayOfThings, cache) {
  cache = cache || {};
  let data = cache.data = cache.data || {};
  let gc = cache.garbageCollect = cache.garbageCollect || [];
  if (cache.font !== font) {
    data = cache.data = {};
    gc = cache.garbageCollect = [];
    cache.font = font;
  }
  ctx.save();
  ctx.font = font;
  let longest = 0;
  const ilen = arrayOfThings.length;
  let i2, j, jlen, thing, nestedThing;
  for (i2 = 0; i2 < ilen; i2++) {
    thing = arrayOfThings[i2];
    if (thing !== void 0 && thing !== null && !isArray(thing)) {
      longest = _measureText(ctx, data, gc, longest, thing);
    } else if (isArray(thing)) {
      for (j = 0, jlen = thing.length; j < jlen; j++) {
        nestedThing = thing[j];
        if (nestedThing !== void 0 && nestedThing !== null && !isArray(nestedThing)) {
          longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
      }
    }
  }
  ctx.restore();
  const gcLen = gc.length / 2;
  if (gcLen > arrayOfThings.length) {
    for (i2 = 0; i2 < gcLen; i2++) {
      delete data[gc[i2]];
    }
    gc.splice(0, gcLen);
  }
  return longest;
}
function _alignPixel(chart, pixel, width) {
  const devicePixelRatio = chart.currentDevicePixelRatio;
  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clearCanvas(canvas, ctx) {
  if (!ctx && !canvas) {
    return;
  }
  ctx = ctx || canvas.getContext("2d");
  ctx.save();
  ctx.resetTransform();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}
function drawPoint(ctx, options, x2, y3) {
  drawPointLegend(ctx, options, x2, y3, null);
}
function drawPointLegend(ctx, options, x2, y3, w2) {
  let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
  const style = options.pointStyle;
  const rotation = options.rotation;
  const radius = options.radius;
  let rad = (rotation || 0) * RAD_PER_DEG;
  if (style && typeof style === "object") {
    type = style.toString();
    if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
      ctx.save();
      ctx.translate(x2, y3);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }
  if (isNaN(radius) || radius <= 0) {
    return;
  }
  ctx.beginPath();
  switch (style) {
    default:
      if (w2) {
        ctx.ellipse(x2, y3, w2 / 2, radius, 0, 0, TAU);
      } else {
        ctx.arc(x2, y3, radius, 0, TAU);
      }
      ctx.closePath();
      break;
    case "triangle":
      width = w2 ? w2 / 2 : radius;
      ctx.moveTo(x2 + Math.sin(rad) * width, y3 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y3 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y3 - Math.cos(rad) * radius);
      ctx.closePath();
      break;
    case "rectRounded":
      cornerRadius = radius * 0.516;
      size = radius - cornerRadius;
      xOffset = Math.cos(rad + QUARTER_PI) * size;
      xOffsetW = Math.cos(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size);
      yOffset = Math.sin(rad + QUARTER_PI) * size;
      yOffsetW = Math.sin(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size);
      ctx.arc(x2 - xOffsetW, y3 - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
      ctx.arc(x2 + yOffsetW, y3 - xOffset, cornerRadius, rad - HALF_PI, rad);
      ctx.arc(x2 + xOffsetW, y3 + yOffset, cornerRadius, rad, rad + HALF_PI);
      ctx.arc(x2 - yOffsetW, y3 + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
      ctx.closePath();
      break;
    case "rect":
      if (!rotation) {
        size = Math.SQRT1_2 * radius;
        width = w2 ? w2 / 2 : size;
        ctx.rect(x2 - width, y3 - size, 2 * width, 2 * size);
        break;
      }
      rad += QUARTER_PI;
    case "rectRot":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      ctx.closePath();
      break;
    case "crossRot":
      rad += QUARTER_PI;
    case "cross":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      break;
    case "star":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      rad += QUARTER_PI;
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      break;
    case "line":
      xOffset = w2 ? w2 / 2 : Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x2 - xOffset, y3 - yOffset);
      ctx.lineTo(x2 + xOffset, y3 + yOffset);
      break;
    case "dash":
      ctx.moveTo(x2, y3);
      ctx.lineTo(x2 + Math.cos(rad) * (w2 ? w2 / 2 : radius), y3 + Math.sin(rad) * radius);
      break;
    case false:
      ctx.closePath();
      break;
  }
  ctx.fill();
  if (options.borderWidth > 0) {
    ctx.stroke();
  }
}
function _isPointInArea(point, area, margin) {
  margin = margin || 0.5;
  return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}
function unclipArea(ctx) {
  ctx.restore();
}
function _steppedLineTo(ctx, previous, target, flip, mode) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  if (mode === "middle") {
    const midpoint = (previous.x + target.x) / 2;
    ctx.lineTo(midpoint, previous.y);
    ctx.lineTo(midpoint, target.y);
  } else if (mode === "after" !== !!flip) {
    ctx.lineTo(previous.x, target.y);
  } else {
    ctx.lineTo(target.x, previous.y);
  }
  ctx.lineTo(target.x, target.y);
}
function _bezierCurveTo(ctx, previous, target, flip) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function setRenderOpts(ctx, opts) {
  if (opts.translation) {
    ctx.translate(opts.translation[0], opts.translation[1]);
  }
  if (!isNullOrUndef(opts.rotation)) {
    ctx.rotate(opts.rotation);
  }
  if (opts.color) {
    ctx.fillStyle = opts.color;
  }
  if (opts.textAlign) {
    ctx.textAlign = opts.textAlign;
  }
  if (opts.textBaseline) {
    ctx.textBaseline = opts.textBaseline;
  }
}
function decorateText(ctx, x2, y3, line, opts) {
  if (opts.strikethrough || opts.underline) {
    const metrics = ctx.measureText(line);
    const left = x2 - metrics.actualBoundingBoxLeft;
    const right = x2 + metrics.actualBoundingBoxRight;
    const top = y3 - metrics.actualBoundingBoxAscent;
    const bottom = y3 + metrics.actualBoundingBoxDescent;
    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
    ctx.strokeStyle = ctx.fillStyle;
    ctx.beginPath();
    ctx.lineWidth = opts.decorationWidth || 2;
    ctx.moveTo(left, yDecoration);
    ctx.lineTo(right, yDecoration);
    ctx.stroke();
  }
}
function drawBackdrop(ctx, opts) {
  const oldColor = ctx.fillStyle;
  ctx.fillStyle = opts.color;
  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
  ctx.fillStyle = oldColor;
}
function renderText(ctx, text2, x2, y3, font, opts = {}) {
  const lines = isArray(text2) ? text2 : [
    text2
  ];
  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
  let i2, line;
  ctx.save();
  ctx.font = font.string;
  setRenderOpts(ctx, opts);
  for (i2 = 0; i2 < lines.length; ++i2) {
    line = lines[i2];
    if (opts.backdrop) {
      drawBackdrop(ctx, opts.backdrop);
    }
    if (stroke) {
      if (opts.strokeColor) {
        ctx.strokeStyle = opts.strokeColor;
      }
      if (!isNullOrUndef(opts.strokeWidth)) {
        ctx.lineWidth = opts.strokeWidth;
      }
      ctx.strokeText(line, x2, y3, opts.maxWidth);
    }
    ctx.fillText(line, x2, y3, opts.maxWidth);
    decorateText(ctx, x2, y3, line, opts);
    y3 += Number(font.lineHeight);
  }
  ctx.restore();
}
function addRoundedRectPath(ctx, rect) {
  const { x: x2, y: y3, w: w2, h: h3, radius } = rect;
  ctx.arc(x2 + radius.topLeft, y3 + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
  ctx.lineTo(x2, y3 + h3 - radius.bottomLeft);
  ctx.arc(x2 + radius.bottomLeft, y3 + h3 - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
  ctx.lineTo(x2 + w2 - radius.bottomRight, y3 + h3);
  ctx.arc(x2 + w2 - radius.bottomRight, y3 + h3 - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
  ctx.lineTo(x2 + w2, y3 + radius.topRight);
  ctx.arc(x2 + w2 - radius.topRight, y3 + radius.topRight, radius.topRight, 0, -HALF_PI, true);
  ctx.lineTo(x2 + radius.topLeft, y3);
}
const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
function toLineHeight(value, size) {
  const matches = ("" + value).match(LINE_HEIGHT);
  if (!matches || matches[1] === "normal") {
    return size * 1.2;
  }
  value = +matches[2];
  switch (matches[3]) {
    case "px":
      return value;
    case "%":
      value /= 100;
      break;
  }
  return size * value;
}
const numberOrZero = (v) => +v || 0;
function _readValueToProps(value, props) {
  const ret = {};
  const objProps = isObject(props);
  const keys = objProps ? Object.keys(props) : props;
  const read = isObject(value) ? objProps ? (prop) => valueOrDefault(value[prop], value[props[prop]]) : (prop) => value[prop] : () => value;
  for (const prop of keys) {
    ret[prop] = numberOrZero(read(prop));
  }
  return ret;
}
function toTRBL(value) {
  return _readValueToProps(value, {
    top: "y",
    right: "x",
    bottom: "y",
    left: "x"
  });
}
function toTRBLCorners(value) {
  return _readValueToProps(value, [
    "topLeft",
    "topRight",
    "bottomLeft",
    "bottomRight"
  ]);
}
function toPadding(value) {
  const obj = toTRBL(value);
  obj.width = obj.left + obj.right;
  obj.height = obj.top + obj.bottom;
  return obj;
}
function toFont(options, fallback) {
  options = options || {};
  fallback = fallback || defaults.font;
  let size = valueOrDefault(options.size, fallback.size);
  if (typeof size === "string") {
    size = parseInt(size, 10);
  }
  let style = valueOrDefault(options.style, fallback.style);
  if (style && !("" + style).match(FONT_STYLE)) {
    console.warn('Invalid font style specified: "' + style + '"');
    style = void 0;
  }
  const font = {
    family: valueOrDefault(options.family, fallback.family),
    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
    size,
    style,
    weight: valueOrDefault(options.weight, fallback.weight),
    string: ""
  };
  font.string = toFontString(font);
  return font;
}
function resolve(inputs, context, index2, info2) {
  let cacheable = true;
  let i2, ilen, value;
  for (i2 = 0, ilen = inputs.length; i2 < ilen; ++i2) {
    value = inputs[i2];
    if (value === void 0) {
      continue;
    }
    if (context !== void 0 && typeof value === "function") {
      value = value(context);
      cacheable = false;
    }
    if (index2 !== void 0 && isArray(value)) {
      value = value[index2 % value.length];
      cacheable = false;
    }
    if (value !== void 0) {
      if (info2 && !cacheable) {
        info2.cacheable = false;
      }
      return value;
    }
  }
}
function _addGrace(minmax, grace, beginAtZero) {
  const { min, max } = minmax;
  const change = toDimension(grace, (max - min) / 2);
  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;
  return {
    min: keepZero(min, -Math.abs(change)),
    max: keepZero(max, change)
  };
}
function createContext(parentContext, context) {
  return Object.assign(Object.create(parentContext), context);
}
function _createResolver(scopes2, prefixes = [
  ""
], rootScopes, fallback, getTarget = () => scopes2[0]) {
  const finalRootScopes = rootScopes || scopes2;
  if (typeof fallback === "undefined") {
    fallback = _resolve("_fallback", scopes2);
  }
  const cache = {
    [Symbol.toStringTag]: "Object",
    _cacheable: true,
    _scopes: scopes2,
    _rootScopes: finalRootScopes,
    _fallback: fallback,
    _getTarget: getTarget,
    override: (scope) => _createResolver([
      scope,
      ...scopes2
    ], prefixes, finalRootScopes, fallback)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete target._keys;
      delete scopes2[0][prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop) {
      return _cached(target, prop, () => _resolveWithPrefixes(prop, prefixes, scopes2, target));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(scopes2[0]);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return getKeysFromAllScopes(target).includes(prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys(target) {
      return getKeysFromAllScopes(target);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      const storage = target._storage || (target._storage = getTarget());
      target[prop] = storage[prop] = value;
      delete target._keys;
      return true;
    }
  });
}
function _attachContext(proxy, context, subProxy, descriptorDefaults) {
  const cache = {
    _cacheable: false,
    _proxy: proxy,
    _context: context,
    _subProxy: subProxy,
    _stack: /* @__PURE__ */ new Set(),
    _descriptors: _descriptors(proxy, descriptorDefaults),
    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete proxy[prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop, receiver) {
      return _cached(target, prop, () => _resolveWithContext(target, prop, receiver));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
        enumerable: true,
        configurable: true
      } : void 0 : Reflect.getOwnPropertyDescriptor(proxy, prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(proxy);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return Reflect.has(proxy, prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys() {
      return Reflect.ownKeys(proxy);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      proxy[prop] = value;
      delete target[prop];
      return true;
    }
  });
}
function _descriptors(proxy, defaults2 = {
  scriptable: true,
  indexable: true
}) {
  const { _scriptable = defaults2.scriptable, _indexable = defaults2.indexable, _allKeys = defaults2.allKeys } = proxy;
  return {
    allKeys: _allKeys,
    scriptable: _scriptable,
    indexable: _indexable,
    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
  };
}
const readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;
const needsSubResolver = (prop, value) => isObject(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve2) {
  if (Object.prototype.hasOwnProperty.call(target, prop) || prop === "constructor") {
    return target[prop];
  }
  const value = resolve2();
  target[prop] = value;
  return value;
}
function _resolveWithContext(target, prop, receiver) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  let value = _proxy[prop];
  if (isFunction(value) && descriptors2.isScriptable(prop)) {
    value = _resolveScriptable(prop, value, target, receiver);
  }
  if (isArray(value) && value.length) {
    value = _resolveArray(prop, value, target, descriptors2.isIndexable);
  }
  if (needsSubResolver(prop, value)) {
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors2);
  }
  return value;
}
function _resolveScriptable(prop, getValue, target, receiver) {
  const { _proxy, _context, _subProxy, _stack } = target;
  if (_stack.has(prop)) {
    throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
  }
  _stack.add(prop);
  let value = getValue(_context, _subProxy || receiver);
  _stack.delete(prop);
  if (needsSubResolver(prop, value)) {
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
  }
  return value;
}
function _resolveArray(prop, value, target, isIndexable) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  if (typeof _context.index !== "undefined" && isIndexable(prop)) {
    return value[_context.index % value.length];
  } else if (isObject(value[0])) {
    const arr = value;
    const scopes2 = _proxy._scopes.filter((s3) => s3 !== arr);
    value = [];
    for (const item of arr) {
      const resolver = createSubResolver(scopes2, _proxy, prop, item);
      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors2));
    }
  }
  return value;
}
function resolveFallback(fallback, prop, value) {
  return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent) => key === true ? parent : typeof key === "string" ? resolveObjectKey(parent, key) : void 0;
function addScopes(set2, parentScopes, key, parentFallback, value) {
  for (const parent of parentScopes) {
    const scope = getScope(key, parent);
    if (scope) {
      set2.add(scope);
      const fallback = resolveFallback(scope._fallback, key, value);
      if (typeof fallback !== "undefined" && fallback !== key && fallback !== parentFallback) {
        return fallback;
      }
    } else if (scope === false && typeof parentFallback !== "undefined" && key !== parentFallback) {
      return null;
    }
  }
  return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
  const rootScopes = resolver._rootScopes;
  const fallback = resolveFallback(resolver._fallback, prop, value);
  const allScopes = [
    ...parentScopes,
    ...rootScopes
  ];
  const set2 = /* @__PURE__ */ new Set();
  set2.add(value);
  let key = addScopesFromKey(set2, allScopes, prop, fallback || prop, value);
  if (key === null) {
    return false;
  }
  if (typeof fallback !== "undefined" && fallback !== prop) {
    key = addScopesFromKey(set2, allScopes, fallback, key, value);
    if (key === null) {
      return false;
    }
  }
  return _createResolver(Array.from(set2), [
    ""
  ], rootScopes, fallback, () => subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set2, allScopes, key, fallback, item) {
  while (key) {
    key = addScopes(set2, allScopes, key, fallback, item);
  }
  return key;
}
function subGetTarget(resolver, prop, value) {
  const parent = resolver._getTarget();
  if (!(prop in parent)) {
    parent[prop] = {};
  }
  const target = parent[prop];
  if (isArray(target) && isObject(value)) {
    return value;
  }
  return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes2, proxy) {
  let value;
  for (const prefix of prefixes) {
    value = _resolve(readKey(prefix, prop), scopes2);
    if (typeof value !== "undefined") {
      return needsSubResolver(prop, value) ? createSubResolver(scopes2, proxy, prop, value) : value;
    }
  }
}
function _resolve(key, scopes2) {
  for (const scope of scopes2) {
    if (!scope) {
      continue;
    }
    const value = scope[key];
    if (typeof value !== "undefined") {
      return value;
    }
  }
}
function getKeysFromAllScopes(target) {
  let keys = target._keys;
  if (!keys) {
    keys = target._keys = resolveKeysFromAllScopes(target._scopes);
  }
  return keys;
}
function resolveKeysFromAllScopes(scopes2) {
  const set2 = /* @__PURE__ */ new Set();
  for (const scope of scopes2) {
    for (const key of Object.keys(scope).filter((k2) => !k2.startsWith("_"))) {
      set2.add(key);
    }
  }
  return Array.from(set2);
}
function _parseObjectDataRadialScale(meta, data, start, count) {
  const { iScale } = meta;
  const { key = "r" } = this._parsing;
  const parsed = new Array(count);
  let i2, ilen, index2, item;
  for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
    index2 = i2 + start;
    item = data[index2];
    parsed[i2] = {
      r: iScale.parse(resolveObjectKey(item, key), index2)
    };
  }
  return parsed;
}
const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i2) => i2 < points.length && !points[i2].skip && points[i2];
const getValueAxis = (indexAxis) => indexAxis === "x" ? "y" : "x";
function splineCurve(firstPoint, middlePoint, afterPoint, t2) {
  const previous = firstPoint.skip ? middlePoint : firstPoint;
  const current = middlePoint;
  const next2 = afterPoint.skip ? middlePoint : afterPoint;
  const d01 = distanceBetweenPoints(current, previous);
  const d12 = distanceBetweenPoints(next2, current);
  let s01 = d01 / (d01 + d12);
  let s12 = d12 / (d01 + d12);
  s01 = isNaN(s01) ? 0 : s01;
  s12 = isNaN(s12) ? 0 : s12;
  const fa = t2 * s01;
  const fb = t2 * s12;
  return {
    previous: {
      x: current.x - fa * (next2.x - previous.x),
      y: current.y - fa * (next2.y - previous.y)
    },
    next: {
      x: current.x + fb * (next2.x - previous.x),
      y: current.y + fb * (next2.y - previous.y)
    }
  };
}
function monotoneAdjust(points, deltaK, mK) {
  const pointsLen = points.length;
  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i2 = 0; i2 < pointsLen - 1; ++i2) {
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent || !pointAfter) {
      continue;
    }
    if (almostEquals(deltaK[i2], 0, EPSILON)) {
      mK[i2] = mK[i2 + 1] = 0;
      continue;
    }
    alphaK = mK[i2] / deltaK[i2];
    betaK = mK[i2 + 1] / deltaK[i2];
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    if (squaredMagnitude <= 9) {
      continue;
    }
    tauK = 3 / Math.sqrt(squaredMagnitude);
    mK[i2] = alphaK * tauK * deltaK[i2];
    mK[i2 + 1] = betaK * tauK * deltaK[i2];
  }
}
function monotoneCompute(points, mK, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  let delta, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i2 = 0; i2 < pointsLen; ++i2) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent) {
      continue;
    }
    const iPixel = pointCurrent[indexAxis];
    const vPixel = pointCurrent[valueAxis];
    if (pointBefore) {
      delta = (iPixel - pointBefore[indexAxis]) / 3;
      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i2];
    }
    if (pointAfter) {
      delta = (pointAfter[indexAxis] - iPixel) / 3;
      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i2];
    }
  }
}
function splineCurveMonotone(points, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  const deltaK = Array(pointsLen).fill(0);
  const mK = Array(pointsLen);
  let i2, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (i2 = 0; i2 < pointsLen; ++i2) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent) {
      continue;
    }
    if (pointAfter) {
      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
      deltaK[i2] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
    }
    mK[i2] = !pointBefore ? deltaK[i2] : !pointAfter ? deltaK[i2 - 1] : sign(deltaK[i2 - 1]) !== sign(deltaK[i2]) ? 0 : (deltaK[i2 - 1] + deltaK[i2]) / 2;
  }
  monotoneAdjust(points, deltaK, mK);
  monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
  return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
  let i2, ilen, point, inArea, inAreaPrev;
  let inAreaNext = _isPointInArea(points[0], area);
  for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
    inAreaPrev = inArea;
    inArea = inAreaNext;
    inAreaNext = i2 < ilen - 1 && _isPointInArea(points[i2 + 1], area);
    if (!inArea) {
      continue;
    }
    point = points[i2];
    if (inAreaPrev) {
      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
    }
    if (inAreaNext) {
      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
    }
  }
}
function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
  let i2, ilen, point, controlPoints;
  if (options.spanGaps) {
    points = points.filter((pt) => !pt.skip);
  }
  if (options.cubicInterpolationMode === "monotone") {
    splineCurveMonotone(points, indexAxis);
  } else {
    let prev = loop ? points[points.length - 1] : points[0];
    for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
      point = points[i2];
      controlPoints = splineCurve(prev, point, points[Math.min(i2 + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
      point.cp1x = controlPoints.previous.x;
      point.cp1y = controlPoints.previous.y;
      point.cp2x = controlPoints.next.x;
      point.cp2y = controlPoints.next.y;
      prev = point;
    }
  }
  if (options.capBezierPoints) {
    capBezierPoints(points, area);
  }
}
function _isDomSupported() {
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function _getParentNode(domNode) {
  let parent = domNode.parentNode;
  if (parent && parent.toString() === "[object ShadowRoot]") {
    parent = parent.host;
  }
  return parent;
}
function parseMaxStyle(styleValue, node, parentProperty) {
  let valueInPixels;
  if (typeof styleValue === "string") {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf("%") !== -1) {
      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }
  return valueInPixels;
}
const getComputedStyle$1 = (element2) => element2.ownerDocument.defaultView.getComputedStyle(element2, null);
function getStyle(el, property) {
  return getComputedStyle$1(el).getPropertyValue(property);
}
const positions = [
  "top",
  "right",
  "bottom",
  "left"
];
function getPositionedStyle(styles, style, suffix) {
  const result = {};
  suffix = suffix ? "-" + suffix : "";
  for (let i2 = 0; i2 < 4; i2++) {
    const pos = positions[i2];
    result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
  }
  result.width = result.left + result.right;
  result.height = result.top + result.bottom;
  return result;
}
const useOffsetPos = (x2, y3, target) => (x2 > 0 || y3 > 0) && (!target || !target.shadowRoot);
function getCanvasPosition(e2, canvas) {
  const touches = e2.touches;
  const source = touches && touches.length ? touches[0] : e2;
  const { offsetX, offsetY } = source;
  let box = false;
  let x2, y3;
  if (useOffsetPos(offsetX, offsetY, e2.target)) {
    x2 = offsetX;
    y3 = offsetY;
  } else {
    const rect = canvas.getBoundingClientRect();
    x2 = source.clientX - rect.left;
    y3 = source.clientY - rect.top;
    box = true;
  }
  return {
    x: x2,
    y: y3,
    box
  };
}
function getRelativePosition(event, chart) {
  if ("native" in event) {
    return event;
  }
  const { canvas, currentDevicePixelRatio } = chart;
  const style = getComputedStyle$1(canvas);
  const borderBox = style.boxSizing === "border-box";
  const paddings = getPositionedStyle(style, "padding");
  const borders = getPositionedStyle(style, "border", "width");
  const { x: x2, y: y3, box } = getCanvasPosition(event, canvas);
  const xOffset = paddings.left + (box && borders.left);
  const yOffset = paddings.top + (box && borders.top);
  let { width, height } = chart;
  if (borderBox) {
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  return {
    x: Math.round((x2 - xOffset) / width * canvas.width / currentDevicePixelRatio),
    y: Math.round((y3 - yOffset) / height * canvas.height / currentDevicePixelRatio)
  };
}
function getContainerSize(canvas, width, height) {
  let maxWidth, maxHeight;
  if (width === void 0 || height === void 0) {
    const container = canvas && _getParentNode(canvas);
    if (!container) {
      width = canvas.clientWidth;
      height = canvas.clientHeight;
    } else {
      const rect = container.getBoundingClientRect();
      const containerStyle = getComputedStyle$1(container);
      const containerBorder = getPositionedStyle(containerStyle, "border", "width");
      const containerPadding = getPositionedStyle(containerStyle, "padding");
      width = rect.width - containerPadding.width - containerBorder.width;
      height = rect.height - containerPadding.height - containerBorder.height;
      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
    }
  }
  return {
    width,
    height,
    maxWidth: maxWidth || INFINITY,
    maxHeight: maxHeight || INFINITY
  };
}
const round1 = (v) => Math.round(v * 10) / 10;
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
  const style = getComputedStyle$1(canvas);
  const margins = getPositionedStyle(style, "margin");
  const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
  const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
  let { width, height } = containerSize;
  if (style.boxSizing === "content-box") {
    const borders = getPositionedStyle(style, "border", "width");
    const paddings = getPositionedStyle(style, "padding");
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  width = Math.max(0, width - margins.width);
  height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
  if (width && !height) {
    height = round1(width / 2);
  }
  const maintainHeight = bbWidth !== void 0 || bbHeight !== void 0;
  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
    height = containerSize.height;
    width = round1(Math.floor(height * aspectRatio));
  }
  return {
    width,
    height
  };
}
function retinaScale(chart, forceRatio, forceStyle) {
  const pixelRatio = forceRatio || 1;
  const deviceHeight = Math.floor(chart.height * pixelRatio);
  const deviceWidth = Math.floor(chart.width * pixelRatio);
  chart.height = Math.floor(chart.height);
  chart.width = Math.floor(chart.width);
  const canvas = chart.canvas;
  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
    canvas.style.height = `${chart.height}px`;
    canvas.style.width = `${chart.width}px`;
  }
  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
    chart.currentDevicePixelRatio = pixelRatio;
    canvas.height = deviceHeight;
    canvas.width = deviceWidth;
    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    return true;
  }
  return false;
}
const supportsEventListenerOptions = function() {
  let passiveSupported = false;
  try {
    const options = {
      get passive() {
        passiveSupported = true;
        return false;
      }
    };
    if (_isDomSupported()) {
      window.addEventListener("test", null, options);
      window.removeEventListener("test", null, options);
    }
  } catch (e2) {
  }
  return passiveSupported;
}();
function readUsedSize(element2, property) {
  const value = getStyle(element2, property);
  const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches ? +matches[1] : void 0;
}
function _pointInLine(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: p1.y + t2 * (p2.y - p1.y)
  };
}
function _steppedInterpolation(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: mode === "middle" ? t2 < 0.5 ? p1.y : p2.y : mode === "after" ? t2 < 1 ? p1.y : p2.y : t2 > 0 ? p2.y : p1.y
  };
}
function _bezierInterpolation(p1, p2, t2, mode) {
  const cp1 = {
    x: p1.cp2x,
    y: p1.cp2y
  };
  const cp2 = {
    x: p2.cp1x,
    y: p2.cp1y
  };
  const a3 = _pointInLine(p1, cp1, t2);
  const b2 = _pointInLine(cp1, cp2, t2);
  const c2 = _pointInLine(cp2, p2, t2);
  const d3 = _pointInLine(a3, b2, t2);
  const e2 = _pointInLine(b2, c2, t2);
  return _pointInLine(d3, e2, t2);
}
const getRightToLeftAdapter = function(rectX, width) {
  return {
    x(x2) {
      return rectX + rectX + width - x2;
    },
    setWidth(w2) {
      width = w2;
    },
    textAlign(align) {
      if (align === "center") {
        return align;
      }
      return align === "right" ? "left" : "right";
    },
    xPlus(x2, value) {
      return x2 - value;
    },
    leftForLtr(x2, itemWidth) {
      return x2 - itemWidth;
    }
  };
};
const getLeftToRightAdapter = function() {
  return {
    x(x2) {
      return x2;
    },
    setWidth(w2) {
    },
    textAlign(align) {
      return align;
    },
    xPlus(x2, value) {
      return x2 + value;
    },
    leftForLtr(x2, _itemWidth) {
      return x2;
    }
  };
};
function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
  let style, original;
  if (direction === "ltr" || direction === "rtl") {
    style = ctx.canvas.style;
    original = [
      style.getPropertyValue("direction"),
      style.getPropertyPriority("direction")
    ];
    style.setProperty("direction", direction, "important");
    ctx.prevTextDirection = original;
  }
}
function restoreTextDirection(ctx, original) {
  if (original !== void 0) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty("direction", original[0], original[1]);
  }
}
function propertyFn(property) {
  if (property === "angle") {
    return {
      between: _angleBetween,
      compare: _angleDiff,
      normalize: _normalizeAngle
    };
  }
  return {
    between: _isBetween,
    compare: (a3, b2) => a3 - b2,
    normalize: (x2) => x2
  };
}
function normalizeSegment({ start, end, count, loop, style }) {
  return {
    start: start % count,
    end: end % count,
    loop: loop && (end - start + 1) % count === 0,
    style
  };
}
function getSegment(segment, points, bounds) {
  const { property, start: startBound, end: endBound } = bounds;
  const { between, normalize } = propertyFn(property);
  const count = points.length;
  let { start, end, loop } = segment;
  let i2, ilen;
  if (loop) {
    start += count;
    end += count;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      if (!between(normalize(points[start % count][property]), startBound, endBound)) {
        break;
      }
      start--;
      end--;
    }
    start %= count;
    end %= count;
  }
  if (end < start) {
    end += count;
  }
  return {
    start,
    end,
    loop,
    style: segment.style
  };
}
function _boundSegment(segment, points, bounds) {
  if (!bounds) {
    return [
      segment
    ];
  }
  const { property, start: startBound, end: endBound } = bounds;
  const count = points.length;
  const { compare, between, normalize } = propertyFn(property);
  const { start, end, loop, style } = getSegment(segment, points, bounds);
  const result = [];
  let inside = false;
  let subStart = null;
  let value, point, prevValue;
  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);
  const shouldStart = () => inside || startIsBefore();
  const shouldStop = () => !inside || endIsBefore();
  for (let i2 = start, prev = start; i2 <= end; ++i2) {
    point = points[i2 % count];
    if (point.skip) {
      continue;
    }
    value = normalize(point[property]);
    if (value === prevValue) {
      continue;
    }
    inside = between(value, startBound, endBound);
    if (subStart === null && shouldStart()) {
      subStart = compare(value, startBound) === 0 ? i2 : prev;
    }
    if (subStart !== null && shouldStop()) {
      result.push(normalizeSegment({
        start: subStart,
        end: i2,
        loop,
        count,
        style
      }));
      subStart = null;
    }
    prev = i2;
    prevValue = value;
  }
  if (subStart !== null) {
    result.push(normalizeSegment({
      start: subStart,
      end,
      loop,
      count,
      style
    }));
  }
  return result;
}
function _boundSegments(line, bounds) {
  const result = [];
  const segments = line.segments;
  for (let i2 = 0; i2 < segments.length; i2++) {
    const sub = _boundSegment(segments[i2], line.points, bounds);
    if (sub.length) {
      result.push(...sub);
    }
  }
  return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
  let start = 0;
  let end = count - 1;
  if (loop && !spanGaps) {
    while (start < count && !points[start].skip) {
      start++;
    }
  }
  while (start < count && points[start].skip) {
    start++;
  }
  start %= count;
  if (loop) {
    end += start;
  }
  while (end > start && points[end % count].skip) {
    end--;
  }
  end %= count;
  return {
    start,
    end
  };
}
function solidSegments(points, start, max, loop) {
  const count = points.length;
  const result = [];
  let last = start;
  let prev = points[start];
  let end;
  for (end = start + 1; end <= max; ++end) {
    const cur = points[end % count];
    if (cur.skip || cur.stop) {
      if (!prev.skip) {
        loop = false;
        result.push({
          start: start % count,
          end: (end - 1) % count,
          loop
        });
        start = last = cur.stop ? end : null;
      }
    } else {
      last = end;
      if (prev.skip) {
        start = end;
      }
    }
    prev = cur;
  }
  if (last !== null) {
    result.push({
      start: start % count,
      end: last % count,
      loop
    });
  }
  return result;
}
function _computeSegments(line, segmentOptions) {
  const points = line.points;
  const spanGaps = line.options.spanGaps;
  const count = points.length;
  if (!count) {
    return [];
  }
  const loop = !!line._loop;
  const { start, end } = findStartAndEnd(points, count, loop, spanGaps);
  if (spanGaps === true) {
    return splitByStyles(line, [
      {
        start,
        end,
        loop
      }
    ], points, segmentOptions);
  }
  const max = end < start ? end + count : end;
  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function splitByStyles(line, segments, points, segmentOptions) {
  if (!segmentOptions || !segmentOptions.setContext || !points) {
    return segments;
  }
  return doSplitByStyles(line, segments, points, segmentOptions);
}
function doSplitByStyles(line, segments, points, segmentOptions) {
  const chartContext = line._chart.getContext();
  const baseStyle = readStyle(line.options);
  const { _datasetIndex: datasetIndex, options: { spanGaps } } = line;
  const count = points.length;
  const result = [];
  let prevStyle = baseStyle;
  let start = segments[0].start;
  let i2 = start;
  function addStyle(s3, e2, l, st) {
    const dir = spanGaps ? -1 : 1;
    if (s3 === e2) {
      return;
    }
    s3 += count;
    while (points[s3 % count].skip) {
      s3 -= dir;
    }
    while (points[e2 % count].skip) {
      e2 += dir;
    }
    if (s3 % count !== e2 % count) {
      result.push({
        start: s3 % count,
        end: e2 % count,
        loop: l,
        style: st
      });
      prevStyle = st;
      start = e2 % count;
    }
  }
  for (const segment of segments) {
    start = spanGaps ? start : segment.start;
    let prev = points[start % count];
    let style;
    for (i2 = start + 1; i2 <= segment.end; i2++) {
      const pt = points[i2 % count];
      style = readStyle(segmentOptions.setContext(createContext(chartContext, {
        type: "segment",
        p0: prev,
        p1: pt,
        p0DataIndex: (i2 - 1) % count,
        p1DataIndex: i2 % count,
        datasetIndex
      })));
      if (styleChanged(style, prevStyle)) {
        addStyle(start, i2 - 1, segment.loop, prevStyle);
      }
      prev = pt;
      prevStyle = style;
    }
    if (start < i2 - 1) {
      addStyle(start, i2 - 1, segment.loop, prevStyle);
    }
  }
  return result;
}
function readStyle(options) {
  return {
    backgroundColor: options.backgroundColor,
    borderCapStyle: options.borderCapStyle,
    borderDash: options.borderDash,
    borderDashOffset: options.borderDashOffset,
    borderJoinStyle: options.borderJoinStyle,
    borderWidth: options.borderWidth,
    borderColor: options.borderColor
  };
}
function styleChanged(style, prevStyle) {
  if (!prevStyle) {
    return false;
  }
  const cache = [];
  const replacer = function(key, value) {
    if (!isPatternOrGradient(value)) {
      return value;
    }
    if (!cache.includes(value)) {
      cache.push(value);
    }
    return cache.indexOf(value);
  };
  return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
}
function getSizeForArea(scale, chartArea, field) {
  return scale.options.clip ? scale[field] : chartArea[field];
}
function getDatasetArea(meta, chartArea) {
  const { xScale, yScale } = meta;
  if (xScale && yScale) {
    return {
      left: getSizeForArea(xScale, chartArea, "left"),
      right: getSizeForArea(xScale, chartArea, "right"),
      top: getSizeForArea(yScale, chartArea, "top"),
      bottom: getSizeForArea(yScale, chartArea, "bottom")
    };
  }
  return chartArea;
}
function getDatasetClipArea(chart, meta) {
  const clip = meta._clip;
  if (clip.disabled) {
    return false;
  }
  const area = getDatasetArea(meta, chart.chartArea);
  return {
    left: clip.left === false ? 0 : area.left - (clip.left === true ? 0 : clip.left),
    right: clip.right === false ? chart.width : area.right + (clip.right === true ? 0 : clip.right),
    top: clip.top === false ? 0 : area.top - (clip.top === true ? 0 : clip.top),
    bottom: clip.bottom === false ? chart.height : area.bottom + (clip.bottom === true ? 0 : clip.bottom)
  };
}
/*!
 * Chart.js v4.4.9
 * https://www.chartjs.org
 * (c) 2025 Chart.js Contributors
 * Released under the MIT License
 */
class Animator {
  constructor() {
    this._request = null;
    this._charts = /* @__PURE__ */ new Map();
    this._running = false;
    this._lastDate = void 0;
  }
  _notify(chart, anims, date, type) {
    const callbacks = anims.listeners[type];
    const numSteps = anims.duration;
    callbacks.forEach((fn) => fn({
      chart,
      initial: anims.initial,
      numSteps,
      currentStep: Math.min(date - anims.start, numSteps)
    }));
  }
  _refresh() {
    if (this._request) {
      return;
    }
    this._running = true;
    this._request = requestAnimFrame.call(window, () => {
      this._update();
      this._request = null;
      if (this._running) {
        this._refresh();
      }
    });
  }
  _update(date = Date.now()) {
    let remaining = 0;
    this._charts.forEach((anims, chart) => {
      if (!anims.running || !anims.items.length) {
        return;
      }
      const items = anims.items;
      let i2 = items.length - 1;
      let draw2 = false;
      let item;
      for (; i2 >= 0; --i2) {
        item = items[i2];
        if (item._active) {
          if (item._total > anims.duration) {
            anims.duration = item._total;
          }
          item.tick(date);
          draw2 = true;
        } else {
          items[i2] = items[items.length - 1];
          items.pop();
        }
      }
      if (draw2) {
        chart.draw();
        this._notify(chart, anims, date, "progress");
      }
      if (!items.length) {
        anims.running = false;
        this._notify(chart, anims, date, "complete");
        anims.initial = false;
      }
      remaining += items.length;
    });
    this._lastDate = date;
    if (remaining === 0) {
      this._running = false;
    }
  }
  _getAnims(chart) {
    const charts = this._charts;
    let anims = charts.get(chart);
    if (!anims) {
      anims = {
        running: false,
        initial: true,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      };
      charts.set(chart, anims);
    }
    return anims;
  }
  listen(chart, event, cb) {
    this._getAnims(chart).listeners[event].push(cb);
  }
  add(chart, items) {
    if (!items || !items.length) {
      return;
    }
    this._getAnims(chart).items.push(...items);
  }
  has(chart) {
    return this._getAnims(chart).items.length > 0;
  }
  start(chart) {
    const anims = this._charts.get(chart);
    if (!anims) {
      return;
    }
    anims.running = true;
    anims.start = Date.now();
    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
    this._refresh();
  }
  running(chart) {
    if (!this._running) {
      return false;
    }
    const anims = this._charts.get(chart);
    if (!anims || !anims.running || !anims.items.length) {
      return false;
    }
    return true;
  }
  stop(chart) {
    const anims = this._charts.get(chart);
    if (!anims || !anims.items.length) {
      return;
    }
    const items = anims.items;
    let i2 = items.length - 1;
    for (; i2 >= 0; --i2) {
      items[i2].cancel();
    }
    anims.items = [];
    this._notify(chart, anims, Date.now(), "complete");
  }
  remove(chart) {
    return this._charts.delete(chart);
  }
}
var animator = /* @__PURE__ */ new Animator();
const transparent = "transparent";
const interpolators = {
  boolean(from2, to2, factor) {
    return factor > 0.5 ? to2 : from2;
  },
  color(from2, to2, factor) {
    const c0 = color(from2 || transparent);
    const c1 = c0.valid && color(to2 || transparent);
    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to2;
  },
  number(from2, to2, factor) {
    return from2 + (to2 - from2) * factor;
  }
};
class Animation {
  constructor(cfg, target, prop, to2) {
    const currentValue = target[prop];
    to2 = resolve([
      cfg.to,
      to2,
      currentValue,
      cfg.from
    ]);
    const from2 = resolve([
      cfg.from,
      currentValue,
      to2
    ]);
    this._active = true;
    this._fn = cfg.fn || interpolators[cfg.type || typeof from2];
    this._easing = effects[cfg.easing] || effects.linear;
    this._start = Math.floor(Date.now() + (cfg.delay || 0));
    this._duration = this._total = Math.floor(cfg.duration);
    this._loop = !!cfg.loop;
    this._target = target;
    this._prop = prop;
    this._from = from2;
    this._to = to2;
    this._promises = void 0;
  }
  active() {
    return this._active;
  }
  update(cfg, to2, date) {
    if (this._active) {
      this._notify(false);
      const currentValue = this._target[this._prop];
      const elapsed = date - this._start;
      const remain = this._duration - elapsed;
      this._start = date;
      this._duration = Math.floor(Math.max(remain, cfg.duration));
      this._total += elapsed;
      this._loop = !!cfg.loop;
      this._to = resolve([
        cfg.to,
        to2,
        currentValue,
        cfg.from
      ]);
      this._from = resolve([
        cfg.from,
        currentValue,
        to2
      ]);
    }
  }
  cancel() {
    if (this._active) {
      this.tick(Date.now());
      this._active = false;
      this._notify(false);
    }
  }
  tick(date) {
    const elapsed = date - this._start;
    const duration = this._duration;
    const prop = this._prop;
    const from2 = this._from;
    const loop = this._loop;
    const to2 = this._to;
    let factor;
    this._active = from2 !== to2 && (loop || elapsed < duration);
    if (!this._active) {
      this._target[prop] = to2;
      this._notify(true);
      return;
    }
    if (elapsed < 0) {
      this._target[prop] = from2;
      return;
    }
    factor = elapsed / duration % 2;
    factor = loop && factor > 1 ? 2 - factor : factor;
    factor = this._easing(Math.min(1, Math.max(0, factor)));
    this._target[prop] = this._fn(from2, to2, factor);
  }
  wait() {
    const promises = this._promises || (this._promises = []);
    return new Promise((res, rej) => {
      promises.push({
        res,
        rej
      });
    });
  }
  _notify(resolved) {
    const method = resolved ? "res" : "rej";
    const promises = this._promises || [];
    for (let i2 = 0; i2 < promises.length; i2++) {
      promises[i2][method]();
    }
  }
}
class Animations {
  constructor(chart, config) {
    this._chart = chart;
    this._properties = /* @__PURE__ */ new Map();
    this.configure(config);
  }
  configure(config) {
    if (!isObject(config)) {
      return;
    }
    const animationOptions = Object.keys(defaults.animation);
    const animatedProps = this._properties;
    Object.getOwnPropertyNames(config).forEach((key) => {
      const cfg = config[key];
      if (!isObject(cfg)) {
        return;
      }
      const resolved = {};
      for (const option of animationOptions) {
        resolved[option] = cfg[option];
      }
      (isArray(cfg.properties) && cfg.properties || [
        key
      ]).forEach((prop) => {
        if (prop === key || !animatedProps.has(prop)) {
          animatedProps.set(prop, resolved);
        }
      });
    });
  }
  _animateOptions(target, values) {
    const newOptions = values.options;
    const options = resolveTargetOptions(target, newOptions);
    if (!options) {
      return [];
    }
    const animations = this._createAnimations(options, newOptions);
    if (newOptions.$shared) {
      awaitAll(target.options.$animations, newOptions).then(() => {
        target.options = newOptions;
      }, () => {
      });
    }
    return animations;
  }
  _createAnimations(target, values) {
    const animatedProps = this._properties;
    const animations = [];
    const running = target.$animations || (target.$animations = {});
    const props = Object.keys(values);
    const date = Date.now();
    let i2;
    for (i2 = props.length - 1; i2 >= 0; --i2) {
      const prop = props[i2];
      if (prop.charAt(0) === "$") {
        continue;
      }
      if (prop === "options") {
        animations.push(...this._animateOptions(target, values));
        continue;
      }
      const value = values[prop];
      let animation = running[prop];
      const cfg = animatedProps.get(prop);
      if (animation) {
        if (cfg && animation.active()) {
          animation.update(cfg, value, date);
          continue;
        } else {
          animation.cancel();
        }
      }
      if (!cfg || !cfg.duration) {
        target[prop] = value;
        continue;
      }
      running[prop] = animation = new Animation(cfg, target, prop, value);
      animations.push(animation);
    }
    return animations;
  }
  update(target, values) {
    if (this._properties.size === 0) {
      Object.assign(target, values);
      return;
    }
    const animations = this._createAnimations(target, values);
    if (animations.length) {
      animator.add(this._chart, animations);
      return true;
    }
  }
}
function awaitAll(animations, properties) {
  const running = [];
  const keys = Object.keys(properties);
  for (let i2 = 0; i2 < keys.length; i2++) {
    const anim = animations[keys[i2]];
    if (anim && anim.active()) {
      running.push(anim.wait());
    }
  }
  return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
  if (!newOptions) {
    return;
  }
  let options = target.options;
  if (!options) {
    target.options = newOptions;
    return;
  }
  if (options.$shared) {
    target.options = options = Object.assign({}, options, {
      $shared: false,
      $animations: {}
    });
  }
  return options;
}
function scaleClip(scale, allowedOverflow) {
  const opts = scale && scale.options || {};
  const reverse = opts.reverse;
  const min = opts.min === void 0 ? allowedOverflow : 0;
  const max = opts.max === void 0 ? allowedOverflow : 0;
  return {
    start: reverse ? max : min,
    end: reverse ? min : max
  };
}
function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }
  const x2 = scaleClip(xScale, allowedOverflow);
  const y3 = scaleClip(yScale, allowedOverflow);
  return {
    top: y3.end,
    right: x2.end,
    bottom: y3.start,
    left: x2.start
  };
}
function toClip(value) {
  let t2, r, b2, l;
  if (isObject(value)) {
    t2 = value.top;
    r = value.right;
    b2 = value.bottom;
    l = value.left;
  } else {
    t2 = r = b2 = l = value;
  }
  return {
    top: t2,
    right: r,
    bottom: b2,
    left: l,
    disabled: value === false
  };
}
function getSortedDatasetIndices(chart, filterVisible) {
  const keys = [];
  const metasets = chart._getSortedDatasetMetas(filterVisible);
  let i2, ilen;
  for (i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
    keys.push(metasets[i2].index);
  }
  return keys;
}
function applyStack(stack, value, dsIndex, options = {}) {
  const keys = stack.keys;
  const singleMode = options.mode === "single";
  let i2, ilen, datasetIndex, otherValue;
  if (value === null) {
    return;
  }
  let found = false;
  for (i2 = 0, ilen = keys.length; i2 < ilen; ++i2) {
    datasetIndex = +keys[i2];
    if (datasetIndex === dsIndex) {
      found = true;
      if (options.all) {
        continue;
      }
      break;
    }
    otherValue = stack.values[datasetIndex];
    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
      value += otherValue;
    }
  }
  if (!found && !options.all) {
    return 0;
  }
  return value;
}
function convertObjectDataToArray(data, meta) {
  const { iScale, vScale } = meta;
  const iAxisKey = iScale.axis === "x" ? "x" : "y";
  const vAxisKey = vScale.axis === "x" ? "x" : "y";
  const keys = Object.keys(data);
  const adata = new Array(keys.length);
  let i2, ilen, key;
  for (i2 = 0, ilen = keys.length; i2 < ilen; ++i2) {
    key = keys[i2];
    adata[i2] = {
      [iAxisKey]: key,
      [vAxisKey]: data[key]
    };
  }
  return adata;
}
function isStacked(scale, meta) {
  const stacked = scale && scale.options.stacked;
  return stacked || stacked === void 0 && meta.stack !== void 0;
}
function getStackKey(indexScale, valueScale, meta) {
  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
  const { min, max, minDefined, maxDefined } = scale.getUserBounds();
  return {
    min: minDefined ? min : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max : Number.POSITIVE_INFINITY
  };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
  const subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {
    const value = stack[meta.index];
    if (positive && value > 0 || !positive && value < 0) {
      return meta.index;
    }
  }
  return null;
}
function updateStacks(controller, parsed) {
  const { chart, _cachedMeta: meta } = controller;
  const stacks = chart._stacks || (chart._stacks = {});
  const { iScale, vScale, index: datasetIndex } = meta;
  const iAxis = iScale.axis;
  const vAxis = vScale.axis;
  const key = getStackKey(iScale, vScale, meta);
  const ilen = parsed.length;
  let stack;
  for (let i2 = 0; i2 < ilen; ++i2) {
    const item = parsed[i2];
    const { [iAxis]: index2, [vAxis]: value } = item;
    const itemStacks = item._stacks || (item._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index2);
    stack[datasetIndex] = value;
    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
    const visualValues = stack._visualValues || (stack._visualValues = {});
    visualValues[datasetIndex] = value;
  }
}
function getFirstScaleId(chart, axis) {
  const scales2 = chart.scales;
  return Object.keys(scales2).filter((key) => scales2[key].axis === axis).shift();
}
function createDatasetContext(parent, index2) {
  return createContext(parent, {
    active: false,
    dataset: void 0,
    datasetIndex: index2,
    index: index2,
    mode: "default",
    type: "dataset"
  });
}
function createDataContext(parent, index2, element2) {
  return createContext(parent, {
    active: false,
    dataIndex: index2,
    parsed: void 0,
    raw: void 0,
    element: element2,
    index: index2,
    mode: "default",
    type: "data"
  });
}
function clearStacks(meta, items) {
  const datasetIndex = meta.controller.index;
  const axis = meta.vScale && meta.vScale.axis;
  if (!axis) {
    return;
  }
  items = items || meta._parsed;
  for (const parsed of items) {
    const stacks = parsed._stacks;
    if (!stacks || stacks[axis] === void 0 || stacks[axis][datasetIndex] === void 0) {
      return;
    }
    delete stacks[axis][datasetIndex];
    if (stacks[axis]._visualValues !== void 0 && stacks[axis]._visualValues[datasetIndex] !== void 0) {
      delete stacks[axis]._visualValues[datasetIndex];
    }
  }
}
const isDirectUpdateMode = (mode) => mode === "reset" || mode === "none";
const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {
  keys: getSortedDatasetIndices(chart, true),
  values: null
};
class DatasetController {
  constructor(chart, datasetIndex) {
    this.chart = chart;
    this._ctx = chart.ctx;
    this.index = datasetIndex;
    this._cachedDataOpts = {};
    this._cachedMeta = this.getMeta();
    this._type = this._cachedMeta.type;
    this.options = void 0;
    this._parsing = false;
    this._data = void 0;
    this._objectData = void 0;
    this._sharedOptions = void 0;
    this._drawStart = void 0;
    this._drawCount = void 0;
    this.enableOptionSharing = false;
    this.supportsDecimation = false;
    this.$context = void 0;
    this._syncList = [];
    this.datasetElementType = new.target.datasetElementType;
    this.dataElementType = new.target.dataElementType;
    this.initialize();
  }
  initialize() {
    const meta = this._cachedMeta;
    this.configure();
    this.linkScales();
    meta._stacked = isStacked(meta.vScale, meta);
    this.addElements();
    if (this.options.fill && !this.chart.isPluginEnabled("filler")) {
      console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
  }
  updateIndex(datasetIndex) {
    if (this.index !== datasetIndex) {
      clearStacks(this._cachedMeta);
    }
    this.index = datasetIndex;
  }
  linkScales() {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    const chooseId = (axis, x2, y3, r) => axis === "x" ? x2 : axis === "r" ? r : y3;
    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, "x"));
    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, "y"));
    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, "r"));
    const indexAxis = meta.indexAxis;
    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
    meta.xScale = this.getScaleForId(xid);
    meta.yScale = this.getScaleForId(yid);
    meta.rScale = this.getScaleForId(rid);
    meta.iScale = this.getScaleForId(iid);
    meta.vScale = this.getScaleForId(vid);
  }
  getDataset() {
    return this.chart.data.datasets[this.index];
  }
  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }
  getScaleForId(scaleID) {
    return this.chart.scales[scaleID];
  }
  _getOtherScale(scale) {
    const meta = this._cachedMeta;
    return scale === meta.iScale ? meta.vScale : meta.iScale;
  }
  reset() {
    this._update("reset");
  }
  _destroy() {
    const meta = this._cachedMeta;
    if (this._data) {
      unlistenArrayEvents(this._data, this);
    }
    if (meta._stacked) {
      clearStacks(meta);
    }
  }
  _dataCheck() {
    const dataset = this.getDataset();
    const data = dataset.data || (dataset.data = []);
    const _data = this._data;
    if (isObject(data)) {
      const meta = this._cachedMeta;
      this._data = convertObjectDataToArray(data, meta);
    } else if (_data !== data) {
      if (_data) {
        unlistenArrayEvents(_data, this);
        const meta = this._cachedMeta;
        clearStacks(meta);
        meta._parsed = [];
      }
      if (data && Object.isExtensible(data)) {
        listenArrayEvents(data, this);
      }
      this._syncList = [];
      this._data = data;
    }
  }
  addElements() {
    const meta = this._cachedMeta;
    this._dataCheck();
    if (this.datasetElementType) {
      meta.dataset = new this.datasetElementType();
    }
  }
  buildOrUpdateElements(resetNewElements) {
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    let stackChanged = false;
    this._dataCheck();
    const oldStacked = meta._stacked;
    meta._stacked = isStacked(meta.vScale, meta);
    if (meta.stack !== dataset.stack) {
      stackChanged = true;
      clearStacks(meta);
      meta.stack = dataset.stack;
    }
    this._resyncElements(resetNewElements);
    if (stackChanged || oldStacked !== meta._stacked) {
      updateStacks(this, meta._parsed);
      meta._stacked = isStacked(meta.vScale, meta);
    }
  }
  configure() {
    const config = this.chart.config;
    const scopeKeys = config.datasetScopeKeys(this._type);
    const scopes2 = config.getOptionScopes(this.getDataset(), scopeKeys, true);
    this.options = config.createResolver(scopes2, this.getContext());
    this._parsing = this.options.parsing;
    this._cachedDataOpts = {};
  }
  parse(start, count) {
    const { _cachedMeta: meta, _data: data } = this;
    const { iScale, _stacked } = meta;
    const iAxis = iScale.axis;
    let sorted = start === 0 && count === data.length ? true : meta._sorted;
    let prev = start > 0 && meta._parsed[start - 1];
    let i2, cur, parsed;
    if (this._parsing === false) {
      meta._parsed = data;
      meta._sorted = true;
      parsed = data;
    } else {
      if (isArray(data[start])) {
        parsed = this.parseArrayData(meta, data, start, count);
      } else if (isObject(data[start])) {
        parsed = this.parseObjectData(meta, data, start, count);
      } else {
        parsed = this.parsePrimitiveData(meta, data, start, count);
      }
      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
      for (i2 = 0; i2 < count; ++i2) {
        meta._parsed[i2 + start] = cur = parsed[i2];
        if (sorted) {
          if (isNotInOrderComparedToPrev()) {
            sorted = false;
          }
          prev = cur;
        }
      }
      meta._sorted = sorted;
    }
    if (_stacked) {
      updateStacks(this, parsed);
    }
  }
  parsePrimitiveData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = new Array(count);
    let i2, ilen, index2;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      index2 = i2 + start;
      parsed[i2] = {
        [iAxis]: singleScale || iScale.parse(labels[index2], index2),
        [vAxis]: vScale.parse(data[index2], index2)
      };
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const parsed = new Array(count);
    let i2, ilen, index2, item;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      index2 = i2 + start;
      item = data[index2];
      parsed[i2] = {
        x: xScale.parse(item[0], index2),
        y: yScale.parse(item[1], index2)
      };
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const parsed = new Array(count);
    let i2, ilen, index2, item;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      index2 = i2 + start;
      item = data[index2];
      parsed[i2] = {
        x: xScale.parse(resolveObjectKey(item, xAxisKey), index2),
        y: yScale.parse(resolveObjectKey(item, yAxisKey), index2)
      };
    }
    return parsed;
  }
  getParsed(index2) {
    return this._cachedMeta._parsed[index2];
  }
  getDataElement(index2) {
    return this._cachedMeta.data[index2];
  }
  applyStack(scale, parsed, mode) {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const value = parsed[scale.axis];
    const stack = {
      keys: getSortedDatasetIndices(chart, true),
      values: parsed._stacks[scale.axis]._visualValues
    };
    return applyStack(stack, value, meta.index, {
      mode
    });
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    const parsedValue = parsed[scale.axis];
    let value = parsedValue === null ? NaN : parsedValue;
    const values = stack && parsed._stacks[scale.axis];
    if (stack && values) {
      stack.values = values;
      value = applyStack(stack, parsedValue, this._cachedMeta.index);
    }
    range.min = Math.min(range.min, value);
    range.max = Math.max(range.max, value);
  }
  getMinMax(scale, canStack) {
    const meta = this._cachedMeta;
    const _parsed = meta._parsed;
    const sorted = meta._sorted && scale === meta.iScale;
    const ilen = _parsed.length;
    const otherScale = this._getOtherScale(scale);
    const stack = createStack(canStack, meta, this.chart);
    const range = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
    let i2, parsed;
    function _skip() {
      parsed = _parsed[i2];
      const otherValue = parsed[otherScale.axis];
      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
    }
    for (i2 = 0; i2 < ilen; ++i2) {
      if (_skip()) {
        continue;
      }
      this.updateRangeFromParsed(range, scale, parsed, stack);
      if (sorted) {
        break;
      }
    }
    if (sorted) {
      for (i2 = ilen - 1; i2 >= 0; --i2) {
        if (_skip()) {
          continue;
        }
        this.updateRangeFromParsed(range, scale, parsed, stack);
        break;
      }
    }
    return range;
  }
  getAllParsedValues(scale) {
    const parsed = this._cachedMeta._parsed;
    const values = [];
    let i2, ilen, value;
    for (i2 = 0, ilen = parsed.length; i2 < ilen; ++i2) {
      value = parsed[i2][scale.axis];
      if (isNumberFinite(value)) {
        values.push(value);
      }
    }
    return values;
  }
  getMaxOverflow() {
    return false;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const parsed = this.getParsed(index2);
    return {
      label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
      value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
    };
  }
  _update(mode) {
    const meta = this._cachedMeta;
    this.update(mode || "default");
    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
  }
  update(mode) {
  }
  draw() {
    const ctx = this._ctx;
    const chart = this.chart;
    const meta = this._cachedMeta;
    const elements2 = meta.data || [];
    const area = chart.chartArea;
    const active = [];
    const start = this._drawStart || 0;
    const count = this._drawCount || elements2.length - start;
    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
    let i2;
    if (meta.dataset) {
      meta.dataset.draw(ctx, area, start, count);
    }
    for (i2 = start; i2 < start + count; ++i2) {
      const element2 = elements2[i2];
      if (element2.hidden) {
        continue;
      }
      if (element2.active && drawActiveElementsOnTop) {
        active.push(element2);
      } else {
        element2.draw(ctx, area);
      }
    }
    for (i2 = 0; i2 < active.length; ++i2) {
      active[i2].draw(ctx, area);
    }
  }
  getStyle(index2, active) {
    const mode = active ? "active" : "default";
    return index2 === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index2 || 0, mode);
  }
  getContext(index2, active, mode) {
    const dataset = this.getDataset();
    let context;
    if (index2 >= 0 && index2 < this._cachedMeta.data.length) {
      const element2 = this._cachedMeta.data[index2];
      context = element2.$context || (element2.$context = createDataContext(this.getContext(), index2, element2));
      context.parsed = this.getParsed(index2);
      context.raw = dataset.data[index2];
      context.index = context.dataIndex = index2;
    } else {
      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
      context.dataset = dataset;
      context.index = context.datasetIndex = this.index;
    }
    context.active = !!active;
    context.mode = mode;
    return context;
  }
  resolveDatasetElementOptions(mode) {
    return this._resolveElementOptions(this.datasetElementType.id, mode);
  }
  resolveDataElementOptions(index2, mode) {
    return this._resolveElementOptions(this.dataElementType.id, mode, index2);
  }
  _resolveElementOptions(elementType, mode = "default", index2) {
    const active = mode === "active";
    const cache = this._cachedDataOpts;
    const cacheKey = elementType + "-" + mode;
    const cached = cache[cacheKey];
    const sharing = this.enableOptionSharing && defined(index2);
    if (cached) {
      return cloneIfNotShared(cached, sharing);
    }
    const config = this.chart.config;
    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
    const prefixes = active ? [
      `${elementType}Hover`,
      "hover",
      elementType,
      ""
    ] : [
      elementType,
      ""
    ];
    const scopes2 = config.getOptionScopes(this.getDataset(), scopeKeys);
    const names2 = Object.keys(defaults.elements[elementType]);
    const context = () => this.getContext(index2, active, mode);
    const values = config.resolveNamedOptions(scopes2, names2, context, prefixes);
    if (values.$shared) {
      values.$shared = sharing;
      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
    }
    return values;
  }
  _resolveAnimations(index2, transition, active) {
    const chart = this.chart;
    const cache = this._cachedDataOpts;
    const cacheKey = `animation-${transition}`;
    const cached = cache[cacheKey];
    if (cached) {
      return cached;
    }
    let options;
    if (chart.options.animation !== false) {
      const config = this.chart.config;
      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
      const scopes2 = config.getOptionScopes(this.getDataset(), scopeKeys);
      options = config.createResolver(scopes2, this.getContext(index2, active, transition));
    }
    const animations = new Animations(chart, options && options.animations);
    if (options && options._cacheable) {
      cache[cacheKey] = Object.freeze(animations);
    }
    return animations;
  }
  getSharedOptions(options) {
    if (!options.$shared) {
      return;
    }
    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
  }
  includeOptions(mode, sharedOptions) {
    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
  }
  _getSharedOptions(start, mode) {
    const firstOpts = this.resolveDataElementOptions(start, mode);
    const previouslySharedOptions = this._sharedOptions;
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
    this.updateSharedOptions(sharedOptions, mode, firstOpts);
    return {
      sharedOptions,
      includeOptions
    };
  }
  updateElement(element2, index2, properties, mode) {
    if (isDirectUpdateMode(mode)) {
      Object.assign(element2, properties);
    } else {
      this._resolveAnimations(index2, mode).update(element2, properties);
    }
  }
  updateSharedOptions(sharedOptions, mode, newOptions) {
    if (sharedOptions && !isDirectUpdateMode(mode)) {
      this._resolveAnimations(void 0, mode).update(sharedOptions, newOptions);
    }
  }
  _setStyle(element2, index2, mode, active) {
    element2.active = active;
    const options = this.getStyle(index2, active);
    this._resolveAnimations(index2, mode, active).update(element2, {
      options: !active && this.getSharedOptions(options) || options
    });
  }
  removeHoverStyle(element2, datasetIndex, index2) {
    this._setStyle(element2, index2, "active", false);
  }
  setHoverStyle(element2, datasetIndex, index2) {
    this._setStyle(element2, index2, "active", true);
  }
  _removeDatasetHoverStyle() {
    const element2 = this._cachedMeta.dataset;
    if (element2) {
      this._setStyle(element2, void 0, "active", false);
    }
  }
  _setDatasetHoverStyle() {
    const element2 = this._cachedMeta.dataset;
    if (element2) {
      this._setStyle(element2, void 0, "active", true);
    }
  }
  _resyncElements(resetNewElements) {
    const data = this._data;
    const elements2 = this._cachedMeta.data;
    for (const [method, arg1, arg2] of this._syncList) {
      this[method](arg1, arg2);
    }
    this._syncList = [];
    const numMeta = elements2.length;
    const numData = data.length;
    const count = Math.min(numData, numMeta);
    if (count) {
      this.parse(0, count);
    }
    if (numData > numMeta) {
      this._insertElements(numMeta, numData - numMeta, resetNewElements);
    } else if (numData < numMeta) {
      this._removeElements(numData, numMeta - numData);
    }
  }
  _insertElements(start, count, resetNewElements = true) {
    const meta = this._cachedMeta;
    const data = meta.data;
    const end = start + count;
    let i2;
    const move = (arr) => {
      arr.length += count;
      for (i2 = arr.length - 1; i2 >= end; i2--) {
        arr[i2] = arr[i2 - count];
      }
    };
    move(data);
    for (i2 = start; i2 < end; ++i2) {
      data[i2] = new this.dataElementType();
    }
    if (this._parsing) {
      move(meta._parsed);
    }
    this.parse(start, count);
    if (resetNewElements) {
      this.updateElements(data, start, count, "reset");
    }
  }
  updateElements(element2, start, count, mode) {
  }
  _removeElements(start, count) {
    const meta = this._cachedMeta;
    if (this._parsing) {
      const removed = meta._parsed.splice(start, count);
      if (meta._stacked) {
        clearStacks(meta, removed);
      }
    }
    meta.data.splice(start, count);
  }
  _sync(args) {
    if (this._parsing) {
      this._syncList.push(args);
    } else {
      const [method, arg1, arg2] = args;
      this[method](arg1, arg2);
    }
    this.chart._dataChanges.push([
      this.index,
      ...args
    ]);
  }
  _onDataPush() {
    const count = arguments.length;
    this._sync([
      "_insertElements",
      this.getDataset().data.length - count,
      count
    ]);
  }
  _onDataPop() {
    this._sync([
      "_removeElements",
      this._cachedMeta.data.length - 1,
      1
    ]);
  }
  _onDataShift() {
    this._sync([
      "_removeElements",
      0,
      1
    ]);
  }
  _onDataSplice(start, count) {
    if (count) {
      this._sync([
        "_removeElements",
        start,
        count
      ]);
    }
    const newCount = arguments.length - 2;
    if (newCount) {
      this._sync([
        "_insertElements",
        start,
        newCount
      ]);
    }
  }
  _onDataUnshift() {
    this._sync([
      "_insertElements",
      0,
      arguments.length
    ]);
  }
}
__publicField(DatasetController, "defaults", {});
__publicField(DatasetController, "datasetElementType", null);
__publicField(DatasetController, "dataElementType", null);
function getAllScaleValues(scale, type) {
  if (!scale._cache.$bar) {
    const visibleMetas = scale.getMatchingVisibleMetas(type);
    let values = [];
    for (let i2 = 0, ilen = visibleMetas.length; i2 < ilen; i2++) {
      values = values.concat(visibleMetas[i2].controller.getAllParsedValues(scale));
    }
    scale._cache.$bar = _arrayUnique(values.sort((a3, b2) => a3 - b2));
  }
  return scale._cache.$bar;
}
function computeMinSampleSize(meta) {
  const scale = meta.iScale;
  const values = getAllScaleValues(scale, meta.type);
  let min = scale._length;
  let i2, ilen, curr, prev;
  const updateMinAndPrev = () => {
    if (curr === 32767 || curr === -32768) {
      return;
    }
    if (defined(prev)) {
      min = Math.min(min, Math.abs(curr - prev) || min);
    }
    prev = curr;
  };
  for (i2 = 0, ilen = values.length; i2 < ilen; ++i2) {
    curr = scale.getPixelForValue(values[i2]);
    updateMinAndPrev();
  }
  prev = void 0;
  for (i2 = 0, ilen = scale.ticks.length; i2 < ilen; ++i2) {
    curr = scale.getPixelForTick(i2);
    updateMinAndPrev();
  }
  return min;
}
function computeFitCategoryTraits(index2, ruler, options, stackCount) {
  const thickness = options.barThickness;
  let size, ratio;
  if (isNullOrUndef(thickness)) {
    size = ruler.min * options.categoryPercentage;
    ratio = options.barPercentage;
  } else {
    size = thickness * stackCount;
    ratio = 1;
  }
  return {
    chunk: size / stackCount,
    ratio,
    start: ruler.pixels[index2] - size / 2
  };
}
function computeFlexCategoryTraits(index2, ruler, options, stackCount) {
  const pixels = ruler.pixels;
  const curr = pixels[index2];
  let prev = index2 > 0 ? pixels[index2 - 1] : null;
  let next2 = index2 < pixels.length - 1 ? pixels[index2 + 1] : null;
  const percent = options.categoryPercentage;
  if (prev === null) {
    prev = curr - (next2 === null ? ruler.end - ruler.start : next2 - curr);
  }
  if (next2 === null) {
    next2 = curr + curr - prev;
  }
  const start = curr - (curr - Math.min(prev, next2)) / 2 * percent;
  const size = Math.abs(next2 - prev) / 2 * percent;
  return {
    chunk: size / stackCount,
    ratio: options.barPercentage,
    start
  };
}
function parseFloatBar(entry, item, vScale, i2) {
  const startValue = vScale.parse(entry[0], i2);
  const endValue = vScale.parse(entry[1], i2);
  const min = Math.min(startValue, endValue);
  const max = Math.max(startValue, endValue);
  let barStart = min;
  let barEnd = max;
  if (Math.abs(min) > Math.abs(max)) {
    barStart = max;
    barEnd = min;
  }
  item[vScale.axis] = barEnd;
  item._custom = {
    barStart,
    barEnd,
    start: startValue,
    end: endValue,
    min,
    max
  };
}
function parseValue(entry, item, vScale, i2) {
  if (isArray(entry)) {
    parseFloatBar(entry, item, vScale, i2);
  } else {
    item[vScale.axis] = vScale.parse(entry, i2);
  }
  return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
  const iScale = meta.iScale;
  const vScale = meta.vScale;
  const labels = iScale.getLabels();
  const singleScale = iScale === vScale;
  const parsed = [];
  let i2, ilen, item, entry;
  for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
    entry = data[i2];
    item = {};
    item[iScale.axis] = singleScale || iScale.parse(labels[i2], i2);
    parsed.push(parseValue(entry, item, vScale, i2));
  }
  return parsed;
}
function isFloatBar(custom) {
  return custom && custom.barStart !== void 0 && custom.barEnd !== void 0;
}
function barSign(size, vScale, actualBase) {
  if (size !== 0) {
    return sign(size);
  }
  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
  let reverse, start, end, top, bottom;
  if (properties.horizontal) {
    reverse = properties.base > properties.x;
    start = "left";
    end = "right";
  } else {
    reverse = properties.base < properties.y;
    start = "bottom";
    end = "top";
  }
  if (reverse) {
    top = "end";
    bottom = "start";
  } else {
    top = "start";
    bottom = "end";
  }
  return {
    start,
    end,
    reverse,
    top,
    bottom
  };
}
function setBorderSkipped(properties, options, stack, index2) {
  let edge = options.borderSkipped;
  const res = {};
  if (!edge) {
    properties.borderSkipped = res;
    return;
  }
  if (edge === true) {
    properties.borderSkipped = {
      top: true,
      right: true,
      bottom: true,
      left: true
    };
    return;
  }
  const { start, end, reverse, top, bottom } = borderProps(properties);
  if (edge === "middle" && stack) {
    properties.enableBorderRadius = true;
    if ((stack._top || 0) === index2) {
      edge = top;
    } else if ((stack._bottom || 0) === index2) {
      edge = bottom;
    } else {
      res[parseEdge(bottom, start, end, reverse)] = true;
      edge = top;
    }
  }
  res[parseEdge(edge, start, end, reverse)] = true;
  properties.borderSkipped = res;
}
function parseEdge(edge, a3, b2, reverse) {
  if (reverse) {
    edge = swap(edge, a3, b2);
    edge = startEnd(edge, b2, a3);
  } else {
    edge = startEnd(edge, a3, b2);
  }
  return edge;
}
function swap(orig, v1, v2) {
  return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v, start, end) {
  return v === "start" ? start : v === "end" ? end : v;
}
function setInflateAmount(properties, { inflateAmount }, ratio) {
  properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
class BarController extends DatasetController {
  parsePrimitiveData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseArrayData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseObjectData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
    const vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
    const parsed = [];
    let i2, ilen, item, obj;
    for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
      obj = data[i2];
      item = {};
      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i2);
      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i2));
    }
    return parsed;
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    super.updateRangeFromParsed(range, scale, parsed, stack);
    const custom = parsed._custom;
    if (custom && scale === this._cachedMeta.vScale) {
      range.min = Math.min(range.min, custom.min);
      range.max = Math.max(range.max, custom.max);
    }
  }
  getMaxOverflow() {
    return 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const { iScale, vScale } = meta;
    const parsed = this.getParsed(index2);
    const custom = parsed._custom;
    const value = isFloatBar(custom) ? "[" + custom.start + ", " + custom.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
    return {
      label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
      value
    };
  }
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
    const meta = this._cachedMeta;
    meta.stack = this.getDataset().stack;
  }
  update(mode) {
    const meta = this._cachedMeta;
    this.updateElements(meta.data, 0, meta.data.length, mode);
  }
  updateElements(bars, start, count, mode) {
    const reset = mode === "reset";
    const { index: index2, _cachedMeta: { vScale } } = this;
    const base2 = vScale.getBasePixel();
    const horizontal = vScale.isHorizontal();
    const ruler = this._getRuler();
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    for (let i2 = start; i2 < start + count; i2++) {
      const parsed = this.getParsed(i2);
      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {
        base: base2,
        head: base2
      } : this._calculateBarValuePixels(i2);
      const ipixels = this._calculateBarIndexPixels(i2, ruler);
      const stack = (parsed._stacks || {})[vScale.axis];
      const properties = {
        horizontal,
        base: vpixels.base,
        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index2 === stack._top || index2 === stack._bottom,
        x: horizontal ? vpixels.head : ipixels.center,
        y: horizontal ? ipixels.center : vpixels.head,
        height: horizontal ? ipixels.size : Math.abs(vpixels.size),
        width: horizontal ? Math.abs(vpixels.size) : ipixels.size
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, bars[i2].active ? "active" : mode);
      }
      const options = properties.options || bars[i2].options;
      setBorderSkipped(properties, options, stack, index2);
      setInflateAmount(properties, options, ruler.ratio);
      this.updateElement(bars[i2], i2, properties, mode);
    }
  }
  _getStacks(last, dataIndex) {
    const { iScale } = this._cachedMeta;
    const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta) => meta.controller.options.grouped);
    const stacked = iScale.options.stacked;
    const stacks = [];
    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);
    const iScaleValue = currentParsed && currentParsed[iScale.axis];
    const skipNull = (meta) => {
      const parsed = meta._parsed.find((item) => item[iScale.axis] === iScaleValue);
      const val = parsed && parsed[meta.vScale.axis];
      if (isNullOrUndef(val) || isNaN(val)) {
        return true;
      }
    };
    for (const meta of metasets) {
      if (dataIndex !== void 0 && skipNull(meta)) {
        continue;
      }
      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === void 0 && meta.stack === void 0) {
        stacks.push(meta.stack);
      }
      if (meta.index === last) {
        break;
      }
    }
    if (!stacks.length) {
      stacks.push(void 0);
    }
    return stacks;
  }
  _getStackCount(index2) {
    return this._getStacks(void 0, index2).length;
  }
  _getStackIndex(datasetIndex, name, dataIndex) {
    const stacks = this._getStacks(datasetIndex, dataIndex);
    const index2 = name !== void 0 ? stacks.indexOf(name) : -1;
    return index2 === -1 ? stacks.length - 1 : index2;
  }
  _getRuler() {
    const opts = this.options;
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const pixels = [];
    let i2, ilen;
    for (i2 = 0, ilen = meta.data.length; i2 < ilen; ++i2) {
      pixels.push(iScale.getPixelForValue(this.getParsed(i2)[iScale.axis], i2));
    }
    const barThickness = opts.barThickness;
    const min = barThickness || computeMinSampleSize(meta);
    return {
      min,
      pixels,
      start: iScale._startPixel,
      end: iScale._endPixel,
      stackCount: this._getStackCount(),
      scale: iScale,
      grouped: opts.grouped,
      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
    };
  }
  _calculateBarValuePixels(index2) {
    const { _cachedMeta: { vScale, _stacked, index: datasetIndex }, options: { base: baseValue, minBarLength } } = this;
    const actualBase = baseValue || 0;
    const parsed = this.getParsed(index2);
    const custom = parsed._custom;
    const floating = isFloatBar(custom);
    let value = parsed[vScale.axis];
    let start = 0;
    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
    let head, size;
    if (length !== value) {
      start = length - value;
      length = value;
    }
    if (floating) {
      value = custom.barStart;
      length = custom.barEnd - custom.barStart;
      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
        start = 0;
      }
      start += value;
    }
    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;
    let base2 = vScale.getPixelForValue(startValue);
    if (this.chart.getDataVisibility(index2)) {
      head = vScale.getPixelForValue(start + length);
    } else {
      head = base2;
    }
    size = head - base2;
    if (Math.abs(size) < minBarLength) {
      size = barSign(size, vScale, actualBase) * minBarLength;
      if (value === actualBase) {
        base2 -= size / 2;
      }
      const startPixel = vScale.getPixelForDecimal(0);
      const endPixel = vScale.getPixelForDecimal(1);
      const min = Math.min(startPixel, endPixel);
      const max = Math.max(startPixel, endPixel);
      base2 = Math.max(Math.min(base2, max), min);
      head = base2 + size;
      if (_stacked && !floating) {
        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base2);
      }
    }
    if (base2 === vScale.getPixelForValue(actualBase)) {
      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;
      base2 += halfGrid;
      size -= halfGrid;
    }
    return {
      size,
      base: base2,
      head,
      center: head + size / 2
    };
  }
  _calculateBarIndexPixels(index2, ruler) {
    const scale = ruler.scale;
    const options = this.options;
    const skipNull = options.skipNull;
    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);
    let center, size;
    if (ruler.grouped) {
      const stackCount = skipNull ? this._getStackCount(index2) : ruler.stackCount;
      const range = options.barThickness === "flex" ? computeFlexCategoryTraits(index2, ruler, options, stackCount) : computeFitCategoryTraits(index2, ruler, options, stackCount);
      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index2 : void 0);
      center = range.start + range.chunk * stackIndex + range.chunk / 2;
      size = Math.min(maxBarThickness, range.chunk * range.ratio);
    } else {
      center = scale.getPixelForValue(this.getParsed(index2)[scale.axis], index2);
      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
    }
    return {
      base: center - size / 2,
      head: center + size / 2,
      center,
      size
    };
  }
  draw() {
    const meta = this._cachedMeta;
    const vScale = meta.vScale;
    const rects = meta.data;
    const ilen = rects.length;
    let i2 = 0;
    for (; i2 < ilen; ++i2) {
      if (this.getParsed(i2)[vScale.axis] !== null && !rects[i2].hidden) {
        rects[i2].draw(this._ctx);
      }
    }
  }
}
__publicField(BarController, "id", "bar");
__publicField(BarController, "defaults", {
  datasetElementType: false,
  dataElementType: "bar",
  categoryPercentage: 0.8,
  barPercentage: 0.9,
  grouped: true,
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "base",
        "width",
        "height"
      ]
    }
  }
});
__publicField(BarController, "overrides", {
  scales: {
    _index_: {
      type: "category",
      offset: true,
      grid: {
        offset: true
      }
    },
    _value_: {
      type: "linear",
      beginAtZero: true
    }
  }
});
class BubbleController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
  }
  parsePrimitiveData(meta, data, start, count) {
    const parsed = super.parsePrimitiveData(meta, data, start, count);
    for (let i2 = 0; i2 < parsed.length; i2++) {
      parsed[i2]._custom = this.resolveDataElementOptions(i2 + start).radius;
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const parsed = super.parseArrayData(meta, data, start, count);
    for (let i2 = 0; i2 < parsed.length; i2++) {
      const item = data[start + i2];
      parsed[i2]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i2 + start).radius);
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const parsed = super.parseObjectData(meta, data, start, count);
    for (let i2 = 0; i2 < parsed.length; i2++) {
      const item = data[start + i2];
      parsed[i2]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i2 + start).radius);
    }
    return parsed;
  }
  getMaxOverflow() {
    const data = this._cachedMeta.data;
    let max = 0;
    for (let i2 = data.length - 1; i2 >= 0; --i2) {
      max = Math.max(max, data[i2].size(this.resolveDataElementOptions(i2)) / 2);
    }
    return max > 0 && max;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const labels = this.chart.data.labels || [];
    const { xScale, yScale } = meta;
    const parsed = this.getParsed(index2);
    const x2 = xScale.getLabelForValue(parsed.x);
    const y3 = yScale.getLabelForValue(parsed.y);
    const r = parsed._custom;
    return {
      label: labels[index2] || "",
      value: "(" + x2 + ", " + y3 + (r ? ", " + r : "") + ")"
    };
  }
  update(mode) {
    const points = this._cachedMeta.data;
    this.updateElements(points, 0, points.length, mode);
  }
  updateElements(points, start, count, mode) {
    const reset = mode === "reset";
    const { iScale, vScale } = this._cachedMeta;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    for (let i2 = start; i2 < start + count; i2++) {
      const point = points[i2];
      const parsed = !reset && this.getParsed(i2);
      const properties = {};
      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
      properties.skip = isNaN(iPixel) || isNaN(vPixel);
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
        if (reset) {
          properties.options.radius = 0;
        }
      }
      this.updateElement(point, i2, properties, mode);
    }
  }
  resolveDataElementOptions(index2, mode) {
    const parsed = this.getParsed(index2);
    let values = super.resolveDataElementOptions(index2, mode);
    if (values.$shared) {
      values = Object.assign({}, values, {
        $shared: false
      });
    }
    const radius = values.radius;
    if (mode !== "active") {
      values.radius = 0;
    }
    values.radius += valueOrDefault(parsed && parsed._custom, radius);
    return values;
  }
}
__publicField(BubbleController, "id", "bubble");
__publicField(BubbleController, "defaults", {
  datasetElementType: false,
  dataElementType: "point",
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "borderWidth",
        "radius"
      ]
    }
  }
});
__publicField(BubbleController, "overrides", {
  scales: {
    x: {
      type: "linear"
    },
    y: {
      type: "linear"
    }
  }
});
function getRatioAndOffset(rotation, circumference, cutout) {
  let ratioX = 1;
  let ratioY = 1;
  let offsetX = 0;
  let offsetY = 0;
  if (circumference < TAU) {
    const startAngle = rotation;
    const endAngle = startAngle + circumference;
    const startX = Math.cos(startAngle);
    const startY = Math.sin(startAngle);
    const endX = Math.cos(endAngle);
    const endY = Math.sin(endAngle);
    const calcMax = (angle, a3, b2) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a3, a3 * cutout, b2, b2 * cutout);
    const calcMin = (angle, a3, b2) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a3, a3 * cutout, b2, b2 * cutout);
    const maxX = calcMax(0, startX, endX);
    const maxY = calcMax(HALF_PI, startY, endY);
    const minX = calcMin(PI, startX, endX);
    const minY = calcMin(PI + HALF_PI, startY, endY);
    ratioX = (maxX - minX) / 2;
    ratioY = (maxY - minY) / 2;
    offsetX = -(maxX + minX) / 2;
    offsetY = -(maxY + minY) / 2;
  }
  return {
    ratioX,
    ratioY,
    offsetX,
    offsetY
  };
}
class DoughnutController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.enableOptionSharing = true;
    this.innerRadius = void 0;
    this.outerRadius = void 0;
    this.offsetX = void 0;
    this.offsetY = void 0;
  }
  linkScales() {
  }
  parse(start, count) {
    const data = this.getDataset().data;
    const meta = this._cachedMeta;
    if (this._parsing === false) {
      meta._parsed = data;
    } else {
      let getter = (i3) => +data[i3];
      if (isObject(data[start])) {
        const { key = "value" } = this._parsing;
        getter = (i3) => +resolveObjectKey(data[i3], key);
      }
      let i2, ilen;
      for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
        meta._parsed[i2] = getter(i2);
      }
    }
  }
  _getRotation() {
    return toRadians(this.options.rotation - 90);
  }
  _getCircumference() {
    return toRadians(this.options.circumference);
  }
  _getRotationExtents() {
    let min = TAU;
    let max = -TAU;
    for (let i2 = 0; i2 < this.chart.data.datasets.length; ++i2) {
      if (this.chart.isDatasetVisible(i2) && this.chart.getDatasetMeta(i2).type === this._type) {
        const controller = this.chart.getDatasetMeta(i2).controller;
        const rotation = controller._getRotation();
        const circumference = controller._getCircumference();
        min = Math.min(min, rotation);
        max = Math.max(max, rotation + circumference);
      }
    }
    return {
      rotation: min,
      circumference: max - min
    };
  }
  update(mode) {
    const chart = this.chart;
    const { chartArea } = chart;
    const meta = this._cachedMeta;
    const arcs = meta.data;
    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);
    const chartWeight = this._getRingWeight(this.index);
    const { circumference, rotation } = this._getRotationExtents();
    const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);
    const maxWidth = (chartArea.width - spacing) / ratioX;
    const maxHeight = (chartArea.height - spacing) / ratioY;
    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
    const outerRadius = toDimension(this.options.radius, maxRadius);
    const innerRadius = Math.max(outerRadius * cutout, 0);
    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
    this.offsetX = offsetX * outerRadius;
    this.offsetY = offsetY * outerRadius;
    meta.total = this.calculateTotal();
    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
    this.updateElements(arcs, 0, arcs.length, mode);
  }
  _circumference(i2, reset) {
    const opts = this.options;
    const meta = this._cachedMeta;
    const circumference = this._getCircumference();
    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i2) || meta._parsed[i2] === null || meta.data[i2].hidden) {
      return 0;
    }
    return this.calculateCircumference(meta._parsed[i2] * circumference / TAU);
  }
  updateElements(arcs, start, count, mode) {
    const reset = mode === "reset";
    const chart = this.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const centerX = (chartArea.left + chartArea.right) / 2;
    const centerY = (chartArea.top + chartArea.bottom) / 2;
    const animateScale = reset && animationOpts.animateScale;
    const innerRadius = animateScale ? 0 : this.innerRadius;
    const outerRadius = animateScale ? 0 : this.outerRadius;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    let startAngle = this._getRotation();
    let i2;
    for (i2 = 0; i2 < start; ++i2) {
      startAngle += this._circumference(i2, reset);
    }
    for (i2 = start; i2 < start + count; ++i2) {
      const circumference = this._circumference(i2, reset);
      const arc = arcs[i2];
      const properties = {
        x: centerX + this.offsetX,
        y: centerY + this.offsetY,
        startAngle,
        endAngle: startAngle + circumference,
        circumference,
        outerRadius,
        innerRadius
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, arc.active ? "active" : mode);
      }
      startAngle += circumference;
      this.updateElement(arc, i2, properties, mode);
    }
  }
  calculateTotal() {
    const meta = this._cachedMeta;
    const metaData = meta.data;
    let total = 0;
    let i2;
    for (i2 = 0; i2 < metaData.length; i2++) {
      const value = meta._parsed[i2];
      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i2) && !metaData[i2].hidden) {
        total += Math.abs(value);
      }
    }
    return total;
  }
  calculateCircumference(value) {
    const total = this._cachedMeta.total;
    if (total > 0 && !isNaN(value)) {
      return TAU * (Math.abs(value) / total);
    }
    return 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const chart = this.chart;
    const labels = chart.data.labels || [];
    const value = formatNumber(meta._parsed[index2], chart.options.locale);
    return {
      label: labels[index2] || "",
      value
    };
  }
  getMaxBorderWidth(arcs) {
    let max = 0;
    const chart = this.chart;
    let i2, ilen, meta, controller, options;
    if (!arcs) {
      for (i2 = 0, ilen = chart.data.datasets.length; i2 < ilen; ++i2) {
        if (chart.isDatasetVisible(i2)) {
          meta = chart.getDatasetMeta(i2);
          arcs = meta.data;
          controller = meta.controller;
          break;
        }
      }
    }
    if (!arcs) {
      return 0;
    }
    for (i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
      options = controller.resolveDataElementOptions(i2);
      if (options.borderAlign !== "inner") {
        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
      }
    }
    return max;
  }
  getMaxOffset(arcs) {
    let max = 0;
    for (let i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
      const options = this.resolveDataElementOptions(i2);
      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
    }
    return max;
  }
  _getRingWeightOffset(datasetIndex) {
    let ringWeightOffset = 0;
    for (let i2 = 0; i2 < datasetIndex; ++i2) {
      if (this.chart.isDatasetVisible(i2)) {
        ringWeightOffset += this._getRingWeight(i2);
      }
    }
    return ringWeightOffset;
  }
  _getRingWeight(datasetIndex) {
    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
  }
  _getVisibleDatasetWeightTotal() {
    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
  }
}
__publicField(DoughnutController, "id", "doughnut");
__publicField(DoughnutController, "defaults", {
  datasetElementType: false,
  dataElementType: "arc",
  animation: {
    animateRotate: true,
    animateScale: false
  },
  animations: {
    numbers: {
      type: "number",
      properties: [
        "circumference",
        "endAngle",
        "innerRadius",
        "outerRadius",
        "startAngle",
        "x",
        "y",
        "offset",
        "borderWidth",
        "spacing"
      ]
    }
  },
  cutout: "50%",
  rotation: 0,
  circumference: 360,
  radius: "100%",
  spacing: 0,
  indexAxis: "r"
});
__publicField(DoughnutController, "descriptors", {
  _scriptable: (name) => name !== "spacing",
  _indexable: (name) => name !== "spacing" && !name.startsWith("borderDash") && !name.startsWith("hoverBorderDash")
});
__publicField(DoughnutController, "overrides", {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;
          if (data.labels.length && data.datasets.length) {
            const { labels: { pointStyle, color: color2 } } = chart.legend.options;
            return data.labels.map((label, i2) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i2);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                fontColor: color2,
                lineWidth: style.borderWidth,
                pointStyle,
                hidden: !chart.getDataVisibility(i2),
                index: i2
              };
            });
          }
          return [];
        }
      },
      onClick(e2, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }
    }
  }
});
class LineController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    this.supportsDecimation = true;
    super.initialize();
  }
  update(mode) {
    const meta = this._cachedMeta;
    const { dataset: line, data: points = [], _dataset } = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if (_scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }
    line._chart = this.chart;
    line._datasetIndex = this.index;
    line._decimated = !!_dataset._decimated;
    line.points = points;
    const options = this.resolveDatasetElementOptions(mode);
    if (!this.options.showLine) {
      options.borderWidth = 0;
    }
    options.segment = this.options.segment;
    this.updateElement(line, void 0, {
      animated: !animationsDisabled,
      options
    }, mode);
    this.updateElements(points, start, count, mode);
  }
  updateElements(points, start, count, mode) {
    const reset = mode === "reset";
    const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const { spanGaps, segment } = this.options;
    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
    const end = start + count;
    const pointsCount = points.length;
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i2 = 0; i2 < pointsCount; ++i2) {
      const point = points[i2];
      const properties = directUpdate ? point : {};
      if (i2 < start || i2 >= end) {
        properties.skip = true;
        continue;
      }
      const parsed = this.getParsed(i2);
      const nullData = isNullOrUndef(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i2);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i2);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i2 > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i2];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
      }
      if (!directUpdate) {
        this.updateElement(point, i2, properties, mode);
      }
      prevParsed = parsed;
    }
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    const data = meta.data || [];
    if (!data.length) {
      return border;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }
  draw() {
    const meta = this._cachedMeta;
    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
    super.draw();
  }
}
__publicField(LineController, "id", "line");
__publicField(LineController, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  showLine: true,
  spanGaps: false
});
__publicField(LineController, "overrides", {
  scales: {
    _index_: {
      type: "category"
    },
    _value_: {
      type: "linear"
    }
  }
});
class PolarAreaController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.innerRadius = void 0;
    this.outerRadius = void 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const chart = this.chart;
    const labels = chart.data.labels || [];
    const value = formatNumber(meta._parsed[index2].r, chart.options.locale);
    return {
      label: labels[index2] || "",
      value
    };
  }
  parseObjectData(meta, data, start, count) {
    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
  }
  update(mode) {
    const arcs = this._cachedMeta.data;
    this._updateRadius();
    this.updateElements(arcs, 0, arcs.length, mode);
  }
  getMinMax() {
    const meta = this._cachedMeta;
    const range = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    meta.data.forEach((element2, index2) => {
      const parsed = this.getParsed(index2).r;
      if (!isNaN(parsed) && this.chart.getDataVisibility(index2)) {
        if (parsed < range.min) {
          range.min = parsed;
        }
        if (parsed > range.max) {
          range.max = parsed;
        }
      }
    });
    return range;
  }
  _updateRadius() {
    const chart = this.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
    const outerRadius = Math.max(minSize / 2, 0);
    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
    this.outerRadius = outerRadius - radiusLength * this.index;
    this.innerRadius = this.outerRadius - radiusLength;
  }
  updateElements(arcs, start, count, mode) {
    const reset = mode === "reset";
    const chart = this.chart;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const scale = this._cachedMeta.rScale;
    const centerX = scale.xCenter;
    const centerY = scale.yCenter;
    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;
    let angle = datasetStartAngle;
    let i2;
    const defaultAngle = 360 / this.countVisibleElements();
    for (i2 = 0; i2 < start; ++i2) {
      angle += this._computeAngle(i2, mode, defaultAngle);
    }
    for (i2 = start; i2 < start + count; i2++) {
      const arc = arcs[i2];
      let startAngle = angle;
      let endAngle = angle + this._computeAngle(i2, mode, defaultAngle);
      let outerRadius = chart.getDataVisibility(i2) ? scale.getDistanceFromCenterForValue(this.getParsed(i2).r) : 0;
      angle = endAngle;
      if (reset) {
        if (animationOpts.animateScale) {
          outerRadius = 0;
        }
        if (animationOpts.animateRotate) {
          startAngle = endAngle = datasetStartAngle;
        }
      }
      const properties = {
        x: centerX,
        y: centerY,
        innerRadius: 0,
        outerRadius,
        startAngle,
        endAngle,
        options: this.resolveDataElementOptions(i2, arc.active ? "active" : mode)
      };
      this.updateElement(arc, i2, properties, mode);
    }
  }
  countVisibleElements() {
    const meta = this._cachedMeta;
    let count = 0;
    meta.data.forEach((element2, index2) => {
      if (!isNaN(this.getParsed(index2).r) && this.chart.getDataVisibility(index2)) {
        count++;
      }
    });
    return count;
  }
  _computeAngle(index2, mode, defaultAngle) {
    return this.chart.getDataVisibility(index2) ? toRadians(this.resolveDataElementOptions(index2, mode).angle || defaultAngle) : 0;
  }
}
__publicField(PolarAreaController, "id", "polarArea");
__publicField(PolarAreaController, "defaults", {
  dataElementType: "arc",
  animation: {
    animateRotate: true,
    animateScale: true
  },
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "startAngle",
        "endAngle",
        "innerRadius",
        "outerRadius"
      ]
    }
  },
  indexAxis: "r",
  startAngle: 0
});
__publicField(PolarAreaController, "overrides", {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;
          if (data.labels.length && data.datasets.length) {
            const { labels: { pointStyle, color: color2 } } = chart.legend.options;
            return data.labels.map((label, i2) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i2);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                fontColor: color2,
                lineWidth: style.borderWidth,
                pointStyle,
                hidden: !chart.getDataVisibility(i2),
                index: i2
              };
            });
          }
          return [];
        }
      },
      onClick(e2, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }
    }
  },
  scales: {
    r: {
      type: "radialLinear",
      angleLines: {
        display: false
      },
      beginAtZero: true,
      grid: {
        circular: true
      },
      pointLabels: {
        display: false
      },
      startAngle: 0
    }
  }
});
class PieController extends DoughnutController {
}
__publicField(PieController, "id", "pie");
__publicField(PieController, "defaults", {
  cutout: 0,
  rotation: 0,
  circumference: 360,
  radius: "100%"
});
class RadarController extends DatasetController {
  getLabelAndValue(index2) {
    const vScale = this._cachedMeta.vScale;
    const parsed = this.getParsed(index2);
    return {
      label: vScale.getLabels()[index2],
      value: "" + vScale.getLabelForValue(parsed[vScale.axis])
    };
  }
  parseObjectData(meta, data, start, count) {
    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
  }
  update(mode) {
    const meta = this._cachedMeta;
    const line = meta.dataset;
    const points = meta.data || [];
    const labels = meta.iScale.getLabels();
    line.points = points;
    if (mode !== "resize") {
      const options = this.resolveDatasetElementOptions(mode);
      if (!this.options.showLine) {
        options.borderWidth = 0;
      }
      const properties = {
        _loop: true,
        _fullLoop: labels.length === points.length,
        options
      };
      this.updateElement(line, void 0, properties, mode);
    }
    this.updateElements(points, 0, points.length, mode);
  }
  updateElements(points, start, count, mode) {
    const scale = this._cachedMeta.rScale;
    const reset = mode === "reset";
    for (let i2 = start; i2 < start + count; i2++) {
      const point = points[i2];
      const options = this.resolveDataElementOptions(i2, point.active ? "active" : mode);
      const pointPosition = scale.getPointPositionForValue(i2, this.getParsed(i2).r);
      const x2 = reset ? scale.xCenter : pointPosition.x;
      const y3 = reset ? scale.yCenter : pointPosition.y;
      const properties = {
        x: x2,
        y: y3,
        angle: pointPosition.angle,
        skip: isNaN(x2) || isNaN(y3),
        options
      };
      this.updateElement(point, i2, properties, mode);
    }
  }
}
__publicField(RadarController, "id", "radar");
__publicField(RadarController, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  indexAxis: "r",
  showLine: true,
  elements: {
    line: {
      fill: "start"
    }
  }
});
__publicField(RadarController, "overrides", {
  aspectRatio: 1,
  scales: {
    r: {
      type: "radialLinear"
    }
  }
});
class ScatterController extends DatasetController {
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const labels = this.chart.data.labels || [];
    const { xScale, yScale } = meta;
    const parsed = this.getParsed(index2);
    const x2 = xScale.getLabelForValue(parsed.x);
    const y3 = yScale.getLabelForValue(parsed.y);
    return {
      label: labels[index2] || "",
      value: "(" + x2 + ", " + y3 + ")"
    };
  }
  update(mode) {
    const meta = this._cachedMeta;
    const { data: points = [] } = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if (_scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }
    if (this.options.showLine) {
      if (!this.datasetElementType) {
        this.addElements();
      }
      const { dataset: line, _dataset } = meta;
      line._chart = this.chart;
      line._datasetIndex = this.index;
      line._decimated = !!_dataset._decimated;
      line.points = points;
      const options = this.resolveDatasetElementOptions(mode);
      options.segment = this.options.segment;
      this.updateElement(line, void 0, {
        animated: !animationsDisabled,
        options
      }, mode);
    } else if (this.datasetElementType) {
      delete meta.dataset;
      this.datasetElementType = false;
    }
    this.updateElements(points, start, count, mode);
  }
  addElements() {
    const { showLine } = this.options;
    if (!this.datasetElementType && showLine) {
      this.datasetElementType = this.chart.registry.getElement("line");
    }
    super.addElements();
  }
  updateElements(points, start, count, mode) {
    const reset = mode === "reset";
    const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
    const firstOpts = this.resolveDataElementOptions(start, mode);
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode, sharedOptions);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const { spanGaps, segment } = this.options;
    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i2 = start; i2 < start + count; ++i2) {
      const point = points[i2];
      const parsed = this.getParsed(i2);
      const properties = directUpdate ? point : {};
      const nullData = isNullOrUndef(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i2);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i2);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i2 > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i2];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
      }
      if (!directUpdate) {
        this.updateElement(point, i2, properties, mode);
      }
      prevParsed = parsed;
    }
    this.updateSharedOptions(sharedOptions, mode, firstOpts);
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const data = meta.data || [];
    if (!this.options.showLine) {
      let max = 0;
      for (let i2 = data.length - 1; i2 >= 0; --i2) {
        max = Math.max(max, data[i2].size(this.resolveDataElementOptions(i2)) / 2);
      }
      return max > 0 && max;
    }
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    if (!data.length) {
      return border;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }
}
__publicField(ScatterController, "id", "scatter");
__publicField(ScatterController, "defaults", {
  datasetElementType: false,
  dataElementType: "point",
  showLine: false,
  fill: false
});
__publicField(ScatterController, "overrides", {
  interaction: {
    mode: "point"
  },
  scales: {
    x: {
      type: "linear"
    },
    y: {
      type: "linear"
    }
  }
});
var controllers = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BarController,
  BubbleController,
  DoughnutController,
  LineController,
  PieController,
  PolarAreaController,
  RadarController,
  ScatterController
});
function abstract() {
  throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
class DateAdapterBase {
  constructor(options) {
    __publicField(this, "options");
    this.options = options || {};
  }
  /**
  * Override default date adapter methods.
  * Accepts type parameter to define options type.
  * @example
  * Chart._adapters._date.override<{myAdapterOption: string}>({
  *   init() {
  *     console.log(this.options.myAdapterOption);
  *   }
  * })
  */
  static override(members) {
    Object.assign(DateAdapterBase.prototype, members);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  init() {
  }
  formats() {
    return abstract();
  }
  parse() {
    return abstract();
  }
  format() {
    return abstract();
  }
  add() {
    return abstract();
  }
  diff() {
    return abstract();
  }
  startOf() {
    return abstract();
  }
  endOf() {
    return abstract();
  }
}
var adapters = {
  _date: DateAdapterBase
};
function binarySearch(metaset, axis, value, intersect) {
  const { controller, data, _sorted } = metaset;
  const iScale = controller._cachedMeta.iScale;
  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;
  if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
    if (!intersect) {
      const result = lookupMethod(data, axis, value);
      if (spanGaps) {
        const { vScale } = controller._cachedMeta;
        const { _parsed } = metaset;
        const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        result.lo -= Math.max(0, distanceToDefinedLo);
        const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        result.hi += Math.max(0, distanceToDefinedHi);
      }
      return result;
    } else if (controller._sharedOptions) {
      const el = data[0];
      const range = typeof el.getRange === "function" && el.getRange(axis);
      if (range) {
        const start = lookupMethod(data, axis, value - range);
        const end = lookupMethod(data, axis, value + range);
        return {
          lo: start.lo,
          hi: end.hi
        };
      }
    }
  }
  return {
    lo: 0,
    hi: data.length - 1
  };
}
function evaluateInteractionItems(chart, axis, position, handler, intersect) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  const value = position[axis];
  for (let i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
    const { index: index2, data } = metasets[i2];
    const { lo, hi } = binarySearch(metasets[i2], axis, value, intersect);
    for (let j = lo; j <= hi; ++j) {
      const element2 = data[j];
      if (!element2.skip) {
        handler(element2, index2, j);
      }
    }
  }
}
function getDistanceMetricForAxis(axis) {
  const useX = axis.indexOf("x") !== -1;
  const useY = axis.indexOf("y") !== -1;
  return function(pt1, pt2) {
    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}
function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
  const items = [];
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return items;
  }
  const evaluationFunc = function(element2, datasetIndex, index2) {
    if (!includeInvisible && !_isPointInArea(element2, chart.chartArea, 0)) {
      return;
    }
    if (element2.inRange(position.x, position.y, useFinalPosition)) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
    }
  };
  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
  return items;
}
function getNearestRadialItems(chart, position, axis, useFinalPosition) {
  let items = [];
  function evaluationFunc(element2, datasetIndex, index2) {
    const { startAngle, endAngle } = element2.getProps([
      "startAngle",
      "endAngle"
    ], useFinalPosition);
    const { angle } = getAngleFromPoint(element2, {
      x: position.x,
      y: position.y
    });
    if (_angleBetween(angle, startAngle, endAngle)) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  let items = [];
  const distanceMetric = getDistanceMetricForAxis(axis);
  let minDistance = Number.POSITIVE_INFINITY;
  function evaluationFunc(element2, datasetIndex, index2) {
    const inRange2 = element2.inRange(position.x, position.y, useFinalPosition);
    if (intersect && !inRange2) {
      return;
    }
    const center = element2.getCenterPoint(useFinalPosition);
    const pointInArea = !!includeInvisible || chart.isPointInArea(center);
    if (!pointInArea && !inRange2) {
      return;
    }
    const distance = distanceMetric(position, center);
    if (distance < minDistance) {
      items = [
        {
          element: element2,
          datasetIndex,
          index: index2
        }
      ];
      minDistance = distance;
    } else if (distance === minDistance) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return [];
  }
  return axis === "r" && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
  const items = [];
  const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
  let intersectsItem = false;
  evaluateInteractionItems(chart, axis, position, (element2, datasetIndex, index2) => {
    if (element2[rangeMethod] && element2[rangeMethod](position[axis], useFinalPosition)) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
      intersectsItem = intersectsItem || element2.inRange(position.x, position.y, useFinalPosition);
    }
  });
  if (intersect && !intersectsItem) {
    return [];
  }
  return items;
}
var Interaction = {
  evaluateInteractionItems,
  modes: {
    index(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "x";
      const includeInvisible = options.includeInvisible || false;
      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      const elements2 = [];
      if (!items.length) {
        return [];
      }
      chart.getSortedVisibleDatasetMetas().forEach((meta) => {
        const index2 = items[0].index;
        const element2 = meta.data[index2];
        if (element2 && !element2.skip) {
          elements2.push({
            element: element2,
            datasetIndex: meta.index,
            index: index2
          });
        }
      });
      return elements2;
    },
    dataset(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      if (items.length > 0) {
        const datasetIndex = items[0].datasetIndex;
        const data = chart.getDatasetMeta(datasetIndex).data;
        items = [];
        for (let i2 = 0; i2 < data.length; ++i2) {
          items.push({
            element: data[i2],
            datasetIndex,
            index: i2
          });
        }
      }
      return items;
    },
    point(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
    },
    nearest(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
    },
    x(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      return getAxisItems(chart, position, "x", options.intersect, useFinalPosition);
    },
    y(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      return getAxisItems(chart, position, "y", options.intersect, useFinalPosition);
    }
  }
};
const STATIC_POSITIONS = [
  "left",
  "top",
  "right",
  "bottom"
];
function filterByPosition(array, position) {
  return array.filter((v) => v.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
  return array.filter((v) => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}
function sortByWeight(array, reverse) {
  return array.sort((a3, b2) => {
    const v0 = reverse ? b2 : a3;
    const v1 = reverse ? a3 : b2;
    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
  });
}
function wrapBoxes(boxes) {
  const layoutBoxes = [];
  let i2, ilen, box, pos, stack, stackWeight;
  for (i2 = 0, ilen = (boxes || []).length; i2 < ilen; ++i2) {
    box = boxes[i2];
    ({ position: pos, options: { stack, stackWeight = 1 } } = box);
    layoutBoxes.push({
      index: i2,
      box,
      pos,
      horizontal: box.isHorizontal(),
      weight: box.weight,
      stack: stack && pos + stack,
      stackWeight
    });
  }
  return layoutBoxes;
}
function buildStacks(layouts2) {
  const stacks = {};
  for (const wrap of layouts2) {
    const { stack, pos, stackWeight } = wrap;
    if (!stack || !STATIC_POSITIONS.includes(pos)) {
      continue;
    }
    const _stack = stacks[stack] || (stacks[stack] = {
      count: 0,
      placed: 0,
      weight: 0,
      size: 0
    });
    _stack.count++;
    _stack.weight += stackWeight;
  }
  return stacks;
}
function setLayoutDims(layouts2, params) {
  const stacks = buildStacks(layouts2);
  const { vBoxMaxWidth, hBoxMaxHeight } = params;
  let i2, ilen, layout;
  for (i2 = 0, ilen = layouts2.length; i2 < ilen; ++i2) {
    layout = layouts2[i2];
    const { fullSize } = layout.box;
    const stack = stacks[layout.stack];
    const factor = stack && layout.stackWeight / stack.weight;
    if (layout.horizontal) {
      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
      layout.height = hBoxMaxHeight;
    } else {
      layout.width = vBoxMaxWidth;
      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
    }
  }
  return stacks;
}
function buildLayoutBoxes(boxes) {
  const layoutBoxes = wrapBoxes(boxes);
  const fullSize = sortByWeight(layoutBoxes.filter((wrap) => wrap.box.fullSize), true);
  const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
  const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
  const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
  const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
  return {
    fullSize,
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, "chartArea"),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}
function getCombinedMax(maxPadding, chartArea, a3, b2) {
  return Math.max(maxPadding[a3], chartArea[a3]) + Math.max(maxPadding[b2], chartArea[b2]);
}
function updateMaxPadding(maxPadding, boxPadding) {
  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
  const { pos, box } = layout;
  const maxPadding = chartArea.maxPadding;
  if (!isObject(pos)) {
    if (layout.size) {
      chartArea[pos] -= layout.size;
    }
    const stack = stacks[layout.stack] || {
      size: 0,
      count: 1
    };
    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
    layout.size = stack.size / stack.count;
    chartArea[pos] += layout.size;
  }
  if (box.getPadding) {
    updateMaxPadding(maxPadding, box.getPadding());
  }
  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
  const widthChanged = newWidth !== chartArea.w;
  const heightChanged = newHeight !== chartArea.h;
  chartArea.w = newWidth;
  chartArea.h = newHeight;
  return layout.horizontal ? {
    same: widthChanged,
    other: heightChanged
  } : {
    same: heightChanged,
    other: widthChanged
  };
}
function handleMaxPadding(chartArea) {
  const maxPadding = chartArea.maxPadding;
  function updatePos(pos) {
    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }
  chartArea.y += updatePos("top");
  chartArea.x += updatePos("left");
  updatePos("right");
  updatePos("bottom");
}
function getMargins(horizontal, chartArea) {
  const maxPadding = chartArea.maxPadding;
  function marginForPositions(positions2) {
    const margin = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    positions2.forEach((pos) => {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }
  return horizontal ? marginForPositions([
    "left",
    "right"
  ]) : marginForPositions([
    "top",
    "bottom"
  ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
  const refitBoxes = [];
  let i2, ilen, layout, box, refit, changed;
  for (i2 = 0, ilen = boxes.length, refit = 0; i2 < ilen; ++i2) {
    layout = boxes[i2];
    box = layout.box;
    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
    const { same, other } = updateDims(chartArea, params, layout, stacks);
    refit |= same && refitBoxes.length;
    changed = changed || other;
    if (!box.fullSize) {
      refitBoxes.push(layout);
    }
  }
  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
  box.top = top;
  box.left = left;
  box.right = left + width;
  box.bottom = top + height;
  box.width = width;
  box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
  const userPadding = params.padding;
  let { x: x2, y: y3 } = chartArea;
  for (const layout of boxes) {
    const box = layout.box;
    const stack = stacks[layout.stack] || {
      count: 1,
      placed: 0,
      weight: 1
    };
    const weight = layout.stackWeight / stack.weight || 1;
    if (layout.horizontal) {
      const width = chartArea.w * weight;
      const height = stack.size || box.height;
      if (defined(stack.start)) {
        y3 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, userPadding.left, y3, params.outerWidth - userPadding.right - userPadding.left, height);
      } else {
        setBoxDims(box, chartArea.left + stack.placed, y3, width, height);
      }
      stack.start = y3;
      stack.placed += width;
      y3 = box.bottom;
    } else {
      const height = chartArea.h * weight;
      const width = stack.size || box.width;
      if (defined(stack.start)) {
        x2 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, x2, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
      } else {
        setBoxDims(box, x2, chartArea.top + stack.placed, width, height);
      }
      stack.start = x2;
      stack.placed += height;
      x2 = box.right;
    }
  }
  chartArea.x = x2;
  chartArea.y = y3;
}
var layouts = {
  addBox(chart, item) {
    if (!chart.boxes) {
      chart.boxes = [];
    }
    item.fullSize = item.fullSize || false;
    item.position = item.position || "top";
    item.weight = item.weight || 0;
    item._layers = item._layers || function() {
      return [
        {
          z: 0,
          draw(chartArea) {
            item.draw(chartArea);
          }
        }
      ];
    };
    chart.boxes.push(item);
  },
  removeBox(chart, layoutItem) {
    const index2 = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    if (index2 !== -1) {
      chart.boxes.splice(index2, 1);
    }
  },
  configure(chart, item, options) {
    item.fullSize = options.fullSize;
    item.position = options.position;
    item.weight = options.weight;
  },
  update(chart, width, height, minPadding) {
    if (!chart) {
      return;
    }
    const padding = toPadding(chart.options.layout.padding);
    const availableWidth = Math.max(width - padding.width, 0);
    const availableHeight = Math.max(height - padding.height, 0);
    const boxes = buildLayoutBoxes(chart.boxes);
    const verticalBoxes = boxes.vertical;
    const horizontalBoxes = boxes.horizontal;
    each(chart.boxes, (box) => {
      if (typeof box.beforeLayout === "function") {
        box.beforeLayout();
      }
    });
    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
    const params = Object.freeze({
      outerWidth: width,
      outerHeight: height,
      padding,
      availableWidth,
      availableHeight,
      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
      hBoxMaxHeight: availableHeight / 2
    });
    const maxPadding = Object.assign({}, padding);
    updateMaxPadding(maxPadding, toPadding(minPadding));
    const chartArea = Object.assign({
      maxPadding,
      w: availableWidth,
      h: availableHeight,
      x: padding.left,
      y: padding.top
    }, padding);
    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
    fitBoxes(boxes.fullSize, chartArea, params, stacks);
    fitBoxes(verticalBoxes, chartArea, params, stacks);
    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
      fitBoxes(verticalBoxes, chartArea, params, stacks);
    }
    handleMaxPadding(chartArea);
    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
    chartArea.x += chartArea.w;
    chartArea.y += chartArea.h;
    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
    chart.chartArea = {
      left: chartArea.left,
      top: chartArea.top,
      right: chartArea.left + chartArea.w,
      bottom: chartArea.top + chartArea.h,
      height: chartArea.h,
      width: chartArea.w
    };
    each(boxes.chartArea, (layout) => {
      const box = layout.box;
      Object.assign(box, chart.chartArea);
      box.update(chartArea.w, chartArea.h, {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      });
    });
  }
};
class BasePlatform {
  acquireContext(canvas, aspectRatio) {
  }
  releaseContext(context) {
    return false;
  }
  addEventListener(chart, type, listener) {
  }
  removeEventListener(chart, type, listener) {
  }
  getDevicePixelRatio() {
    return 1;
  }
  getMaximumSize(element2, width, height, aspectRatio) {
    width = Math.max(0, width || element2.width);
    height = height || element2.height;
    return {
      width,
      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
    };
  }
  isAttached(canvas) {
    return true;
  }
  updateConfig(config) {
  }
}
class BasicPlatform extends BasePlatform {
  acquireContext(item) {
    return item && item.getContext && item.getContext("2d") || null;
  }
  updateConfig(config) {
    config.options.animation = false;
  }
}
const EXPANDO_KEY = "$chartjs";
const EVENT_TYPES = {
  touchstart: "mousedown",
  touchmove: "mousemove",
  touchend: "mouseup",
  pointerenter: "mouseenter",
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointerleave: "mouseout",
  pointerout: "mouseout"
};
const isNullOrEmpty = (value) => value === null || value === "";
function initCanvas(canvas, aspectRatio) {
  const style = canvas.style;
  const renderHeight = canvas.getAttribute("height");
  const renderWidth = canvas.getAttribute("width");
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || "block";
  style.boxSizing = style.boxSizing || "border-box";
  if (isNullOrEmpty(renderWidth)) {
    const displayWidth = readUsedSize(canvas, "width");
    if (displayWidth !== void 0) {
      canvas.width = displayWidth;
    }
  }
  if (isNullOrEmpty(renderHeight)) {
    if (canvas.style.height === "") {
      canvas.height = canvas.width / (aspectRatio || 2);
    } else {
      const displayHeight = readUsedSize(canvas, "height");
      if (displayHeight !== void 0) {
        canvas.height = displayHeight;
      }
    }
  }
  return canvas;
}
const eventListenerOptions = supportsEventListenerOptions ? {
  passive: true
} : false;
function addListener(node, type, listener) {
  if (node) {
    node.addEventListener(type, listener, eventListenerOptions);
  }
}
function removeListener(chart, type, listener) {
  if (chart && chart.canvas) {
    chart.canvas.removeEventListener(type, listener, eventListenerOptions);
  }
}
function fromNativeEvent(event, chart) {
  const type = EVENT_TYPES[event.type] || event.type;
  const { x: x2, y: y3 } = getRelativePosition(event, chart);
  return {
    type,
    chart,
    native: event,
    x: x2 !== void 0 ? x2 : null,
    y: y3 !== void 0 ? y3 : null
  };
}
function nodeListContains(nodeList, canvas) {
  for (const node of nodeList) {
    if (node === canvas || node.contains(canvas)) {
      return true;
    }
  }
}
function createAttachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.addedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
function createDetachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.removedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
const drpListeningCharts = /* @__PURE__ */ new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
  const dpr = window.devicePixelRatio;
  if (dpr === oldDevicePixelRatio) {
    return;
  }
  oldDevicePixelRatio = dpr;
  drpListeningCharts.forEach((resize, chart) => {
    if (chart.currentDevicePixelRatio !== dpr) {
      resize();
    }
  });
}
function listenDevicePixelRatioChanges(chart, resize) {
  if (!drpListeningCharts.size) {
    window.addEventListener("resize", onWindowResize);
  }
  drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
  drpListeningCharts.delete(chart);
  if (!drpListeningCharts.size) {
    window.removeEventListener("resize", onWindowResize);
  }
}
function createResizeObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && _getParentNode(canvas);
  if (!container) {
    return;
  }
  const resize = throttled((width, height) => {
    const w2 = container.clientWidth;
    listener(width, height);
    if (w2 < container.clientWidth) {
      listener();
    }
  }, window);
  const observer = new ResizeObserver((entries) => {
    const entry = entries[0];
    const width = entry.contentRect.width;
    const height = entry.contentRect.height;
    if (width === 0 && height === 0) {
      return;
    }
    resize(width, height);
  });
  observer.observe(container);
  listenDevicePixelRatioChanges(chart, resize);
  return observer;
}
function releaseObserver(chart, type, observer) {
  if (observer) {
    observer.disconnect();
  }
  if (type === "resize") {
    unlistenDevicePixelRatioChanges(chart);
  }
}
function createProxyAndListen(chart, type, listener) {
  const canvas = chart.canvas;
  const proxy = throttled((event) => {
    if (chart.ctx !== null) {
      listener(fromNativeEvent(event, chart));
    }
  }, chart);
  addListener(canvas, type, proxy);
  return proxy;
}
class DomPlatform extends BasePlatform {
  acquireContext(canvas, aspectRatio) {
    const context = canvas && canvas.getContext && canvas.getContext("2d");
    if (context && context.canvas === canvas) {
      initCanvas(canvas, aspectRatio);
      return context;
    }
    return null;
  }
  releaseContext(context) {
    const canvas = context.canvas;
    if (!canvas[EXPANDO_KEY]) {
      return false;
    }
    const initial = canvas[EXPANDO_KEY].initial;
    [
      "height",
      "width"
    ].forEach((prop) => {
      const value = initial[prop];
      if (isNullOrUndef(value)) {
        canvas.removeAttribute(prop);
      } else {
        canvas.setAttribute(prop, value);
      }
    });
    const style = initial.style || {};
    Object.keys(style).forEach((key) => {
      canvas.style[key] = style[key];
    });
    canvas.width = canvas.width;
    delete canvas[EXPANDO_KEY];
    return true;
  }
  addEventListener(chart, type, listener) {
    this.removeEventListener(chart, type);
    const proxies = chart.$proxies || (chart.$proxies = {});
    const handlers = {
      attach: createAttachObserver,
      detach: createDetachObserver,
      resize: createResizeObserver
    };
    const handler = handlers[type] || createProxyAndListen;
    proxies[type] = handler(chart, type, listener);
  }
  removeEventListener(chart, type) {
    const proxies = chart.$proxies || (chart.$proxies = {});
    const proxy = proxies[type];
    if (!proxy) {
      return;
    }
    const handlers = {
      attach: releaseObserver,
      detach: releaseObserver,
      resize: releaseObserver
    };
    const handler = handlers[type] || removeListener;
    handler(chart, type, proxy);
    proxies[type] = void 0;
  }
  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }
  getMaximumSize(canvas, width, height, aspectRatio) {
    return getMaximumSize(canvas, width, height, aspectRatio);
  }
  isAttached(canvas) {
    const container = canvas && _getParentNode(canvas);
    return !!(container && container.isConnected);
  }
}
function _detectPlatform(canvas) {
  if (!_isDomSupported() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) {
    return BasicPlatform;
  }
  return DomPlatform;
}
let Element$1 = (_a = class {
  constructor() {
    __publicField(this, "x");
    __publicField(this, "y");
    __publicField(this, "active", false);
    __publicField(this, "options");
    __publicField(this, "$animations");
  }
  tooltipPosition(useFinalPosition) {
    const { x: x2, y: y3 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y3
    };
  }
  hasValue() {
    return isNumber(this.x) && isNumber(this.y);
  }
  getProps(props, final) {
    const anims = this.$animations;
    if (!final || !anims) {
      return this;
    }
    const ret = {};
    props.forEach((prop) => {
      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
    });
    return ret;
  }
}, __publicField(_a, "defaults", {}), __publicField(_a, "defaultRoutes"), _a);
function autoSkip(scale, ticks) {
  const tickOpts = scale.options.ticks;
  const determinedMaxTicks = determineMaxTicks(scale);
  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  const numMajorIndices = majorIndices.length;
  const first = majorIndices[0];
  const last = majorIndices[numMajorIndices - 1];
  const newTicks = [];
  if (numMajorIndices > ticksLimit) {
    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
    return newTicks;
  }
  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
  if (numMajorIndices > 0) {
    let i2, ilen;
    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    for (i2 = 0, ilen = numMajorIndices - 1; i2 < ilen; i2++) {
      skip(ticks, newTicks, spacing, majorIndices[i2], majorIndices[i2 + 1]);
    }
    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    return newTicks;
  }
  skip(ticks, newTicks, spacing);
  return newTicks;
}
function determineMaxTicks(scale) {
  const offset = scale.options.offset;
  const tickLength = scale._tickSize();
  const maxScale = scale._length / tickLength + (offset ? 0 : 1);
  const maxChart = scale._maxLength / tickLength;
  return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
  const evenMajorSpacing = getEvenSpacing(majorIndices);
  const spacing = ticks.length / ticksLimit;
  if (!evenMajorSpacing) {
    return Math.max(spacing, 1);
  }
  const factors = _factorize(evenMajorSpacing);
  for (let i2 = 0, ilen = factors.length - 1; i2 < ilen; i2++) {
    const factor = factors[i2];
    if (factor > spacing) {
      return factor;
    }
  }
  return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
  const result = [];
  let i2, ilen;
  for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
    if (ticks[i2].major) {
      result.push(i2);
    }
  }
  return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
  let count = 0;
  let next2 = majorIndices[0];
  let i2;
  spacing = Math.ceil(spacing);
  for (i2 = 0; i2 < ticks.length; i2++) {
    if (i2 === next2) {
      newTicks.push(ticks[i2]);
      count++;
      next2 = majorIndices[count * spacing];
    }
  }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
  const start = valueOrDefault(majorStart, 0);
  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
  let count = 0;
  let length, i2, next2;
  spacing = Math.ceil(spacing);
  if (majorEnd) {
    length = majorEnd - majorStart;
    spacing = length / Math.floor(length / spacing);
  }
  next2 = start;
  while (next2 < 0) {
    count++;
    next2 = Math.round(start + count * spacing);
  }
  for (i2 = Math.max(start, 0); i2 < end; i2++) {
    if (i2 === next2) {
      newTicks.push(ticks[i2]);
      count++;
      next2 = Math.round(start + count * spacing);
    }
  }
}
function getEvenSpacing(arr) {
  const len = arr.length;
  let i2, diff;
  if (len < 2) {
    return false;
  }
  for (diff = arr[0], i2 = 1; i2 < len; ++i2) {
    if (arr[i2] - arr[i2 - 1] !== diff) {
      return false;
    }
  }
  return diff;
}
const reverseAlign = (align) => align === "left" ? "right" : align === "right" ? "left" : align;
const offsetFromEdge = (scale, edge, offset) => edge === "top" || edge === "left" ? scale[edge] + offset : scale[edge] - offset;
const getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);
function sample(arr, numItems) {
  const result = [];
  const increment = arr.length / numItems;
  const len = arr.length;
  let i2 = 0;
  for (; i2 < len; i2 += increment) {
    result.push(arr[Math.floor(i2)]);
  }
  return result;
}
function getPixelForGridLine(scale, index2, offsetGridLines) {
  const length = scale.ticks.length;
  const validIndex2 = Math.min(index2, length - 1);
  const start = scale._startPixel;
  const end = scale._endPixel;
  const epsilon = 1e-6;
  let lineValue = scale.getPixelForTick(validIndex2);
  let offset;
  if (offsetGridLines) {
    if (length === 1) {
      offset = Math.max(lineValue - start, end - lineValue);
    } else if (index2 === 0) {
      offset = (scale.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset = (lineValue - scale.getPixelForTick(validIndex2 - 1)) / 2;
    }
    lineValue += validIndex2 < index2 ? offset : -offset;
    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }
  return lineValue;
}
function garbageCollect(caches, length) {
  each(caches, (cache) => {
    const gc = cache.gc;
    const gcLen = gc.length / 2;
    let i2;
    if (gcLen > length) {
      for (i2 = 0; i2 < gcLen; ++i2) {
        delete cache.data[gc[i2]];
      }
      gc.splice(0, gcLen);
    }
  });
}
function getTickMarkLength(options) {
  return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
  if (!options.display) {
    return 0;
  }
  const font = toFont(options.font, fallback);
  const padding = toPadding(options.padding);
  const lines = isArray(options.text) ? options.text.length : 1;
  return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale) {
  return createContext(parent, {
    scale,
    type: "scale"
  });
}
function createTickContext(parent, index2, tick2) {
  return createContext(parent, {
    tick: tick2,
    index: index2,
    type: "tick"
  });
}
function titleAlign(align, position, reverse) {
  let ret = _toLeftRightCenter(align);
  if (reverse && position !== "right" || !reverse && position === "right") {
    ret = reverseAlign(ret);
  }
  return ret;
}
function titleArgs(scale, offset, position, align) {
  const { top, left, bottom, right, chart } = scale;
  const { chartArea, scales: scales2 } = chart;
  let rotation = 0;
  let maxWidth, titleX, titleY;
  const height = bottom - top;
  const width = right - left;
  if (scale.isHorizontal()) {
    titleX = _alignStartEnd(align, left, right);
    if (isObject(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleY = scales2[positionAxisID].getPixelForValue(value) + height - offset;
    } else if (position === "center") {
      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
    } else {
      titleY = offsetFromEdge(scale, position, offset);
    }
    maxWidth = right - left;
  } else {
    if (isObject(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleX = scales2[positionAxisID].getPixelForValue(value) - width + offset;
    } else if (position === "center") {
      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
    } else {
      titleX = offsetFromEdge(scale, position, offset);
    }
    titleY = _alignStartEnd(align, bottom, top);
    rotation = position === "left" ? -HALF_PI : HALF_PI;
  }
  return {
    titleX,
    titleY,
    maxWidth,
    rotation
  };
}
class Scale extends Element$1 {
  constructor(cfg) {
    super();
    this.id = cfg.id;
    this.type = cfg.type;
    this.options = void 0;
    this.ctx = cfg.ctx;
    this.chart = cfg.chart;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this.maxWidth = void 0;
    this.maxHeight = void 0;
    this.paddingTop = void 0;
    this.paddingBottom = void 0;
    this.paddingLeft = void 0;
    this.paddingRight = void 0;
    this.axis = void 0;
    this.labelRotation = void 0;
    this.min = void 0;
    this.max = void 0;
    this._range = void 0;
    this.ticks = [];
    this._gridLineItems = null;
    this._labelItems = null;
    this._labelSizes = null;
    this._length = 0;
    this._maxLength = 0;
    this._longestTextCache = {};
    this._startPixel = void 0;
    this._endPixel = void 0;
    this._reversePixels = false;
    this._userMax = void 0;
    this._userMin = void 0;
    this._suggestedMax = void 0;
    this._suggestedMin = void 0;
    this._ticksLength = 0;
    this._borderValue = 0;
    this._cache = {};
    this._dataLimitsCached = false;
    this.$context = void 0;
  }
  init(options) {
    this.options = options.setContext(this.getContext());
    this.axis = options.axis;
    this._userMin = this.parse(options.min);
    this._userMax = this.parse(options.max);
    this._suggestedMin = this.parse(options.suggestedMin);
    this._suggestedMax = this.parse(options.suggestedMax);
  }
  parse(raw, index2) {
    return raw;
  }
  getUserBounds() {
    let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
    return {
      min: finiteOrDefault(_userMin, _suggestedMin),
      max: finiteOrDefault(_userMax, _suggestedMax),
      minDefined: isNumberFinite(_userMin),
      maxDefined: isNumberFinite(_userMax)
    };
  }
  getMinMax(canStack) {
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    let range;
    if (minDefined && maxDefined) {
      return {
        min,
        max
      };
    }
    const metas = this.getMatchingVisibleMetas();
    for (let i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
      range = metas[i2].controller.getMinMax(this, canStack);
      if (!minDefined) {
        min = Math.min(min, range.min);
      }
      if (!maxDefined) {
        max = Math.max(max, range.max);
      }
    }
    min = maxDefined && min > max ? max : min;
    max = minDefined && min > max ? min : max;
    return {
      min: finiteOrDefault(min, finiteOrDefault(max, min)),
      max: finiteOrDefault(max, finiteOrDefault(min, max))
    };
  }
  getPadding() {
    return {
      left: this.paddingLeft || 0,
      top: this.paddingTop || 0,
      right: this.paddingRight || 0,
      bottom: this.paddingBottom || 0
    };
  }
  getTicks() {
    return this.ticks;
  }
  getLabels() {
    const data = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
  }
  getLabelItems(chartArea = this.chart.chartArea) {
    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
    return items;
  }
  beforeLayout() {
    this._cache = {};
    this._dataLimitsCached = false;
  }
  beforeUpdate() {
    callback(this.options.beforeUpdate, [
      this
    ]);
  }
  update(maxWidth, maxHeight, margins) {
    const { beginAtZero, grace, ticks: tickOpts } = this.options;
    const sampleSize = tickOpts.sampleSize;
    this.beforeUpdate();
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, margins);
    this.ticks = null;
    this._labelSizes = null;
    this._gridLineItems = null;
    this._labelItems = null;
    this.beforeSetDimensions();
    this.setDimensions();
    this.afterSetDimensions();
    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
    if (!this._dataLimitsCached) {
      this.beforeDataLimits();
      this.determineDataLimits();
      this.afterDataLimits();
      this._range = _addGrace(this, grace, beginAtZero);
      this._dataLimitsCached = true;
    }
    this.beforeBuildTicks();
    this.ticks = this.buildTicks() || [];
    this.afterBuildTicks();
    const samplingEnabled = sampleSize < this.ticks.length;
    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
    this.configure();
    this.beforeCalculateLabelRotation();
    this.calculateLabelRotation();
    this.afterCalculateLabelRotation();
    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
      this.ticks = autoSkip(this, this.ticks);
      this._labelSizes = null;
      this.afterAutoSkip();
    }
    if (samplingEnabled) {
      this._convertTicksToLabels(this.ticks);
    }
    this.beforeFit();
    this.fit();
    this.afterFit();
    this.afterUpdate();
  }
  configure() {
    let reversePixels = this.options.reverse;
    let startPixel, endPixel;
    if (this.isHorizontal()) {
      startPixel = this.left;
      endPixel = this.right;
    } else {
      startPixel = this.top;
      endPixel = this.bottom;
      reversePixels = !reversePixels;
    }
    this._startPixel = startPixel;
    this._endPixel = endPixel;
    this._reversePixels = reversePixels;
    this._length = endPixel - startPixel;
    this._alignToPixels = this.options.alignToPixels;
  }
  afterUpdate() {
    callback(this.options.afterUpdate, [
      this
    ]);
  }
  beforeSetDimensions() {
    callback(this.options.beforeSetDimensions, [
      this
    ]);
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = 0;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = 0;
      this.bottom = this.height;
    }
    this.paddingLeft = 0;
    this.paddingTop = 0;
    this.paddingRight = 0;
    this.paddingBottom = 0;
  }
  afterSetDimensions() {
    callback(this.options.afterSetDimensions, [
      this
    ]);
  }
  _callHooks(name) {
    this.chart.notifyPlugins(name, this.getContext());
    callback(this.options[name], [
      this
    ]);
  }
  beforeDataLimits() {
    this._callHooks("beforeDataLimits");
  }
  determineDataLimits() {
  }
  afterDataLimits() {
    this._callHooks("afterDataLimits");
  }
  beforeBuildTicks() {
    this._callHooks("beforeBuildTicks");
  }
  buildTicks() {
    return [];
  }
  afterBuildTicks() {
    this._callHooks("afterBuildTicks");
  }
  beforeTickToLabelConversion() {
    callback(this.options.beforeTickToLabelConversion, [
      this
    ]);
  }
  generateTickLabels(ticks) {
    const tickOpts = this.options.ticks;
    let i2, ilen, tick2;
    for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
      tick2 = ticks[i2];
      tick2.label = callback(tickOpts.callback, [
        tick2.value,
        i2,
        ticks
      ], this);
    }
  }
  afterTickToLabelConversion() {
    callback(this.options.afterTickToLabelConversion, [
      this
    ]);
  }
  beforeCalculateLabelRotation() {
    callback(this.options.beforeCalculateLabelRotation, [
      this
    ]);
  }
  calculateLabelRotation() {
    const options = this.options;
    const tickOpts = options.ticks;
    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
    const minRotation = tickOpts.minRotation || 0;
    const maxRotation = tickOpts.maxRotation;
    let labelRotation = minRotation;
    let tickWidth, maxHeight, maxLabelDiagonal;
    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
      this.labelRotation = minRotation;
      return;
    }
    const labelSizes = this._getLabelSizes();
    const maxLabelWidth = labelSizes.widest.width;
    const maxLabelHeight = labelSizes.highest.height;
    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
    if (maxLabelWidth + 6 > tickWidth) {
      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    }
    this.labelRotation = labelRotation;
  }
  afterCalculateLabelRotation() {
    callback(this.options.afterCalculateLabelRotation, [
      this
    ]);
  }
  afterAutoSkip() {
  }
  beforeFit() {
    callback(this.options.beforeFit, [
      this
    ]);
  }
  fit() {
    const minSize = {
      width: 0,
      height: 0
    };
    const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
    const display = this._isVisible();
    const isHorizontal = this.isHorizontal();
    if (display) {
      const titleHeight = getTitleHeight(titleOpts, chart.options.font);
      if (isHorizontal) {
        minSize.width = this.maxWidth;
        minSize.height = getTickMarkLength(gridOpts) + titleHeight;
      } else {
        minSize.height = this.maxHeight;
        minSize.width = getTickMarkLength(gridOpts) + titleHeight;
      }
      if (tickOpts.display && this.ticks.length) {
        const { first, last, widest, highest } = this._getLabelSizes();
        const tickPadding = tickOpts.padding * 2;
        const angleRadians = toRadians(this.labelRotation);
        const cos = Math.cos(angleRadians);
        const sin = Math.sin(angleRadians);
        if (isHorizontal) {
          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
        } else {
          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
        }
        this._calculatePadding(first, last, sin, cos);
      }
    }
    this._handleMargins();
    if (isHorizontal) {
      this.width = this._length = chart.width - this._margins.left - this._margins.right;
      this.height = minSize.height;
    } else {
      this.width = minSize.width;
      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
    }
  }
  _calculatePadding(first, last, sin, cos) {
    const { ticks: { align, padding }, position } = this.options;
    const isRotated = this.labelRotation !== 0;
    const labelsBelowTicks = position !== "top" && this.axis === "x";
    if (this.isHorizontal()) {
      const offsetLeft = this.getPixelForTick(0) - this.left;
      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
      let paddingLeft = 0;
      let paddingRight = 0;
      if (isRotated) {
        if (labelsBelowTicks) {
          paddingLeft = cos * first.width;
          paddingRight = sin * last.height;
        } else {
          paddingLeft = sin * first.height;
          paddingRight = cos * last.width;
        }
      } else if (align === "start") {
        paddingRight = last.width;
      } else if (align === "end") {
        paddingLeft = first.width;
      } else if (align !== "inner") {
        paddingLeft = first.width / 2;
        paddingRight = last.width / 2;
      }
      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
    } else {
      let paddingTop = last.height / 2;
      let paddingBottom = first.height / 2;
      if (align === "start") {
        paddingTop = 0;
        paddingBottom = first.height;
      } else if (align === "end") {
        paddingTop = last.height;
        paddingBottom = 0;
      }
      this.paddingTop = paddingTop + padding;
      this.paddingBottom = paddingBottom + padding;
    }
  }
  _handleMargins() {
    if (this._margins) {
      this._margins.left = Math.max(this.paddingLeft, this._margins.left);
      this._margins.top = Math.max(this.paddingTop, this._margins.top);
      this._margins.right = Math.max(this.paddingRight, this._margins.right);
      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
    }
  }
  afterFit() {
    callback(this.options.afterFit, [
      this
    ]);
  }
  isHorizontal() {
    const { axis, position } = this.options;
    return position === "top" || position === "bottom" || axis === "x";
  }
  isFullSize() {
    return this.options.fullSize;
  }
  _convertTicksToLabels(ticks) {
    this.beforeTickToLabelConversion();
    this.generateTickLabels(ticks);
    let i2, ilen;
    for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
      if (isNullOrUndef(ticks[i2].label)) {
        ticks.splice(i2, 1);
        ilen--;
        i2--;
      }
    }
    this.afterTickToLabelConversion();
  }
  _getLabelSizes() {
    let labelSizes = this._labelSizes;
    if (!labelSizes) {
      const sampleSize = this.options.ticks.sampleSize;
      let ticks = this.ticks;
      if (sampleSize < ticks.length) {
        ticks = sample(ticks, sampleSize);
      }
      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
    }
    return labelSizes;
  }
  _computeLabelSizes(ticks, length, maxTicksLimit) {
    const { ctx, _longestTextCache: caches } = this;
    const widths = [];
    const heights = [];
    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
    let widestLabelSize = 0;
    let highestLabelSize = 0;
    let i2, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
    for (i2 = 0; i2 < length; i2 += increment) {
      label = ticks[i2].label;
      tickFont = this._resolveTickFontOptions(i2);
      ctx.font = fontString = tickFont.string;
      cache = caches[fontString] = caches[fontString] || {
        data: {},
        gc: []
      };
      lineHeight = tickFont.lineHeight;
      width = height = 0;
      if (!isNullOrUndef(label) && !isArray(label)) {
        width = _measureText(ctx, cache.data, cache.gc, width, label);
        height = lineHeight;
      } else if (isArray(label)) {
        for (j = 0, jlen = label.length; j < jlen; ++j) {
          nestedLabel = label[j];
          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
            height += lineHeight;
          }
        }
      }
      widths.push(width);
      heights.push(height);
      widestLabelSize = Math.max(width, widestLabelSize);
      highestLabelSize = Math.max(height, highestLabelSize);
    }
    garbageCollect(caches, length);
    const widest = widths.indexOf(widestLabelSize);
    const highest = heights.indexOf(highestLabelSize);
    const valueAt = (idx) => ({
      width: widths[idx] || 0,
      height: heights[idx] || 0
    });
    return {
      first: valueAt(0),
      last: valueAt(length - 1),
      widest: valueAt(widest),
      highest: valueAt(highest),
      widths,
      heights
    };
  }
  getLabelForValue(value) {
    return value;
  }
  getPixelForValue(value, index2) {
    return NaN;
  }
  getValueForPixel(pixel) {
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getPixelForDecimal(decimal) {
    if (this._reversePixels) {
      decimal = 1 - decimal;
    }
    const pixel = this._startPixel + decimal * this._length;
    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
  }
  getDecimalForPixel(pixel) {
    const decimal = (pixel - this._startPixel) / this._length;
    return this._reversePixels ? 1 - decimal : decimal;
  }
  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }
  getBaseValue() {
    const { min, max } = this;
    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
  }
  getContext(index2) {
    const ticks = this.ticks || [];
    if (index2 >= 0 && index2 < ticks.length) {
      const tick2 = ticks[index2];
      return tick2.$context || (tick2.$context = createTickContext(this.getContext(), index2, tick2));
    }
    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
  }
  _tickSize() {
    const optionTicks = this.options.ticks;
    const rot = toRadians(this.labelRotation);
    const cos = Math.abs(Math.cos(rot));
    const sin = Math.abs(Math.sin(rot));
    const labelSizes = this._getLabelSizes();
    const padding = optionTicks.autoSkipPadding || 0;
    const w2 = labelSizes ? labelSizes.widest.width + padding : 0;
    const h3 = labelSizes ? labelSizes.highest.height + padding : 0;
    return this.isHorizontal() ? h3 * cos > w2 * sin ? w2 / cos : h3 / sin : h3 * sin < w2 * cos ? h3 / cos : w2 / sin;
  }
  _isVisible() {
    const display = this.options.display;
    if (display !== "auto") {
      return !!display;
    }
    return this.getMatchingVisibleMetas().length > 0;
  }
  _computeGridLineItems(chartArea) {
    const axis = this.axis;
    const chart = this.chart;
    const options = this.options;
    const { grid, position, border } = options;
    const offset = grid.offset;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const ticksLength = ticks.length + (offset ? 1 : 0);
    const tl = getTickMarkLength(grid);
    const items = [];
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = borderOpts.display ? borderOpts.width : 0;
    const axisHalfWidth = axisWidth / 2;
    const alignBorderValue = function(pixel) {
      return _alignPixel(chart, pixel, axisWidth);
    };
    let borderValue, i2, lineValue, alignedLineValue;
    let tx1, ty1, tx2, ty2, x1, y1, x2, y22;
    if (position === "top") {
      borderValue = alignBorderValue(this.bottom);
      ty1 = this.bottom - tl;
      ty2 = borderValue - axisHalfWidth;
      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
      y22 = chartArea.bottom;
    } else if (position === "bottom") {
      borderValue = alignBorderValue(this.top);
      y1 = chartArea.top;
      y22 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
      ty1 = borderValue + axisHalfWidth;
      ty2 = this.top + tl;
    } else if (position === "left") {
      borderValue = alignBorderValue(this.right);
      tx1 = this.right - tl;
      tx2 = borderValue - axisHalfWidth;
      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
      x2 = chartArea.right;
    } else if (position === "right") {
      borderValue = alignBorderValue(this.left);
      x1 = chartArea.left;
      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
      tx1 = borderValue + axisHalfWidth;
      tx2 = this.left + tl;
    } else if (axis === "x") {
      if (position === "center") {
        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      y1 = chartArea.top;
      y22 = chartArea.bottom;
      ty1 = borderValue + axisHalfWidth;
      ty2 = ty1 + tl;
    } else if (axis === "y") {
      if (position === "center") {
        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      tx1 = borderValue - axisHalfWidth;
      tx2 = tx1 - tl;
      x1 = chartArea.left;
      x2 = chartArea.right;
    }
    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
    const step = Math.max(1, Math.ceil(ticksLength / limit));
    for (i2 = 0; i2 < ticksLength; i2 += step) {
      const context = this.getContext(i2);
      const optsAtIndex = grid.setContext(context);
      const optsAtIndexBorder = border.setContext(context);
      const lineWidth = optsAtIndex.lineWidth;
      const lineColor = optsAtIndex.color;
      const borderDash = optsAtIndexBorder.dash || [];
      const borderDashOffset = optsAtIndexBorder.dashOffset;
      const tickWidth = optsAtIndex.tickWidth;
      const tickColor = optsAtIndex.tickColor;
      const tickBorderDash = optsAtIndex.tickBorderDash || [];
      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
      lineValue = getPixelForGridLine(this, i2, offset);
      if (lineValue === void 0) {
        continue;
      }
      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
      if (isHorizontal) {
        tx1 = tx2 = x1 = x2 = alignedLineValue;
      } else {
        ty1 = ty2 = y1 = y22 = alignedLineValue;
      }
      items.push({
        tx1,
        ty1,
        tx2,
        ty2,
        x1,
        y1,
        x2,
        y2: y22,
        width: lineWidth,
        color: lineColor,
        borderDash,
        borderDashOffset,
        tickWidth,
        tickColor,
        tickBorderDash,
        tickBorderDashOffset
      });
    }
    this._ticksLength = ticksLength;
    this._borderValue = borderValue;
    return items;
  }
  _computeLabelItems(chartArea) {
    const axis = this.axis;
    const options = this.options;
    const { position, ticks: optionTicks } = options;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const { align, crossAlign, padding, mirror } = optionTicks;
    const tl = getTickMarkLength(options.grid);
    const tickAndPadding = tl + padding;
    const hTickAndPadding = mirror ? -padding : tickAndPadding;
    const rotation = -toRadians(this.labelRotation);
    const items = [];
    let i2, ilen, tick2, label, x2, y3, textAlign, pixel, font, lineHeight, lineCount, textOffset;
    let textBaseline = "middle";
    if (position === "top") {
      y3 = this.bottom - hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === "bottom") {
      y3 = this.top + hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === "left") {
      const ret = this._getYAxisLabelAlignment(tl);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (position === "right") {
      const ret = this._getYAxisLabelAlignment(tl);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (axis === "x") {
      if (position === "center") {
        y3 = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        y3 = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
      }
      textAlign = this._getXAxisLabelAlignment();
    } else if (axis === "y") {
      if (position === "center") {
        x2 = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        x2 = this.chart.scales[positionAxisID].getPixelForValue(value);
      }
      textAlign = this._getYAxisLabelAlignment(tl).textAlign;
    }
    if (axis === "y") {
      if (align === "start") {
        textBaseline = "top";
      } else if (align === "end") {
        textBaseline = "bottom";
      }
    }
    const labelSizes = this._getLabelSizes();
    for (i2 = 0, ilen = ticks.length; i2 < ilen; ++i2) {
      tick2 = ticks[i2];
      label = tick2.label;
      const optsAtIndex = optionTicks.setContext(this.getContext(i2));
      pixel = this.getPixelForTick(i2) + optionTicks.labelOffset;
      font = this._resolveTickFontOptions(i2);
      lineHeight = font.lineHeight;
      lineCount = isArray(label) ? label.length : 1;
      const halfCount = lineCount / 2;
      const color2 = optsAtIndex.color;
      const strokeColor = optsAtIndex.textStrokeColor;
      const strokeWidth = optsAtIndex.textStrokeWidth;
      let tickTextAlign = textAlign;
      if (isHorizontal) {
        x2 = pixel;
        if (textAlign === "inner") {
          if (i2 === ilen - 1) {
            tickTextAlign = !this.options.reverse ? "right" : "left";
          } else if (i2 === 0) {
            tickTextAlign = !this.options.reverse ? "left" : "right";
          } else {
            tickTextAlign = "center";
          }
        }
        if (position === "top") {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = -lineCount * lineHeight + lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
          } else {
            textOffset = -labelSizes.highest.height + lineHeight / 2;
          }
        } else {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
          } else {
            textOffset = labelSizes.highest.height - lineCount * lineHeight;
          }
        }
        if (mirror) {
          textOffset *= -1;
        }
        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
          x2 += lineHeight / 2 * Math.sin(rotation);
        }
      } else {
        y3 = pixel;
        textOffset = (1 - lineCount) * lineHeight / 2;
      }
      let backdrop;
      if (optsAtIndex.showLabelBackdrop) {
        const labelPadding = toPadding(optsAtIndex.backdropPadding);
        const height = labelSizes.heights[i2];
        const width = labelSizes.widths[i2];
        let top = textOffset - labelPadding.top;
        let left = 0 - labelPadding.left;
        switch (textBaseline) {
          case "middle":
            top -= height / 2;
            break;
          case "bottom":
            top -= height;
            break;
        }
        switch (textAlign) {
          case "center":
            left -= width / 2;
            break;
          case "right":
            left -= width;
            break;
          case "inner":
            if (i2 === ilen - 1) {
              left -= width;
            } else if (i2 > 0) {
              left -= width / 2;
            }
            break;
        }
        backdrop = {
          left,
          top,
          width: width + labelPadding.width,
          height: height + labelPadding.height,
          color: optsAtIndex.backdropColor
        };
      }
      items.push({
        label,
        font,
        textOffset,
        options: {
          rotation,
          color: color2,
          strokeColor,
          strokeWidth,
          textAlign: tickTextAlign,
          textBaseline,
          translation: [
            x2,
            y3
          ],
          backdrop
        }
      });
    }
    return items;
  }
  _getXAxisLabelAlignment() {
    const { position, ticks } = this.options;
    const rotation = -toRadians(this.labelRotation);
    if (rotation) {
      return position === "top" ? "left" : "right";
    }
    let align = "center";
    if (ticks.align === "start") {
      align = "left";
    } else if (ticks.align === "end") {
      align = "right";
    } else if (ticks.align === "inner") {
      align = "inner";
    }
    return align;
  }
  _getYAxisLabelAlignment(tl) {
    const { position, ticks: { crossAlign, mirror, padding } } = this.options;
    const labelSizes = this._getLabelSizes();
    const tickAndPadding = tl + padding;
    const widest = labelSizes.widest.width;
    let textAlign;
    let x2;
    if (position === "left") {
      if (mirror) {
        x2 = this.right + padding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 += widest;
        }
      } else {
        x2 = this.right - tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 = this.left;
        }
      }
    } else if (position === "right") {
      if (mirror) {
        x2 = this.left + padding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 -= widest;
        }
      } else {
        x2 = this.left + tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 = this.right;
        }
      }
    } else {
      textAlign = "right";
    }
    return {
      textAlign,
      x: x2
    };
  }
  _computeLabelArea() {
    if (this.options.ticks.mirror) {
      return;
    }
    const chart = this.chart;
    const position = this.options.position;
    if (position === "left" || position === "right") {
      return {
        top: 0,
        left: this.left,
        bottom: chart.height,
        right: this.right
      };
    }
    if (position === "top" || position === "bottom") {
      return {
        top: this.top,
        left: 0,
        bottom: this.bottom,
        right: chart.width
      };
    }
  }
  drawBackground() {
    const { ctx, options: { backgroundColor }, left, top, width, height } = this;
    if (backgroundColor) {
      ctx.save();
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(left, top, width, height);
      ctx.restore();
    }
  }
  getLineWidthForValue(value) {
    const grid = this.options.grid;
    if (!this._isVisible() || !grid.display) {
      return 0;
    }
    const ticks = this.ticks;
    const index2 = ticks.findIndex((t2) => t2.value === value);
    if (index2 >= 0) {
      const opts = grid.setContext(this.getContext(index2));
      return opts.lineWidth;
    }
    return 0;
  }
  drawGrid(chartArea) {
    const grid = this.options.grid;
    const ctx = this.ctx;
    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
    let i2, ilen;
    const drawLine = (p1, p2, style) => {
      if (!style.width || !style.color) {
        return;
      }
      ctx.save();
      ctx.lineWidth = style.width;
      ctx.strokeStyle = style.color;
      ctx.setLineDash(style.borderDash || []);
      ctx.lineDashOffset = style.borderDashOffset;
      ctx.beginPath();
      ctx.moveTo(p1.x, p1.y);
      ctx.lineTo(p2.x, p2.y);
      ctx.stroke();
      ctx.restore();
    };
    if (grid.display) {
      for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
        const item = items[i2];
        if (grid.drawOnChartArea) {
          drawLine({
            x: item.x1,
            y: item.y1
          }, {
            x: item.x2,
            y: item.y2
          }, item);
        }
        if (grid.drawTicks) {
          drawLine({
            x: item.tx1,
            y: item.ty1
          }, {
            x: item.tx2,
            y: item.ty2
          }, {
            color: item.tickColor,
            width: item.tickWidth,
            borderDash: item.tickBorderDash,
            borderDashOffset: item.tickBorderDashOffset
          });
        }
      }
    }
  }
  drawBorder() {
    const { chart, ctx, options: { border, grid } } = this;
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = border.display ? borderOpts.width : 0;
    if (!axisWidth) {
      return;
    }
    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
    const borderValue = this._borderValue;
    let x1, x2, y1, y22;
    if (this.isHorizontal()) {
      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
      y1 = y22 = borderValue;
    } else {
      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
      y22 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
      x1 = x2 = borderValue;
    }
    ctx.save();
    ctx.lineWidth = borderOpts.width;
    ctx.strokeStyle = borderOpts.color;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y22);
    ctx.stroke();
    ctx.restore();
  }
  drawLabels(chartArea) {
    const optionTicks = this.options.ticks;
    if (!optionTicks.display) {
      return;
    }
    const ctx = this.ctx;
    const area = this._computeLabelArea();
    if (area) {
      clipArea(ctx, area);
    }
    const items = this.getLabelItems(chartArea);
    for (const item of items) {
      const renderTextOptions = item.options;
      const tickFont = item.font;
      const label = item.label;
      const y3 = item.textOffset;
      renderText(ctx, label, 0, y3, tickFont, renderTextOptions);
    }
    if (area) {
      unclipArea(ctx);
    }
  }
  drawTitle() {
    const { ctx, options: { position, title, reverse } } = this;
    if (!title.display) {
      return;
    }
    const font = toFont(title.font);
    const padding = toPadding(title.padding);
    const align = title.align;
    let offset = font.lineHeight / 2;
    if (position === "bottom" || position === "center" || isObject(position)) {
      offset += padding.bottom;
      if (isArray(title.text)) {
        offset += font.lineHeight * (title.text.length - 1);
      }
    } else {
      offset += padding.top;
    }
    const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position, align);
    renderText(ctx, title.text, 0, 0, font, {
      color: title.color,
      maxWidth,
      rotation,
      textAlign: titleAlign(align, position, reverse),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
  draw(chartArea) {
    if (!this._isVisible()) {
      return;
    }
    this.drawBackground();
    this.drawGrid(chartArea);
    this.drawBorder();
    this.drawTitle();
    this.drawLabels(chartArea);
  }
  _layers() {
    const opts = this.options;
    const tz = opts.ticks && opts.ticks.z || 0;
    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
    const bz = valueOrDefault(opts.border && opts.border.z, 0);
    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
      return [
        {
          z: tz,
          draw: (chartArea) => {
            this.draw(chartArea);
          }
        }
      ];
    }
    return [
      {
        z: gz,
        draw: (chartArea) => {
          this.drawBackground();
          this.drawGrid(chartArea);
          this.drawTitle();
        }
      },
      {
        z: bz,
        draw: () => {
          this.drawBorder();
        }
      },
      {
        z: tz,
        draw: (chartArea) => {
          this.drawLabels(chartArea);
        }
      }
    ];
  }
  getMatchingVisibleMetas(type) {
    const metas = this.chart.getSortedVisibleDatasetMetas();
    const axisID = this.axis + "AxisID";
    const result = [];
    let i2, ilen;
    for (i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
      const meta = metas[i2];
      if (meta[axisID] === this.id && (!type || meta.type === type)) {
        result.push(meta);
      }
    }
    return result;
  }
  _resolveTickFontOptions(index2) {
    const opts = this.options.ticks.setContext(this.getContext(index2));
    return toFont(opts.font);
  }
  _maxDigits() {
    const fontSize = this._resolveTickFontOptions(0).lineHeight;
    return (this.isHorizontal() ? this.width : this.height) / fontSize;
  }
}
class TypedRegistry {
  constructor(type, scope, override) {
    this.type = type;
    this.scope = scope;
    this.override = override;
    this.items = /* @__PURE__ */ Object.create(null);
  }
  isForType(type) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
  }
  register(item) {
    const proto = Object.getPrototypeOf(item);
    let parentScope;
    if (isIChartComponent(proto)) {
      parentScope = this.register(proto);
    }
    const items = this.items;
    const id = item.id;
    const scope = this.scope + "." + id;
    if (!id) {
      throw new Error("class does not have id: " + item);
    }
    if (id in items) {
      return scope;
    }
    items[id] = item;
    registerDefaults(item, scope, parentScope);
    if (this.override) {
      defaults.override(item.id, item.overrides);
    }
    return scope;
  }
  get(id) {
    return this.items[id];
  }
  unregister(item) {
    const items = this.items;
    const id = item.id;
    const scope = this.scope;
    if (id in items) {
      delete items[id];
    }
    if (scope && id in defaults[scope]) {
      delete defaults[scope][id];
      if (this.override) {
        delete overrides[id];
      }
    }
  }
}
function registerDefaults(item, scope, parentScope) {
  const itemDefaults = merge(/* @__PURE__ */ Object.create(null), [
    parentScope ? defaults.get(parentScope) : {},
    defaults.get(scope),
    item.defaults
  ]);
  defaults.set(scope, itemDefaults);
  if (item.defaultRoutes) {
    routeDefaults(scope, item.defaultRoutes);
  }
  if (item.descriptors) {
    defaults.describe(scope, item.descriptors);
  }
}
function routeDefaults(scope, routes) {
  Object.keys(routes).forEach((property) => {
    const propertyParts = property.split(".");
    const sourceName = propertyParts.pop();
    const sourceScope = [
      scope
    ].concat(propertyParts).join(".");
    const parts = routes[property].split(".");
    const targetName = parts.pop();
    const targetScope = parts.join(".");
    defaults.route(sourceScope, sourceName, targetScope, targetName);
  });
}
function isIChartComponent(proto) {
  return "id" in proto && "defaults" in proto;
}
class Registry {
  constructor() {
    this.controllers = new TypedRegistry(DatasetController, "datasets", true);
    this.elements = new TypedRegistry(Element$1, "elements");
    this.plugins = new TypedRegistry(Object, "plugins");
    this.scales = new TypedRegistry(Scale, "scales");
    this._typedRegistries = [
      this.controllers,
      this.scales,
      this.elements
    ];
  }
  add(...args) {
    this._each("register", args);
  }
  remove(...args) {
    this._each("unregister", args);
  }
  addControllers(...args) {
    this._each("register", args, this.controllers);
  }
  addElements(...args) {
    this._each("register", args, this.elements);
  }
  addPlugins(...args) {
    this._each("register", args, this.plugins);
  }
  addScales(...args) {
    this._each("register", args, this.scales);
  }
  getController(id) {
    return this._get(id, this.controllers, "controller");
  }
  getElement(id) {
    return this._get(id, this.elements, "element");
  }
  getPlugin(id) {
    return this._get(id, this.plugins, "plugin");
  }
  getScale(id) {
    return this._get(id, this.scales, "scale");
  }
  removeControllers(...args) {
    this._each("unregister", args, this.controllers);
  }
  removeElements(...args) {
    this._each("unregister", args, this.elements);
  }
  removePlugins(...args) {
    this._each("unregister", args, this.plugins);
  }
  removeScales(...args) {
    this._each("unregister", args, this.scales);
  }
  _each(method, args, typedRegistry) {
    [
      ...args
    ].forEach((arg) => {
      const reg = typedRegistry || this._getRegistryForType(arg);
      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
        this._exec(method, reg, arg);
      } else {
        each(arg, (item) => {
          const itemReg = typedRegistry || this._getRegistryForType(item);
          this._exec(method, itemReg, item);
        });
      }
    });
  }
  _exec(method, registry2, component) {
    const camelMethod = _capitalize(method);
    callback(component["before" + camelMethod], [], component);
    registry2[method](component);
    callback(component["after" + camelMethod], [], component);
  }
  _getRegistryForType(type) {
    for (let i2 = 0; i2 < this._typedRegistries.length; i2++) {
      const reg = this._typedRegistries[i2];
      if (reg.isForType(type)) {
        return reg;
      }
    }
    return this.plugins;
  }
  _get(id, typedRegistry, type) {
    const item = typedRegistry.get(id);
    if (item === void 0) {
      throw new Error('"' + id + '" is not a registered ' + type + ".");
    }
    return item;
  }
}
var registry = /* @__PURE__ */ new Registry();
class PluginService {
  constructor() {
    this._init = [];
  }
  notify(chart, hook, args, filter) {
    if (hook === "beforeInit") {
      this._init = this._createDescriptors(chart, true);
      this._notify(this._init, chart, "install");
    }
    const descriptors2 = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
    const result = this._notify(descriptors2, chart, hook, args);
    if (hook === "afterDestroy") {
      this._notify(descriptors2, chart, "stop");
      this._notify(this._init, chart, "uninstall");
    }
    return result;
  }
  _notify(descriptors2, chart, hook, args) {
    args = args || {};
    for (const descriptor of descriptors2) {
      const plugin = descriptor.plugin;
      const method = plugin[hook];
      const params = [
        chart,
        args,
        descriptor.options
      ];
      if (callback(method, params, plugin) === false && args.cancelable) {
        return false;
      }
    }
    return true;
  }
  invalidate() {
    if (!isNullOrUndef(this._cache)) {
      this._oldCache = this._cache;
      this._cache = void 0;
    }
  }
  _descriptors(chart) {
    if (this._cache) {
      return this._cache;
    }
    const descriptors2 = this._cache = this._createDescriptors(chart);
    this._notifyStateChanges(chart);
    return descriptors2;
  }
  _createDescriptors(chart, all) {
    const config = chart && chart.config;
    const options = valueOrDefault(config.options && config.options.plugins, {});
    const plugins2 = allPlugins(config);
    return options === false && !all ? [] : createDescriptors(chart, plugins2, options, all);
  }
  _notifyStateChanges(chart) {
    const previousDescriptors = this._oldCache || [];
    const descriptors2 = this._cache;
    const diff = (a3, b2) => a3.filter((x2) => !b2.some((y3) => x2.plugin.id === y3.plugin.id));
    this._notify(diff(previousDescriptors, descriptors2), chart, "stop");
    this._notify(diff(descriptors2, previousDescriptors), chart, "start");
  }
}
function allPlugins(config) {
  const localIds = {};
  const plugins2 = [];
  const keys = Object.keys(registry.plugins.items);
  for (let i2 = 0; i2 < keys.length; i2++) {
    plugins2.push(registry.getPlugin(keys[i2]));
  }
  const local = config.plugins || [];
  for (let i2 = 0; i2 < local.length; i2++) {
    const plugin = local[i2];
    if (plugins2.indexOf(plugin) === -1) {
      plugins2.push(plugin);
      localIds[plugin.id] = true;
    }
  }
  return {
    plugins: plugins2,
    localIds
  };
}
function getOpts(options, all) {
  if (!all && options === false) {
    return null;
  }
  if (options === true) {
    return {};
  }
  return options;
}
function createDescriptors(chart, { plugins: plugins2, localIds }, options, all) {
  const result = [];
  const context = chart.getContext();
  for (const plugin of plugins2) {
    const id = plugin.id;
    const opts = getOpts(options[id], all);
    if (opts === null) {
      continue;
    }
    result.push({
      plugin,
      options: pluginOpts(chart.config, {
        plugin,
        local: localIds[id]
      }, opts, context)
    });
  }
  return result;
}
function pluginOpts(config, { plugin, local }, opts, context) {
  const keys = config.pluginScopeKeys(plugin);
  const scopes2 = config.getOptionScopes(opts, keys);
  if (local && plugin.defaults) {
    scopes2.push(plugin.defaults);
  }
  return config.createResolver(scopes2, context, [
    ""
  ], {
    scriptable: false,
    indexable: false,
    allKeys: true
  });
}
function getIndexAxis(type, options) {
  const datasetDefaults = defaults.datasets[type] || {};
  const datasetOptions = (options.datasets || {})[type] || {};
  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
}
function getAxisFromDefaultScaleID(id, indexAxis) {
  let axis = id;
  if (id === "_index_") {
    axis = indexAxis;
  } else if (id === "_value_") {
    axis = indexAxis === "x" ? "y" : "x";
  }
  return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
  return axis === indexAxis ? "_index_" : "_value_";
}
function idMatchesAxis(id) {
  if (id === "x" || id === "y" || id === "r") {
    return id;
  }
}
function axisFromPosition(position) {
  if (position === "top" || position === "bottom") {
    return "x";
  }
  if (position === "left" || position === "right") {
    return "y";
  }
}
function determineAxis(id, ...scaleOptions) {
  if (idMatchesAxis(id)) {
    return id;
  }
  for (const opts of scaleOptions) {
    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());
    if (axis) {
      return axis;
    }
  }
  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);
}
function getAxisFromDataset(id, axis, dataset) {
  if (dataset[axis + "AxisID"] === id) {
    return {
      axis
    };
  }
}
function retrieveAxisFromDatasets(id, config) {
  if (config.data && config.data.datasets) {
    const boundDs = config.data.datasets.filter((d3) => d3.xAxisID === id || d3.yAxisID === id);
    if (boundDs.length) {
      return getAxisFromDataset(id, "x", boundDs[0]) || getAxisFromDataset(id, "y", boundDs[0]);
    }
  }
  return {};
}
function mergeScaleConfig(config, options) {
  const chartDefaults = overrides[config.type] || {
    scales: {}
  };
  const configScales = options.scales || {};
  const chartIndexAxis = getIndexAxis(config.type, options);
  const scales2 = /* @__PURE__ */ Object.create(null);
  Object.keys(configScales).forEach((id) => {
    const scaleConf = configScales[id];
    if (!isObject(scaleConf)) {
      return console.error(`Invalid scale configuration for scale: ${id}`);
    }
    if (scaleConf._proxy) {
      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
    }
    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);
    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
    const defaultScaleOptions = chartDefaults.scales || {};
    scales2[id] = mergeIf(/* @__PURE__ */ Object.create(null), [
      {
        axis
      },
      scaleConf,
      defaultScaleOptions[axis],
      defaultScaleOptions[defaultId]
    ]);
  });
  config.data.datasets.forEach((dataset) => {
    const type = dataset.type || config.type;
    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
    const datasetDefaults = overrides[type] || {};
    const defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach((defaultID) => {
      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
      const id = dataset[axis + "AxisID"] || axis;
      scales2[id] = scales2[id] || /* @__PURE__ */ Object.create(null);
      mergeIf(scales2[id], [
        {
          axis
        },
        configScales[id],
        defaultScaleOptions[defaultID]
      ]);
    });
  });
  Object.keys(scales2).forEach((key) => {
    const scale = scales2[key];
    mergeIf(scale, [
      defaults.scales[scale.type],
      defaults.scale
    ]);
  });
  return scales2;
}
function initOptions(config) {
  const options = config.options || (config.options = {});
  options.plugins = valueOrDefault(options.plugins, {});
  options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
  data = data || {};
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  return data;
}
function initConfig(config) {
  config = config || {};
  config.data = initData(config.data);
  initOptions(config);
  return config;
}
const keyCache = /* @__PURE__ */ new Map();
const keysCached = /* @__PURE__ */ new Set();
function cachedKeys(cacheKey, generate) {
  let keys = keyCache.get(cacheKey);
  if (!keys) {
    keys = generate();
    keyCache.set(cacheKey, keys);
    keysCached.add(keys);
  }
  return keys;
}
const addIfFound = (set2, obj, key) => {
  const opts = resolveObjectKey(obj, key);
  if (opts !== void 0) {
    set2.add(opts);
  }
};
class Config {
  constructor(config) {
    this._config = initConfig(config);
    this._scopeCache = /* @__PURE__ */ new Map();
    this._resolverCache = /* @__PURE__ */ new Map();
  }
  get platform() {
    return this._config.platform;
  }
  get type() {
    return this._config.type;
  }
  set type(type) {
    this._config.type = type;
  }
  get data() {
    return this._config.data;
  }
  set data(data) {
    this._config.data = initData(data);
  }
  get options() {
    return this._config.options;
  }
  set options(options) {
    this._config.options = options;
  }
  get plugins() {
    return this._config.plugins;
  }
  update() {
    const config = this._config;
    this.clearCache();
    initOptions(config);
  }
  clearCache() {
    this._scopeCache.clear();
    this._resolverCache.clear();
  }
  datasetScopeKeys(datasetType) {
    return cachedKeys(datasetType, () => [
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetAnimationScopeKeys(datasetType, transition) {
    return cachedKeys(`${datasetType}.transition.${transition}`, () => [
      [
        `datasets.${datasetType}.transitions.${transition}`,
        `transitions.${transition}`
      ],
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetElementScopeKeys(datasetType, elementType) {
    return cachedKeys(`${datasetType}-${elementType}`, () => [
      [
        `datasets.${datasetType}.elements.${elementType}`,
        `datasets.${datasetType}`,
        `elements.${elementType}`,
        ""
      ]
    ]);
  }
  pluginScopeKeys(plugin) {
    const id = plugin.id;
    const type = this.type;
    return cachedKeys(`${type}-plugin-${id}`, () => [
      [
        `plugins.${id}`,
        ...plugin.additionalOptionScopes || []
      ]
    ]);
  }
  _cachedScopes(mainScope, resetCache) {
    const _scopeCache = this._scopeCache;
    let cache = _scopeCache.get(mainScope);
    if (!cache || resetCache) {
      cache = /* @__PURE__ */ new Map();
      _scopeCache.set(mainScope, cache);
    }
    return cache;
  }
  getOptionScopes(mainScope, keyLists, resetCache) {
    const { options, type } = this;
    const cache = this._cachedScopes(mainScope, resetCache);
    const cached = cache.get(keyLists);
    if (cached) {
      return cached;
    }
    const scopes2 = /* @__PURE__ */ new Set();
    keyLists.forEach((keys) => {
      if (mainScope) {
        scopes2.add(mainScope);
        keys.forEach((key) => addIfFound(scopes2, mainScope, key));
      }
      keys.forEach((key) => addIfFound(scopes2, options, key));
      keys.forEach((key) => addIfFound(scopes2, overrides[type] || {}, key));
      keys.forEach((key) => addIfFound(scopes2, defaults, key));
      keys.forEach((key) => addIfFound(scopes2, descriptors, key));
    });
    const array = Array.from(scopes2);
    if (array.length === 0) {
      array.push(/* @__PURE__ */ Object.create(null));
    }
    if (keysCached.has(keyLists)) {
      cache.set(keyLists, array);
    }
    return array;
  }
  chartOptionScopes() {
    const { options, type } = this;
    return [
      options,
      overrides[type] || {},
      defaults.datasets[type] || {},
      {
        type
      },
      defaults,
      descriptors
    ];
  }
  resolveNamedOptions(scopes2, names2, context, prefixes = [
    ""
  ]) {
    const result = {
      $shared: true
    };
    const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes2, prefixes);
    let options = resolver;
    if (needContext(resolver, names2)) {
      result.$shared = false;
      context = isFunction(context) ? context() : context;
      const subResolver = this.createResolver(scopes2, context, subPrefixes);
      options = _attachContext(resolver, context, subResolver);
    }
    for (const prop of names2) {
      result[prop] = options[prop];
    }
    return result;
  }
  createResolver(scopes2, context, prefixes = [
    ""
  ], descriptorDefaults) {
    const { resolver } = getResolver(this._resolverCache, scopes2, prefixes);
    return isObject(context) ? _attachContext(resolver, context, void 0, descriptorDefaults) : resolver;
  }
}
function getResolver(resolverCache, scopes2, prefixes) {
  let cache = resolverCache.get(scopes2);
  if (!cache) {
    cache = /* @__PURE__ */ new Map();
    resolverCache.set(scopes2, cache);
  }
  const cacheKey = prefixes.join();
  let cached = cache.get(cacheKey);
  if (!cached) {
    const resolver = _createResolver(scopes2, prefixes);
    cached = {
      resolver,
      subPrefixes: prefixes.filter((p) => !p.toLowerCase().includes("hover"))
    };
    cache.set(cacheKey, cached);
  }
  return cached;
}
const hasFunction = (value) => isObject(value) && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));
function needContext(proxy, names2) {
  const { isScriptable, isIndexable } = _descriptors(proxy);
  for (const prop of names2) {
    const scriptable = isScriptable(prop);
    const indexable = isIndexable(prop);
    const value = (indexable || scriptable) && proxy[prop];
    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {
      return true;
    }
  }
  return false;
}
var version = "4.4.9";
const KNOWN_POSITIONS = [
  "top",
  "bottom",
  "left",
  "right",
  "chartArea"
];
function positionIsHorizontal(position, axis) {
  return position === "top" || position === "bottom" || KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
}
function compare2Level(l1, l2) {
  return function(a3, b2) {
    return a3[l1] === b2[l1] ? a3[l2] - b2[l2] : a3[l1] - b2[l1];
  };
}
function onAnimationsComplete(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  chart.notifyPlugins("afterRender");
  callback(animationOptions && animationOptions.onComplete, [
    context
  ], chart);
}
function onAnimationProgress(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  callback(animationOptions && animationOptions.onProgress, [
    context
  ], chart);
}
function getCanvas(item) {
  if (_isDomSupported() && typeof item === "string") {
    item = document.getElementById(item);
  } else if (item && item.length) {
    item = item[0];
  }
  if (item && item.canvas) {
    item = item.canvas;
  }
  return item;
}
const instances = {};
const getChart = (key) => {
  const canvas = getCanvas(key);
  return Object.values(instances).filter((c2) => c2.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
  const keys = Object.keys(obj);
  for (const key of keys) {
    const intKey = +key;
    if (intKey >= start) {
      const value = obj[key];
      delete obj[key];
      if (move > 0 || intKey > start) {
        obj[intKey + move] = value;
      }
    }
  }
}
function determineLastEvent(e2, lastEvent, inChartArea, isClick) {
  if (!inChartArea || e2.type === "mouseout") {
    return null;
  }
  if (isClick) {
    return lastEvent;
  }
  return e2;
}
let Chart$1 = (_b = class {
  static register(...items) {
    registry.add(...items);
    invalidatePlugins();
  }
  static unregister(...items) {
    registry.remove(...items);
    invalidatePlugins();
  }
  constructor(item, userConfig) {
    const config = this.config = new Config(userConfig);
    const initialCanvas = getCanvas(item);
    const existingChart = getChart(initialCanvas);
    if (existingChart) {
      throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "' must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused.");
    }
    const options = config.createResolver(config.chartOptionScopes(), this.getContext());
    this.platform = new (config.platform || _detectPlatform(initialCanvas))();
    this.platform.updateConfig(config);
    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
    const canvas = context && context.canvas;
    const height = canvas && canvas.height;
    const width = canvas && canvas.width;
    this.id = uid();
    this.ctx = context;
    this.canvas = canvas;
    this.width = width;
    this.height = height;
    this._options = options;
    this._aspectRatio = this.aspectRatio;
    this._layers = [];
    this._metasets = [];
    this._stacks = void 0;
    this.boxes = [];
    this.currentDevicePixelRatio = void 0;
    this.chartArea = void 0;
    this._active = [];
    this._lastEvent = void 0;
    this._listeners = {};
    this._responsiveListeners = void 0;
    this._sortedMetasets = [];
    this.scales = {};
    this._plugins = new PluginService();
    this.$proxies = {};
    this._hiddenIndices = {};
    this.attached = false;
    this._animationsDisabled = void 0;
    this.$context = void 0;
    this._doResize = debounce((mode) => this.update(mode), options.resizeDelay || 0);
    this._dataChanges = [];
    instances[this.id] = this;
    if (!context || !canvas) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
    animator.listen(this, "complete", onAnimationsComplete);
    animator.listen(this, "progress", onAnimationProgress);
    this._initialize();
    if (this.attached) {
      this.update();
    }
  }
  get aspectRatio() {
    const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;
    if (!isNullOrUndef(aspectRatio)) {
      return aspectRatio;
    }
    if (maintainAspectRatio && _aspectRatio) {
      return _aspectRatio;
    }
    return height ? width / height : null;
  }
  get data() {
    return this.config.data;
  }
  set data(data) {
    this.config.data = data;
  }
  get options() {
    return this._options;
  }
  set options(options) {
    this.config.options = options;
  }
  get registry() {
    return registry;
  }
  _initialize() {
    this.notifyPlugins("beforeInit");
    if (this.options.responsive) {
      this.resize();
    } else {
      retinaScale(this, this.options.devicePixelRatio);
    }
    this.bindEvents();
    this.notifyPlugins("afterInit");
    return this;
  }
  clear() {
    clearCanvas(this.canvas, this.ctx);
    return this;
  }
  stop() {
    animator.stop(this);
    return this;
  }
  resize(width, height) {
    if (!animator.running(this)) {
      this._resize(width, height);
    } else {
      this._resizeBeforeDraw = {
        width,
        height
      };
    }
  }
  _resize(width, height) {
    const options = this.options;
    const canvas = this.canvas;
    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
    const mode = this.width ? "resize" : "attach";
    this.width = newSize.width;
    this.height = newSize.height;
    this._aspectRatio = this.aspectRatio;
    if (!retinaScale(this, newRatio, true)) {
      return;
    }
    this.notifyPlugins("resize", {
      size: newSize
    });
    callback(options.onResize, [
      this,
      newSize
    ], this);
    if (this.attached) {
      if (this._doResize(mode)) {
        this.render();
      }
    }
  }
  ensureScalesHaveIDs() {
    const options = this.options;
    const scalesOptions = options.scales || {};
    each(scalesOptions, (axisOptions, axisID) => {
      axisOptions.id = axisID;
    });
  }
  buildOrUpdateScales() {
    const options = this.options;
    const scaleOpts = options.scales;
    const scales2 = this.scales;
    const updated = Object.keys(scales2).reduce((obj, id) => {
      obj[id] = false;
      return obj;
    }, {});
    let items = [];
    if (scaleOpts) {
      items = items.concat(Object.keys(scaleOpts).map((id) => {
        const scaleOptions = scaleOpts[id];
        const axis = determineAxis(id, scaleOptions);
        const isRadial = axis === "r";
        const isHorizontal = axis === "x";
        return {
          options: scaleOptions,
          dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
          dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
        };
      }));
    }
    each(items, (item) => {
      const scaleOptions = item.options;
      const id = scaleOptions.id;
      const axis = determineAxis(id, scaleOptions);
      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
      if (scaleOptions.position === void 0 || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
        scaleOptions.position = item.dposition;
      }
      updated[id] = true;
      let scale = null;
      if (id in scales2 && scales2[id].type === scaleType) {
        scale = scales2[id];
      } else {
        const scaleClass = registry.getScale(scaleType);
        scale = new scaleClass({
          id,
          type: scaleType,
          ctx: this.ctx,
          chart: this
        });
        scales2[scale.id] = scale;
      }
      scale.init(scaleOptions, options);
    });
    each(updated, (hasUpdated, id) => {
      if (!hasUpdated) {
        delete scales2[id];
      }
    });
    each(scales2, (scale) => {
      layouts.configure(this, scale, scale.options);
      layouts.addBox(this, scale);
    });
  }
  _updateMetasets() {
    const metasets = this._metasets;
    const numData = this.data.datasets.length;
    const numMeta = metasets.length;
    metasets.sort((a3, b2) => a3.index - b2.index);
    if (numMeta > numData) {
      for (let i2 = numData; i2 < numMeta; ++i2) {
        this._destroyDatasetMeta(i2);
      }
      metasets.splice(numData, numMeta - numData);
    }
    this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
  }
  _removeUnreferencedMetasets() {
    const { _metasets: metasets, data: { datasets } } = this;
    if (metasets.length > datasets.length) {
      delete this._stacks;
    }
    metasets.forEach((meta, index2) => {
      if (datasets.filter((x2) => x2 === meta._dataset).length === 0) {
        this._destroyDatasetMeta(index2);
      }
    });
  }
  buildOrUpdateControllers() {
    const newControllers = [];
    const datasets = this.data.datasets;
    let i2, ilen;
    this._removeUnreferencedMetasets();
    for (i2 = 0, ilen = datasets.length; i2 < ilen; i2++) {
      const dataset = datasets[i2];
      let meta = this.getDatasetMeta(i2);
      const type = dataset.type || this.config.type;
      if (meta.type && meta.type !== type) {
        this._destroyDatasetMeta(i2);
        meta = this.getDatasetMeta(i2);
      }
      meta.type = type;
      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
      meta.order = dataset.order || 0;
      meta.index = i2;
      meta.label = "" + dataset.label;
      meta.visible = this.isDatasetVisible(i2);
      if (meta.controller) {
        meta.controller.updateIndex(i2);
        meta.controller.linkScales();
      } else {
        const ControllerClass = registry.getController(type);
        const { datasetElementType, dataElementType } = defaults.datasets[type];
        Object.assign(ControllerClass, {
          dataElementType: registry.getElement(dataElementType),
          datasetElementType: datasetElementType && registry.getElement(datasetElementType)
        });
        meta.controller = new ControllerClass(this, i2);
        newControllers.push(meta.controller);
      }
    }
    this._updateMetasets();
    return newControllers;
  }
  _resetElements() {
    each(this.data.datasets, (dataset, datasetIndex) => {
      this.getDatasetMeta(datasetIndex).controller.reset();
    }, this);
  }
  reset() {
    this._resetElements();
    this.notifyPlugins("reset");
  }
  update(mode) {
    const config = this.config;
    config.update();
    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
    const animsDisabled = this._animationsDisabled = !options.animation;
    this._updateScales();
    this._checkEventBindings();
    this._updateHiddenIndices();
    this._plugins.invalidate();
    if (this.notifyPlugins("beforeUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    const newControllers = this.buildOrUpdateControllers();
    this.notifyPlugins("beforeElementsUpdate");
    let minPadding = 0;
    for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; i2++) {
      const { controller } = this.getDatasetMeta(i2);
      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
      controller.buildOrUpdateElements(reset);
      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
    }
    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
    this._updateLayout(minPadding);
    if (!animsDisabled) {
      each(newControllers, (controller) => {
        controller.reset();
      });
    }
    this._updateDatasets(mode);
    this.notifyPlugins("afterUpdate", {
      mode
    });
    this._layers.sort(compare2Level("z", "_idx"));
    const { _active, _lastEvent } = this;
    if (_lastEvent) {
      this._eventHandler(_lastEvent, true);
    } else if (_active.length) {
      this._updateHoverStyles(_active, _active, true);
    }
    this.render();
  }
  _updateScales() {
    each(this.scales, (scale) => {
      layouts.removeBox(this, scale);
    });
    this.ensureScalesHaveIDs();
    this.buildOrUpdateScales();
  }
  _checkEventBindings() {
    const options = this.options;
    const existingEvents = new Set(Object.keys(this._listeners));
    const newEvents = new Set(options.events);
    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
      this.unbindEvents();
      this.bindEvents();
    }
  }
  _updateHiddenIndices() {
    const { _hiddenIndices } = this;
    const changes = this._getUniformDataChanges() || [];
    for (const { method, start, count } of changes) {
      const move = method === "_removeElements" ? -count : count;
      moveNumericKeys(_hiddenIndices, start, move);
    }
  }
  _getUniformDataChanges() {
    const _dataChanges = this._dataChanges;
    if (!_dataChanges || !_dataChanges.length) {
      return;
    }
    this._dataChanges = [];
    const datasetCount = this.data.datasets.length;
    const makeSet = (idx) => new Set(_dataChanges.filter((c2) => c2[0] === idx).map((c2, i2) => i2 + "," + c2.splice(1).join(",")));
    const changeSet = makeSet(0);
    for (let i2 = 1; i2 < datasetCount; i2++) {
      if (!setsEqual(changeSet, makeSet(i2))) {
        return;
      }
    }
    return Array.from(changeSet).map((c2) => c2.split(",")).map((a3) => ({
      method: a3[1],
      start: +a3[2],
      count: +a3[3]
    }));
  }
  _updateLayout(minPadding) {
    if (this.notifyPlugins("beforeLayout", {
      cancelable: true
    }) === false) {
      return;
    }
    layouts.update(this, this.width, this.height, minPadding);
    const area = this.chartArea;
    const noArea = area.width <= 0 || area.height <= 0;
    this._layers = [];
    each(this.boxes, (box) => {
      if (noArea && box.position === "chartArea") {
        return;
      }
      if (box.configure) {
        box.configure();
      }
      this._layers.push(...box._layers());
    }, this);
    this._layers.forEach((item, index2) => {
      item._idx = index2;
    });
    this.notifyPlugins("afterLayout");
  }
  _updateDatasets(mode) {
    if (this.notifyPlugins("beforeDatasetsUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
      this.getDatasetMeta(i2).controller.configure();
    }
    for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
      this._updateDataset(i2, isFunction(mode) ? mode({
        datasetIndex: i2
      }) : mode);
    }
    this.notifyPlugins("afterDatasetsUpdate", {
      mode
    });
  }
  _updateDataset(index2, mode) {
    const meta = this.getDatasetMeta(index2);
    const args = {
      meta,
      index: index2,
      mode,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetUpdate", args) === false) {
      return;
    }
    meta.controller._update(mode);
    args.cancelable = false;
    this.notifyPlugins("afterDatasetUpdate", args);
  }
  render() {
    if (this.notifyPlugins("beforeRender", {
      cancelable: true
    }) === false) {
      return;
    }
    if (animator.has(this)) {
      if (this.attached && !animator.running(this)) {
        animator.start(this);
      }
    } else {
      this.draw();
      onAnimationsComplete({
        chart: this
      });
    }
  }
  draw() {
    let i2;
    if (this._resizeBeforeDraw) {
      const { width, height } = this._resizeBeforeDraw;
      this._resizeBeforeDraw = null;
      this._resize(width, height);
    }
    this.clear();
    if (this.width <= 0 || this.height <= 0) {
      return;
    }
    if (this.notifyPlugins("beforeDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const layers = this._layers;
    for (i2 = 0; i2 < layers.length && layers[i2].z <= 0; ++i2) {
      layers[i2].draw(this.chartArea);
    }
    this._drawDatasets();
    for (; i2 < layers.length; ++i2) {
      layers[i2].draw(this.chartArea);
    }
    this.notifyPlugins("afterDraw");
  }
  _getSortedDatasetMetas(filterVisible) {
    const metasets = this._sortedMetasets;
    const result = [];
    let i2, ilen;
    for (i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
      const meta = metasets[i2];
      if (!filterVisible || meta.visible) {
        result.push(meta);
      }
    }
    return result;
  }
  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(true);
  }
  _drawDatasets() {
    if (this.notifyPlugins("beforeDatasetsDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const metasets = this.getSortedVisibleDatasetMetas();
    for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
      this._drawDataset(metasets[i2]);
    }
    this.notifyPlugins("afterDatasetsDraw");
  }
  _drawDataset(meta) {
    const ctx = this.ctx;
    const args = {
      meta,
      index: meta.index,
      cancelable: true
    };
    const clip = getDatasetClipArea(this, meta);
    if (this.notifyPlugins("beforeDatasetDraw", args) === false) {
      return;
    }
    if (clip) {
      clipArea(ctx, clip);
    }
    meta.controller.draw();
    if (clip) {
      unclipArea(ctx);
    }
    args.cancelable = false;
    this.notifyPlugins("afterDatasetDraw", args);
  }
  isPointInArea(point) {
    return _isPointInArea(point, this.chartArea, this._minPadding);
  }
  getElementsAtEventForMode(e2, mode, options, useFinalPosition) {
    const method = Interaction.modes[mode];
    if (typeof method === "function") {
      return method(this, e2, options, useFinalPosition);
    }
    return [];
  }
  getDatasetMeta(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    const metasets = this._metasets;
    let meta = metasets.filter((x2) => x2 && x2._dataset === dataset).pop();
    if (!meta) {
      meta = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: dataset && dataset.order || 0,
        index: datasetIndex,
        _dataset: dataset,
        _parsed: [],
        _sorted: false
      };
      metasets.push(meta);
    }
    return meta;
  }
  getContext() {
    return this.$context || (this.$context = createContext(null, {
      chart: this,
      type: "chart"
    }));
  }
  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }
  isDatasetVisible(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    if (!dataset) {
      return false;
    }
    const meta = this.getDatasetMeta(datasetIndex);
    return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
  }
  setDatasetVisibility(datasetIndex, visible) {
    const meta = this.getDatasetMeta(datasetIndex);
    meta.hidden = !visible;
  }
  toggleDataVisibility(index2) {
    this._hiddenIndices[index2] = !this._hiddenIndices[index2];
  }
  getDataVisibility(index2) {
    return !this._hiddenIndices[index2];
  }
  _updateVisibility(datasetIndex, dataIndex, visible) {
    const mode = visible ? "show" : "hide";
    const meta = this.getDatasetMeta(datasetIndex);
    const anims = meta.controller._resolveAnimations(void 0, mode);
    if (defined(dataIndex)) {
      meta.data[dataIndex].hidden = !visible;
      this.update();
    } else {
      this.setDatasetVisibility(datasetIndex, visible);
      anims.update(meta, {
        visible
      });
      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : void 0);
    }
  }
  hide(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, false);
  }
  show(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, true);
  }
  _destroyDatasetMeta(datasetIndex) {
    const meta = this._metasets[datasetIndex];
    if (meta && meta.controller) {
      meta.controller._destroy();
    }
    delete this._metasets[datasetIndex];
  }
  _stop() {
    let i2, ilen;
    this.stop();
    animator.remove(this);
    for (i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
      this._destroyDatasetMeta(i2);
    }
  }
  destroy() {
    this.notifyPlugins("beforeDestroy");
    const { canvas, ctx } = this;
    this._stop();
    this.config.clearCache();
    if (canvas) {
      this.unbindEvents();
      clearCanvas(canvas, ctx);
      this.platform.releaseContext(ctx);
      this.canvas = null;
      this.ctx = null;
    }
    delete instances[this.id];
    this.notifyPlugins("afterDestroy");
  }
  toBase64Image(...args) {
    return this.canvas.toDataURL(...args);
  }
  bindEvents() {
    this.bindUserEvents();
    if (this.options.responsive) {
      this.bindResponsiveEvents();
    } else {
      this.attached = true;
    }
  }
  bindUserEvents() {
    const listeners = this._listeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const listener = (e2, x2, y3) => {
      e2.offsetX = x2;
      e2.offsetY = y3;
      this._eventHandler(e2);
    };
    each(this.options.events, (type) => _add(type, listener));
  }
  bindResponsiveEvents() {
    if (!this._responsiveListeners) {
      this._responsiveListeners = {};
    }
    const listeners = this._responsiveListeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const _remove = (type, listener2) => {
      if (listeners[type]) {
        platform.removeEventListener(this, type, listener2);
        delete listeners[type];
      }
    };
    const listener = (width, height) => {
      if (this.canvas) {
        this.resize(width, height);
      }
    };
    let detached;
    const attached = () => {
      _remove("attach", attached);
      this.attached = true;
      this.resize();
      _add("resize", listener);
      _add("detach", detached);
    };
    detached = () => {
      this.attached = false;
      _remove("resize", listener);
      this._stop();
      this._resize(0, 0);
      _add("attach", attached);
    };
    if (platform.isAttached(this.canvas)) {
      attached();
    } else {
      detached();
    }
  }
  unbindEvents() {
    each(this._listeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._listeners = {};
    each(this._responsiveListeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._responsiveListeners = void 0;
  }
  updateHoverStyle(items, mode, enabled) {
    const prefix = enabled ? "set" : "remove";
    let meta, item, i2, ilen;
    if (mode === "dataset") {
      meta = this.getDatasetMeta(items[0].datasetIndex);
      meta.controller["_" + prefix + "DatasetHoverStyle"]();
    }
    for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
      item = items[i2];
      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
      if (controller) {
        controller[prefix + "HoverStyle"](item.element, item.datasetIndex, item.index);
      }
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements) {
    const lastActive = this._active || [];
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("No dataset found at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(active, lastActive);
    if (changed) {
      this._active = active;
      this._lastEvent = null;
      this._updateHoverStyles(active, lastActive);
    }
  }
  notifyPlugins(hook, args, filter) {
    return this._plugins.notify(this, hook, args, filter);
  }
  isPluginEnabled(pluginId) {
    return this._plugins._cache.filter((p) => p.plugin.id === pluginId).length === 1;
  }
  _updateHoverStyles(active, lastActive, replay) {
    const hoverOptions = this.options.hover;
    const diff = (a3, b2) => a3.filter((x2) => !b2.some((y3) => x2.datasetIndex === y3.datasetIndex && x2.index === y3.index));
    const deactivated = diff(lastActive, active);
    const activated = replay ? active : diff(active, lastActive);
    if (deactivated.length) {
      this.updateHoverStyle(deactivated, hoverOptions.mode, false);
    }
    if (activated.length && hoverOptions.mode) {
      this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
  }
  _eventHandler(e2, replay) {
    const args = {
      event: e2,
      replay,
      cancelable: true,
      inChartArea: this.isPointInArea(e2)
    };
    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e2.native.type);
    if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) {
      return;
    }
    const changed = this._handleEvent(e2, replay, args.inChartArea);
    args.cancelable = false;
    this.notifyPlugins("afterEvent", args, eventFilter);
    if (changed || args.changed) {
      this.render();
    }
    return this;
  }
  _handleEvent(e2, replay, inChartArea) {
    const { _active: lastActive = [], options } = this;
    const useFinalPosition = replay;
    const active = this._getActiveElements(e2, lastActive, inChartArea, useFinalPosition);
    const isClick = _isClickEvent(e2);
    const lastEvent = determineLastEvent(e2, this._lastEvent, inChartArea, isClick);
    if (inChartArea) {
      this._lastEvent = null;
      callback(options.onHover, [
        e2,
        active,
        this
      ], this);
      if (isClick) {
        callback(options.onClick, [
          e2,
          active,
          this
        ], this);
      }
    }
    const changed = !_elementsEqual(active, lastActive);
    if (changed || replay) {
      this._active = active;
      this._updateHoverStyles(active, lastActive, replay);
    }
    this._lastEvent = lastEvent;
    return changed;
  }
  _getActiveElements(e2, lastActive, inChartArea, useFinalPosition) {
    if (e2.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const hoverOptions = this.options.hover;
    return this.getElementsAtEventForMode(e2, hoverOptions.mode, hoverOptions, useFinalPosition);
  }
}, __publicField(_b, "defaults", defaults), __publicField(_b, "instances", instances), __publicField(_b, "overrides", overrides), __publicField(_b, "registry", registry), __publicField(_b, "version", version), __publicField(_b, "getChart", getChart), _b);
function invalidatePlugins() {
  return each(Chart$1.instances, (chart) => chart._plugins.invalidate());
}
function clipArc(ctx, element2, endAngle) {
  const { startAngle, pixelMargin, x: x2, y: y3, outerRadius, innerRadius } = element2;
  let angleMargin = pixelMargin / outerRadius;
  ctx.beginPath();
  ctx.arc(x2, y3, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
  if (innerRadius > pixelMargin) {
    angleMargin = pixelMargin / innerRadius;
    ctx.arc(x2, y3, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
  } else {
    ctx.arc(x2, y3, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
  }
  ctx.closePath();
  ctx.clip();
}
function toRadiusCorners(value) {
  return _readValueToProps(value, [
    "outerStart",
    "outerEnd",
    "innerStart",
    "innerEnd"
  ]);
}
function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
  const o = toRadiusCorners(arc.options.borderRadius);
  const halfThickness = (outerRadius - innerRadius) / 2;
  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
  const computeOuterLimit = (val) => {
    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
  };
  return {
    outerStart: computeOuterLimit(o.outerStart),
    outerEnd: computeOuterLimit(o.outerEnd),
    innerStart: _limitValue(o.innerStart, 0, innerLimit),
    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)
  };
}
function rThetaToXY(r, theta, x2, y3) {
  return {
    x: x2 + r * Math.cos(theta),
    y: y3 + r * Math.sin(theta)
  };
}
function pathArc(ctx, element2, offset, spacing, end, circular) {
  const { x: x2, y: y3, startAngle: start, pixelMargin, innerRadius: innerR } = element2;
  const outerRadius = Math.max(element2.outerRadius + spacing + offset - pixelMargin, 0);
  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
  let spacingOffset = 0;
  const alpha2 = end - start;
  if (spacing) {
    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha2 * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha2;
    spacingOffset = (alpha2 - adjustedAngle) / 2;
  }
  const beta = Math.max(1e-3, alpha2 * outerRadius - offset / PI) / outerRadius;
  const angleOffset = (alpha2 - beta) / 2;
  const startAngle = start + angleOffset + spacingOffset;
  const endAngle = end - angleOffset - spacingOffset;
  const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element2, innerRadius, outerRadius, endAngle - startAngle);
  const outerStartAdjustedRadius = outerRadius - outerStart;
  const outerEndAdjustedRadius = outerRadius - outerEnd;
  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
  const innerStartAdjustedRadius = innerRadius + innerStart;
  const innerEndAdjustedRadius = innerRadius + innerEnd;
  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
  ctx.beginPath();
  if (circular) {
    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
    ctx.arc(x2, y3, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
    ctx.arc(x2, y3, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
    if (outerEnd > 0) {
      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
    }
    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x2, y3);
    ctx.lineTo(p4.x, p4.y);
    if (innerEnd > 0) {
      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
    }
    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
    ctx.arc(x2, y3, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
    ctx.arc(x2, y3, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
    if (innerStart > 0) {
      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
    }
    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x2, y3);
    ctx.lineTo(p8.x, p8.y);
    if (outerStart > 0) {
      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
    }
  } else {
    ctx.moveTo(x2, y3);
    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x2;
    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y3;
    ctx.lineTo(outerStartX, outerStartY);
    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x2;
    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y3;
    ctx.lineTo(outerEndX, outerEndY);
  }
  ctx.closePath();
}
function drawArc(ctx, element2, offset, spacing, circular) {
  const { fullCircles, startAngle, circumference } = element2;
  let endAngle = element2.endAngle;
  if (fullCircles) {
    pathArc(ctx, element2, offset, spacing, endAngle, circular);
    for (let i2 = 0; i2 < fullCircles; ++i2) {
      ctx.fill();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  pathArc(ctx, element2, offset, spacing, endAngle, circular);
  ctx.fill();
  return endAngle;
}
function drawBorder(ctx, element2, offset, spacing, circular) {
  const { fullCircles, startAngle, circumference, options } = element2;
  const { borderWidth, borderJoinStyle, borderDash, borderDashOffset } = options;
  const inner = options.borderAlign === "inner";
  if (!borderWidth) {
    return;
  }
  ctx.setLineDash(borderDash || []);
  ctx.lineDashOffset = borderDashOffset;
  if (inner) {
    ctx.lineWidth = borderWidth * 2;
    ctx.lineJoin = borderJoinStyle || "round";
  } else {
    ctx.lineWidth = borderWidth;
    ctx.lineJoin = borderJoinStyle || "bevel";
  }
  let endAngle = element2.endAngle;
  if (fullCircles) {
    pathArc(ctx, element2, offset, spacing, endAngle, circular);
    for (let i2 = 0; i2 < fullCircles; ++i2) {
      ctx.stroke();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  if (inner) {
    clipArc(ctx, element2, endAngle);
  }
  if (!fullCircles) {
    pathArc(ctx, element2, offset, spacing, endAngle, circular);
    ctx.stroke();
  }
}
class ArcElement extends Element$1 {
  constructor(cfg) {
    super();
    __publicField(this, "circumference");
    __publicField(this, "endAngle");
    __publicField(this, "fullCircles");
    __publicField(this, "innerRadius");
    __publicField(this, "outerRadius");
    __publicField(this, "pixelMargin");
    __publicField(this, "startAngle");
    this.options = void 0;
    this.circumference = void 0;
    this.startAngle = void 0;
    this.endAngle = void 0;
    this.innerRadius = void 0;
    this.outerRadius = void 0;
    this.pixelMargin = 0;
    this.fullCircles = 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(chartX, chartY, useFinalPosition) {
    const point = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    const { angle, distance } = getAngleFromPoint(point, {
      x: chartX,
      y: chartY
    });
    const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius",
      "circumference"
    ], useFinalPosition);
    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
    const _circumference = valueOrDefault(circumference, endAngle - startAngle);
    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;
    const betweenAngles = _circumference >= TAU || nonZeroBetween;
    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);
    return betweenAngles && withinRadius;
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y3, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([
      "x",
      "y",
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius"
    ], useFinalPosition);
    const { offset, spacing } = this.options;
    const halfAngle = (startAngle + endAngle) / 2;
    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
    return {
      x: x2 + Math.cos(halfAngle) * halfRadius,
      y: y3 + Math.sin(halfAngle) * halfRadius
    };
  }
  tooltipPosition(useFinalPosition) {
    return this.getCenterPoint(useFinalPosition);
  }
  draw(ctx) {
    const { options, circumference } = this;
    const offset = (options.offset || 0) / 4;
    const spacing = (options.spacing || 0) / 2;
    const circular = options.circular;
    this.pixelMargin = options.borderAlign === "inner" ? 0.33 : 0;
    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
      return;
    }
    ctx.save();
    const halfAngle = (this.startAngle + this.endAngle) / 2;
    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));
    const radiusOffset = offset * fix;
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    drawArc(ctx, this, radiusOffset, spacing, circular);
    drawBorder(ctx, this, radiusOffset, spacing, circular);
    ctx.restore();
  }
}
__publicField(ArcElement, "id", "arc");
__publicField(ArcElement, "defaults", {
  borderAlign: "center",
  borderColor: "#fff",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: void 0,
  borderRadius: 0,
  borderWidth: 2,
  offset: 0,
  spacing: 0,
  angle: void 0,
  circular: true
});
__publicField(ArcElement, "defaultRoutes", {
  backgroundColor: "backgroundColor"
});
__publicField(ArcElement, "descriptors", {
  _scriptable: true,
  _indexable: (name) => name !== "borderDash"
});
function setStyle(ctx, options, style = options) {
  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);
  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));
  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);
  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);
  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);
  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
  ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
  if (options.stepped) {
    return _steppedLineTo;
  }
  if (options.tension || options.cubicInterpolationMode === "monotone") {
    return _bezierCurveTo;
  }
  return lineTo;
}
function pathVars(points, segment, params = {}) {
  const count = points.length;
  const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;
  const { start: segmentStart, end: segmentEnd } = segment;
  const start = Math.max(paramsStart, segmentStart);
  const end = Math.min(paramsEnd, segmentEnd);
  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
  return {
    count,
    start,
    loop: segment.loop,
    ilen: end < start && !outside ? count + end - start : end - start
  };
}
function pathSegment(ctx, line, segment, params) {
  const { points, options } = line;
  const { count, start, loop, ilen } = pathVars(points, segment, params);
  const lineMethod = getLineMethod(options);
  let { move = true, reverse } = params || {};
  let i2, point, prev;
  for (i2 = 0; i2 <= ilen; ++i2) {
    point = points[(start + (reverse ? ilen - i2 : i2)) % count];
    if (point.skip) {
      continue;
    } else if (move) {
      ctx.moveTo(point.x, point.y);
      move = false;
    } else {
      lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    prev = point;
  }
  if (loop) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    lineMethod(ctx, prev, point, reverse, options.stepped);
  }
  return !!loop;
}
function fastPathSegment(ctx, line, segment, params) {
  const points = line.points;
  const { count, start, ilen } = pathVars(points, segment, params);
  const { move = true, reverse } = params || {};
  let avgX = 0;
  let countX = 0;
  let i2, point, prevX, minY, maxY, lastY;
  const pointIndex = (index2) => (start + (reverse ? ilen - index2 : index2)) % count;
  const drawX = () => {
    if (minY !== maxY) {
      ctx.lineTo(avgX, maxY);
      ctx.lineTo(avgX, minY);
      ctx.lineTo(avgX, lastY);
    }
  };
  if (move) {
    point = points[pointIndex(0)];
    ctx.moveTo(point.x, point.y);
  }
  for (i2 = 0; i2 <= ilen; ++i2) {
    point = points[pointIndex(i2)];
    if (point.skip) {
      continue;
    }
    const x2 = point.x;
    const y3 = point.y;
    const truncX = x2 | 0;
    if (truncX === prevX) {
      if (y3 < minY) {
        minY = y3;
      } else if (y3 > maxY) {
        maxY = y3;
      }
      avgX = (countX * avgX + x2) / ++countX;
    } else {
      drawX();
      ctx.lineTo(x2, y3);
      prevX = truncX;
      countX = 0;
      minY = maxY = y3;
    }
    lastY = y3;
  }
  drawX();
}
function _getSegmentMethod(line) {
  const opts = line.options;
  const borderDash = opts.borderDash && opts.borderDash.length;
  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
  return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
  if (options.stepped) {
    return _steppedInterpolation;
  }
  if (options.tension || options.cubicInterpolationMode === "monotone") {
    return _bezierInterpolation;
  }
  return _pointInLine;
}
function strokePathWithCache(ctx, line, start, count) {
  let path = line._path;
  if (!path) {
    path = line._path = new Path2D();
    if (line.path(path, start, count)) {
      path.closePath();
    }
  }
  setStyle(ctx, line.options);
  ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
  const { segments, options } = line;
  const segmentMethod = _getSegmentMethod(line);
  for (const segment of segments) {
    setStyle(ctx, options, segment.style);
    ctx.beginPath();
    if (segmentMethod(ctx, line, segment, {
      start,
      end: start + count - 1
    })) {
      ctx.closePath();
    }
    ctx.stroke();
  }
}
const usePath2D = typeof Path2D === "function";
function draw(ctx, line, start, count) {
  if (usePath2D && !line.options.segment) {
    strokePathWithCache(ctx, line, start, count);
  } else {
    strokePathDirect(ctx, line, start, count);
  }
}
class LineElement extends Element$1 {
  constructor(cfg) {
    super();
    this.animated = true;
    this.options = void 0;
    this._chart = void 0;
    this._loop = void 0;
    this._fullLoop = void 0;
    this._path = void 0;
    this._points = void 0;
    this._segments = void 0;
    this._decimated = false;
    this._pointsUpdated = false;
    this._datasetIndex = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  updateControlPoints(chartArea, indexAxis) {
    const options = this.options;
    if ((options.tension || options.cubicInterpolationMode === "monotone") && !options.stepped && !this._pointsUpdated) {
      const loop = options.spanGaps ? this._loop : this._fullLoop;
      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);
      this._pointsUpdated = true;
    }
  }
  set points(points) {
    this._points = points;
    delete this._segments;
    delete this._path;
    this._pointsUpdated = false;
  }
  get points() {
    return this._points;
  }
  get segments() {
    return this._segments || (this._segments = _computeSegments(this, this.options.segment));
  }
  first() {
    const segments = this.segments;
    const points = this.points;
    return segments.length && points[segments[0].start];
  }
  last() {
    const segments = this.segments;
    const points = this.points;
    const count = segments.length;
    return count && points[segments[count - 1].end];
  }
  interpolate(point, property) {
    const options = this.options;
    const value = point[property];
    const points = this.points;
    const segments = _boundSegments(this, {
      property,
      start: value,
      end: value
    });
    if (!segments.length) {
      return;
    }
    const result = [];
    const _interpolate = _getInterpolationMethod(options);
    let i2, ilen;
    for (i2 = 0, ilen = segments.length; i2 < ilen; ++i2) {
      const { start, end } = segments[i2];
      const p1 = points[start];
      const p2 = points[end];
      if (p1 === p2) {
        result.push(p1);
        continue;
      }
      const t2 = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
      const interpolated = _interpolate(p1, p2, t2, options.stepped);
      interpolated[property] = point[property];
      result.push(interpolated);
    }
    return result.length === 1 ? result[0] : result;
  }
  pathSegment(ctx, segment, params) {
    const segmentMethod = _getSegmentMethod(this);
    return segmentMethod(ctx, this, segment, params);
  }
  path(ctx, start, count) {
    const segments = this.segments;
    const segmentMethod = _getSegmentMethod(this);
    let loop = this._loop;
    start = start || 0;
    count = count || this.points.length - start;
    for (const segment of segments) {
      loop &= segmentMethod(ctx, this, segment, {
        start,
        end: start + count - 1
      });
    }
    return !!loop;
  }
  draw(ctx, chartArea, start, count) {
    const options = this.options || {};
    const points = this.points || [];
    if (points.length && options.borderWidth) {
      ctx.save();
      draw(ctx, this, start, count);
      ctx.restore();
    }
    if (this.animated) {
      this._pointsUpdated = false;
      this._path = void 0;
    }
  }
}
__publicField(LineElement, "id", "line");
__publicField(LineElement, "defaults", {
  borderCapStyle: "butt",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: "miter",
  borderWidth: 3,
  capBezierPoints: true,
  cubicInterpolationMode: "default",
  fill: false,
  spanGaps: false,
  stepped: false,
  tension: 0
});
__publicField(LineElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
__publicField(LineElement, "descriptors", {
  _scriptable: true,
  _indexable: (name) => name !== "borderDash" && name !== "fill"
});
function inRange$1(el, pos, axis, useFinalPosition) {
  const options = el.options;
  const { [axis]: value } = el.getProps([
    axis
  ], useFinalPosition);
  return Math.abs(pos - value) < options.radius + options.hitRadius;
}
class PointElement extends Element$1 {
  constructor(cfg) {
    super();
    __publicField(this, "parsed");
    __publicField(this, "skip");
    __publicField(this, "stop");
    this.options = void 0;
    this.parsed = void 0;
    this.skip = void 0;
    this.stop = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    const options = this.options;
    const { x: x2, y: y3 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return Math.pow(mouseX - x2, 2) + Math.pow(mouseY - y3, 2) < Math.pow(options.hitRadius + options.radius, 2);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange$1(this, mouseX, "x", useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange$1(this, mouseY, "y", useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y3 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y3
    };
  }
  size(options) {
    options = options || this.options || {};
    let radius = options.radius || 0;
    radius = Math.max(radius, radius && options.hoverRadius || 0);
    const borderWidth = radius && options.borderWidth || 0;
    return (radius + borderWidth) * 2;
  }
  draw(ctx, area) {
    const options = this.options;
    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
      return;
    }
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.fillStyle = options.backgroundColor;
    drawPoint(ctx, options, this.x, this.y);
  }
  getRange() {
    const options = this.options || {};
    return options.radius + options.hitRadius;
  }
}
__publicField(PointElement, "id", "point");
/**
* @type {any}
*/
__publicField(PointElement, "defaults", {
  borderWidth: 1,
  hitRadius: 1,
  hoverBorderWidth: 1,
  hoverRadius: 4,
  pointStyle: "circle",
  radius: 3,
  rotation: 0
});
/**
* @type {any}
*/
__publicField(PointElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
function getBarBounds(bar, useFinalPosition) {
  const { x: x2, y: y3, base: base2, width, height } = bar.getProps([
    "x",
    "y",
    "base",
    "width",
    "height"
  ], useFinalPosition);
  let left, right, top, bottom, half;
  if (bar.horizontal) {
    half = height / 2;
    left = Math.min(x2, base2);
    right = Math.max(x2, base2);
    top = y3 - half;
    bottom = y3 + half;
  } else {
    half = width / 2;
    left = x2 - half;
    right = x2 + half;
    top = Math.min(y3, base2);
    bottom = Math.max(y3, base2);
  }
  return {
    left,
    top,
    right,
    bottom
  };
}
function skipOrLimit(skip2, value, min, max) {
  return skip2 ? 0 : _limitValue(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
  const value = bar.options.borderWidth;
  const skip2 = bar.borderSkipped;
  const o = toTRBL(value);
  return {
    t: skipOrLimit(skip2.top, o.top, 0, maxH),
    r: skipOrLimit(skip2.right, o.right, 0, maxW),
    b: skipOrLimit(skip2.bottom, o.bottom, 0, maxH),
    l: skipOrLimit(skip2.left, o.left, 0, maxW)
  };
}
function parseBorderRadius(bar, maxW, maxH) {
  const { enableBorderRadius } = bar.getProps([
    "enableBorderRadius"
  ]);
  const value = bar.options.borderRadius;
  const o = toTRBLCorners(value);
  const maxR = Math.min(maxW, maxH);
  const skip2 = bar.borderSkipped;
  const enableBorder = enableBorderRadius || isObject(value);
  return {
    topLeft: skipOrLimit(!enableBorder || skip2.top || skip2.left, o.topLeft, 0, maxR),
    topRight: skipOrLimit(!enableBorder || skip2.top || skip2.right, o.topRight, 0, maxR),
    bottomLeft: skipOrLimit(!enableBorder || skip2.bottom || skip2.left, o.bottomLeft, 0, maxR),
    bottomRight: skipOrLimit(!enableBorder || skip2.bottom || skip2.right, o.bottomRight, 0, maxR)
  };
}
function boundingRects(bar) {
  const bounds = getBarBounds(bar);
  const width = bounds.right - bounds.left;
  const height = bounds.bottom - bounds.top;
  const border = parseBorderWidth(bar, width / 2, height / 2);
  const radius = parseBorderRadius(bar, width / 2, height / 2);
  return {
    outer: {
      x: bounds.left,
      y: bounds.top,
      w: width,
      h: height,
      radius
    },
    inner: {
      x: bounds.left + border.l,
      y: bounds.top + border.t,
      w: width - border.l - border.r,
      h: height - border.t - border.b,
      radius: {
        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
      }
    }
  };
}
function inRange(bar, x2, y3, useFinalPosition) {
  const skipX = x2 === null;
  const skipY = y3 === null;
  const skipBoth = skipX && skipY;
  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
  return bounds && (skipX || _isBetween(x2, bounds.left, bounds.right)) && (skipY || _isBetween(y3, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
  ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
  const x2 = rect.x !== refRect.x ? -amount : 0;
  const y3 = rect.y !== refRect.y ? -amount : 0;
  const w2 = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x2;
  const h3 = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y3;
  return {
    x: rect.x + x2,
    y: rect.y + y3,
    w: rect.w + w2,
    h: rect.h + h3,
    radius: rect.radius
  };
}
class BarElement extends Element$1 {
  constructor(cfg) {
    super();
    this.options = void 0;
    this.horizontal = void 0;
    this.base = void 0;
    this.width = void 0;
    this.height = void 0;
    this.inflateAmount = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  draw(ctx) {
    const { inflateAmount, options: { borderColor, backgroundColor } } = this;
    const { inner, outer } = boundingRects(this);
    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
    ctx.save();
    if (outer.w !== inner.w || outer.h !== inner.h) {
      ctx.beginPath();
      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
      ctx.clip();
      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
      ctx.fillStyle = borderColor;
      ctx.fill("evenodd");
    }
    ctx.beginPath();
    addRectPath(ctx, inflateRect(inner, inflateAmount));
    ctx.fillStyle = backgroundColor;
    ctx.fill();
    ctx.restore();
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    return inRange(this, mouseX, mouseY, useFinalPosition);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange(this, mouseX, null, useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange(this, null, mouseY, useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y3, base: base2, horizontal } = this.getProps([
      "x",
      "y",
      "base",
      "horizontal"
    ], useFinalPosition);
    return {
      x: horizontal ? (x2 + base2) / 2 : x2,
      y: horizontal ? y3 : (y3 + base2) / 2
    };
  }
  getRange(axis) {
    return axis === "x" ? this.width / 2 : this.height / 2;
  }
}
__publicField(BarElement, "id", "bar");
__publicField(BarElement, "defaults", {
  borderSkipped: "start",
  borderWidth: 0,
  borderRadius: 0,
  inflateAmount: "auto",
  pointStyle: void 0
});
__publicField(BarElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
var elements = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcElement,
  BarElement,
  LineElement,
  PointElement
});
const BORDER_COLORS = [
  "rgb(54, 162, 235)",
  "rgb(255, 99, 132)",
  "rgb(255, 159, 64)",
  "rgb(255, 205, 86)",
  "rgb(75, 192, 192)",
  "rgb(153, 102, 255)",
  "rgb(201, 203, 207)"
  // grey
];
const BACKGROUND_COLORS = /* @__PURE__ */ BORDER_COLORS.map((color2) => color2.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
function getBorderColor(i2) {
  return BORDER_COLORS[i2 % BORDER_COLORS.length];
}
function getBackgroundColor(i2) {
  return BACKGROUND_COLORS[i2 % BACKGROUND_COLORS.length];
}
function colorizeDefaultDataset(dataset, i2) {
  dataset.borderColor = getBorderColor(i2);
  dataset.backgroundColor = getBackgroundColor(i2);
  return ++i2;
}
function colorizeDoughnutDataset(dataset, i2) {
  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i2++));
  return i2;
}
function colorizePolarAreaDataset(dataset, i2) {
  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i2++));
  return i2;
}
function getColorizer(chart) {
  let i2 = 0;
  return (dataset, datasetIndex) => {
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    if (controller instanceof DoughnutController) {
      i2 = colorizeDoughnutDataset(dataset, i2);
    } else if (controller instanceof PolarAreaController) {
      i2 = colorizePolarAreaDataset(dataset, i2);
    } else if (controller) {
      i2 = colorizeDefaultDataset(dataset, i2);
    }
  };
}
function containsColorsDefinitions(descriptors2) {
  let k2;
  for (k2 in descriptors2) {
    if (descriptors2[k2].borderColor || descriptors2[k2].backgroundColor) {
      return true;
    }
  }
  return false;
}
function containsColorsDefinition(descriptor) {
  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);
}
function containsDefaultColorsDefenitions() {
  return defaults.borderColor !== "rgba(0,0,0,0.1)" || defaults.backgroundColor !== "rgba(0,0,0,0.1)";
}
var plugin_colors = {
  id: "colors",
  defaults: {
    enabled: true,
    forceOverride: false
  },
  beforeLayout(chart, _args, options) {
    if (!options.enabled) {
      return;
    }
    const { data: { datasets }, options: chartOptions } = chart.config;
    const { elements: elements2 } = chartOptions;
    const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements2 && containsColorsDefinitions(elements2) || containsDefaultColorsDefenitions();
    if (!options.forceOverride && containsColorDefenition) {
      return;
    }
    const colorizer = getColorizer(chart);
    datasets.forEach(colorizer);
  }
};
function lttbDecimation(data, start, count, availableWidth, options) {
  const samples = options.samples || availableWidth;
  if (samples >= count) {
    return data.slice(start, start + count);
  }
  const decimated = [];
  const bucketWidth = (count - 2) / (samples - 2);
  let sampledIndex = 0;
  const endIndex = start + count - 1;
  let a3 = start;
  let i2, maxAreaPoint, maxArea, area, nextA;
  decimated[sampledIndex++] = data[a3];
  for (i2 = 0; i2 < samples - 2; i2++) {
    let avgX = 0;
    let avgY = 0;
    let j;
    const avgRangeStart = Math.floor((i2 + 1) * bucketWidth) + 1 + start;
    const avgRangeEnd = Math.min(Math.floor((i2 + 2) * bucketWidth) + 1, count) + start;
    const avgRangeLength = avgRangeEnd - avgRangeStart;
    for (j = avgRangeStart; j < avgRangeEnd; j++) {
      avgX += data[j].x;
      avgY += data[j].y;
    }
    avgX /= avgRangeLength;
    avgY /= avgRangeLength;
    const rangeOffs = Math.floor(i2 * bucketWidth) + 1 + start;
    const rangeTo = Math.min(Math.floor((i2 + 1) * bucketWidth) + 1, count) + start;
    const { x: pointAx, y: pointAy } = data[a3];
    maxArea = area = -1;
    for (j = rangeOffs; j < rangeTo; j++) {
      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
      if (area > maxArea) {
        maxArea = area;
        maxAreaPoint = data[j];
        nextA = j;
      }
    }
    decimated[sampledIndex++] = maxAreaPoint;
    a3 = nextA;
  }
  decimated[sampledIndex++] = data[endIndex];
  return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
  let avgX = 0;
  let countX = 0;
  let i2, point, x2, y3, prevX, minIndex, maxIndex, startIndex, minY, maxY;
  const decimated = [];
  const endIndex = start + count - 1;
  const xMin = data[start].x;
  const xMax = data[endIndex].x;
  const dx = xMax - xMin;
  for (i2 = start; i2 < start + count; ++i2) {
    point = data[i2];
    x2 = (point.x - xMin) / dx * availableWidth;
    y3 = point.y;
    const truncX = x2 | 0;
    if (truncX === prevX) {
      if (y3 < minY) {
        minY = y3;
        minIndex = i2;
      } else if (y3 > maxY) {
        maxY = y3;
        maxIndex = i2;
      }
      avgX = (countX * avgX + point.x) / ++countX;
    } else {
      const lastIndex = i2 - 1;
      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {
        const intermediateIndex1 = Math.min(minIndex, maxIndex);
        const intermediateIndex2 = Math.max(minIndex, maxIndex);
        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex1],
            x: avgX
          });
        }
        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex2],
            x: avgX
          });
        }
      }
      if (i2 > 0 && lastIndex !== startIndex) {
        decimated.push(data[lastIndex]);
      }
      decimated.push(point);
      prevX = truncX;
      countX = 0;
      minY = maxY = y3;
      minIndex = maxIndex = startIndex = i2;
    }
  }
  return decimated;
}
function cleanDecimatedDataset(dataset) {
  if (dataset._decimated) {
    const data = dataset._data;
    delete dataset._decimated;
    delete dataset._data;
    Object.defineProperty(dataset, "data", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: data
    });
  }
}
function cleanDecimatedData(chart) {
  chart.data.datasets.forEach((dataset) => {
    cleanDecimatedDataset(dataset);
  });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
  const pointCount = points.length;
  let start = 0;
  let count;
  const { iScale } = meta;
  const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
  if (minDefined) {
    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);
  }
  if (maxDefined) {
    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;
  } else {
    count = pointCount - start;
  }
  return {
    start,
    count
  };
}
var plugin_decimation = {
  id: "decimation",
  defaults: {
    algorithm: "min-max",
    enabled: false
  },
  beforeElementsUpdate: (chart, args, options) => {
    if (!options.enabled) {
      cleanDecimatedData(chart);
      return;
    }
    const availableWidth = chart.width;
    chart.data.datasets.forEach((dataset, datasetIndex) => {
      const { _data, indexAxis } = dataset;
      const meta = chart.getDatasetMeta(datasetIndex);
      const data = _data || dataset.data;
      if (resolve([
        indexAxis,
        chart.options.indexAxis
      ]) === "y") {
        return;
      }
      if (!meta.controller.supportsDecimation) {
        return;
      }
      const xAxis = chart.scales[meta.xAxisID];
      if (xAxis.type !== "linear" && xAxis.type !== "time") {
        return;
      }
      if (chart.options.parsing) {
        return;
      }
      let { start, count } = getStartAndCountOfVisiblePointsSimplified(meta, data);
      const threshold = options.threshold || 4 * availableWidth;
      if (count <= threshold) {
        cleanDecimatedDataset(dataset);
        return;
      }
      if (isNullOrUndef(_data)) {
        dataset._data = data;
        delete dataset.data;
        Object.defineProperty(dataset, "data", {
          configurable: true,
          enumerable: true,
          get: function() {
            return this._decimated;
          },
          set: function(d3) {
            this._data = d3;
          }
        });
      }
      let decimated;
      switch (options.algorithm) {
        case "lttb":
          decimated = lttbDecimation(data, start, count, availableWidth, options);
          break;
        case "min-max":
          decimated = minMaxDecimation(data, start, count, availableWidth);
          break;
        default:
          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
      }
      dataset._decimated = decimated;
    });
  },
  destroy(chart) {
    cleanDecimatedData(chart);
  }
};
function _segments(line, target, property) {
  const segments = line.segments;
  const points = line.points;
  const tpoints = target.points;
  const parts = [];
  for (const segment of segments) {
    let { start, end } = segment;
    end = _findSegmentEnd(start, end, points);
    const bounds = _getBounds(property, points[start], points[end], segment.loop);
    if (!target.segments) {
      parts.push({
        source: segment,
        target: bounds,
        start: points[start],
        end: points[end]
      });
      continue;
    }
    const targetSegments = _boundSegments(target, bounds);
    for (const tgt of targetSegments) {
      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
      const fillSources = _boundSegment(segment, points, subBounds);
      for (const fillSource of fillSources) {
        parts.push({
          source: fillSource,
          target: tgt,
          start: {
            [property]: _getEdge(bounds, subBounds, "start", Math.max)
          },
          end: {
            [property]: _getEdge(bounds, subBounds, "end", Math.min)
          }
        });
      }
    }
  }
  return parts;
}
function _getBounds(property, first, last, loop) {
  if (loop) {
    return;
  }
  let start = first[property];
  let end = last[property];
  if (property === "angle") {
    start = _normalizeAngle(start);
    end = _normalizeAngle(end);
  }
  return {
    property,
    start,
    end
  };
}
function _pointsFromSegments(boundary, line) {
  const { x: x2 = null, y: y3 = null } = boundary || {};
  const linePoints = line.points;
  const points = [];
  line.segments.forEach(({ start, end }) => {
    end = _findSegmentEnd(start, end, linePoints);
    const first = linePoints[start];
    const last = linePoints[end];
    if (y3 !== null) {
      points.push({
        x: first.x,
        y: y3
      });
      points.push({
        x: last.x,
        y: y3
      });
    } else if (x2 !== null) {
      points.push({
        x: x2,
        y: first.y
      });
      points.push({
        x: x2,
        y: last.y
      });
    }
  });
  return points;
}
function _findSegmentEnd(start, end, points) {
  for (; end > start; end--) {
    const point = points[end];
    if (!isNaN(point.x) && !isNaN(point.y)) {
      break;
    }
  }
  return end;
}
function _getEdge(a3, b2, prop, fn) {
  if (a3 && b2) {
    return fn(a3[prop], b2[prop]);
  }
  return a3 ? a3[prop] : b2 ? b2[prop] : 0;
}
function _createBoundaryLine(boundary, line) {
  let points = [];
  let _loop = false;
  if (isArray(boundary)) {
    _loop = true;
    points = boundary;
  } else {
    points = _pointsFromSegments(boundary, line);
  }
  return points.length ? new LineElement({
    points,
    options: {
      tension: 0
    },
    _loop,
    _fullLoop: _loop
  }) : null;
}
function _shouldApplyFill(source) {
  return source && source.fill !== false;
}
function _resolveTarget(sources, index2, propagate) {
  const source = sources[index2];
  let fill2 = source.fill;
  const visited = [
    index2
  ];
  let target;
  if (!propagate) {
    return fill2;
  }
  while (fill2 !== false && visited.indexOf(fill2) === -1) {
    if (!isNumberFinite(fill2)) {
      return fill2;
    }
    target = sources[fill2];
    if (!target) {
      return false;
    }
    if (target.visible) {
      return fill2;
    }
    visited.push(fill2);
    fill2 = target.fill;
  }
  return false;
}
function _decodeFill(line, index2, count) {
  const fill2 = parseFillOption(line);
  if (isObject(fill2)) {
    return isNaN(fill2.value) ? false : fill2;
  }
  let target = parseFloat(fill2);
  if (isNumberFinite(target) && Math.floor(target) === target) {
    return decodeTargetIndex(fill2[0], index2, target, count);
  }
  return [
    "origin",
    "start",
    "end",
    "stack",
    "shape"
  ].indexOf(fill2) >= 0 && fill2;
}
function decodeTargetIndex(firstCh, index2, target, count) {
  if (firstCh === "-" || firstCh === "+") {
    target = index2 + target;
  }
  if (target === index2 || target < 0 || target >= count) {
    return false;
  }
  return target;
}
function _getTargetPixel(fill2, scale) {
  let pixel = null;
  if (fill2 === "start") {
    pixel = scale.bottom;
  } else if (fill2 === "end") {
    pixel = scale.top;
  } else if (isObject(fill2)) {
    pixel = scale.getPixelForValue(fill2.value);
  } else if (scale.getBasePixel) {
    pixel = scale.getBasePixel();
  }
  return pixel;
}
function _getTargetValue(fill2, scale, startValue) {
  let value;
  if (fill2 === "start") {
    value = startValue;
  } else if (fill2 === "end") {
    value = scale.options.reverse ? scale.min : scale.max;
  } else if (isObject(fill2)) {
    value = fill2.value;
  } else {
    value = scale.getBaseValue();
  }
  return value;
}
function parseFillOption(line) {
  const options = line.options;
  const fillOption = options.fill;
  let fill2 = valueOrDefault(fillOption && fillOption.target, fillOption);
  if (fill2 === void 0) {
    fill2 = !!options.backgroundColor;
  }
  if (fill2 === false || fill2 === null) {
    return false;
  }
  if (fill2 === true) {
    return "origin";
  }
  return fill2;
}
function _buildStackLine(source) {
  const { scale, index: index2, line } = source;
  const points = [];
  const segments = line.segments;
  const sourcePoints = line.points;
  const linesBelow = getLinesBelow(scale, index2);
  linesBelow.push(_createBoundaryLine({
    x: null,
    y: scale.bottom
  }, line));
  for (let i2 = 0; i2 < segments.length; i2++) {
    const segment = segments[i2];
    for (let j = segment.start; j <= segment.end; j++) {
      addPointsBelow(points, sourcePoints[j], linesBelow);
    }
  }
  return new LineElement({
    points,
    options: {}
  });
}
function getLinesBelow(scale, index2) {
  const below = [];
  const metas = scale.getMatchingVisibleMetas("line");
  for (let i2 = 0; i2 < metas.length; i2++) {
    const meta = metas[i2];
    if (meta.index === index2) {
      break;
    }
    if (!meta.hidden) {
      below.unshift(meta.dataset);
    }
  }
  return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
  const postponed = [];
  for (let j = 0; j < linesBelow.length; j++) {
    const line = linesBelow[j];
    const { first, last, point } = findPoint(line, sourcePoint, "x");
    if (!point || first && last) {
      continue;
    }
    if (first) {
      postponed.unshift(point);
    } else {
      points.push(point);
      if (!last) {
        break;
      }
    }
  }
  points.push(...postponed);
}
function findPoint(line, sourcePoint, property) {
  const point = line.interpolate(sourcePoint, property);
  if (!point) {
    return {};
  }
  const pointValue = point[property];
  const segments = line.segments;
  const linePoints = line.points;
  let first = false;
  let last = false;
  for (let i2 = 0; i2 < segments.length; i2++) {
    const segment = segments[i2];
    const firstValue = linePoints[segment.start][property];
    const lastValue = linePoints[segment.end][property];
    if (_isBetween(pointValue, firstValue, lastValue)) {
      first = pointValue === firstValue;
      last = pointValue === lastValue;
      break;
    }
  }
  return {
    first,
    last,
    point
  };
}
class simpleArc {
  constructor(opts) {
    this.x = opts.x;
    this.y = opts.y;
    this.radius = opts.radius;
  }
  pathSegment(ctx, bounds, opts) {
    const { x: x2, y: y3, radius } = this;
    bounds = bounds || {
      start: 0,
      end: TAU
    };
    ctx.arc(x2, y3, radius, bounds.end, bounds.start, true);
    return !opts.bounds;
  }
  interpolate(point) {
    const { x: x2, y: y3, radius } = this;
    const angle = point.angle;
    return {
      x: x2 + Math.cos(angle) * radius,
      y: y3 + Math.sin(angle) * radius,
      angle
    };
  }
}
function _getTarget(source) {
  const { chart, fill: fill2, line } = source;
  if (isNumberFinite(fill2)) {
    return getLineByIndex(chart, fill2);
  }
  if (fill2 === "stack") {
    return _buildStackLine(source);
  }
  if (fill2 === "shape") {
    return true;
  }
  const boundary = computeBoundary(source);
  if (boundary instanceof simpleArc) {
    return boundary;
  }
  return _createBoundaryLine(boundary, line);
}
function getLineByIndex(chart, index2) {
  const meta = chart.getDatasetMeta(index2);
  const visible = meta && chart.isDatasetVisible(index2);
  return visible ? meta.dataset : null;
}
function computeBoundary(source) {
  const scale = source.scale || {};
  if (scale.getPointPositionForValue) {
    return computeCircularBoundary(source);
  }
  return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
  const { scale = {}, fill: fill2 } = source;
  const pixel = _getTargetPixel(fill2, scale);
  if (isNumberFinite(pixel)) {
    const horizontal = scale.isHorizontal();
    return {
      x: horizontal ? pixel : null,
      y: horizontal ? null : pixel
    };
  }
  return null;
}
function computeCircularBoundary(source) {
  const { scale, fill: fill2 } = source;
  const options = scale.options;
  const length = scale.getLabels().length;
  const start = options.reverse ? scale.max : scale.min;
  const value = _getTargetValue(fill2, scale, start);
  const target = [];
  if (options.grid.circular) {
    const center = scale.getPointPositionForValue(0, start);
    return new simpleArc({
      x: center.x,
      y: center.y,
      radius: scale.getDistanceFromCenterForValue(value)
    });
  }
  for (let i2 = 0; i2 < length; ++i2) {
    target.push(scale.getPointPositionForValue(i2, value));
  }
  return target;
}
function _drawfill(ctx, source, area) {
  const target = _getTarget(source);
  const { chart, index: index2, line, scale, axis } = source;
  const lineOpts = line.options;
  const fillOption = lineOpts.fill;
  const color2 = lineOpts.backgroundColor;
  const { above = color2, below = color2 } = fillOption || {};
  const meta = chart.getDatasetMeta(index2);
  const clip = getDatasetClipArea(chart, meta);
  if (target && line.points.length) {
    clipArea(ctx, area);
    doFill(ctx, {
      line,
      target,
      above,
      below,
      area,
      scale,
      axis,
      clip
    });
    unclipArea(ctx);
  }
}
function doFill(ctx, cfg) {
  const { line, target, above, below, area, scale, clip } = cfg;
  const property = line._loop ? "angle" : cfg.axis;
  ctx.save();
  if (property === "x" && below !== above) {
    clipVertical(ctx, target, area.top);
    fill(ctx, {
      line,
      target,
      color: above,
      scale,
      property,
      clip
    });
    ctx.restore();
    ctx.save();
    clipVertical(ctx, target, area.bottom);
  }
  fill(ctx, {
    line,
    target,
    color: below,
    scale,
    property,
    clip
  });
  ctx.restore();
}
function clipVertical(ctx, target, clipY) {
  const { segments, points } = target;
  let first = true;
  let lineLoop = false;
  ctx.beginPath();
  for (const segment of segments) {
    const { start, end } = segment;
    const firstPoint = points[start];
    const lastPoint = points[_findSegmentEnd(start, end, points)];
    if (first) {
      ctx.moveTo(firstPoint.x, firstPoint.y);
      first = false;
    } else {
      ctx.lineTo(firstPoint.x, clipY);
      ctx.lineTo(firstPoint.x, firstPoint.y);
    }
    lineLoop = !!target.pathSegment(ctx, segment, {
      move: lineLoop
    });
    if (lineLoop) {
      ctx.closePath();
    } else {
      ctx.lineTo(lastPoint.x, clipY);
    }
  }
  ctx.lineTo(target.first().x, clipY);
  ctx.closePath();
  ctx.clip();
}
function fill(ctx, cfg) {
  const { line, target, property, color: color2, scale, clip } = cfg;
  const segments = _segments(line, target, property);
  for (const { source: src, target: tgt, start, end } of segments) {
    const { style: { backgroundColor = color2 } = {} } = src;
    const notShape = target !== true;
    ctx.save();
    ctx.fillStyle = backgroundColor;
    clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));
    ctx.beginPath();
    const lineLoop = !!line.pathSegment(ctx, src);
    let loop;
    if (notShape) {
      if (lineLoop) {
        ctx.closePath();
      } else {
        interpolatedLineTo(ctx, target, end, property);
      }
      const targetLoop = !!target.pathSegment(ctx, tgt, {
        move: lineLoop,
        reverse: true
      });
      loop = lineLoop && targetLoop;
      if (!loop) {
        interpolatedLineTo(ctx, target, start, property);
      }
    }
    ctx.closePath();
    ctx.fill(loop ? "evenodd" : "nonzero");
    ctx.restore();
  }
}
function clipBounds(ctx, scale, clip, bounds) {
  const chartArea = scale.chart.chartArea;
  const { property, start, end } = bounds || {};
  if (property === "x" || property === "y") {
    let left, top, right, bottom;
    if (property === "x") {
      left = start;
      top = chartArea.top;
      right = end;
      bottom = chartArea.bottom;
    } else {
      left = chartArea.left;
      top = start;
      right = chartArea.right;
      bottom = end;
    }
    ctx.beginPath();
    if (clip) {
      left = Math.max(left, clip.left);
      right = Math.min(right, clip.right);
      top = Math.max(top, clip.top);
      bottom = Math.min(bottom, clip.bottom);
    }
    ctx.rect(left, top, right - left, bottom - top);
    ctx.clip();
  }
}
function interpolatedLineTo(ctx, target, point, property) {
  const interpolatedPoint = target.interpolate(point, property);
  if (interpolatedPoint) {
    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
  }
}
var index = {
  id: "filler",
  afterDatasetsUpdate(chart, _args, options) {
    const count = (chart.data.datasets || []).length;
    const sources = [];
    let meta, i2, line, source;
    for (i2 = 0; i2 < count; ++i2) {
      meta = chart.getDatasetMeta(i2);
      line = meta.dataset;
      source = null;
      if (line && line.options && line instanceof LineElement) {
        source = {
          visible: chart.isDatasetVisible(i2),
          index: i2,
          fill: _decodeFill(line, i2, count),
          chart,
          axis: meta.controller.options.indexAxis,
          scale: meta.vScale,
          line
        };
      }
      meta.$filler = source;
      sources.push(source);
    }
    for (i2 = 0; i2 < count; ++i2) {
      source = sources[i2];
      if (!source || source.fill === false) {
        continue;
      }
      source.fill = _resolveTarget(sources, i2, options.propagate);
    }
  },
  beforeDraw(chart, _args, options) {
    const draw2 = options.drawTime === "beforeDraw";
    const metasets = chart.getSortedVisibleDatasetMetas();
    const area = chart.chartArea;
    for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
      const source = metasets[i2].$filler;
      if (!source) {
        continue;
      }
      source.line.updateControlPoints(area, source.axis);
      if (draw2 && source.fill) {
        _drawfill(chart.ctx, source, area);
      }
    }
  },
  beforeDatasetsDraw(chart, _args, options) {
    if (options.drawTime !== "beforeDatasetsDraw") {
      return;
    }
    const metasets = chart.getSortedVisibleDatasetMetas();
    for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
      const source = metasets[i2].$filler;
      if (_shouldApplyFill(source)) {
        _drawfill(chart.ctx, source, chart.chartArea);
      }
    }
  },
  beforeDatasetDraw(chart, args, options) {
    const source = args.meta.$filler;
    if (!_shouldApplyFill(source) || options.drawTime !== "beforeDatasetDraw") {
      return;
    }
    _drawfill(chart.ctx, source, chart.chartArea);
  },
  defaults: {
    propagate: true,
    drawTime: "beforeDatasetDraw"
  }
};
const getBoxSize = (labelOpts, fontSize) => {
  let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
  if (labelOpts.usePointStyle) {
    boxHeight = Math.min(boxHeight, fontSize);
    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
  }
  return {
    boxWidth,
    boxHeight,
    itemHeight: Math.max(fontSize, boxHeight)
  };
};
const itemsEqual = (a3, b2) => a3 !== null && b2 !== null && a3.datasetIndex === b2.datasetIndex && a3.index === b2.index;
class Legend extends Element$1 {
  constructor(config) {
    super();
    this._added = false;
    this.legendHitBoxes = [];
    this._hoveredItem = null;
    this.doughnutMode = false;
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this.legendItems = void 0;
    this.columnSizes = void 0;
    this.lineWidths = void 0;
    this.maxHeight = void 0;
    this.maxWidth = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.height = void 0;
    this.width = void 0;
    this._margins = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight, margins) {
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins;
    this.setDimensions();
    this.buildLabels();
    this.fit();
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = this._margins.left;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = this._margins.top;
      this.bottom = this.height;
    }
  }
  buildLabels() {
    const labelOpts = this.options.labels || {};
    let legendItems = callback(labelOpts.generateLabels, [
      this.chart
    ], this) || [];
    if (labelOpts.filter) {
      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));
    }
    if (labelOpts.sort) {
      legendItems = legendItems.sort((a3, b2) => labelOpts.sort(a3, b2, this.chart.data));
    }
    if (this.options.reverse) {
      legendItems.reverse();
    }
    this.legendItems = legendItems;
  }
  fit() {
    const { options, ctx } = this;
    if (!options.display) {
      this.width = this.height = 0;
      return;
    }
    const labelOpts = options.labels;
    const labelFont = toFont(labelOpts.font);
    const fontSize = labelFont.size;
    const titleHeight = this._computeTitleHeight();
    const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
    let width, height;
    ctx.font = labelFont.string;
    if (this.isHorizontal()) {
      width = this.maxWidth;
      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    } else {
      height = this.maxHeight;
      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
    }
    this.width = Math.min(width, options.maxWidth || this.maxWidth);
    this.height = Math.min(height, options.maxHeight || this.maxHeight);
  }
  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
    const { ctx, maxWidth, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const lineWidths = this.lineWidths = [
      0
    ];
    const lineHeight = itemHeight + padding;
    let totalHeight = titleHeight;
    ctx.textAlign = "left";
    ctx.textBaseline = "middle";
    let row = -1;
    let top = -lineHeight;
    this.legendItems.forEach((legendItem, i2) => {
      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
      if (i2 === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
        totalHeight += lineHeight;
        lineWidths[lineWidths.length - (i2 > 0 ? 0 : 1)] = 0;
        top += lineHeight;
        row++;
      }
      hitboxes[i2] = {
        left: 0,
        top,
        row,
        width: itemWidth,
        height: itemHeight
      };
      lineWidths[lineWidths.length - 1] += itemWidth + padding;
    });
    return totalHeight;
  }
  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
    const { ctx, maxHeight, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const columnSizes = this.columnSizes = [];
    const heightLimit = maxHeight - titleHeight;
    let totalWidth = padding;
    let currentColWidth = 0;
    let currentColHeight = 0;
    let left = 0;
    let col = 0;
    this.legendItems.forEach((legendItem, i2) => {
      const { itemWidth, itemHeight } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
      if (i2 > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
        totalWidth += currentColWidth + padding;
        columnSizes.push({
          width: currentColWidth,
          height: currentColHeight
        });
        left += currentColWidth + padding;
        col++;
        currentColWidth = currentColHeight = 0;
      }
      hitboxes[i2] = {
        left,
        top: currentColHeight,
        col,
        width: itemWidth,
        height: itemHeight
      };
      currentColWidth = Math.max(currentColWidth, itemWidth);
      currentColHeight += itemHeight + padding;
    });
    totalWidth += currentColWidth;
    columnSizes.push({
      width: currentColWidth,
      height: currentColHeight
    });
    return totalWidth;
  }
  adjustHitBoxes() {
    if (!this.options.display) {
      return;
    }
    const titleHeight = this._computeTitleHeight();
    const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
    if (this.isHorizontal()) {
      let row = 0;
      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
      for (const hitbox of hitboxes) {
        if (row !== hitbox.row) {
          row = hitbox.row;
          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
        }
        hitbox.top += this.top + titleHeight + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
        left += hitbox.width + padding;
      }
    } else {
      let col = 0;
      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
      for (const hitbox of hitboxes) {
        if (hitbox.col !== col) {
          col = hitbox.col;
          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
        }
        hitbox.top = top;
        hitbox.left += this.left + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
        top += hitbox.height + padding;
      }
    }
  }
  isHorizontal() {
    return this.options.position === "top" || this.options.position === "bottom";
  }
  draw() {
    if (this.options.display) {
      const ctx = this.ctx;
      clipArea(ctx, this);
      this._draw();
      unclipArea(ctx);
    }
  }
  _draw() {
    const { options: opts, columnSizes, lineWidths, ctx } = this;
    const { align, labels: labelOpts } = opts;
    const defaultColor2 = defaults.color;
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const labelFont = toFont(labelOpts.font);
    const { padding } = labelOpts;
    const fontSize = labelFont.size;
    const halfFontSize = fontSize / 2;
    let cursor;
    this.drawTitle();
    ctx.textAlign = rtlHelper.textAlign("left");
    ctx.textBaseline = "middle";
    ctx.lineWidth = 0.5;
    ctx.font = labelFont.string;
    const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
    const drawLegendBox = function(x2, y3, legendItem) {
      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
        return;
      }
      ctx.save();
      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor2);
      ctx.lineCap = valueOrDefault(legendItem.lineCap, "butt");
      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, "miter");
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor2);
      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
      if (labelOpts.usePointStyle) {
        const drawOptions = {
          radius: boxHeight * Math.SQRT2 / 2,
          pointStyle: legendItem.pointStyle,
          rotation: legendItem.rotation,
          borderWidth: lineWidth
        };
        const centerX = rtlHelper.xPlus(x2, boxWidth / 2);
        const centerY = y3 + halfFontSize;
        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
      } else {
        const yBoxTop = y3 + Math.max((fontSize - boxHeight) / 2, 0);
        const xBoxLeft = rtlHelper.leftForLtr(x2, boxWidth);
        const borderRadius = toTRBLCorners(legendItem.borderRadius);
        ctx.beginPath();
        if (Object.values(borderRadius).some((v) => v !== 0)) {
          addRoundedRectPath(ctx, {
            x: xBoxLeft,
            y: yBoxTop,
            w: boxWidth,
            h: boxHeight,
            radius: borderRadius
          });
        } else {
          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
        }
        ctx.fill();
        if (lineWidth !== 0) {
          ctx.stroke();
        }
      }
      ctx.restore();
    };
    const fillText = function(x2, y3, legendItem) {
      renderText(ctx, legendItem.text, x2, y3 + itemHeight / 2, labelFont, {
        strikethrough: legendItem.hidden,
        textAlign: rtlHelper.textAlign(legendItem.textAlign)
      });
    };
    const isHorizontal = this.isHorizontal();
    const titleHeight = this._computeTitleHeight();
    if (isHorizontal) {
      cursor = {
        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
        y: this.top + padding + titleHeight,
        line: 0
      };
    } else {
      cursor = {
        x: this.left + padding,
        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
        line: 0
      };
    }
    overrideTextDirection(this.ctx, opts.textDirection);
    const lineHeight = itemHeight + padding;
    this.legendItems.forEach((legendItem, i2) => {
      ctx.strokeStyle = legendItem.fontColor;
      ctx.fillStyle = legendItem.fontColor;
      const textWidth = ctx.measureText(legendItem.text).width;
      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
      const width = boxWidth + halfFontSize + textWidth;
      let x2 = cursor.x;
      let y3 = cursor.y;
      rtlHelper.setWidth(this.width);
      if (isHorizontal) {
        if (i2 > 0 && x2 + width + padding > this.right) {
          y3 = cursor.y += lineHeight;
          cursor.line++;
          x2 = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);
        }
      } else if (i2 > 0 && y3 + lineHeight > this.bottom) {
        x2 = cursor.x = x2 + columnSizes[cursor.line].width + padding;
        cursor.line++;
        y3 = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
      }
      const realX = rtlHelper.x(x2);
      drawLegendBox(realX, y3, legendItem);
      x2 = _textX(textAlign, x2 + boxWidth + halfFontSize, isHorizontal ? x2 + width : this.right, opts.rtl);
      fillText(rtlHelper.x(x2), y3, legendItem);
      if (isHorizontal) {
        cursor.x += width + padding;
      } else if (typeof legendItem.text !== "string") {
        const fontLineHeight = labelFont.lineHeight;
        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
      } else {
        cursor.y += lineHeight;
      }
    });
    restoreTextDirection(this.ctx, opts.textDirection);
  }
  drawTitle() {
    const opts = this.options;
    const titleOpts = opts.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    if (!titleOpts.display) {
      return;
    }
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const ctx = this.ctx;
    const position = titleOpts.position;
    const halfFontSize = titleFont.size / 2;
    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
    let y3;
    let left = this.left;
    let maxWidth = this.width;
    if (this.isHorizontal()) {
      maxWidth = Math.max(...this.lineWidths);
      y3 = this.top + topPaddingPlusHalfFontSize;
      left = _alignStartEnd(opts.align, left, this.right - maxWidth);
    } else {
      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
      y3 = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
    }
    const x2 = _alignStartEnd(position, left, left + maxWidth);
    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
    ctx.textBaseline = "middle";
    ctx.strokeStyle = titleOpts.color;
    ctx.fillStyle = titleOpts.color;
    ctx.font = titleFont.string;
    renderText(ctx, titleOpts.text, x2, y3, titleFont);
  }
  _computeTitleHeight() {
    const titleOpts = this.options.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
  }
  _getLegendItemAt(x2, y3) {
    let i2, hitBox, lh;
    if (_isBetween(x2, this.left, this.right) && _isBetween(y3, this.top, this.bottom)) {
      lh = this.legendHitBoxes;
      for (i2 = 0; i2 < lh.length; ++i2) {
        hitBox = lh[i2];
        if (_isBetween(x2, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y3, hitBox.top, hitBox.top + hitBox.height)) {
          return this.legendItems[i2];
        }
      }
    }
    return null;
  }
  handleEvent(e2) {
    const opts = this.options;
    if (!isListened(e2.type, opts)) {
      return;
    }
    const hoveredItem = this._getLegendItemAt(e2.x, e2.y);
    if (e2.type === "mousemove" || e2.type === "mouseout") {
      const previous = this._hoveredItem;
      const sameItem = itemsEqual(previous, hoveredItem);
      if (previous && !sameItem) {
        callback(opts.onLeave, [
          e2,
          previous,
          this
        ], this);
      }
      this._hoveredItem = hoveredItem;
      if (hoveredItem && !sameItem) {
        callback(opts.onHover, [
          e2,
          hoveredItem,
          this
        ], this);
      }
    } else if (hoveredItem) {
      callback(opts.onClick, [
        e2,
        hoveredItem,
        this
      ], this);
    }
  }
}
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
  return {
    itemWidth,
    itemHeight
  };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
  let legendItemText = legendItem.text;
  if (legendItemText && typeof legendItemText !== "string") {
    legendItemText = legendItemText.reduce((a3, b2) => a3.length > b2.length ? a3 : b2);
  }
  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
  let itemHeight = _itemHeight;
  if (typeof legendItem.text !== "string") {
    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
  }
  return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
  const labelHeight = legendItem.text ? legendItem.text.length : 0;
  return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
  if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) {
    return true;
  }
  if (opts.onClick && (type === "click" || type === "mouseup")) {
    return true;
  }
  return false;
}
var plugin_legend = {
  id: "legend",
  _element: Legend,
  start(chart, _args, options) {
    const legend = chart.legend = new Legend({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, legend, options);
    layouts.addBox(chart, legend);
  },
  stop(chart) {
    layouts.removeBox(chart, chart.legend);
    delete chart.legend;
  },
  beforeUpdate(chart, _args, options) {
    const legend = chart.legend;
    layouts.configure(chart, legend, options);
    legend.options = options;
  },
  afterUpdate(chart) {
    const legend = chart.legend;
    legend.buildLabels();
    legend.adjustHitBoxes();
  },
  afterEvent(chart, args) {
    if (!args.replay) {
      chart.legend.handleEvent(args.event);
    }
  },
  defaults: {
    display: true,
    position: "top",
    align: "center",
    fullSize: true,
    reverse: false,
    weight: 1e3,
    onClick(e2, legendItem, legend) {
      const index2 = legendItem.datasetIndex;
      const ci = legend.chart;
      if (ci.isDatasetVisible(index2)) {
        ci.hide(index2);
        legendItem.hidden = true;
      } else {
        ci.show(index2);
        legendItem.hidden = false;
      }
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: (ctx) => ctx.chart.options.color,
      boxWidth: 40,
      padding: 10,
      generateLabels(chart) {
        const datasets = chart.data.datasets;
        const { labels: { usePointStyle, pointStyle, textAlign, color: color2, useBorderRadius, borderRadius } } = chart.legend.options;
        return chart._getSortedDatasetMetas().map((meta) => {
          const style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
          const borderWidth = toPadding(style.borderWidth);
          return {
            text: datasets[meta.index].label,
            fillStyle: style.backgroundColor,
            fontColor: color2,
            hidden: !meta.visible,
            lineCap: style.borderCapStyle,
            lineDash: style.borderDash,
            lineDashOffset: style.borderDashOffset,
            lineJoin: style.borderJoinStyle,
            lineWidth: (borderWidth.width + borderWidth.height) / 4,
            strokeStyle: style.borderColor,
            pointStyle: pointStyle || style.pointStyle,
            rotation: style.rotation,
            textAlign: textAlign || style.textAlign,
            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
            datasetIndex: meta.index
          };
        }, this);
      }
    },
    title: {
      color: (ctx) => ctx.chart.options.color,
      display: false,
      position: "center",
      text: ""
    }
  },
  descriptors: {
    _scriptable: (name) => !name.startsWith("on"),
    labels: {
      _scriptable: (name) => ![
        "generateLabels",
        "filter",
        "sort"
      ].includes(name)
    }
  }
};
class Title extends Element$1 {
  constructor(config) {
    super();
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this._padding = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight) {
    const opts = this.options;
    this.left = 0;
    this.top = 0;
    if (!opts.display) {
      this.width = this.height = this.right = this.bottom = 0;
      return;
    }
    this.width = this.right = maxWidth;
    this.height = this.bottom = maxHeight;
    const lineCount = isArray(opts.text) ? opts.text.length : 1;
    this._padding = toPadding(opts.padding);
    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
    if (this.isHorizontal()) {
      this.height = textSize;
    } else {
      this.width = textSize;
    }
  }
  isHorizontal() {
    const pos = this.options.position;
    return pos === "top" || pos === "bottom";
  }
  _drawArgs(offset) {
    const { top, left, bottom, right, options } = this;
    const align = options.align;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    if (this.isHorizontal()) {
      titleX = _alignStartEnd(align, left, right);
      titleY = top + offset;
      maxWidth = right - left;
    } else {
      if (options.position === "left") {
        titleX = left + offset;
        titleY = _alignStartEnd(align, bottom, top);
        rotation = PI * -0.5;
      } else {
        titleX = right - offset;
        titleY = _alignStartEnd(align, top, bottom);
        rotation = PI * 0.5;
      }
      maxWidth = bottom - top;
    }
    return {
      titleX,
      titleY,
      maxWidth,
      rotation
    };
  }
  draw() {
    const ctx = this.ctx;
    const opts = this.options;
    if (!opts.display) {
      return;
    }
    const fontOpts = toFont(opts.font);
    const lineHeight = fontOpts.lineHeight;
    const offset = lineHeight / 2 + this._padding.top;
    const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
    renderText(ctx, opts.text, 0, 0, fontOpts, {
      color: opts.color,
      maxWidth,
      rotation,
      textAlign: _toLeftRightCenter(opts.align),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
}
function createTitle(chart, titleOpts) {
  const title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}
var plugin_title = {
  id: "title",
  _element: Title,
  start(chart, _args, options) {
    createTitle(chart, options);
  },
  stop(chart) {
    const titleBlock = chart.titleBlock;
    layouts.removeBox(chart, titleBlock);
    delete chart.titleBlock;
  },
  beforeUpdate(chart, _args, options) {
    const title = chart.titleBlock;
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "bold"
    },
    fullSize: true,
    padding: 10,
    position: "top",
    text: "",
    weight: 2e3
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
const map = /* @__PURE__ */ new WeakMap();
var plugin_subtitle = {
  id: "subtitle",
  start(chart, _args, options) {
    const title = new Title({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, title, options);
    layouts.addBox(chart, title);
    map.set(chart, title);
  },
  stop(chart) {
    layouts.removeBox(chart, map.get(chart));
    map.delete(chart);
  },
  beforeUpdate(chart, _args, options) {
    const title = map.get(chart);
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "normal"
    },
    fullSize: true,
    padding: 0,
    position: "top",
    text: "",
    weight: 1500
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
const positioners = {
  average(items) {
    if (!items.length) {
      return false;
    }
    let i2, len;
    let xSet = /* @__PURE__ */ new Set();
    let y3 = 0;
    let count = 0;
    for (i2 = 0, len = items.length; i2 < len; ++i2) {
      const el = items[i2].element;
      if (el && el.hasValue()) {
        const pos = el.tooltipPosition();
        xSet.add(pos.x);
        y3 += pos.y;
        ++count;
      }
    }
    if (count === 0 || xSet.size === 0) {
      return false;
    }
    const xAverage = [
      ...xSet
    ].reduce((a3, b2) => a3 + b2) / xSet.size;
    return {
      x: xAverage,
      y: y3 / count
    };
  },
  nearest(items, eventPosition) {
    if (!items.length) {
      return false;
    }
    let x2 = eventPosition.x;
    let y3 = eventPosition.y;
    let minDistance = Number.POSITIVE_INFINITY;
    let i2, len, nearestElement;
    for (i2 = 0, len = items.length; i2 < len; ++i2) {
      const el = items[i2].element;
      if (el && el.hasValue()) {
        const center = el.getCenterPoint();
        const d3 = distanceBetweenPoints(eventPosition, center);
        if (d3 < minDistance) {
          minDistance = d3;
          nearestElement = el;
        }
      }
    }
    if (nearestElement) {
      const tp = nearestElement.tooltipPosition();
      x2 = tp.x;
      y3 = tp.y;
    }
    return {
      x: x2,
      y: y3
    };
  }
};
function pushOrConcat(base2, toPush) {
  if (toPush) {
    if (isArray(toPush)) {
      Array.prototype.push.apply(base2, toPush);
    } else {
      base2.push(toPush);
    }
  }
  return base2;
}
function splitNewlines(str) {
  if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
    return str.split("\n");
  }
  return str;
}
function createTooltipItem(chart, item) {
  const { element: element2, datasetIndex, index: index2 } = item;
  const controller = chart.getDatasetMeta(datasetIndex).controller;
  const { label, value } = controller.getLabelAndValue(index2);
  return {
    chart,
    label,
    parsed: controller.getParsed(index2),
    raw: chart.data.datasets[datasetIndex].data[index2],
    formattedValue: value,
    dataset: controller.getDataset(),
    dataIndex: index2,
    datasetIndex,
    element: element2
  };
}
function getTooltipSize(tooltip, options) {
  const ctx = tooltip.chart.ctx;
  const { body, footer, title } = tooltip;
  const { boxWidth, boxHeight } = options;
  const bodyFont = toFont(options.bodyFont);
  const titleFont = toFont(options.titleFont);
  const footerFont = toFont(options.footerFont);
  const titleLineCount = title.length;
  const footerLineCount = footer.length;
  const bodyLineItemCount = body.length;
  const padding = toPadding(options.padding);
  let height = padding.height;
  let width = 0;
  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
  if (titleLineCount) {
    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
  }
  if (combinedBodyLength) {
    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
  }
  if (footerLineCount) {
    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
  }
  let widthPadding = 0;
  const maxLineWidth = function(line) {
    width = Math.max(width, ctx.measureText(line).width + widthPadding);
  };
  ctx.save();
  ctx.font = titleFont.string;
  each(tooltip.title, maxLineWidth);
  ctx.font = bodyFont.string;
  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
  each(body, (bodyItem) => {
    each(bodyItem.before, maxLineWidth);
    each(bodyItem.lines, maxLineWidth);
    each(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = footerFont.string;
  each(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += padding.width;
  return {
    width,
    height
  };
}
function determineYAlign(chart, size) {
  const { y: y3, height } = size;
  if (y3 < height / 2) {
    return "top";
  } else if (y3 > chart.height - height / 2) {
    return "bottom";
  }
  return "center";
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
  const { x: x2, width } = size;
  const caret = options.caretSize + options.caretPadding;
  if (xAlign === "left" && x2 + width + caret > chart.width) {
    return true;
  }
  if (xAlign === "right" && x2 - width - caret < 0) {
    return true;
  }
}
function determineXAlign(chart, options, size, yAlign) {
  const { x: x2, width } = size;
  const { width: chartWidth, chartArea: { left, right } } = chart;
  let xAlign = "center";
  if (yAlign === "center") {
    xAlign = x2 <= (left + right) / 2 ? "left" : "right";
  } else if (x2 <= width / 2) {
    xAlign = "left";
  } else if (x2 >= chartWidth - width / 2) {
    xAlign = "right";
  }
  if (doesNotFitWithAlign(xAlign, chart, options, size)) {
    xAlign = "center";
  }
  return xAlign;
}
function determineAlignment(chart, options, size) {
  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
  return {
    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
    yAlign
  };
}
function alignX(size, xAlign) {
  let { x: x2, width } = size;
  if (xAlign === "right") {
    x2 -= width;
  } else if (xAlign === "center") {
    x2 -= width / 2;
  }
  return x2;
}
function alignY(size, yAlign, paddingAndSize) {
  let { y: y3, height } = size;
  if (yAlign === "top") {
    y3 += paddingAndSize;
  } else if (yAlign === "bottom") {
    y3 -= height + paddingAndSize;
  } else {
    y3 -= height / 2;
  }
  return y3;
}
function getBackgroundPoint(options, size, alignment, chart) {
  const { caretSize, caretPadding, cornerRadius } = options;
  const { xAlign, yAlign } = alignment;
  const paddingAndSize = caretSize + caretPadding;
  const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
  let x2 = alignX(size, xAlign);
  const y3 = alignY(size, yAlign, paddingAndSize);
  if (yAlign === "center") {
    if (xAlign === "left") {
      x2 += paddingAndSize;
    } else if (xAlign === "right") {
      x2 -= paddingAndSize;
    }
  } else if (xAlign === "left") {
    x2 -= Math.max(topLeft, bottomLeft) + caretSize;
  } else if (xAlign === "right") {
    x2 += Math.max(topRight, bottomRight) + caretSize;
  }
  return {
    x: _limitValue(x2, 0, chart.width - size.width),
    y: _limitValue(y3, 0, chart.height - size.height)
  };
}
function getAlignedX(tooltip, align, options) {
  const padding = toPadding(options.padding);
  return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback2) {
  return pushOrConcat([], splitNewlines(callback2));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
  return createContext(parent, {
    tooltip,
    tooltipItems,
    type: "tooltip"
  });
}
function overrideCallbacks(callbacks, context) {
  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
  return override ? callbacks.override(override) : callbacks;
}
const defaultCallbacks = {
  beforeTitle: noop,
  title(tooltipItems) {
    if (tooltipItems.length > 0) {
      const item = tooltipItems[0];
      const labels = item.chart.data.labels;
      const labelCount = labels ? labels.length : 0;
      if (this && this.options && this.options.mode === "dataset") {
        return item.dataset.label || "";
      } else if (item.label) {
        return item.label;
      } else if (labelCount > 0 && item.dataIndex < labelCount) {
        return labels[item.dataIndex];
      }
    }
    return "";
  },
  afterTitle: noop,
  beforeBody: noop,
  beforeLabel: noop,
  label(tooltipItem) {
    if (this && this.options && this.options.mode === "dataset") {
      return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
    }
    let label = tooltipItem.dataset.label || "";
    if (label) {
      label += ": ";
    }
    const value = tooltipItem.formattedValue;
    if (!isNullOrUndef(value)) {
      label += value;
    }
    return label;
  },
  labelColor(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      borderColor: options.borderColor,
      backgroundColor: options.backgroundColor,
      borderWidth: options.borderWidth,
      borderDash: options.borderDash,
      borderDashOffset: options.borderDashOffset,
      borderRadius: 0
    };
  },
  labelTextColor() {
    return this.options.bodyColor;
  },
  labelPointStyle(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      pointStyle: options.pointStyle,
      rotation: options.rotation
    };
  },
  afterLabel: noop,
  afterBody: noop,
  beforeFooter: noop,
  footer: noop,
  afterFooter: noop
};
function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
  const result = callbacks[name].call(ctx, arg);
  if (typeof result === "undefined") {
    return defaultCallbacks[name].call(ctx, arg);
  }
  return result;
}
class Tooltip extends Element$1 {
  constructor(config) {
    super();
    this.opacity = 0;
    this._active = [];
    this._eventPosition = void 0;
    this._size = void 0;
    this._cachedAnimations = void 0;
    this._tooltipItems = [];
    this.$animations = void 0;
    this.$context = void 0;
    this.chart = config.chart;
    this.options = config.options;
    this.dataPoints = void 0;
    this.title = void 0;
    this.beforeBody = void 0;
    this.body = void 0;
    this.afterBody = void 0;
    this.footer = void 0;
    this.xAlign = void 0;
    this.yAlign = void 0;
    this.x = void 0;
    this.y = void 0;
    this.height = void 0;
    this.width = void 0;
    this.caretX = void 0;
    this.caretY = void 0;
    this.labelColors = void 0;
    this.labelPointStyles = void 0;
    this.labelTextColors = void 0;
  }
  initialize(options) {
    this.options = options;
    this._cachedAnimations = void 0;
    this.$context = void 0;
  }
  _resolveAnimations() {
    const cached = this._cachedAnimations;
    if (cached) {
      return cached;
    }
    const chart = this.chart;
    const options = this.options.setContext(this.getContext());
    const opts = options.enabled && chart.options.animation && options.animations;
    const animations = new Animations(this.chart, opts);
    if (opts._cacheable) {
      this._cachedAnimations = Object.freeze(animations);
    }
    return animations;
  }
  getContext() {
    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
  }
  getTitle(context, options) {
    const { callbacks } = options;
    const beforeTitle = invokeCallbackWithFallback(callbacks, "beforeTitle", this, context);
    const title = invokeCallbackWithFallback(callbacks, "title", this, context);
    const afterTitle = invokeCallbackWithFallback(callbacks, "afterTitle", this, context);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    lines = pushOrConcat(lines, splitNewlines(title));
    lines = pushOrConcat(lines, splitNewlines(afterTitle));
    return lines;
  }
  getBeforeBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "beforeBody", this, tooltipItems));
  }
  getBody(tooltipItems, options) {
    const { callbacks } = options;
    const bodyItems = [];
    each(tooltipItems, (context) => {
      const bodyItem = {
        before: [],
        lines: [],
        after: []
      };
      const scoped = overrideCallbacks(callbacks, context);
      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, "beforeLabel", this, context)));
      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, "label", this, context));
      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, "afterLabel", this, context)));
      bodyItems.push(bodyItem);
    });
    return bodyItems;
  }
  getAfterBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "afterBody", this, tooltipItems));
  }
  getFooter(tooltipItems, options) {
    const { callbacks } = options;
    const beforeFooter = invokeCallbackWithFallback(callbacks, "beforeFooter", this, tooltipItems);
    const footer = invokeCallbackWithFallback(callbacks, "footer", this, tooltipItems);
    const afterFooter = invokeCallbackWithFallback(callbacks, "afterFooter", this, tooltipItems);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    lines = pushOrConcat(lines, splitNewlines(footer));
    lines = pushOrConcat(lines, splitNewlines(afterFooter));
    return lines;
  }
  _createItems(options) {
    const active = this._active;
    const data = this.chart.data;
    const labelColors = [];
    const labelPointStyles = [];
    const labelTextColors = [];
    let tooltipItems = [];
    let i2, len;
    for (i2 = 0, len = active.length; i2 < len; ++i2) {
      tooltipItems.push(createTooltipItem(this.chart, active[i2]));
    }
    if (options.filter) {
      tooltipItems = tooltipItems.filter((element2, index2, array) => options.filter(element2, index2, array, data));
    }
    if (options.itemSort) {
      tooltipItems = tooltipItems.sort((a3, b2) => options.itemSort(a3, b2, data));
    }
    each(tooltipItems, (context) => {
      const scoped = overrideCallbacks(options.callbacks, context);
      labelColors.push(invokeCallbackWithFallback(scoped, "labelColor", this, context));
      labelPointStyles.push(invokeCallbackWithFallback(scoped, "labelPointStyle", this, context));
      labelTextColors.push(invokeCallbackWithFallback(scoped, "labelTextColor", this, context));
    });
    this.labelColors = labelColors;
    this.labelPointStyles = labelPointStyles;
    this.labelTextColors = labelTextColors;
    this.dataPoints = tooltipItems;
    return tooltipItems;
  }
  update(changed, replay) {
    const options = this.options.setContext(this.getContext());
    const active = this._active;
    let properties;
    let tooltipItems = [];
    if (!active.length) {
      if (this.opacity !== 0) {
        properties = {
          opacity: 0
        };
      }
    } else {
      const position = positioners[options.position].call(this, active, this._eventPosition);
      tooltipItems = this._createItems(options);
      this.title = this.getTitle(tooltipItems, options);
      this.beforeBody = this.getBeforeBody(tooltipItems, options);
      this.body = this.getBody(tooltipItems, options);
      this.afterBody = this.getAfterBody(tooltipItems, options);
      this.footer = this.getFooter(tooltipItems, options);
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, size);
      const alignment = determineAlignment(this.chart, options, positionAndSize);
      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
      this.xAlign = alignment.xAlign;
      this.yAlign = alignment.yAlign;
      properties = {
        opacity: 1,
        x: backgroundPoint.x,
        y: backgroundPoint.y,
        width: size.width,
        height: size.height,
        caretX: position.x,
        caretY: position.y
      };
    }
    this._tooltipItems = tooltipItems;
    this.$context = void 0;
    if (properties) {
      this._resolveAnimations().update(this, properties);
    }
    if (changed && options.external) {
      options.external.call(this, {
        chart: this.chart,
        tooltip: this,
        replay
      });
    }
  }
  drawCaret(tooltipPoint, ctx, size, options) {
    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
    ctx.lineTo(caretPosition.x1, caretPosition.y1);
    ctx.lineTo(caretPosition.x2, caretPosition.y2);
    ctx.lineTo(caretPosition.x3, caretPosition.y3);
  }
  getCaretPosition(tooltipPoint, size, options) {
    const { xAlign, yAlign } = this;
    const { caretSize, cornerRadius } = options;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
    const { x: ptX, y: ptY } = tooltipPoint;
    const { width, height } = size;
    let x1, x2, x3, y1, y22, y3;
    if (yAlign === "center") {
      y22 = ptY + height / 2;
      if (xAlign === "left") {
        x1 = ptX;
        x2 = x1 - caretSize;
        y1 = y22 + caretSize;
        y3 = y22 - caretSize;
      } else {
        x1 = ptX + width;
        x2 = x1 + caretSize;
        y1 = y22 - caretSize;
        y3 = y22 + caretSize;
      }
      x3 = x1;
    } else {
      if (xAlign === "left") {
        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
      } else if (xAlign === "right") {
        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
      } else {
        x2 = this.caretX;
      }
      if (yAlign === "top") {
        y1 = ptY;
        y22 = y1 - caretSize;
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
      } else {
        y1 = ptY + height;
        y22 = y1 + caretSize;
        x1 = x2 + caretSize;
        x3 = x2 - caretSize;
      }
      y3 = y1;
    }
    return {
      x1,
      x2,
      x3,
      y1,
      y2: y22,
      y3
    };
  }
  drawTitle(pt, ctx, options) {
    const title = this.title;
    const length = title.length;
    let titleFont, titleSpacing, i2;
    if (length) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.titleAlign, options);
      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
      ctx.textBaseline = "middle";
      titleFont = toFont(options.titleFont);
      titleSpacing = options.titleSpacing;
      ctx.fillStyle = options.titleColor;
      ctx.font = titleFont.string;
      for (i2 = 0; i2 < length; ++i2) {
        ctx.fillText(title[i2], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
        pt.y += titleFont.lineHeight + titleSpacing;
        if (i2 + 1 === length) {
          pt.y += options.titleMarginBottom - titleSpacing;
        }
      }
    }
  }
  _drawColorBox(ctx, pt, i2, rtlHelper, options) {
    const labelColor = this.labelColors[i2];
    const labelPointStyle = this.labelPointStyles[i2];
    const { boxHeight, boxWidth } = options;
    const bodyFont = toFont(options.bodyFont);
    const colorX = getAlignedX(this, "left", options);
    const rtlColorX = rtlHelper.x(colorX);
    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
    const colorY = pt.y + yOffSet;
    if (options.usePointStyle) {
      const drawOptions = {
        radius: Math.min(boxWidth, boxHeight) / 2,
        pointStyle: labelPointStyle.pointStyle,
        rotation: labelPointStyle.rotation,
        borderWidth: 1
      };
      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
      const centerY = colorY + boxHeight / 2;
      ctx.strokeStyle = options.multiKeyBackground;
      ctx.fillStyle = options.multiKeyBackground;
      drawPoint(ctx, drawOptions, centerX, centerY);
      ctx.strokeStyle = labelColor.borderColor;
      ctx.fillStyle = labelColor.backgroundColor;
      drawPoint(ctx, drawOptions, centerX, centerY);
    } else {
      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
      ctx.strokeStyle = labelColor.borderColor;
      ctx.setLineDash(labelColor.borderDash || []);
      ctx.lineDashOffset = labelColor.borderDashOffset || 0;
      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
      const borderRadius = toTRBLCorners(labelColor.borderRadius);
      if (Object.values(borderRadius).some((v) => v !== 0)) {
        ctx.beginPath();
        ctx.fillStyle = options.multiKeyBackground;
        addRoundedRectPath(ctx, {
          x: outerX,
          y: colorY,
          w: boxWidth,
          h: boxHeight,
          radius: borderRadius
        });
        ctx.fill();
        ctx.stroke();
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.beginPath();
        addRoundedRectPath(ctx, {
          x: innerX,
          y: colorY + 1,
          w: boxWidth - 2,
          h: boxHeight - 2,
          radius: borderRadius
        });
        ctx.fill();
      } else {
        ctx.fillStyle = options.multiKeyBackground;
        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
      }
    }
    ctx.fillStyle = this.labelTextColors[i2];
  }
  drawBody(pt, ctx, options) {
    const { body } = this;
    const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options;
    const bodyFont = toFont(options.bodyFont);
    let bodyLineHeight = bodyFont.lineHeight;
    let xLinePadding = 0;
    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
    const fillLineOfText = function(line) {
      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
      pt.y += bodyLineHeight + bodySpacing;
    };
    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
    let bodyItem, textColor, lines, i2, j, ilen, jlen;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = "middle";
    ctx.font = bodyFont.string;
    pt.x = getAlignedX(this, bodyAlignForCalculation, options);
    ctx.fillStyle = options.bodyColor;
    each(this.beforeBody, fillLineOfText);
    xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
    for (i2 = 0, ilen = body.length; i2 < ilen; ++i2) {
      bodyItem = body[i2];
      textColor = this.labelTextColors[i2];
      ctx.fillStyle = textColor;
      each(bodyItem.before, fillLineOfText);
      lines = bodyItem.lines;
      if (displayColors && lines.length) {
        this._drawColorBox(ctx, pt, i2, rtlHelper, options);
        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
      }
      for (j = 0, jlen = lines.length; j < jlen; ++j) {
        fillLineOfText(lines[j]);
        bodyLineHeight = bodyFont.lineHeight;
      }
      each(bodyItem.after, fillLineOfText);
    }
    xLinePadding = 0;
    bodyLineHeight = bodyFont.lineHeight;
    each(this.afterBody, fillLineOfText);
    pt.y -= bodySpacing;
  }
  drawFooter(pt, ctx, options) {
    const footer = this.footer;
    const length = footer.length;
    let footerFont, i2;
    if (length) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.footerAlign, options);
      pt.y += options.footerMarginTop;
      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
      ctx.textBaseline = "middle";
      footerFont = toFont(options.footerFont);
      ctx.fillStyle = options.footerColor;
      ctx.font = footerFont.string;
      for (i2 = 0; i2 < length; ++i2) {
        ctx.fillText(footer[i2], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
        pt.y += footerFont.lineHeight + options.footerSpacing;
      }
    }
  }
  drawBackground(pt, ctx, tooltipSize, options) {
    const { xAlign, yAlign } = this;
    const { x: x2, y: y3 } = pt;
    const { width, height } = tooltipSize;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(options.cornerRadius);
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.beginPath();
    ctx.moveTo(x2 + topLeft, y3);
    if (yAlign === "top") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + width - topRight, y3);
    ctx.quadraticCurveTo(x2 + width, y3, x2 + width, y3 + topRight);
    if (yAlign === "center" && xAlign === "right") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + width, y3 + height - bottomRight);
    ctx.quadraticCurveTo(x2 + width, y3 + height, x2 + width - bottomRight, y3 + height);
    if (yAlign === "bottom") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + bottomLeft, y3 + height);
    ctx.quadraticCurveTo(x2, y3 + height, x2, y3 + height - bottomLeft);
    if (yAlign === "center" && xAlign === "left") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2, y3 + topLeft);
    ctx.quadraticCurveTo(x2, y3, x2 + topLeft, y3);
    ctx.closePath();
    ctx.fill();
    if (options.borderWidth > 0) {
      ctx.stroke();
    }
  }
  _updateAnimationTarget(options) {
    const chart = this.chart;
    const anims = this.$animations;
    const animX = anims && anims.x;
    const animY = anims && anims.y;
    if (animX || animY) {
      const position = positioners[options.position].call(this, this._active, this._eventPosition);
      if (!position) {
        return;
      }
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, this._size);
      const alignment = determineAlignment(chart, options, positionAndSize);
      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
      if (animX._to !== point.x || animY._to !== point.y) {
        this.xAlign = alignment.xAlign;
        this.yAlign = alignment.yAlign;
        this.width = size.width;
        this.height = size.height;
        this.caretX = position.x;
        this.caretY = position.y;
        this._resolveAnimations().update(this, point);
      }
    }
  }
  _willRender() {
    return !!this.opacity;
  }
  draw(ctx) {
    const options = this.options.setContext(this.getContext());
    let opacity = this.opacity;
    if (!opacity) {
      return;
    }
    this._updateAnimationTarget(options);
    const tooltipSize = {
      width: this.width,
      height: this.height
    };
    const pt = {
      x: this.x,
      y: this.y
    };
    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
    const padding = toPadding(options.padding);
    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
    if (options.enabled && hasTooltipContent) {
      ctx.save();
      ctx.globalAlpha = opacity;
      this.drawBackground(pt, ctx, tooltipSize, options);
      overrideTextDirection(ctx, options.textDirection);
      pt.y += padding.top;
      this.drawTitle(pt, ctx, options);
      this.drawBody(pt, ctx, options);
      this.drawFooter(pt, ctx, options);
      restoreTextDirection(ctx, options.textDirection);
      ctx.restore();
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements, eventPosition) {
    const lastActive = this._active;
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.chart.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("Cannot find a dataset at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(lastActive, active);
    const positionChanged = this._positionChanged(active, eventPosition);
    if (changed || positionChanged) {
      this._active = active;
      this._eventPosition = eventPosition;
      this._ignoreReplayEvents = true;
      this.update(true);
    }
  }
  handleEvent(e2, replay, inChartArea = true) {
    if (replay && this._ignoreReplayEvents) {
      return false;
    }
    this._ignoreReplayEvents = false;
    const options = this.options;
    const lastActive = this._active || [];
    const active = this._getActiveElements(e2, lastActive, replay, inChartArea);
    const positionChanged = this._positionChanged(active, e2);
    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
    if (changed) {
      this._active = active;
      if (options.enabled || options.external) {
        this._eventPosition = {
          x: e2.x,
          y: e2.y
        };
        this.update(true, replay);
      }
    }
    return changed;
  }
  _getActiveElements(e2, lastActive, replay, inChartArea) {
    const options = this.options;
    if (e2.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive.filter((i2) => this.chart.data.datasets[i2.datasetIndex] && this.chart.getDatasetMeta(i2.datasetIndex).controller.getParsed(i2.index) !== void 0);
    }
    const active = this.chart.getElementsAtEventForMode(e2, options.mode, options, replay);
    if (options.reverse) {
      active.reverse();
    }
    return active;
  }
  _positionChanged(active, e2) {
    const { caretX, caretY, options } = this;
    const position = positioners[options.position].call(this, active, e2);
    return position !== false && (caretX !== position.x || caretY !== position.y);
  }
}
__publicField(Tooltip, "positioners", positioners);
var plugin_tooltip = {
  id: "tooltip",
  _element: Tooltip,
  positioners,
  afterInit(chart, _args, options) {
    if (options) {
      chart.tooltip = new Tooltip({
        chart,
        options
      });
    }
  },
  beforeUpdate(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  reset(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  afterDraw(chart) {
    const tooltip = chart.tooltip;
    if (tooltip && tooltip._willRender()) {
      const args = {
        tooltip
      };
      if (chart.notifyPlugins("beforeTooltipDraw", {
        ...args,
        cancelable: true
      }) === false) {
        return;
      }
      tooltip.draw(chart.ctx);
      chart.notifyPlugins("afterTooltipDraw", args);
    }
  },
  afterEvent(chart, args) {
    if (chart.tooltip) {
      const useFinalPosition = args.replay;
      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
        args.changed = true;
      }
    }
  },
  defaults: {
    enabled: true,
    external: null,
    position: "average",
    backgroundColor: "rgba(0,0,0,0.8)",
    titleColor: "#fff",
    titleFont: {
      weight: "bold"
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: "left",
    bodyColor: "#fff",
    bodySpacing: 2,
    bodyFont: {},
    bodyAlign: "left",
    footerColor: "#fff",
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: "bold"
    },
    footerAlign: "left",
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (ctx, opts) => opts.bodyFont.size,
    boxWidth: (ctx, opts) => opts.bodyFont.size,
    multiKeyBackground: "#fff",
    displayColors: true,
    boxPadding: 0,
    borderColor: "rgba(0,0,0,0)",
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: "easeOutQuart"
    },
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "width",
          "height",
          "caretX",
          "caretY"
        ]
      },
      opacity: {
        easing: "linear",
        duration: 200
      }
    },
    callbacks: defaultCallbacks
  },
  defaultRoutes: {
    bodyFont: "font",
    footerFont: "font",
    titleFont: "font"
  },
  descriptors: {
    _scriptable: (name) => name !== "filter" && name !== "itemSort" && name !== "external",
    _indexable: false,
    callbacks: {
      _scriptable: false,
      _indexable: false
    },
    animation: {
      _fallback: false
    },
    animations: {
      _fallback: "animation"
    }
  },
  additionalOptionScopes: [
    "interaction"
  ]
};
var plugins = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  Colors: plugin_colors,
  Decimation: plugin_decimation,
  Filler: index,
  Legend: plugin_legend,
  SubTitle: plugin_subtitle,
  Title: plugin_title,
  Tooltip: plugin_tooltip
});
const addIfString = (labels, raw, index2, addedLabels) => {
  if (typeof raw === "string") {
    index2 = labels.push(raw) - 1;
    addedLabels.unshift({
      index: index2,
      label: raw
    });
  } else if (isNaN(raw)) {
    index2 = null;
  }
  return index2;
};
function findOrAddLabel(labels, raw, index2, addedLabels) {
  const first = labels.indexOf(raw);
  if (first === -1) {
    return addIfString(labels, raw, index2, addedLabels);
  }
  const last = labels.lastIndexOf(raw);
  return first !== last ? index2 : first;
}
const validIndex = (index2, max) => index2 === null ? null : _limitValue(Math.round(index2), 0, max);
function _getLabelForValue(value) {
  const labels = this.getLabels();
  if (value >= 0 && value < labels.length) {
    return labels[value];
  }
  return value;
}
class CategoryScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this._startValue = void 0;
    this._valueRange = 0;
    this._addedLabels = [];
  }
  init(scaleOptions) {
    const added = this._addedLabels;
    if (added.length) {
      const labels = this.getLabels();
      for (const { index: index2, label } of added) {
        if (labels[index2] === label) {
          labels.splice(index2, 1);
        }
      }
      this._addedLabels = [];
    }
    super.init(scaleOptions);
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    const labels = this.getLabels();
    index2 = isFinite(index2) && labels[index2] === raw ? index2 : findOrAddLabel(labels, raw, valueOrDefault(index2, raw), this._addedLabels);
    return validIndex(index2, labels.length - 1);
  }
  determineDataLimits() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this.getMinMax(true);
    if (this.options.bounds === "ticks") {
      if (!minDefined) {
        min = 0;
      }
      if (!maxDefined) {
        max = this.getLabels().length - 1;
      }
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const min = this.min;
    const max = this.max;
    const offset = this.options.offset;
    const ticks = [];
    let labels = this.getLabels();
    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
    this._startValue = this.min - (offset ? 0.5 : 0);
    for (let value = min; value <= max; value++) {
      ticks.push({
        value
      });
    }
    return ticks;
  }
  getLabelForValue(value) {
    return _getLabelForValue.call(this, value);
  }
  configure() {
    super.configure();
    if (!this.isHorizontal()) {
      this._reversePixels = !this._reversePixels;
    }
  }
  getPixelForValue(value) {
    if (typeof value !== "number") {
      value = this.parse(value);
    }
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getValueForPixel(pixel) {
    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
  }
  getBasePixel() {
    return this.bottom;
  }
}
__publicField(CategoryScale, "id", "category");
__publicField(CategoryScale, "defaults", {
  ticks: {
    callback: _getLabelForValue
  }
});
function generateTicks$1(generationOptions, dataRange) {
  const ticks = [];
  const MIN_SPACING = 1e-14;
  const { bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
  const unit = step || 1;
  const maxSpaces = maxTicks - 1;
  const { min: rmin, max: rmax } = dataRange;
  const minDefined = !isNullOrUndef(min);
  const maxDefined = !isNullOrUndef(max);
  const countDefined = !isNullOrUndef(count);
  const minSpacing = (rmax - rmin) / (maxDigits + 1);
  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
  let factor, niceMin, niceMax, numSpaces;
  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
    return [
      {
        value: rmin
      },
      {
        value: rmax
      }
    ];
  }
  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
  if (numSpaces > maxSpaces) {
    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
  }
  if (!isNullOrUndef(precision)) {
    factor = Math.pow(10, precision);
    spacing = Math.ceil(spacing * factor) / factor;
  }
  if (bounds === "ticks") {
    niceMin = Math.floor(rmin / spacing) * spacing;
    niceMax = Math.ceil(rmax / spacing) * spacing;
  } else {
    niceMin = rmin;
    niceMax = rmax;
  }
  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1e3)) {
    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
    spacing = (max - min) / numSpaces;
    niceMin = min;
    niceMax = max;
  } else if (countDefined) {
    niceMin = minDefined ? min : niceMin;
    niceMax = maxDefined ? max : niceMax;
    numSpaces = count - 1;
    spacing = (niceMax - niceMin) / numSpaces;
  } else {
    numSpaces = (niceMax - niceMin) / spacing;
    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1e3)) {
      numSpaces = Math.round(numSpaces);
    } else {
      numSpaces = Math.ceil(numSpaces);
    }
  }
  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));
  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  let j = 0;
  if (minDefined) {
    if (includeBounds && niceMin !== min) {
      ticks.push({
        value: min
      });
      if (niceMin < min) {
        j++;
      }
      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
        j++;
      }
    } else if (niceMin < min) {
      j++;
    }
  }
  for (; j < numSpaces; ++j) {
    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;
    if (maxDefined && tickValue > max) {
      break;
    }
    ticks.push({
      value: tickValue
    });
  }
  if (maxDefined && includeBounds && niceMax !== max) {
    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
      ticks[ticks.length - 1].value = max;
    } else {
      ticks.push({
        value: max
      });
    }
  } else if (!maxDefined || niceMax === max) {
    ticks.push({
      value: niceMax
    });
  }
  return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
  const rad = toRadians(minRotation);
  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 1e-3;
  const length = 0.75 * minSpacing * ("" + value).length;
  return Math.min(minSpacing / ratio, length);
}
class LinearScaleBase extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._endValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) {
      return null;
    }
    return +raw;
  }
  handleTickRangeOptions() {
    const { beginAtZero } = this.options;
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this;
    const setMin = (v) => min = minDefined ? min : v;
    const setMax = (v) => max = maxDefined ? max : v;
    if (beginAtZero) {
      const minSign = sign(min);
      const maxSign = sign(max);
      if (minSign < 0 && maxSign < 0) {
        setMax(0);
      } else if (minSign > 0 && maxSign > 0) {
        setMin(0);
      }
    }
    if (min === max) {
      let offset = max === 0 ? 1 : Math.abs(max * 0.05);
      setMax(max + offset);
      if (!beginAtZero) {
        setMin(min - offset);
      }
    }
    this.min = min;
    this.max = max;
  }
  getTickLimit() {
    const tickOpts = this.options.ticks;
    let { maxTicksLimit, stepSize } = tickOpts;
    let maxTicks;
    if (stepSize) {
      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
      if (maxTicks > 1e3) {
        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
        maxTicks = 1e3;
      }
    } else {
      maxTicks = this.computeTickLimit();
      maxTicksLimit = maxTicksLimit || 11;
    }
    if (maxTicksLimit) {
      maxTicks = Math.min(maxTicksLimit, maxTicks);
    }
    return maxTicks;
  }
  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }
  buildTicks() {
    const opts = this.options;
    const tickOpts = opts.ticks;
    let maxTicks = this.getTickLimit();
    maxTicks = Math.max(2, maxTicks);
    const numericGeneratorOptions = {
      maxTicks,
      bounds: opts.bounds,
      min: opts.min,
      max: opts.max,
      precision: tickOpts.precision,
      step: tickOpts.stepSize,
      count: tickOpts.count,
      maxDigits: this._maxDigits(),
      horizontal: this.isHorizontal(),
      minRotation: tickOpts.minRotation || 0,
      includeBounds: tickOpts.includeBounds !== false
    };
    const dataRange = this._range || this;
    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  configure() {
    const ticks = this.ticks;
    let start = this.min;
    let end = this.max;
    super.configure();
    if (this.options.offset && ticks.length) {
      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
      start -= offset;
      end += offset;
    }
    this._startValue = start;
    this._endValue = end;
    this._valueRange = end - start;
  }
  getLabelForValue(value) {
    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
}
class LinearScale extends LinearScaleBase {
  determineDataLimits() {
    const { min, max } = this.getMinMax(true);
    this.min = isNumberFinite(min) ? min : 0;
    this.max = isNumberFinite(max) ? max : 1;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    const horizontal = this.isHorizontal();
    const length = horizontal ? this.width : this.height;
    const minRotation = toRadians(this.options.ticks.minRotation);
    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 1e-3;
    const tickFont = this._resolveTickFontOptions(0);
    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
  }
  getPixelForValue(value) {
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
  }
}
__publicField(LinearScale, "id", "linear");
__publicField(LinearScale, "defaults", {
  ticks: {
    callback: Ticks.formatters.numeric
  }
});
const log10Floor = (v) => Math.floor(log10(v));
const changeExponent = (v, m3) => Math.pow(10, log10Floor(v) + m3);
function isMajor(tickVal) {
  const remain = tickVal / Math.pow(10, log10Floor(tickVal));
  return remain === 1;
}
function steps(min, max, rangeExp) {
  const rangeStep = Math.pow(10, rangeExp);
  const start = Math.floor(min / rangeStep);
  const end = Math.ceil(max / rangeStep);
  return end - start;
}
function startExp(min, max) {
  const range = max - min;
  let rangeExp = log10Floor(range);
  while (steps(min, max, rangeExp) > 10) {
    rangeExp++;
  }
  while (steps(min, max, rangeExp) < 10) {
    rangeExp--;
  }
  return Math.min(rangeExp, log10Floor(min));
}
function generateTicks(generationOptions, { min, max }) {
  min = finiteOrDefault(generationOptions.min, min);
  const ticks = [];
  const minExp = log10Floor(min);
  let exp = startExp(min, max);
  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
  const stepSize = Math.pow(10, exp);
  const base2 = minExp > exp ? Math.pow(10, minExp) : 0;
  const start = Math.round((min - base2) * precision) / precision;
  const offset = Math.floor((min - base2) / stepSize / 10) * stepSize * 10;
  let significand = Math.floor((start - offset) / Math.pow(10, exp));
  let value = finiteOrDefault(generationOptions.min, Math.round((base2 + offset + significand * Math.pow(10, exp)) * precision) / precision);
  while (value < max) {
    ticks.push({
      value,
      major: isMajor(value),
      significand
    });
    if (significand >= 10) {
      significand = significand < 15 ? 15 : 20;
    } else {
      significand++;
    }
    if (significand >= 20) {
      exp++;
      significand = 2;
      precision = exp >= 0 ? 1 : precision;
    }
    value = Math.round((base2 + offset + significand * Math.pow(10, exp)) * precision) / precision;
  }
  const lastTick = finiteOrDefault(generationOptions.max, value);
  ticks.push({
    value: lastTick,
    major: isMajor(lastTick),
    significand
  });
  return ticks;
}
class LogarithmicScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index2) {
    const value = LinearScaleBase.prototype.parse.apply(this, [
      raw,
      index2
    ]);
    if (value === 0) {
      this._zero = true;
      return void 0;
    }
    return isNumberFinite(value) && value > 0 ? value : null;
  }
  determineDataLimits() {
    const { min, max } = this.getMinMax(true);
    this.min = isNumberFinite(min) ? Math.max(0, min) : null;
    this.max = isNumberFinite(max) ? Math.max(0, max) : null;
    if (this.options.beginAtZero) {
      this._zero = true;
    }
    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {
      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
    }
    this.handleTickRangeOptions();
  }
  handleTickRangeOptions() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let min = this.min;
    let max = this.max;
    const setMin = (v) => min = minDefined ? min : v;
    const setMax = (v) => max = maxDefined ? max : v;
    if (min === max) {
      if (min <= 0) {
        setMin(1);
        setMax(10);
      } else {
        setMin(changeExponent(min, -1));
        setMax(changeExponent(max, 1));
      }
    }
    if (min <= 0) {
      setMin(changeExponent(max, -1));
    }
    if (max <= 0) {
      setMax(changeExponent(min, 1));
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const opts = this.options;
    const generationOptions = {
      min: this._userMin,
      max: this._userMax
    };
    const ticks = generateTicks(generationOptions, this);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  getLabelForValue(value) {
    return value === void 0 ? "0" : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
  configure() {
    const start = this.min;
    super.configure();
    this._startValue = log10(start);
    this._valueRange = log10(this.max) - log10(start);
  }
  getPixelForValue(value) {
    if (value === void 0 || value === 0) {
      value = this.min;
    }
    if (value === null || isNaN(value)) {
      return NaN;
    }
    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    const decimal = this.getDecimalForPixel(pixel);
    return Math.pow(10, this._startValue + decimal * this._valueRange);
  }
}
__publicField(LogarithmicScale, "id", "logarithmic");
__publicField(LogarithmicScale, "defaults", {
  ticks: {
    callback: Ticks.formatters.logarithmic,
    major: {
      enabled: true
    }
  }
});
function getTickBackdropHeight(opts) {
  const tickOpts = opts.ticks;
  if (tickOpts.display && opts.display) {
    const padding = toPadding(tickOpts.backdropPadding);
    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;
  }
  return 0;
}
function measureLabelSize(ctx, font, label) {
  label = isArray(label) ? label : [
    label
  ];
  return {
    w: _longestText(ctx, font.string, label),
    h: label.length * font.lineHeight
  };
}
function determineLimits(angle, pos, size, min, max) {
  if (angle === min || angle === max) {
    return {
      start: pos - size / 2,
      end: pos + size / 2
    };
  } else if (angle < min || angle > max) {
    return {
      start: pos - size,
      end: pos
    };
  }
  return {
    start: pos,
    end: pos + size
  };
}
function fitWithPointLabels(scale) {
  const orig = {
    l: scale.left + scale._padding.left,
    r: scale.right - scale._padding.right,
    t: scale.top + scale._padding.top,
    b: scale.bottom - scale._padding.bottom
  };
  const limits = Object.assign({}, orig);
  const labelSizes = [];
  const padding = [];
  const valueCount = scale._pointLabels.length;
  const pointLabelOpts = scale.options.pointLabels;
  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
  for (let i2 = 0; i2 < valueCount; i2++) {
    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i2));
    padding[i2] = opts.padding;
    const pointPosition = scale.getPointPosition(i2, scale.drawingArea + padding[i2], additionalAngle);
    const plFont = toFont(opts.font);
    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i2]);
    labelSizes[i2] = textSize;
    const angleRadians = _normalizeAngle(scale.getIndexAngle(i2) + additionalAngle);
    const angle = Math.round(toDegrees(angleRadians));
    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    updateLimits(limits, orig, angleRadians, hLimits, vLimits);
  }
  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
  const sin = Math.abs(Math.sin(angle));
  const cos = Math.abs(Math.cos(angle));
  let x2 = 0;
  let y3 = 0;
  if (hLimits.start < orig.l) {
    x2 = (orig.l - hLimits.start) / sin;
    limits.l = Math.min(limits.l, orig.l - x2);
  } else if (hLimits.end > orig.r) {
    x2 = (hLimits.end - orig.r) / sin;
    limits.r = Math.max(limits.r, orig.r + x2);
  }
  if (vLimits.start < orig.t) {
    y3 = (orig.t - vLimits.start) / cos;
    limits.t = Math.min(limits.t, orig.t - y3);
  } else if (vLimits.end > orig.b) {
    y3 = (vLimits.end - orig.b) / cos;
    limits.b = Math.max(limits.b, orig.b + y3);
  }
}
function createPointLabelItem(scale, index2, itemOpts) {
  const outerDistance = scale.drawingArea;
  const { extra, additionalAngle, padding, size } = itemOpts;
  const pointLabelPosition = scale.getPointPosition(index2, outerDistance + extra + padding, additionalAngle);
  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
  const y3 = yForAngle(pointLabelPosition.y, size.h, angle);
  const textAlign = getTextAlignForAngle(angle);
  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
  return {
    visible: true,
    x: pointLabelPosition.x,
    y: y3,
    textAlign,
    left,
    top: y3,
    right: left + size.w,
    bottom: y3 + size.h
  };
}
function isNotOverlapped(item, area) {
  if (!area) {
    return true;
  }
  const { left, top, right, bottom } = item;
  const apexesInArea = _isPointInArea({
    x: left,
    y: top
  }, area) || _isPointInArea({
    x: left,
    y: bottom
  }, area) || _isPointInArea({
    x: right,
    y: top
  }, area) || _isPointInArea({
    x: right,
    y: bottom
  }, area);
  return !apexesInArea;
}
function buildPointLabelItems(scale, labelSizes, padding) {
  const items = [];
  const valueCount = scale._pointLabels.length;
  const opts = scale.options;
  const { centerPointLabels, display } = opts.pointLabels;
  const itemOpts = {
    extra: getTickBackdropHeight(opts) / 2,
    additionalAngle: centerPointLabels ? PI / valueCount : 0
  };
  let area;
  for (let i2 = 0; i2 < valueCount; i2++) {
    itemOpts.padding = padding[i2];
    itemOpts.size = labelSizes[i2];
    const item = createPointLabelItem(scale, i2, itemOpts);
    items.push(item);
    if (display === "auto") {
      item.visible = isNotOverlapped(item, area);
      if (item.visible) {
        area = item;
      }
    }
  }
  return items;
}
function getTextAlignForAngle(angle) {
  if (angle === 0 || angle === 180) {
    return "center";
  } else if (angle < 180) {
    return "left";
  }
  return "right";
}
function leftForTextAlign(x2, w2, align) {
  if (align === "right") {
    x2 -= w2;
  } else if (align === "center") {
    x2 -= w2 / 2;
  }
  return x2;
}
function yForAngle(y3, h3, angle) {
  if (angle === 90 || angle === 270) {
    y3 -= h3 / 2;
  } else if (angle > 270 || angle < 90) {
    y3 -= h3;
  }
  return y3;
}
function drawPointLabelBox(ctx, opts, item) {
  const { left, top, right, bottom } = item;
  const { backdropColor } = opts;
  if (!isNullOrUndef(backdropColor)) {
    const borderRadius = toTRBLCorners(opts.borderRadius);
    const padding = toPadding(opts.backdropPadding);
    ctx.fillStyle = backdropColor;
    const backdropLeft = left - padding.left;
    const backdropTop = top - padding.top;
    const backdropWidth = right - left + padding.width;
    const backdropHeight = bottom - top + padding.height;
    if (Object.values(borderRadius).some((v) => v !== 0)) {
      ctx.beginPath();
      addRoundedRectPath(ctx, {
        x: backdropLeft,
        y: backdropTop,
        w: backdropWidth,
        h: backdropHeight,
        radius: borderRadius
      });
      ctx.fill();
    } else {
      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
    }
  }
}
function drawPointLabels(scale, labelCount) {
  const { ctx, options: { pointLabels } } = scale;
  for (let i2 = labelCount - 1; i2 >= 0; i2--) {
    const item = scale._pointLabelItems[i2];
    if (!item.visible) {
      continue;
    }
    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i2));
    drawPointLabelBox(ctx, optsAtIndex, item);
    const plFont = toFont(optsAtIndex.font);
    const { x: x2, y: y3, textAlign } = item;
    renderText(ctx, scale._pointLabels[i2], x2, y3 + plFont.lineHeight / 2, plFont, {
      color: optsAtIndex.color,
      textAlign,
      textBaseline: "middle"
    });
  }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
  const { ctx } = scale;
  if (circular) {
    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);
  } else {
    let pointPosition = scale.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);
    for (let i2 = 1; i2 < labelCount; i2++) {
      pointPosition = scale.getPointPosition(i2, radius);
      ctx.lineTo(pointPosition.x, pointPosition.y);
    }
  }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
  const ctx = scale.ctx;
  const circular = gridLineOpts.circular;
  const { color: color2, lineWidth } = gridLineOpts;
  if (!circular && !labelCount || !color2 || !lineWidth || radius < 0) {
    return;
  }
  ctx.save();
  ctx.strokeStyle = color2;
  ctx.lineWidth = lineWidth;
  ctx.setLineDash(borderOpts.dash || []);
  ctx.lineDashOffset = borderOpts.dashOffset;
  ctx.beginPath();
  pathRadiusLine(scale, radius, circular, labelCount);
  ctx.closePath();
  ctx.stroke();
  ctx.restore();
}
function createPointLabelContext(parent, index2, label) {
  return createContext(parent, {
    label,
    index: index2,
    type: "pointLabel"
  });
}
class RadialLinearScale extends LinearScaleBase {
  constructor(cfg) {
    super(cfg);
    this.xCenter = void 0;
    this.yCenter = void 0;
    this.drawingArea = void 0;
    this._pointLabels = [];
    this._pointLabelItems = [];
  }
  setDimensions() {
    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
    const w2 = this.width = this.maxWidth - padding.width;
    const h3 = this.height = this.maxHeight - padding.height;
    this.xCenter = Math.floor(this.left + w2 / 2 + padding.left);
    this.yCenter = Math.floor(this.top + h3 / 2 + padding.top);
    this.drawingArea = Math.floor(Math.min(w2, h3) / 2);
  }
  determineDataLimits() {
    const { min, max } = this.getMinMax(false);
    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;
    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
  }
  generateTickLabels(ticks) {
    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
    this._pointLabels = this.getLabels().map((value, index2) => {
      const label = callback(this.options.pointLabels.callback, [
        value,
        index2
      ], this);
      return label || label === 0 ? label : "";
    }).filter((v, i2) => this.chart.getDataVisibility(i2));
  }
  fit() {
    const opts = this.options;
    if (opts.display && opts.pointLabels.display) {
      fitWithPointLabels(this);
    } else {
      this.setCenterPoint(0, 0, 0, 0);
    }
  }
  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
  }
  getIndexAngle(index2) {
    const angleMultiplier = TAU / (this._pointLabels.length || 1);
    const startAngle = this.options.startAngle || 0;
    return _normalizeAngle(index2 * angleMultiplier + toRadians(startAngle));
  }
  getDistanceFromCenterForValue(value) {
    if (isNullOrUndef(value)) {
      return NaN;
    }
    const scalingFactor = this.drawingArea / (this.max - this.min);
    if (this.options.reverse) {
      return (this.max - value) * scalingFactor;
    }
    return (value - this.min) * scalingFactor;
  }
  getValueForDistanceFromCenter(distance) {
    if (isNullOrUndef(distance)) {
      return NaN;
    }
    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
  }
  getPointLabelContext(index2) {
    const pointLabels = this._pointLabels || [];
    if (index2 >= 0 && index2 < pointLabels.length) {
      const pointLabel = pointLabels[index2];
      return createPointLabelContext(this.getContext(), index2, pointLabel);
    }
  }
  getPointPosition(index2, distanceFromCenter, additionalAngle = 0) {
    const angle = this.getIndexAngle(index2) - HALF_PI + additionalAngle;
    return {
      x: Math.cos(angle) * distanceFromCenter + this.xCenter,
      y: Math.sin(angle) * distanceFromCenter + this.yCenter,
      angle
    };
  }
  getPointPositionForValue(index2, value) {
    return this.getPointPosition(index2, this.getDistanceFromCenterForValue(value));
  }
  getBasePosition(index2) {
    return this.getPointPositionForValue(index2 || 0, this.getBaseValue());
  }
  getPointLabelPosition(index2) {
    const { left, top, right, bottom } = this._pointLabelItems[index2];
    return {
      left,
      top,
      right,
      bottom
    };
  }
  drawBackground() {
    const { backgroundColor, grid: { circular } } = this.options;
    if (backgroundColor) {
      const ctx = this.ctx;
      ctx.save();
      ctx.beginPath();
      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
      ctx.closePath();
      ctx.fillStyle = backgroundColor;
      ctx.fill();
      ctx.restore();
    }
  }
  drawGrid() {
    const ctx = this.ctx;
    const opts = this.options;
    const { angleLines, grid, border } = opts;
    const labelCount = this._pointLabels.length;
    let i2, offset, position;
    if (opts.pointLabels.display) {
      drawPointLabels(this, labelCount);
    }
    if (grid.display) {
      this.ticks.forEach((tick2, index2) => {
        if (index2 !== 0 || index2 === 0 && this.min < 0) {
          offset = this.getDistanceFromCenterForValue(tick2.value);
          const context = this.getContext(index2);
          const optsAtIndex = grid.setContext(context);
          const optsAtIndexBorder = border.setContext(context);
          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
        }
      });
    }
    if (angleLines.display) {
      ctx.save();
      for (i2 = labelCount - 1; i2 >= 0; i2--) {
        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i2));
        const { color: color2, lineWidth } = optsAtIndex;
        if (!lineWidth || !color2) {
          continue;
        }
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = color2;
        ctx.setLineDash(optsAtIndex.borderDash);
        ctx.lineDashOffset = optsAtIndex.borderDashOffset;
        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);
        position = this.getPointPosition(i2, offset);
        ctx.beginPath();
        ctx.moveTo(this.xCenter, this.yCenter);
        ctx.lineTo(position.x, position.y);
        ctx.stroke();
      }
      ctx.restore();
    }
  }
  drawBorder() {
  }
  drawLabels() {
    const ctx = this.ctx;
    const opts = this.options;
    const tickOpts = opts.ticks;
    if (!tickOpts.display) {
      return;
    }
    const startAngle = this.getIndexAngle(0);
    let offset, width;
    ctx.save();
    ctx.translate(this.xCenter, this.yCenter);
    ctx.rotate(startAngle);
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    this.ticks.forEach((tick2, index2) => {
      if (index2 === 0 && this.min >= 0 && !opts.reverse) {
        return;
      }
      const optsAtIndex = tickOpts.setContext(this.getContext(index2));
      const tickFont = toFont(optsAtIndex.font);
      offset = this.getDistanceFromCenterForValue(this.ticks[index2].value);
      if (optsAtIndex.showLabelBackdrop) {
        ctx.font = tickFont.string;
        width = ctx.measureText(tick2.label).width;
        ctx.fillStyle = optsAtIndex.backdropColor;
        const padding = toPadding(optsAtIndex.backdropPadding);
        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
      }
      renderText(ctx, tick2.label, 0, -offset, tickFont, {
        color: optsAtIndex.color,
        strokeColor: optsAtIndex.textStrokeColor,
        strokeWidth: optsAtIndex.textStrokeWidth
      });
    });
    ctx.restore();
  }
  drawTitle() {
  }
}
__publicField(RadialLinearScale, "id", "radialLinear");
__publicField(RadialLinearScale, "defaults", {
  display: true,
  animate: true,
  position: "chartArea",
  angleLines: {
    display: true,
    lineWidth: 1,
    borderDash: [],
    borderDashOffset: 0
  },
  grid: {
    circular: false
  },
  startAngle: 0,
  ticks: {
    showLabelBackdrop: true,
    callback: Ticks.formatters.numeric
  },
  pointLabels: {
    backdropColor: void 0,
    backdropPadding: 2,
    display: true,
    font: {
      size: 10
    },
    callback(label) {
      return label;
    },
    padding: 5,
    centerPointLabels: false
  }
});
__publicField(RadialLinearScale, "defaultRoutes", {
  "angleLines.color": "borderColor",
  "pointLabels.color": "color",
  "ticks.color": "color"
});
__publicField(RadialLinearScale, "descriptors", {
  angleLines: {
    _fallback: "grid"
  }
});
const INTERVALS = {
  millisecond: {
    common: true,
    size: 1,
    steps: 1e3
  },
  second: {
    common: true,
    size: 1e3,
    steps: 60
  },
  minute: {
    common: true,
    size: 6e4,
    steps: 60
  },
  hour: {
    common: true,
    size: 36e5,
    steps: 24
  },
  day: {
    common: true,
    size: 864e5,
    steps: 30
  },
  week: {
    common: false,
    size: 6048e5,
    steps: 4
  },
  month: {
    common: true,
    size: 2628e6,
    steps: 12
  },
  quarter: {
    common: false,
    size: 7884e6,
    steps: 4
  },
  year: {
    common: true,
    size: 3154e7
  }
};
const UNITS = /* @__PURE__ */ Object.keys(INTERVALS);
function sorter(a3, b2) {
  return a3 - b2;
}
function parse(scale, input) {
  if (isNullOrUndef(input)) {
    return null;
  }
  const adapter = scale._adapter;
  const { parser, round: round2, isoWeekday } = scale._parseOpts;
  let value = input;
  if (typeof parser === "function") {
    value = parser(value);
  }
  if (!isNumberFinite(value)) {
    value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
  }
  if (value === null) {
    return null;
  }
  if (round2) {
    value = round2 === "week" && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round2);
  }
  return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
  const ilen = UNITS.length;
  for (let i2 = UNITS.indexOf(minUnit); i2 < ilen - 1; ++i2) {
    const interval = INTERVALS[UNITS[i2]];
    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
      return UNITS[i2];
    }
  }
  return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
  for (let i2 = UNITS.length - 1; i2 >= UNITS.indexOf(minUnit); i2--) {
    const unit = UNITS[i2];
    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
      return unit;
    }
  }
  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
  for (let i2 = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i2 < ilen; ++i2) {
    if (INTERVALS[UNITS[i2]].common) {
      return UNITS[i2];
    }
  }
}
function addTick(ticks, time, timestamps) {
  if (!timestamps) {
    ticks[time] = true;
  } else if (timestamps.length) {
    const { lo, hi } = _lookup(timestamps, time);
    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
    ticks[timestamp] = true;
  }
}
function setMajorTicks(scale, ticks, map2, majorUnit) {
  const adapter = scale._adapter;
  const first = +adapter.startOf(ticks[0].value, majorUnit);
  const last = ticks[ticks.length - 1].value;
  let major, index2;
  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    index2 = map2[major];
    if (index2 >= 0) {
      ticks[index2].major = true;
    }
  }
  return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
  const ticks = [];
  const map2 = {};
  const ilen = values.length;
  let i2, value;
  for (i2 = 0; i2 < ilen; ++i2) {
    value = values[i2];
    map2[value] = i2;
    ticks.push({
      value,
      major: false
    });
  }
  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map2, majorUnit);
}
class TimeScale extends Scale {
  constructor(props) {
    super(props);
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
    this._unit = "day";
    this._majorUnit = void 0;
    this._offsets = {};
    this._normalized = false;
    this._parseOpts = void 0;
  }
  init(scaleOpts, opts = {}) {
    const time = scaleOpts.time || (scaleOpts.time = {});
    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
    adapter.init(opts);
    mergeIf(time.displayFormats, adapter.formats());
    this._parseOpts = {
      parser: time.parser,
      round: time.round,
      isoWeekday: time.isoWeekday
    };
    super.init(scaleOpts);
    this._normalized = opts.normalized;
  }
  parse(raw, index2) {
    if (raw === void 0) {
      return null;
    }
    return parse(this, raw);
  }
  beforeLayout() {
    super.beforeLayout();
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }
  determineDataLimits() {
    const options = this.options;
    const adapter = this._adapter;
    const unit = options.time.unit || "day";
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    function _applyBounds(bounds) {
      if (!minDefined && !isNaN(bounds.min)) {
        min = Math.min(min, bounds.min);
      }
      if (!maxDefined && !isNaN(bounds.max)) {
        max = Math.max(max, bounds.max);
      }
    }
    if (!minDefined || !maxDefined) {
      _applyBounds(this._getLabelBounds());
      if (options.bounds !== "ticks" || options.ticks.source !== "labels") {
        _applyBounds(this.getMinMax(false));
      }
    }
    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
    this.min = Math.min(min, max - 1);
    this.max = Math.max(min + 1, max);
  }
  _getLabelBounds() {
    const arr = this.getLabelTimestamps();
    let min = Number.POSITIVE_INFINITY;
    let max = Number.NEGATIVE_INFINITY;
    if (arr.length) {
      min = arr[0];
      max = arr[arr.length - 1];
    }
    return {
      min,
      max
    };
  }
  buildTicks() {
    const options = this.options;
    const timeOpts = options.time;
    const tickOpts = options.ticks;
    const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
    if (options.bounds === "ticks" && timestamps.length) {
      this.min = this._userMin || timestamps[0];
      this.max = this._userMax || timestamps[timestamps.length - 1];
    }
    const min = this.min;
    const max = this.max;
    const ticks = _filterBetween(timestamps, min, max);
    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
    this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? void 0 : determineMajorUnit(this._unit);
    this.initOffsets(timestamps);
    if (options.reverse) {
      ticks.reverse();
    }
    return ticksFromTimestamps(this, ticks, this._majorUnit);
  }
  afterAutoSkip() {
    if (this.options.offsetAfterAutoskip) {
      this.initOffsets(this.ticks.map((tick2) => +tick2.value));
    }
  }
  initOffsets(timestamps = []) {
    let start = 0;
    let end = 0;
    let first, last;
    if (this.options.offset && timestamps.length) {
      first = this.getDecimalForValue(timestamps[0]);
      if (timestamps.length === 1) {
        start = 1 - first;
      } else {
        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
      }
      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
      if (timestamps.length === 1) {
        end = last;
      } else {
        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
      }
    }
    const limit = timestamps.length < 3 ? 0.5 : 0.25;
    start = _limitValue(start, 0, limit);
    end = _limitValue(end, 0, limit);
    this._offsets = {
      start,
      end,
      factor: 1 / (start + 1 + end)
    };
  }
  _generate() {
    const adapter = this._adapter;
    const min = this.min;
    const max = this.max;
    const options = this.options;
    const timeOpts = options.time;
    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
    const stepSize = valueOrDefault(options.ticks.stepSize, 1);
    const weekday = minor === "week" ? timeOpts.isoWeekday : false;
    const hasWeekday = isNumber(weekday) || weekday === true;
    const ticks = {};
    let first = min;
    let time, count;
    if (hasWeekday) {
      first = +adapter.startOf(first, "isoWeek", weekday);
    }
    first = +adapter.startOf(first, hasWeekday ? "day" : minor);
    if (adapter.diff(max, min, minor) > 1e5 * stepSize) {
      throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
    }
    const timestamps = options.ticks.source === "data" && this.getDataTimestamps();
    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {
      addTick(ticks, time, timestamps);
    }
    if (time === max || options.bounds === "ticks" || count === 1) {
      addTick(ticks, time, timestamps);
    }
    return Object.keys(ticks).sort(sorter).map((x2) => +x2);
  }
  getLabelForValue(value) {
    const adapter = this._adapter;
    const timeOpts = this.options.time;
    if (timeOpts.tooltipFormat) {
      return adapter.format(value, timeOpts.tooltipFormat);
    }
    return adapter.format(value, timeOpts.displayFormats.datetime);
  }
  format(value, format2) {
    const options = this.options;
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const fmt = format2 || formats[unit];
    return this._adapter.format(value, fmt);
  }
  _tickFormatFunction(time, index2, ticks, format2) {
    const options = this.options;
    const formatter = options.ticks.callback;
    if (formatter) {
      return callback(formatter, [
        time,
        index2,
        ticks
      ], this);
    }
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const majorUnit = this._majorUnit;
    const minorFormat = unit && formats[unit];
    const majorFormat = majorUnit && formats[majorUnit];
    const tick2 = ticks[index2];
    const major = majorUnit && majorFormat && tick2 && tick2.major;
    return this._adapter.format(time, format2 || (major ? majorFormat : minorFormat));
  }
  generateTickLabels(ticks) {
    let i2, ilen, tick2;
    for (i2 = 0, ilen = ticks.length; i2 < ilen; ++i2) {
      tick2 = ticks[i2];
      tick2.label = this._tickFormatFunction(tick2.value, i2, ticks);
    }
  }
  getDecimalForValue(value) {
    return value === null ? NaN : (value - this.min) / (this.max - this.min);
  }
  getPixelForValue(value) {
    const offsets = this._offsets;
    const pos = this.getDecimalForValue(value);
    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return this.min + pos * (this.max - this.min);
  }
  _getLabelSize(label) {
    const ticksOpts = this.options.ticks;
    const tickLabelWidth = this.ctx.measureText(label).width;
    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    const cosRotation = Math.cos(angle);
    const sinRotation = Math.sin(angle);
    const tickFontSize = this._resolveTickFontOptions(0).size;
    return {
      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
    };
  }
  _getLabelCapacity(exampleTime) {
    const timeOpts = this.options.time;
    const displayFormats = timeOpts.displayFormats;
    const format2 = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
      exampleTime
    ], this._majorUnit), format2);
    const size = this._getLabelSize(exampleLabel);
    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
    return capacity > 0 ? capacity : 1;
  }
  getDataTimestamps() {
    let timestamps = this._cache.data || [];
    let i2, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const metas = this.getMatchingVisibleMetas();
    if (this._normalized && metas.length) {
      return this._cache.data = metas[0].controller.getAllParsedValues(this);
    }
    for (i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
      timestamps = timestamps.concat(metas[i2].controller.getAllParsedValues(this));
    }
    return this._cache.data = this.normalize(timestamps);
  }
  getLabelTimestamps() {
    const timestamps = this._cache.labels || [];
    let i2, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const labels = this.getLabels();
    for (i2 = 0, ilen = labels.length; i2 < ilen; ++i2) {
      timestamps.push(parse(this, labels[i2]));
    }
    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
  }
  normalize(values) {
    return _arrayUnique(values.sort(sorter));
  }
}
__publicField(TimeScale, "id", "time");
__publicField(TimeScale, "defaults", {
  bounds: "data",
  adapters: {},
  time: {
    parser: false,
    unit: false,
    round: false,
    isoWeekday: false,
    minUnit: "millisecond",
    displayFormats: {}
  },
  ticks: {
    source: "auto",
    callback: false,
    major: {
      enabled: false
    }
  }
});
function interpolate(table, val, reverse) {
  let lo = 0;
  let hi = table.length - 1;
  let prevSource, nextSource, prevTarget, nextTarget;
  if (reverse) {
    if (val >= table[lo].pos && val <= table[hi].pos) {
      ({ lo, hi } = _lookupByKey(table, "pos", val));
    }
    ({ pos: prevSource, time: prevTarget } = table[lo]);
    ({ pos: nextSource, time: nextTarget } = table[hi]);
  } else {
    if (val >= table[lo].time && val <= table[hi].time) {
      ({ lo, hi } = _lookupByKey(table, "time", val));
    }
    ({ time: prevSource, pos: prevTarget } = table[lo]);
    ({ time: nextSource, pos: nextTarget } = table[hi]);
  }
  const span = nextSource - prevSource;
  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
  constructor(props) {
    super(props);
    this._table = [];
    this._minPos = void 0;
    this._tableRange = void 0;
  }
  initOffsets() {
    const timestamps = this._getTimestampsForTable();
    const table = this._table = this.buildLookupTable(timestamps);
    this._minPos = interpolate(table, this.min);
    this._tableRange = interpolate(table, this.max) - this._minPos;
    super.initOffsets(timestamps);
  }
  buildLookupTable(timestamps) {
    const { min, max } = this;
    const items = [];
    const table = [];
    let i2, ilen, prev, curr, next2;
    for (i2 = 0, ilen = timestamps.length; i2 < ilen; ++i2) {
      curr = timestamps[i2];
      if (curr >= min && curr <= max) {
        items.push(curr);
      }
    }
    if (items.length < 2) {
      return [
        {
          time: min,
          pos: 0
        },
        {
          time: max,
          pos: 1
        }
      ];
    }
    for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
      next2 = items[i2 + 1];
      prev = items[i2 - 1];
      curr = items[i2];
      if (Math.round((next2 + prev) / 2) !== curr) {
        table.push({
          time: curr,
          pos: i2 / (ilen - 1)
        });
      }
    }
    return table;
  }
  _generate() {
    const min = this.min;
    const max = this.max;
    let timestamps = super.getDataTimestamps();
    if (!timestamps.includes(min) || !timestamps.length) {
      timestamps.splice(0, 0, min);
    }
    if (!timestamps.includes(max) || timestamps.length === 1) {
      timestamps.push(max);
    }
    return timestamps.sort((a3, b2) => a3 - b2);
  }
  _getTimestampsForTable() {
    let timestamps = this._cache.all || [];
    if (timestamps.length) {
      return timestamps;
    }
    const data = this.getDataTimestamps();
    const label = this.getLabelTimestamps();
    if (data.length && label.length) {
      timestamps = this.normalize(data.concat(label));
    } else {
      timestamps = data.length ? data : label;
    }
    timestamps = this._cache.all = timestamps;
    return timestamps;
  }
  getDecimalForValue(value) {
    return (interpolate(this._table, value) - this._minPos) / this._tableRange;
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
  }
}
__publicField(TimeSeriesScale, "id", "timeseries");
__publicField(TimeSeriesScale, "defaults", TimeScale.defaults);
var scales = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  CategoryScale,
  LinearScale,
  LogarithmicScale,
  RadialLinearScale,
  TimeScale,
  TimeSeriesScale
});
const registerables = [
  controllers,
  elements,
  plugins,
  scales
];
const eventPrefix = /^on/;
const events = [];
Object.keys(globalThis).forEach((key) => {
  if (eventPrefix.test(key)) {
    events.push(key.replace(eventPrefix, ""));
  }
});
function useForwardEvents(getRef) {
  const component = current_component;
  const destructors = [];
  function forward(e2) {
    bubble(component, e2);
  }
  onMount(() => {
    const ref = getRef();
    events.forEach(ref instanceof Element ? (event) => destructors.push(listen(ref, event, forward)) : (event) => destructors.push(ref.$on(event, forward)));
  });
  onDestroy(() => {
    while (destructors.length) {
      destructors.pop()();
    }
  });
}
function create_fragment$M(ctx) {
  let canvas;
  let canvas_levels = [
    /*props*/
    ctx[1]
  ];
  let canvas_data = {};
  for (let i2 = 0; i2 < canvas_levels.length; i2 += 1) {
    canvas_data = assign$1(canvas_data, canvas_levels[i2]);
  }
  return {
    c() {
      canvas = element("canvas");
      this.h();
    },
    l(nodes) {
      canvas = claim_element(nodes, "CANVAS", {});
      children(canvas).forEach(detach);
      this.h();
    },
    h() {
      set_attributes(canvas, canvas_data);
    },
    m(target, anchor) {
      insert_hydration(target, canvas, anchor);
      ctx[8](canvas);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(canvas);
      }
      ctx[8](null);
    }
  };
}
function clean(props2) {
  let { data: data2, type: type2, options: options2, plugins: plugins2, children: children2, $$scope, $$slots, ...rest } = props2;
  return rest;
}
function instance$M($$self, $$props, $$invalidate) {
  let { type } = $$props;
  let { data = { datasets: [] } } = $$props;
  let { options = {} } = $$props;
  let { plugins: plugins2 = [] } = $$props;
  let { updateMode = void 0 } = $$props;
  let { chart = null } = $$props;
  let canvasRef;
  let props = clean($$props);
  onMount(() => {
    $$invalidate(2, chart = new Chart$1(canvasRef, { type, data, options, plugins: plugins2 }));
  });
  afterUpdate(() => {
    if (!chart)
      return;
    $$invalidate(2, chart.data = data, chart);
    Object.assign(chart.options, options);
    chart.update(updateMode);
  });
  onDestroy(() => {
    if (chart)
      chart.destroy();
    $$invalidate(2, chart = null);
  });
  useForwardEvents(() => canvasRef);
  function canvas_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      canvasRef = $$value;
      $$invalidate(0, canvasRef);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$invalidate(9, $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props)));
    if ("type" in $$new_props)
      $$invalidate(3, type = $$new_props.type);
    if ("data" in $$new_props)
      $$invalidate(4, data = $$new_props.data);
    if ("options" in $$new_props)
      $$invalidate(5, options = $$new_props.options);
    if ("plugins" in $$new_props)
      $$invalidate(6, plugins2 = $$new_props.plugins);
    if ("updateMode" in $$new_props)
      $$invalidate(7, updateMode = $$new_props.updateMode);
    if ("chart" in $$new_props)
      $$invalidate(2, chart = $$new_props.chart);
  };
  $$props = exclude_internal_props($$props);
  return [
    canvasRef,
    props,
    chart,
    type,
    data,
    options,
    plugins2,
    updateMode,
    canvas_binding
  ];
}
class Chart extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$M, create_fragment$M, safe_not_equal, {
      type: 3,
      data: 4,
      options: 5,
      plugins: 6,
      updateMode: 7,
      chart: 2
    });
  }
}
Chart$1.register(...registerables);
/*!
 * chartjs-adapter-date-fns v3.0.0
 * https://www.chartjs.org
 * (c) 2022 chartjs-adapter-date-fns Contributors
 * Released under the MIT license
 */
const FORMATS = {
  datetime: "MMM d, yyyy, h:mm:ss aaaa",
  millisecond: "h:mm:ss.SSS aaaa",
  second: "h:mm:ss aaaa",
  minute: "h:mm aaaa",
  hour: "ha",
  day: "MMM d",
  week: "PP",
  month: "MMM yyyy",
  quarter: "qqq - yyyy",
  year: "yyyy"
};
adapters._date.override({
  _id: "date-fns",
  // DEBUG
  formats: function() {
    return FORMATS;
  },
  parse: function(value, fmt) {
    if (value === null || typeof value === "undefined") {
      return null;
    }
    const type = typeof value;
    if (type === "number" || value instanceof Date) {
      value = toDate(value);
    } else if (type === "string") {
      if (typeof fmt === "string") {
        value = parse$1(value, fmt, /* @__PURE__ */ new Date(), this.options);
      } else {
        value = parseISO(value, this.options);
      }
    }
    return isValid(value) ? value.getTime() : null;
  },
  format: function(time, fmt) {
    return format(time, fmt, this.options);
  },
  add: function(time, amount, unit) {
    switch (unit) {
      case "millisecond":
        return addMilliseconds(time, amount);
      case "second":
        return addSeconds(time, amount);
      case "minute":
        return addMinutes(time, amount);
      case "hour":
        return addHours(time, amount);
      case "day":
        return addDays(time, amount);
      case "week":
        return addWeeks(time, amount);
      case "month":
        return addMonths(time, amount);
      case "quarter":
        return addQuarters(time, amount);
      case "year":
        return addYears(time, amount);
      default:
        return time;
    }
  },
  diff: function(max, min, unit) {
    switch (unit) {
      case "millisecond":
        return differenceInMilliseconds(max, min);
      case "second":
        return differenceInSeconds(max, min);
      case "minute":
        return differenceInMinutes(max, min);
      case "hour":
        return differenceInHours(max, min);
      case "day":
        return differenceInDays(max, min);
      case "week":
        return differenceInWeeks(max, min);
      case "month":
        return differenceInMonths(max, min);
      case "quarter":
        return differenceInQuarters(max, min);
      case "year":
        return differenceInYears(max, min);
      default:
        return 0;
    }
  },
  startOf: function(time, unit, weekday) {
    switch (unit) {
      case "second":
        return startOfSecond(time);
      case "minute":
        return startOfMinute(time);
      case "hour":
        return startOfHour(time);
      case "day":
        return startOfDay(time);
      case "week":
        return startOfWeek(time);
      case "isoWeek":
        return startOfWeek(time, { weekStartsOn: +weekday });
      case "month":
        return startOfMonth(time);
      case "quarter":
        return startOfQuarter(time);
      case "year":
        return startOfYear(time);
      default:
        return time;
    }
  },
  endOf: function(time, unit) {
    switch (unit) {
      case "second":
        return endOfSecond(time);
      case "minute":
        return endOfMinute(time);
      case "hour":
        return endOfHour(time);
      case "day":
        return endOfDay(time);
      case "week":
        return endOfWeek(time);
      case "month":
        return endOfMonth(time);
      case "quarter":
        return endOfQuarter(time);
      case "year":
        return endOfYear(time);
      default:
        return time;
    }
  }
});
var dateFormats$1 = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy"
};
var timeFormats$1 = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var dateTimeFormats$1 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong$2 = {
  date: buildFormatLongFn({
    formats: dateFormats$1,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1,
    defaultWidth: "full"
  })
};
const formatLong$3 = formatLong$2;
var locale$2 = {
  code: "en-GB",
  formatDistance: formatDistance$4,
  formatLong: formatLong$3,
  formatRelative: formatRelative$3,
  localize: localize$3,
  match: match$3,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
const enGB = locale$2;
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "mindre enn ett sekund",
    other: "mindre enn {{count}} sekunder"
  },
  xSeconds: {
    one: "ett sekund",
    other: "{{count}} sekunder"
  },
  halfAMinute: "et halvt minutt",
  lessThanXMinutes: {
    one: "mindre enn ett minutt",
    other: "mindre enn {{count}} minutter"
  },
  xMinutes: {
    one: "ett minutt",
    other: "{{count}} minutter"
  },
  aboutXHours: {
    one: "omtrent en time",
    other: "omtrent {{count}} timer"
  },
  xHours: {
    one: "en time",
    other: "{{count}} timer"
  },
  xDays: {
    one: "en dag",
    other: "{{count}} dager"
  },
  aboutXWeeks: {
    one: "omtrent en uke",
    other: "omtrent {{count}} uker"
  },
  xWeeks: {
    one: "en uke",
    other: "{{count}} uker"
  },
  aboutXMonths: {
    one: "omtrent en måned",
    other: "omtrent {{count}} måneder"
  },
  xMonths: {
    one: "en måned",
    other: "{{count}} måneder"
  },
  aboutXYears: {
    one: "omtrent ett år",
    other: "omtrent {{count}} år"
  },
  xYears: {
    one: "ett år",
    other: "{{count}} år"
  },
  overXYears: {
    one: "over ett år",
    other: "over {{count}} år"
  },
  almostXYears: {
    one: "nesten ett år",
    other: "nesten {{count}} år"
  }
};
var formatDistance2 = function formatDistance3(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "om " + result;
    } else {
      return result + " siden";
    }
  }
  return result;
};
const formatDistance$1 = formatDistance2;
var dateFormats = {
  full: "EEEE d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "dd.MM.y"
};
var timeFormats = {
  full: "'kl'. HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var dateTimeFormats = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
const formatLong$1 = formatLong;
var formatRelativeLocale = {
  lastWeek: "'forrige' eeee 'kl.' p",
  yesterday: "'i går kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: "P"
};
var formatRelative2 = function formatRelative3(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
const formatRelative$1 = formatRelative2;
var eraValues = {
  narrow: ["f.Kr.", "e.Kr."],
  abbreviated: ["f.Kr.", "e.Kr."],
  wide: ["før Kristus", "etter Kristus"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des."],
  wide: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"]
};
var dayValues = {
  narrow: ["S", "M", "T", "O", "T", "F", "L"],
  short: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
  abbreviated: ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
  wide: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "midnatt",
    noon: "middag",
    morning: "på morg.",
    afternoon: "på etterm.",
    evening: "på kvelden",
    night: "på natten"
  },
  abbreviated: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "på morg.",
    afternoon: "på etterm.",
    evening: "på kvelden",
    night: "på natten"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "på morgenen",
    afternoon: "på ettermiddagen",
    evening: "på kvelden",
    night: "på natten"
  }
};
var ordinalNumber2 = function ordinalNumber3(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var localize = {
  ordinalNumber: ordinalNumber2,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback2(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide"
  })
};
const localize$1 = localize;
var matchOrdinalNumberPattern = /^(\d+)\.?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
};
var parseEraPatterns = {
  any: [/^f/i, /^e/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtofl]/i,
  short: /^(sø|ma|ti|on|to|fr|lø)/i,
  abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
  wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
};
var parseDayPatterns = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgen/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback3(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback4(index2) {
      return index2 + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
const match$1 = match;
var locale$1 = {
  code: "nb",
  formatDistance: formatDistance$1,
  formatLong: formatLong$1,
  formatRelative: formatRelative$1,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
const noNB = locale$1;
const locale = writable(navigator.language);
const dateFnsLocale = derived(
  locale,
  (l) => {
    switch (l) {
      case "en-US":
        return enUS;
      case "nb":
        return noNB;
      case "en-GB":
      default:
        return enGB;
    }
  },
  enGB
);
function create_else_block$g(ctx) {
  let div;
  let chart_1;
  let updating_chart;
  let current;
  function chart_1_chart_binding(value) {
    ctx[8](value);
  }
  let chart_1_props = {
    type: "line",
    data: (
      /*data*/
      ctx[3]
    ),
    options: (
      /*options*/
      ctx[4]
    ),
    plugins: (
      /*plugins*/
      ctx[5]
    )
  };
  if (
    /*chart*/
    ctx[2] !== void 0
  ) {
    chart_1_props.chart = /*chart*/
    ctx[2];
  }
  chart_1 = new Chart({ props: chart_1_props });
  binding_callbacks.push(() => bind(chart_1, "chart", chart_1_chart_binding));
  return {
    c() {
      div = element("div");
      create_component(chart_1.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { style: true });
      var div_nodes = children(div);
      claim_component(chart_1.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_style(
        div,
        "height",
        /*settings*/
        (ctx[0].height ?? 200) + "px"
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(chart_1, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const chart_1_changes = {};
      if (dirty & /*data*/
      8)
        chart_1_changes.data = /*data*/
        ctx2[3];
      if (dirty & /*options*/
      16)
        chart_1_changes.options = /*options*/
        ctx2[4];
      if (!updating_chart && dirty & /*chart*/
      4) {
        updating_chart = true;
        chart_1_changes.chart = /*chart*/
        ctx2[2];
        add_flush_callback(() => updating_chart = false);
      }
      chart_1.$set(chart_1_changes);
      if (!current || dirty & /*settings*/
      1) {
        set_style(
          div,
          "height",
          /*settings*/
          (ctx2[0].height ?? 200) + "px"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(chart_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(chart_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(chart_1);
    }
  };
}
function create_if_block$r(ctx) {
  let span;
  let textContent = "Insights not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-a0e9nu")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$L(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$r, create_else_block$g];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*series*/
      ctx2[1] === void 0 || /*series*/
      ctx2[1].length === 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function resample(entries, aggregation, sampleRate, decimals) {
  if (aggregation === void 0 || aggregation === "none" || entries.step / 1e3 >= sampleRate) {
    return entries.values.filter((entry) => entry.v !== null && entry.v !== void 0).map((entry) => ({
      x: new Date(entry.t).getTime(),
      y: round(entry.v, decimals)
    }));
  } else {
    const buckets = entries.values.filter((entry) => entry.v !== null && entry.v !== void 0).reduce(
      (timeBuckets, entry) => {
        const time = new Date(entry.t);
        const value = entry.v;
        const timeOfDay = time.getHours() * 3600 + time.getMinutes() * 60 + time.getSeconds();
        const timestamp = time.getTime() - timeOfDay % sampleRate * 1e3;
        const bucket = timeBuckets[timestamp] = timeBuckets[timestamp] ?? [];
        bucket.push(value);
        return timeBuckets;
      },
      {}
    );
    const result = Object.keys(buckets).map((timestamp) => {
      const values = buckets[timestamp];
      switch (aggregation) {
        case "min":
          return {
            x: Number(timestamp),
            y: round(Math.min(...values), decimals)
          };
        case "max":
          return {
            x: Number(timestamp),
            y: round(Math.max(...values), decimals)
          };
        case "sum":
          return {
            x: Number(timestamp),
            y: round(values.reduce((a3, b2) => a3 + b2, 0), decimals)
          };
        case "avg":
          return {
            x: Number(timestamp),
            y: round(values.reduce((a3, b2) => a3 + b2, 0) / values.length, decimals)
          };
        case "first":
          return {
            x: Number(timestamp),
            y: round(values[0], decimals)
          };
        case "last":
          return {
            x: Number(timestamp),
            y: round(values[values.length - 1], decimals)
          };
      }
    });
    return result;
  }
}
function round(value, decimals) {
  if (!decimals) {
    return value;
  }
  return Math.round(value * Math.pow(10, decimals)) / Math.pow(10, decimals);
}
function instance$L($$self, $$props, $$invalidate) {
  let $devices;
  let $homey;
  let $insights;
  let $dateFnsLocale;
  component_subscribe($$self, devices, ($$value) => $$invalidate(12, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(13, $homey = $$value));
  component_subscribe($$self, insights, ($$value) => $$invalidate(7, $insights = $$value));
  component_subscribe($$self, dateFnsLocale, ($$value) => $$invalidate(14, $dateFnsLocale = $$value));
  let { context } = $$props;
  let { settings } = $$props;
  let resolution;
  let series;
  let timeout;
  let chart;
  let data = { datasets: [] };
  let plugins2 = [
    {
      beforeRender: (context2, options2) => thresholdColors(context2)
    }
  ];
  let options = {
    plugins: {
      legend: {
        display: true,
        labels: { boxWidth: 10, boxHeight: 2 }
      }
    },
    elements: { point: { radius: 0 } },
    scales: {
      x: {
        type: "time",
        time: {
          displayFormats: {
            datetime: "d MMM yyyy, HH:mm:ss",
            millisecond: "HH:mm:ss.SSS",
            second: "HH:mm:ss",
            minute: "HH:mm",
            hour: "HH",
            day: "d MMM",
            week: "w, R",
            month: "MMM yyyy",
            quarter: "qqq - yyyy",
            year: "yyyy"
          }
        },
        adapters: { date: { locale: $dateFnsLocale } }
      }
    },
    responsive: true,
    maintainAspectRatio: false,
    animation: false
  };
  onDestroy(() => {
    if (timeout !== void 0) {
      clearTimeout(timeout);
    }
  });
  async function onSettings(s3) {
    var _a2;
    let load = false;
    if (resolution === void 0 || resolution !== s3.resolution) {
      resolution = s3.resolution ?? "today";
      load = true;
    }
    if (series === void 0 || series.length != ((_a2 = s3.series) == null ? void 0 : _a2.length) || JSON.stringify(series) !== JSON.stringify(s3.series)) {
      if ((s3 == null ? void 0 : s3.series) !== void 0) {
        $$invalidate(1, series = [...s3.series]);
        load = true;
      }
    }
    if (load) {
      reload();
    }
  }
  function onInsights(logs) {
    reload();
  }
  function reload() {
    if (timeout !== void 0) {
      clearTimeout(timeout);
    }
    getEntries();
  }
  async function getEntries() {
    if (series === void 0 || series.length === 0) {
      return;
    }
    const units = series.map((s3) => $insights[s3.insightId]).filter((l) => l !== void 0).map((l) => l.units).filter((value, index2, array) => array.indexOf(value) === index2);
    for (var unit of units) {
      const axis = "y" + unit;
      if (!Object.hasOwn(options.scales, axis)) {
        $$invalidate(
          4,
          options.scales[axis] = {
            title: { text: unit, display: true },
            type: "linear",
            display: "auto"
          },
          options
        );
      }
    }
    let timeoutMs = 999999999;
    try {
      for (var i2 = 0; i2 < series.length; i2++) {
        const t2 = await getTimeSeries(series[i2], i2);
        if (t2 > 0 && t2 < timeoutMs) {
          timeoutMs = t2;
        }
      }
    } catch (error) {
      alerts.warn("Error!", "Could not load series: " + error, 5e3);
    }
    if (data.datasets.length > series.length) {
      data.datasets.splice(series.length);
    }
    timeout = setTimeout(
      () => {
        getEntries();
      },
      timeoutMs
    );
    if (chart) {
      chart.update();
    }
  }
  async function getTimeSeries(series2, index2) {
    if (series2.insightId === void 0) {
      return -1;
    }
    const log = $insights[series2.insightId];
    if (log === void 0) {
      return -1;
    }
    const aggregation = series2.aggregation ?? "none";
    const sampleRate = series2.sampleRate ?? 60;
    try {
      const entries = await $homey.insights.getLogEntries({ id: log.id, uri: log.uri, resolution });
      const timeSeries = resample(entries, aggregation, sampleRate, log.decimals);
      const yAxis = "y" + log.units;
      $$invalidate(
        3,
        data.datasets[index2] = {
          label: series2.title ?? getOwnerName(log.ownerUri) + " - " + log.title,
          type: series2.type ?? "line",
          borderThresholds: series2.border,
          backgroundThresholds: series2.background,
          fill: series2.fill,
          data: timeSeries,
          tension: 0.5,
          yAxisID: yAxis,
          stepped: log.type === "boolean" ? true : void 0
        },
        data
      );
      return Math.max(entries.step - entries.updatesIn, 1e4);
    } catch (error) {
      alerts.warn("Error!", "Could not load series: " + error, 5e3);
    }
    return 3e4;
  }
  function thresholdColors(context2, options2) {
    context2.data.datasets.forEach((dataset, index2) => {
      const borderThresholds = dataset.borderThresholds;
      const backgroundThresholds = dataset.backgroundThresholds;
      const scale = context2.scales[dataset.yAxisID];
      dataset.borderColor = createGradient(context2, borderThresholds, scale, index2);
      dataset.backgroundColor = createGradient(context2, backgroundThresholds, scale, index2);
    });
  }
  function createGradient(_chart, thresholds, scale, index2) {
    if (_chart === void 0)
      return;
    const { ctx, chartArea } = _chart;
    let gradient = ctx.createLinearGradient(0, _chart.height, 0, 0);
    let previous = void 0;
    if (thresholds !== void 0) {
      for (let i2 = thresholds.length - 1; i2 >= 0; i2--) {
        const threshold = thresholds[i2];
        if (previous === void 0) {
          gradient.addColorStop(0, threshold.color);
        } else {
          const yPos = scale.getPixelForValue(threshold.value);
          const factor = 1 - yPos / _chart.height;
          if (factor < 0 || factor > 1) {
            break;
          }
          gradient.addColorStop(factor, previous.color);
          gradient.addColorStop(factor, threshold.color);
        }
        previous = threshold;
      }
    }
    if (previous !== void 0) {
      gradient.addColorStop(1, previous.color);
    } else {
      return colors$1[index2 % colors$1.length];
    }
    return gradient;
  }
  function getOwnerName(uri) {
    var _a2;
    if (uri.startsWith("homey:device:")) {
      const prefix = "homey:device:";
      const id = uri.slice(prefix.length);
      return ((_a2 = $devices[id]) == null ? void 0 : _a2.name) ?? uri;
    } else if (uri.startsWith("homey:manager:apps")) {
      return "Homey Apps";
    } else if (uri.startsWith("homey:manager:system")) {
      return "Homey System";
    } else if (uri.startsWith("homey:manager:weather")) {
      return "Homey Weather";
    } else if (uri.startsWith("homey:manager:logic")) {
      return "Homey Logic";
    } else {
      return uri;
    }
  }
  function chart_1_chart_binding(value) {
    chart = value;
    $$invalidate(2, chart);
  }
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(6, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*$insights*/
    128) {
      onInsights();
    }
  };
  return [
    settings,
    series,
    chart,
    data,
    options,
    plugins2,
    context,
    $insights,
    chart_1_chart_binding
  ];
}
class InsightWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$L, create_fragment$L, safe_not_equal, { context: 6, settings: 0 });
  }
}
function create$4() {
  return {
    id: v4(),
    type: "insight",
    version: 5
  };
}
function migrate$4(settings) {
  while (settings.version !== 5) {
    settings = migrateOnce$4(settings);
  }
  return settings;
}
function migrateOnce$4(settings) {
  switch (settings.version) {
    case 5:
      return settings;
    case 4:
      return migrate_v4_v5(settings);
    case 3:
      return migrate_v3_v4(settings);
    case 2:
      return migrate_v2_v3$2(settings);
    case 1:
    default:
      return migrate_v1_v2$2(settings);
  }
}
function migrate_v4_v5(v4$1) {
  const settings = {
    id: v4$1.id,
    type: v4$1.type,
    version: 5,
    resolution: v4$1.resolution,
    series: (v4$1.series ?? []).map((s3) => ({
      insightId: s3.insightId,
      aggregation: s3.aggregation,
      sampleRate: s3.sampleRate,
      title: s3.title,
      type: s3.type,
      fill: s3.fill,
      border: s3.borderColor ? [{ id: v4(), color: s3.borderColor, value: Number.MIN_SAFE_INTEGER }] : void 0,
      background: s3.backgroundColor ? [{ id: v4(), color: s3.backgroundColor, value: Number.MIN_SAFE_INTEGER }] : void 0
    }))
  };
  return settings;
}
function migrate_v3_v4(v3) {
  const settings = {
    id: v3.id,
    type: v3.type,
    version: 4,
    series: (v3.series ?? []).map((s3) => ({ ...s3, type: "line" }))
  };
  return settings;
}
function migrate_v2_v3$2(v2) {
  const settings = {
    id: v2.id,
    type: v2.type,
    version: 3,
    resolution: v2.resolution,
    series: [{ insightId: v2.insightId, aggregation: v2.aggregation, sampleRate: v2.sampleRate }]
  };
  return settings;
}
function migrate_v1_v2$2(v1) {
  var _a2;
  const settings = {
    id: v1.id,
    type: v1.type,
    version: 2,
    insightId: ((_a2 = v1.insightId) == null ? void 0 : _a2.startsWith("homey:")) ? v1.insightId : "homey:device:" + v1.deviceId + ":" + v1.insightId,
    resolution: v1.resolution,
    aggregation: "none",
    sampleRate: void 0
  };
  return settings;
}
const info$b = {
  type: "insight",
  label: "Insight",
  icon: mdiChartLine,
  category: "component",
  widget: InsightWidget,
  editor: InsightEditor,
  scopes: [
    { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] },
    { oneOf: ["homey", "homey.insights.readonly"] }
  ],
  create: create$4,
  migration: migrate$4
};
function create_fragment$K(ctx) {
  let textpicker;
  let updating_value;
  let t0;
  let label;
  let div;
  let textContent = `<span class="label-text">Gap</span>`;
  let t2;
  let select;
  let option0;
  let textContent_1 = "0 px";
  let option1;
  let textContent_2 = "2 px";
  let option2;
  let textContent_3 = "4 px";
  let option3;
  let textContent_4 = "8 px";
  let option4;
  let textContent_5 = "12 px";
  let option5;
  let textContent_6 = "16 px";
  let option6;
  let textContent_7 = "20 px";
  let option7;
  let textContent_8 = "24 px";
  let option8;
  let textContent_9 = "28 px";
  let option9;
  let textContent_10 = "32 px";
  let option10;
  let textContent_11 = "36 px";
  let option11;
  let textContent_12 = "40 px";
  let current;
  let mounted;
  let dispose;
  function textpicker_value_binding(value) {
    ctx[3](value);
  }
  let textpicker_props = { label: "Title", placeholder: "" };
  if (
    /*title*/
    ctx[0] !== void 0
  ) {
    textpicker_props.value = /*title*/
    ctx[0];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  return {
    c() {
      create_component(textpicker.$$.fragment);
      t0 = space();
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t2 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      option5 = element("option");
      option5.textContent = textContent_6;
      option6 = element("option");
      option6.textContent = textContent_7;
      option7 = element("option");
      option7.textContent = textContent_8;
      option8 = element("option");
      option8.textContent = textContent_9;
      option9 = element("option");
      option9.textContent = textContent_10;
      option10 = element("option");
      option10.textContent = textContent_11;
      option11 = element("option");
      option11.textContent = textContent_12;
      this.h();
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1dfxg89")
        div.innerHTML = textContent;
      t2 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-rs24tp")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-1ul4s52")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-g1co46")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-152pplb")
        option3.textContent = textContent_4;
      option4 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-1jk73p5")
        option4.textContent = textContent_5;
      option5 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-51dom8")
        option5.textContent = textContent_6;
      option6 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-k8h58q")
        option6.textContent = textContent_7;
      option7 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option7) !== "svelte-19vfysj")
        option7.textContent = textContent_8;
      option8 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option8) !== "svelte-c5dn1w")
        option8.textContent = textContent_9;
      option9 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option9) !== "svelte-1nb5iwa")
        option9.textContent = textContent_10;
      option10 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option10) !== "svelte-1skldz5")
        option10.textContent = textContent_11;
      option11 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option11) !== "svelte-1f2jl3q")
        option11.textContent = textContent_12;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "gap-0";
      set_input_value(option0, option0.__value);
      option1.__value = "gap-0.5";
      set_input_value(option1, option1.__value);
      option2.__value = "gap-1";
      set_input_value(option2, option2.__value);
      option3.__value = "gap-2";
      set_input_value(option3, option3.__value);
      option4.__value = "gap-3";
      set_input_value(option4, option4.__value);
      option5.__value = "gap-4";
      set_input_value(option5, option5.__value);
      option6.__value = "gap-5";
      set_input_value(option6, option6.__value);
      option7.__value = "gap-6";
      set_input_value(option7, option7.__value);
      option8.__value = "gap-7";
      set_input_value(option8, option8.__value);
      option9.__value = "gap-8";
      set_input_value(option9, option9.__value);
      option10.__value = "gap-9";
      set_input_value(option10, option10.__value);
      option11.__value = "gap-10";
      set_input_value(option11, option11.__value);
      attr(select, "class", "select");
      if (
        /*gap*/
        ctx[1] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler*/
          ctx[4].call(select)
        ));
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t2);
      append_hydration(label, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      append_hydration(select, option4);
      append_hydration(select, option5);
      append_hydration(select, option6);
      append_hydration(select, option7);
      append_hydration(select, option8);
      append_hydration(select, option9);
      append_hydration(select, option10);
      append_hydration(select, option11);
      select_option(
        select,
        /*gap*/
        ctx[1],
        true
      );
      current = true;
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*select_change_handler*/
          ctx[4]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const textpicker_changes = {};
      if (!updating_value && dirty & /*title*/
      1) {
        updating_value = true;
        textpicker_changes.value = /*title*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
      if (dirty & /*gap*/
      2) {
        select_option(
          select,
          /*gap*/
          ctx2[1]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(label);
      }
      destroy_component(textpicker, detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance$K($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let title;
  let gap;
  function onSettings(s3) {
    $$invalidate(0, title = s3.title);
    $$invalidate(1, gap = s3.gap ?? "gap-0");
  }
  function onChange(_title, _gap) {
    if (settings.title !== _title || settings.gap !== _gap) {
      $$invalidate(2, settings = { ...settings, title: _title, gap: _gap });
      dispatch("settings", settings);
    }
  }
  function textpicker_value_binding(value) {
    title = value;
    $$invalidate(0, title);
  }
  function select_change_handler() {
    gap = select_value(this);
    $$invalidate(1, gap);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(2, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    4) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*title, gap*/
    3) {
      onChange(title, gap);
    }
  };
  return [title, gap, settings, textpicker_value_binding, select_change_handler];
}
class SectionEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$K, create_fragment$K, safe_not_equal, { settings: 2 });
  }
}
function create_if_block_1$j(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      )
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block$q(ctx) {
  let p;
  let textContent = "Empty...";
  return {
    c() {
      p = element("p");
      p.textContent = textContent;
    },
    l(nodes) {
      p = claim_element(nodes, "P", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(p) !== "svelte-15emqkn")
        p.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, p, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(p);
      }
    }
  };
}
function create_default_slot$7(ctx) {
  let widget;
  let current;
  function settings_handler(...args) {
    return (
      /*settings_handler*/
      ctx[4](
        /*index*/
        ctx[10],
        ...args
      )
    );
  }
  widget = new Widget({
    props: {
      context: (
        /*context*/
        ctx[1]
      ),
      settings: (
        /*item*/
        ctx[9]
      )
    }
  });
  widget.$on("settings", settings_handler);
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const widget_changes = {};
      if (dirty & /*context*/
      2)
        widget_changes.context = /*context*/
        ctx[1];
      if (dirty & /*item*/
      512)
        widget_changes.settings = /*item*/
        ctx[9];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_fragment$J(ctx) {
  let section;
  let div;
  let h12;
  let t0;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? "New section") + ""
  );
  let t1;
  let t2;
  let t3;
  let dndlist;
  let current;
  let if_block0 = (
    /*settings*/
    ctx[0].iconId !== void 0 && create_if_block_1$j(ctx)
  );
  let if_block1 = (
    /*settings*/
    (ctx[0].items === void 0 || /*settings*/
    ctx[0].items.length === 0) && create_if_block$q()
  );
  dndlist = new DndList({
    props: {
      items: (
        /*settings*/
        ctx[0].items
      ),
      editable: (
        /*context*/
        ctx[1].editable
      ),
      class: "flex flex-col w-full " + /*settings*/
      (ctx[0].gap ?? "gap-0") + " " + /*context*/
      (ctx[1].editable ? "min-h-[50px]" : ""),
      $$slots: {
        default: [
          create_default_slot$7,
          ({ item, index: index2 }) => ({ 9: item, 10: index2 }),
          ({ item, index: index2 }) => (item ? 512 : 0) | (index2 ? 1024 : 0)
        ]
      },
      $$scope: { ctx }
    }
  });
  dndlist.$on(
    "items",
    /*items_handler*/
    ctx[5]
  );
  return {
    c() {
      section = element("section");
      div = element("div");
      h12 = element("h1");
      if (if_block0)
        if_block0.c();
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      create_component(dndlist.$$.fragment);
      this.h();
    },
    l(nodes) {
      section = claim_element(nodes, "SECTION", { class: true });
      var section_nodes = children(section);
      div = claim_element(section_nodes, "DIV", { class: true });
      var div_nodes = children(div);
      h12 = claim_element(div_nodes, "H1", { class: true });
      var h1_nodes = children(h12);
      if (if_block0)
        if_block0.l(h1_nodes);
      t0 = claim_space(h1_nodes);
      t1 = claim_text(h1_nodes, t1_value);
      h1_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      if (if_block1)
        if_block1.l(div_nodes);
      t3 = claim_space(div_nodes);
      claim_component(dndlist.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      section_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h12, "class", "card-title");
      attr(div, "class", "card-body");
      attr(section, "class", "card bg-base-200 shadow-md w-full");
    },
    m(target, anchor) {
      insert_hydration(target, section, anchor);
      append_hydration(section, div);
      append_hydration(div, h12);
      if (if_block0)
        if_block0.m(h12, null);
      append_hydration(h12, t0);
      append_hydration(h12, t1);
      append_hydration(div, t2);
      if (if_block1)
        if_block1.m(div, null);
      append_hydration(div, t3);
      mount_component(dndlist, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*settings*/
        ctx2[0].iconId !== void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*settings*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$j(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(h12, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*settings*/
      1) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? "New section") + ""))
        set_data(t1, t1_value);
      if (
        /*settings*/
        ctx2[0].items === void 0 || /*settings*/
        ctx2[0].items.length === 0
      ) {
        if (if_block1)
          ;
        else {
          if_block1 = create_if_block$q();
          if_block1.c();
          if_block1.m(div, t3);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      const dndlist_changes = {};
      if (dirty & /*settings*/
      1)
        dndlist_changes.items = /*settings*/
        ctx2[0].items;
      if (dirty & /*context*/
      2)
        dndlist_changes.editable = /*context*/
        ctx2[1].editable;
      if (dirty & /*settings, context*/
      3)
        dndlist_changes.class = "flex flex-col w-full " + /*settings*/
        (ctx2[0].gap ?? "gap-0") + " " + /*context*/
        (ctx2[1].editable ? "min-h-[50px]" : "");
      if (dirty & /*$$scope, context, item, index*/
      3586) {
        dndlist_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dndlist.$set(dndlist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(dndlist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(dndlist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(section);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      destroy_component(dndlist);
    }
  };
}
function instance$J($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  let { context } = $$props;
  const dispatch = createEventDispatcher();
  let items;
  function onSettings(_settings) {
    items = settings.items ?? [];
  }
  function onItems(_items) {
    items = [..._items];
    $$invalidate(0, settings = { ...settings, items });
    dispatch("settings", settings);
  }
  function updateWidget(index2, _widget) {
    items[index2] = { ..._widget };
    items = [...items];
    $$invalidate(0, settings = { ...settings, items });
    dispatch("settings", settings);
  }
  const settings_handler = (index2, e2) => updateWidget(index2, e2.detail);
  const items_handler = (e2) => onItems(e2.detail);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(1, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings();
    }
  };
  return [settings, context, onItems, updateWidget, settings_handler, items_handler];
}
class SectionWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$J, create_fragment$J, safe_not_equal, { settings: 0, context: 1 });
  }
}
const info$a = {
  type: "section",
  label: "Section",
  icon: mdiTableColumn,
  category: "component",
  widget: SectionWidget,
  editor: SectionEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "section", version: 1 }),
  migration: (e2) => e2
};
function create_fragment$I(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Gap</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "0 px";
  let option1;
  let textContent_2 = "2 px";
  let option2;
  let textContent_3 = "4 px";
  let option3;
  let textContent_4 = "8 px";
  let option4;
  let textContent_5 = "12 px";
  let option5;
  let textContent_6 = "16 px";
  let option6;
  let textContent_7 = "20 px";
  let option7;
  let textContent_8 = "24 px";
  let option8;
  let textContent_9 = "28 px";
  let option9;
  let textContent_10 = "32 px";
  let option10;
  let textContent_11 = "36 px";
  let option11;
  let textContent_12 = "40 px";
  let mounted;
  let dispose;
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      option5 = element("option");
      option5.textContent = textContent_6;
      option6 = element("option");
      option6.textContent = textContent_7;
      option7 = element("option");
      option7.textContent = textContent_8;
      option8 = element("option");
      option8.textContent = textContent_9;
      option9 = element("option");
      option9.textContent = textContent_10;
      option10 = element("option");
      option10.textContent = textContent_11;
      option11 = element("option");
      option11.textContent = textContent_12;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1dfxg89")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-rs24tp")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-1ul4s52")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-g1co46")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-152pplb")
        option3.textContent = textContent_4;
      option4 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-1jk73p5")
        option4.textContent = textContent_5;
      option5 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-51dom8")
        option5.textContent = textContent_6;
      option6 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-k8h58q")
        option6.textContent = textContent_7;
      option7 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option7) !== "svelte-19vfysj")
        option7.textContent = textContent_8;
      option8 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option8) !== "svelte-c5dn1w")
        option8.textContent = textContent_9;
      option9 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option9) !== "svelte-1nb5iwa")
        option9.textContent = textContent_10;
      option10 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option10) !== "svelte-1skldz5")
        option10.textContent = textContent_11;
      option11 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option11) !== "svelte-1f2jl3q")
        option11.textContent = textContent_12;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "gap-0";
      set_input_value(option0, option0.__value);
      option1.__value = "gap-0.5";
      set_input_value(option1, option1.__value);
      option2.__value = "gap-1";
      set_input_value(option2, option2.__value);
      option3.__value = "gap-2";
      set_input_value(option3, option3.__value);
      option4.__value = "gap-3";
      set_input_value(option4, option4.__value);
      option5.__value = "gap-4";
      set_input_value(option5, option5.__value);
      option6.__value = "gap-5";
      set_input_value(option6, option6.__value);
      option7.__value = "gap-6";
      set_input_value(option7, option7.__value);
      option8.__value = "gap-7";
      set_input_value(option8, option8.__value);
      option9.__value = "gap-8";
      set_input_value(option9, option9.__value);
      option10.__value = "gap-9";
      set_input_value(option10, option10.__value);
      option11.__value = "gap-10";
      set_input_value(option11, option11.__value);
      attr(select, "class", "select");
      if (
        /*value*/
        ctx[0] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler*/
          ctx[1].call(select)
        ));
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      append_hydration(select, option4);
      append_hydration(select, option5);
      append_hydration(select, option6);
      append_hydration(select, option7);
      append_hydration(select, option8);
      append_hydration(select, option9);
      append_hydration(select, option10);
      append_hydration(select, option11);
      select_option(
        select,
        /*value*/
        ctx[0],
        true
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*select_change_handler*/
          ctx[1]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*value*/
      1) {
        select_option(
          select,
          /*value*/
          ctx2[0]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$I($$self, $$props, $$invalidate) {
  let { value } = $$props;
  const dispatch = createEventDispatcher();
  function select_change_handler() {
    value = select_value(this);
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value*/
    1) {
      dispatch("value", value);
    }
  };
  return [value, select_change_handler];
}
class GapPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$I, create_fragment$I, safe_not_equal, { value: 0 });
  }
}
function create_fragment$H(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Columns</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "1 column";
  let option1;
  let textContent_2 = "2 columns";
  let option2;
  let textContent_3 = "3 columns";
  let option3;
  let textContent_4 = "4 columns";
  let option4;
  let textContent_5 = "5 columns";
  let option5;
  let textContent_6 = "6 columns";
  let option6;
  let textContent_7 = "7 columns";
  let option7;
  let textContent_8 = "8 columns";
  let option8;
  let textContent_9 = "9 columns";
  let option9;
  let textContent_10 = "10 columns";
  let option10;
  let textContent_11 = "11 columns";
  let option11;
  let textContent_12 = "12 columns";
  let mounted;
  let dispose;
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      option5 = element("option");
      option5.textContent = textContent_6;
      option6 = element("option");
      option6.textContent = textContent_7;
      option7 = element("option");
      option7.textContent = textContent_8;
      option8 = element("option");
      option8.textContent = textContent_9;
      option9 = element("option");
      option9.textContent = textContent_10;
      option10 = element("option");
      option10.textContent = textContent_11;
      option11 = element("option");
      option11.textContent = textContent_12;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1uaozs6")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-gl3pmp")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-1djc5ee")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-nozum8")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-i4be2a")
        option3.textContent = textContent_4;
      option4 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-1cumagw")
        option4.textContent = textContent_5;
      option5 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-16it6s6")
        option5.textContent = textContent_6;
      option6 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-xsflfk")
        option6.textContent = textContent_7;
      option7 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option7) !== "svelte-18c4rqi")
        option7.textContent = textContent_8;
      option8 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option8) !== "svelte-1my21a8")
        option8.textContent = textContent_9;
      option9 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option9) !== "svelte-6gpxw6")
        option9.textContent = textContent_10;
      option10 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option10) !== "svelte-s1exw6")
        option10.textContent = textContent_11;
      option11 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option11) !== "svelte-m7hty2")
        option11.textContent = textContent_12;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "grid-cols-1";
      set_input_value(option0, option0.__value);
      option1.__value = "grid-cols-2";
      set_input_value(option1, option1.__value);
      option2.__value = "grid-cols-3";
      set_input_value(option2, option2.__value);
      option3.__value = "grid-cols-4";
      set_input_value(option3, option3.__value);
      option4.__value = "grid-cols-5";
      set_input_value(option4, option4.__value);
      option5.__value = "grid-cols-6";
      set_input_value(option5, option5.__value);
      option6.__value = "grid-cols-7";
      set_input_value(option6, option6.__value);
      option7.__value = "grid-cols-8";
      set_input_value(option7, option7.__value);
      option8.__value = "grid-cols-9";
      set_input_value(option8, option8.__value);
      option9.__value = "grid-cols-10";
      set_input_value(option9, option9.__value);
      option10.__value = "grid-cols-11";
      set_input_value(option10, option10.__value);
      option11.__value = "grid-cols-12";
      set_input_value(option11, option11.__value);
      attr(select, "class", "select");
      if (
        /*value*/
        ctx[0] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler*/
          ctx[1].call(select)
        ));
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      append_hydration(select, option4);
      append_hydration(select, option5);
      append_hydration(select, option6);
      append_hydration(select, option7);
      append_hydration(select, option8);
      append_hydration(select, option9);
      append_hydration(select, option10);
      append_hydration(select, option11);
      select_option(
        select,
        /*value*/
        ctx[0],
        true
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*select_change_handler*/
          ctx[1]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*value*/
      1) {
        select_option(
          select,
          /*value*/
          ctx2[0]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$H($$self, $$props, $$invalidate) {
  let { value } = $$props;
  const dispatch = createEventDispatcher();
  function select_change_handler() {
    value = select_value(this);
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value*/
    1) {
      dispatch("value", value);
    }
  };
  return [value, select_change_handler];
}
class GridColsPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$H, create_fragment$H, safe_not_equal, { value: 0 });
  }
}
function create_fragment$G(ctx) {
  let div16;
  let div0;
  let textContent = "Adjust the number of columns and gaps based on screen sizes below.";
  let t1;
  let div3;
  let input0;
  let t2;
  let div1;
  let textContent_1 = "Small: > 640 px";
  let t4;
  let div2;
  let gridcolspicker0;
  let updating_value;
  let t5;
  let gappicker0;
  let updating_value_1;
  let t6;
  let div6;
  let input1;
  let t7;
  let div4;
  let textContent_2 = "Medium: > 768 px";
  let t9;
  let div5;
  let gridcolspicker1;
  let updating_value_2;
  let t10;
  let gappicker1;
  let updating_value_3;
  let t11;
  let div9;
  let input2;
  let t12;
  let div7;
  let textContent_3 = "Large: > 1024 px";
  let t14;
  let div8;
  let gridcolspicker2;
  let updating_value_4;
  let t15;
  let gappicker2;
  let updating_value_5;
  let t16;
  let div12;
  let input3;
  let t17;
  let div10;
  let textContent_4 = "X-Large: > 1280 px";
  let t19;
  let div11;
  let gridcolspicker3;
  let updating_value_6;
  let t20;
  let gappicker3;
  let updating_value_7;
  let t21;
  let div15;
  let input4;
  let t22;
  let div13;
  let textContent_5 = "XX-Large: > 1536 px";
  let t24;
  let div14;
  let gridcolspicker4;
  let updating_value_8;
  let t25;
  let gappicker4;
  let updating_value_9;
  let current;
  function gridcolspicker0_value_binding(value) {
    ctx[11](value);
  }
  let gridcolspicker0_props = {};
  if (
    /*sm*/
    ctx[0] !== void 0
  ) {
    gridcolspicker0_props.value = /*sm*/
    ctx[0];
  }
  gridcolspicker0 = new GridColsPicker({ props: gridcolspicker0_props });
  binding_callbacks.push(() => bind(gridcolspicker0, "value", gridcolspicker0_value_binding));
  function gappicker0_value_binding(value) {
    ctx[12](value);
  }
  let gappicker0_props = {};
  if (
    /*smGap*/
    ctx[1] !== void 0
  ) {
    gappicker0_props.value = /*smGap*/
    ctx[1];
  }
  gappicker0 = new GapPicker({ props: gappicker0_props });
  binding_callbacks.push(() => bind(gappicker0, "value", gappicker0_value_binding));
  function gridcolspicker1_value_binding(value) {
    ctx[13](value);
  }
  let gridcolspicker1_props = {};
  if (
    /*md*/
    ctx[2] !== void 0
  ) {
    gridcolspicker1_props.value = /*md*/
    ctx[2];
  }
  gridcolspicker1 = new GridColsPicker({ props: gridcolspicker1_props });
  binding_callbacks.push(() => bind(gridcolspicker1, "value", gridcolspicker1_value_binding));
  function gappicker1_value_binding(value) {
    ctx[14](value);
  }
  let gappicker1_props = {};
  if (
    /*mdGap*/
    ctx[3] !== void 0
  ) {
    gappicker1_props.value = /*mdGap*/
    ctx[3];
  }
  gappicker1 = new GapPicker({ props: gappicker1_props });
  binding_callbacks.push(() => bind(gappicker1, "value", gappicker1_value_binding));
  function gridcolspicker2_value_binding(value) {
    ctx[15](value);
  }
  let gridcolspicker2_props = {};
  if (
    /*lg*/
    ctx[4] !== void 0
  ) {
    gridcolspicker2_props.value = /*lg*/
    ctx[4];
  }
  gridcolspicker2 = new GridColsPicker({ props: gridcolspicker2_props });
  binding_callbacks.push(() => bind(gridcolspicker2, "value", gridcolspicker2_value_binding));
  function gappicker2_value_binding(value) {
    ctx[16](value);
  }
  let gappicker2_props = {};
  if (
    /*lgGap*/
    ctx[5] !== void 0
  ) {
    gappicker2_props.value = /*lgGap*/
    ctx[5];
  }
  gappicker2 = new GapPicker({ props: gappicker2_props });
  binding_callbacks.push(() => bind(gappicker2, "value", gappicker2_value_binding));
  function gridcolspicker3_value_binding(value) {
    ctx[17](value);
  }
  let gridcolspicker3_props = {};
  if (
    /*xl*/
    ctx[6] !== void 0
  ) {
    gridcolspicker3_props.value = /*xl*/
    ctx[6];
  }
  gridcolspicker3 = new GridColsPicker({ props: gridcolspicker3_props });
  binding_callbacks.push(() => bind(gridcolspicker3, "value", gridcolspicker3_value_binding));
  function gappicker3_value_binding(value) {
    ctx[18](value);
  }
  let gappicker3_props = {};
  if (
    /*xlGap*/
    ctx[7] !== void 0
  ) {
    gappicker3_props.value = /*xlGap*/
    ctx[7];
  }
  gappicker3 = new GapPicker({ props: gappicker3_props });
  binding_callbacks.push(() => bind(gappicker3, "value", gappicker3_value_binding));
  function gridcolspicker4_value_binding(value) {
    ctx[19](value);
  }
  let gridcolspicker4_props = {};
  if (
    /*xxl*/
    ctx[8] !== void 0
  ) {
    gridcolspicker4_props.value = /*xxl*/
    ctx[8];
  }
  gridcolspicker4 = new GridColsPicker({ props: gridcolspicker4_props });
  binding_callbacks.push(() => bind(gridcolspicker4, "value", gridcolspicker4_value_binding));
  function gappicker4_value_binding(value) {
    ctx[20](value);
  }
  let gappicker4_props = {};
  if (
    /*xxlGap*/
    ctx[9] !== void 0
  ) {
    gappicker4_props.value = /*xxlGap*/
    ctx[9];
  }
  gappicker4 = new GapPicker({ props: gappicker4_props });
  binding_callbacks.push(() => bind(gappicker4, "value", gappicker4_value_binding));
  return {
    c() {
      div16 = element("div");
      div0 = element("div");
      div0.textContent = textContent;
      t1 = space();
      div3 = element("div");
      input0 = element("input");
      t2 = space();
      div1 = element("div");
      div1.textContent = textContent_1;
      t4 = space();
      div2 = element("div");
      create_component(gridcolspicker0.$$.fragment);
      t5 = space();
      create_component(gappicker0.$$.fragment);
      t6 = space();
      div6 = element("div");
      input1 = element("input");
      t7 = space();
      div4 = element("div");
      div4.textContent = textContent_2;
      t9 = space();
      div5 = element("div");
      create_component(gridcolspicker1.$$.fragment);
      t10 = space();
      create_component(gappicker1.$$.fragment);
      t11 = space();
      div9 = element("div");
      input2 = element("input");
      t12 = space();
      div7 = element("div");
      div7.textContent = textContent_3;
      t14 = space();
      div8 = element("div");
      create_component(gridcolspicker2.$$.fragment);
      t15 = space();
      create_component(gappicker2.$$.fragment);
      t16 = space();
      div12 = element("div");
      input3 = element("input");
      t17 = space();
      div10 = element("div");
      div10.textContent = textContent_4;
      t19 = space();
      div11 = element("div");
      create_component(gridcolspicker3.$$.fragment);
      t20 = space();
      create_component(gappicker3.$$.fragment);
      t21 = space();
      div15 = element("div");
      input4 = element("input");
      t22 = space();
      div13 = element("div");
      div13.textContent = textContent_5;
      t24 = space();
      div14 = element("div");
      create_component(gridcolspicker4.$$.fragment);
      t25 = space();
      create_component(gappicker4.$$.fragment);
      this.h();
    },
    l(nodes) {
      div16 = claim_element(nodes, "DIV", { class: true });
      var div16_nodes = children(div16);
      div0 = claim_element(div16_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div0) !== "svelte-110p2bf")
        div0.textContent = textContent;
      t1 = claim_space(div16_nodes);
      div3 = claim_element(div16_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      input0 = claim_element(div3_nodes, "INPUT", { type: true, name: true });
      t2 = claim_space(div3_nodes);
      div1 = claim_element(div3_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div1) !== "svelte-xwb8ek")
        div1.textContent = textContent_1;
      t4 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      claim_component(gridcolspicker0.$$.fragment, div2_nodes);
      t5 = claim_space(div2_nodes);
      claim_component(gappicker0.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      div3_nodes.forEach(detach);
      t6 = claim_space(div16_nodes);
      div6 = claim_element(div16_nodes, "DIV", { class: true });
      var div6_nodes = children(div6);
      input1 = claim_element(div6_nodes, "INPUT", { type: true, name: true });
      t7 = claim_space(div6_nodes);
      div4 = claim_element(div6_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div4) !== "svelte-1suoftl")
        div4.textContent = textContent_2;
      t9 = claim_space(div6_nodes);
      div5 = claim_element(div6_nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      claim_component(gridcolspicker1.$$.fragment, div5_nodes);
      t10 = claim_space(div5_nodes);
      claim_component(gappicker1.$$.fragment, div5_nodes);
      div5_nodes.forEach(detach);
      div6_nodes.forEach(detach);
      t11 = claim_space(div16_nodes);
      div9 = claim_element(div16_nodes, "DIV", { class: true });
      var div9_nodes = children(div9);
      input2 = claim_element(div9_nodes, "INPUT", { type: true, name: true });
      t12 = claim_space(div9_nodes);
      div7 = claim_element(div9_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div7) !== "svelte-1xqbuq3")
        div7.textContent = textContent_3;
      t14 = claim_space(div9_nodes);
      div8 = claim_element(div9_nodes, "DIV", { class: true });
      var div8_nodes = children(div8);
      claim_component(gridcolspicker2.$$.fragment, div8_nodes);
      t15 = claim_space(div8_nodes);
      claim_component(gappicker2.$$.fragment, div8_nodes);
      div8_nodes.forEach(detach);
      div9_nodes.forEach(detach);
      t16 = claim_space(div16_nodes);
      div12 = claim_element(div16_nodes, "DIV", { class: true });
      var div12_nodes = children(div12);
      input3 = claim_element(div12_nodes, "INPUT", { type: true, name: true });
      t17 = claim_space(div12_nodes);
      div10 = claim_element(div12_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div10) !== "svelte-9fz7tc")
        div10.textContent = textContent_4;
      t19 = claim_space(div12_nodes);
      div11 = claim_element(div12_nodes, "DIV", { class: true });
      var div11_nodes = children(div11);
      claim_component(gridcolspicker3.$$.fragment, div11_nodes);
      t20 = claim_space(div11_nodes);
      claim_component(gappicker3.$$.fragment, div11_nodes);
      div11_nodes.forEach(detach);
      div12_nodes.forEach(detach);
      t21 = claim_space(div16_nodes);
      div15 = claim_element(div16_nodes, "DIV", { class: true });
      var div15_nodes = children(div15);
      input4 = claim_element(div15_nodes, "INPUT", { type: true, name: true });
      t22 = claim_space(div15_nodes);
      div13 = claim_element(div15_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div13) !== "svelte-19slb3g")
        div13.textContent = textContent_5;
      t24 = claim_space(div15_nodes);
      div14 = claim_element(div15_nodes, "DIV", { class: true });
      var div14_nodes = children(div14);
      claim_component(gridcolspicker4.$$.fragment, div14_nodes);
      t25 = claim_space(div14_nodes);
      claim_component(gappicker4.$$.fragment, div14_nodes);
      div14_nodes.forEach(detach);
      div15_nodes.forEach(detach);
      div16_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "");
      attr(input0, "type", "radio");
      attr(input0, "name", "breakpoint");
      attr(div1, "class", "collapse-title text-lg font-medium");
      attr(div2, "class", "collapse-content p-1");
      attr(div3, "class", "collapse bg-base-300");
      attr(input1, "type", "radio");
      attr(input1, "name", "breakpoint");
      attr(div4, "class", "collapse-title text-lg font-medium");
      attr(div5, "class", "collapse-content p-1");
      attr(div6, "class", "collapse bg-base-300");
      attr(input2, "type", "radio");
      attr(input2, "name", "breakpoint");
      attr(div7, "class", "collapse-title text-lg font-medium");
      attr(div8, "class", "collapse-content p-1");
      attr(div9, "class", "collapse bg-base-300");
      attr(input3, "type", "radio");
      attr(input3, "name", "breakpoint");
      attr(div10, "class", "collapse-title text-lg font-medium");
      attr(div11, "class", "collapse-content p-1");
      attr(div12, "class", "collapse bg-base-300");
      attr(input4, "type", "radio");
      attr(input4, "name", "breakpoint");
      attr(div13, "class", "collapse-title text-lg font-medium");
      attr(div14, "class", "collapse-content p-1");
      attr(div15, "class", "collapse bg-base-300");
      attr(div16, "class", "flex flex-col gap-2");
    },
    m(target, anchor) {
      insert_hydration(target, div16, anchor);
      append_hydration(div16, div0);
      append_hydration(div16, t1);
      append_hydration(div16, div3);
      append_hydration(div3, input0);
      append_hydration(div3, t2);
      append_hydration(div3, div1);
      append_hydration(div3, t4);
      append_hydration(div3, div2);
      mount_component(gridcolspicker0, div2, null);
      append_hydration(div2, t5);
      mount_component(gappicker0, div2, null);
      append_hydration(div16, t6);
      append_hydration(div16, div6);
      append_hydration(div6, input1);
      append_hydration(div6, t7);
      append_hydration(div6, div4);
      append_hydration(div6, t9);
      append_hydration(div6, div5);
      mount_component(gridcolspicker1, div5, null);
      append_hydration(div5, t10);
      mount_component(gappicker1, div5, null);
      append_hydration(div16, t11);
      append_hydration(div16, div9);
      append_hydration(div9, input2);
      append_hydration(div9, t12);
      append_hydration(div9, div7);
      append_hydration(div9, t14);
      append_hydration(div9, div8);
      mount_component(gridcolspicker2, div8, null);
      append_hydration(div8, t15);
      mount_component(gappicker2, div8, null);
      append_hydration(div16, t16);
      append_hydration(div16, div12);
      append_hydration(div12, input3);
      append_hydration(div12, t17);
      append_hydration(div12, div10);
      append_hydration(div12, t19);
      append_hydration(div12, div11);
      mount_component(gridcolspicker3, div11, null);
      append_hydration(div11, t20);
      mount_component(gappicker3, div11, null);
      append_hydration(div16, t21);
      append_hydration(div16, div15);
      append_hydration(div15, input4);
      append_hydration(div15, t22);
      append_hydration(div15, div13);
      append_hydration(div15, t24);
      append_hydration(div15, div14);
      mount_component(gridcolspicker4, div14, null);
      append_hydration(div14, t25);
      mount_component(gappicker4, div14, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const gridcolspicker0_changes = {};
      if (!updating_value && dirty & /*sm*/
      1) {
        updating_value = true;
        gridcolspicker0_changes.value = /*sm*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      gridcolspicker0.$set(gridcolspicker0_changes);
      const gappicker0_changes = {};
      if (!updating_value_1 && dirty & /*smGap*/
      2) {
        updating_value_1 = true;
        gappicker0_changes.value = /*smGap*/
        ctx2[1];
        add_flush_callback(() => updating_value_1 = false);
      }
      gappicker0.$set(gappicker0_changes);
      const gridcolspicker1_changes = {};
      if (!updating_value_2 && dirty & /*md*/
      4) {
        updating_value_2 = true;
        gridcolspicker1_changes.value = /*md*/
        ctx2[2];
        add_flush_callback(() => updating_value_2 = false);
      }
      gridcolspicker1.$set(gridcolspicker1_changes);
      const gappicker1_changes = {};
      if (!updating_value_3 && dirty & /*mdGap*/
      8) {
        updating_value_3 = true;
        gappicker1_changes.value = /*mdGap*/
        ctx2[3];
        add_flush_callback(() => updating_value_3 = false);
      }
      gappicker1.$set(gappicker1_changes);
      const gridcolspicker2_changes = {};
      if (!updating_value_4 && dirty & /*lg*/
      16) {
        updating_value_4 = true;
        gridcolspicker2_changes.value = /*lg*/
        ctx2[4];
        add_flush_callback(() => updating_value_4 = false);
      }
      gridcolspicker2.$set(gridcolspicker2_changes);
      const gappicker2_changes = {};
      if (!updating_value_5 && dirty & /*lgGap*/
      32) {
        updating_value_5 = true;
        gappicker2_changes.value = /*lgGap*/
        ctx2[5];
        add_flush_callback(() => updating_value_5 = false);
      }
      gappicker2.$set(gappicker2_changes);
      const gridcolspicker3_changes = {};
      if (!updating_value_6 && dirty & /*xl*/
      64) {
        updating_value_6 = true;
        gridcolspicker3_changes.value = /*xl*/
        ctx2[6];
        add_flush_callback(() => updating_value_6 = false);
      }
      gridcolspicker3.$set(gridcolspicker3_changes);
      const gappicker3_changes = {};
      if (!updating_value_7 && dirty & /*xlGap*/
      128) {
        updating_value_7 = true;
        gappicker3_changes.value = /*xlGap*/
        ctx2[7];
        add_flush_callback(() => updating_value_7 = false);
      }
      gappicker3.$set(gappicker3_changes);
      const gridcolspicker4_changes = {};
      if (!updating_value_8 && dirty & /*xxl*/
      256) {
        updating_value_8 = true;
        gridcolspicker4_changes.value = /*xxl*/
        ctx2[8];
        add_flush_callback(() => updating_value_8 = false);
      }
      gridcolspicker4.$set(gridcolspicker4_changes);
      const gappicker4_changes = {};
      if (!updating_value_9 && dirty & /*xxlGap*/
      512) {
        updating_value_9 = true;
        gappicker4_changes.value = /*xxlGap*/
        ctx2[9];
        add_flush_callback(() => updating_value_9 = false);
      }
      gappicker4.$set(gappicker4_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(gridcolspicker0.$$.fragment, local);
      transition_in(gappicker0.$$.fragment, local);
      transition_in(gridcolspicker1.$$.fragment, local);
      transition_in(gappicker1.$$.fragment, local);
      transition_in(gridcolspicker2.$$.fragment, local);
      transition_in(gappicker2.$$.fragment, local);
      transition_in(gridcolspicker3.$$.fragment, local);
      transition_in(gappicker3.$$.fragment, local);
      transition_in(gridcolspicker4.$$.fragment, local);
      transition_in(gappicker4.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(gridcolspicker0.$$.fragment, local);
      transition_out(gappicker0.$$.fragment, local);
      transition_out(gridcolspicker1.$$.fragment, local);
      transition_out(gappicker1.$$.fragment, local);
      transition_out(gridcolspicker2.$$.fragment, local);
      transition_out(gappicker2.$$.fragment, local);
      transition_out(gridcolspicker3.$$.fragment, local);
      transition_out(gappicker3.$$.fragment, local);
      transition_out(gridcolspicker4.$$.fragment, local);
      transition_out(gappicker4.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div16);
      }
      destroy_component(gridcolspicker0);
      destroy_component(gappicker0);
      destroy_component(gridcolspicker1);
      destroy_component(gappicker1);
      destroy_component(gridcolspicker2);
      destroy_component(gappicker2);
      destroy_component(gridcolspicker3);
      destroy_component(gappicker3);
      destroy_component(gridcolspicker4);
      destroy_component(gappicker4);
    }
  };
}
function instance$G($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let sm;
  let smGap;
  let md;
  let mdGap;
  let lg;
  let lgGap;
  let xl;
  let xlGap;
  let xxl;
  let xxlGap;
  function onSettings(s3) {
    $$invalidate(0, sm = settings.sm ?? "grid-cols-1");
    $$invalidate(2, md = settings.md ?? "grid-cols-2");
    $$invalidate(4, lg = settings.lg ?? "grid-cols-3");
    $$invalidate(6, xl = settings.xl ?? "grid-cols-4");
    $$invalidate(8, xxl = settings.xxl ?? "grid-cols-5");
    $$invalidate(1, smGap = settings.smGap ?? "gap-2");
    $$invalidate(3, mdGap = settings.mdGap ?? "gap-2");
    $$invalidate(5, lgGap = settings.lgGap ?? "gap-2");
    $$invalidate(7, xlGap = settings.xlGap ?? "gap-2");
    $$invalidate(9, xxlGap = settings.xxlGap ?? "gap-2");
  }
  function onChange(_sm, _smGap, _md, _mdGap, _lg, _lgGap, _xl, _xlGap, _xxl, _xxlGap) {
    if (_sm !== settings.sm || _smGap !== settings.smGap || _md !== settings.md || _smGap !== settings.mdGap || _lg !== settings.lg || _smGap !== settings.lgGap || _xl !== settings.xl || _smGap !== settings.xlGap || _xxl !== settings.xxl || _smGap !== settings.xxlGap) {
      $$invalidate(10, settings = {
        ...settings,
        sm: _sm,
        smGap: _smGap,
        md: _md,
        mdGap: _mdGap,
        lg: _lg,
        lgGap: _lgGap,
        xl: _xl,
        xlGap: _xlGap,
        xxl: _xxl,
        xxlGap: _xxlGap
      });
      dispatch("settings", settings);
    }
  }
  function gridcolspicker0_value_binding(value) {
    sm = value;
    $$invalidate(0, sm);
  }
  function gappicker0_value_binding(value) {
    smGap = value;
    $$invalidate(1, smGap);
  }
  function gridcolspicker1_value_binding(value) {
    md = value;
    $$invalidate(2, md);
  }
  function gappicker1_value_binding(value) {
    mdGap = value;
    $$invalidate(3, mdGap);
  }
  function gridcolspicker2_value_binding(value) {
    lg = value;
    $$invalidate(4, lg);
  }
  function gappicker2_value_binding(value) {
    lgGap = value;
    $$invalidate(5, lgGap);
  }
  function gridcolspicker3_value_binding(value) {
    xl = value;
    $$invalidate(6, xl);
  }
  function gappicker3_value_binding(value) {
    xlGap = value;
    $$invalidate(7, xlGap);
  }
  function gridcolspicker4_value_binding(value) {
    xxl = value;
    $$invalidate(8, xxl);
  }
  function gappicker4_value_binding(value) {
    xxlGap = value;
    $$invalidate(9, xxlGap);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(10, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1024) {
      onSettings();
    }
    if ($$self.$$.dirty & /*sm, smGap, md, mdGap, lg, lgGap, xl, xlGap, xxl, xxlGap*/
    1023) {
      onChange(sm, smGap, md, mdGap, lg, lgGap, xl, xlGap, xxl, xxlGap);
    }
  };
  return [
    sm,
    smGap,
    md,
    mdGap,
    lg,
    lgGap,
    xl,
    xlGap,
    xxl,
    xxlGap,
    settings,
    gridcolspicker0_value_binding,
    gappicker0_value_binding,
    gridcolspicker1_value_binding,
    gappicker1_value_binding,
    gridcolspicker2_value_binding,
    gappicker2_value_binding,
    gridcolspicker3_value_binding,
    gappicker3_value_binding,
    gridcolspicker4_value_binding,
    gappicker4_value_binding
  ];
}
class SectionsEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$G, create_fragment$G, safe_not_equal, { settings: 10 });
  }
}
function create_if_block$p(ctx) {
  let div1;
  let button;
  let icon;
  let t0;
  let div0;
  let textContent = "Add section";
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: mdiPlus } });
  return {
    c() {
      div1 = element("div");
      button = element("button");
      create_component(icon.$$.fragment);
      t0 = space();
      div0 = element("div");
      div0.textContent = textContent;
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      button = claim_element(div1_nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      button_nodes.forEach(detach);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(div0) !== "svelte-1gpwupy")
        div0.textContent = textContent;
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(button, "class", "btn btn-circle");
      attr(div1, "class", "flex align-middle justify-center w-full py-2");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, button);
      mount_component(icon, button, null);
      append_hydration(div1, t0);
      append_hydration(div1, div0);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", stop_propagation(
          /*click_handler*/
          ctx[16]
        ));
        mounted = true;
      }
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot$6(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      context: (
        /*context*/
        ctx[0]
      ),
      settings: (
        /*item*/
        ctx[21]
      )
    }
  });
  widget.$on(
    "settings",
    /*settings_handler*/
    ctx[17]
  );
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty & /*context*/
      1)
        widget_changes.context = /*context*/
        ctx2[0];
      if (dirty & /*item*/
      2097152)
        widget_changes.settings = /*item*/
        ctx2[21];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_fragment$F(ctx) {
  let t2;
  let dndlist;
  let current;
  let if_block = (
    /*context*/
    ctx[0].editable && create_if_block$p(ctx)
  );
  dndlist = new DndList({
    props: {
      items: (
        /*items*/
        ctx[1]
      ),
      editable: (
        /*context*/
        ctx[0].editable
      ),
      class: "w-full grid gap-1 sm:" + /*smGap*/
      ctx[3] + " md:" + /*mdGap*/
      ctx[5] + " lg:" + /*lgGap*/
      ctx[7] + " xl:" + /*xlGap*/
      ctx[9] + " 2xl:" + /*xxlGap*/
      ctx[11] + " grid-cols-1 sm:" + /*sm*/
      ctx[2] + " md:" + /*md*/
      ctx[4] + " lg:" + /*lg*/
      ctx[6] + " xl:" + /*xl*/
      ctx[8] + " 2xl:" + /*xxl*/
      ctx[10] + " " + /*context*/
      (ctx[0].editable ? "min-h-[50px]" : ""),
      $$slots: {
        default: [
          create_default_slot$6,
          ({ item }) => ({ 21: item }),
          ({ item }) => item ? 2097152 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  dndlist.$on(
    "items",
    /*items_handler*/
    ctx[18]
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      t2 = space();
      create_component(dndlist.$$.fragment);
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
      claim_component(dndlist.$$.fragment, nodes);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(dndlist, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*context*/
        ctx2[0].editable
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*context*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$p(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const dndlist_changes = {};
      if (dirty & /*items*/
      2)
        dndlist_changes.items = /*items*/
        ctx2[1];
      if (dirty & /*context*/
      1)
        dndlist_changes.editable = /*context*/
        ctx2[0].editable;
      if (dirty & /*smGap, mdGap, lgGap, xlGap, xxlGap, sm, md, lg, xl, xxl, context*/
      4093)
        dndlist_changes.class = "w-full grid gap-1 sm:" + /*smGap*/
        ctx2[3] + " md:" + /*mdGap*/
        ctx2[5] + " lg:" + /*lgGap*/
        ctx2[7] + " xl:" + /*xlGap*/
        ctx2[9] + " 2xl:" + /*xxlGap*/
        ctx2[11] + " grid-cols-1 sm:" + /*sm*/
        ctx2[2] + " md:" + /*md*/
        ctx2[4] + " lg:" + /*lg*/
        ctx2[6] + " xl:" + /*xl*/
        ctx2[8] + " 2xl:" + /*xxl*/
        ctx2[10] + " " + /*context*/
        (ctx2[0].editable ? "min-h-[50px]" : "");
      if (dirty & /*$$scope, context, item*/
      6291457) {
        dndlist_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dndlist.$set(dndlist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(dndlist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(dndlist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      if (if_block)
        if_block.d(detaching);
      destroy_component(dndlist, detaching);
    }
  };
}
function instance$F($$self, $$props, $$invalidate) {
  let { context } = $$props;
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let items;
  let sm;
  let smGap;
  let md;
  let mdGap;
  let lg;
  let lgGap;
  let xl;
  let xlGap;
  let xxl;
  let xxlGap;
  function onSettings(_settings) {
    $$invalidate(1, items = settings.items ?? []);
    $$invalidate(2, sm = settings.sm ?? "grid-cols-1");
    $$invalidate(4, md = settings.md ?? "grid-cols-2");
    $$invalidate(6, lg = settings.lg ?? "grid-cols-3");
    $$invalidate(8, xl = settings.xl ?? "grid-cols-4");
    $$invalidate(10, xxl = settings.xxl ?? "grid-cols-5");
    $$invalidate(3, smGap = settings.smGap ?? "gap-2");
    $$invalidate(5, mdGap = settings.mdGap ?? "gap-2");
    $$invalidate(7, lgGap = settings.lgGap ?? "gap-2");
    $$invalidate(9, xlGap = settings.xlGap ?? "gap-2");
    $$invalidate(11, xxlGap = settings.xxlGap ?? "gap-2");
  }
  function onItems(_items) {
    $$invalidate(1, items = [..._items]);
    $$invalidate(15, settings = { ...settings, items });
    dispatch("settings", settings);
  }
  function updateSection(_section) {
    const index2 = items.findIndex((s3) => s3.id === _section.id);
    $$invalidate(1, items[index2] = { ..._section }, items);
    $$invalidate(1, items = [...items]);
    $$invalidate(15, settings = { ...settings, items });
    dispatch("settings", settings);
  }
  function addSection() {
    const section = info$a.create();
    $$invalidate(1, items = [...items, section]);
    $$invalidate(15, settings = { ...settings, items });
    dispatch("settings", settings);
  }
  const click_handler = (e2) => addSection();
  const settings_handler = (e2) => updateSection(e2.detail);
  const items_handler = (e2) => onItems(e2.detail);
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(0, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(15, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    32768) {
      onSettings();
    }
  };
  return [
    context,
    items,
    sm,
    smGap,
    md,
    mdGap,
    lg,
    lgGap,
    xl,
    xlGap,
    xxl,
    xxlGap,
    onItems,
    updateSection,
    addSection,
    settings,
    click_handler,
    settings_handler,
    items_handler
  ];
}
class SectionsWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$F, create_fragment$F, safe_not_equal, { context: 0, settings: 15 });
  }
}
const info$9 = {
  type: "sections",
  label: "Sections",
  icon: mdiViewColumnOutline,
  category: "layout",
  widget: SectionsWidget,
  editor: SectionsEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "sections", version: 1 }),
  migration: (e2) => e2
};
function create_if_block_1$i(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: { data: getIcon(
      /*item*/
      ctx[0].iconId
    ) }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*item*/
      1)
        icon_changes.data = getIcon(
          /*item*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block$o(ctx) {
  let await_block_anchor;
  let promise;
  let info2 = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$3,
    then: create_then_block$3,
    catch: create_catch_block$3,
    value: 3
  };
  handle_promise(promise = /*$homey*/
  ctx[1].baseUrl, info2);
  return {
    c() {
      await_block_anchor = empty();
      info2.block.c();
    },
    l(nodes) {
      await_block_anchor = empty();
      info2.block.l(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, await_block_anchor, anchor);
      info2.block.m(target, info2.anchor = anchor);
      info2.mount = () => await_block_anchor.parentNode;
      info2.anchor = await_block_anchor;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info2.ctx = ctx;
      if (dirty & /*$homey*/
      2 && promise !== (promise = /*$homey*/
      ctx[1].baseUrl) && handle_promise(promise, info2))
        ;
      else {
        update_await_block_branch(info2, ctx, dirty);
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info2.block.d(detaching);
      info2.token = null;
      info2 = null;
    }
  };
}
function create_catch_block$3(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block$3(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
      this.h();
    },
    h() {
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[3] + /*item*/
      ctx[0].iconUrl))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*item*/
      ctx[0].title);
      attr(img, "class", "h-6 w-6 mr-2 dark:invert inline");
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$homey, item*/
      3 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[3] + /*item*/
      ctx2[0].iconUrl)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*item*/
      1 && img_alt_value !== (img_alt_value = /*item*/
      ctx2[0].title)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block$3(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_fragment$E(ctx) {
  let button;
  let div2;
  let current_block_type_index;
  let if_block;
  let t0;
  let div1;
  let span0;
  let t1_value = (
    /*item*/
    ctx[0].title + ""
  );
  let t1;
  let t2;
  let div0;
  let span1;
  let t3_value = (
    /*item*/
    (ctx[0].subtitle ?? "") + ""
  );
  let t3;
  let t4;
  let span2;
  let t5_value = (
    /*item*/
    (ctx[0].subtitleAlt ?? "") + ""
  );
  let t5;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block$o, create_if_block_1$i];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*item*/
      ctx2[0].iconUrl !== void 0
    )
      return 0;
    if (
      /*item*/
      ctx2[0].iconId !== void 0
    )
      return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      button = element("button");
      div2 = element("div");
      if (if_block)
        if_block.c();
      t0 = space();
      div1 = element("div");
      span0 = element("span");
      t1 = text(t1_value);
      t2 = space();
      div0 = element("div");
      span1 = element("span");
      t3 = text(t3_value);
      t4 = space();
      span2 = element("span");
      t5 = text(t5_value);
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      div2 = claim_element(button_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      if (if_block)
        if_block.l(div2_nodes);
      t0 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      span0 = claim_element(div1_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t1 = claim_text(span0_nodes, t1_value);
      span0_nodes.forEach(detach);
      t2 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span1 = claim_element(div0_nodes, "SPAN", {});
      var span1_nodes = children(span1);
      t3 = claim_text(span1_nodes, t3_value);
      span1_nodes.forEach(detach);
      t4 = claim_space(div0_nodes);
      span2 = claim_element(div0_nodes, "SPAN", {});
      var span2_nodes = children(span2);
      t5 = claim_text(span2_nodes, t5_value);
      span2_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      button_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span0, "class", "text-lg text-start");
      attr(div0, "class", "w-full flex justify-between");
      attr(div1, "class", "flex-grow flex flex-col ml-1");
      attr(div2, "class", "w-full flex items-center");
      attr(button, "class", "btn btn-ghost w-full my-2");
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, div2);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div2, null);
      }
      append_hydration(div2, t0);
      append_hydration(div2, div1);
      append_hydration(div1, span0);
      append_hydration(span0, t1);
      append_hydration(div1, t2);
      append_hydration(div1, div0);
      append_hydration(div0, span1);
      append_hydration(span1, t3);
      append_hydration(div0, t4);
      append_hydration(div0, span2);
      append_hydration(span2, t5);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[2]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(div2, t0);
        } else {
          if_block = null;
        }
      }
      if ((!current || dirty & /*item*/
      1) && t1_value !== (t1_value = /*item*/
      ctx2[0].title + ""))
        set_data(t1, t1_value);
      if ((!current || dirty & /*item*/
      1) && t3_value !== (t3_value = /*item*/
      (ctx2[0].subtitle ?? "") + ""))
        set_data(t3, t3_value);
      if ((!current || dirty & /*item*/
      1) && t5_value !== (t5_value = /*item*/
      (ctx2[0].subtitleAlt ?? "") + ""))
        set_data(t5, t5_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$E($$self, $$props, $$invalidate) {
  let $homey;
  component_subscribe($$self, homey, ($$value) => $$invalidate(1, $homey = $$value));
  let { item } = $$props;
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("item" in $$props2)
      $$invalidate(0, item = $$props2.item);
  };
  return [item, $homey, click_handler];
}
class ItemElement extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$E, create_fragment$E, safe_not_equal, { item: 0 });
  }
}
function get_each_context$8(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list[i2];
  return child_ctx;
}
function create_if_block$n(ctx) {
  let t2;
  let each_1_anchor;
  let current;
  function select_block_type(ctx2, dirty) {
    if (
      /*items*/
      ctx2[1].length > /*maxItems*/
      ctx2[2]
    )
      return create_if_block_1$h;
    return create_else_block$f;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  let each_value = ensure_array_like(
    /*visible*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$8(get_each_context$8(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      if_block.c();
      t2 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      t2 = claim_space(nodes);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(t2.parentNode, t2);
        }
      }
      if (dirty & /*visible, select*/
      24) {
        each_value = ensure_array_like(
          /*visible*/
          ctx2[3]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$8(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$8(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(each_1_anchor);
      }
      if_block.d(detaching);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_else_block$f(ctx) {
  let div;
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(
        /*label*/
        ctx[0]
      );
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      t2 = claim_text(
        div_nodes,
        /*label*/
        ctx[0]
      );
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "text-xl p-2 border-b-2 border-neutral");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*label*/
      1)
        set_data(
          t2,
          /*label*/
          ctx2[0]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_1$h(ctx) {
  let div1;
  let div0;
  let t0;
  let t1;
  let button;
  let t2;
  let t3_value = (
    /*items*/
    ctx[1].length + ""
  );
  let t3;
  let t4;
  let t5;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = text(
        /*label*/
        ctx[0]
      );
      t1 = space();
      button = element("button");
      t2 = text("View ");
      t3 = text(t3_value);
      t4 = space();
      t5 = text(
        /*label*/
        ctx[0]
      );
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      t0 = claim_text(
        div0_nodes,
        /*label*/
        ctx[0]
      );
      div0_nodes.forEach(detach);
      t1 = claim_space(div1_nodes);
      button = claim_element(div1_nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      t2 = claim_text(button_nodes, "View ");
      t3 = claim_text(button_nodes, t3_value);
      t4 = claim_space(button_nodes);
      t5 = claim_text(
        button_nodes,
        /*label*/
        ctx[0]
      );
      button_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "text-xl m-2");
      attr(button, "class", "btn btn-primary btn-link");
      attr(div1, "class", "w-full flex justify-between border-b-2 border-neutral");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      append_hydration(div0, t0);
      append_hydration(div1, t1);
      append_hydration(div1, button);
      append_hydration(button, t2);
      append_hydration(button, t3);
      append_hydration(button, t4);
      append_hydration(button, t5);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*label*/
      1)
        set_data(
          t0,
          /*label*/
          ctx2[0]
        );
      if (dirty & /*items*/
      2 && t3_value !== (t3_value = /*items*/
      ctx2[1].length + ""))
        set_data(t3, t3_value);
      if (dirty & /*label*/
      1)
        set_data(
          t5,
          /*label*/
          ctx2[0]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$8(ctx) {
  let itemelement;
  let current;
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[7](
        /*item*/
        ctx[9]
      )
    );
  }
  itemelement = new ItemElement({ props: { item: (
    /*item*/
    ctx[9]
  ) } });
  itemelement.$on("click", click_handler_1);
  return {
    c() {
      create_component(itemelement.$$.fragment);
    },
    l(nodes) {
      claim_component(itemelement.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(itemelement, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const itemelement_changes = {};
      if (dirty & /*visible*/
      8)
        itemelement_changes.item = /*item*/
        ctx[9];
      itemelement.$set(itemelement_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(itemelement.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(itemelement.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(itemelement, detaching);
    }
  };
}
function create_fragment$D(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*items*/
    ctx[1].length > 0 && create_if_block$n(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*items*/
        ctx2[1].length > 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*items*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$n(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$D($$self, $$props, $$invalidate) {
  let visible;
  let { label } = $$props;
  let { items } = $$props;
  let { maxItems = 5 } = $$props;
  const dispatch = createEventDispatcher();
  function select(item) {
    dispatch("item", item);
  }
  function view() {
    dispatch("view");
  }
  const click_handler = (e2) => view();
  const click_handler_1 = (item) => select(item);
  $$self.$$set = ($$props2) => {
    if ("label" in $$props2)
      $$invalidate(0, label = $$props2.label);
    if ("items" in $$props2)
      $$invalidate(1, items = $$props2.items);
    if ("maxItems" in $$props2)
      $$invalidate(2, maxItems = $$props2.maxItems);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*items, maxItems*/
    6) {
      $$invalidate(3, visible = items.slice(0, Math.min(items.length, maxItems)));
    }
  };
  return [label, items, maxItems, visible, select, view, click_handler, click_handler_1];
}
class ItemSection extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$D, create_fragment$D, safe_not_equal, { label: 0, items: 1, maxItems: 2 });
  }
}
function get_each_context$7(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[39] = list[i2];
  child_ctx[41] = i2;
  return child_ctx;
}
function create_else_block_1$4(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMagnify } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_3$9(ctx) {
  let await_block_anchor;
  let promise;
  let current;
  let info2 = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$2,
    then: create_then_block$2,
    catch: create_catch_block$2,
    value: 43,
    blocks: [, , ,]
  };
  handle_promise(promise = /*$homey*/
  ctx[9].baseUrl, info2);
  return {
    c() {
      await_block_anchor = empty();
      info2.block.c();
    },
    l(nodes) {
      await_block_anchor = empty();
      info2.block.l(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, await_block_anchor, anchor);
      info2.block.m(target, info2.anchor = anchor);
      info2.mount = () => await_block_anchor.parentNode;
      info2.anchor = await_block_anchor;
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info2.ctx = ctx;
      if (dirty[0] & /*$homey*/
      512 && promise !== (promise = /*$homey*/
      ctx[9].baseUrl) && handle_promise(promise, info2))
        ;
      else {
        update_await_block_branch(info2, ctx, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(info2.block);
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        const block = info2.blocks[i2];
        transition_out(block);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info2.block.d(detaching);
      info2.token = null;
      info2 = null;
    }
  };
}
function create_catch_block$2(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d: noop$1
  };
}
function create_then_block$2(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
      this.h();
    },
    h() {
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[43] + /*selected*/
      ctx[4].iconUrl))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*selected*/
      ctx[4].title);
      attr(img, "class", "h-6 w-6 mr-2 dark:invert inline");
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*$homey, selected*/
      528 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[43] + /*selected*/
      ctx2[4].iconUrl)) {
        attr(img, "src", img_src_value);
      }
      if (dirty[0] & /*selected*/
      16 && img_alt_value !== (img_alt_value = /*selected*/
      ctx2[4].title)) {
        attr(img, "alt", img_alt_value);
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block$2(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMagnify } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_1$g(ctx) {
  let div;
  let span;
  let t2;
  let if_block = (
    /*selected*/
    ctx[4] !== void 0 && create_if_block_2$b(ctx)
  );
  return {
    c() {
      div = element("div");
      span = element("span");
      t2 = space();
      if (if_block)
        if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      span = claim_element(div_nodes, "SPAN", { class: true });
      children(span).forEach(detach);
      t2 = claim_space(div_nodes);
      if (if_block)
        if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text");
      attr(div, "class", "label whitespace-nowrap overflow-ellipsis");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, span);
      append_hydration(div, t2);
      if (if_block)
        if_block.m(div, null);
    },
    p(ctx2, dirty) {
      if (
        /*selected*/
        ctx2[4] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_2$b(ctx2);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
    }
  };
}
function create_if_block_2$b(ctx) {
  let span;
  let t_value = (
    /*selected*/
    ctx[4].title + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text-alt");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*selected*/
      16 && t_value !== (t_value = /*selected*/
      ctx2[4].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_else_block$e(ctx) {
  var _a2;
  let div;
  let button;
  let icon;
  let t0;
  let t1;
  let span;
  let t2;
  let t3_value = (
    /*viewItems*/
    ((_a2 = ctx[8]) == null ? void 0 : _a2.length) + ""
  );
  let t3;
  let t4;
  let t5_value = (
    /*labels*/
    ctx[11][
      /*types*/
      ctx[10].indexOf(
        /*viewType*/
        ctx[5]
      )
    ] + ""
  );
  let t5;
  let t6;
  let virtuallist;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: mdiArrowLeft } });
  virtuallist = new VirtualList({
    props: {
      items: (
        /*viewItems*/
        ctx[8]
      ),
      height: "50vh",
      $$slots: {
        default: [
          create_default_slot$5,
          ({ item }) => ({ 42: item }),
          ({ item }) => [0, item ? 2048 : 0]
        ]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      button = element("button");
      create_component(icon.$$.fragment);
      t0 = text(" \r\n                        Back");
      t1 = space();
      span = element("span");
      t2 = text("Viewing ");
      t3 = text(t3_value);
      t4 = space();
      t5 = text(t5_value);
      t6 = space();
      create_component(virtuallist.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      button = claim_element(div_nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      t0 = claim_text(button_nodes, " \r\n                        Back");
      button_nodes.forEach(detach);
      t1 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, "Viewing ");
      t3 = claim_text(span_nodes, t3_value);
      t4 = claim_space(span_nodes);
      t5 = claim_text(span_nodes, t5_value);
      span_nodes.forEach(detach);
      div_nodes.forEach(detach);
      t6 = claim_space(nodes);
      claim_component(virtuallist.$$.fragment, nodes);
      this.h();
    },
    h() {
      attr(button, "class", "btn btn-ghost");
      attr(span, "class", "text-secondary");
      attr(div, "class", "w-full flex justify-between items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, button);
      mount_component(icon, button, null);
      append_hydration(button, t0);
      append_hydration(div, t1);
      append_hydration(div, span);
      append_hydration(span, t2);
      append_hydration(span, t3);
      append_hydration(span, t4);
      append_hydration(span, t5);
      insert_hydration(target, t6, anchor);
      mount_component(virtuallist, target, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[31]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      var _a3;
      if ((!current || dirty[0] & /*viewItems*/
      256) && t3_value !== (t3_value = /*viewItems*/
      ((_a3 = ctx2[8]) == null ? void 0 : _a3.length) + ""))
        set_data(t3, t3_value);
      if ((!current || dirty[0] & /*viewType*/
      32) && t5_value !== (t5_value = /*labels*/
      ctx2[11][
        /*types*/
        ctx2[10].indexOf(
          /*viewType*/
          ctx2[5]
        )
      ] + ""))
        set_data(t5, t5_value);
      const virtuallist_changes = {};
      if (dirty[0] & /*viewItems*/
      256)
        virtuallist_changes.items = /*viewItems*/
        ctx2[8];
      if (dirty[1] & /*$$scope, item*/
      10240) {
        virtuallist_changes.$$scope = { dirty, ctx: ctx2 };
      }
      virtuallist.$set(virtuallist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      transition_in(virtuallist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      transition_out(virtuallist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t6);
      }
      destroy_component(icon);
      destroy_component(virtuallist, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$m(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*types*/
    ctx[10]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$7(get_each_context$7(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*labels, types, filtered, onItem, onView*/
      15488) {
        each_value = ensure_array_like(
          /*types*/
          ctx2[10]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$7(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$7(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot$5(ctx) {
  let itemelement;
  let current;
  function click_handler_22() {
    return (
      /*click_handler_2*/
      ctx[32](
        /*item*/
        ctx[42]
      )
    );
  }
  itemelement = new ItemElement({ props: { item: (
    /*item*/
    ctx[42]
  ) } });
  itemelement.$on("click", click_handler_22);
  return {
    c() {
      create_component(itemelement.$$.fragment);
    },
    l(nodes) {
      claim_component(itemelement.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(itemelement, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const itemelement_changes = {};
      if (dirty[1] & /*item*/
      2048)
        itemelement_changes.item = /*item*/
        ctx[42];
      itemelement.$set(itemelement_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(itemelement.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(itemelement.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(itemelement, detaching);
    }
  };
}
function create_each_block$7(ctx) {
  let itemsection;
  let current;
  function view_handler(...args) {
    return (
      /*view_handler*/
      ctx[30](
        /*type*/
        ctx[39],
        ...args
      )
    );
  }
  itemsection = new ItemSection({
    props: {
      label: (
        /*labels*/
        ctx[11][
          /*index*/
          ctx[41]
        ]
      ),
      items: getItems(
        /*type*/
        ctx[39],
        /*filtered*/
        ctx[7]
      )
    }
  });
  itemsection.$on(
    "item",
    /*item_handler*/
    ctx[29]
  );
  itemsection.$on("view", view_handler);
  return {
    c() {
      create_component(itemsection.$$.fragment);
    },
    l(nodes) {
      claim_component(itemsection.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(itemsection, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const itemsection_changes = {};
      if (dirty[0] & /*filtered*/
      128)
        itemsection_changes.items = getItems(
          /*type*/
          ctx[39],
          /*filtered*/
          ctx[7]
        );
      itemsection.$set(itemsection_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(itemsection.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(itemsection.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(itemsection, detaching);
    }
  };
}
function create_fragment$C(ctx) {
  let label_1;
  let div0;
  let span;
  let t0;
  let t1;
  let div1;
  let input0;
  let t2;
  let button0;
  let current_block_type_index;
  let if_block0;
  let t3;
  let t4;
  let dialog;
  let div4;
  let div2;
  let form;
  let button1;
  let icon;
  let t5;
  let input1;
  let t6;
  let div3;
  let current_block_type_index_1;
  let if_block2;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_3$9, create_else_block_1$4];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*selected*/
      ctx2[4] !== void 0 && /*selected*/
      ctx2[4].iconUrl !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block1 = (
    /*selected*/
    ctx[4] !== void 0 && create_if_block_1$g(ctx)
  );
  icon = new Icon({ props: { data: mdiClose } });
  const if_block_creators_1 = [create_if_block$m, create_else_block$e];
  const if_blocks_1 = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*viewType*/
      ctx2[5] === void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index_1 = select_block_type_1(ctx);
  if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
  return {
    c() {
      label_1 = element("label");
      div0 = element("div");
      span = element("span");
      t0 = text(
        /*label*/
        ctx[1]
      );
      t1 = space();
      div1 = element("div");
      input0 = element("input");
      t2 = space();
      button0 = element("button");
      if_block0.c();
      t3 = space();
      if (if_block1)
        if_block1.c();
      t4 = space();
      dialog = element("dialog");
      div4 = element("div");
      div2 = element("div");
      form = element("form");
      button1 = element("button");
      create_component(icon.$$.fragment);
      t5 = space();
      input1 = element("input");
      t6 = space();
      div3 = element("div");
      if_block2.c();
      this.h();
    },
    l(nodes) {
      label_1 = claim_element(nodes, "LABEL", { class: true });
      var label_1_nodes = children(label_1);
      div0 = claim_element(label_1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span = claim_element(div0_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(
        span_nodes,
        /*label*/
        ctx[1]
      );
      span_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t1 = claim_space(label_1_nodes);
      div1 = claim_element(label_1_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      input0 = claim_element(div1_nodes, "INPUT", {
        type: true,
        class: true,
        placeholder: true
      });
      t2 = claim_space(div1_nodes);
      button0 = claim_element(div1_nodes, "BUTTON", { class: true });
      var button0_nodes = children(button0);
      if_block0.l(button0_nodes);
      button0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t3 = claim_space(label_1_nodes);
      if (if_block1)
        if_block1.l(label_1_nodes);
      label_1_nodes.forEach(detach);
      t4 = claim_space(nodes);
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div4 = claim_element(dialog_nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      div2 = claim_element(div4_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      form = claim_element(div2_nodes, "FORM", { method: true });
      var form_nodes = children(form);
      button1 = claim_element(form_nodes, "BUTTON", { class: true });
      var button1_nodes = children(button1);
      claim_component(icon.$$.fragment, button1_nodes);
      button1_nodes.forEach(detach);
      form_nodes.forEach(detach);
      t5 = claim_space(div2_nodes);
      input1 = claim_element(div2_nodes, "INPUT", {
        type: true,
        class: true,
        name: true,
        placeholder: true
      });
      div2_nodes.forEach(detach);
      t6 = claim_space(div4_nodes);
      div3 = claim_element(div4_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      if_block2.l(div3_nodes);
      div3_nodes.forEach(detach);
      div4_nodes.forEach(detach);
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text");
      attr(div0, "class", "label");
      attr(input0, "type", "text");
      attr(input0, "class", "input input-bordered grow join-item");
      attr(
        input0,
        "placeholder",
        /*placeholder*/
        ctx[2]
      );
      attr(button0, "class", "btn btn-outline btn-primary join-item");
      attr(div1, "class", "join flex items-center");
      attr(label_1, "class", "form-control w-full");
      attr(button1, "class", "btn btn-sm btn-circle btn-ghost absolute right-2 top-2");
      attr(form, "method", "dialog");
      attr(input1, "type", "text");
      attr(input1, "class", "input w-full input-primary");
      attr(input1, "name", "search");
      attr(input1, "placeholder", "Search");
      attr(div2, "class", "flex-shrink-0 mb-2");
      attr(div3, "class", "flex-grow overflow-auto");
      attr(div4, "class", "modal-box flex flex-col");
      attr(dialog, "class", "modal");
    },
    m(target, anchor) {
      insert_hydration(target, label_1, anchor);
      append_hydration(label_1, div0);
      append_hydration(div0, span);
      append_hydration(span, t0);
      append_hydration(label_1, t1);
      append_hydration(label_1, div1);
      append_hydration(div1, input0);
      set_input_value(
        input0,
        /*uri*/
        ctx[0]
      );
      append_hydration(div1, t2);
      append_hydration(div1, button0);
      if_blocks[current_block_type_index].m(button0, null);
      append_hydration(label_1, t3);
      if (if_block1)
        if_block1.m(label_1, null);
      insert_hydration(target, t4, anchor);
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div4);
      append_hydration(div4, div2);
      append_hydration(div2, form);
      append_hydration(form, button1);
      mount_component(icon, button1, null);
      append_hydration(div2, t5);
      append_hydration(div2, input1);
      set_input_value(
        input1,
        /*search*/
        ctx[3]
      );
      append_hydration(div4, t6);
      append_hydration(div4, div3);
      if_blocks_1[current_block_type_index_1].m(div3, null);
      ctx[33](dialog);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input0,
            "input",
            /*input0_input_handler*/
            ctx[26]
          ),
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[27]
          ),
          listen(
            input1,
            "input",
            /*input1_input_handler*/
            ctx[28]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty[0] & /*label*/
      2)
        set_data(
          t0,
          /*label*/
          ctx2[1]
        );
      if (!current || dirty[0] & /*placeholder*/
      4) {
        attr(
          input0,
          "placeholder",
          /*placeholder*/
          ctx2[2]
        );
      }
      if (dirty[0] & /*uri*/
      1 && input0.value !== /*uri*/
      ctx2[0]) {
        set_input_value(
          input0,
          /*uri*/
          ctx2[0]
        );
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(button0, null);
      }
      if (
        /*selected*/
        ctx2[4] !== void 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_1$g(ctx2);
          if_block1.c();
          if_block1.m(label_1, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (dirty[0] & /*search*/
      8 && input1.value !== /*search*/
      ctx2[3]) {
        set_input_value(
          input1,
          /*search*/
          ctx2[3]
        );
      }
      let previous_block_index_1 = current_block_type_index_1;
      current_block_type_index_1 = select_block_type_1(ctx2);
      if (current_block_type_index_1 === previous_block_index_1) {
        if_blocks_1[current_block_type_index_1].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
          if_blocks_1[previous_block_index_1] = null;
        });
        check_outros();
        if_block2 = if_blocks_1[current_block_type_index_1];
        if (!if_block2) {
          if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx2);
          if_block2.c();
        } else {
          if_block2.p(ctx2, dirty);
        }
        transition_in(if_block2, 1);
        if_block2.m(div3, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(icon.$$.fragment, local);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(icon.$$.fragment, local);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label_1);
        detach(t4);
        detach(dialog);
      }
      if_blocks[current_block_type_index].d();
      if (if_block1)
        if_block1.d();
      destroy_component(icon);
      if_blocks_1[current_block_type_index_1].d();
      ctx[33](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function getItems(_type, _items) {
  return _items.filter((i2) => i2.type === _type);
}
function instance$C($$self, $$props, $$invalidate) {
  let items;
  let $devices;
  let $variables;
  let $zones;
  let $homey;
  component_subscribe($$self, devices, ($$value) => $$invalidate(23, $devices = $$value));
  component_subscribe($$self, variables, ($$value) => $$invalidate(24, $variables = $$value));
  component_subscribe($$self, zones, ($$value) => $$invalidate(25, $zones = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(9, $homey = $$value));
  let { uri } = $$props;
  let { label = "Item" } = $$props;
  let { placeholder = "" } = $$props;
  let { zoneFilter = (z2) => false } = $$props;
  let { variableFilter: variableFilter2 = (v) => false } = $$props;
  let { deviceFilter = (d3) => false } = $$props;
  let { capabilityFilter: capabilityFilter2 = (c2) => false } = $$props;
  const dispatch = createEventDispatcher();
  const types = ["zone", "variable", "device", "capability"];
  const labels = ["Zones", "Variables", "Devices", "Capabilities"];
  let modal;
  let allZones = [];
  let allVariables = [];
  let allDevices = [];
  let allCapabilities = [];
  let filtered = [];
  let search = "";
  let selected;
  let viewType;
  let viewItems;
  function select(_uri) {
    if (_uri === void 0) {
      $$invalidate(4, selected = void 0);
      return;
    }
    if (selected !== void 0 && selected.uri === _uri) {
      return;
    }
    $$invalidate(4, selected = items.find((i2) => i2.uri === _uri));
  }
  function filter(_search, _items) {
    const normalized = _search.toLowerCase();
    if (_search.length >= 1) {
      $$invalidate(7, filtered = items.filter((item) => item.search.includes(normalized)));
    } else {
      $$invalidate(7, filtered = items);
    }
    view(viewType);
  }
  function view(_type, _items) {
    if (_type === void 0) {
      $$invalidate(8, viewItems = void 0);
      return;
    }
    $$invalidate(8, viewItems = filtered.filter((i2) => i2.type === _type));
  }
  function onItem(item) {
    $$invalidate(0, uri = item.uri);
    modal.close();
    dispatch("uri", uri);
  }
  function onView(mode) {
    $$invalidate(5, viewType = mode);
  }
  function onSelected(item) {
    dispatch("item", item);
  }
  function input0_input_handler() {
    uri = this.value;
    $$invalidate(0, uri);
  }
  const click_handler = () => modal.showModal();
  function input1_input_handler() {
    search = this.value;
    $$invalidate(3, search);
  }
  const item_handler = (e2) => onItem(e2.detail);
  const view_handler = (type, e2) => onView(type);
  const click_handler_1 = (e2) => $$invalidate(5, viewType = void 0);
  const click_handler_22 = (item) => onItem(item);
  function dialog_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(6, modal);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("uri" in $$props2)
      $$invalidate(0, uri = $$props2.uri);
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
    if ("placeholder" in $$props2)
      $$invalidate(2, placeholder = $$props2.placeholder);
    if ("zoneFilter" in $$props2)
      $$invalidate(14, zoneFilter = $$props2.zoneFilter);
    if ("variableFilter" in $$props2)
      $$invalidate(15, variableFilter2 = $$props2.variableFilter);
    if ("deviceFilter" in $$props2)
      $$invalidate(16, deviceFilter = $$props2.deviceFilter);
    if ("capabilityFilter" in $$props2)
      $$invalidate(17, capabilityFilter2 = $$props2.capabilityFilter);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*$zones, zoneFilter*/
    33570816) {
      $$invalidate(18, allZones = Object.values($zones ?? {}).filter((zone) => zoneFilter(zone)).map((zone) => ({
        zone,
        uri: zone.uri,
        title: zone.name,
        iconId: "file-tree",
        search: zone.name.toLocaleLowerCase(),
        type: "zone"
      })).sort((a3, b2) => {
        if (a3.title === b2.title)
          return 0;
        if (a3.title < b2.title)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty[0] & /*$variables, variableFilter*/
    16809984) {
      $$invalidate(19, allVariables = Object.values($variables ?? {}).filter((variable) => variableFilter2(variable)).map((variable) => ({
        variable,
        uri: variable.uri,
        title: variable.name,
        subtitle: variable.type,
        subtitleAlt: variable.value,
        iconId: "variable",
        search: variable.name.toLowerCase(),
        type: "variable"
      })).sort((a3, b2) => {
        if (a3.title === b2.title)
          return 0;
        if (a3.title < b2.title)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty[0] & /*$devices, deviceFilter*/
    8454144) {
      $$invalidate(20, allDevices = Object.values($devices ?? {}).filter((device) => deviceFilter(device)).map((device) => {
        var _a2;
        return {
          device,
          uri: device.uri,
          title: device.name,
          iconUrl: (_a2 = device.iconObj) == null ? void 0 : _a2.url,
          iconId: "meter-electric",
          search: device.name.toLowerCase(),
          type: "device"
        };
      }).sort((a3, b2) => {
        if (a3.title === b2.title)
          return 0;
        if (a3.title < b2.title)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty[0] & /*$devices, capabilityFilter*/
    8519680) {
      $$invalidate(21, allCapabilities = Object.values($devices ?? {}).flatMap((device) => Object.values(device.capabilitiesObj ?? {}).filter((capability) => capabilityFilter2 ? capabilityFilter2(device, capability) : false).map((capability) => {
        var _a2;
        return {
          device,
          capability,
          uri: device.uri + ":" + capability.id,
          title: capability.title,
          subtitle: device.name,
          subtitleAlt: (capability.value ?? "") + " " + (capability.units ?? ""),
          iconUrl: (_a2 = capability.iconObj) == null ? void 0 : _a2.url,
          iconId: "tune",
          search: (device.name + " " + capability.title).toLowerCase(),
          type: "capability"
        };
      })).sort((a3, b2) => {
        if (a3.title === b2.title)
          return 0;
        if (a3.title < b2.title)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty[0] & /*allZones, allVariables, allDevices, allCapabilities*/
    3932160) {
      $$invalidate(22, items = [...allZones, ...allVariables, ...allDevices, ...allCapabilities]);
    }
    if ($$self.$$.dirty[0] & /*uri*/
    1) {
      select(uri);
    }
    if ($$self.$$.dirty[0] & /*search, items*/
    4194312) {
      filter(search);
    }
    if ($$self.$$.dirty[0] & /*viewType, items*/
    4194336) {
      view(viewType);
    }
    if ($$self.$$.dirty[0] & /*selected*/
    16) {
      onSelected(selected);
    }
  };
  return [
    uri,
    label,
    placeholder,
    search,
    selected,
    viewType,
    modal,
    filtered,
    viewItems,
    $homey,
    types,
    labels,
    onItem,
    onView,
    zoneFilter,
    variableFilter2,
    deviceFilter,
    capabilityFilter2,
    allZones,
    allVariables,
    allDevices,
    allCapabilities,
    items,
    $devices,
    $variables,
    $zones,
    input0_input_handler,
    click_handler,
    input1_input_handler,
    item_handler,
    view_handler,
    click_handler_1,
    click_handler_22,
    dialog_binding
  ];
}
class EntityPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$C,
      create_fragment$C,
      safe_not_equal,
      {
        uri: 0,
        label: 1,
        placeholder: 2,
        zoneFilter: 14,
        variableFilter: 15,
        deviceFilter: 16,
        capabilityFilter: 17
      },
      null,
      [-1, -1]
    );
  }
}
function create_fragment$B(ctx) {
  var _a2;
  let entitypicker;
  let updating_uri;
  let t0;
  let textpicker;
  let updating_value;
  let t1;
  let iconpicker;
  let updating_iconId;
  let current;
  function entitypicker_uri_binding(value) {
    ctx[5](value);
  }
  let entitypicker_props = {
    variableFilter: variableFilter$2,
    capabilityFilter: capabilityFilter$2,
    label: "Item"
  };
  if (
    /*uri*/
    ctx[0] !== void 0
  ) {
    entitypicker_props.uri = /*uri*/
    ctx[0];
  }
  entitypicker = new EntityPicker({ props: entitypicker_props });
  binding_callbacks.push(() => bind(entitypicker, "uri", entitypicker_uri_binding));
  entitypicker.$on(
    "item",
    /*item_handler*/
    ctx[6]
  );
  function textpicker_value_binding(value) {
    ctx[7](value);
  }
  let textpicker_props = {
    placeholder: (
      /*item*/
      ((_a2 = ctx[3]) == null ? void 0 : _a2.title) ?? "Label"
    ),
    label: "Label"
  };
  if (
    /*label*/
    ctx[1] !== void 0
  ) {
    textpicker_props.value = /*label*/
    ctx[1];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  function iconpicker_iconId_binding(value) {
    ctx[8](value);
  }
  let iconpicker_props = {};
  if (
    /*iconId*/
    ctx[2] !== void 0
  ) {
    iconpicker_props.iconId = /*iconId*/
    ctx[2];
  }
  iconpicker = new IconPicker({ props: iconpicker_props });
  binding_callbacks.push(() => bind(iconpicker, "iconId", iconpicker_iconId_binding));
  return {
    c() {
      create_component(entitypicker.$$.fragment);
      t0 = space();
      create_component(textpicker.$$.fragment);
      t1 = space();
      create_component(iconpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(entitypicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(textpicker.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(iconpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(entitypicker, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(textpicker, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(iconpicker, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      var _a3;
      const entitypicker_changes = {};
      if (!updating_uri && dirty & /*uri*/
      1) {
        updating_uri = true;
        entitypicker_changes.uri = /*uri*/
        ctx2[0];
        add_flush_callback(() => updating_uri = false);
      }
      entitypicker.$set(entitypicker_changes);
      const textpicker_changes = {};
      if (dirty & /*item*/
      8)
        textpicker_changes.placeholder = /*item*/
        ((_a3 = ctx2[3]) == null ? void 0 : _a3.title) ?? "Label";
      if (!updating_value && dirty & /*label*/
      2) {
        updating_value = true;
        textpicker_changes.value = /*label*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
      const iconpicker_changes = {};
      if (!updating_iconId && dirty & /*iconId*/
      4) {
        updating_iconId = true;
        iconpicker_changes.iconId = /*iconId*/
        ctx2[2];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker.$set(iconpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(entitypicker.$$.fragment, local);
      transition_in(textpicker.$$.fragment, local);
      transition_in(iconpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(entitypicker.$$.fragment, local);
      transition_out(textpicker.$$.fragment, local);
      transition_out(iconpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(entitypicker, detaching);
      destroy_component(textpicker, detaching);
      destroy_component(iconpicker, detaching);
    }
  };
}
function variableFilter$2(variable) {
  return true;
}
function capabilityFilter$2(device, capability) {
  return capability.getable === true;
}
function instance$B($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let uri;
  let label;
  let iconId;
  let item;
  function onSettings(s3) {
    $$invalidate(0, uri = s3 == null ? void 0 : s3.uri);
    $$invalidate(1, label = s3 == null ? void 0 : s3.label);
    $$invalidate(2, iconId = s3 == null ? void 0 : s3.iconId);
  }
  function onChange(_uri, _label, _iconId) {
    if (_uri !== settings.uri || _label !== settings.label || _iconId !== settings.iconId) {
      $$invalidate(4, settings = {
        ...settings,
        uri: _uri,
        label: _label === "" ? void 0 : _label,
        iconId: _iconId
      });
      dispatch("settings", settings);
    }
  }
  function entitypicker_uri_binding(value) {
    uri = value;
    $$invalidate(0, uri);
  }
  const item_handler = (e2) => $$invalidate(3, item = e2.detail);
  function textpicker_value_binding(value) {
    label = value;
    $$invalidate(1, label);
  }
  function iconpicker_iconId_binding(value) {
    iconId = value;
    $$invalidate(2, iconId);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(4, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    16) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*uri, label, iconId*/
    7) {
      onChange(uri, label, iconId);
    }
  };
  return [
    uri,
    label,
    iconId,
    item,
    settings,
    entitypicker_uri_binding,
    item_handler,
    textpicker_value_binding,
    iconpicker_iconId_binding
  ];
}
class SensorEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$B, create_fragment$B, safe_not_equal, { settings: 4 });
  }
}
class VariableWrapper {
  constructor(_variable, _manager) {
    __publicField(this, "variable");
    __publicField(this, "manager");
    __publicField(this, "callback");
    __publicField(this, "value");
    __publicField(this, "lastChanged");
    this.variable = _variable;
    this.manager = _manager;
    this.value = this.variable.value;
    this.lastChanged = null;
    this.variable.on("update", () => this.updateValue());
  }
  destroy() {
    this.variable.off("update", () => this.updateValue());
  }
  async setValue(_value) {
    await this.manager.updateVariable({
      id: this.variable.id,
      variable: { value: _value }
    });
  }
  onValue(callback2) {
    this.callback = callback2;
  }
  updateValue() {
    this.value = this.variable.value;
    this.lastChanged = /* @__PURE__ */ new Date();
    if (this.callback !== void 0) {
      this.callback(this.value);
    }
  }
}
class CapabilityWrapper {
  constructor(_device, capabilityId) {
    __publicField(this, "capability");
    __publicField(this, "callback");
    __publicField(this, "value");
    __publicField(this, "lastChanged");
    this.capability = _device.makeCapabilityInstance(capabilityId, (_value) => this.updateValue(_value));
    this.value = this.capability.value;
    this.lastChanged = this.capability.lastChanged;
  }
  destroy() {
    this.capability.destroy();
  }
  async setValue(_value) {
    await this.capability.device.setCapabilityValue({
      capabilityId: this.capability.id,
      deviceId: this.capability.device.id,
      value: _value
    });
  }
  onValue(callback2) {
    this.callback = callback2;
  }
  updateValue(_value) {
    this.value = _value;
    this.lastChanged = this.capability.lastChanged;
    if (this.callback !== void 0) {
      this.callback(this.value);
    }
  }
}
function create_if_block_2$a(ctx) {
  let await_block_anchor;
  let promise;
  let info2 = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$1,
    then: create_then_block$1,
    catch: create_catch_block$1,
    value: 21
  };
  handle_promise(promise = /*$baseUrl*/
  ctx[8], info2);
  return {
    c() {
      await_block_anchor = empty();
      info2.block.c();
    },
    l(nodes) {
      await_block_anchor = empty();
      info2.block.l(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, await_block_anchor, anchor);
      info2.block.m(target, info2.anchor = anchor);
      info2.mount = () => await_block_anchor.parentNode;
      info2.anchor = await_block_anchor;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info2.ctx = ctx;
      if (dirty & /*$baseUrl*/
      256 && promise !== (promise = /*$baseUrl*/
      ctx[8]) && handle_promise(promise, info2))
        ;
      else {
        update_await_block_branch(info2, ctx, dirty);
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info2.block.d(detaching);
      info2.token = null;
      info2 = null;
    }
  };
}
function create_if_block_1$f(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId ?? /*iconId*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings, iconId*/
      5)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId ?? /*iconId*/
          ctx2[2]
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_catch_block$1(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block$1(ctx) {
  let img;
  let img_src_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
      this.h();
    },
    h() {
      attr(img, "class", "w-8 h-8 m-1 dark:invert");
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[21] + /*iconUrl*/
      ctx[3]))
        attr(img, "src", img_src_value);
      attr(
        img,
        "alt",
        /*iconUrl*/
        ctx[3]
      );
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$baseUrl, iconUrl*/
      264 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[21] + /*iconUrl*/
      ctx2[3])) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*iconUrl*/
      8) {
        attr(
          img,
          "alt",
          /*iconUrl*/
          ctx2[3]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block$1(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_else_block$d(ctx) {
  let span;
  let t0_value = (
    /*value*/
    (ctx[5] ?? "...") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*unit*/
    (ctx[6] ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      32 && t0_value !== (t0_value = /*value*/
      (ctx2[5] ?? "...") + ""))
        set_data(t0, t0_value);
      if (dirty & /*unit*/
      64 && t2_value !== (t2_value = /*unit*/
      (ctx2[6] ?? "") + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block$l(ctx) {
  let span;
  let t_value = (
    /*value*/
    ctx[5] ? "Yes" : "No"
  );
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      32 && t_value !== (t_value = /*value*/
      ctx2[5] ? "Yes" : "No"))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$A(ctx) {
  let div;
  let span0;
  let current_block_type_index;
  let if_block0;
  let t0;
  let span1;
  let t1_value = (
    /*settings*/
    (ctx[0].label ?? /*label*/
    ctx[4] ?? /*uri*/
    ctx[1] ?? "Not configured") + ""
  );
  let t1;
  let t2;
  let span2;
  let current;
  const if_block_creators = [create_if_block_1$f, create_if_block_2$a];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].iconId !== void 0 || /*iconId*/
      ctx2[2] !== void 0
    )
      return 0;
    if (
      /*iconUrl*/
      ctx2[3] !== void 0
    )
      return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  function select_block_type_1(ctx2, dirty) {
    if (
      /*type*/
      ctx2[7] === "boolean"
    )
      return create_if_block$l;
    return create_else_block$d;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block1 = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      span0 = element("span");
      if (if_block0)
        if_block0.c();
      t0 = space();
      span1 = element("span");
      t1 = text(t1_value);
      t2 = space();
      span2 = element("span");
      if_block1.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      span0 = claim_element(div_nodes, "SPAN", {});
      var span0_nodes = children(span0);
      if (if_block0)
        if_block0.l(span0_nodes);
      span0_nodes.forEach(detach);
      t0 = claim_space(div_nodes);
      span1 = claim_element(div_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      t1 = claim_text(span1_nodes, t1_value);
      span1_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      span2 = claim_element(div_nodes, "SPAN", {});
      var span2_nodes = children(span2);
      if_block1.l(span2_nodes);
      span2_nodes.forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span1, "class", "flex-1 overflow-ellipsis");
      attr(div, "class", "flex flex-row items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, span0);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(span0, null);
      }
      append_hydration(div, t0);
      append_hydration(div, span1);
      append_hydration(span1, t1);
      append_hydration(div, t2);
      append_hydration(div, span2);
      if_block1.m(span2, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block0) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block0 = if_blocks[current_block_type_index];
          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block0.c();
          } else {
            if_block0.p(ctx2, dirty);
          }
          transition_in(if_block0, 1);
          if_block0.m(span0, null);
        } else {
          if_block0 = null;
        }
      }
      if ((!current || dirty & /*settings, label, uri*/
      19) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].label ?? /*label*/
      ctx2[4] ?? /*uri*/
      ctx2[1] ?? "Not configured") + ""))
        set_data(t1, t1_value);
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(span2, null);
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      if_block1.d();
    }
  };
}
function instance$A($$self, $$props, $$invalidate) {
  let $devices;
  let $homey;
  let $variables;
  let $baseUrl;
  component_subscribe($$self, devices, ($$value) => $$invalidate(10, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(15, $homey = $$value));
  component_subscribe($$self, variables, ($$value) => $$invalidate(11, $variables = $$value));
  component_subscribe($$self, baseUrl, ($$value) => $$invalidate(8, $baseUrl = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  let uri;
  let iconId;
  let iconUrl;
  let wrapper;
  let wrapperUri;
  let label;
  let value;
  let values;
  let unit;
  let type;
  function onSettings(_settings) {
    if (_settings.uri !== uri) {
      $$invalidate(1, uri = _settings.uri);
    }
  }
  function onUri(_uri, _variables, _devices) {
    if (_uri !== void 0 && _uri !== wrapperUri) {
      const segments = _uri.split(":");
      if (wrapper !== void 0 && wrapper) {
        wrapper.destroy();
        wrapper = void 0;
        wrapperUri = void 0;
      }
      if (segments[1] === "variable") {
        getVariable(segments[2]);
      } else if (segments[1] === "device" && segments.length === 4) {
        getCapability(segments[2], segments[3]);
      }
    }
  }
  function getVariable(variableId, _variables) {
    const variable = $variables[variableId];
    if (variable === void 0)
      return;
    wrapper = new VariableWrapper(variable, $homey.logic);
    wrapperUri = variable.uri;
    $$invalidate(4, label = variable.name);
    $$invalidate(5, value = variable.value);
    values = [];
    $$invalidate(7, type = variable.type);
    $$invalidate(6, unit = void 0);
    $$invalidate(2, iconId = "variable");
    $$invalidate(3, iconUrl = void 0);
    $$invalidate(7, type = variable.type);
    onValue(wrapper.value);
    wrapper.onValue(onValue);
  }
  function getCapability(deviceId, capabilityId, _devices) {
    var _a2, _b2;
    const device = $devices[deviceId];
    if (device === void 0)
      return;
    const capability = device.capabilitiesObj[capabilityId];
    if (capability === void 0)
      return;
    wrapper = new CapabilityWrapper(device, capabilityId);
    wrapperUri = device.uri + ":" + capabilityId;
    $$invalidate(4, label = capability.title);
    $$invalidate(5, value = capability.value);
    $$invalidate(7, type = capability.type);
    $$invalidate(6, unit = capability.units);
    $$invalidate(3, iconUrl = (_a2 = capability.iconObj) == null ? void 0 : _a2.url);
    $$invalidate(2, iconId = void 0);
    if (type === "enum") {
      $$invalidate(5, value = ((_b2 = capability.values.find((v) => v.id === value)) == null ? void 0 : _b2.title) ?? value);
    }
    onValue(wrapper.value);
    wrapper.onValue(onValue);
  }
  function onValue(_value) {
    var _a2;
    if (type !== "enum") {
      $$invalidate(5, value = _value);
    } else {
      $$invalidate(5, value = ((_a2 = values.find((v) => v.id === value)) == null ? void 0 : _a2.title) ?? _value);
    }
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(9, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*uri, $variables, $devices*/
    3074) {
      onUri(uri);
    }
  };
  return [
    settings,
    uri,
    iconId,
    iconUrl,
    label,
    value,
    unit,
    type,
    $baseUrl,
    context,
    $devices,
    $variables
  ];
}
class SensorWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$A, create_fragment$A, safe_not_equal, { settings: 0, context: 9 });
  }
}
function create$3() {
  return {
    id: v4(),
    type: "sensor",
    version: 1
  };
}
function migrate$3(settings) {
  while (settings.version !== 1) {
    settings = migrateOnce$3(settings);
  }
  return settings;
}
function migrateOnce$3(settings) {
  switch (settings.version) {
    case 1:
      return settings;
  }
}
const info$8 = {
  type: "sensor",
  label: "Sensor",
  icon: mdiEye,
  category: "component",
  widget: SensorWidget,
  editor: SensorEditor,
  scopes: [
    { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] }
  ],
  create: create$3,
  migration: migrate$3
};
function create_fragment$z(ctx) {
  let label_1;
  let div;
  let span;
  let t0;
  let t1;
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      label_1 = element("label");
      div = element("div");
      span = element("span");
      t0 = text(
        /*label*/
        ctx[1]
      );
      t1 = space();
      input = element("input");
      this.h();
    },
    l(nodes) {
      label_1 = claim_element(nodes, "LABEL", { class: true });
      var label_1_nodes = children(label_1);
      div = claim_element(label_1_nodes, "DIV", { class: true });
      var div_nodes = children(div);
      span = claim_element(div_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(
        span_nodes,
        /*label*/
        ctx[1]
      );
      span_nodes.forEach(detach);
      div_nodes.forEach(detach);
      t1 = claim_space(label_1_nodes);
      input = claim_element(label_1_nodes, "INPUT", { type: true, class: true });
      label_1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "label-text");
      attr(div, "class", "label");
      attr(input, "type", "checkbox");
      attr(input, "class", "toggle");
      attr(label_1, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label_1, anchor);
      append_hydration(label_1, div);
      append_hydration(div, span);
      append_hydration(span, t0);
      append_hydration(label_1, t1);
      append_hydration(label_1, input);
      input.checked = /*checked*/
      ctx[0];
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*input_change_handler*/
          ctx[2]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*label*/
      2)
        set_data(
          t0,
          /*label*/
          ctx2[1]
        );
      if (dirty & /*checked*/
      1) {
        input.checked = /*checked*/
        ctx2[0];
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label_1);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$z($$self, $$props, $$invalidate) {
  let { label } = $$props;
  let { checked } = $$props;
  function input_change_handler() {
    checked = this.checked;
    $$invalidate(0, checked);
  }
  $$self.$$set = ($$props2) => {
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
    if ("checked" in $$props2)
      $$invalidate(0, checked = $$props2.checked);
  };
  return [checked, label, input_change_handler];
}
class BooleanPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$z, create_fragment$z, safe_not_equal, { label: 1, checked: 0 });
  }
}
function create_fragment$y(ctx) {
  var _a2, _b2, _c, _d, _e, _f, _g, _h, _i;
  let entitypicker;
  let updating_uri;
  let t0;
  let textpicker0;
  let updating_value;
  let t1;
  let label0;
  let div0;
  let textContent = `<span class="label-text">Label position</span>`;
  let t3;
  let select0;
  let option0;
  let textContent_1 = "left";
  let option1;
  let textContent_2 = "right";
  let option2;
  let textContent_3 = "top";
  let option3;
  let textContent_4 = "bottom";
  let option4;
  let textContent_5 = "hidden";
  let t9;
  let label1;
  let div1;
  let textContent_6 = `<span class="label-text">Label size</span>`;
  let t11;
  let select1;
  let option5;
  let textContent_7 = "x-small";
  let option6;
  let textContent_8 = "small";
  let option7;
  let t14;
  let option8;
  let textContent_9 = "large";
  let option9;
  let textContent_10 = "x-large";
  let option10;
  let textContent_11 = "2xl";
  let option11;
  let textContent_12 = "3xl";
  let option12;
  let textContent_13 = "4xl";
  let option13;
  let textContent_14 = "5xl";
  let option14;
  let textContent_15 = "6xl";
  let option15;
  let textContent_16 = "7xl";
  let option16;
  let textContent_17 = "8xl";
  let option17;
  let textContent_18 = "9xl";
  let t25;
  let label2;
  let div2;
  let textContent_19 = `<span class="label-text">Value position</span>`;
  let t27;
  let select2;
  let option18;
  let textContent_20 = "left";
  let option19;
  let textContent_21 = "right";
  let option20;
  let textContent_22 = "top";
  let option21;
  let textContent_23 = "bottom";
  let option22;
  let textContent_24 = "hidden";
  let t33;
  let label3;
  let div3;
  let textContent_25 = `<span class="label-text">Value size</span>`;
  let t35;
  let select3;
  let option23;
  let textContent_26 = "x-small";
  let option24;
  let textContent_27 = "small";
  let option25;
  let t38;
  let option26;
  let textContent_28 = "large";
  let option27;
  let textContent_29 = "x-large";
  let option28;
  let textContent_30 = "2xl";
  let option29;
  let textContent_31 = "3xl";
  let option30;
  let textContent_32 = "4xl";
  let option31;
  let textContent_33 = "5xl";
  let option32;
  let textContent_34 = "6xl";
  let option33;
  let textContent_35 = "7xl";
  let option34;
  let textContent_36 = "8xl";
  let option35;
  let textContent_37 = "9xl";
  let t49;
  let numberpicker0;
  let updating_value_1;
  let t50;
  let numberpicker1;
  let updating_value_2;
  let t51;
  let numberpicker2;
  let updating_value_3;
  let t52;
  let numberpicker3;
  let updating_value_4;
  let t53;
  let textpicker1;
  let updating_value_5;
  let t54;
  let booleanpicker;
  let updating_checked;
  let current;
  let mounted;
  let dispose;
  function entitypicker_uri_binding(value) {
    ctx[14](value);
  }
  let entitypicker_props = {
    variableFilter: variableFilter$1,
    capabilityFilter: capabilityFilter$1,
    label: "Item"
  };
  if (
    /*uri*/
    ctx[0] !== void 0
  ) {
    entitypicker_props.uri = /*uri*/
    ctx[0];
  }
  entitypicker = new EntityPicker({ props: entitypicker_props });
  binding_callbacks.push(() => bind(entitypicker, "uri", entitypicker_uri_binding));
  entitypicker.$on(
    "item",
    /*item_handler*/
    ctx[15]
  );
  function textpicker0_value_binding(value) {
    ctx[16](value);
  }
  let textpicker0_props = {
    placeholder: (
      /*item*/
      ((_a2 = ctx[12]) == null ? void 0 : _a2.title) ?? "Label"
    ),
    label: "Label"
  };
  if (
    /*label*/
    ctx[1] !== void 0
  ) {
    textpicker0_props.value = /*label*/
    ctx[1];
  }
  textpicker0 = new TextPicker({ props: textpicker0_props });
  binding_callbacks.push(() => bind(textpicker0, "value", textpicker0_value_binding));
  function numberpicker0_value_binding(value) {
    ctx[21](value);
  }
  let numberpicker0_props = {
    placeholder: (
      /*item*/
      ((_c = (_b2 = ctx[12]) == null ? void 0 : _b2.capability) == null ? void 0 : _c.min) ?? "Min"
    ),
    label: "Min"
  };
  if (
    /*min*/
    ctx[2] !== void 0
  ) {
    numberpicker0_props.value = /*min*/
    ctx[2];
  }
  numberpicker0 = new NumberPicker({ props: numberpicker0_props });
  binding_callbacks.push(() => bind(numberpicker0, "value", numberpicker0_value_binding));
  function numberpicker1_value_binding(value) {
    ctx[22](value);
  }
  let numberpicker1_props = {
    placeholder: (
      /*item*/
      ((_e = (_d = ctx[12]) == null ? void 0 : _d.capability) == null ? void 0 : _e.max) ?? "Max"
    ),
    label: "Max"
  };
  if (
    /*max*/
    ctx[3] !== void 0
  ) {
    numberpicker1_props.value = /*max*/
    ctx[3];
  }
  numberpicker1 = new NumberPicker({ props: numberpicker1_props });
  binding_callbacks.push(() => bind(numberpicker1, "value", numberpicker1_value_binding));
  function numberpicker2_value_binding(value) {
    ctx[23](value);
  }
  let numberpicker2_props = {
    placeholder: (
      /*item*/
      ((_g = (_f = ctx[12]) == null ? void 0 : _f.capability) == null ? void 0 : _g.step) ?? "Step"
    ),
    label: "Step"
  };
  if (
    /*step*/
    ctx[4] !== void 0
  ) {
    numberpicker2_props.value = /*step*/
    ctx[4];
  }
  numberpicker2 = new NumberPicker({ props: numberpicker2_props });
  binding_callbacks.push(() => bind(numberpicker2, "value", numberpicker2_value_binding));
  function numberpicker3_value_binding(value) {
    ctx[24](value);
  }
  let numberpicker3_props = {
    placeholder: (
      /*item*/
      ((_i = (_h = ctx[12]) == null ? void 0 : _h.capability) == null ? void 0 : _i.decimals) ?? "Decimals"
    ),
    label: "Decimals"
  };
  if (
    /*decimals*/
    ctx[5] !== void 0
  ) {
    numberpicker3_props.value = /*decimals*/
    ctx[5];
  }
  numberpicker3 = new NumberPicker({ props: numberpicker3_props });
  binding_callbacks.push(() => bind(numberpicker3, "value", numberpicker3_value_binding));
  function textpicker1_value_binding(value) {
    ctx[25](value);
  }
  let textpicker1_props = { placeholder: "Unit", label: "Unit" };
  if (
    /*unit*/
    ctx[6] !== void 0
  ) {
    textpicker1_props.value = /*unit*/
    ctx[6];
  }
  textpicker1 = new TextPicker({ props: textpicker1_props });
  binding_callbacks.push(() => bind(textpicker1, "value", textpicker1_value_binding));
  function booleanpicker_checked_binding(value) {
    ctx[26](value);
  }
  let booleanpicker_props = { label: "Hide min/max" };
  if (
    /*hideMinMax*/
    ctx[11] !== void 0
  ) {
    booleanpicker_props.checked = /*hideMinMax*/
    ctx[11];
  }
  booleanpicker = new BooleanPicker({ props: booleanpicker_props });
  binding_callbacks.push(() => bind(booleanpicker, "checked", booleanpicker_checked_binding));
  return {
    c() {
      create_component(entitypicker.$$.fragment);
      t0 = space();
      create_component(textpicker0.$$.fragment);
      t1 = space();
      label0 = element("label");
      div0 = element("div");
      div0.innerHTML = textContent;
      t3 = space();
      select0 = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      t9 = space();
      label1 = element("label");
      div1 = element("div");
      div1.innerHTML = textContent_6;
      t11 = space();
      select1 = element("select");
      option5 = element("option");
      option5.textContent = textContent_7;
      option6 = element("option");
      option6.textContent = textContent_8;
      option7 = element("option");
      t14 = text("normal");
      option8 = element("option");
      option8.textContent = textContent_9;
      option9 = element("option");
      option9.textContent = textContent_10;
      option10 = element("option");
      option10.textContent = textContent_11;
      option11 = element("option");
      option11.textContent = textContent_12;
      option12 = element("option");
      option12.textContent = textContent_13;
      option13 = element("option");
      option13.textContent = textContent_14;
      option14 = element("option");
      option14.textContent = textContent_15;
      option15 = element("option");
      option15.textContent = textContent_16;
      option16 = element("option");
      option16.textContent = textContent_17;
      option17 = element("option");
      option17.textContent = textContent_18;
      t25 = space();
      label2 = element("label");
      div2 = element("div");
      div2.innerHTML = textContent_19;
      t27 = space();
      select2 = element("select");
      option18 = element("option");
      option18.textContent = textContent_20;
      option19 = element("option");
      option19.textContent = textContent_21;
      option20 = element("option");
      option20.textContent = textContent_22;
      option21 = element("option");
      option21.textContent = textContent_23;
      option22 = element("option");
      option22.textContent = textContent_24;
      t33 = space();
      label3 = element("label");
      div3 = element("div");
      div3.innerHTML = textContent_25;
      t35 = space();
      select3 = element("select");
      option23 = element("option");
      option23.textContent = textContent_26;
      option24 = element("option");
      option24.textContent = textContent_27;
      option25 = element("option");
      t38 = text("normal");
      option26 = element("option");
      option26.textContent = textContent_28;
      option27 = element("option");
      option27.textContent = textContent_29;
      option28 = element("option");
      option28.textContent = textContent_30;
      option29 = element("option");
      option29.textContent = textContent_31;
      option30 = element("option");
      option30.textContent = textContent_32;
      option31 = element("option");
      option31.textContent = textContent_33;
      option32 = element("option");
      option32.textContent = textContent_34;
      option33 = element("option");
      option33.textContent = textContent_35;
      option34 = element("option");
      option34.textContent = textContent_36;
      option35 = element("option");
      option35.textContent = textContent_37;
      t49 = space();
      create_component(numberpicker0.$$.fragment);
      t50 = space();
      create_component(numberpicker1.$$.fragment);
      t51 = space();
      create_component(numberpicker2.$$.fragment);
      t52 = space();
      create_component(numberpicker3.$$.fragment);
      t53 = space();
      create_component(textpicker1.$$.fragment);
      t54 = space();
      create_component(booleanpicker.$$.fragment);
      this.h();
    },
    l(nodes) {
      claim_component(entitypicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(textpicker0.$$.fragment, nodes);
      t1 = claim_space(nodes);
      label0 = claim_element(nodes, "LABEL", { class: true });
      var label0_nodes = children(label0);
      div0 = claim_element(label0_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div0) !== "svelte-pozl5u")
        div0.innerHTML = textContent;
      t3 = claim_space(label0_nodes);
      select0 = claim_element(label0_nodes, "SELECT", { class: true });
      var select0_nodes = children(select0);
      option0 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-dm3ioe")
        option0.textContent = textContent_1;
      option1 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-gdc71y")
        option1.textContent = textContent_2;
      option2 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-1urtez0")
        option2.textContent = textContent_3;
      option3 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-11kbr9q")
        option3.textContent = textContent_4;
      option4 = claim_element(select0_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-zxb8jy")
        option4.textContent = textContent_5;
      select0_nodes.forEach(detach);
      label0_nodes.forEach(detach);
      t9 = claim_space(nodes);
      label1 = claim_element(nodes, "LABEL", { class: true });
      var label1_nodes = children(label1);
      div1 = claim_element(label1_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div1) !== "svelte-tjmuoc")
        div1.innerHTML = textContent_6;
      t11 = claim_space(label1_nodes);
      select1 = claim_element(label1_nodes, "SELECT", { class: true });
      var select1_nodes = children(select1);
      option5 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-15j9h0j")
        option5.textContent = textContent_7;
      option6 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-b7szop")
        option6.textContent = textContent_8;
      option7 = claim_element(select1_nodes, "OPTION", {});
      var option7_nodes = children(option7);
      t14 = claim_text(option7_nodes, "normal");
      option7_nodes.forEach(detach);
      option8 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option8) !== "svelte-hn38xg")
        option8.textContent = textContent_9;
      option9 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option9) !== "svelte-e60rgy")
        option9.textContent = textContent_10;
      option10 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option10) !== "svelte-ma3yqa")
        option10.textContent = textContent_11;
      option11 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option11) !== "svelte-1h4y654")
        option11.textContent = textContent_12;
      option12 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option12) !== "svelte-2bkzpu")
        option12.textContent = textContent_13;
      option13 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option13) !== "svelte-ploxyc")
        option13.textContent = textContent_14;
      option14 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option14) !== "svelte-jkrocy")
        option14.textContent = textContent_15;
      option15 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option15) !== "svelte-sd5f60")
        option15.textContent = textContent_16;
      option16 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option16) !== "svelte-1vm3p76")
        option16.textContent = textContent_17;
      option17 = claim_element(select1_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option17) !== "svelte-1it0m9o")
        option17.textContent = textContent_18;
      select1_nodes.forEach(detach);
      label1_nodes.forEach(detach);
      t25 = claim_space(nodes);
      label2 = claim_element(nodes, "LABEL", { class: true });
      var label2_nodes = children(label2);
      div2 = claim_element(label2_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div2) !== "svelte-ch5eq1")
        div2.innerHTML = textContent_19;
      t27 = claim_space(label2_nodes);
      select2 = claim_element(label2_nodes, "SELECT", { class: true });
      var select2_nodes = children(select2);
      option18 = claim_element(select2_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option18) !== "svelte-dm3ioe")
        option18.textContent = textContent_20;
      option19 = claim_element(select2_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option19) !== "svelte-gdc71y")
        option19.textContent = textContent_21;
      option20 = claim_element(select2_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option20) !== "svelte-1urtez0")
        option20.textContent = textContent_22;
      option21 = claim_element(select2_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option21) !== "svelte-11kbr9q")
        option21.textContent = textContent_23;
      option22 = claim_element(select2_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option22) !== "svelte-zxb8jy")
        option22.textContent = textContent_24;
      select2_nodes.forEach(detach);
      label2_nodes.forEach(detach);
      t33 = claim_space(nodes);
      label3 = claim_element(nodes, "LABEL", { class: true });
      var label3_nodes = children(label3);
      div3 = claim_element(label3_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div3) !== "svelte-y18war")
        div3.innerHTML = textContent_25;
      t35 = claim_space(label3_nodes);
      select3 = claim_element(label3_nodes, "SELECT", { class: true });
      var select3_nodes = children(select3);
      option23 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option23) !== "svelte-15j9h0j")
        option23.textContent = textContent_26;
      option24 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option24) !== "svelte-b7szop")
        option24.textContent = textContent_27;
      option25 = claim_element(select3_nodes, "OPTION", {});
      var option25_nodes = children(option25);
      t38 = claim_text(option25_nodes, "normal");
      option25_nodes.forEach(detach);
      option26 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option26) !== "svelte-hn38xg")
        option26.textContent = textContent_28;
      option27 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option27) !== "svelte-e60rgy")
        option27.textContent = textContent_29;
      option28 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option28) !== "svelte-ma3yqa")
        option28.textContent = textContent_30;
      option29 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option29) !== "svelte-1h4y654")
        option29.textContent = textContent_31;
      option30 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option30) !== "svelte-2bkzpu")
        option30.textContent = textContent_32;
      option31 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option31) !== "svelte-ploxyc")
        option31.textContent = textContent_33;
      option32 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option32) !== "svelte-jkrocy")
        option32.textContent = textContent_34;
      option33 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option33) !== "svelte-sd5f60")
        option33.textContent = textContent_35;
      option34 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option34) !== "svelte-1vm3p76")
        option34.textContent = textContent_36;
      option35 = claim_element(select3_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option35) !== "svelte-1it0m9o")
        option35.textContent = textContent_37;
      select3_nodes.forEach(detach);
      label3_nodes.forEach(detach);
      t49 = claim_space(nodes);
      claim_component(numberpicker0.$$.fragment, nodes);
      t50 = claim_space(nodes);
      claim_component(numberpicker1.$$.fragment, nodes);
      t51 = claim_space(nodes);
      claim_component(numberpicker2.$$.fragment, nodes);
      t52 = claim_space(nodes);
      claim_component(numberpicker3.$$.fragment, nodes);
      t53 = claim_space(nodes);
      claim_component(textpicker1.$$.fragment, nodes);
      t54 = claim_space(nodes);
      claim_component(booleanpicker.$$.fragment, nodes);
      this.h();
    },
    h() {
      attr(div0, "class", "label");
      option0.__value = "left";
      set_input_value(option0, option0.__value);
      option1.__value = "right";
      set_input_value(option1, option1.__value);
      option2.__value = "top";
      set_input_value(option2, option2.__value);
      option3.__value = "bottom";
      set_input_value(option3, option3.__value);
      option4.__value = "hidden";
      set_input_value(option4, option4.__value);
      attr(select0, "class", "select");
      if (
        /*labelPosition*/
        ctx[7] === void 0
      )
        add_render_callback(() => (
          /*select0_change_handler*/
          ctx[17].call(select0)
        ));
      attr(label0, "class", "form-control w-full");
      attr(div1, "class", "label");
      option5.__value = "text-xs";
      set_input_value(option5, option5.__value);
      option6.__value = "text-sm";
      set_input_value(option6, option6.__value);
      option7.__value = void 0;
      set_input_value(option7, option7.__value);
      option8.__value = "text-lg";
      set_input_value(option8, option8.__value);
      option9.__value = "text-xl";
      set_input_value(option9, option9.__value);
      option10.__value = "text-2xl";
      set_input_value(option10, option10.__value);
      option11.__value = "text-3xl";
      set_input_value(option11, option11.__value);
      option12.__value = "text-4xl";
      set_input_value(option12, option12.__value);
      option13.__value = "text-5xl";
      set_input_value(option13, option13.__value);
      option14.__value = "text-6xl";
      set_input_value(option14, option14.__value);
      option15.__value = "text-7xl";
      set_input_value(option15, option15.__value);
      option16.__value = "text-8xl";
      set_input_value(option16, option16.__value);
      option17.__value = "text-9xl";
      set_input_value(option17, option17.__value);
      attr(select1, "class", "select");
      if (
        /*labelSize*/
        ctx[8] === void 0
      )
        add_render_callback(() => (
          /*select1_change_handler*/
          ctx[18].call(select1)
        ));
      attr(label1, "class", "form-control w-full");
      attr(div2, "class", "label");
      option18.__value = "left";
      set_input_value(option18, option18.__value);
      option19.__value = "right";
      set_input_value(option19, option19.__value);
      option20.__value = "top";
      set_input_value(option20, option20.__value);
      option21.__value = "bottom";
      set_input_value(option21, option21.__value);
      option22.__value = "hidden";
      set_input_value(option22, option22.__value);
      attr(select2, "class", "select");
      if (
        /*valuePosition*/
        ctx[9] === void 0
      )
        add_render_callback(() => (
          /*select2_change_handler*/
          ctx[19].call(select2)
        ));
      attr(label2, "class", "form-control w-full");
      attr(div3, "class", "label");
      option23.__value = "text-xs";
      set_input_value(option23, option23.__value);
      option24.__value = "text-sm";
      set_input_value(option24, option24.__value);
      option25.__value = void 0;
      set_input_value(option25, option25.__value);
      option26.__value = "text-lg";
      set_input_value(option26, option26.__value);
      option27.__value = "text-xl";
      set_input_value(option27, option27.__value);
      option28.__value = "text-2xl";
      set_input_value(option28, option28.__value);
      option29.__value = "text-3xl";
      set_input_value(option29, option29.__value);
      option30.__value = "text-4xl";
      set_input_value(option30, option30.__value);
      option31.__value = "text-5xl";
      set_input_value(option31, option31.__value);
      option32.__value = "text-6xl";
      set_input_value(option32, option32.__value);
      option33.__value = "text-7xl";
      set_input_value(option33, option33.__value);
      option34.__value = "text-8xl";
      set_input_value(option34, option34.__value);
      option35.__value = "text-9xl";
      set_input_value(option35, option35.__value);
      attr(select3, "class", "select");
      if (
        /*valueSize*/
        ctx[10] === void 0
      )
        add_render_callback(() => (
          /*select3_change_handler*/
          ctx[20].call(select3)
        ));
      attr(label3, "class", "form-control w-full");
    },
    m(target, anchor) {
      mount_component(entitypicker, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(textpicker0, target, anchor);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, label0, anchor);
      append_hydration(label0, div0);
      append_hydration(label0, t3);
      append_hydration(label0, select0);
      append_hydration(select0, option0);
      append_hydration(select0, option1);
      append_hydration(select0, option2);
      append_hydration(select0, option3);
      append_hydration(select0, option4);
      select_option(
        select0,
        /*labelPosition*/
        ctx[7],
        true
      );
      insert_hydration(target, t9, anchor);
      insert_hydration(target, label1, anchor);
      append_hydration(label1, div1);
      append_hydration(label1, t11);
      append_hydration(label1, select1);
      append_hydration(select1, option5);
      append_hydration(select1, option6);
      append_hydration(select1, option7);
      append_hydration(option7, t14);
      append_hydration(select1, option8);
      append_hydration(select1, option9);
      append_hydration(select1, option10);
      append_hydration(select1, option11);
      append_hydration(select1, option12);
      append_hydration(select1, option13);
      append_hydration(select1, option14);
      append_hydration(select1, option15);
      append_hydration(select1, option16);
      append_hydration(select1, option17);
      select_option(
        select1,
        /*labelSize*/
        ctx[8],
        true
      );
      insert_hydration(target, t25, anchor);
      insert_hydration(target, label2, anchor);
      append_hydration(label2, div2);
      append_hydration(label2, t27);
      append_hydration(label2, select2);
      append_hydration(select2, option18);
      append_hydration(select2, option19);
      append_hydration(select2, option20);
      append_hydration(select2, option21);
      append_hydration(select2, option22);
      select_option(
        select2,
        /*valuePosition*/
        ctx[9],
        true
      );
      insert_hydration(target, t33, anchor);
      insert_hydration(target, label3, anchor);
      append_hydration(label3, div3);
      append_hydration(label3, t35);
      append_hydration(label3, select3);
      append_hydration(select3, option23);
      append_hydration(select3, option24);
      append_hydration(select3, option25);
      append_hydration(option25, t38);
      append_hydration(select3, option26);
      append_hydration(select3, option27);
      append_hydration(select3, option28);
      append_hydration(select3, option29);
      append_hydration(select3, option30);
      append_hydration(select3, option31);
      append_hydration(select3, option32);
      append_hydration(select3, option33);
      append_hydration(select3, option34);
      append_hydration(select3, option35);
      select_option(
        select3,
        /*valueSize*/
        ctx[10],
        true
      );
      insert_hydration(target, t49, anchor);
      mount_component(numberpicker0, target, anchor);
      insert_hydration(target, t50, anchor);
      mount_component(numberpicker1, target, anchor);
      insert_hydration(target, t51, anchor);
      mount_component(numberpicker2, target, anchor);
      insert_hydration(target, t52, anchor);
      mount_component(numberpicker3, target, anchor);
      insert_hydration(target, t53, anchor);
      mount_component(textpicker1, target, anchor);
      insert_hydration(target, t54, anchor);
      mount_component(booleanpicker, target, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            select0,
            "change",
            /*select0_change_handler*/
            ctx[17]
          ),
          listen(
            select1,
            "change",
            /*select1_change_handler*/
            ctx[18]
          ),
          listen(
            select2,
            "change",
            /*select2_change_handler*/
            ctx[19]
          ),
          listen(
            select3,
            "change",
            /*select3_change_handler*/
            ctx[20]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      var _a3, _b3, _c2, _d2, _e2, _f2, _g2, _h2, _i2;
      const entitypicker_changes = {};
      if (!updating_uri && dirty & /*uri*/
      1) {
        updating_uri = true;
        entitypicker_changes.uri = /*uri*/
        ctx2[0];
        add_flush_callback(() => updating_uri = false);
      }
      entitypicker.$set(entitypicker_changes);
      const textpicker0_changes = {};
      if (dirty & /*item*/
      4096)
        textpicker0_changes.placeholder = /*item*/
        ((_a3 = ctx2[12]) == null ? void 0 : _a3.title) ?? "Label";
      if (!updating_value && dirty & /*label*/
      2) {
        updating_value = true;
        textpicker0_changes.value = /*label*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      textpicker0.$set(textpicker0_changes);
      if (dirty & /*labelPosition*/
      128) {
        select_option(
          select0,
          /*labelPosition*/
          ctx2[7]
        );
      }
      if (dirty & /*labelSize, undefined*/
      256) {
        select_option(
          select1,
          /*labelSize*/
          ctx2[8]
        );
      }
      if (dirty & /*valuePosition*/
      512) {
        select_option(
          select2,
          /*valuePosition*/
          ctx2[9]
        );
      }
      if (dirty & /*valueSize, undefined*/
      1024) {
        select_option(
          select3,
          /*valueSize*/
          ctx2[10]
        );
      }
      const numberpicker0_changes = {};
      if (dirty & /*item*/
      4096)
        numberpicker0_changes.placeholder = /*item*/
        ((_c2 = (_b3 = ctx2[12]) == null ? void 0 : _b3.capability) == null ? void 0 : _c2.min) ?? "Min";
      if (!updating_value_1 && dirty & /*min*/
      4) {
        updating_value_1 = true;
        numberpicker0_changes.value = /*min*/
        ctx2[2];
        add_flush_callback(() => updating_value_1 = false);
      }
      numberpicker0.$set(numberpicker0_changes);
      const numberpicker1_changes = {};
      if (dirty & /*item*/
      4096)
        numberpicker1_changes.placeholder = /*item*/
        ((_e2 = (_d2 = ctx2[12]) == null ? void 0 : _d2.capability) == null ? void 0 : _e2.max) ?? "Max";
      if (!updating_value_2 && dirty & /*max*/
      8) {
        updating_value_2 = true;
        numberpicker1_changes.value = /*max*/
        ctx2[3];
        add_flush_callback(() => updating_value_2 = false);
      }
      numberpicker1.$set(numberpicker1_changes);
      const numberpicker2_changes = {};
      if (dirty & /*item*/
      4096)
        numberpicker2_changes.placeholder = /*item*/
        ((_g2 = (_f2 = ctx2[12]) == null ? void 0 : _f2.capability) == null ? void 0 : _g2.step) ?? "Step";
      if (!updating_value_3 && dirty & /*step*/
      16) {
        updating_value_3 = true;
        numberpicker2_changes.value = /*step*/
        ctx2[4];
        add_flush_callback(() => updating_value_3 = false);
      }
      numberpicker2.$set(numberpicker2_changes);
      const numberpicker3_changes = {};
      if (dirty & /*item*/
      4096)
        numberpicker3_changes.placeholder = /*item*/
        ((_i2 = (_h2 = ctx2[12]) == null ? void 0 : _h2.capability) == null ? void 0 : _i2.decimals) ?? "Decimals";
      if (!updating_value_4 && dirty & /*decimals*/
      32) {
        updating_value_4 = true;
        numberpicker3_changes.value = /*decimals*/
        ctx2[5];
        add_flush_callback(() => updating_value_4 = false);
      }
      numberpicker3.$set(numberpicker3_changes);
      const textpicker1_changes = {};
      if (!updating_value_5 && dirty & /*unit*/
      64) {
        updating_value_5 = true;
        textpicker1_changes.value = /*unit*/
        ctx2[6];
        add_flush_callback(() => updating_value_5 = false);
      }
      textpicker1.$set(textpicker1_changes);
      const booleanpicker_changes = {};
      if (!updating_checked && dirty & /*hideMinMax*/
      2048) {
        updating_checked = true;
        booleanpicker_changes.checked = /*hideMinMax*/
        ctx2[11];
        add_flush_callback(() => updating_checked = false);
      }
      booleanpicker.$set(booleanpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(entitypicker.$$.fragment, local);
      transition_in(textpicker0.$$.fragment, local);
      transition_in(numberpicker0.$$.fragment, local);
      transition_in(numberpicker1.$$.fragment, local);
      transition_in(numberpicker2.$$.fragment, local);
      transition_in(numberpicker3.$$.fragment, local);
      transition_in(textpicker1.$$.fragment, local);
      transition_in(booleanpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(entitypicker.$$.fragment, local);
      transition_out(textpicker0.$$.fragment, local);
      transition_out(numberpicker0.$$.fragment, local);
      transition_out(numberpicker1.$$.fragment, local);
      transition_out(numberpicker2.$$.fragment, local);
      transition_out(numberpicker3.$$.fragment, local);
      transition_out(textpicker1.$$.fragment, local);
      transition_out(booleanpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(label0);
        detach(t9);
        detach(label1);
        detach(t25);
        detach(label2);
        detach(t33);
        detach(label3);
        detach(t49);
        detach(t50);
        detach(t51);
        detach(t52);
        detach(t53);
        detach(t54);
      }
      destroy_component(entitypicker, detaching);
      destroy_component(textpicker0, detaching);
      destroy_component(numberpicker0, detaching);
      destroy_component(numberpicker1, detaching);
      destroy_component(numberpicker2, detaching);
      destroy_component(numberpicker3, detaching);
      destroy_component(textpicker1, detaching);
      destroy_component(booleanpicker, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function variableFilter$1(variable) {
  return variable.type === "number";
}
function capabilityFilter$1(device, capability) {
  return capability.type === "number";
}
function instance$y($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let uri;
  let label;
  let min;
  let max;
  let step;
  let decimals;
  let unit;
  let labelPosition = "left";
  let labelSize;
  let valuePosition = "right";
  let valueSize;
  let hideMinMax = false;
  let item;
  function onSettings(s3) {
    $$invalidate(0, uri = s3.uri);
    $$invalidate(1, label = s3.label);
    $$invalidate(2, min = s3.min);
    $$invalidate(3, max = s3.max);
    $$invalidate(4, step = s3.step);
    $$invalidate(5, decimals = s3.decimals);
    $$invalidate(6, unit = s3.unit);
    $$invalidate(7, labelPosition = s3.labelPosition ?? "left");
    $$invalidate(8, labelSize = s3.labelSize);
    $$invalidate(9, valuePosition = s3.valuePosition ?? "right");
    $$invalidate(10, valueSize = s3.valueSize);
    $$invalidate(11, hideMinMax = s3.hideMinMax ?? false);
  }
  function onChange(_uri, _label, _min, _max, _step, _decimals, _unit, _labelPosition, _labelSize, _valuePosition, _valueSize, _hideMinMax) {
    if (_uri !== settings.uri || _label !== settings.label || _min !== settings.min || _max !== settings.max || _step !== settings.step || _decimals !== settings.decimals || _unit !== settings.unit || _labelPosition !== settings.labelPosition || _labelSize !== settings.labelSize || _valuePosition !== settings.valuePosition || _valueSize !== settings.valueSize || _hideMinMax !== settings.hideMinMax) {
      $$invalidate(13, settings = {
        ...settings,
        uri: _uri,
        label: _label,
        min: _min,
        max: _max,
        step: _step,
        decimals: _decimals,
        unit: _unit,
        labelPosition: _labelPosition,
        labelSize: _labelSize,
        valuePosition: _valuePosition,
        valueSize: _valueSize,
        hideMinMax: _hideMinMax
      });
      dispatch("settings", settings);
    }
  }
  function entitypicker_uri_binding(value) {
    uri = value;
    $$invalidate(0, uri);
  }
  const item_handler = (e2) => $$invalidate(12, item = e2.detail);
  function textpicker0_value_binding(value) {
    label = value;
    $$invalidate(1, label);
  }
  function select0_change_handler() {
    labelPosition = select_value(this);
    $$invalidate(7, labelPosition);
  }
  function select1_change_handler() {
    labelSize = select_value(this);
    $$invalidate(8, labelSize);
  }
  function select2_change_handler() {
    valuePosition = select_value(this);
    $$invalidate(9, valuePosition);
  }
  function select3_change_handler() {
    valueSize = select_value(this);
    $$invalidate(10, valueSize);
  }
  function numberpicker0_value_binding(value) {
    min = value;
    $$invalidate(2, min);
  }
  function numberpicker1_value_binding(value) {
    max = value;
    $$invalidate(3, max);
  }
  function numberpicker2_value_binding(value) {
    step = value;
    $$invalidate(4, step);
  }
  function numberpicker3_value_binding(value) {
    decimals = value;
    $$invalidate(5, decimals);
  }
  function textpicker1_value_binding(value) {
    unit = value;
    $$invalidate(6, unit);
  }
  function booleanpicker_checked_binding(value) {
    hideMinMax = value;
    $$invalidate(11, hideMinMax);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(13, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    8192) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*uri, label, min, max, step, decimals, unit, labelPosition, labelSize, valuePosition, valueSize, hideMinMax*/
    4095) {
      onChange(uri, label, min, max, step, decimals, unit, labelPosition, labelSize, valuePosition, valueSize, hideMinMax);
    }
  };
  return [
    uri,
    label,
    min,
    max,
    step,
    decimals,
    unit,
    labelPosition,
    labelSize,
    valuePosition,
    valueSize,
    hideMinMax,
    item,
    settings,
    entitypicker_uri_binding,
    item_handler,
    textpicker0_value_binding,
    select0_change_handler,
    select1_change_handler,
    select2_change_handler,
    select3_change_handler,
    numberpicker0_value_binding,
    numberpicker1_value_binding,
    numberpicker2_value_binding,
    numberpicker3_value_binding,
    textpicker1_value_binding,
    booleanpicker_checked_binding
  ];
}
class SliderEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$y, create_fragment$y, safe_not_equal, { settings: 13 });
  }
}
function create_if_block_9$1(ctx) {
  let span;
  let t0_value = (
    /*formatValue*/
    (ctx[8](
      /*value*/
      ctx[1]
    ) ?? "") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*settings*/
    (ctx[0].unit ?? /*unit*/
    ctx[5] ?? "") + ""
  );
  let t2;
  let span_class_value;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", span_class_value = "w-full text-center " + /*settings*/
      (ctx[0].valueSize ?? ""));
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      2 && t0_value !== (t0_value = /*formatValue*/
      (ctx2[8](
        /*value*/
        ctx2[1]
      ) ?? "") + ""))
        set_data(t0, t0_value);
      if (dirty & /*settings, unit*/
      33 && t2_value !== (t2_value = /*settings*/
      (ctx2[0].unit ?? /*unit*/
      ctx2[5] ?? "") + ""))
        set_data(t2, t2_value);
      if (dirty & /*settings*/
      1 && span_class_value !== (span_class_value = "w-full text-center " + /*settings*/
      (ctx2[0].valueSize ?? ""))) {
        attr(span, "class", span_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_8$2(ctx) {
  var _a2;
  let span;
  let t_value = (
    /*settings*/
    (((_a2 = ctx[0]) == null ? void 0 : _a2.label) ?? /*label*/
    ctx[2] ?? "Not configured") + ""
  );
  let t2;
  let span_class_value;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", span_class_value = "w-full text-center " + /*settings*/
      (ctx[0].labelSize ?? ""));
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*settings, label*/
      5 && t_value !== (t_value = /*settings*/
      (((_a3 = ctx2[0]) == null ? void 0 : _a3.label) ?? /*label*/
      ctx2[2] ?? "Not configured") + ""))
        set_data(t2, t_value);
      if (dirty & /*settings*/
      1 && span_class_value !== (span_class_value = "w-full text-center " + /*settings*/
      (ctx2[0].labelSize ?? ""))) {
        attr(span, "class", span_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_7$3(ctx) {
  var _a2;
  let span;
  let t_value = (
    /*settings*/
    (((_a2 = ctx[0]) == null ? void 0 : _a2.label) ?? /*label*/
    ctx[2] ?? "Not configured") + ""
  );
  let t2;
  let span_class_value;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", span_class_value = "whitespace-nowrap " + /*settings*/
      (ctx[0].labelSize ?? ""));
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*settings, label*/
      5 && t_value !== (t_value = /*settings*/
      (((_a3 = ctx2[0]) == null ? void 0 : _a3.label) ?? /*label*/
      ctx2[2] ?? "Not configured") + ""))
        set_data(t2, t_value);
      if (dirty & /*settings*/
      1 && span_class_value !== (span_class_value = "whitespace-nowrap " + /*settings*/
      (ctx2[0].labelSize ?? ""))) {
        attr(span, "class", span_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_6$4(ctx) {
  let span;
  let t0_value = (
    /*formatValue*/
    (ctx[8](
      /*value*/
      ctx[1]
    ) ?? "") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*settings*/
    (ctx[0].unit ?? /*unit*/
    ctx[5] ?? "") + ""
  );
  let t2;
  let span_class_value;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", span_class_value = "whitespace-nowrap " + /*settings*/
      (ctx[0].valueSize ?? ""));
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      2 && t0_value !== (t0_value = /*formatValue*/
      (ctx2[8](
        /*value*/
        ctx2[1]
      ) ?? "") + ""))
        set_data(t0, t0_value);
      if (dirty & /*settings, unit*/
      33 && t2_value !== (t2_value = /*settings*/
      (ctx2[0].unit ?? /*unit*/
      ctx2[5] ?? "") + ""))
        set_data(t2, t2_value);
      if (dirty & /*settings*/
      1 && span_class_value !== (span_class_value = "whitespace-nowrap " + /*settings*/
      (ctx2[0].valueSize ?? ""))) {
        attr(span, "class", span_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_5$5(ctx) {
  let span;
  let t0_value = (
    /*formatValue*/
    ctx[8](
      /*settings*/
      ctx[0].min ?? /*min*/
      ctx[3]
    ) + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*settings*/
    (ctx[0].unit ?? /*unit*/
    ctx[5] ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*settings, min*/
      9 && t0_value !== (t0_value = /*formatValue*/
      ctx2[8](
        /*settings*/
        ctx2[0].min ?? /*min*/
        ctx2[3]
      ) + ""))
        set_data(t0, t0_value);
      if (dirty & /*settings, unit*/
      33 && t2_value !== (t2_value = /*settings*/
      (ctx2[0].unit ?? /*unit*/
      ctx2[5] ?? "") + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_4$7(ctx) {
  let span;
  let t0_value = (
    /*formatValue*/
    (ctx[8](
      /*value*/
      ctx[1]
    ) ?? "") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*settings*/
    (ctx[0].unit ?? /*unit*/
    ctx[5] ?? "") + ""
  );
  let t2;
  let span_class_value;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", span_class_value = "whitespace-nowrap " + /*settings*/
      (ctx[0].valueSize ?? ""));
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      2 && t0_value !== (t0_value = /*formatValue*/
      (ctx2[8](
        /*value*/
        ctx2[1]
      ) ?? "") + ""))
        set_data(t0, t0_value);
      if (dirty & /*settings, unit*/
      33 && t2_value !== (t2_value = /*settings*/
      (ctx2[0].unit ?? /*unit*/
      ctx2[5] ?? "") + ""))
        set_data(t2, t2_value);
      if (dirty & /*settings*/
      1 && span_class_value !== (span_class_value = "whitespace-nowrap " + /*settings*/
      (ctx2[0].valueSize ?? ""))) {
        attr(span, "class", span_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_3$8(ctx) {
  var _a2;
  let span;
  let t_value = (
    /*settings*/
    (((_a2 = ctx[0]) == null ? void 0 : _a2.label) ?? /*label*/
    ctx[2] ?? "Not configured") + ""
  );
  let t2;
  let span_class_value;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", span_class_value = "whitespace-nowrap " + /*settings*/
      (ctx[0].labelSize ?? ""));
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*settings, label*/
      5 && t_value !== (t_value = /*settings*/
      (((_a3 = ctx2[0]) == null ? void 0 : _a3.label) ?? /*label*/
      ctx2[2] ?? "Not configured") + ""))
        set_data(t2, t_value);
      if (dirty & /*settings*/
      1 && span_class_value !== (span_class_value = "whitespace-nowrap " + /*settings*/
      (ctx2[0].labelSize ?? ""))) {
        attr(span, "class", span_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_2$9(ctx) {
  let span;
  let t0_value = (
    /*formatValue*/
    ctx[8](
      /*settings*/
      ctx[0].max ?? /*max*/
      ctx[4]
    ) + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*settings*/
    (ctx[0].unit ?? /*unit*/
    ctx[5] ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*settings, max*/
      17 && t0_value !== (t0_value = /*formatValue*/
      ctx2[8](
        /*settings*/
        ctx2[0].max ?? /*max*/
        ctx2[4]
      ) + ""))
        set_data(t0, t0_value);
      if (dirty & /*settings, unit*/
      33 && t2_value !== (t2_value = /*settings*/
      (ctx2[0].unit ?? /*unit*/
      ctx2[5] ?? "") + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$e(ctx) {
  var _a2;
  let span;
  let t_value = (
    /*settings*/
    (((_a2 = ctx[0]) == null ? void 0 : _a2.label) ?? /*label*/
    ctx[2] ?? "Not configured") + ""
  );
  let t2;
  let span_class_value;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", span_class_value = "w-full text-center " + /*settings*/
      (ctx[0].labelSize ?? ""));
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*settings, label*/
      5 && t_value !== (t_value = /*settings*/
      (((_a3 = ctx2[0]) == null ? void 0 : _a3.label) ?? /*label*/
      ctx2[2] ?? "Not configured") + ""))
        set_data(t2, t_value);
      if (dirty & /*settings*/
      1 && span_class_value !== (span_class_value = "w-full text-center " + /*settings*/
      (ctx2[0].labelSize ?? ""))) {
        attr(span, "class", span_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block$k(ctx) {
  let span;
  let t0_value = (
    /*formatValue*/
    (ctx[8](
      /*value*/
      ctx[1]
    ) ?? "") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*settings*/
    (ctx[0].unit ?? /*unit*/
    ctx[5] ?? "") + ""
  );
  let t2;
  let span_class_value;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", span_class_value = "w-full text-center " + /*settings*/
      (ctx[0].valueSize ?? ""));
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      2 && t0_value !== (t0_value = /*formatValue*/
      (ctx2[8](
        /*value*/
        ctx2[1]
      ) ?? "") + ""))
        set_data(t0, t0_value);
      if (dirty & /*settings, unit*/
      33 && t2_value !== (t2_value = /*settings*/
      (ctx2[0].unit ?? /*unit*/
      ctx2[5] ?? "") + ""))
        set_data(t2, t2_value);
      if (dirty & /*settings*/
      1 && span_class_value !== (span_class_value = "w-full text-center " + /*settings*/
      (ctx2[0].valueSize ?? ""))) {
        attr(span, "class", span_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$x(ctx) {
  let div2;
  let t0;
  let t1;
  let div1;
  let t2;
  let t3;
  let t4;
  let div0;
  let input;
  let input_min_value;
  let input_max_value;
  let t5;
  let t6;
  let t7;
  let t8;
  let t9;
  let mounted;
  let dispose;
  let if_block0 = (
    /*settings*/
    ctx[0].valuePosition === "top" && create_if_block_9$1(ctx)
  );
  let if_block1 = (
    /*settings*/
    ctx[0].labelPosition === "top" && create_if_block_8$2(ctx)
  );
  let if_block2 = (
    /*settings*/
    ctx[0].labelPosition === "left" && create_if_block_7$3(ctx)
  );
  let if_block3 = (
    /*settings*/
    ctx[0].valuePosition === "left" && create_if_block_6$4(ctx)
  );
  let if_block4 = (
    /*settings*/
    ctx[0].labelPosition !== "left" && /*settings*/
    ctx[0].valuePosition !== "left" && !/*settings*/
    ctx[0].hideMinMax && create_if_block_5$5(ctx)
  );
  let if_block5 = (
    /*settings*/
    ctx[0].valuePosition === "right" && create_if_block_4$7(ctx)
  );
  let if_block6 = (
    /*settings*/
    ctx[0].labelPosition === "right" && create_if_block_3$8(ctx)
  );
  let if_block7 = (
    /*settings*/
    ctx[0].valuePosition !== "right" && /*settings*/
    ctx[0].labelPosition !== "right" && !/*settings*/
    ctx[0].hideMinMax && create_if_block_2$9(ctx)
  );
  let if_block8 = (
    /*settings*/
    ctx[0].labelPosition === "bottom" && create_if_block_1$e(ctx)
  );
  let if_block9 = (
    /*settings*/
    ctx[0].valuePosition === "bottom" && create_if_block$k(ctx)
  );
  return {
    c() {
      div2 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      if (if_block1)
        if_block1.c();
      t1 = space();
      div1 = element("div");
      if (if_block2)
        if_block2.c();
      t2 = space();
      if (if_block3)
        if_block3.c();
      t3 = space();
      if (if_block4)
        if_block4.c();
      t4 = space();
      div0 = element("div");
      input = element("input");
      t5 = space();
      if (if_block5)
        if_block5.c();
      t6 = space();
      if (if_block6)
        if_block6.c();
      t7 = space();
      if (if_block7)
        if_block7.c();
      t8 = space();
      if (if_block8)
        if_block8.c();
      t9 = space();
      if (if_block9)
        if_block9.c();
      this.h();
    },
    l(nodes) {
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      if (if_block0)
        if_block0.l(div2_nodes);
      t0 = claim_space(div2_nodes);
      if (if_block1)
        if_block1.l(div2_nodes);
      t1 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      if (if_block2)
        if_block2.l(div1_nodes);
      t2 = claim_space(div1_nodes);
      if (if_block3)
        if_block3.l(div1_nodes);
      t3 = claim_space(div1_nodes);
      if (if_block4)
        if_block4.l(div1_nodes);
      t4 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      input = claim_element(div0_nodes, "INPUT", {
        type: true,
        class: true,
        min: true,
        max: true,
        step: true
      });
      div0_nodes.forEach(detach);
      t5 = claim_space(div1_nodes);
      if (if_block5)
        if_block5.l(div1_nodes);
      t6 = claim_space(div1_nodes);
      if (if_block6)
        if_block6.l(div1_nodes);
      t7 = claim_space(div1_nodes);
      if (if_block7)
        if_block7.l(div1_nodes);
      div1_nodes.forEach(detach);
      t8 = claim_space(div2_nodes);
      if (if_block8)
        if_block8.l(div2_nodes);
      t9 = claim_space(div2_nodes);
      if (if_block9)
        if_block9.l(div2_nodes);
      div2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(input, "type", "range");
      attr(input, "class", "range");
      input.value = /*value*/
      ctx[1];
      attr(input, "min", input_min_value = /*settings*/
      ctx[0].min ?? /*min*/
      ctx[3]);
      attr(input, "max", input_max_value = /*settings*/
      ctx[0].max ?? /*max*/
      ctx[4]);
      attr(
        input,
        "step",
        /*getStep*/
        ctx[9]()
      );
      input.disabled = /*disabled*/
      ctx[6];
      attr(div0, "class", "h-full flex-grow");
      attr(div1, "class", "flex flex-row mt-2 gap-1");
      attr(div2, "class", "flex flex-col w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div2, anchor);
      if (if_block0)
        if_block0.m(div2, null);
      append_hydration(div2, t0);
      if (if_block1)
        if_block1.m(div2, null);
      append_hydration(div2, t1);
      append_hydration(div2, div1);
      if (if_block2)
        if_block2.m(div1, null);
      append_hydration(div1, t2);
      if (if_block3)
        if_block3.m(div1, null);
      append_hydration(div1, t3);
      if (if_block4)
        if_block4.m(div1, null);
      append_hydration(div1, t4);
      append_hydration(div1, div0);
      append_hydration(div0, input);
      append_hydration(div1, t5);
      if (if_block5)
        if_block5.m(div1, null);
      append_hydration(div1, t6);
      if (if_block6)
        if_block6.m(div1, null);
      append_hydration(div1, t7);
      if (if_block7)
        if_block7.m(div1, null);
      append_hydration(div2, t8);
      if (if_block8)
        if_block8.m(div2, null);
      append_hydration(div2, t9);
      if (if_block9)
        if_block9.m(div2, null);
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*change_handler*/
          ctx[15]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*settings*/
        ctx2[0].valuePosition === "top"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_9$1(ctx2);
          if_block0.c();
          if_block0.m(div2, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*settings*/
        ctx2[0].labelPosition === "top"
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_8$2(ctx2);
          if_block1.c();
          if_block1.m(div2, t1);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*settings*/
        ctx2[0].labelPosition === "left"
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2 = create_if_block_7$3(ctx2);
          if_block2.c();
          if_block2.m(div1, t2);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if (
        /*settings*/
        ctx2[0].valuePosition === "left"
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
        } else {
          if_block3 = create_if_block_6$4(ctx2);
          if_block3.c();
          if_block3.m(div1, t3);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
      if (
        /*settings*/
        ctx2[0].labelPosition !== "left" && /*settings*/
        ctx2[0].valuePosition !== "left" && !/*settings*/
        ctx2[0].hideMinMax
      ) {
        if (if_block4) {
          if_block4.p(ctx2, dirty);
        } else {
          if_block4 = create_if_block_5$5(ctx2);
          if_block4.c();
          if_block4.m(div1, t4);
        }
      } else if (if_block4) {
        if_block4.d(1);
        if_block4 = null;
      }
      if (dirty & /*value*/
      2) {
        input.value = /*value*/
        ctx2[1];
      }
      if (dirty & /*settings, min*/
      9 && input_min_value !== (input_min_value = /*settings*/
      ctx2[0].min ?? /*min*/
      ctx2[3])) {
        attr(input, "min", input_min_value);
      }
      if (dirty & /*settings, max*/
      17 && input_max_value !== (input_max_value = /*settings*/
      ctx2[0].max ?? /*max*/
      ctx2[4])) {
        attr(input, "max", input_max_value);
      }
      if (dirty & /*disabled*/
      64) {
        input.disabled = /*disabled*/
        ctx2[6];
      }
      if (
        /*settings*/
        ctx2[0].valuePosition === "right"
      ) {
        if (if_block5) {
          if_block5.p(ctx2, dirty);
        } else {
          if_block5 = create_if_block_4$7(ctx2);
          if_block5.c();
          if_block5.m(div1, t6);
        }
      } else if (if_block5) {
        if_block5.d(1);
        if_block5 = null;
      }
      if (
        /*settings*/
        ctx2[0].labelPosition === "right"
      ) {
        if (if_block6) {
          if_block6.p(ctx2, dirty);
        } else {
          if_block6 = create_if_block_3$8(ctx2);
          if_block6.c();
          if_block6.m(div1, t7);
        }
      } else if (if_block6) {
        if_block6.d(1);
        if_block6 = null;
      }
      if (
        /*settings*/
        ctx2[0].valuePosition !== "right" && /*settings*/
        ctx2[0].labelPosition !== "right" && !/*settings*/
        ctx2[0].hideMinMax
      ) {
        if (if_block7) {
          if_block7.p(ctx2, dirty);
        } else {
          if_block7 = create_if_block_2$9(ctx2);
          if_block7.c();
          if_block7.m(div1, null);
        }
      } else if (if_block7) {
        if_block7.d(1);
        if_block7 = null;
      }
      if (
        /*settings*/
        ctx2[0].labelPosition === "bottom"
      ) {
        if (if_block8) {
          if_block8.p(ctx2, dirty);
        } else {
          if_block8 = create_if_block_1$e(ctx2);
          if_block8.c();
          if_block8.m(div2, t9);
        }
      } else if (if_block8) {
        if_block8.d(1);
        if_block8 = null;
      }
      if (
        /*settings*/
        ctx2[0].valuePosition === "bottom"
      ) {
        if (if_block9) {
          if_block9.p(ctx2, dirty);
        } else {
          if_block9 = create_if_block$k(ctx2);
          if_block9.c();
          if_block9.m(div2, null);
        }
      } else if (if_block9) {
        if_block9.d(1);
        if_block9 = null;
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
      if (if_block4)
        if_block4.d();
      if (if_block5)
        if_block5.d();
      if (if_block6)
        if_block6.d();
      if (if_block7)
        if_block7.d();
      if (if_block8)
        if_block8.d();
      if (if_block9)
        if_block9.d();
      mounted = false;
      dispose();
    }
  };
}
function instance$x($$self, $$props, $$invalidate) {
  let disabled;
  let $devices;
  let $homey;
  let $variables;
  component_subscribe($$self, devices, ($$value) => $$invalidate(13, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(21, $homey = $$value));
  component_subscribe($$self, variables, ($$value) => $$invalidate(14, $variables = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  let uri;
  let wrapper;
  let wrapperUri;
  let value;
  let label;
  let min;
  let max;
  let step;
  let decimals;
  let unit;
  let readonly = false;
  let type;
  function onSettings(_settings) {
    if (_settings.uri !== uri) {
      $$invalidate(11, uri = _settings.uri);
    }
  }
  function onUri(_uri, _variables, _devices) {
    if (_uri !== void 0 && _uri !== wrapperUri) {
      const segments = _uri.split(":");
      if (wrapper !== void 0 && wrapper) {
        wrapper.destroy();
        wrapper = void 0;
        wrapperUri = void 0;
      }
      if (segments[1] === "variable") {
        getVariable(segments[2]);
      } else if (segments[1] === "device" && segments.length === 4) {
        getCapability(segments[2], segments[3]);
      }
    }
  }
  function getVariable(variableId, _variables) {
    const variable = $variables[variableId];
    if (variable === void 0)
      return;
    wrapper = new VariableWrapper(variable, $homey.logic);
    wrapperUri = variable.uri;
    $$invalidate(2, label = variable.name);
    decimals = 0;
    $$invalidate(5, unit = "");
    $$invalidate(12, readonly = false);
    type = variable.type;
    if (type === "boolean") {
      $$invalidate(1, value = Number(variable.value));
      $$invalidate(3, min = 0);
      $$invalidate(4, max = 1);
      step = 1;
    } else if (type === "number") {
      $$invalidate(1, value = variable.value);
      $$invalidate(3, min = 0);
      $$invalidate(4, max = 100);
      step = 1;
    } else {
      $$invalidate(1, value = 0);
      $$invalidate(3, min = 0);
      $$invalidate(4, max = 100);
      step = 1;
      $$invalidate(12, readonly = true);
    }
    onValue(wrapper.value);
    wrapper.onValue(onValue);
  }
  function getCapability(deviceId, capabilityId, _devices) {
    const device = $devices[deviceId];
    if (device === void 0)
      return;
    const capability = device.capabilitiesObj[capabilityId];
    if (capability === void 0)
      return;
    wrapper = new CapabilityWrapper(device, capabilityId);
    wrapperUri = device.uri + ":" + capabilityId;
    $$invalidate(2, label = capability.title);
    decimals = capability.decimals ?? 0;
    $$invalidate(5, unit = capability.units);
    $$invalidate(12, readonly = !capability.setable);
    type = capability.type;
    if (type === "boolean") {
      $$invalidate(1, value = Number(capability.value));
      $$invalidate(3, min = 0);
      $$invalidate(4, max = 1);
      step = 1;
    } else if (type === "number") {
      $$invalidate(1, value = capability.value);
      $$invalidate(3, min = capability.min ?? 0);
      $$invalidate(4, max = capability.max ?? 100);
      step = capability.step;
    } else {
      $$invalidate(1, value = 0);
      $$invalidate(3, min = 0);
      $$invalidate(4, max = 100);
      step = 1;
      $$invalidate(12, readonly = true);
    }
    onValue(wrapper.value);
    wrapper.onValue(onValue);
  }
  function onValue(_value) {
    if (type === "boolean") {
      $$invalidate(1, value = _value);
    } else if (type === "number") {
      $$invalidate(1, value = _value);
    } else {
      $$invalidate(1, value = 0);
    }
  }
  async function onSlider(e2) {
    const _value = e2.target.value;
    await (wrapper == null ? void 0 : wrapper.setValue(_value));
  }
  function formatValue(_value) {
    if (_value === null || _value === void 0) {
      return "";
    }
    _value = Number(_value);
    const _unit = settings.unit ?? unit ?? "";
    const _min = settings.min ?? min;
    const _max = settings.max ?? max;
    const _decimals = settings.decimals ?? decimals;
    if (_unit === "%") {
      return (100 / (_max - _min) * _value).toFixed(_decimals);
    }
    return _value.toFixed(_decimals);
  }
  function getStep() {
    let _step = settings.step ?? step;
    if (_step !== void 0) {
      return _step;
    }
    const _decimals = settings.decimals ?? decimals;
    return Math.pow(0.1, _decimals ?? 0);
  }
  const change_handler = (e2) => onSlider(e2);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(10, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*readonly, context*/
    5120) {
      $$invalidate(6, disabled = readonly || context.readonly || context.editable);
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*uri, $variables, $devices*/
    26624) {
      onUri(uri);
    }
  };
  return [
    settings,
    value,
    label,
    min,
    max,
    unit,
    disabled,
    onSlider,
    formatValue,
    getStep,
    context,
    uri,
    readonly,
    $devices,
    $variables,
    change_handler
  ];
}
class SliderWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$x, create_fragment$x, safe_not_equal, { settings: 0, context: 10 });
  }
}
function create$2() {
  return {
    id: v4(),
    type: "slider",
    version: 3
  };
}
function migrate$2(settings) {
  while (settings.version !== 3) {
    settings = migrateOnce$2(settings);
  }
  return settings;
}
function migrateOnce$2(settings) {
  switch (settings.version) {
    case 3:
      return settings;
    case 2:
      return migrate_v2_v3$1(settings);
    case 1:
    default:
      return migrate_v1_v2$1(settings);
  }
}
function migrate_v2_v3$1(v2) {
  const settings = {
    id: v2.id,
    type: v2.type,
    version: 3,
    uri: v2.capabilityUri,
    label: v2.title,
    hideMinMax: v2.hideMinMax
  };
  return settings;
}
function migrate_v1_v2$1(v1) {
  const settings = {
    id: v1.id,
    type: v1.type,
    version: 2,
    capabilityUri: "homey:device:" + v1.deviceId + ":" + v1.capabilityId,
    title: v1.title,
    hideMinMax: v1.hideMinMax
  };
  return settings;
}
const info$7 = {
  type: "slider",
  label: "Slider",
  icon: mdiArrowLeftRight,
  category: "component",
  widget: SliderWidget,
  editor: SliderEditor,
  scopes: [
    { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] }
  ],
  create: create$2,
  migration: migrate$2
};
function create_else_block$c(ctx) {
  let button;
  let icon;
  let t2;
  let input;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: mdiMagnify } });
  return {
    c() {
      button = element("button");
      create_component(icon.$$.fragment);
      t2 = space();
      input = element("input");
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      button_nodes.forEach(detach);
      t2 = claim_space(nodes);
      input = claim_element(nodes, "INPUT", {
        type: true,
        class: true,
        placeholder: true
      });
      this.h();
    },
    h() {
      attr(button, "class", "btn join-item rounded-r-full");
      input.readOnly = true;
      attr(input, "type", "text");
      attr(input, "class", "input input-bordered join-item flex-grow");
      attr(input, "placeholder", "Variable");
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      mount_component(icon, button, null);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, input, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[12]
        );
        mounted = true;
      }
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t2);
        detach(input);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$j(ctx) {
  let button;
  let icon;
  let t2;
  let input;
  let input_value_value;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({
    props: { data: mdiVariable, class: "h-6 w-6 mr-2" }
  });
  return {
    c() {
      button = element("button");
      create_component(icon.$$.fragment);
      t2 = space();
      input = element("input");
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      button_nodes.forEach(detach);
      t2 = claim_space(nodes);
      input = claim_element(nodes, "INPUT", {
        type: true,
        class: true,
        placeholder: true
      });
      this.h();
    },
    h() {
      attr(button, "class", "btn join-item rounded-r-full");
      input.readOnly = true;
      attr(input, "type", "text");
      attr(input, "class", "input input-bordered join-item flex-grow");
      attr(input, "placeholder", "Variable");
      input.value = input_value_value = /*selected*/
      ctx[1].name;
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      mount_component(icon, button, null);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, input, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[11]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*selected*/
      2 && input_value_value !== (input_value_value = /*selected*/
      ctx2[1].name) && input.value !== input_value_value) {
        input.value = input_value_value;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t2);
        detach(input);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot$4(ctx) {
  let button;
  let h3;
  let icon;
  let t0;
  let t1_value = (
    /*item*/
    ctx[20].name + ""
  );
  let t1;
  let t2;
  let div0;
  let span0;
  let t3_value = (
    /*item*/
    ctx[20].type + ""
  );
  let t3;
  let t4;
  let span1;
  let t5_value = (
    /*item*/
    ctx[20].value + ""
  );
  let t5;
  let t6;
  let div1;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({
    props: { data: mdiVariable, class: "h-6 w-6 mr-2" }
  });
  function click_handler_22() {
    return (
      /*click_handler_2*/
      ctx[14](
        /*item*/
        ctx[20]
      )
    );
  }
  return {
    c() {
      button = element("button");
      h3 = element("h3");
      create_component(icon.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      div0 = element("div");
      span0 = element("span");
      t3 = text(t3_value);
      t4 = space();
      span1 = element("span");
      t5 = text(t5_value);
      t6 = space();
      div1 = element("div");
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      h3 = claim_element(button_nodes, "H3", { class: true });
      var h3_nodes = children(h3);
      claim_component(icon.$$.fragment, h3_nodes);
      t0 = claim_space(h3_nodes);
      t1 = claim_text(h3_nodes, t1_value);
      h3_nodes.forEach(detach);
      t2 = claim_space(button_nodes);
      div0 = claim_element(button_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", {});
      var span0_nodes = children(span0);
      t3 = claim_text(span0_nodes, t3_value);
      span0_nodes.forEach(detach);
      t4 = claim_space(div0_nodes);
      span1 = claim_element(div0_nodes, "SPAN", {});
      var span1_nodes = children(span1);
      t5 = claim_text(span1_nodes, t5_value);
      span1_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      button_nodes.forEach(detach);
      t6 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      children(div1).forEach(detach);
      this.h();
    },
    h() {
      attr(h3, "class", "w-full flex justify-start");
      attr(div0, "class", "w-full flex justify-between");
      attr(button, "class", "btn btn-ghost w-full");
      attr(div1, "class", "divider divider-neutral my-1");
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, h3);
      mount_component(icon, h3, null);
      append_hydration(h3, t0);
      append_hydration(h3, t1);
      append_hydration(button, t2);
      append_hydration(button, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t3);
      append_hydration(div0, t4);
      append_hydration(div0, span1);
      append_hydration(span1, t5);
      insert_hydration(target, t6, anchor);
      insert_hydration(target, div1, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", click_handler_22);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & /*item*/
      1048576) && t1_value !== (t1_value = /*item*/
      ctx[20].name + ""))
        set_data(t1, t1_value);
      if ((!current || dirty & /*item*/
      1048576) && t3_value !== (t3_value = /*item*/
      ctx[20].type + ""))
        set_data(t3, t3_value);
      if ((!current || dirty & /*item*/
      1048576) && t5_value !== (t5_value = /*item*/
      ctx[20].value + ""))
        set_data(t5, t5_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t6);
        detach(div1);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$w(ctx) {
  let div0;
  let current_block_type_index;
  let if_block;
  let t0;
  let dialog;
  let div3;
  let div1;
  let form;
  let button;
  let icon;
  let t1;
  let input;
  let t2;
  let div2;
  let virtuallist;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block$j, create_else_block$c];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*selected*/
      ctx2[1]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  icon = new Icon({ props: { data: mdiClose } });
  virtuallist = new VirtualList({
    props: {
      items: (
        /*filtered*/
        ctx[2]
      ),
      height: "50vh",
      $$slots: {
        default: [
          create_default_slot$4,
          ({ item }) => ({ 20: item }),
          ({ item }) => item ? 1048576 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div0 = element("div");
      if_block.c();
      t0 = space();
      dialog = element("dialog");
      div3 = element("div");
      div1 = element("div");
      form = element("form");
      button = element("button");
      create_component(icon.$$.fragment);
      t1 = space();
      input = element("input");
      t2 = space();
      div2 = element("div");
      create_component(virtuallist.$$.fragment);
      this.h();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      if_block.l(div0_nodes);
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div3 = claim_element(dialog_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      div1 = claim_element(div3_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      form = claim_element(div1_nodes, "FORM", { method: true });
      var form_nodes = children(form);
      button = claim_element(form_nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      button_nodes.forEach(detach);
      form_nodes.forEach(detach);
      t1 = claim_space(div1_nodes);
      input = claim_element(div1_nodes, "INPUT", {
        type: true,
        class: true,
        name: true,
        placeholder: true
      });
      div1_nodes.forEach(detach);
      t2 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      claim_component(virtuallist.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      div3_nodes.forEach(detach);
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "join w-full flex");
      attr(button, "class", "btn btn-sm btn-circle btn-ghost absolute right-2 top-2");
      attr(form, "method", "dialog");
      attr(input, "type", "text");
      attr(input, "class", "input w-full input-primary");
      attr(input, "name", "search");
      attr(input, "placeholder", "Search");
      attr(div1, "class", "flex-shrink-0 mb-2");
      attr(div2, "class", "flex-grow overflow-auto");
      attr(div3, "class", "modal-box flex flex-col");
      attr(dialog, "class", "modal");
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      if_blocks[current_block_type_index].m(div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div3);
      append_hydration(div3, div1);
      append_hydration(div1, form);
      append_hydration(form, button);
      mount_component(icon, button, null);
      append_hydration(div1, t1);
      append_hydration(div1, input);
      set_input_value(
        input,
        /*search*/
        ctx[0]
      );
      append_hydration(div3, t2);
      append_hydration(div3, div2);
      mount_component(virtuallist, div2, null);
      ctx[15](dialog);
      current = true;
      if (!mounted) {
        dispose = listen(
          input,
          "input",
          /*input_input_handler*/
          ctx[13]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div0, null);
      }
      if (dirty & /*search*/
      1 && input.value !== /*search*/
      ctx2[0]) {
        set_input_value(
          input,
          /*search*/
          ctx2[0]
        );
      }
      const virtuallist_changes = {};
      if (dirty & /*filtered*/
      4)
        virtuallist_changes.items = /*filtered*/
        ctx2[2];
      if (dirty & /*$$scope, item*/
      3145728) {
        virtuallist_changes.$$scope = { dirty, ctx: ctx2 };
      }
      virtuallist.$set(virtuallist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(icon.$$.fragment, local);
      transition_in(virtuallist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(icon.$$.fragment, local);
      transition_out(virtuallist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(dialog);
      }
      if_blocks[current_block_type_index].d();
      destroy_component(icon);
      destroy_component(virtuallist);
      ctx[15](null);
      mounted = false;
      dispose();
    }
  };
}
function instance$w($$self, $$props, $$invalidate) {
  let flatVariables;
  let sorted;
  let $variables;
  component_subscribe($$self, variables, ($$value) => $$invalidate(10, $variables = $$value));
  let { variableId } = $$props;
  let { placeholder = "Select variable" } = $$props;
  let { variableFilter: variableFilter2 = void 0 } = $$props;
  const dispatch = createEventDispatcher();
  let search = "";
  let filtered = [];
  let selected;
  let modal;
  function filterVariables(value, s3) {
    const normalized = value.toLowerCase();
    if (value.length > 0) {
      $$invalidate(2, filtered = sorted.filter((v) => v.name.toLowerCase().includes(normalized)));
    } else {
      $$invalidate(2, filtered = sorted);
    }
  }
  function onVariable(variable) {
    $$invalidate(5, variableId = variable.id);
    dispatch("variableId", variableId);
  }
  function onSelected(variable) {
    dispatch("variable", variable);
  }
  const click_handler = () => modal.showModal();
  const click_handler_1 = () => modal.showModal();
  function input_input_handler() {
    search = this.value;
    $$invalidate(0, search);
  }
  const click_handler_22 = (item) => onVariable(item);
  function dialog_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(3, modal);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("variableId" in $$props2)
      $$invalidate(5, variableId = $$props2.variableId);
    if ("placeholder" in $$props2)
      $$invalidate(6, placeholder = $$props2.placeholder);
    if ("variableFilter" in $$props2)
      $$invalidate(7, variableFilter2 = $$props2.variableFilter);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$variables, variableFilter*/
    1152) {
      $$invalidate(9, flatVariables = Object.values($variables).filter((variable) => variableFilter2 ? variableFilter2(variable) : true));
    }
    if ($$self.$$.dirty & /*flatVariables*/
    512) {
      $$invalidate(8, sorted = (flatVariables ?? []).sort((a3, b2) => {
        if (a3.name === b2.name)
          return 0;
        if (a3.name < b2.name)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*variableId, flatVariables*/
    544) {
      $$invalidate(1, selected = variableId !== void 0 ? flatVariables.find((d3) => d3.id === variableId) : void 0);
    }
    if ($$self.$$.dirty & /*search, sorted*/
    257) {
      filterVariables(search);
    }
    if ($$self.$$.dirty & /*selected*/
    2) {
      onSelected(selected);
    }
  };
  return [
    search,
    selected,
    filtered,
    modal,
    onVariable,
    variableId,
    placeholder,
    variableFilter2,
    sorted,
    flatVariables,
    $variables,
    click_handler,
    click_handler_1,
    input_input_handler,
    click_handler_22,
    dialog_binding
  ];
}
class VariablePicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$w, create_fragment$w, safe_not_equal, {
      variableId: 5,
      placeholder: 6,
      variableFilter: 7
    });
  }
}
function create_if_block_7$2(ctx) {
  let textpicker;
  let t2;
  let if_block_anchor;
  let current;
  textpicker = new TextPicker({
    props: {
      label: "Value",
      placeholder: "Value",
      value: (
        /*value*/
        ctx[0]
      )
    }
  });
  textpicker.$on(
    "value",
    /*value_handler*/
    ctx[7]
  );
  let if_block = (
    /*operator*/
    (ctx[2] === "equal" || /*operator*/
    ctx[2] === "not-equal") && create_if_block_8$1()
  );
  return {
    c() {
      create_component(textpicker.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
      t2 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      insert_hydration(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const textpicker_changes = {};
      if (dirty & /*value*/
      1)
        textpicker_changes.value = /*value*/
        ctx2[0];
      textpicker.$set(textpicker_changes);
      if (
        /*operator*/
        ctx2[2] === "equal" || /*operator*/
        ctx2[2] === "not-equal"
      ) {
        if (if_block) {
          if (dirty & /*operator*/
          4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_8$1();
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(if_block_anchor);
      }
      destroy_component(textpicker, detaching);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_5$4(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Setable</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "True";
  let option1;
  let textContent_2 = "False";
  let mounted;
  let dispose;
  let if_block = (
    /*value*/
    ctx[0] === void 0 && create_if_block_6$3()
  );
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      if (if_block)
        if_block.c();
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1dfhjz9")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      if (if_block)
        if_block.l(select_nodes);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-1nm55jv")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-ajq25r")
        option1.textContent = textContent_2;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "1";
      set_input_value(option0, option0.__value);
      option1.__value = "0";
      set_input_value(option1, option1.__value);
      attr(select, "class", "select w-full");
      attr(select, "placeholder", "Settable");
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      if (if_block)
        if_block.m(select, null);
      append_hydration(select, option0);
      append_hydration(select, option1);
      select_option(
        select,
        /*value*/
        ctx[0]
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*change_handler_2*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*value*/
        ctx2[0] === void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_6$3();
          if_block.c();
          if_block.m(select, option0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*value, undefined*/
      1) {
        select_option(
          select,
          /*value*/
          ctx2[0]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_3$7(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Getable</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "True";
  let option1;
  let textContent_2 = "False";
  let mounted;
  let dispose;
  let if_block = (
    /*value*/
    ctx[0] === void 0 && create_if_block_4$6()
  );
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      if (if_block)
        if_block.c();
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1pcbowh")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      if (if_block)
        if_block.l(select_nodes);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-1nm55jv")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-ajq25r")
        option1.textContent = textContent_2;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "1";
      set_input_value(option0, option0.__value);
      option1.__value = "0";
      set_input_value(option1, option1.__value);
      attr(select, "class", "select w-full");
      attr(select, "placeholder", "Gettable");
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      if (if_block)
        if_block.m(select, null);
      append_hydration(select, option0);
      append_hydration(select, option1);
      select_option(
        select,
        /*value*/
        ctx[0]
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*change_handler_1*/
          ctx[5]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*value*/
        ctx2[0] === void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_4$6();
          if_block.c();
          if_block.m(select, option0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*value, undefined*/
      1) {
        select_option(
          select,
          /*value*/
          ctx2[0]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$d(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Type</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "boolean";
  let option1;
  let textContent_2 = "number";
  let option2;
  let textContent_3 = "string";
  let option3;
  let textContent_4 = "enum";
  let mounted;
  let dispose;
  let if_block = (
    /*value*/
    ctx[0] === void 0 && create_if_block_2$8()
  );
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      if (if_block)
        if_block.c();
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1x9izx5")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      if (if_block)
        if_block.l(select_nodes);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-13u0sb2")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-1eoaqtq")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-a6ck7i")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-8nm7rm")
        option3.textContent = textContent_4;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "boolean";
      set_input_value(option0, option0.__value);
      option1.__value = "number";
      set_input_value(option1, option1.__value);
      option2.__value = "string";
      set_input_value(option2, option2.__value);
      option3.__value = "enum";
      set_input_value(option3, option3.__value);
      attr(select, "class", "select w-full");
      attr(select, "placeholder", "Type");
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      if (if_block)
        if_block.m(select, null);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      select_option(
        select,
        /*value*/
        ctx[0]
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*change_handler*/
          ctx[4]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*value*/
        ctx2[0] === void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_2$8();
          if_block.c();
          if_block.m(select, option0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*value, undefined*/
      1) {
        select_option(
          select,
          /*value*/
          ctx2[0]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$i(ctx) {
  let textpicker;
  let updating_value;
  let t0;
  let div;
  let icon;
  let t1;
  let span;
  let textContent = `A list of standard capability IDs can be found in the <a class="link" href="https://apps-sdk-v3.developer.homey.app/tutorial-device-capabilities.html">Homey SDK reference</a>.`;
  let current;
  function textpicker_value_binding(value) {
    ctx[3](value);
  }
  let textpicker_props = { label: "Value", placeholder: "Value" };
  if (
    /*value*/
    ctx[0] !== void 0
  ) {
    textpicker_props.value = /*value*/
    ctx[0];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  icon = new Icon({ props: { data: mdiInformation } });
  return {
    c() {
      create_component(textpicker.$$.fragment);
      t0 = space();
      div = element("div");
      create_component(icon.$$.fragment);
      t1 = space();
      span = element("span");
      span.innerHTML = textContent;
      this.h();
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { role: true, class: true });
      var div_nodes = children(div);
      claim_component(icon.$$.fragment, div_nodes);
      t1 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-ukiqmo")
        span.innerHTML = textContent;
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "role", "alert");
      attr(div, "class", "alert my-2");
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div, anchor);
      mount_component(icon, div, null);
      append_hydration(div, t1);
      append_hydration(div, span);
      current = true;
    },
    p(ctx2, dirty) {
      const textpicker_changes = {};
      if (!updating_value && dirty & /*value*/
      1) {
        updating_value = true;
        textpicker_changes.value = /*value*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
      }
      destroy_component(textpicker, detaching);
      destroy_component(icon);
    }
  };
}
function create_if_block_8$1(ctx) {
  let div;
  let icon;
  let t0;
  let span;
  let textContent = `If the value type is expected to be <code>boolean</code>, use numeric values 1/0 for true/false.`;
  let current;
  icon = new Icon({ props: { data: mdiInformation } });
  return {
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      t0 = space();
      span = element("span");
      span.innerHTML = textContent;
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { role: true, class: true });
      var div_nodes = children(div);
      claim_component(icon.$$.fragment, div_nodes);
      t0 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-xrnn0p")
        span.innerHTML = textContent;
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "role", "alert");
      attr(div, "class", "alert my-2");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(icon, div, null);
      append_hydration(div, t0);
      append_hydration(div, span);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
    }
  };
}
function create_if_block_6$3(ctx) {
  let option;
  return {
    c() {
      option = element("option");
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", {});
      children(option).forEach(detach);
      this.h();
    },
    h() {
      option.__value = void 0;
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_4$6(ctx) {
  let option;
  return {
    c() {
      option = element("option");
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", {});
      children(option).forEach(detach);
      this.h();
    },
    h() {
      option.__value = void 0;
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_2$8(ctx) {
  let option;
  return {
    c() {
      option = element("option");
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", {});
      children(option).forEach(detach);
      this.h();
    },
    h() {
      option.__value = void 0;
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_fragment$v(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [
    create_if_block$i,
    create_if_block_1$d,
    create_if_block_3$7,
    create_if_block_5$4,
    create_if_block_7$2
  ];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*property*/
      ctx2[1] === "id"
    )
      return 0;
    if (
      /*property*/
      ctx2[1] === "type"
    )
      return 1;
    if (
      /*property*/
      ctx2[1] === "getable"
    )
      return 2;
    if (
      /*property*/
      ctx2[1] === "setable"
    )
      return 3;
    if (
      /*property*/
      ctx2[1] === "value"
    )
      return 4;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
}
function instance$v($$self, $$props, $$invalidate) {
  let { property } = $$props;
  let { operator } = $$props;
  let { value } = $$props;
  const dispatch = createEventDispatcher();
  function textpicker_value_binding(value$1) {
    value = value$1;
    $$invalidate(0, value);
  }
  const change_handler = (e2) => $$invalidate(0, value = e2.currentTarget.value);
  const change_handler_1 = (e2) => $$invalidate(0, value = e2.currentTarget.value);
  const change_handler_2 = (e2) => $$invalidate(0, value = e2.currentTarget.value);
  const value_handler = (e2) => $$invalidate(0, value = e2.detail);
  $$self.$$set = ($$props2) => {
    if ("property" in $$props2)
      $$invalidate(1, property = $$props2.property);
    if ("operator" in $$props2)
      $$invalidate(2, operator = $$props2.operator);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value*/
    1) {
      dispatch("value", value);
    }
  };
  return [
    value,
    property,
    operator,
    textpicker_value_binding,
    change_handler,
    change_handler_1,
    change_handler_2,
    value_handler
  ];
}
class CapabilityCase extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$v, create_fragment$v, safe_not_equal, { property: 1, operator: 2, value: 0 });
  }
}
function create_if_block_4$5(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Ready</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "True";
  let option1;
  let textContent_2 = "False";
  let mounted;
  let dispose;
  let if_block = (
    /*value*/
    ctx[0] === void 0 && create_if_block_5$3()
  );
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      if (if_block)
        if_block.c();
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1usj0ge")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      if (if_block)
        if_block.l(select_nodes);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-1nm55jv")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-ajq25r")
        option1.textContent = textContent_2;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "1";
      set_input_value(option0, option0.__value);
      option1.__value = "0";
      set_input_value(option1, option1.__value);
      attr(select, "class", "select w-full");
      attr(select, "placeholder", "Ready");
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      if (if_block)
        if_block.m(select, null);
      append_hydration(select, option0);
      append_hydration(select, option1);
      select_option(
        select,
        /*value*/
        ctx[0]
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*change_handler_1*/
          ctx[5]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*value*/
        ctx2[0] === void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_5$3();
          if_block.c();
          if_block.m(select, option0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*value, undefined*/
      1) {
        select_option(
          select,
          /*value*/
          ctx2[0]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$7(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Available</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "True";
  let option1;
  let textContent_2 = "False";
  let mounted;
  let dispose;
  let if_block = (
    /*value*/
    ctx[0] === void 0 && create_if_block_3$6()
  );
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      if (if_block)
        if_block.c();
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1uxlfwy")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      if (if_block)
        if_block.l(select_nodes);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-1nm55jv")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-ajq25r")
        option1.textContent = textContent_2;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "1";
      set_input_value(option0, option0.__value);
      option1.__value = "0";
      set_input_value(option1, option1.__value);
      attr(select, "class", "select w-full");
      attr(select, "placeholder", "Available");
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      if (if_block)
        if_block.m(select, null);
      append_hydration(select, option0);
      append_hydration(select, option1);
      select_option(
        select,
        /*value*/
        ctx[0]
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*change_handler*/
          ctx[4]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*value*/
        ctx2[0] === void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_3$6();
          if_block.c();
          if_block.m(select, option0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*value, undefined*/
      1) {
        select_option(
          select,
          /*value*/
          ctx2[0]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$c(ctx) {
  let textpicker;
  let t0;
  let div;
  let icon;
  let t1;
  let span;
  let textContent = `A list of standard capability IDs can be found in the <a class="link" href="https://apps-sdk-v3.developer.homey.app/tutorial-device-capabilities.html">Homey SDK reference</a>.`;
  let current;
  textpicker = new TextPicker({
    props: {
      label: "Value",
      placeholder: "Value",
      value: (
        /*value*/
        ctx[0]
      )
    }
  });
  textpicker.$on(
    "value",
    /*value_handler*/
    ctx[3]
  );
  icon = new Icon({ props: { data: mdiInformation } });
  return {
    c() {
      create_component(textpicker.$$.fragment);
      t0 = space();
      div = element("div");
      create_component(icon.$$.fragment);
      t1 = space();
      span = element("span");
      span.innerHTML = textContent;
      this.h();
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { role: true, class: true });
      var div_nodes = children(div);
      claim_component(icon.$$.fragment, div_nodes);
      t1 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-ukiqmo")
        span.innerHTML = textContent;
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "role", "alert");
      attr(div, "class", "alert my-2");
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div, anchor);
      mount_component(icon, div, null);
      append_hydration(div, t1);
      append_hydration(div, span);
      current = true;
    },
    p(ctx2, dirty) {
      const textpicker_changes = {};
      if (dirty & /*value*/
      1)
        textpicker_changes.value = /*value*/
        ctx2[0];
      textpicker.$set(textpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
      }
      destroy_component(textpicker, detaching);
      destroy_component(icon);
    }
  };
}
function create_if_block$h(ctx) {
  let textpicker;
  let updating_value;
  let t0;
  let div;
  let icon;
  let t1;
  let span;
  let textContent = `A list of standard class IDs can be found in the <a class="link" href="https://apps-sdk-v3.developer.homey.app/tutorial-device-classes.html">Homey SDK reference</a>.`;
  let current;
  function textpicker_value_binding(value) {
    ctx[2](value);
  }
  let textpicker_props = { label: "Value", placeholder: "Value" };
  if (
    /*value*/
    ctx[0] !== void 0
  ) {
    textpicker_props.value = /*value*/
    ctx[0];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  icon = new Icon({ props: { data: mdiInformation } });
  return {
    c() {
      create_component(textpicker.$$.fragment);
      t0 = space();
      div = element("div");
      create_component(icon.$$.fragment);
      t1 = space();
      span = element("span");
      span.innerHTML = textContent;
      this.h();
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { role: true, class: true });
      var div_nodes = children(div);
      claim_component(icon.$$.fragment, div_nodes);
      t1 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1kjaizu")
        span.innerHTML = textContent;
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "role", "alert");
      attr(div, "class", "alert my-2");
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div, anchor);
      mount_component(icon, div, null);
      append_hydration(div, t1);
      append_hydration(div, span);
      current = true;
    },
    p(ctx2, dirty) {
      const textpicker_changes = {};
      if (!updating_value && dirty & /*value*/
      1) {
        updating_value = true;
        textpicker_changes.value = /*value*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
      }
      destroy_component(textpicker, detaching);
      destroy_component(icon);
    }
  };
}
function create_if_block_5$3(ctx) {
  let option;
  return {
    c() {
      option = element("option");
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", {});
      children(option).forEach(detach);
      this.h();
    },
    h() {
      option.__value = void 0;
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_3$6(ctx) {
  let option;
  return {
    c() {
      option = element("option");
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", {});
      children(option).forEach(detach);
      this.h();
    },
    h() {
      option.__value = void 0;
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_fragment$u(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$h, create_if_block_1$c, create_if_block_2$7, create_if_block_4$5];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*property*/
      ctx2[1] === "class"
    )
      return 0;
    if (
      /*property*/
      ctx2[1] === "uiIndicator"
    )
      return 1;
    if (
      /*property*/
      ctx2[1] === "available"
    )
      return 2;
    if (
      /*property*/
      ctx2[1] === "ready"
    )
      return 3;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
}
function instance$u($$self, $$props, $$invalidate) {
  let { property } = $$props;
  let { value } = $$props;
  const dispatch = createEventDispatcher();
  function textpicker_value_binding(value$1) {
    value = value$1;
    $$invalidate(0, value);
  }
  const value_handler = (e2) => $$invalidate(0, value = e2.detail);
  const change_handler = (e2) => $$invalidate(0, value = e2.currentTarget.value);
  const change_handler_1 = (e2) => $$invalidate(0, value = e2.currentTarget.value);
  $$self.$$set = ($$props2) => {
    if ("property" in $$props2)
      $$invalidate(1, property = $$props2.property);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value*/
    1) {
      dispatch("value", value);
    }
  };
  return [
    value,
    property,
    textpicker_value_binding,
    value_handler,
    change_handler,
    change_handler_1
  ];
}
class DeviceCase extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$u, create_fragment$u, safe_not_equal, { property: 1, value: 0 });
  }
}
function create_if_block$g(ctx) {
  let div;
  let icon;
  let t0;
  let span;
  let textContent = `If the value type is expected to be <code>boolean</code>, use numeric values 1/0 for true/false.`;
  let current;
  icon = new Icon({ props: { data: mdiInformation } });
  return {
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      t0 = space();
      span = element("span");
      span.innerHTML = textContent;
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { role: true, class: true });
      var div_nodes = children(div);
      claim_component(icon.$$.fragment, div_nodes);
      t0 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-xrnn0p")
        span.innerHTML = textContent;
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "role", "alert");
      attr(div, "class", "alert my-2");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(icon, div, null);
      append_hydration(div, t0);
      append_hydration(div, span);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
    }
  };
}
function create_fragment$t(ctx) {
  let textpicker;
  let updating_value;
  let t2;
  let if_block_anchor;
  let current;
  function textpicker_value_binding(value) {
    ctx[2](value);
  }
  let textpicker_props = { label: "Value", placeholder: "Value" };
  if (
    /*value*/
    ctx[0] !== void 0
  ) {
    textpicker_props.value = /*value*/
    ctx[0];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  let if_block = (
    /*operator*/
    (ctx[1] === "equal" || /*operator*/
    ctx[1] === "not-equal") && create_if_block$g()
  );
  return {
    c() {
      create_component(textpicker.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
      t2 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      insert_hydration(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const textpicker_changes = {};
      if (!updating_value && dirty & /*value*/
      1) {
        updating_value = true;
        textpicker_changes.value = /*value*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
      if (
        /*operator*/
        ctx2[1] === "equal" || /*operator*/
        ctx2[1] === "not-equal"
      ) {
        if (if_block) {
          if (dirty & /*operator*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$g();
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(if_block_anchor);
      }
      destroy_component(textpicker, detaching);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$t($$self, $$props, $$invalidate) {
  let { operator } = $$props;
  let { value } = $$props;
  const dispatch = createEventDispatcher();
  function textpicker_value_binding(value$1) {
    value = value$1;
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("operator" in $$props2)
      $$invalidate(1, operator = $$props2.operator);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value*/
    1) {
      dispatch("value", value);
    }
  };
  return [value, operator, textpicker_value_binding];
}
class VariableCase extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$t, create_fragment$t, safe_not_equal, { operator: 1, value: 0 });
  }
}
function create_fragment$s(ctx) {
  let textpicker;
  let updating_value;
  let current;
  function textpicker_value_binding(value) {
    ctx[1](value);
  }
  let textpicker_props = { label: "Value", placeholder: "Value" };
  if (
    /*value*/
    ctx[0] !== void 0
  ) {
    textpicker_props.value = /*value*/
    ctx[0];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  return {
    c() {
      create_component(textpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const textpicker_changes = {};
      if (!updating_value && dirty & /*value*/
      1) {
        updating_value = true;
        textpicker_changes.value = /*value*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(textpicker, detaching);
    }
  };
}
function instance$s($$self, $$props, $$invalidate) {
  let { value } = $$props;
  const dispatch = createEventDispatcher();
  function textpicker_value_binding(value$1) {
    value = value$1;
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value*/
    1) {
      dispatch("value", value);
    }
  };
  return [value, textpicker_value_binding];
}
class UserCase extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$s, create_fragment$s, safe_not_equal, { value: 0 });
  }
}
function get_each_context$6(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[29] = list[i2];
  child_ctx[31] = i2;
  return child_ctx;
}
function create_if_block_14(ctx) {
  let option;
  return {
    c() {
      option = element("option");
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", {});
      children(option).forEach(detach);
      this.h();
    },
    h() {
      option.__value = void 0;
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_13(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Property</span>`;
  let t1;
  let select;
  let option;
  let textContent_1 = "Email";
  let mounted;
  let dispose;
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      option = element("option");
      option.textContent = textContent_1;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1255mm6")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      option = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option) !== "svelte-1g2qjrq")
        option.textContent = textContent_1;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option.__value = "email";
      set_input_value(option, option.__value);
      attr(select, "class", "select w-full");
      attr(select, "placeholder", "property");
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      append_hydration(select, option);
      select_option(
        select,
        /*caseKey*/
        ctx[2]
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*change_handler_2*/
          ctx[16]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*caseKey*/
      4) {
        select_option(
          select,
          /*caseKey*/
          ctx2[2]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_9(ctx) {
  let devicepicker;
  let updating_deviceId;
  let t2;
  let if_block_anchor;
  let current;
  function devicepicker_deviceId_binding(value) {
    ctx[14](value);
  }
  let devicepicker_props = {};
  if (
    /*switchArg*/
    ctx[1] !== void 0
  ) {
    devicepicker_props.deviceId = /*switchArg*/
    ctx[1];
  }
  devicepicker = new DevicePicker({ props: devicepicker_props });
  binding_callbacks.push(() => bind(devicepicker, "deviceId", devicepicker_deviceId_binding));
  let if_block = (
    /*switchArg*/
    ctx[1] !== void 0 && create_if_block_10(ctx)
  );
  return {
    c() {
      create_component(devicepicker.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      claim_component(devicepicker.$$.fragment, nodes);
      t2 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(devicepicker, target, anchor);
      insert_hydration(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const devicepicker_changes = {};
      if (!updating_deviceId && dirty[0] & /*switchArg*/
      2) {
        updating_deviceId = true;
        devicepicker_changes.deviceId = /*switchArg*/
        ctx2[1];
        add_flush_callback(() => updating_deviceId = false);
      }
      devicepicker.$set(devicepicker_changes);
      if (
        /*switchArg*/
        ctx2[1] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*switchArg*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_10(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(devicepicker.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(devicepicker.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(if_block_anchor);
      }
      destroy_component(devicepicker, detaching);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_8(ctx) {
  let variablepicker;
  let updating_variableId;
  let current;
  function variablepicker_variableId_binding(value) {
    ctx[13](value);
  }
  let variablepicker_props = {};
  if (
    /*switchArg*/
    ctx[1] !== void 0
  ) {
    variablepicker_props.variableId = /*switchArg*/
    ctx[1];
  }
  variablepicker = new VariablePicker({ props: variablepicker_props });
  binding_callbacks.push(() => bind(variablepicker, "variableId", variablepicker_variableId_binding));
  return {
    c() {
      create_component(variablepicker.$$.fragment);
    },
    l(nodes) {
      claim_component(variablepicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(variablepicker, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const variablepicker_changes = {};
      if (!updating_variableId && dirty[0] & /*switchArg*/
      2) {
        updating_variableId = true;
        variablepicker_changes.variableId = /*switchArg*/
        ctx2[1];
        add_flush_callback(() => updating_variableId = false);
      }
      variablepicker.$set(variablepicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(variablepicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(variablepicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(variablepicker, detaching);
    }
  };
}
function create_if_block_5$2(ctx) {
  let capabilitypicker;
  let updating_capabilityUri;
  let t2;
  let if_block_anchor;
  let current;
  function capabilitypicker_capabilityUri_binding(value) {
    ctx[11](value);
  }
  let capabilitypicker_props = {};
  if (
    /*switchArg*/
    ctx[1] !== void 0
  ) {
    capabilitypicker_props.capabilityUri = /*switchArg*/
    ctx[1];
  }
  capabilitypicker = new CapabilityPicker({ props: capabilitypicker_props });
  binding_callbacks.push(() => bind(capabilitypicker, "capabilityUri", capabilitypicker_capabilityUri_binding));
  let if_block = (
    /*switchArg*/
    ctx[1] !== void 0 && create_if_block_6$2(ctx)
  );
  return {
    c() {
      create_component(capabilitypicker.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      claim_component(capabilitypicker.$$.fragment, nodes);
      t2 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(capabilitypicker, target, anchor);
      insert_hydration(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const capabilitypicker_changes = {};
      if (!updating_capabilityUri && dirty[0] & /*switchArg*/
      2) {
        updating_capabilityUri = true;
        capabilitypicker_changes.capabilityUri = /*switchArg*/
        ctx2[1];
        add_flush_callback(() => updating_capabilityUri = false);
      }
      capabilitypicker.$set(capabilitypicker_changes);
      if (
        /*switchArg*/
        ctx2[1] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_6$2(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(capabilitypicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(capabilitypicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(if_block_anchor);
      }
      destroy_component(capabilitypicker, detaching);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_10(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Property</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "class";
  let option1;
  let textContent_2 = "uiIndicator";
  let option2;
  let textContent_3 = "available";
  let option3;
  let textContent_4 = "ready";
  let t6;
  let if_block_anchor;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*caseKey*/
    (ctx[2] === "class" || /*caseKey*/
    ctx[2] === "uiIndicator") && create_if_block_11(ctx)
  );
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      t6 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-11ecvr2")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-1dbgmey")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-1v1icr8")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-k32hhc")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-jscja0")
        option3.textContent = textContent_4;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      t6 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "class";
      set_input_value(option0, option0.__value);
      option1.__value = "uiIndicator";
      set_input_value(option1, option1.__value);
      option2.__value = "available";
      set_input_value(option2, option2.__value);
      option3.__value = "ready";
      set_input_value(option3, option3.__value);
      attr(select, "class", "select w-full");
      attr(select, "placeholder", "property");
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      select_option(
        select,
        /*caseKey*/
        ctx[2]
      );
      insert_hydration(target, t6, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*change_handler_1*/
          ctx[15]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty[0] & /*caseKey*/
      4) {
        select_option(
          select,
          /*caseKey*/
          ctx2[2]
        );
      }
      if (
        /*caseKey*/
        ctx2[2] === "class" || /*caseKey*/
        ctx2[2] === "uiIndicator"
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*caseKey*/
          4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_11(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label);
        detach(t6);
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_11(ctx) {
  let div;
  let icon;
  let t2;
  let current;
  icon = new Icon({ props: { data: mdiInformation } });
  function select_block_type_1(ctx2, dirty) {
    if (
      /*caseKey*/
      ctx2[2] === "class"
    )
      return create_if_block_12;
    return create_else_block$b;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      t2 = space();
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { role: true, class: true });
      var div_nodes = children(div);
      claim_component(icon.$$.fragment, div_nodes);
      t2 = claim_space(div_nodes);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "role", "alert");
      attr(div, "class", "alert my-2");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(icon, div, null);
      append_hydration(div, t2);
      if_block.m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
      if_block.d();
    }
  };
}
function create_else_block$b(ctx) {
  let span;
  let textContent = `A list of standard capability IDs can be found in the <a class="link" href="https://apps-sdk-v3.developer.homey.app/tutorial-device-capabilities.html">Homey SDK reference</a>.`;
  return {
    c() {
      span = element("span");
      span.innerHTML = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-ukiqmo")
        span.innerHTML = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_12(ctx) {
  let span;
  let textContent = `A list of standard class IDs can be found in the <a class="link" href="https://apps-sdk-v3.developer.homey.app/tutorial-device-classes.html">Homey SDK reference</a>.`;
  return {
    c() {
      span = element("span");
      span.innerHTML = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1kjaizu")
        span.innerHTML = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_6$2(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Property</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "id";
  let option1;
  let textContent_2 = "type";
  let option2;
  let textContent_3 = "getable";
  let option3;
  let textContent_4 = "setable";
  let option4;
  let textContent_5 = "value";
  let mounted;
  let dispose;
  let if_block = (
    /*caseKey*/
    ctx[2] === void 0 && create_if_block_7$1()
  );
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      if (if_block)
        if_block.c();
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-11ecvr2")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      if (if_block)
        if_block.l(select_nodes);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-ns3pfu")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-cj4x8u")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-g0rs52")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-pkcnue")
        option3.textContent = textContent_4;
      option4 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-19kpkk8")
        option4.textContent = textContent_5;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "id";
      set_input_value(option0, option0.__value);
      option1.__value = "type";
      set_input_value(option1, option1.__value);
      option2.__value = "getable";
      set_input_value(option2, option2.__value);
      option3.__value = "setable";
      set_input_value(option3, option3.__value);
      option4.__value = "value";
      set_input_value(option4, option4.__value);
      attr(select, "class", "select w-full");
      attr(select, "placeholder", "property");
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      if (if_block)
        if_block.m(select, null);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      append_hydration(select, option4);
      select_option(
        select,
        /*caseKey*/
        ctx[2]
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*change_handler*/
          ctx[12]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*caseKey*/
        ctx2[2] === void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_7$1();
          if_block.c();
          if_block.m(select, option0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty[0] & /*caseKey*/
      4) {
        select_option(
          select,
          /*caseKey*/
          ctx2[2]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_7$1(ctx) {
  let option;
  return {
    c() {
      option = element("option");
      this.h();
    },
    l(nodes) {
      option = claim_element(nodes, "OPTION", {});
      children(option).forEach(detach);
      this.h();
    },
    h() {
      option.__value = void 0;
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert_hydration(target, option, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block$f(ctx) {
  let div;
  let button;
  let textContent = "Add case";
  let t1;
  let each_1_anchor;
  let current;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*cases*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$6(get_each_context$6(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      div = element("div");
      button = element("button");
      button.textContent = textContent;
      t1 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      button = claim_element(div_nodes, "BUTTON", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(button) !== "svelte-rr89ef")
        button.textContent = textContent;
      div_nodes.forEach(detach);
      t1 = claim_space(nodes);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
      this.h();
    },
    h() {
      attr(button, "class", "btn btn-primary mt-2");
      attr(div, "class", "flex justify-center my-1");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, button);
      insert_hydration(target, t1, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[17]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*removeCase, caseKey, cases, updateCaseValue, switchType, updateCaseOperator, selectedId*/
      477) {
        each_value = ensure_array_like(
          /*cases*/
          ctx2[3]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$6(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$6(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t1);
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_4$4(ctx) {
  let usercase;
  let current;
  function value_handler_3(...args) {
    return (
      /*value_handler_3*/
      ctx[24](
        /*index*/
        ctx[31],
        ...args
      )
    );
  }
  usercase = new UserCase({ props: { value: (
    /*c*/
    ctx[29].value
  ) } });
  usercase.$on("value", value_handler_3);
  return {
    c() {
      create_component(usercase.$$.fragment);
    },
    l(nodes) {
      claim_component(usercase.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(usercase, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const usercase_changes = {};
      if (dirty[0] & /*cases*/
      8)
        usercase_changes.value = /*c*/
        ctx[29].value;
      usercase.$set(usercase_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(usercase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(usercase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(usercase, detaching);
    }
  };
}
function create_if_block_3$5(ctx) {
  let variablecase;
  let current;
  function value_handler_2(...args) {
    return (
      /*value_handler_2*/
      ctx[23](
        /*index*/
        ctx[31],
        ...args
      )
    );
  }
  variablecase = new VariableCase({
    props: {
      operator: (
        /*c*/
        ctx[29].operator
      ),
      value: (
        /*c*/
        ctx[29].value
      )
    }
  });
  variablecase.$on("value", value_handler_2);
  return {
    c() {
      create_component(variablecase.$$.fragment);
    },
    l(nodes) {
      claim_component(variablecase.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(variablecase, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const variablecase_changes = {};
      if (dirty[0] & /*cases*/
      8)
        variablecase_changes.operator = /*c*/
        ctx[29].operator;
      if (dirty[0] & /*cases*/
      8)
        variablecase_changes.value = /*c*/
        ctx[29].value;
      variablecase.$set(variablecase_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(variablecase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(variablecase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(variablecase, detaching);
    }
  };
}
function create_if_block_2$6(ctx) {
  let devicecase;
  let current;
  function value_handler_1(...args) {
    return (
      /*value_handler_1*/
      ctx[22](
        /*index*/
        ctx[31],
        ...args
      )
    );
  }
  devicecase = new DeviceCase({
    props: {
      property: (
        /*caseKey*/
        ctx[2]
      ),
      value: (
        /*c*/
        ctx[29].value
      )
    }
  });
  devicecase.$on("value", value_handler_1);
  return {
    c() {
      create_component(devicecase.$$.fragment);
    },
    l(nodes) {
      claim_component(devicecase.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(devicecase, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const devicecase_changes = {};
      if (dirty[0] & /*caseKey*/
      4)
        devicecase_changes.property = /*caseKey*/
        ctx[2];
      if (dirty[0] & /*cases*/
      8)
        devicecase_changes.value = /*c*/
        ctx[29].value;
      devicecase.$set(devicecase_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(devicecase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(devicecase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(devicecase, detaching);
    }
  };
}
function create_if_block_1$b(ctx) {
  let capabilitycase;
  let current;
  function value_handler(...args) {
    return (
      /*value_handler*/
      ctx[21](
        /*index*/
        ctx[31],
        ...args
      )
    );
  }
  capabilitycase = new CapabilityCase({
    props: {
      property: (
        /*caseKey*/
        ctx[2]
      ),
      operator: (
        /*c*/
        ctx[29].operator
      ),
      value: (
        /*c*/
        ctx[29].value
      )
    }
  });
  capabilitycase.$on("value", value_handler);
  return {
    c() {
      create_component(capabilitycase.$$.fragment);
    },
    l(nodes) {
      claim_component(capabilitycase.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(capabilitycase, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const capabilitycase_changes = {};
      if (dirty[0] & /*caseKey*/
      4)
        capabilitycase_changes.property = /*caseKey*/
        ctx[2];
      if (dirty[0] & /*cases*/
      8)
        capabilitycase_changes.operator = /*c*/
        ctx[29].operator;
      if (dirty[0] & /*cases*/
      8)
        capabilitycase_changes.value = /*c*/
        ctx[29].value;
      capabilitycase.$set(capabilitycase_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(capabilitycase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(capabilitycase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(capabilitycase, detaching);
    }
  };
}
function create_each_block$6(ctx) {
  let div3;
  let input;
  let input_value_value;
  let value_has_changed = false;
  let t0;
  let div0;
  let span0;
  let t1_value = (
    /*caseKey*/
    (ctx[2] ?? "") + ""
  );
  let t1;
  let t2;
  let span1;
  let t3_value = (
    /*c*/
    (ctx[29].operator ?? "") + ""
  );
  let t3;
  let t4;
  let span2;
  let t5_value = (
    /*c*/
    (ctx[29].value ?? "") + ""
  );
  let t5;
  let t6;
  let div2;
  let label;
  let div1;
  let textContent = `<span class="label-text">Operator</span>`;
  let t8;
  let select;
  let option0;
  let textContent_1 = "Equal";
  let option1;
  let textContent_2 = "Not equal";
  let option2;
  let textContent_3 = "Starts with";
  let option3;
  let textContent_4 = "Contains";
  let option4;
  let textContent_5 = "Ends with";
  let option5;
  let textContent_6 = "Less than";
  let option6;
  let textContent_7 = "Greater than";
  let select_value_value;
  let t16;
  let current_block_type_index;
  let if_block;
  let t17;
  let button;
  let icon;
  let t18;
  let t19;
  let current;
  let binding_group;
  let mounted;
  let dispose;
  function change_handler_3(...args) {
    return (
      /*change_handler_3*/
      ctx[20](
        /*index*/
        ctx[31],
        ...args
      )
    );
  }
  const if_block_creators = [create_if_block_1$b, create_if_block_2$6, create_if_block_3$5, create_if_block_4$4];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*switchType*/
      ctx2[0] === "capability"
    )
      return 0;
    if (
      /*switchType*/
      ctx2[0] === "device"
    )
      return 1;
    if (
      /*switchType*/
      ctx2[0] === "variable"
    )
      return 2;
    if (
      /*switchType*/
      ctx2[0] === "user"
    )
      return 3;
    return -1;
  }
  if (~(current_block_type_index = select_block_type_2(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  icon = new Icon({ props: { data: mdiTrashCan } });
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[25](
        /*index*/
        ctx[31]
      )
    );
  }
  binding_group = init_binding_group(
    /*$$binding_groups*/
    ctx[19][0]
  );
  return {
    c() {
      div3 = element("div");
      input = element("input");
      t0 = space();
      div0 = element("div");
      span0 = element("span");
      t1 = text(t1_value);
      t2 = space();
      span1 = element("span");
      t3 = text(t3_value);
      t4 = space();
      span2 = element("span");
      t5 = text(t5_value);
      t6 = space();
      div2 = element("div");
      label = element("label");
      div1 = element("div");
      div1.innerHTML = textContent;
      t8 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      option5 = element("option");
      option5.textContent = textContent_6;
      option6 = element("option");
      option6.textContent = textContent_7;
      t16 = space();
      if (if_block)
        if_block.c();
      t17 = space();
      button = element("button");
      create_component(icon.$$.fragment);
      t18 = text("Remove");
      t19 = space();
      this.h();
    },
    l(nodes) {
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      input = claim_element(div3_nodes, "INPUT", { type: true, name: true });
      t0 = claim_space(div3_nodes);
      div0 = claim_element(div3_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t1 = claim_text(span0_nodes, t1_value);
      span0_nodes.forEach(detach);
      t2 = claim_space(div0_nodes);
      span1 = claim_element(div0_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      t3 = claim_text(span1_nodes, t3_value);
      span1_nodes.forEach(detach);
      t4 = claim_space(div0_nodes);
      span2 = claim_element(div0_nodes, "SPAN", { class: true });
      var span2_nodes = children(span2);
      t5 = claim_text(span2_nodes, t5_value);
      span2_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t6 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      label = claim_element(div2_nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div1 = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div1) !== "svelte-1pc9xs9")
        div1.innerHTML = textContent;
      t8 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-tjv9ae")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-191ama9")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-1d1tpur")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-3z0d3y")
        option3.textContent = textContent_4;
      option4 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-1jfmbq9")
        option4.textContent = textContent_5;
      option5 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-37bpn1")
        option5.textContent = textContent_6;
      option6 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-u7bprn")
        option6.textContent = textContent_7;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      t16 = claim_space(div2_nodes);
      if (if_block)
        if_block.l(div2_nodes);
      t17 = claim_space(div2_nodes);
      button = claim_element(div2_nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      t18 = claim_text(button_nodes, "Remove");
      button_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      t19 = claim_space(div3_nodes);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(input, "type", "radio");
      attr(input, "name", "cases");
      input.__value = input_value_value = /*c*/
      ctx[29].id;
      set_input_value(input, input.__value);
      attr(span0, "class", "text-secondary");
      attr(span1, "class", "italic");
      attr(span2, "class", "text-accent");
      attr(div0, "class", "collapse-title text-lg font-medium");
      attr(div1, "class", "label");
      option0.__value = "equal";
      set_input_value(option0, option0.__value);
      option1.__value = "not-equal";
      set_input_value(option1, option1.__value);
      option2.__value = "starts-with";
      set_input_value(option2, option2.__value);
      option3.__value = "contains";
      set_input_value(option3, option3.__value);
      option4.__value = "ends-with";
      set_input_value(option4, option4.__value);
      option5.__value = "less-than";
      set_input_value(option5, option5.__value);
      option6.__value = "greater-than";
      set_input_value(option6, option6.__value);
      attr(select, "class", "select w-full");
      attr(select, "placeholder", "Where");
      attr(label, "class", "form-control w-full");
      attr(button, "class", "btn btn-warning btn-outline w-full mt-2");
      attr(div2, "class", "collapse-content");
      attr(div3, "class", "collapse collapse-arrow bg-base-300 mt-2");
      binding_group.p(input);
    },
    m(target, anchor) {
      insert_hydration(target, div3, anchor);
      append_hydration(div3, input);
      input.checked = input.__value === /*selectedId*/
      ctx[4];
      append_hydration(div3, t0);
      append_hydration(div3, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t1);
      append_hydration(div0, t2);
      append_hydration(div0, span1);
      append_hydration(span1, t3);
      append_hydration(div0, t4);
      append_hydration(div0, span2);
      append_hydration(span2, t5);
      append_hydration(div3, t6);
      append_hydration(div3, div2);
      append_hydration(div2, label);
      append_hydration(label, div1);
      append_hydration(label, t8);
      append_hydration(label, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      append_hydration(select, option4);
      append_hydration(select, option5);
      append_hydration(select, option6);
      select_option(
        select,
        /*c*/
        ctx[29].operator
      );
      append_hydration(div2, t16);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div2, null);
      }
      append_hydration(div2, t17);
      append_hydration(div2, button);
      mount_component(icon, button, null);
      append_hydration(button, t18);
      append_hydration(div3, t19);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "change",
            /*input_change_handler*/
            ctx[18]
          ),
          listen(select, "change", change_handler_3),
          listen(button, "click", click_handler_1)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (!current || dirty[0] & /*cases*/
      8 && input_value_value !== (input_value_value = /*c*/
      ctx[29].id)) {
        input.__value = input_value_value;
        set_input_value(input, input.__value);
        value_has_changed = true;
      }
      if (value_has_changed || dirty[0] & /*selectedId, cases*/
      24) {
        input.checked = input.__value === /*selectedId*/
        ctx[4];
      }
      if ((!current || dirty[0] & /*caseKey*/
      4) && t1_value !== (t1_value = /*caseKey*/
      (ctx[2] ?? "") + ""))
        set_data(t1, t1_value);
      if ((!current || dirty[0] & /*cases*/
      8) && t3_value !== (t3_value = /*c*/
      (ctx[29].operator ?? "") + ""))
        set_data(t3, t3_value);
      if ((!current || dirty[0] & /*cases*/
      8) && t5_value !== (t5_value = /*c*/
      (ctx[29].value ?? "") + ""))
        set_data(t5, t5_value);
      if (!current || dirty[0] & /*cases*/
      8 && select_value_value !== (select_value_value = /*c*/
      ctx[29].operator)) {
        select_option(
          select,
          /*c*/
          ctx[29].operator
        );
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
            if_block.c();
          } else {
            if_block.p(ctx, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(div2, t17);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      destroy_component(icon);
      binding_group.r();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment$r(ctx) {
  let label;
  let div;
  let textContent = `<span class="label-text">Switch by</span>`;
  let t1;
  let select;
  let option0;
  let textContent_1 = "Device";
  let option1;
  let textContent_2 = "Capability";
  let option2;
  let textContent_3 = "⛔ Variable";
  let option3;
  let textContent_4 = "⛔ User";
  let t6;
  let current_block_type_index;
  let if_block1;
  let t7;
  let if_block2_anchor;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*switchType*/
    ctx[0] === void 0 && create_if_block_14()
  );
  const if_block_creators = [create_if_block_5$2, create_if_block_8, create_if_block_9, create_if_block_13];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*switchType*/
      ctx2[0] === "capability"
    )
      return 0;
    if (
      /*switchType*/
      ctx2[0] === "variable"
    )
      return 1;
    if (
      /*switchType*/
      ctx2[0] === "device"
    )
      return 2;
    if (
      /*switchType*/
      ctx2[0] === "user"
    )
      return 3;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  let if_block2 = (
    /*caseKey*/
    ctx[2] !== void 0 && create_if_block$f(ctx)
  );
  return {
    c() {
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t1 = space();
      select = element("select");
      if (if_block0)
        if_block0.c();
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      t6 = space();
      if (if_block1)
        if_block1.c();
      t7 = space();
      if (if_block2)
        if_block2.c();
      if_block2_anchor = empty();
      this.h();
    },
    l(nodes) {
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-mmyoh4")
        div.innerHTML = textContent;
      t1 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true, placeholder: true });
      var select_nodes = children(select);
      if (if_block0)
        if_block0.l(select_nodes);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-am1d6a")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-cx2j8y")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-n33zdu")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-1wli3g6")
        option3.textContent = textContent_4;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      t6 = claim_space(nodes);
      if (if_block1)
        if_block1.l(nodes);
      t7 = claim_space(nodes);
      if (if_block2)
        if_block2.l(nodes);
      if_block2_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "class", "label");
      option0.__value = "device";
      set_input_value(option0, option0.__value);
      option1.__value = "capability";
      set_input_value(option1, option1.__value);
      option2.__value = "variable";
      set_input_value(option2, option2.__value);
      option2.disabled = true;
      option3.__value = "user";
      set_input_value(option3, option3.__value);
      option3.disabled = true;
      attr(select, "class", "select w-full mt-4");
      attr(select, "placeholder", "Switch by");
      if (
        /*switchType*/
        ctx[0] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler*/
          ctx[10].call(select)
        ));
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t1);
      append_hydration(label, select);
      if (if_block0)
        if_block0.m(select, null);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      select_option(
        select,
        /*switchType*/
        ctx[0],
        true
      );
      insert_hydration(target, t6, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_hydration(target, t7, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert_hydration(target, if_block2_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*select_change_handler*/
          ctx[10]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*switchType*/
        ctx2[0] === void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_14();
          if_block0.c();
          if_block0.m(select, option0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty[0] & /*switchType*/
      1) {
        select_option(
          select,
          /*switchType*/
          ctx2[0]
        );
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block1) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block1 = if_blocks[current_block_type_index];
          if (!if_block1) {
            if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block1.c();
          } else {
            if_block1.p(ctx2, dirty);
          }
          transition_in(if_block1, 1);
          if_block1.m(t7.parentNode, t7);
        } else {
          if_block1 = null;
        }
      }
      if (
        /*caseKey*/
        ctx2[2] !== void 0
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty[0] & /*caseKey*/
          4) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block$f(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label);
        detach(t6);
        detach(t7);
        detach(if_block2_anchor);
      }
      if (if_block0)
        if_block0.d();
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
      if (if_block2)
        if_block2.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance$r($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let switchType;
  let switchArg;
  let caseKey;
  let cases;
  let selectedId;
  function onSettings(_settings) {
    $$invalidate(0, switchType = _settings.switch);
    $$invalidate(1, switchArg = _settings.switchArg);
    $$invalidate(2, caseKey = _settings.case);
    $$invalidate(3, cases = _settings.cases ?? []);
  }
  function onChange(_switch, _switchArg, _caseKey, _cases) {
    if (_switch !== settings.switch || _switchArg !== settings.switchArg || _caseKey !== settings.case || _cases !== settings.cases) {
      $$invalidate(9, settings = {
        ...settings,
        switch: _switch,
        switchArg: _switchArg,
        case: _caseKey,
        cases: _cases
      });
      dispatch("settings", settings);
    }
  }
  function addCase() {
    const c2 = { id: v4() };
    $$invalidate(3, cases = [...cases, c2]);
  }
  function removeCase(index2) {
    $$invalidate(3, cases = cases.filter((a3, i2) => i2 !== index2));
  }
  function updateCaseOperator(index2, operator) {
    $$invalidate(3, cases[index2] = { ...cases[index2], operator }, cases);
    $$invalidate(3, cases = [...cases]);
  }
  function updateCaseValue(index2, value) {
    $$invalidate(3, cases[index2] = { ...cases[index2], value }, cases);
    $$invalidate(3, cases = [...cases]);
  }
  const $$binding_groups = [[]];
  function select_change_handler() {
    switchType = select_value(this);
    $$invalidate(0, switchType);
  }
  function capabilitypicker_capabilityUri_binding(value) {
    switchArg = value;
    $$invalidate(1, switchArg);
  }
  const change_handler = (e2) => $$invalidate(2, caseKey = e2.currentTarget.value);
  function variablepicker_variableId_binding(value) {
    switchArg = value;
    $$invalidate(1, switchArg);
  }
  function devicepicker_deviceId_binding(value) {
    switchArg = value;
    $$invalidate(1, switchArg);
  }
  const change_handler_1 = (e2) => $$invalidate(2, caseKey = e2.currentTarget.value);
  const change_handler_2 = (e2) => $$invalidate(2, caseKey = e2.currentTarget.value);
  const click_handler = () => addCase();
  function input_change_handler() {
    selectedId = this.__value;
    $$invalidate(4, selectedId);
  }
  const change_handler_3 = (index2, e2) => updateCaseOperator(index2, e2.currentTarget.value);
  const value_handler = (index2, e2) => updateCaseValue(index2, e2.detail);
  const value_handler_1 = (index2, e2) => updateCaseValue(index2, e2.detail);
  const value_handler_2 = (index2, e2) => updateCaseValue(index2, e2.detail);
  const value_handler_3 = (index2, e2) => updateCaseValue(index2, e2.detail);
  const click_handler_1 = (index2) => removeCase(index2);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(9, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*settings*/
    512) {
      onSettings(settings);
    }
    if ($$self.$$.dirty[0] & /*switchType, switchArg, caseKey, cases*/
    15) {
      onChange(switchType, switchArg, caseKey, cases);
    }
  };
  return [
    switchType,
    switchArg,
    caseKey,
    cases,
    selectedId,
    addCase,
    removeCase,
    updateCaseOperator,
    updateCaseValue,
    settings,
    select_change_handler,
    capabilitypicker_capabilityUri_binding,
    change_handler,
    variablepicker_variableId_binding,
    devicepicker_deviceId_binding,
    change_handler_1,
    change_handler_2,
    click_handler,
    input_change_handler,
    $$binding_groups,
    change_handler_3,
    value_handler,
    value_handler_1,
    value_handler_2,
    value_handler_3,
    click_handler_1
  ];
}
class SwitchEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$r, create_fragment$r, safe_not_equal, { settings: 9 }, null, [-1, -1]);
  }
}
function get_each_context$5(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[22] = list[i2];
  return child_ctx;
}
function create_if_block_1$a(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      context: (
        /*context*/
        ctx[0]
      ),
      settings: (
        /*child*/
        ctx[4]
      )
    }
  });
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty & /*context*/
      1)
        widget_changes.context = /*context*/
        ctx2[0];
      if (dirty & /*child*/
      16)
        widget_changes.settings = /*child*/
        ctx2[4];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_if_block$e(ctx) {
  let div;
  let t2;
  let dndsingle;
  let current;
  let each_value = ensure_array_like(
    /*cases*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$5(get_each_context$5(ctx, each_value, i2));
  }
  dndsingle = new DndSingle({
    props: {
      item: (
        /*child*/
        ctx[4]
      ),
      editable: (
        /*editable*/
        ctx[5]
      ),
      class: "w-full " + /*context*/
      (ctx[0].editable ? "min-h-[50px]" : ""),
      $$slots: {
        default: [
          create_default_slot$3,
          ({ item }) => ({ 21: item }),
          ({ item }) => item ? 2097152 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  dndsingle.$on(
    "item",
    /*item_handler*/
    ctx[11]
  );
  return {
    c() {
      div = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t2 = space();
      create_component(dndsingle.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div_nodes);
      }
      div_nodes.forEach(detach);
      t2 = claim_space(nodes);
      claim_component(dndsingle.$$.fragment, nodes);
      this.h();
    },
    h() {
      attr(div, "class", "tabs tabs-bordered bg-base-300");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div, null);
        }
      }
      insert_hydration(target, t2, anchor);
      mount_component(dndsingle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*selectedId, cases, caseKey*/
      14) {
        each_value = ensure_array_like(
          /*cases*/
          ctx2[2]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$5(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block$5(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(div, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value.length;
      }
      const dndsingle_changes = {};
      if (dirty & /*child*/
      16)
        dndsingle_changes.item = /*child*/
        ctx2[4];
      if (dirty & /*editable*/
      32)
        dndsingle_changes.editable = /*editable*/
        ctx2[5];
      if (dirty & /*context*/
      1)
        dndsingle_changes.class = "w-full " + /*context*/
        (ctx2[0].editable ? "min-h-[50px]" : "");
      if (dirty & /*$$scope, context, item*/
      35651585) {
        dndsingle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dndsingle.$set(dndsingle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dndsingle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dndsingle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
      }
      destroy_each(each_blocks, detaching);
      destroy_component(dndsingle, detaching);
    }
  };
}
function create_each_block$5(ctx) {
  let button;
  let span0;
  let t0_value = (
    /*caseKey*/
    (ctx[3] ?? "") + ""
  );
  let t0;
  let t1;
  let span1;
  let t2_value = (
    /*c*/
    (ctx[22].operator ?? "") + ""
  );
  let t2;
  let t3;
  let span2;
  let t4_value = (
    /*c*/
    (ctx[22].value ?? "") + ""
  );
  let t4;
  let t5;
  let mounted;
  let dispose;
  function click_handler(...args) {
    return (
      /*click_handler*/
      ctx[9](
        /*c*/
        ctx[22],
        ...args
      )
    );
  }
  return {
    c() {
      button = element("button");
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      span1 = element("span");
      t2 = text(t2_value);
      t3 = space();
      span2 = element("span");
      t4 = text(t4_value);
      t5 = space();
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      span0 = claim_element(button_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t0 = claim_text(span0_nodes, t0_value);
      span0_nodes.forEach(detach);
      t1 = claim_space(button_nodes);
      span1 = claim_element(button_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      t2 = claim_text(span1_nodes, t2_value);
      span1_nodes.forEach(detach);
      t3 = claim_space(button_nodes);
      span2 = claim_element(button_nodes, "SPAN", { class: true });
      var span2_nodes = children(span2);
      t4 = claim_text(span2_nodes, t4_value);
      span2_nodes.forEach(detach);
      t5 = claim_space(button_nodes);
      button_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span0, "class", "text-secondary pr-1");
      attr(span1, "class", "italic");
      attr(span2, "class", "text-accent pl-1");
      attr(button, "class", "tab");
      toggle_class(
        button,
        "tab-active",
        /*selectedId*/
        ctx[1] === /*c*/
        ctx[22].id
      );
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, span0);
      append_hydration(span0, t0);
      append_hydration(button, t1);
      append_hydration(button, span1);
      append_hydration(span1, t2);
      append_hydration(button, t3);
      append_hydration(button, span2);
      append_hydration(span2, t4);
      append_hydration(button, t5);
      if (!mounted) {
        dispose = listen(button, "click", stop_propagation(click_handler));
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*caseKey*/
      8 && t0_value !== (t0_value = /*caseKey*/
      (ctx[3] ?? "") + ""))
        set_data(t0, t0_value);
      if (dirty & /*cases*/
      4 && t2_value !== (t2_value = /*c*/
      (ctx[22].operator ?? "") + ""))
        set_data(t2, t2_value);
      if (dirty & /*cases*/
      4 && t4_value !== (t4_value = /*c*/
      (ctx[22].value ?? "") + ""))
        set_data(t4, t4_value);
      if (dirty & /*selectedId, cases*/
      6) {
        toggle_class(
          button,
          "tab-active",
          /*selectedId*/
          ctx[1] === /*c*/
          ctx[22].id
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot$3(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      context: (
        /*context*/
        ctx[0]
      ),
      settings: (
        /*item*/
        ctx[21]
      )
    }
  });
  widget.$on(
    "settings",
    /*settings_handler*/
    ctx[10]
  );
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty & /*context*/
      1)
        widget_changes.context = /*context*/
        ctx2[0];
      if (dirty & /*item*/
      2097152)
        widget_changes.settings = /*item*/
        ctx2[21];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_fragment$q(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$e, create_if_block_1$a];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*context*/
      ctx2[0].editable
    )
      return 0;
    if (
      /*child*/
      ctx2[4] !== void 0
    )
      return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
}
function matchOperator(_case, value) {
  switch (_case.operator) {
    case "equal":
      return value == _case.value;
    case "not-equal":
      return value != _case.value;
    case "starts-with":
      return typeof value === "string" && typeof _case.value === "string" && value.startsWith(_case.value);
    case "ends-with":
      return typeof value === "string" && typeof _case.value === "string" && value.endsWith(_case.value);
    case "contains":
      return typeof value === "string" && typeof _case.value === "string" && value.includes(_case.value);
    case "less-than":
      return value < _case.value;
    case "greater-than":
      return value > _case.value;
  }
  return false;
}
function instance$q($$self, $$props, $$invalidate) {
  let editable;
  let $devices;
  component_subscribe($$self, devices, ($$value) => $$invalidate(14, $devices = $$value));
  let { context } = $$props;
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let cases;
  let selectedId;
  let watched;
  let switchObj;
  let caseKey;
  let child;
  function onSettings(_settings) {
    $$invalidate(3, caseKey = _settings.case);
    $$invalidate(2, cases = _settings.cases ?? []);
    $$invalidate(4, child = void 0);
    if (_settings.switch !== void 0 && _settings.switchArg !== void 0) {
      if (_settings.switch === "capability") {
        const segments = _settings.switchArg.split(":");
        const deviceId = segments[2];
        const capabilityId = segments[3];
        const device = $devices[deviceId];
        if (device !== void 0) {
          switchObj = device.capabilitiesObj[capabilityId];
          device.on("capability", (e2) => onCapability(e2));
          watched = device;
        } else {
          switchObj = void 0;
          watched = void 0;
        }
      } else if (_settings.switch === "device") {
        const deviceId = _settings.switchArg;
        const device = $devices[deviceId];
        if (device !== void 0) {
          device.on("update", (e2) => onDevice());
          switchObj = device;
          watched = device;
        } else {
          switchObj = void 0;
          watched = void 0;
        }
      } else if (_settings.switch === "variable")
        ;
      else if (_settings.switch === "user")
        ;
    }
    matchCase();
  }
  function onCapability(event) {
    if (settings.switchArg === void 0)
      return;
    const segments = settings.switchArg.split(":");
    segments[2];
    const capabilityId = segments[3];
    if (event.capabilityId !== capabilityId)
      return;
    const device = watched;
    switchObj = device.capabilitiesObj[capabilityId];
    matchCase();
  }
  function onDevice(patch) {
    switchObj = switchObj;
    matchCase();
  }
  function matchCase() {
    var _a2;
    if (context.editable) {
      if (selectedId === void 0 && cases.length > 0) {
        $$invalidate(1, selectedId = cases[0].id);
      }
    } else {
      if (switchObj === void 0 || caseKey === void 0) {
        return;
      }
      const property = switchObj[caseKey];
      $$invalidate(1, selectedId = (_a2 = cases.find((c2) => matchOperator(c2, property))) == null ? void 0 : _a2.id);
    }
    selectCase(selectedId);
  }
  function onItem(_item) {
    $$invalidate(4, child = _item);
    const index2 = cases.findIndex((c2) => c2.id === selectedId);
    $$invalidate(2, cases[index2] = { ...cases[index2], item: child }, cases);
    $$invalidate(2, cases = [...cases]);
    $$invalidate(8, settings = { ...settings, cases });
    dispatch("settings", settings);
    selectCase(selectedId);
  }
  function updateWidget(_item) {
    $$invalidate(4, child = { ..._item });
    const index2 = cases.findIndex((c2) => c2.id === selectedId);
    $$invalidate(2, cases[index2] = { ...cases[index2], item: child }, cases);
    $$invalidate(2, cases = [...cases]);
    $$invalidate(8, settings = { ...settings, cases });
    dispatch("settings", settings);
  }
  function selectCase(_selectedId) {
    const selected = cases.find((c2) => c2.id === _selectedId);
    $$invalidate(4, child = selected == null ? void 0 : selected.item);
  }
  const click_handler = (c2, e2) => $$invalidate(1, selectedId = c2.id);
  const settings_handler = (e2) => updateWidget(e2.detail);
  const item_handler = (e2) => onItem(e2.detail);
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(0, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(8, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    256) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*selectedId*/
    2) {
      selectCase(selectedId);
    }
    if ($$self.$$.dirty & /*context, selectedId*/
    3) {
      $$invalidate(5, editable = context.editable && selectedId !== void 0);
    }
  };
  return [
    context,
    selectedId,
    cases,
    caseKey,
    child,
    editable,
    onItem,
    updateWidget,
    settings,
    click_handler,
    settings_handler,
    item_handler
  ];
}
class SwitchWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$q, create_fragment$q, safe_not_equal, { context: 0, settings: 8 });
  }
}
const info$6 = {
  type: "switch",
  label: "Switch",
  icon: mdiArrowDecision,
  category: "logic",
  widget: SwitchWidget,
  editor: SwitchEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "switch", version: 1 }),
  migration: (e2) => e2
};
function get_each_context$4(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i2];
  return child_ctx;
}
function create_if_block_7(ctx) {
  let iconpicker;
  let current;
  function iconId_handler(...args) {
    return (
      /*iconId_handler*/
      ctx[12](
        /*templateArg*/
        ctx[16],
        ...args
      )
    );
  }
  iconpicker = new IconPicker({
    props: {
      name: (
        /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id
      ),
      iconId: (
        /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default
      )
    }
  });
  iconpicker.$on("iconId", iconId_handler);
  return {
    c() {
      create_component(iconpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(iconpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(iconpicker, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const iconpicker_changes = {};
      if (dirty & /*templateArgs*/
      1)
        iconpicker_changes.name = /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id;
      if (dirty & /*templateArgs*/
      1)
        iconpicker_changes.iconId = /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default;
      iconpicker.$set(iconpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconpicker, detaching);
    }
  };
}
function create_if_block_6$1(ctx) {
  let p;
  let textContent = "Not implemented: Image picker";
  return {
    c() {
      p = element("p");
      p.textContent = textContent;
    },
    l(nodes) {
      p = claim_element(nodes, "P", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(p) !== "svelte-9cnycq")
        p.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, p, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(p);
      }
    }
  };
}
function create_if_block_5$1(ctx) {
  let devicepicker;
  let current;
  function deviceId_handler(...args) {
    return (
      /*deviceId_handler*/
      ctx[11](
        /*templateArg*/
        ctx[16],
        ...args
      )
    );
  }
  devicepicker = new DevicePicker({
    props: {
      name: (
        /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id
      ),
      deviceId: (
        /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default
      )
    }
  });
  devicepicker.$on("deviceId", deviceId_handler);
  return {
    c() {
      create_component(devicepicker.$$.fragment);
    },
    l(nodes) {
      claim_component(devicepicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(devicepicker, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const devicepicker_changes = {};
      if (dirty & /*templateArgs*/
      1)
        devicepicker_changes.name = /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id;
      if (dirty & /*templateArgs*/
      1)
        devicepicker_changes.deviceId = /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default;
      devicepicker.$set(devicepicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(devicepicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(devicepicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(devicepicker, detaching);
    }
  };
}
function create_if_block_4$3(ctx) {
  let capabilitypicker;
  let current;
  function capabilityUri_handler(...args) {
    return (
      /*capabilityUri_handler*/
      ctx[10](
        /*templateArg*/
        ctx[16],
        ...args
      )
    );
  }
  capabilitypicker = new CapabilityPicker({
    props: {
      name: (
        /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id
      ),
      capabilityUri: (
        /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default
      )
    }
  });
  capabilitypicker.$on("capabilityUri", capabilityUri_handler);
  return {
    c() {
      create_component(capabilitypicker.$$.fragment);
    },
    l(nodes) {
      claim_component(capabilitypicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(capabilitypicker, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const capabilitypicker_changes = {};
      if (dirty & /*templateArgs*/
      1)
        capabilitypicker_changes.name = /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id;
      if (dirty & /*templateArgs*/
      1)
        capabilitypicker_changes.capabilityUri = /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default;
      capabilitypicker.$set(capabilitypicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(capabilitypicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(capabilitypicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(capabilitypicker, detaching);
    }
  };
}
function create_if_block_3$4(ctx) {
  let zonepicker;
  let current;
  function zoneId_handler(...args) {
    return (
      /*zoneId_handler*/
      ctx[9](
        /*templateArg*/
        ctx[16],
        ...args
      )
    );
  }
  zonepicker = new ZonePicker({
    props: {
      label: (
        /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id
      ),
      zoneId: (
        /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default
      )
    }
  });
  zonepicker.$on("zoneId", zoneId_handler);
  return {
    c() {
      create_component(zonepicker.$$.fragment);
    },
    l(nodes) {
      claim_component(zonepicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(zonepicker, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const zonepicker_changes = {};
      if (dirty & /*templateArgs*/
      1)
        zonepicker_changes.label = /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id;
      if (dirty & /*templateArgs*/
      1)
        zonepicker_changes.zoneId = /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default;
      zonepicker.$set(zonepicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(zonepicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(zonepicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(zonepicker, detaching);
    }
  };
}
function create_if_block_2$5(ctx) {
  let booleanpicker;
  let current;
  function checked_handler(...args) {
    return (
      /*checked_handler*/
      ctx[8](
        /*templateArg*/
        ctx[16],
        ...args
      )
    );
  }
  booleanpicker = new BooleanPicker({
    props: {
      label: (
        /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id
      ),
      checked: (
        /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default
      )
    }
  });
  booleanpicker.$on("checked", checked_handler);
  return {
    c() {
      create_component(booleanpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(booleanpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(booleanpicker, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const booleanpicker_changes = {};
      if (dirty & /*templateArgs*/
      1)
        booleanpicker_changes.label = /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id;
      if (dirty & /*templateArgs*/
      1)
        booleanpicker_changes.checked = /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default;
      booleanpicker.$set(booleanpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(booleanpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(booleanpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(booleanpicker, detaching);
    }
  };
}
function create_if_block_1$9(ctx) {
  let numberpicker;
  let current;
  function value_handler_1(...args) {
    return (
      /*value_handler_1*/
      ctx[7](
        /*templateArg*/
        ctx[16],
        ...args
      )
    );
  }
  numberpicker = new NumberPicker({
    props: {
      label: (
        /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id
      ),
      placeholder: (
        /*templateArg*/
        ctx[16].default ?? /*templateArg*/
        ctx[16].id
      ),
      value: (
        /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default
      )
    }
  });
  numberpicker.$on("value", value_handler_1);
  return {
    c() {
      create_component(numberpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(numberpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(numberpicker, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const numberpicker_changes = {};
      if (dirty & /*templateArgs*/
      1)
        numberpicker_changes.label = /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id;
      if (dirty & /*templateArgs*/
      1)
        numberpicker_changes.placeholder = /*templateArg*/
        ctx[16].default ?? /*templateArg*/
        ctx[16].id;
      if (dirty & /*templateArgs*/
      1)
        numberpicker_changes.value = /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default;
      numberpicker.$set(numberpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(numberpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(numberpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(numberpicker, detaching);
    }
  };
}
function create_if_block$d(ctx) {
  let textpicker;
  let current;
  function value_handler(...args) {
    return (
      /*value_handler*/
      ctx[6](
        /*templateArg*/
        ctx[16],
        ...args
      )
    );
  }
  textpicker = new TextPicker({
    props: {
      label: (
        /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id
      ),
      placeholder: (
        /*templateArg*/
        ctx[16].default ?? /*templateArg*/
        ctx[16].id
      ),
      value: (
        /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default
      )
    }
  });
  textpicker.$on("value", value_handler);
  return {
    c() {
      create_component(textpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(textpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(textpicker, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const textpicker_changes = {};
      if (dirty & /*templateArgs*/
      1)
        textpicker_changes.label = /*templateArg*/
        ctx[16].label ?? /*templateArg*/
        ctx[16].id;
      if (dirty & /*templateArgs*/
      1)
        textpicker_changes.placeholder = /*templateArg*/
        ctx[16].default ?? /*templateArg*/
        ctx[16].id;
      if (dirty & /*templateArgs*/
      1)
        textpicker_changes.value = /*getValue*/
        ctx[1](
          /*templateArg*/
          ctx[16].id
        ) ?? /*templateArg*/
        ctx[16].default;
      textpicker.$set(textpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(textpicker, detaching);
    }
  };
}
function create_each_block$4(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [
    create_if_block$d,
    create_if_block_1$9,
    create_if_block_2$5,
    create_if_block_3$4,
    create_if_block_4$3,
    create_if_block_5$1,
    create_if_block_6$1,
    create_if_block_7
  ];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*templateArg*/
      ctx2[16].type === "string"
    )
      return 0;
    if (
      /*templateArg*/
      ctx2[16].type === "number"
    )
      return 1;
    if (
      /*templateArg*/
      ctx2[16].type === "boolean"
    )
      return 2;
    if (
      /*templateArg*/
      ctx2[16].type === "zoneId"
    )
      return 3;
    if (
      /*templateArg*/
      ctx2[16].type === "capabilityUri"
    )
      return 4;
    if (
      /*templateArg*/
      ctx2[16].type === "deviceId"
    )
      return 5;
    if (
      /*templateArg*/
      ctx2[16].type === "imageId"
    )
      return 6;
    if (
      /*templateArg*/
      ctx2[16].type === "iconId"
    )
      return 7;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
}
function create_fragment$p(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*templateArgs*/
    ctx[0]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$4(get_each_context$4(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*templateArgs, getValue, setValue*/
      7) {
        each_value = ensure_array_like(
          /*templateArgs*/
          ctx2[0]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$4(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$4(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance$p($$self, $$props, $$invalidate) {
  let templateArgs;
  let $templates;
  component_subscribe($$self, templates, ($$value) => $$invalidate(5, $templates = $$value));
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let settingsArgs;
  let template;
  function onSettings(_settings) {
    settingsArgs = _settings.arguments ?? [];
  }
  function getValue(argId) {
    var _a2;
    return (_a2 = settingsArgs.find((a3) => a3.argId === argId)) == null ? void 0 : _a2.value;
  }
  function setValue(argId, value) {
    const index2 = settingsArgs.findIndex((a3) => a3.argId === argId);
    if (index2 === -1) {
      settingsArgs = [...settingsArgs, { argId, value }];
    } else {
      const arg = { ...settingsArgs[index2], value };
      settingsArgs = [...settingsArgs];
      settingsArgs[index2] = arg;
    }
    $$invalidate(3, settings = { ...settings, arguments: settingsArgs });
    dispatch("settings", settings);
  }
  const value_handler = (templateArg, e2) => setValue(templateArg.id, e2.detail);
  const value_handler_1 = (templateArg, e2) => setValue(templateArg.id, e2.detail);
  const checked_handler = (templateArg, e2) => setValue(templateArg.id, e2.detail);
  const zoneId_handler = (templateArg, e2) => setValue(templateArg.id, e2.detail);
  const capabilityUri_handler = (templateArg, e2) => setValue(templateArg.id, e2.detail);
  const deviceId_handler = (templateArg, e2) => setValue(templateArg.id, e2.detail);
  const iconId_handler = (templateArg, e2) => setValue(templateArg.id, e2.detail);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(3, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    8) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*settings, $templates*/
    40) {
      $$invalidate(4, template = settings.templateId !== void 0 ? $templates[settings.templateId] : void 0);
    }
    if ($$self.$$.dirty & /*template*/
    16) {
      $$invalidate(0, templateArgs = (template == null ? void 0 : template.arguments) ?? []);
    }
  };
  return [
    templateArgs,
    getValue,
    setValue,
    settings,
    template,
    $templates,
    value_handler,
    value_handler_1,
    checked_handler,
    zoneId_handler,
    capabilityUri_handler,
    deviceId_handler,
    iconId_handler
  ];
}
class TemplateEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$p, create_fragment$p, safe_not_equal, { settings: 3 });
  }
}
function create_fragment$o(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      context: (
        /*templateContext*/
        ctx[1]
      ),
      settings: (
        /*rendered*/
        ctx[0]
      )
    }
  });
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const widget_changes = {};
      if (dirty & /*templateContext*/
      2)
        widget_changes.context = /*templateContext*/
        ctx2[1];
      if (dirty & /*rendered*/
      1)
        widget_changes.settings = /*rendered*/
        ctx2[0];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function instance$o($$self, $$props, $$invalidate) {
  let args;
  let $templates;
  component_subscribe($$self, templates, ($$value) => $$invalidate(6, $templates = $$value));
  let { context } = $$props;
  let { settings } = $$props;
  let template;
  let rendered;
  let templateContext;
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(2, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(3, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$templates, settings*/
    72) {
      $$invalidate(4, template = $templates[settings.templateId]);
    }
    if ($$self.$$.dirty & /*settings*/
    8) {
      $$invalidate(5, args = (settings.arguments ?? []).reduce(
        (result, current) => {
          result[current.argId] = current.value;
          return result;
        },
        {}
      ));
    }
    if ($$self.$$.dirty & /*template, args*/
    48) {
      $$invalidate(0, rendered = transform(template.root, args, "template"));
    }
    if ($$self.$$.dirty & /*context*/
    4) {
      $$invalidate(1, templateContext = { ...context, editable: false });
    }
  };
  return [rendered, templateContext, context, settings, template, args, $templates];
}
class TemplateWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$o, create_fragment$o, safe_not_equal, { context: 2, settings: 3 });
  }
}
const info$5 = {
  type: "template",
  label: "Template",
  icon: mdiPostageStamp,
  category: "logic",
  widget: TemplateWidget,
  editor: TemplateEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "template", version: 1 }),
  migration: (e2) => e2
};
function create_fragment$n(ctx) {
  let textarea;
  let t0;
  let label;
  let div;
  let textContent = `<span class="label-text">Size</span>`;
  let t2;
  let select;
  let option0;
  let textContent_1 = "Text";
  let option1;
  let textContent_2 = "1";
  let option2;
  let textContent_3 = "2";
  let option3;
  let textContent_4 = "3";
  let option4;
  let textContent_5 = "4";
  let option5;
  let textContent_6 = "5";
  let option6;
  let textContent_7 = "6";
  let mounted;
  let dispose;
  return {
    c() {
      textarea = element("textarea");
      t0 = space();
      label = element("label");
      div = element("div");
      div.innerHTML = textContent;
      t2 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = textContent_1;
      option1 = element("option");
      option1.textContent = textContent_2;
      option2 = element("option");
      option2.textContent = textContent_3;
      option3 = element("option");
      option3.textContent = textContent_4;
      option4 = element("option");
      option4.textContent = textContent_5;
      option5 = element("option");
      option5.textContent = textContent_6;
      option6 = element("option");
      option6.textContent = textContent_7;
      this.h();
    },
    l(nodes) {
      textarea = claim_element(nodes, "TEXTAREA", { placeholder: true, class: true });
      children(textarea).forEach(detach);
      t0 = claim_space(nodes);
      label = claim_element(nodes, "LABEL", { class: true });
      var label_nodes = children(label);
      div = claim_element(label_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-1ttwyxu")
        div.innerHTML = textContent;
      t2 = claim_space(label_nodes);
      select = claim_element(label_nodes, "SELECT", { class: true });
      var select_nodes = children(select);
      option0 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option0) !== "svelte-1af7iaf")
        option0.textContent = textContent_1;
      option1 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option1) !== "svelte-kxj05e")
        option1.textContent = textContent_2;
      option2 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option2) !== "svelte-n4befi")
        option2.textContent = textContent_3;
      option3 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option3) !== "svelte-v3wr5u")
        option3.textContent = textContent_4;
      option4 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option4) !== "svelte-1rma7da")
        option4.textContent = textContent_5;
      option5 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option5) !== "svelte-10ggk0a")
        option5.textContent = textContent_6;
      option6 = claim_element(select_nodes, "OPTION", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(option6) !== "svelte-2rjwem")
        option6.textContent = textContent_7;
      select_nodes.forEach(detach);
      label_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(textarea, "placeholder", "Text");
      attr(textarea, "class", "textarea w-full");
      attr(div, "class", "label");
      option0.__value = "0";
      set_input_value(option0, option0.__value);
      option1.__value = "1";
      set_input_value(option1, option1.__value);
      option2.__value = "2";
      set_input_value(option2, option2.__value);
      option3.__value = "3";
      set_input_value(option3, option3.__value);
      option4.__value = "4";
      set_input_value(option4, option4.__value);
      option5.__value = "5";
      set_input_value(option5, option5.__value);
      option6.__value = "6";
      set_input_value(option6, option6.__value);
      attr(select, "class", "select w-full");
      if (
        /*size*/
        ctx[0] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler*/
          ctx[3].call(select)
        ));
      attr(label, "class", "form-control w-full");
    },
    m(target, anchor) {
      insert_hydration(target, textarea, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, label, anchor);
      append_hydration(label, div);
      append_hydration(label, t2);
      append_hydration(label, select);
      append_hydration(select, option0);
      append_hydration(select, option1);
      append_hydration(select, option2);
      append_hydration(select, option3);
      append_hydration(select, option4);
      append_hydration(select, option5);
      append_hydration(select, option6);
      select_option(
        select,
        /*size*/
        ctx[0],
        true
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*select_change_handler*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*size*/
      1) {
        select_option(
          select,
          /*size*/
          ctx2[0]
        );
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(textarea);
        detach(t0);
        detach(label);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$n($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let text2 = "";
  let size;
  onMount(() => {
    $$invalidate(2, text2 = (settings == null ? void 0 : settings.text) ?? "");
    $$invalidate(0, size = (settings == null ? void 0 : settings.size) ?? 0);
  });
  function onText(value) {
    if (value === void 0 || value === settings.text) {
      return;
    }
    dispatch("settings", { ...settings, text: value });
  }
  function onSize(_size) {
    if (_size === settings.size) {
      return;
    }
    dispatch("settings", { ...settings, size: _size });
  }
  function select_change_handler() {
    size = select_value(this);
    $$invalidate(0, size);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(1, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*text*/
    4) {
      onText(text2);
    }
    if ($$self.$$.dirty & /*size*/
    1) {
      onSize(size);
    }
  };
  return [size, settings, text2, select_change_handler];
}
class TextEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$n, create_fragment$n, safe_not_equal, { settings: 1 });
  }
}
function create_else_block$a(ctx) {
  let div;
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(
        /*text*/
        ctx[1]
      );
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      t2 = claim_text(
        div_nodes,
        /*text*/
        ctx[1]
      );
      div_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_6(ctx) {
  let h6;
  let t2;
  return {
    c() {
      h6 = element("h6");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h6 = claim_element(nodes, "H6", { class: true });
      var h6_nodes = children(h6);
      t2 = claim_text(
        h6_nodes,
        /*text*/
        ctx[1]
      );
      h6_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h6, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h6, anchor);
      append_hydration(h6, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h6);
      }
    }
  };
}
function create_if_block_5(ctx) {
  let h5;
  let t2;
  return {
    c() {
      h5 = element("h5");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h5 = claim_element(nodes, "H5", { class: true });
      var h5_nodes = children(h5);
      t2 = claim_text(
        h5_nodes,
        /*text*/
        ctx[1]
      );
      h5_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h5, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h5, anchor);
      append_hydration(h5, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h5);
      }
    }
  };
}
function create_if_block_4$2(ctx) {
  let h4;
  let t2;
  return {
    c() {
      h4 = element("h4");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h4 = claim_element(nodes, "H4", { class: true });
      var h4_nodes = children(h4);
      t2 = claim_text(
        h4_nodes,
        /*text*/
        ctx[1]
      );
      h4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h4, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h4, anchor);
      append_hydration(h4, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h4);
      }
    }
  };
}
function create_if_block_3$3(ctx) {
  let h3;
  let t2;
  return {
    c() {
      h3 = element("h3");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h3 = claim_element(nodes, "H3", { class: true });
      var h3_nodes = children(h3);
      t2 = claim_text(
        h3_nodes,
        /*text*/
        ctx[1]
      );
      h3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h3, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h3, anchor);
      append_hydration(h3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h3);
      }
    }
  };
}
function create_if_block_2$4(ctx) {
  let h23;
  let t2;
  return {
    c() {
      h23 = element("h2");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h23 = claim_element(nodes, "H2", { class: true });
      var h2_nodes = children(h23);
      t2 = claim_text(
        h2_nodes,
        /*text*/
        ctx[1]
      );
      h2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h23, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h23, anchor);
      append_hydration(h23, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h23);
      }
    }
  };
}
function create_if_block_1$8(ctx) {
  let h12;
  let t2;
  return {
    c() {
      h12 = element("h1");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", { class: true });
      var h1_nodes = children(h12);
      t2 = claim_text(
        h1_nodes,
        /*text*/
        ctx[1]
      );
      h1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h12, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_if_block$c(ctx) {
  let span;
  let textContent = "Text not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-xcjyi8")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$m(ctx) {
  let div;
  function select_block_type(ctx2, dirty) {
    if (
      /*text*/
      ctx2[1] === void 0
    )
      return create_if_block$c;
    if (
      /*size*/
      ctx2[0] == 1
    )
      return create_if_block_1$8;
    if (
      /*size*/
      ctx2[0] == 2
    )
      return create_if_block_2$4;
    if (
      /*size*/
      ctx2[0] == 3
    )
      return create_if_block_3$3;
    if (
      /*size*/
      ctx2[0] == 4
    )
      return create_if_block_4$2;
    if (
      /*size*/
      ctx2[0] == 5
    )
      return create_if_block_5;
    if (
      /*size*/
      ctx2[0] == 6
    )
      return create_if_block_6;
    return create_else_block$a;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "align-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_block.m(div, null);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_block.d();
    }
  };
}
function instance$m($$self, $$props, $$invalidate) {
  let text2;
  let size;
  let { context } = $$props;
  let { settings } = $$props;
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(2, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(3, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    8) {
      $$invalidate(1, text2 = settings == null ? void 0 : settings.text);
    }
    if ($$self.$$.dirty & /*settings*/
    8) {
      $$invalidate(0, size = settings == null ? void 0 : settings.size);
    }
  };
  return [size, text2, context, settings];
}
class TextWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$m, create_fragment$m, safe_not_equal, { context: 2, settings: 3 });
  }
}
const info$4 = {
  type: "text",
  label: "Text",
  icon: mdiTextBoxEdit,
  category: "component",
  widget: TextWidget,
  editor: TextEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "text", version: 1 }),
  migration: (e2) => e2,
  deprecated: true
};
function create_fragment$l(ctx) {
  var _a2;
  let entitypicker;
  let updating_uri;
  let t0;
  let textpicker;
  let updating_value;
  let t1;
  let iconpicker;
  let updating_iconId;
  let current;
  function entitypicker_uri_binding(value) {
    ctx[5](value);
  }
  let entitypicker_props = {
    variableFilter,
    capabilityFilter,
    label: "Item"
  };
  if (
    /*uri*/
    ctx[0] !== void 0
  ) {
    entitypicker_props.uri = /*uri*/
    ctx[0];
  }
  entitypicker = new EntityPicker({ props: entitypicker_props });
  binding_callbacks.push(() => bind(entitypicker, "uri", entitypicker_uri_binding));
  entitypicker.$on(
    "item",
    /*item_handler*/
    ctx[6]
  );
  function textpicker_value_binding(value) {
    ctx[7](value);
  }
  let textpicker_props = {
    placeholder: (
      /*item*/
      ((_a2 = ctx[3]) == null ? void 0 : _a2.title) ?? "Label"
    ),
    label: "Label"
  };
  if (
    /*label*/
    ctx[1] !== void 0
  ) {
    textpicker_props.value = /*label*/
    ctx[1];
  }
  textpicker = new TextPicker({ props: textpicker_props });
  binding_callbacks.push(() => bind(textpicker, "value", textpicker_value_binding));
  function iconpicker_iconId_binding(value) {
    ctx[8](value);
  }
  let iconpicker_props = {};
  if (
    /*iconId*/
    ctx[2] !== void 0
  ) {
    iconpicker_props.iconId = /*iconId*/
    ctx[2];
  }
  iconpicker = new IconPicker({ props: iconpicker_props });
  binding_callbacks.push(() => bind(iconpicker, "iconId", iconpicker_iconId_binding));
  return {
    c() {
      create_component(entitypicker.$$.fragment);
      t0 = space();
      create_component(textpicker.$$.fragment);
      t1 = space();
      create_component(iconpicker.$$.fragment);
    },
    l(nodes) {
      claim_component(entitypicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(textpicker.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(iconpicker.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(entitypicker, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(textpicker, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(iconpicker, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      var _a3;
      const entitypicker_changes = {};
      if (!updating_uri && dirty & /*uri*/
      1) {
        updating_uri = true;
        entitypicker_changes.uri = /*uri*/
        ctx2[0];
        add_flush_callback(() => updating_uri = false);
      }
      entitypicker.$set(entitypicker_changes);
      const textpicker_changes = {};
      if (dirty & /*item*/
      8)
        textpicker_changes.placeholder = /*item*/
        ((_a3 = ctx2[3]) == null ? void 0 : _a3.title) ?? "Label";
      if (!updating_value && dirty & /*label*/
      2) {
        updating_value = true;
        textpicker_changes.value = /*label*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      textpicker.$set(textpicker_changes);
      const iconpicker_changes = {};
      if (!updating_iconId && dirty & /*iconId*/
      4) {
        updating_iconId = true;
        iconpicker_changes.iconId = /*iconId*/
        ctx2[2];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker.$set(iconpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(entitypicker.$$.fragment, local);
      transition_in(textpicker.$$.fragment, local);
      transition_in(iconpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(entitypicker.$$.fragment, local);
      transition_out(textpicker.$$.fragment, local);
      transition_out(iconpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(entitypicker, detaching);
      destroy_component(textpicker, detaching);
      destroy_component(iconpicker, detaching);
    }
  };
}
function variableFilter(variable) {
  return variable.type === "boolean";
}
function capabilityFilter(device, capability) {
  return capability.type === "boolean" && capability.getable === true;
}
function instance$l($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let uri;
  let label;
  let iconId;
  let item;
  function onSettings(s3) {
    $$invalidate(0, uri = s3 == null ? void 0 : s3.uri);
    $$invalidate(1, label = s3 == null ? void 0 : s3.label);
    $$invalidate(2, iconId = s3 == null ? void 0 : s3.iconId);
  }
  function onChange(_uri, _label, _iconId) {
    if (_uri !== settings.uri || _label !== settings.label || _iconId !== settings.iconId) {
      $$invalidate(4, settings = {
        ...settings,
        uri: _uri,
        label: _label,
        iconId: _iconId
      });
      dispatch("settings", settings);
    }
  }
  function entitypicker_uri_binding(value) {
    uri = value;
    $$invalidate(0, uri);
  }
  const item_handler = (e2) => $$invalidate(3, item = e2.detail);
  function textpicker_value_binding(value) {
    label = value;
    $$invalidate(1, label);
  }
  function iconpicker_iconId_binding(value) {
    iconId = value;
    $$invalidate(2, iconId);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(4, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    16) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*uri, label, iconId*/
    7) {
      onChange(uri, label, iconId);
    }
  };
  return [
    uri,
    label,
    iconId,
    item,
    settings,
    entitypicker_uri_binding,
    item_handler,
    textpicker_value_binding,
    iconpicker_iconId_binding
  ];
}
class ToggleEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$l, create_fragment$l, safe_not_equal, { settings: 4 });
  }
}
function create_if_block_1$7(ctx) {
  let await_block_anchor;
  let promise;
  let info2 = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    value: 23
  };
  handle_promise(promise = /*$baseUrl*/
  ctx[7], info2);
  return {
    c() {
      await_block_anchor = empty();
      info2.block.c();
    },
    l(nodes) {
      await_block_anchor = empty();
      info2.block.l(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, await_block_anchor, anchor);
      info2.block.m(target, info2.anchor = anchor);
      info2.mount = () => await_block_anchor.parentNode;
      info2.anchor = await_block_anchor;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info2.ctx = ctx;
      if (dirty & /*$baseUrl*/
      128 && promise !== (promise = /*$baseUrl*/
      ctx[7]) && handle_promise(promise, info2))
        ;
      else {
        update_await_block_branch(info2, ctx, dirty);
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info2.block.d(detaching);
      info2.token = null;
      info2 = null;
    }
  };
}
function create_if_block$b(ctx) {
  let span;
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId ?? /*iconId*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      span = element("span");
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      claim_component(icon.$$.fragment, span_nodes);
      span_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      mount_component(icon, span, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings, iconId*/
      5)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId ?? /*iconId*/
          ctx2[2]
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(icon);
    }
  };
}
function create_catch_block(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block(ctx) {
  let span;
  let img;
  let img_src_value;
  return {
    c() {
      span = element("span");
      img = element("img");
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      img = claim_element(span_nodes, "IMG", { class: true, src: true, alt: true });
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(img, "class", "w-8 h-8 m-1 dark:invert");
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[23] + /*iconUrl*/
      ctx[3]))
        attr(img, "src", img_src_value);
      attr(
        img,
        "alt",
        /*iconId*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, img);
    },
    p(ctx2, dirty) {
      if (dirty & /*$baseUrl, iconUrl*/
      136 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[23] + /*iconUrl*/
      ctx2[3])) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*iconId*/
      4) {
        attr(
          img,
          "alt",
          /*iconId*/
          ctx2[2]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_pending_block(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_fragment$k(ctx) {
  let label_1;
  let current_block_type_index;
  let if_block;
  let t0;
  let span;
  let t1_value = (
    /*settings*/
    (ctx[0].label ?? /*label*/
    ctx[4] ?? /*uri*/
    ctx[1] ?? "Not configured") + ""
  );
  let t1;
  let t2;
  let input;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block$b, create_if_block_1$7];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].iconId !== void 0 || /*iconId*/
      ctx2[2] !== void 0
    )
      return 0;
    if (
      /*iconUrl*/
      ctx2[3] !== void 0
    )
      return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      label_1 = element("label");
      if (if_block)
        if_block.c();
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      input = element("input");
      this.h();
    },
    l(nodes) {
      label_1 = claim_element(nodes, "LABEL", { class: true });
      var label_1_nodes = children(label_1);
      if (if_block)
        if_block.l(label_1_nodes);
      t0 = claim_space(label_1_nodes);
      span = claim_element(label_1_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      t2 = claim_space(label_1_nodes);
      input = claim_element(label_1_nodes, "INPUT", { type: true, class: true });
      label_1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "flex-1 overflow-ellipsis");
      attr(input, "type", "checkbox");
      attr(input, "class", "toggle toggle-primary");
      input.disabled = /*disabled*/
      ctx[6];
      input.checked = /*checked*/
      ctx[5];
      attr(label_1, "class", "label cursor-pointer flex flex-row items-center p-0");
    },
    m(target, anchor) {
      insert_hydration(target, label_1, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(label_1, null);
      }
      append_hydration(label_1, t0);
      append_hydration(label_1, span);
      append_hydration(span, t1);
      append_hydration(label_1, t2);
      append_hydration(label_1, input);
      current = true;
      if (!mounted) {
        dispose = listen(
          input,
          "click",
          /*click_handler*/
          ctx[13]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(label_1, t0);
        } else {
          if_block = null;
        }
      }
      if ((!current || dirty & /*settings, label, uri*/
      19) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].label ?? /*label*/
      ctx2[4] ?? /*uri*/
      ctx2[1] ?? "Not configured") + ""))
        set_data(t1, t1_value);
      if (!current || dirty & /*disabled*/
      64) {
        input.disabled = /*disabled*/
        ctx2[6];
      }
      if (!current || dirty & /*checked*/
      32) {
        input.checked = /*checked*/
        ctx2[5];
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label_1);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$k($$self, $$props, $$invalidate) {
  let disabled;
  let $homey;
  let $devices;
  let $variables;
  let $baseUrl;
  component_subscribe($$self, homey, ($$value) => $$invalidate(17, $homey = $$value));
  component_subscribe($$self, devices, ($$value) => $$invalidate(11, $devices = $$value));
  component_subscribe($$self, variables, ($$value) => $$invalidate(12, $variables = $$value));
  component_subscribe($$self, baseUrl, ($$value) => $$invalidate(7, $baseUrl = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  let uri;
  let iconId;
  let iconUrl;
  let wrapper;
  let wrapperUri;
  let label;
  let checked = false;
  let readonly = false;
  let type;
  function onSettings(_settings) {
    if (_settings.uri !== uri) {
      $$invalidate(1, uri = _settings.uri);
    }
  }
  function onUri(_uri, _variables, _devices) {
    if (_uri !== void 0 && _uri !== wrapperUri) {
      const segments = _uri.split(":");
      if (wrapper !== void 0 && wrapper) {
        wrapper.destroy();
        wrapper = void 0;
        wrapperUri = void 0;
      }
      if (segments[1] === "variable") {
        getVariable(segments[2], _variables);
      } else if (segments[1] === "device" && segments.length === 4) {
        getCapability(segments[2], segments[3], _devices);
      }
    }
  }
  function getVariable(variableId, _variables) {
    const variable = _variables[variableId];
    if (variable === void 0)
      return;
    wrapper = new VariableWrapper(variable, $homey.logic);
    wrapperUri = variable.uri;
    $$invalidate(4, label = variable.name);
    $$invalidate(2, iconId = "variable");
    $$invalidate(3, iconUrl = void 0);
    $$invalidate(10, readonly = false);
    type = variable.type;
    onValue(wrapper.value);
    wrapper.onValue(onValue);
  }
  function getCapability(deviceId, capabilityId, _devices) {
    var _a2;
    const device = _devices[deviceId];
    if (device === void 0)
      return;
    const capability = device.capabilitiesObj[capabilityId];
    if (capability === void 0)
      return;
    wrapper = new CapabilityWrapper(device, capabilityId);
    wrapperUri = device.uri + ":" + capabilityId;
    $$invalidate(4, label = capability.title);
    $$invalidate(3, iconUrl = (_a2 = capability.iconObj) == null ? void 0 : _a2.url);
    $$invalidate(2, iconId = void 0);
    $$invalidate(10, readonly = !capability.setable);
    type = capability.type;
    onValue(wrapper.value);
    wrapper.onValue(onValue);
  }
  function onValue(_value) {
    if (type === "boolean") {
      $$invalidate(5, checked = _value);
    } else if (type === "number") {
      $$invalidate(5, checked = !!_value);
    } else {
      $$invalidate(5, checked = false);
      $$invalidate(10, readonly = true);
    }
  }
  async function onChecked(_value) {
    if (wrapper !== void 0 && wrapper.value !== _value) {
      await wrapper.setValue(_value);
    }
  }
  const click_handler = (e2) => onChecked(!checked);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(9, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*readonly, context*/
    1536) {
      $$invalidate(6, disabled = readonly || context.readonly || context.editable);
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*uri, $variables, $devices*/
    6146) {
      onUri(uri, $variables, $devices);
    }
  };
  return [
    settings,
    uri,
    iconId,
    iconUrl,
    label,
    checked,
    disabled,
    $baseUrl,
    onChecked,
    context,
    readonly,
    $devices,
    $variables,
    click_handler
  ];
}
class ToggleWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$k, create_fragment$k, safe_not_equal, { settings: 0, context: 9 });
  }
}
function create$1() {
  return {
    id: v4(),
    type: "toggle",
    version: 1
  };
}
function migrate$1(settings) {
  while (settings.version !== 1) {
    settings = migrateOnce$1(settings);
  }
  return settings;
}
function migrateOnce$1(settings) {
  switch (settings.version) {
    case 1:
      return settings;
  }
}
const info$3 = {
  type: "toggle",
  label: "Toggle",
  icon: mdiToggleSwitch,
  category: "component",
  widget: ToggleWidget,
  editor: ToggleEditor,
  scopes: [
    { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] }
  ],
  create: create$1,
  migration: migrate$1
};
function create_fragment$j(ctx) {
  let div;
  let textContent = "Unknown widget type";
  return {
    c() {
      div = element("div");
      div.textContent = textContent;
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-17e4zkc")
        div.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
class UnknownEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$j, safe_not_equal, {});
  }
}
function create_fragment$i(ctx) {
  let div;
  let t0;
  let t1_value = JSON.stringify(
    /*settings*/
    ctx[0]
  ) + "";
  let t1;
  return {
    c() {
      div = element("div");
      t0 = text("Unknown widget: ");
      t1 = text(t1_value);
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      t0 = claim_text(div_nodes, "Unknown widget: ");
      t1 = claim_text(div_nodes, t1_value);
      div_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, t0);
      append_hydration(div, t1);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*settings*/
      1 && t1_value !== (t1_value = JSON.stringify(
        /*settings*/
        ctx2[0]
      ) + ""))
        set_data(t1, t1_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function instance$j($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  let { context } = $$props;
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(1, context = $$props2.context);
  };
  return [settings, context];
}
class UnknownWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$j, create_fragment$i, safe_not_equal, { settings: 0, context: 1 });
  }
}
const info$2 = {
  type: "unknown",
  label: "Unknown",
  icon: mdiHeadQuestion,
  widget: UnknownWidget,
  editor: UnknownEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "unknown", version: 1 }),
  migration: (e2) => e2
};
function get_each_context_1$1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[44] = list[i2];
  return child_ctx;
}
function get_each_context$3(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[44] = list[i2];
  return child_ctx;
}
function create_if_block$a(ctx) {
  let input;
  let updating_value;
  let t0;
  let div;
  let iconpicker;
  let updating_iconId;
  let t1;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  function input_value_binding(value) {
    ctx[22](value);
  }
  let input_props = {
    name: "title",
    placeholder: (
      /*variable*/
      ctx[15].name
    ),
    class: "mt-2"
  };
  if (
    /*title*/
    ctx[1] !== void 0
  ) {
    input_props.value = /*title*/
    ctx[1];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  function iconpicker_iconId_binding(value) {
    ctx[23](value);
  }
  let iconpicker_props = { placeholder: "Leading icon" };
  if (
    /*iconId*/
    ctx[2] !== void 0
  ) {
    iconpicker_props.iconId = /*iconId*/
    ctx[2];
  }
  iconpicker = new IconPicker({ props: iconpicker_props });
  binding_callbacks.push(() => bind(iconpicker, "iconId", iconpicker_iconId_binding));
  const if_block_creators = [create_if_block_1$6, create_if_block_2$3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*variable*/
      ctx2[15].type === "boolean"
    )
      return 0;
    if (
      /*variable*/
      ctx2[15].type === "number"
    )
      return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      create_component(input.$$.fragment);
      t0 = space();
      div = element("div");
      create_component(iconpicker.$$.fragment);
      t1 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      claim_component(input.$$.fragment, nodes);
      t0 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(iconpicker.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      t1 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "class", "mt-1");
    },
    m(target, anchor) {
      mount_component(input, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div, anchor);
      mount_component(iconpicker, div, null);
      insert_hydration(target, t1, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (dirty[0] & /*variable*/
      32768)
        input_changes.placeholder = /*variable*/
        ctx2[15].name;
      if (!updating_value && dirty[0] & /*title*/
      2) {
        updating_value = true;
        input_changes.value = /*title*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      const iconpicker_changes = {};
      if (!updating_iconId && dirty[0] & /*iconId*/
      4) {
        updating_iconId = true;
        iconpicker_changes.iconId = /*iconId*/
        ctx2[2];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker.$set(iconpicker_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      transition_in(iconpicker.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      transition_out(iconpicker.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
        detach(t1);
        detach(if_block_anchor);
      }
      destroy_component(input, detaching);
      destroy_component(iconpicker);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
}
function create_if_block_2$3(ctx) {
  let div0;
  let select;
  let updating_value;
  let t0;
  let div1;
  let inputnumber0;
  let updating_value_1;
  let t1;
  let div2;
  let inputnumber1;
  let updating_value_2;
  let t2;
  let div3;
  let inputnumber2;
  let updating_value_3;
  let t3;
  let div4;
  let input;
  let updating_value_4;
  let current;
  function select_value_binding_1(value) {
    ctx[31](value);
  }
  let select_props = {
    placeholder: "Variant",
    name: "variant",
    $$slots: { options: [create_options_slot_1] },
    $$scope: { ctx }
  };
  if (
    /*numberVariant*/
    ctx[10] !== void 0
  ) {
    select_props.value = /*numberVariant*/
    ctx[10];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding_1));
  function inputnumber0_value_binding(value) {
    ctx[32](value);
  }
  let inputnumber0_props = { name: "min", placeholder: "Min" };
  if (
    /*numberMin*/
    ctx[11] !== void 0
  ) {
    inputnumber0_props.value = /*numberMin*/
    ctx[11];
  }
  inputnumber0 = new InputNumber({ props: inputnumber0_props });
  binding_callbacks.push(() => bind(inputnumber0, "value", inputnumber0_value_binding));
  function inputnumber1_value_binding(value) {
    ctx[33](value);
  }
  let inputnumber1_props = { name: "max", placeholder: "Max" };
  if (
    /*numberMax*/
    ctx[12] !== void 0
  ) {
    inputnumber1_props.value = /*numberMax*/
    ctx[12];
  }
  inputnumber1 = new InputNumber({ props: inputnumber1_props });
  binding_callbacks.push(() => bind(inputnumber1, "value", inputnumber1_value_binding));
  function inputnumber2_value_binding(value) {
    ctx[34](value);
  }
  let inputnumber2_props = { name: "step", placeholder: "Step" };
  if (
    /*numberStep*/
    ctx[13] !== void 0
  ) {
    inputnumber2_props.value = /*numberStep*/
    ctx[13];
  }
  inputnumber2 = new InputNumber({ props: inputnumber2_props });
  binding_callbacks.push(() => bind(inputnumber2, "value", inputnumber2_value_binding));
  function input_value_binding_1(value) {
    ctx[35](value);
  }
  let input_props = { name: "unit", placeholder: "Unit" };
  if (
    /*numberUnit*/
    ctx[14] !== void 0
  ) {
    input_props.value = /*numberUnit*/
    ctx[14];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding_1));
  return {
    c() {
      div0 = element("div");
      create_component(select.$$.fragment);
      t0 = space();
      div1 = element("div");
      create_component(inputnumber0.$$.fragment);
      t1 = space();
      div2 = element("div");
      create_component(inputnumber1.$$.fragment);
      t2 = space();
      div3 = element("div");
      create_component(inputnumber2.$$.fragment);
      t3 = space();
      div4 = element("div");
      create_component(input.$$.fragment);
      this.h();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(select.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      claim_component(inputnumber0.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      claim_component(inputnumber1.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t2 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      claim_component(inputnumber2.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      t3 = claim_space(nodes);
      div4 = claim_element(nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      claim_component(input.$$.fragment, div4_nodes);
      div4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mt-1");
      attr(div1, "class", "mt-1");
      attr(div2, "class", "mt-1");
      attr(div3, "class", "mt-1");
      attr(div4, "class", "mt-1");
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(select, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div1, anchor);
      mount_component(inputnumber0, div1, null);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(inputnumber1, div2, null);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, div3, anchor);
      mount_component(inputnumber2, div3, null);
      insert_hydration(target, t3, anchor);
      insert_hydration(target, div4, anchor);
      mount_component(input, div4, null);
      current = true;
    },
    p(ctx2, dirty) {
      const select_changes = {};
      if (dirty[1] & /*$$scope*/
      262144) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty[0] & /*numberVariant*/
      1024) {
        updating_value = true;
        select_changes.value = /*numberVariant*/
        ctx2[10];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
      const inputnumber0_changes = {};
      if (!updating_value_1 && dirty[0] & /*numberMin*/
      2048) {
        updating_value_1 = true;
        inputnumber0_changes.value = /*numberMin*/
        ctx2[11];
        add_flush_callback(() => updating_value_1 = false);
      }
      inputnumber0.$set(inputnumber0_changes);
      const inputnumber1_changes = {};
      if (!updating_value_2 && dirty[0] & /*numberMax*/
      4096) {
        updating_value_2 = true;
        inputnumber1_changes.value = /*numberMax*/
        ctx2[12];
        add_flush_callback(() => updating_value_2 = false);
      }
      inputnumber1.$set(inputnumber1_changes);
      const inputnumber2_changes = {};
      if (!updating_value_3 && dirty[0] & /*numberStep*/
      8192) {
        updating_value_3 = true;
        inputnumber2_changes.value = /*numberStep*/
        ctx2[13];
        add_flush_callback(() => updating_value_3 = false);
      }
      inputnumber2.$set(inputnumber2_changes);
      const input_changes = {};
      if (!updating_value_4 && dirty[0] & /*numberUnit*/
      16384) {
        updating_value_4 = true;
        input_changes.value = /*numberUnit*/
        ctx2[14];
        add_flush_callback(() => updating_value_4 = false);
      }
      input.$set(input_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      transition_in(inputnumber0.$$.fragment, local);
      transition_in(inputnumber1.$$.fragment, local);
      transition_in(inputnumber2.$$.fragment, local);
      transition_in(input.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      transition_out(inputnumber0.$$.fragment, local);
      transition_out(inputnumber1.$$.fragment, local);
      transition_out(inputnumber2.$$.fragment, local);
      transition_out(input.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(div1);
        detach(t1);
        detach(div2);
        detach(t2);
        detach(div3);
        detach(t3);
        detach(div4);
      }
      destroy_component(select);
      destroy_component(inputnumber0);
      destroy_component(inputnumber1);
      destroy_component(inputnumber2);
      destroy_component(input);
    }
  };
}
function create_if_block_1$6(ctx) {
  let div0;
  let select;
  let updating_value;
  let t0;
  let div1;
  let iconpicker0;
  let updating_iconId;
  let t1;
  let div2;
  let iconpicker1;
  let updating_iconId_1;
  let t2;
  let div3;
  let iconpicker2;
  let updating_iconId_2;
  let t3;
  let div4;
  let colorpicker0;
  let updating_value_1;
  let t4;
  let span0;
  let textContent = "Default color";
  let t6;
  let div5;
  let colorpicker1;
  let updating_value_2;
  let t7;
  let span1;
  let textContent_1 = "True color";
  let t9;
  let div6;
  let colorpicker2;
  let updating_value_3;
  let t10;
  let span2;
  let textContent_2 = "False color";
  let current;
  function select_value_binding(value) {
    ctx[24](value);
  }
  let select_props = {
    placeholder: "Variant",
    name: "variant",
    $$slots: { options: [create_options_slot] },
    $$scope: { ctx }
  };
  if (
    /*booleanVariant*/
    ctx[3] !== void 0
  ) {
    select_props.value = /*booleanVariant*/
    ctx[3];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  function iconpicker0_iconId_binding(value) {
    ctx[25](value);
  }
  let iconpicker0_props = { placeholder: "Default icon" };
  if (
    /*booleanIconId*/
    ctx[4] !== void 0
  ) {
    iconpicker0_props.iconId = /*booleanIconId*/
    ctx[4];
  }
  iconpicker0 = new IconPicker({ props: iconpicker0_props });
  binding_callbacks.push(() => bind(iconpicker0, "iconId", iconpicker0_iconId_binding));
  function iconpicker1_iconId_binding(value) {
    ctx[26](value);
  }
  let iconpicker1_props = { placeholder: "True icon" };
  if (
    /*booleanIconTrueId*/
    ctx[5] !== void 0
  ) {
    iconpicker1_props.iconId = /*booleanIconTrueId*/
    ctx[5];
  }
  iconpicker1 = new IconPicker({ props: iconpicker1_props });
  binding_callbacks.push(() => bind(iconpicker1, "iconId", iconpicker1_iconId_binding));
  function iconpicker2_iconId_binding(value) {
    ctx[27](value);
  }
  let iconpicker2_props = { placeholder: "False icon" };
  if (
    /*booleanIconFalseId*/
    ctx[6] !== void 0
  ) {
    iconpicker2_props.iconId = /*booleanIconFalseId*/
    ctx[6];
  }
  iconpicker2 = new IconPicker({ props: iconpicker2_props });
  binding_callbacks.push(() => bind(iconpicker2, "iconId", iconpicker2_iconId_binding));
  function colorpicker0_value_binding(value) {
    ctx[28](value);
  }
  let colorpicker0_props = { mode: "rgba" };
  if (
    /*booleanColor*/
    ctx[7] !== void 0
  ) {
    colorpicker0_props.value = /*booleanColor*/
    ctx[7];
  }
  colorpicker0 = new ColorPicker({ props: colorpicker0_props });
  binding_callbacks.push(() => bind(colorpicker0, "value", colorpicker0_value_binding));
  function colorpicker1_value_binding(value) {
    ctx[29](value);
  }
  let colorpicker1_props = { mode: "rgba" };
  if (
    /*booleanColorTrue*/
    ctx[8] !== void 0
  ) {
    colorpicker1_props.value = /*booleanColorTrue*/
    ctx[8];
  }
  colorpicker1 = new ColorPicker({ props: colorpicker1_props });
  binding_callbacks.push(() => bind(colorpicker1, "value", colorpicker1_value_binding));
  function colorpicker2_value_binding(value) {
    ctx[30](value);
  }
  let colorpicker2_props = { mode: "rgba" };
  if (
    /*booleanColorFalse*/
    ctx[9] !== void 0
  ) {
    colorpicker2_props.value = /*booleanColorFalse*/
    ctx[9];
  }
  colorpicker2 = new ColorPicker({ props: colorpicker2_props });
  binding_callbacks.push(() => bind(colorpicker2, "value", colorpicker2_value_binding));
  return {
    c() {
      div0 = element("div");
      create_component(select.$$.fragment);
      t0 = space();
      div1 = element("div");
      create_component(iconpicker0.$$.fragment);
      t1 = space();
      div2 = element("div");
      create_component(iconpicker1.$$.fragment);
      t2 = space();
      div3 = element("div");
      create_component(iconpicker2.$$.fragment);
      t3 = space();
      div4 = element("div");
      create_component(colorpicker0.$$.fragment);
      t4 = space();
      span0 = element("span");
      span0.textContent = textContent;
      t6 = space();
      div5 = element("div");
      create_component(colorpicker1.$$.fragment);
      t7 = space();
      span1 = element("span");
      span1.textContent = textContent_1;
      t9 = space();
      div6 = element("div");
      create_component(colorpicker2.$$.fragment);
      t10 = space();
      span2 = element("span");
      span2.textContent = textContent_2;
      this.h();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(select.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      claim_component(iconpicker0.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      claim_component(iconpicker1.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t2 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      claim_component(iconpicker2.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      t3 = claim_space(nodes);
      div4 = claim_element(nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      claim_component(colorpicker0.$$.fragment, div4_nodes);
      t4 = claim_space(div4_nodes);
      span0 = claim_element(div4_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span0) !== "svelte-ggqmuo")
        span0.textContent = textContent;
      div4_nodes.forEach(detach);
      t6 = claim_space(nodes);
      div5 = claim_element(nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      claim_component(colorpicker1.$$.fragment, div5_nodes);
      t7 = claim_space(div5_nodes);
      span1 = claim_element(div5_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span1) !== "svelte-1pdc09d")
        span1.textContent = textContent_1;
      div5_nodes.forEach(detach);
      t9 = claim_space(nodes);
      div6 = claim_element(nodes, "DIV", { class: true });
      var div6_nodes = children(div6);
      claim_component(colorpicker2.$$.fragment, div6_nodes);
      t10 = claim_space(div6_nodes);
      span2 = claim_element(div6_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span2) !== "svelte-14kosby")
        span2.textContent = textContent_2;
      div6_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mt-1");
      attr(div1, "class", "mt-1");
      attr(div2, "class", "mt-1");
      attr(div3, "class", "mt-1");
      attr(div4, "class", "mt-1");
      attr(div5, "class", "mt-1");
      attr(div6, "class", "mt-1");
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(select, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div1, anchor);
      mount_component(iconpicker0, div1, null);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(iconpicker1, div2, null);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, div3, anchor);
      mount_component(iconpicker2, div3, null);
      insert_hydration(target, t3, anchor);
      insert_hydration(target, div4, anchor);
      mount_component(colorpicker0, div4, null);
      append_hydration(div4, t4);
      append_hydration(div4, span0);
      insert_hydration(target, t6, anchor);
      insert_hydration(target, div5, anchor);
      mount_component(colorpicker1, div5, null);
      append_hydration(div5, t7);
      append_hydration(div5, span1);
      insert_hydration(target, t9, anchor);
      insert_hydration(target, div6, anchor);
      mount_component(colorpicker2, div6, null);
      append_hydration(div6, t10);
      append_hydration(div6, span2);
      current = true;
    },
    p(ctx2, dirty) {
      const select_changes = {};
      if (dirty[1] & /*$$scope*/
      262144) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty[0] & /*booleanVariant*/
      8) {
        updating_value = true;
        select_changes.value = /*booleanVariant*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
      const iconpicker0_changes = {};
      if (!updating_iconId && dirty[0] & /*booleanIconId*/
      16) {
        updating_iconId = true;
        iconpicker0_changes.iconId = /*booleanIconId*/
        ctx2[4];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker0.$set(iconpicker0_changes);
      const iconpicker1_changes = {};
      if (!updating_iconId_1 && dirty[0] & /*booleanIconTrueId*/
      32) {
        updating_iconId_1 = true;
        iconpicker1_changes.iconId = /*booleanIconTrueId*/
        ctx2[5];
        add_flush_callback(() => updating_iconId_1 = false);
      }
      iconpicker1.$set(iconpicker1_changes);
      const iconpicker2_changes = {};
      if (!updating_iconId_2 && dirty[0] & /*booleanIconFalseId*/
      64) {
        updating_iconId_2 = true;
        iconpicker2_changes.iconId = /*booleanIconFalseId*/
        ctx2[6];
        add_flush_callback(() => updating_iconId_2 = false);
      }
      iconpicker2.$set(iconpicker2_changes);
      const colorpicker0_changes = {};
      if (!updating_value_1 && dirty[0] & /*booleanColor*/
      128) {
        updating_value_1 = true;
        colorpicker0_changes.value = /*booleanColor*/
        ctx2[7];
        add_flush_callback(() => updating_value_1 = false);
      }
      colorpicker0.$set(colorpicker0_changes);
      const colorpicker1_changes = {};
      if (!updating_value_2 && dirty[0] & /*booleanColorTrue*/
      256) {
        updating_value_2 = true;
        colorpicker1_changes.value = /*booleanColorTrue*/
        ctx2[8];
        add_flush_callback(() => updating_value_2 = false);
      }
      colorpicker1.$set(colorpicker1_changes);
      const colorpicker2_changes = {};
      if (!updating_value_3 && dirty[0] & /*booleanColorFalse*/
      512) {
        updating_value_3 = true;
        colorpicker2_changes.value = /*booleanColorFalse*/
        ctx2[9];
        add_flush_callback(() => updating_value_3 = false);
      }
      colorpicker2.$set(colorpicker2_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      transition_in(iconpicker0.$$.fragment, local);
      transition_in(iconpicker1.$$.fragment, local);
      transition_in(iconpicker2.$$.fragment, local);
      transition_in(colorpicker0.$$.fragment, local);
      transition_in(colorpicker1.$$.fragment, local);
      transition_in(colorpicker2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      transition_out(iconpicker0.$$.fragment, local);
      transition_out(iconpicker1.$$.fragment, local);
      transition_out(iconpicker2.$$.fragment, local);
      transition_out(colorpicker0.$$.fragment, local);
      transition_out(colorpicker1.$$.fragment, local);
      transition_out(colorpicker2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(div1);
        detach(t1);
        detach(div2);
        detach(t2);
        detach(div3);
        detach(t3);
        detach(div4);
        detach(t6);
        detach(div5);
        detach(t9);
        detach(div6);
      }
      destroy_component(select);
      destroy_component(iconpicker0);
      destroy_component(iconpicker1);
      destroy_component(iconpicker2);
      destroy_component(colorpicker0);
      destroy_component(colorpicker1);
      destroy_component(colorpicker2);
    }
  };
}
function create_each_block_1$1(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[44]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot_1$2(ctx) {
  let each_1_anchor;
  let current;
  let each_value_1 = ensure_array_like(
    /*numberVariants*/
    ctx[17]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*numberVariants*/
      131072) {
        each_value_1 = ensure_array_like(
          /*numberVariants*/
          ctx2[17]
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$1(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_1$1(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot_1(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      class: "max-h-96 overflow-auto",
      $$slots: { default: [create_default_slot_1$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty[1] & /*$$scope*/
      262144) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_each_block$3(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[44]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot$2(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*booleanVariants*/
    ctx[16]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$3(get_each_context$3(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*booleanVariants*/
      65536) {
        each_value = ensure_array_like(
          /*booleanVariants*/
          ctx2[16]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$3(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$3(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      class: "max-h-96 overflow-auto",
      $$slots: { default: [create_default_slot$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty[1] & /*$$scope*/
      262144) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_fragment$h(ctx) {
  let div;
  let variablepicker;
  let updating_variableId;
  let t2;
  let if_block_anchor;
  let current;
  function variablepicker_variableId_binding(value) {
    ctx[20](value);
  }
  let variablepicker_props = {};
  if (
    /*variableId*/
    ctx[0] !== void 0
  ) {
    variablepicker_props.variableId = /*variableId*/
    ctx[0];
  }
  variablepicker = new VariablePicker({ props: variablepicker_props });
  binding_callbacks.push(() => bind(variablepicker, "variableId", variablepicker_variableId_binding));
  variablepicker.$on(
    "variable",
    /*variable_handler*/
    ctx[21]
  );
  let if_block = (
    /*variable*/
    ctx[15] && create_if_block$a(ctx)
  );
  return {
    c() {
      div = element("div");
      create_component(variablepicker.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(variablepicker.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      t2 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "class", "mt-2");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(variablepicker, div, null);
      insert_hydration(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const variablepicker_changes = {};
      if (!updating_variableId && dirty[0] & /*variableId*/
      1) {
        updating_variableId = true;
        variablepicker_changes.variableId = /*variableId*/
        ctx2[0];
        add_flush_callback(() => updating_variableId = false);
      }
      variablepicker.$set(variablepicker_changes);
      if (
        /*variable*/
        ctx2[15]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*variable*/
          32768) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$a(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(variablepicker.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(variablepicker.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
        detach(if_block_anchor);
      }
      destroy_component(variablepicker);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$i($$self, $$props, $$invalidate) {
  let $variables;
  component_subscribe($$self, variables, ($$value) => $$invalidate(36, $variables = $$value));
  const booleanVariants = [
    { value: "toggle", label: "Toggle" },
    {
      value: "icon-button",
      label: "Icon button"
    },
    {
      value: "icon-group-horizontal",
      label: "Icon group horizontal"
    },
    {
      value: "icon-group-vertical",
      label: "Icon group vertical"
    }
  ];
  const numberVariants = [{ value: "slider", label: "Slider" }, { value: "input", label: "Input" }];
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let variableId;
  let title;
  let iconId;
  let booleanVariant;
  let booleanIconId;
  let booleanIconTrueId;
  let booleanIconFalseId;
  let booleanColor;
  let booleanColorTrue;
  let booleanColorFalse;
  let numberVariant;
  let numberMin;
  let numberMax;
  let numberStep;
  let numberUnit;
  let numberThresholds;
  let variable;
  function onSettings(s3) {
    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k;
    $$invalidate(0, variableId = s3 == null ? void 0 : s3.variableId);
    $$invalidate(1, title = s3 == null ? void 0 : s3.title);
    $$invalidate(2, iconId = s3 == null ? void 0 : s3.iconId);
    $$invalidate(3, booleanVariant = booleanVariants.find((v) => {
      var _a3;
      return v.value === (((_a3 = s3.boolean) == null ? void 0 : _a3.variant) ?? "toggle");
    }));
    $$invalidate(4, booleanIconId = (_a2 = s3.boolean) == null ? void 0 : _a2.iconId);
    $$invalidate(5, booleanIconTrueId = (_b2 = s3.boolean) == null ? void 0 : _b2.iconTrueId);
    $$invalidate(6, booleanIconFalseId = (_c = s3.boolean) == null ? void 0 : _c.iconFalseId);
    $$invalidate(7, booleanColor = (_d = s3.boolean) == null ? void 0 : _d.color);
    $$invalidate(8, booleanColorTrue = (_e = s3.boolean) == null ? void 0 : _e.colorTrue);
    $$invalidate(9, booleanColorFalse = (_f = s3.boolean) == null ? void 0 : _f.colorFalse);
    $$invalidate(10, numberVariant = numberVariants.find((v) => {
      var _a3;
      return v.value === (((_a3 = s3.number) == null ? void 0 : _a3.variant) ?? "slider");
    }));
    $$invalidate(11, numberMin = (_g = s3.number) == null ? void 0 : _g.min);
    $$invalidate(12, numberMax = (_h = s3.number) == null ? void 0 : _h.max);
    $$invalidate(13, numberStep = (_i = s3.number) == null ? void 0 : _i.step);
    $$invalidate(14, numberUnit = (_j = s3.number) == null ? void 0 : _j.unit);
    $$invalidate(19, numberThresholds = (_k = s3.number) == null ? void 0 : _k.thresholds);
    $$invalidate(15, variable = $variables[variableId ?? ""]);
  }
  function onVariableId(id) {
    if (id !== settings.variableId) {
      dispatch("settings", { ...settings, variableId: id });
    }
  }
  function onTitle(t2) {
    const value = t2 !== void 0 && t2.length > 0 ? t2 : void 0;
    if (value !== settings.title) {
      dispatch("settings", { ...settings, title: value });
    }
  }
  function onIconId(id) {
    if (id !== settings.iconId) {
      dispatch("settings", { ...settings, iconId: id });
    }
  }
  function onBoolean(variant, iconId2, iconTrueId, iconFalseId, color2, colorTrue, colorFalse) {
    const boolean = {
      variant: variant.value,
      iconId: iconId2,
      iconTrueId,
      iconFalseId,
      color: color2,
      colorTrue,
      colorFalse
    };
    if (JSON.stringify(boolean) !== JSON.stringify(settings.boolean)) {
      dispatch("settings", { ...settings, boolean });
    }
  }
  function onNumber(variant, min, max, step, unit, thresholds) {
    const number = {
      variant: variant.value,
      min,
      max,
      step,
      unit,
      thresholds
    };
    if (JSON.stringify(number) !== JSON.stringify(settings.number)) {
      dispatch("settings", { ...settings, number });
    }
  }
  function variablepicker_variableId_binding(value) {
    variableId = value;
    $$invalidate(0, variableId);
  }
  const variable_handler = (e2) => $$invalidate(15, variable = e2.detail);
  function input_value_binding(value) {
    title = value;
    $$invalidate(1, title);
  }
  function iconpicker_iconId_binding(value) {
    iconId = value;
    $$invalidate(2, iconId);
  }
  function select_value_binding(value) {
    booleanVariant = value;
    $$invalidate(3, booleanVariant);
  }
  function iconpicker0_iconId_binding(value) {
    booleanIconId = value;
    $$invalidate(4, booleanIconId);
  }
  function iconpicker1_iconId_binding(value) {
    booleanIconTrueId = value;
    $$invalidate(5, booleanIconTrueId);
  }
  function iconpicker2_iconId_binding(value) {
    booleanIconFalseId = value;
    $$invalidate(6, booleanIconFalseId);
  }
  function colorpicker0_value_binding(value) {
    booleanColor = value;
    $$invalidate(7, booleanColor);
  }
  function colorpicker1_value_binding(value) {
    booleanColorTrue = value;
    $$invalidate(8, booleanColorTrue);
  }
  function colorpicker2_value_binding(value) {
    booleanColorFalse = value;
    $$invalidate(9, booleanColorFalse);
  }
  function select_value_binding_1(value) {
    numberVariant = value;
    $$invalidate(10, numberVariant);
  }
  function inputnumber0_value_binding(value) {
    numberMin = value;
    $$invalidate(11, numberMin);
  }
  function inputnumber1_value_binding(value) {
    numberMax = value;
    $$invalidate(12, numberMax);
  }
  function inputnumber2_value_binding(value) {
    numberStep = value;
    $$invalidate(13, numberStep);
  }
  function input_value_binding_1(value) {
    numberUnit = value;
    $$invalidate(14, numberUnit);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(18, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*settings*/
    262144) {
      onSettings(settings);
    }
    if ($$self.$$.dirty[0] & /*variableId*/
    1) {
      onVariableId(variableId);
    }
    if ($$self.$$.dirty[0] & /*title*/
    2) {
      onTitle(title);
    }
    if ($$self.$$.dirty[0] & /*iconId*/
    4) {
      onIconId(iconId);
    }
    if ($$self.$$.dirty[0] & /*booleanVariant, booleanIconId, booleanIconTrueId, booleanIconFalseId, booleanColor, booleanColorTrue, booleanColorFalse*/
    1016) {
      onBoolean(booleanVariant, booleanIconId, booleanIconTrueId, booleanIconFalseId, booleanColor, booleanColorTrue, booleanColorFalse);
    }
    if ($$self.$$.dirty[0] & /*numberVariant, numberMin, numberMax, numberStep, numberUnit, numberThresholds*/
    556032) {
      onNumber(numberVariant, numberMin, numberMax, numberStep, numberUnit, numberThresholds);
    }
  };
  return [
    variableId,
    title,
    iconId,
    booleanVariant,
    booleanIconId,
    booleanIconTrueId,
    booleanIconFalseId,
    booleanColor,
    booleanColorTrue,
    booleanColorFalse,
    numberVariant,
    numberMin,
    numberMax,
    numberStep,
    numberUnit,
    variable,
    booleanVariants,
    numberVariants,
    settings,
    numberThresholds,
    variablepicker_variableId_binding,
    variable_handler,
    input_value_binding,
    iconpicker_iconId_binding,
    select_value_binding,
    iconpicker0_iconId_binding,
    iconpicker1_iconId_binding,
    iconpicker2_iconId_binding,
    colorpicker0_value_binding,
    colorpicker1_value_binding,
    colorpicker2_value_binding,
    select_value_binding_1,
    inputnumber0_value_binding,
    inputnumber1_value_binding,
    inputnumber2_value_binding,
    input_value_binding_1
  ];
}
class VariableEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$i, create_fragment$h, safe_not_equal, { settings: 18 }, null, [-1, -1]);
  }
}
function create_fragment$g(ctx) {
  let button0;
  let icon0;
  let t0;
  let span;
  let t1;
  let t2;
  let t3_value = (
    /*unit*/
    (ctx[1] ?? "") + ""
  );
  let t3;
  let t4;
  let button1;
  let icon1;
  let current;
  let mounted;
  let dispose;
  icon0 = new Icon({ props: { data: mdiMinus } });
  icon1 = new Icon({ props: { data: mdiPlus } });
  return {
    c() {
      button0 = element("button");
      create_component(icon0.$$.fragment);
      t0 = space();
      span = element("span");
      t1 = text(
        /*value*/
        ctx[0]
      );
      t2 = space();
      t3 = text(t3_value);
      t4 = space();
      button1 = element("button");
      create_component(icon1.$$.fragment);
      this.h();
    },
    l(nodes) {
      button0 = claim_element(nodes, "BUTTON", { class: true });
      var button0_nodes = children(button0);
      claim_component(icon0.$$.fragment, button0_nodes);
      button0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t1 = claim_text(
        span_nodes,
        /*value*/
        ctx[0]
      );
      t2 = claim_space(span_nodes);
      t3 = claim_text(span_nodes, t3_value);
      span_nodes.forEach(detach);
      t4 = claim_space(nodes);
      button1 = claim_element(nodes, "BUTTON", { class: true });
      var button1_nodes = children(button1);
      claim_component(icon1.$$.fragment, button1_nodes);
      button1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(button0, "class", "btn");
      attr(span, "class", "ml-1 mr-1 whitespace-nowrap");
      attr(button1, "class", "btn");
    },
    m(target, anchor) {
      insert_hydration(target, button0, anchor);
      mount_component(icon0, button0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, span, anchor);
      append_hydration(span, t1);
      append_hydration(span, t2);
      append_hydration(span, t3);
      insert_hydration(target, t4, anchor);
      insert_hydration(target, button1, anchor);
      mount_component(icon1, button1, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[7]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[8]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*value*/
      1)
        set_data(
          t1,
          /*value*/
          ctx2[0]
        );
      if ((!current || dirty & /*unit*/
      2) && t3_value !== (t3_value = /*unit*/
      (ctx2[1] ?? "") + ""))
        set_data(t3, t3_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon0.$$.fragment, local);
      transition_in(icon1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon0.$$.fragment, local);
      transition_out(icon1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button0);
        detach(t0);
        detach(span);
        detach(t4);
        detach(button1);
      }
      destroy_component(icon0);
      destroy_component(icon1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$h($$self, $$props, $$invalidate) {
  let { value } = $$props;
  let { disabled } = $$props;
  let { min = void 0 } = $$props;
  let { max = void 0 } = $$props;
  let { step = void 0 } = $$props;
  let { unit = void 0 } = $$props;
  function decrement() {
    let v = value - (step ?? 1);
    if (min !== void 0 && min !== null && v > min) {
      v = min;
    }
    if (!disabled) {
      $$invalidate(0, value = v);
    }
  }
  const click_handler = () => decrement();
  const click_handler_1 = () => decrement();
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(3, disabled = $$props2.disabled);
    if ("min" in $$props2)
      $$invalidate(4, min = $$props2.min);
    if ("max" in $$props2)
      $$invalidate(5, max = $$props2.max);
    if ("step" in $$props2)
      $$invalidate(6, step = $$props2.step);
    if ("unit" in $$props2)
      $$invalidate(1, unit = $$props2.unit);
  };
  return [
    value,
    unit,
    decrement,
    disabled,
    min,
    max,
    step,
    click_handler,
    click_handler_1
  ];
}
class NumberInput extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$h, create_fragment$g, safe_not_equal, {
      value: 0,
      disabled: 3,
      min: 4,
      max: 5,
      step: 6,
      unit: 1
    });
  }
}
function create_fragment$f(ctx) {
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      this.h();
    },
    l(nodes) {
      input = claim_element(nodes, "INPUT", {
        type: true,
        class: true,
        min: true,
        max: true,
        step: true
      });
      this.h();
    },
    h() {
      attr(input, "type", "range");
      attr(input, "class", "range");
      attr(
        input,
        "min",
        /*min*/
        ctx[2]
      );
      attr(
        input,
        "max",
        /*max*/
        ctx[3]
      );
      attr(
        input,
        "step",
        /*step*/
        ctx[4]
      );
      input.value = /*value*/
      ctx[0];
      input.disabled = /*disabled*/
      ctx[1];
    },
    m(target, anchor) {
      insert_hydration(target, input, anchor);
      if (!mounted) {
        dispose = listen(
          input,
          "value",
          /*value_handler*/
          ctx[8]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*min*/
      4) {
        attr(
          input,
          "min",
          /*min*/
          ctx2[2]
        );
      }
      if (dirty & /*max*/
      8) {
        attr(
          input,
          "max",
          /*max*/
          ctx2[3]
        );
      }
      if (dirty & /*step*/
      16) {
        attr(
          input,
          "step",
          /*step*/
          ctx2[4]
        );
      }
      if (dirty & /*value*/
      1) {
        input.value = /*value*/
        ctx2[0];
      }
      if (dirty & /*disabled*/
      2) {
        input.disabled = /*disabled*/
        ctx2[1];
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$g($$self, $$props, $$invalidate) {
  let { value } = $$props;
  let { disabled } = $$props;
  let { min = void 0 } = $$props;
  let { max = void 0 } = $$props;
  let { step = void 0 } = $$props;
  let { unit = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  function setValue(v) {
    if (!disabled) {
      $$invalidate(0, value = v);
    }
  }
  const value_handler = (e2) => setValue(e2.detail);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
    if ("min" in $$props2)
      $$invalidate(2, min = $$props2.min);
    if ("max" in $$props2)
      $$invalidate(3, max = $$props2.max);
    if ("step" in $$props2)
      $$invalidate(4, step = $$props2.step);
    if ("unit" in $$props2)
      $$invalidate(6, unit = $$props2.unit);
    if ("color" in $$props2)
      $$invalidate(7, color2 = $$props2.color);
  };
  return [value, disabled, min, max, step, setValue, unit, color2, value_handler];
}
class Slider2 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$g, create_fragment$f, safe_not_equal, {
      value: 0,
      disabled: 1,
      min: 2,
      max: 3,
      step: 4,
      unit: 6,
      color: 7
    });
  }
}
function create_fragment$e(ctx) {
  let switch_instance;
  let updating_value;
  let switch_instance_anchor;
  let current;
  function switch_instance_value_binding(value) {
    ctx[9](value);
  }
  var switch_value = (
    /*component*/
    ctx[7]
  );
  function switch_props(ctx2, dirty) {
    let switch_instance_props = {
      disabled: (
        /*disabled*/
        ctx2[1]
      ),
      min: (
        /*min*/
        ctx2[2]
      ),
      max: (
        /*max*/
        ctx2[3]
      ),
      step: (
        /*step*/
        ctx2[4]
      ),
      color: (
        /*color*/
        ctx2[6]
      ),
      unit: (
        /*unit*/
        ctx2[5]
      )
    };
    if (
      /*value*/
      ctx2[0] !== void 0
    ) {
      switch_instance_props.value = /*value*/
      ctx2[0];
    }
    return { props: switch_instance_props };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    binding_callbacks.push(() => bind(switch_instance, "value", switch_instance_value_binding));
  }
  return {
    c() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*component*/
      128 && switch_value !== (switch_value = /*component*/
      ctx2[7])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          binding_callbacks.push(() => bind(switch_instance, "value", switch_instance_value_binding));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty & /*disabled*/
        2)
          switch_instance_changes.disabled = /*disabled*/
          ctx2[1];
        if (dirty & /*min*/
        4)
          switch_instance_changes.min = /*min*/
          ctx2[2];
        if (dirty & /*max*/
        8)
          switch_instance_changes.max = /*max*/
          ctx2[3];
        if (dirty & /*step*/
        16)
          switch_instance_changes.step = /*step*/
          ctx2[4];
        if (dirty & /*color*/
        64)
          switch_instance_changes.color = /*color*/
          ctx2[6];
        if (dirty & /*unit*/
        32)
          switch_instance_changes.unit = /*unit*/
          ctx2[5];
        if (!updating_value && dirty & /*value*/
        1) {
          updating_value = true;
          switch_instance_changes.value = /*value*/
          ctx2[0];
          add_flush_callback(() => updating_value = false);
        }
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(switch_instance_anchor);
      }
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function instance$f($$self, $$props, $$invalidate) {
  let component;
  let { variant = "slider" } = $$props;
  let { value } = $$props;
  let { disabled } = $$props;
  let { min = void 0 } = $$props;
  let { max = void 0 } = $$props;
  let { step = void 0 } = $$props;
  let { unit = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  function getComponent(v) {
    switch (v) {
      case "input":
        return NumberInput;
      case "slider":
      default:
        return Slider2;
    }
  }
  function switch_instance_value_binding(value$1) {
    value = value$1;
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("variant" in $$props2)
      $$invalidate(8, variant = $$props2.variant);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
    if ("min" in $$props2)
      $$invalidate(2, min = $$props2.min);
    if ("max" in $$props2)
      $$invalidate(3, max = $$props2.max);
    if ("step" in $$props2)
      $$invalidate(4, step = $$props2.step);
    if ("unit" in $$props2)
      $$invalidate(5, unit = $$props2.unit);
    if ("color" in $$props2)
      $$invalidate(6, color2 = $$props2.color);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*variant*/
    256) {
      $$invalidate(7, component = getComponent(variant));
    }
  };
  return [
    value,
    disabled,
    min,
    max,
    step,
    unit,
    color2,
    component,
    variant,
    switch_instance_value_binding
  ];
}
class Numeric extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$f, create_fragment$e, safe_not_equal, {
      variant: 8,
      value: 0,
      disabled: 1,
      min: 2,
      max: 3,
      step: 4,
      unit: 5,
      color: 6
    });
  }
}
function create_else_block_1$3(ctx) {
  var _a2, _b2, _c, _d, _e, _f, _g, _h, _i;
  let div3;
  let div1;
  let div0;
  let h12;
  let t0;
  let t1;
  let t2_value = (
    /*settings*/
    (((_a2 = ctx[0].number) == null ? void 0 : _a2.unit) ?? "") + ""
  );
  let t2;
  let t3;
  let span0;
  let t4_value = (
    /*settings*/
    (ctx[0].title ?? /*variable*/
    ctx[1].name) + ""
  );
  let t4;
  let t5;
  let div2;
  let span1;
  let t6_value = (
    /*settings*/
    (((_b2 = ctx[0].number) == null ? void 0 : _b2.min) ?? "") + ""
  );
  let t6;
  let t7;
  let t8_value = (
    /*settings*/
    (((_c = ctx[0].number) == null ? void 0 : _c.unit) ?? "") + ""
  );
  let t8;
  let t9;
  let numeric;
  let updating_value;
  let t10;
  let span2;
  let t11_value = (
    /*settings*/
    (((_d = ctx[0].number) == null ? void 0 : _d.max) ?? "") + ""
  );
  let t11;
  let t12;
  let t13_value = (
    /*settings*/
    (((_e = ctx[0].number) == null ? void 0 : _e.unit) ?? "") + ""
  );
  let t13;
  let current;
  function numeric_value_binding_1(value) {
    ctx[8](value);
  }
  let numeric_props = {
    variant: (
      /*settings*/
      (_f = ctx[0].number) == null ? void 0 : _f.variant
    ),
    min: (
      /*settings*/
      (_g = ctx[0].number) == null ? void 0 : _g.min
    ),
    max: (
      /*settings*/
      (_h = ctx[0].number) == null ? void 0 : _h.max
    ),
    step: (
      /*settings*/
      (_i = ctx[0].number) == null ? void 0 : _i.step
    ),
    disabled: (
      /*disabled*/
      ctx[4]
    )
  };
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    numeric_props.value = /*value*/
    ctx[3];
  }
  numeric = new Numeric({ props: numeric_props });
  binding_callbacks.push(() => bind(numeric, "value", numeric_value_binding_1));
  return {
    c() {
      div3 = element("div");
      div1 = element("div");
      div0 = element("div");
      h12 = element("h1");
      t0 = text(
        /*value*/
        ctx[3]
      );
      t1 = space();
      t2 = text(t2_value);
      t3 = space();
      span0 = element("span");
      t4 = text(t4_value);
      t5 = space();
      div2 = element("div");
      span1 = element("span");
      t6 = text(t6_value);
      t7 = space();
      t8 = text(t8_value);
      t9 = space();
      create_component(numeric.$$.fragment);
      t10 = space();
      span2 = element("span");
      t11 = text(t11_value);
      t12 = space();
      t13 = text(t13_value);
      this.h();
    },
    l(nodes) {
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      div1 = claim_element(div3_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      h12 = claim_element(div0_nodes, "H1", {});
      var h1_nodes = children(h12);
      t0 = claim_text(
        h1_nodes,
        /*value*/
        ctx[3]
      );
      t1 = claim_space(h1_nodes);
      t2 = claim_text(h1_nodes, t2_value);
      h1_nodes.forEach(detach);
      t3 = claim_space(div0_nodes);
      span0 = claim_element(div0_nodes, "SPAN", {});
      var span0_nodes = children(span0);
      t4 = claim_text(span0_nodes, t4_value);
      span0_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t5 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      span1 = claim_element(div2_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      t6 = claim_text(span1_nodes, t6_value);
      t7 = claim_space(span1_nodes);
      t8 = claim_text(span1_nodes, t8_value);
      span1_nodes.forEach(detach);
      t9 = claim_space(div2_nodes);
      claim_component(numeric.$$.fragment, div2_nodes);
      t10 = claim_space(div2_nodes);
      span2 = claim_element(div2_nodes, "SPAN", { class: true });
      var span2_nodes = children(span2);
      t11 = claim_text(span2_nodes, t11_value);
      t12 = claim_space(span2_nodes);
      t13 = claim_text(span2_nodes, t13_value);
      span2_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "flex flex-col items-center");
      attr(div1, "class", "mx-auto");
      attr(span1, "class", "whitespace-nowrap mr-4");
      attr(span2, "class", "whitespace-nowrap ml-4");
      attr(div2, "class", "flex flex-row mt-4");
      attr(div3, "class", "flex flex-col w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div3, anchor);
      append_hydration(div3, div1);
      append_hydration(div1, div0);
      append_hydration(div0, h12);
      append_hydration(h12, t0);
      append_hydration(h12, t1);
      append_hydration(h12, t2);
      append_hydration(div0, t3);
      append_hydration(div0, span0);
      append_hydration(span0, t4);
      append_hydration(div3, t5);
      append_hydration(div3, div2);
      append_hydration(div2, span1);
      append_hydration(span1, t6);
      append_hydration(span1, t7);
      append_hydration(span1, t8);
      append_hydration(div2, t9);
      mount_component(numeric, div2, null);
      append_hydration(div2, t10);
      append_hydration(div2, span2);
      append_hydration(span2, t11);
      append_hydration(span2, t12);
      append_hydration(span2, t13);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3, _b3, _c2, _d2, _e2, _f2, _g2, _h2, _i2;
      if (!current || dirty & /*value*/
      8)
        set_data(
          t0,
          /*value*/
          ctx2[3]
        );
      if ((!current || dirty & /*settings*/
      1) && t2_value !== (t2_value = /*settings*/
      (((_a3 = ctx2[0].number) == null ? void 0 : _a3.unit) ?? "") + ""))
        set_data(t2, t2_value);
      if ((!current || dirty & /*settings, variable*/
      3) && t4_value !== (t4_value = /*settings*/
      (ctx2[0].title ?? /*variable*/
      ctx2[1].name) + ""))
        set_data(t4, t4_value);
      if ((!current || dirty & /*settings*/
      1) && t6_value !== (t6_value = /*settings*/
      (((_b3 = ctx2[0].number) == null ? void 0 : _b3.min) ?? "") + ""))
        set_data(t6, t6_value);
      if ((!current || dirty & /*settings*/
      1) && t8_value !== (t8_value = /*settings*/
      (((_c2 = ctx2[0].number) == null ? void 0 : _c2.unit) ?? "") + ""))
        set_data(t8, t8_value);
      const numeric_changes = {};
      if (dirty & /*settings*/
      1)
        numeric_changes.variant = /*settings*/
        (_d2 = ctx2[0].number) == null ? void 0 : _d2.variant;
      if (dirty & /*settings*/
      1)
        numeric_changes.min = /*settings*/
        (_e2 = ctx2[0].number) == null ? void 0 : _e2.min;
      if (dirty & /*settings*/
      1)
        numeric_changes.max = /*settings*/
        (_f2 = ctx2[0].number) == null ? void 0 : _f2.max;
      if (dirty & /*settings*/
      1)
        numeric_changes.step = /*settings*/
        (_g2 = ctx2[0].number) == null ? void 0 : _g2.step;
      if (dirty & /*disabled*/
      16)
        numeric_changes.disabled = /*disabled*/
        ctx2[4];
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        numeric_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      numeric.$set(numeric_changes);
      if ((!current || dirty & /*settings*/
      1) && t11_value !== (t11_value = /*settings*/
      (((_h2 = ctx2[0].number) == null ? void 0 : _h2.max) ?? "") + ""))
        set_data(t11, t11_value);
      if ((!current || dirty & /*settings*/
      1) && t13_value !== (t13_value = /*settings*/
      (((_i2 = ctx2[0].number) == null ? void 0 : _i2.unit) ?? "") + ""))
        set_data(t13, t13_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(numeric.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(numeric.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      destroy_component(numeric);
    }
  };
}
function create_if_block$9(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$5, create_else_block$9];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    var _a2;
    if (
      /*settings*/
      ((_a2 = ctx2[0].number) == null ? void 0 : _a2.variant) === "input"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$9(ctx) {
  var _a2;
  let span;
  let t0;
  let t1;
  let t2_value = (
    /*settings*/
    (((_a2 = ctx[0].number) == null ? void 0 : _a2.unit) ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(
        /*value*/
        ctx[3]
      );
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(
        span_nodes,
        /*value*/
        ctx[3]
      );
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*value*/
      8)
        set_data(
          t0,
          /*value*/
          ctx2[3]
        );
      if (dirty & /*settings*/
      1 && t2_value !== (t2_value = /*settings*/
      (((_a3 = ctx2[0].number) == null ? void 0 : _a3.unit) ?? "") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$5(ctx) {
  var _a2, _b2, _c, _d;
  let numeric;
  let updating_value;
  let current;
  function numeric_value_binding(value) {
    ctx[7](value);
  }
  let numeric_props = {
    variant: (
      /*settings*/
      (_a2 = ctx[0].number) == null ? void 0 : _a2.variant
    ),
    min: (
      /*settings*/
      (_b2 = ctx[0].number) == null ? void 0 : _b2.min
    ),
    max: (
      /*settings*/
      (_c = ctx[0].number) == null ? void 0 : _c.max
    ),
    step: (
      /*settings*/
      (_d = ctx[0].number) == null ? void 0 : _d.step
    ),
    unit: "%",
    disabled: (
      /*disabled*/
      ctx[4]
    )
  };
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    numeric_props.value = /*value*/
    ctx[3];
  }
  numeric = new Numeric({ props: numeric_props });
  binding_callbacks.push(() => bind(numeric, "value", numeric_value_binding));
  return {
    c() {
      create_component(numeric.$$.fragment);
    },
    l(nodes) {
      claim_component(numeric.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(numeric, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3, _b3, _c2, _d2;
      const numeric_changes = {};
      if (dirty & /*settings*/
      1)
        numeric_changes.variant = /*settings*/
        (_a3 = ctx2[0].number) == null ? void 0 : _a3.variant;
      if (dirty & /*settings*/
      1)
        numeric_changes.min = /*settings*/
        (_b3 = ctx2[0].number) == null ? void 0 : _b3.min;
      if (dirty & /*settings*/
      1)
        numeric_changes.max = /*settings*/
        (_c2 = ctx2[0].number) == null ? void 0 : _c2.max;
      if (dirty & /*settings*/
      1)
        numeric_changes.step = /*settings*/
        (_d2 = ctx2[0].number) == null ? void 0 : _d2.step;
      if (dirty & /*disabled*/
      16)
        numeric_changes.disabled = /*disabled*/
        ctx2[4];
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        numeric_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      numeric.$set(numeric_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(numeric.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(numeric.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(numeric, detaching);
    }
  };
}
function create_fragment$d(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$9, create_else_block_1$3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$e($$self, $$props, $$invalidate) {
  let disabled;
  let $homey;
  let $editing;
  component_subscribe($$self, homey, ($$value) => $$invalidate(9, $homey = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(6, $editing = $$value));
  let { settings } = $$props;
  let { variable } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let value;
  function onVariable(c2) {
    $$invalidate(3, value = c2.value);
  }
  async function onValue(v) {
    if (v !== (variable == null ? void 0 : variable.value)) {
      if (!disabled) {
        await setVariableValue(v);
      }
    }
  }
  async function setVariableValue(value2) {
    await $homey.logic.updateVariable({
      id: variable.id,
      variable: { value: value2 }
    });
  }
  function numeric_value_binding(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  function numeric_value_binding_1(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("variable" in $$props2)
      $$invalidate(1, variable = $$props2.variable);
    if ("controllable" in $$props2)
      $$invalidate(5, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    96) {
      $$invalidate(4, disabled = !controllable || $editing);
    }
    if ($$self.$$.dirty & /*variable*/
    2) {
      onVariable(variable);
    }
    if ($$self.$$.dirty & /*value*/
    8) {
      onValue(value);
    }
  };
  return [
    settings,
    variable,
    mode,
    value,
    disabled,
    controllable,
    $editing,
    numeric_value_binding,
    numeric_value_binding_1
  ];
}
class NumberVariable extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$e, create_fragment$d, safe_not_equal, {
      settings: 0,
      variable: 1,
      controllable: 5,
      mode: 2
    });
  }
}
function create_fragment$c(ctx) {
  let button;
  let icon;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: (
    /*data*/
    ctx[0]
  ) } });
  return {
    c() {
      button = element("button");
      create_component(icon.$$.fragment);
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true, style: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      button_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(
        button,
        "class",
        /*finalClass*/
        ctx[2]
      );
      set_style(
        button,
        "width",
        /*size*/
        ctx[1] + "px"
      );
      set_style(
        button,
        "height",
        /*size*/
        ctx[1] + "px"
      );
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      mount_component(icon, button, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button,
            "pointerdown",
            /*pointerdown_handler*/
            ctx[4]
          ),
          listen(button, "click", stop_propagation(prevent_default(
            /*click_handler*/
            ctx[5]
          )))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const icon_changes = {};
      if (dirty & /*data*/
      1)
        icon_changes.data = /*data*/
        ctx2[0];
      icon.$set(icon_changes);
      if (!current || dirty & /*finalClass*/
      4) {
        attr(
          button,
          "class",
          /*finalClass*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*size*/
      2) {
        set_style(
          button,
          "width",
          /*size*/
          ctx2[1] + "px"
        );
      }
      if (!current || dirty & /*size*/
      2) {
        set_style(
          button,
          "height",
          /*size*/
          ctx2[1] + "px"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      destroy_component(icon);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$d($$self, $$props, $$invalidate) {
  let finalClass;
  let { data } = $$props;
  let { size = "24px" } = $$props;
  const dispatcher = createEventDispatcher();
  function pointerdown_handler(event) {
    bubble.call(this, $$self, event);
  }
  const click_handler = (e2) => dispatcher("click", e2);
  $$self.$$set = ($$new_props) => {
    $$invalidate(6, $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props)));
    if ("data" in $$new_props)
      $$invalidate(0, data = $$new_props.data);
    if ("size" in $$new_props)
      $$invalidate(1, size = $$new_props.size);
  };
  $$self.$$.update = () => {
    $$invalidate(2, finalClass = "btn group inline-flex justify-center outline-none border-none items-center border shadow-md bg-default rounded-full p-1 " + $$props.class);
  };
  $$props = exclude_internal_props($$props);
  return [data, size, finalClass, dispatcher, pointerdown_handler, click_handler];
}
class IconButton extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$d, create_fragment$c, safe_not_equal, { data: 0, size: 1 });
  }
}
function create_else_block$8(ctx) {
  let iconbutton;
  let current;
  iconbutton = new IconButton({
    props: {
      data: (
        /*currentIconFalse*/
        ctx[3]
      ),
      color: (
        /*currentColorFalse*/
        ctx[1]
      )
    }
  });
  iconbutton.$on(
    "click",
    /*click_handler_1*/
    ctx[14]
  );
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    l(nodes) {
      claim_component(iconbutton.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const iconbutton_changes = {};
      if (dirty & /*currentIconFalse*/
      8)
        iconbutton_changes.data = /*currentIconFalse*/
        ctx2[3];
      if (dirty & /*currentColorFalse*/
      2)
        iconbutton_changes.color = /*currentColorFalse*/
        ctx2[1];
      iconbutton.$set(iconbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_if_block$8(ctx) {
  let iconbutton;
  let current;
  iconbutton = new IconButton({
    props: {
      data: (
        /*currentIconTrue*/
        ctx[4]
      ),
      color: (
        /*currentColorTrue*/
        ctx[2]
      )
    }
  });
  iconbutton.$on(
    "click",
    /*click_handler*/
    ctx[13]
  );
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    l(nodes) {
      claim_component(iconbutton.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const iconbutton_changes = {};
      if (dirty & /*currentIconTrue*/
      16)
        iconbutton_changes.data = /*currentIconTrue*/
        ctx2[4];
      if (dirty & /*currentColorTrue*/
      4)
        iconbutton_changes.color = /*currentColorTrue*/
        ctx2[2];
      iconbutton.$set(iconbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_fragment$b(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$8, create_else_block$8];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*value*/
      ctx2[0] === true
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
const defaultIcon$2 = "help";
const defaultColor$2 = "text-content";
function instance$c($$self, $$props, $$invalidate) {
  let currentIconTrue;
  let currentIconFalse;
  let currentColorTrue;
  let currentColorFalse;
  let { value } = $$props;
  let { disabled } = $$props;
  let { icon = void 0 } = $$props;
  let { iconTrue = void 0 } = $$props;
  let { iconFalse = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  let { colorTrue = void 0 } = $$props;
  let { colorFalse = void 0 } = $$props;
  function setValue(v) {
    if (!disabled) {
      $$invalidate(0, value = v);
    }
  }
  const click_handler = () => setValue(false);
  const click_handler_1 = () => setValue(true);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(6, disabled = $$props2.disabled);
    if ("icon" in $$props2)
      $$invalidate(7, icon = $$props2.icon);
    if ("iconTrue" in $$props2)
      $$invalidate(8, iconTrue = $$props2.iconTrue);
    if ("iconFalse" in $$props2)
      $$invalidate(9, iconFalse = $$props2.iconFalse);
    if ("color" in $$props2)
      $$invalidate(10, color2 = $$props2.color);
    if ("colorTrue" in $$props2)
      $$invalidate(11, colorTrue = $$props2.colorTrue);
    if ("colorFalse" in $$props2)
      $$invalidate(12, colorFalse = $$props2.colorFalse);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*iconTrue, icon*/
    384) {
      $$invalidate(4, currentIconTrue = getIcon(iconTrue ?? icon ?? defaultIcon$2));
    }
    if ($$self.$$.dirty & /*iconFalse, icon*/
    640) {
      $$invalidate(3, currentIconFalse = getIcon(iconFalse ?? icon ?? defaultIcon$2));
    }
    if ($$self.$$.dirty & /*colorTrue, color*/
    3072) {
      $$invalidate(2, currentColorTrue = colorTrue ?? color2 ?? defaultColor$2);
    }
    if ($$self.$$.dirty & /*colorFalse, color*/
    5120) {
      $$invalidate(1, currentColorFalse = colorFalse ?? color2 ?? defaultColor$2);
    }
  };
  return [
    value,
    currentColorFalse,
    currentColorTrue,
    currentIconFalse,
    currentIconTrue,
    setValue,
    disabled,
    icon,
    iconTrue,
    iconFalse,
    color2,
    colorTrue,
    colorFalse,
    click_handler,
    click_handler_1
  ];
}
class IconButton_1 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$c, create_fragment$b, safe_not_equal, {
      value: 0,
      disabled: 6,
      icon: 7,
      iconTrue: 8,
      iconFalse: 9,
      color: 10,
      colorTrue: 11,
      colorFalse: 12
    });
  }
}
function create_else_block_1$2(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconTrue*/
        ctx[5]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconTrue*/
      32)
        icon_1_changes.data = /*currentIconTrue*/
        ctx2[5];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_if_block_1$4(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconTrue*/
        ctx[5]
      ),
      color: (
        /*currentColorTrue*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconTrue*/
      32)
        icon_1_changes.data = /*currentIconTrue*/
        ctx2[5];
      if (dirty & /*currentColorTrue*/
      8)
        icon_1_changes.color = /*currentColorTrue*/
        ctx2[3];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_else_block$7(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconFalse*/
        ctx[4]
      ),
      color: (
        /*currentColorFalse*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconFalse*/
      16)
        icon_1_changes.data = /*currentIconFalse*/
        ctx2[4];
      if (dirty & /*currentColorFalse*/
      4)
        icon_1_changes.color = /*currentColorFalse*/
        ctx2[2];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_if_block$7(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconFalse*/
        ctx[4]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconFalse*/
      16)
        icon_1_changes.data = /*currentIconFalse*/
        ctx2[4];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_fragment$a(ctx) {
  let div;
  let button0;
  let current_block_type_index;
  let if_block0;
  let t2;
  let button1;
  let current_block_type_index_1;
  let if_block1;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_1$4, create_else_block_1$2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*value*/
      ctx2[0] === true
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const if_block_creators_1 = [create_if_block$7, create_else_block$7];
  const if_blocks_1 = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*value*/
      ctx2[0] === true
    )
      return 0;
    return 1;
  }
  current_block_type_index_1 = select_block_type_1(ctx);
  if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
  return {
    c() {
      div = element("div");
      button0 = element("button");
      if_block0.c();
      t2 = space();
      button1 = element("button");
      if_block1.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      button0 = claim_element(div_nodes, "BUTTON", { type: true, class: true });
      var button0_nodes = children(button0);
      if_block0.l(button0_nodes);
      button0_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      button1 = claim_element(div_nodes, "BUTTON", { type: true, class: true });
      var button1_nodes = children(button1);
      if_block1.l(button1_nodes);
      button1_nodes.forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(button0, "type", "button");
      attr(button0, "class", "inline-flex items-center justify-center px-2 py-1 text-sm font-medium text-content first-of-type:rounded-l-md last-of-type:rounded-r-md bg-surface");
      toggle_class(button0, "hover:bg-hover", !/*disabled*/
      ctx[1]);
      attr(button1, "type", "button");
      attr(button1, "class", "inline-flex items-center justify-center px-2 py-1 text-sm font-medium text-content first-of-type:rounded-l-md last-of-type:rounded-r-md bg-surface hover:bg-hover");
      toggle_class(button1, "hover:bg-hover", !/*disabled*/
      ctx[1]);
      attr(div, "class", "flex flex-row border border-border rounded-md divide-x divide-border");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, button0);
      if_blocks[current_block_type_index].m(button0, null);
      append_hydration(div, t2);
      append_hydration(div, button1);
      if_blocks_1[current_block_type_index_1].m(button1, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[13]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[14]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(button0, null);
      }
      if (!current || dirty & /*disabled*/
      2) {
        toggle_class(button0, "hover:bg-hover", !/*disabled*/
        ctx2[1]);
      }
      let previous_block_index_1 = current_block_type_index_1;
      current_block_type_index_1 = select_block_type_1(ctx2);
      if (current_block_type_index_1 === previous_block_index_1) {
        if_blocks_1[current_block_type_index_1].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
          if_blocks_1[previous_block_index_1] = null;
        });
        check_outros();
        if_block1 = if_blocks_1[current_block_type_index_1];
        if (!if_block1) {
          if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(button1, null);
      }
      if (!current || dirty & /*disabled*/
      2) {
        toggle_class(button1, "hover:bg-hover", !/*disabled*/
        ctx2[1]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      if_blocks_1[current_block_type_index_1].d();
      mounted = false;
      run_all(dispose);
    }
  };
}
const defaultIcon$1 = "help";
const defaultColor$1 = "text-content";
function instance$b($$self, $$props, $$invalidate) {
  let currentIconTrue;
  let currentIconFalse;
  let currentColorTrue;
  let currentColorFalse;
  let { value } = $$props;
  let { disabled } = $$props;
  let { icon = void 0 } = $$props;
  let { iconTrue = void 0 } = $$props;
  let { iconFalse = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  let { colorTrue = void 0 } = $$props;
  let { colorFalse = void 0 } = $$props;
  function setValue(v) {
    if (!disabled) {
      $$invalidate(0, value = v);
    }
  }
  const click_handler = () => setValue(true);
  const click_handler_1 = () => setValue(false);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
    if ("icon" in $$props2)
      $$invalidate(7, icon = $$props2.icon);
    if ("iconTrue" in $$props2)
      $$invalidate(8, iconTrue = $$props2.iconTrue);
    if ("iconFalse" in $$props2)
      $$invalidate(9, iconFalse = $$props2.iconFalse);
    if ("color" in $$props2)
      $$invalidate(10, color2 = $$props2.color);
    if ("colorTrue" in $$props2)
      $$invalidate(11, colorTrue = $$props2.colorTrue);
    if ("colorFalse" in $$props2)
      $$invalidate(12, colorFalse = $$props2.colorFalse);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*iconTrue, icon*/
    384) {
      $$invalidate(5, currentIconTrue = getIcon(iconTrue ?? icon ?? defaultIcon$1));
    }
    if ($$self.$$.dirty & /*iconFalse, icon*/
    640) {
      $$invalidate(4, currentIconFalse = getIcon(iconFalse ?? icon ?? defaultIcon$1));
    }
    if ($$self.$$.dirty & /*colorTrue, color*/
    3072) {
      $$invalidate(3, currentColorTrue = colorTrue ?? color2 ?? defaultColor$1);
    }
    if ($$self.$$.dirty & /*colorFalse, color*/
    5120) {
      $$invalidate(2, currentColorFalse = colorFalse ?? color2 ?? defaultColor$1);
    }
  };
  return [
    value,
    disabled,
    currentColorFalse,
    currentColorTrue,
    currentIconFalse,
    currentIconTrue,
    setValue,
    icon,
    iconTrue,
    iconFalse,
    color2,
    colorTrue,
    colorFalse,
    click_handler,
    click_handler_1
  ];
}
class IconGroupHorizontal extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$b, create_fragment$a, safe_not_equal, {
      value: 0,
      disabled: 1,
      icon: 7,
      iconTrue: 8,
      iconFalse: 9,
      color: 10,
      colorTrue: 11,
      colorFalse: 12
    });
  }
}
function create_else_block_1$1(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconTrue*/
        ctx[5]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconTrue*/
      32)
        icon_1_changes.data = /*currentIconTrue*/
        ctx2[5];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_if_block_1$3(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconTrue*/
        ctx[5]
      ),
      color: (
        /*currentColorTrue*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconTrue*/
      32)
        icon_1_changes.data = /*currentIconTrue*/
        ctx2[5];
      if (dirty & /*currentColorTrue*/
      8)
        icon_1_changes.color = /*currentColorTrue*/
        ctx2[3];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_else_block$6(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconFalse*/
        ctx[4]
      ),
      color: (
        /*currentColorFalse*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconFalse*/
      16)
        icon_1_changes.data = /*currentIconFalse*/
        ctx2[4];
      if (dirty & /*currentColorFalse*/
      4)
        icon_1_changes.color = /*currentColorFalse*/
        ctx2[2];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_if_block$6(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconFalse*/
        ctx[4]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconFalse*/
      16)
        icon_1_changes.data = /*currentIconFalse*/
        ctx2[4];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_fragment$9(ctx) {
  let div;
  let button0;
  let current_block_type_index;
  let if_block0;
  let t2;
  let button1;
  let current_block_type_index_1;
  let if_block1;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_1$3, create_else_block_1$1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*value*/
      ctx2[0] === true
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const if_block_creators_1 = [create_if_block$6, create_else_block$6];
  const if_blocks_1 = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*value*/
      ctx2[0] === true
    )
      return 0;
    return 1;
  }
  current_block_type_index_1 = select_block_type_1(ctx);
  if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
  return {
    c() {
      div = element("div");
      button0 = element("button");
      if_block0.c();
      t2 = space();
      button1 = element("button");
      if_block1.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      button0 = claim_element(div_nodes, "BUTTON", { type: true, class: true });
      var button0_nodes = children(button0);
      if_block0.l(button0_nodes);
      button0_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      button1 = claim_element(div_nodes, "BUTTON", { type: true, class: true });
      var button1_nodes = children(button1);
      if_block1.l(button1_nodes);
      button1_nodes.forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(button0, "type", "button");
      attr(button0, "class", "inline-flex items-center justify-center px-1 py-2 text-sm font-medium text-content first-of-type:rounded-t-md last-of-type:rounded-b-md bg-surface");
      toggle_class(button0, "hover:bg-hover", !/*disabled*/
      ctx[1]);
      attr(button1, "type", "button");
      attr(button1, "class", "inline-flex items-center justify-center px-1 py-2 text-sm font-medium text-content first-of-type:rounded-t-md last-of-type:rounded-b-md bg-surface");
      toggle_class(button1, "hover:bg-hover", !/*disabled*/
      ctx[1]);
      attr(div, "class", "flex flex-col border border-border rounded-md divide-y divide-border");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, button0);
      if_blocks[current_block_type_index].m(button0, null);
      append_hydration(div, t2);
      append_hydration(div, button1);
      if_blocks_1[current_block_type_index_1].m(button1, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[13]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[14]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(button0, null);
      }
      if (!current || dirty & /*disabled*/
      2) {
        toggle_class(button0, "hover:bg-hover", !/*disabled*/
        ctx2[1]);
      }
      let previous_block_index_1 = current_block_type_index_1;
      current_block_type_index_1 = select_block_type_1(ctx2);
      if (current_block_type_index_1 === previous_block_index_1) {
        if_blocks_1[current_block_type_index_1].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
          if_blocks_1[previous_block_index_1] = null;
        });
        check_outros();
        if_block1 = if_blocks_1[current_block_type_index_1];
        if (!if_block1) {
          if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(button1, null);
      }
      if (!current || dirty & /*disabled*/
      2) {
        toggle_class(button1, "hover:bg-hover", !/*disabled*/
        ctx2[1]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      if_blocks_1[current_block_type_index_1].d();
      mounted = false;
      run_all(dispose);
    }
  };
}
const defaultIcon = "help";
const defaultColor = "text-content";
function instance$a($$self, $$props, $$invalidate) {
  let currentIconTrue;
  let currentIconFalse;
  let currentColorTrue;
  let currentColorFalse;
  let { value } = $$props;
  let { disabled } = $$props;
  let { icon = void 0 } = $$props;
  let { iconTrue = void 0 } = $$props;
  let { iconFalse = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  let { colorTrue = void 0 } = $$props;
  let { colorFalse = void 0 } = $$props;
  function setValue(v) {
    if (!disabled) {
      $$invalidate(0, value = v);
    }
  }
  const click_handler = () => setValue(true);
  const click_handler_1 = () => setValue(false);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
    if ("icon" in $$props2)
      $$invalidate(7, icon = $$props2.icon);
    if ("iconTrue" in $$props2)
      $$invalidate(8, iconTrue = $$props2.iconTrue);
    if ("iconFalse" in $$props2)
      $$invalidate(9, iconFalse = $$props2.iconFalse);
    if ("color" in $$props2)
      $$invalidate(10, color2 = $$props2.color);
    if ("colorTrue" in $$props2)
      $$invalidate(11, colorTrue = $$props2.colorTrue);
    if ("colorFalse" in $$props2)
      $$invalidate(12, colorFalse = $$props2.colorFalse);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*iconTrue, icon*/
    384) {
      $$invalidate(5, currentIconTrue = getIcon(iconTrue ?? icon ?? defaultIcon));
    }
    if ($$self.$$.dirty & /*iconFalse, icon*/
    640) {
      $$invalidate(4, currentIconFalse = getIcon(iconFalse ?? icon ?? defaultIcon));
    }
    if ($$self.$$.dirty & /*colorTrue, color*/
    3072) {
      $$invalidate(3, currentColorTrue = colorTrue ?? color2 ?? defaultColor);
    }
    if ($$self.$$.dirty & /*colorFalse, color*/
    5120) {
      $$invalidate(2, currentColorFalse = colorFalse ?? color2 ?? defaultColor);
    }
  };
  return [
    value,
    disabled,
    currentColorFalse,
    currentColorTrue,
    currentIconFalse,
    currentIconTrue,
    setValue,
    icon,
    iconTrue,
    iconFalse,
    color2,
    colorTrue,
    colorFalse,
    click_handler,
    click_handler_1
  ];
}
class IconGroupVertical extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$a, create_fragment$9, safe_not_equal, {
      value: 0,
      disabled: 1,
      icon: 7,
      iconTrue: 8,
      iconFalse: 9,
      color: 10,
      colorTrue: 11,
      colorFalse: 12
    });
  }
}
function create_fragment$8(ctx) {
  let switch_instance;
  let updating_value;
  let switch_instance_anchor;
  let current;
  function switch_instance_value_binding(value) {
    ctx[10](value);
  }
  var switch_value = (
    /*component*/
    ctx[8]
  );
  function switch_props(ctx2, dirty) {
    let switch_instance_props = {
      disabled: (
        /*disabled*/
        ctx2[1]
      ),
      icon: (
        /*icon*/
        ctx2[2]
      ),
      iconTrue: (
        /*iconTrue*/
        ctx2[3]
      ),
      iconFalse: (
        /*iconFalse*/
        ctx2[4]
      ),
      color: (
        /*color*/
        ctx2[5]
      ),
      colorTrue: (
        /*colorTrue*/
        ctx2[6]
      ),
      colorFalse: (
        /*colorFalse*/
        ctx2[7]
      )
    };
    if (
      /*value*/
      ctx2[0] !== void 0
    ) {
      switch_instance_props.value = /*value*/
      ctx2[0];
    }
    return { props: switch_instance_props };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    binding_callbacks.push(() => bind(switch_instance, "value", switch_instance_value_binding));
  }
  return {
    c() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*component*/
      256 && switch_value !== (switch_value = /*component*/
      ctx2[8])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          binding_callbacks.push(() => bind(switch_instance, "value", switch_instance_value_binding));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty & /*disabled*/
        2)
          switch_instance_changes.disabled = /*disabled*/
          ctx2[1];
        if (dirty & /*icon*/
        4)
          switch_instance_changes.icon = /*icon*/
          ctx2[2];
        if (dirty & /*iconTrue*/
        8)
          switch_instance_changes.iconTrue = /*iconTrue*/
          ctx2[3];
        if (dirty & /*iconFalse*/
        16)
          switch_instance_changes.iconFalse = /*iconFalse*/
          ctx2[4];
        if (dirty & /*color*/
        32)
          switch_instance_changes.color = /*color*/
          ctx2[5];
        if (dirty & /*colorTrue*/
        64)
          switch_instance_changes.colorTrue = /*colorTrue*/
          ctx2[6];
        if (dirty & /*colorFalse*/
        128)
          switch_instance_changes.colorFalse = /*colorFalse*/
          ctx2[7];
        if (!updating_value && dirty & /*value*/
        1) {
          updating_value = true;
          switch_instance_changes.value = /*value*/
          ctx2[0];
          add_flush_callback(() => updating_value = false);
        }
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(switch_instance_anchor);
      }
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function instance$9($$self, $$props, $$invalidate) {
  let component;
  let { variant = "toggle" } = $$props;
  let { value } = $$props;
  let { disabled } = $$props;
  let { icon = void 0 } = $$props;
  let { iconTrue = void 0 } = $$props;
  let { iconFalse = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  let { colorTrue = void 0 } = $$props;
  let { colorFalse = void 0 } = $$props;
  function getComponent(v) {
    switch (v) {
      case "icon-button":
        return IconButton_1;
      case "icon-group-horizontal":
        return IconGroupHorizontal;
      case "icon-group-vertical":
        return IconGroupVertical;
      case "toggle":
      default:
        return Toggle;
    }
  }
  function switch_instance_value_binding(value$1) {
    value = value$1;
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("variant" in $$props2)
      $$invalidate(9, variant = $$props2.variant);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
    if ("icon" in $$props2)
      $$invalidate(2, icon = $$props2.icon);
    if ("iconTrue" in $$props2)
      $$invalidate(3, iconTrue = $$props2.iconTrue);
    if ("iconFalse" in $$props2)
      $$invalidate(4, iconFalse = $$props2.iconFalse);
    if ("color" in $$props2)
      $$invalidate(5, color2 = $$props2.color);
    if ("colorTrue" in $$props2)
      $$invalidate(6, colorTrue = $$props2.colorTrue);
    if ("colorFalse" in $$props2)
      $$invalidate(7, colorFalse = $$props2.colorFalse);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*variant*/
    512) {
      $$invalidate(8, component = getComponent(variant));
    }
  };
  return [
    value,
    disabled,
    icon,
    iconTrue,
    iconFalse,
    color2,
    colorTrue,
    colorFalse,
    component,
    variant,
    switch_instance_value_binding
  ];
}
let Boolean$1 = class Boolean2 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$9, create_fragment$8, safe_not_equal, {
      variant: 9,
      value: 0,
      disabled: 1,
      icon: 2,
      iconTrue: 3,
      iconFalse: 4,
      color: 5,
      colorTrue: 6,
      colorFalse: 7
    });
  }
};
function create_else_block$5(ctx) {
  var _a2, _b2, _c, _d, _e, _f, _g;
  let div1;
  let h3;
  let t0_value = (
    /*settings*/
    (ctx[0].title ?? /*variable*/
    ctx[1].name) + ""
  );
  let t0;
  let t1;
  let div0;
  let t2;
  let boolean;
  let updating_value;
  let current;
  function boolean_value_binding_1(value) {
    ctx[8](value);
  }
  let boolean_props = {
    variant: (
      /*settings*/
      (_a2 = ctx[0].boolean) == null ? void 0 : _a2.variant
    ),
    color: (
      /*settings*/
      (_b2 = ctx[0].boolean) == null ? void 0 : _b2.color
    ),
    colorTrue: (
      /*settings*/
      (_c = ctx[0].boolean) == null ? void 0 : _c.colorTrue
    ),
    colorFalse: (
      /*settings*/
      (_d = ctx[0].boolean) == null ? void 0 : _d.colorFalse
    ),
    icon: (
      /*settings*/
      (_e = ctx[0].boolean) == null ? void 0 : _e.iconId
    ),
    iconTrue: (
      /*settings*/
      (_f = ctx[0].boolean) == null ? void 0 : _f.iconTrueId
    ),
    iconFalse: (
      /*settings*/
      (_g = ctx[0].boolean) == null ? void 0 : _g.iconFalseId
    ),
    disabled: (
      /*disabled*/
      ctx[5]
    )
  };
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    boolean_props.value = /*value*/
    ctx[3];
  }
  boolean = new Boolean$1({ props: boolean_props });
  binding_callbacks.push(() => bind(boolean, "value", boolean_value_binding_1));
  return {
    c() {
      div1 = element("div");
      h3 = element("h3");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      t2 = space();
      create_component(boolean.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      h3 = claim_element(div1_nodes, "H3", {});
      var h3_nodes = children(h3);
      t0 = claim_text(h3_nodes, t0_value);
      h3_nodes.forEach(detach);
      t1 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      children(div0).forEach(detach);
      t2 = claim_space(div1_nodes);
      claim_component(boolean.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mx-auto");
      attr(div1, "class", "flex flex-row items-center w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, h3);
      append_hydration(h3, t0);
      append_hydration(div1, t1);
      append_hydration(div1, div0);
      append_hydration(div1, t2);
      mount_component(boolean, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3, _b3, _c2, _d2, _e2, _f2, _g2;
      if ((!current || dirty & /*settings, variable*/
      3) && t0_value !== (t0_value = /*settings*/
      (ctx2[0].title ?? /*variable*/
      ctx2[1].name) + ""))
        set_data(t0, t0_value);
      const boolean_changes = {};
      if (dirty & /*settings*/
      1)
        boolean_changes.variant = /*settings*/
        (_a3 = ctx2[0].boolean) == null ? void 0 : _a3.variant;
      if (dirty & /*settings*/
      1)
        boolean_changes.color = /*settings*/
        (_b3 = ctx2[0].boolean) == null ? void 0 : _b3.color;
      if (dirty & /*settings*/
      1)
        boolean_changes.colorTrue = /*settings*/
        (_c2 = ctx2[0].boolean) == null ? void 0 : _c2.colorTrue;
      if (dirty & /*settings*/
      1)
        boolean_changes.colorFalse = /*settings*/
        (_d2 = ctx2[0].boolean) == null ? void 0 : _d2.colorFalse;
      if (dirty & /*settings*/
      1)
        boolean_changes.icon = /*settings*/
        (_e2 = ctx2[0].boolean) == null ? void 0 : _e2.iconId;
      if (dirty & /*settings*/
      1)
        boolean_changes.iconTrue = /*settings*/
        (_f2 = ctx2[0].boolean) == null ? void 0 : _f2.iconTrueId;
      if (dirty & /*settings*/
      1)
        boolean_changes.iconFalse = /*settings*/
        (_g2 = ctx2[0].boolean) == null ? void 0 : _g2.iconFalseId;
      if (dirty & /*disabled*/
      32)
        boolean_changes.disabled = /*disabled*/
        ctx2[5];
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        boolean_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      boolean.$set(boolean_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(boolean.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(boolean.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(boolean);
    }
  };
}
function create_if_block$5(ctx) {
  var _a2, _b2, _c, _d, _e, _f, _g;
  let boolean;
  let updating_value;
  let current;
  function boolean_value_binding(value) {
    ctx[7](value);
  }
  let boolean_props = {
    variant: (
      /*settings*/
      (_a2 = ctx[0].boolean) == null ? void 0 : _a2.variant
    ),
    color: (
      /*settings*/
      (_b2 = ctx[0].boolean) == null ? void 0 : _b2.color
    ),
    colorTrue: (
      /*settings*/
      (_c = ctx[0].boolean) == null ? void 0 : _c.colorTrue
    ),
    colorFalse: (
      /*settings*/
      (_d = ctx[0].boolean) == null ? void 0 : _d.colorFalse
    ),
    icon: (
      /*settings*/
      (_e = ctx[0].boolean) == null ? void 0 : _e.iconId
    ),
    iconTrue: (
      /*settings*/
      (_f = ctx[0].boolean) == null ? void 0 : _f.iconTrueId
    ),
    iconFalse: (
      /*settings*/
      (_g = ctx[0].boolean) == null ? void 0 : _g.iconFalseId
    ),
    disabled: (
      /*disabled*/
      ctx[5]
    )
  };
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    boolean_props.value = /*value*/
    ctx[3];
  }
  boolean = new Boolean$1({ props: boolean_props });
  binding_callbacks.push(() => bind(boolean, "value", boolean_value_binding));
  return {
    c() {
      create_component(boolean.$$.fragment);
    },
    l(nodes) {
      claim_component(boolean.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(boolean, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3, _b3, _c2, _d2, _e2, _f2, _g2;
      const boolean_changes = {};
      if (dirty & /*settings*/
      1)
        boolean_changes.variant = /*settings*/
        (_a3 = ctx2[0].boolean) == null ? void 0 : _a3.variant;
      if (dirty & /*settings*/
      1)
        boolean_changes.color = /*settings*/
        (_b3 = ctx2[0].boolean) == null ? void 0 : _b3.color;
      if (dirty & /*settings*/
      1)
        boolean_changes.colorTrue = /*settings*/
        (_c2 = ctx2[0].boolean) == null ? void 0 : _c2.colorTrue;
      if (dirty & /*settings*/
      1)
        boolean_changes.colorFalse = /*settings*/
        (_d2 = ctx2[0].boolean) == null ? void 0 : _d2.colorFalse;
      if (dirty & /*settings*/
      1)
        boolean_changes.icon = /*settings*/
        (_e2 = ctx2[0].boolean) == null ? void 0 : _e2.iconId;
      if (dirty & /*settings*/
      1)
        boolean_changes.iconTrue = /*settings*/
        (_f2 = ctx2[0].boolean) == null ? void 0 : _f2.iconTrueId;
      if (dirty & /*settings*/
      1)
        boolean_changes.iconFalse = /*settings*/
        (_g2 = ctx2[0].boolean) == null ? void 0 : _g2.iconFalseId;
      if (dirty & /*disabled*/
      32)
        boolean_changes.disabled = /*disabled*/
        ctx2[5];
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        boolean_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      boolean.$set(boolean_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(boolean.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(boolean.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(boolean, detaching);
    }
  };
}
function create_fragment$7(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block$5, create_else_block$5];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      toggle_class(
        div,
        "w-full",
        /*mode*/
        ctx[2] === "view"
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          div,
          "click",
          /*click_handler*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      if (!current || dirty & /*mode*/
      4) {
        toggle_class(
          div,
          "w-full",
          /*mode*/
          ctx2[2] === "view"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      mounted = false;
      dispose();
    }
  };
}
function instance$8($$self, $$props, $$invalidate) {
  let disabled;
  let $homey;
  let $editing;
  component_subscribe($$self, homey, ($$value) => $$invalidate(10, $homey = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(4, $editing = $$value));
  let { settings } = $$props;
  let { variable } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let value;
  function onVariable(c2) {
    $$invalidate(3, value = !!c2.value);
  }
  async function onValue(v) {
    if (v !== (variable == null ? void 0 : variable.value)) {
      if (!disabled) {
        await setVariableValue(v);
      } else {
        $$invalidate(3, value = !v);
      }
    }
  }
  async function setVariableValue(value2) {
    await $homey.logic.updateVariable({
      id: variable.id,
      variable: { value: value2 }
    });
  }
  function boolean_value_binding(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  function boolean_value_binding_1(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  const click_handler = (e2) => {
    if (!$editing) {
      e2.stopPropagation();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("variable" in $$props2)
      $$invalidate(1, variable = $$props2.variable);
    if ("controllable" in $$props2)
      $$invalidate(6, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    80) {
      $$invalidate(5, disabled = !controllable || $editing);
    }
    if ($$self.$$.dirty & /*variable*/
    2) {
      onVariable(variable);
    }
    if ($$self.$$.dirty & /*value*/
    8) {
      onValue(value);
    }
  };
  return [
    settings,
    variable,
    mode,
    value,
    $editing,
    disabled,
    controllable,
    boolean_value_binding,
    boolean_value_binding_1,
    click_handler
  ];
}
class BooleanVariable extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$8, create_fragment$7, safe_not_equal, {
      settings: 0,
      variable: 1,
      controllable: 6,
      mode: 2
    });
  }
}
function create_else_block$4(ctx) {
  let div1;
  let h3;
  let t0_value = (
    /*settings*/
    (ctx[0].title ?? /*variable*/
    ctx[1].name) + ""
  );
  let t0;
  let t1;
  let div0;
  let t2;
  let iconbutton;
  let t3;
  let input;
  let updating_value;
  let current;
  iconbutton = new IconButton({ props: { data: mdiContentSave } });
  iconbutton.$on(
    "click",
    /*click_handler*/
    ctx[8]
  );
  function input_value_binding(value) {
    ctx[9](value);
  }
  let input_props = {
    name: "text",
    disabled: (
      /*disabled*/
      ctx[4]
    )
  };
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    input_props.value = /*value*/
    ctx[3];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  return {
    c() {
      div1 = element("div");
      h3 = element("h3");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      t2 = space();
      create_component(iconbutton.$$.fragment);
      t3 = space();
      create_component(input.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      h3 = claim_element(div1_nodes, "H3", {});
      var h3_nodes = children(h3);
      t0 = claim_text(h3_nodes, t0_value);
      h3_nodes.forEach(detach);
      t1 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      children(div0).forEach(detach);
      t2 = claim_space(div1_nodes);
      claim_component(iconbutton.$$.fragment, div1_nodes);
      t3 = claim_space(div1_nodes);
      claim_component(input.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mx-auto");
      attr(div1, "class", "flex flex-row items-center w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, h3);
      append_hydration(h3, t0);
      append_hydration(div1, t1);
      append_hydration(div1, div0);
      append_hydration(div1, t2);
      mount_component(iconbutton, div1, null);
      append_hydration(div1, t3);
      mount_component(input, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & /*settings, variable*/
      3) && t0_value !== (t0_value = /*settings*/
      (ctx2[0].title ?? /*variable*/
      ctx2[1].name) + ""))
        set_data(t0, t0_value);
      const input_changes = {};
      if (dirty & /*disabled*/
      16)
        input_changes.disabled = /*disabled*/
        ctx2[4];
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        input_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      transition_in(input.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      transition_out(input.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(iconbutton);
      destroy_component(input);
    }
  };
}
function create_if_block$4(ctx) {
  let span;
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(
        /*value*/
        ctx[3]
      );
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(
        span_nodes,
        /*value*/
        ctx[3]
      );
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      8)
        set_data(
          t2,
          /*value*/
          ctx2[3]
        );
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$6(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block$4, create_else_block$4];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      toggle_class(
        div,
        "w-full",
        /*mode*/
        ctx[2] === "view"
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      if (!current || dirty & /*mode*/
      4) {
        toggle_class(
          div,
          "w-full",
          /*mode*/
          ctx2[2] === "view"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$7($$self, $$props, $$invalidate) {
  let disabled;
  let $homey;
  let $editing;
  component_subscribe($$self, homey, ($$value) => $$invalidate(10, $homey = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(7, $editing = $$value));
  let { settings } = $$props;
  let { variable } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let value;
  function onVariable(c2) {
    $$invalidate(3, value = c2.value);
  }
  async function saveValue() {
    if (value !== (variable == null ? void 0 : variable.value)) {
      if (!disabled) {
        await setVariableValue(value);
      }
    }
  }
  async function setVariableValue(value2) {
    await $homey.logic.updateVariable({
      id: variable.id,
      variable: { value: value2 }
    });
  }
  const click_handler = () => saveValue();
  function input_value_binding(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("variable" in $$props2)
      $$invalidate(1, variable = $$props2.variable);
    if ("controllable" in $$props2)
      $$invalidate(6, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    192) {
      $$invalidate(4, disabled = !controllable || $editing);
    }
    if ($$self.$$.dirty & /*variable*/
    2) {
      onVariable(variable);
    }
  };
  return [
    settings,
    variable,
    mode,
    value,
    disabled,
    saveValue,
    controllable,
    $editing,
    click_handler,
    input_value_binding
  ];
}
class TextVariable extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$7, create_fragment$6, safe_not_equal, {
      settings: 0,
      variable: 1,
      controllable: 6,
      mode: 2
    });
  }
}
function create_else_block_1(ctx) {
  let span;
  function select_block_type_2(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].variableId !== void 0
    )
      return create_if_block_4$1;
    return create_else_block_2;
  }
  let current_block_type = select_block_type_2(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      span = element("span");
      if_block.c();
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      if_block.l(span_nodes);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "w-full h-8 overflow-hidden overflow-ellipsis font-extralight");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      if_block.m(span, null);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_2(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(span, null);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      if_block.d();
    }
  };
}
function create_if_block$3(ctx) {
  let div1;
  let t0;
  let div0;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? /*variable*/
    ctx[1].name) + ""
  );
  let t1;
  let t2;
  let current_block_type_index;
  let if_block1;
  let current;
  let if_block0 = (
    /*settings*/
    ctx[0].iconId !== void 0 && create_if_block_3$2(ctx)
  );
  const if_block_creators = [create_if_block_1$2, create_if_block_2$2, create_else_block$3];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*variable*/
      ctx2[1].type === "number"
    )
      return 0;
    if (
      /*variable*/
      ctx2[1].type === "boolean"
    )
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div1 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div0 = element("div");
      t1 = text(t1_value);
      t2 = space();
      if_block1.c();
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      if (if_block0)
        if_block0.l(div1_nodes);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      t1 = claim_text(div0_nodes, t1_value);
      div0_nodes.forEach(detach);
      t2 = claim_space(div1_nodes);
      if_block1.l(div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "font-extralight overflow-hidden overflow-ellipsis whitespace-nowrap flex-grow");
      attr(div1, "class", "flex items-center justify-between w-full pl-1 pr-1 leading-normal cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      if (if_block0)
        if_block0.m(div1, null);
      append_hydration(div1, t0);
      append_hydration(div1, div0);
      append_hydration(div0, t1);
      append_hydration(div1, t2);
      if_blocks[current_block_type_index].m(div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*settings*/
        ctx2[0].iconId !== void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*settings*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_3$2(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div1, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*settings, variable*/
      3) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? /*variable*/
      ctx2[1].name) + ""))
        set_data(t1, t1_value);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(div1, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block0)
        if_block0.d();
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_else_block_2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Variable not configured");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Variable not configured");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_4$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Variable not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Variable not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_3$2(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      ),
      extraClass: "mr-1"
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_else_block$3(ctx) {
  let textvariable;
  let current;
  textvariable = new TextVariable({
    props: {
      settings: (
        /*settings*/
        ctx[0]
      ),
      variable: (
        /*variable*/
        ctx[1]
      ),
      controllable: (
        /*controllable*/
        ctx[2]
      ),
      mode: "card"
    }
  });
  return {
    c() {
      create_component(textvariable.$$.fragment);
    },
    l(nodes) {
      claim_component(textvariable.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(textvariable, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const textvariable_changes = {};
      if (dirty & /*settings*/
      1)
        textvariable_changes.settings = /*settings*/
        ctx2[0];
      if (dirty & /*variable*/
      2)
        textvariable_changes.variable = /*variable*/
        ctx2[1];
      if (dirty & /*controllable*/
      4)
        textvariable_changes.controllable = /*controllable*/
        ctx2[2];
      textvariable.$set(textvariable_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textvariable.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textvariable.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(textvariable, detaching);
    }
  };
}
function create_if_block_2$2(ctx) {
  let booleanvariable;
  let current;
  booleanvariable = new BooleanVariable({
    props: {
      settings: (
        /*settings*/
        ctx[0]
      ),
      variable: (
        /*variable*/
        ctx[1]
      ),
      controllable: (
        /*controllable*/
        ctx[2]
      ),
      mode: "card"
    }
  });
  return {
    c() {
      create_component(booleanvariable.$$.fragment);
    },
    l(nodes) {
      claim_component(booleanvariable.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(booleanvariable, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const booleanvariable_changes = {};
      if (dirty & /*settings*/
      1)
        booleanvariable_changes.settings = /*settings*/
        ctx2[0];
      if (dirty & /*variable*/
      2)
        booleanvariable_changes.variable = /*variable*/
        ctx2[1];
      if (dirty & /*controllable*/
      4)
        booleanvariable_changes.controllable = /*controllable*/
        ctx2[2];
      booleanvariable.$set(booleanvariable_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(booleanvariable.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(booleanvariable.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(booleanvariable, detaching);
    }
  };
}
function create_if_block_1$2(ctx) {
  let numbervariable;
  let current;
  numbervariable = new NumberVariable({
    props: {
      settings: (
        /*settings*/
        ctx[0]
      ),
      variable: (
        /*variable*/
        ctx[1]
      ),
      controllable: (
        /*controllable*/
        ctx[2]
      ),
      mode: "card"
    }
  });
  return {
    c() {
      create_component(numbervariable.$$.fragment);
    },
    l(nodes) {
      claim_component(numbervariable.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(numbervariable, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const numbervariable_changes = {};
      if (dirty & /*settings*/
      1)
        numbervariable_changes.settings = /*settings*/
        ctx2[0];
      if (dirty & /*variable*/
      2)
        numbervariable_changes.variable = /*variable*/
        ctx2[1];
      if (dirty & /*controllable*/
      4)
        numbervariable_changes.controllable = /*controllable*/
        ctx2[2];
      numbervariable.$set(numbervariable_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(numbervariable.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(numbervariable.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(numbervariable, detaching);
    }
  };
}
function create_fragment$5(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$3, create_else_block_1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*variable*/
      ctx2[1] !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$6($$self, $$props, $$invalidate) {
  let controllable;
  let $scopes;
  let $variables;
  component_subscribe($$self, scopes, ($$value) => $$invalidate(5, $scopes = $$value));
  component_subscribe($$self, variables, ($$value) => $$invalidate(6, $variables = $$value));
  let { context } = $$props;
  let { settings } = $$props;
  let variableId = "";
  let variable;
  function onSettings(s3) {
    $$invalidate(4, variableId = s3.variableId ?? "");
  }
  $$self.$$set = ($$props2) => {
    if ("context" in $$props2)
      $$invalidate(3, context = $$props2.context);
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*$variables, variableId*/
    80) {
      $$invalidate(1, variable = $variables[variableId]);
    }
    if ($$self.$$.dirty & /*$scopes*/
    32) {
      $$invalidate(2, controllable = $scopes.includes("homey") || $scopes.includes("homey.logic"));
    }
  };
  return [settings, variable, controllable, context, variableId, $scopes, $variables];
}
class VariableWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$6, create_fragment$5, safe_not_equal, { context: 3, settings: 0 });
  }
}
function create() {
  return {
    id: v4(),
    type: "variable",
    version: 2
  };
}
function migrate(settings) {
  while (settings.version !== 3) {
    settings = migrateOnce(settings);
  }
  return settings;
}
function migrateOnce(settings) {
  switch (settings.version) {
    case 3:
      return settings;
    case 2:
      return migrate_v2_v3(settings);
    case 1:
    default:
      return migrate_v1_v2(settings);
  }
}
function migrate_v2_v3(v2) {
  var _a2;
  const settings = {
    ...v2,
    version: 3,
    iconId: (_a2 = v2.boolean) == null ? void 0 : _a2.iconId
  };
  return settings;
}
function migrate_v1_v2(v1) {
  const settings = {
    id: v1.id,
    type: v1.type,
    version: 2,
    variableId: v1.variableId,
    title: v1.title
  };
  if (v1.number) {
    settings.number = {
      min: v1.number.min,
      max: v1.number.max,
      step: v1.number.step,
      unit: v1.number.unit
    };
  }
  if (v1.iconId) {
    settings.boolean = {
      iconId: v1.iconId
    };
  }
  return settings;
}
const info$1 = {
  type: "variable",
  label: "Variable",
  icon: mdiVariable,
  category: "component",
  widget: VariableWidget,
  editor: VariableEditor,
  scopes: [
    { oneOf: ["homey", "homey.logic", "homey.logic.readonly"] }
  ],
  create,
  migration: migrate,
  deprecated: true
};
function instance$5($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  createEventDispatcher();
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1)
      ;
  };
  return [settings];
}
class DialogEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$5, null, safe_not_equal, { settings: 0 });
  }
}
function create_if_block_3$1(ctx) {
  let div;
  let widget;
  let current;
  let mounted;
  let dispose;
  widget = new Widget({
    props: {
      context: (
        /*context*/
        ctx[0]
      ),
      settings: (
        /*summary*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      div = element("div");
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      claim_component(widget.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(widget, div, null);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", stop_propagation(prevent_default(
          /*click_handler_1*/
          ctx[10]
        )));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty & /*context*/
      1)
        widget_changes.context = /*context*/
        ctx2[0];
      if (dirty & /*summary*/
      4)
        widget_changes.settings = /*summary*/
        ctx2[2];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(widget);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$1(ctx) {
  let button;
  let textContent = "Open";
  let t1;
  let dndsingle;
  let current;
  let mounted;
  let dispose;
  dndsingle = new DndSingle({
    props: {
      item: (
        /*summary*/
        ctx[2]
      ),
      editable: (
        /*context*/
        ctx[0].editable
      ),
      class: "w-full " + /*context*/
      (ctx[0].editable ? "min-h-[50px] min-w-[100px]" : "") + " " + /*summary*/
      (ctx[2] === void 0 ? "border border-dashed" : ""),
      $$slots: {
        default: [
          create_default_slot_1$1,
          ({ item }) => ({ 17: item }),
          ({ item }) => item ? 131072 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  dndsingle.$on(
    "item",
    /*item_handler*/
    ctx[9]
  );
  return {
    c() {
      button = element("button");
      button.textContent = textContent;
      t1 = space();
      create_component(dndsingle.$$.fragment);
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(button) !== "svelte-imae36")
        button.textContent = textContent;
      t1 = claim_space(nodes);
      claim_component(dndsingle.$$.fragment, nodes);
      this.h();
    },
    h() {
      attr(button, "class", "btn btn-circle btn-sm");
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(dndsingle, target, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", stop_propagation(
          /*click_handler*/
          ctx[7]
        ));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const dndsingle_changes = {};
      if (dirty & /*summary*/
      4)
        dndsingle_changes.item = /*summary*/
        ctx2[2];
      if (dirty & /*context*/
      1)
        dndsingle_changes.editable = /*context*/
        ctx2[0].editable;
      if (dirty & /*context, summary*/
      5)
        dndsingle_changes.class = "w-full " + /*context*/
        (ctx2[0].editable ? "min-h-[50px] min-w-[100px]" : "") + " " + /*summary*/
        (ctx2[2] === void 0 ? "border border-dashed" : "");
      if (dirty & /*$$scope, context, item*/
      393217) {
        dndsingle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dndsingle.$set(dndsingle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dndsingle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dndsingle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t1);
      }
      destroy_component(dndsingle, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot_1$1(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      context: (
        /*context*/
        ctx[0]
      ),
      settings: (
        /*item*/
        ctx[17]
      )
    }
  });
  widget.$on(
    "settings",
    /*settings_handler*/
    ctx[8]
  );
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty & /*context*/
      1)
        widget_changes.context = /*context*/
        ctx2[0];
      if (dirty & /*item*/
      131072)
        widget_changes.settings = /*item*/
        ctx2[17];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_else_block$2(ctx) {
  let dialog;
  let div;
  let t0;
  let form;
  let textContent = `<button>close</button>`;
  let current;
  let if_block = (
    /*details*/
    ctx[3] !== void 0 && create_if_block_1$1(ctx)
  );
  return {
    c() {
      dialog = element("dialog");
      div = element("div");
      if (if_block)
        if_block.c();
      t0 = space();
      form = element("form");
      form.innerHTML = textContent;
      this.h();
    },
    l(nodes) {
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div = claim_element(dialog_nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (if_block)
        if_block.l(div_nodes);
      div_nodes.forEach(detach);
      t0 = claim_space(dialog_nodes);
      form = claim_element(dialog_nodes, "FORM", {
        method: true,
        class: true,
        ["data-svelte-h"]: true
      });
      if (get_svelte_dataset(form) !== "svelte-1m3vtvz")
        form.innerHTML = textContent;
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "modal-box flex flex-col");
      attr(form, "method", "dialog");
      attr(form, "class", "modal-backdrop bg-base-300/90");
      attr(dialog, "class", "modal modal-bottom sm:modal-middle");
    },
    m(target, anchor) {
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div);
      if (if_block)
        if_block.m(div, null);
      append_hydration(dialog, t0);
      append_hydration(dialog, form);
      ctx[14](dialog);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*details*/
        ctx2[3] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*details*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$1(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(dialog);
      }
      if (if_block)
        if_block.d();
      ctx[14](null);
    }
  };
}
function create_if_block$2(ctx) {
  let dialog;
  let div1;
  let dndsingle;
  let t0;
  let div0;
  let textContent = `<form method="dialog"><button class="btn">Close</button></form>`;
  let current;
  let mounted;
  let dispose;
  dndsingle = new DndSingle({
    props: {
      item: (
        /*details*/
        ctx[3]
      ),
      editable: (
        /*context*/
        ctx[0].editable
      ),
      class: "w-full " + /*context*/
      (ctx[0].editable ? "min-h-[50px]" : "") + " " + /*details*/
      (ctx[3] === void 0 ? "border border-dashed" : ""),
      $$slots: {
        default: [
          create_default_slot$1,
          ({ item }) => ({ 17: item }),
          ({ item }) => item ? 131072 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  dndsingle.$on(
    "item",
    /*item_handler_1*/
    ctx[12]
  );
  return {
    c() {
      dialog = element("dialog");
      div1 = element("div");
      create_component(dndsingle.$$.fragment);
      t0 = space();
      div0 = element("div");
      div0.innerHTML = textContent;
      this.h();
    },
    l(nodes) {
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div1 = claim_element(dialog_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      claim_component(dndsingle.$$.fragment, div1_nodes);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div0) !== "svelte-q8qkp0")
        div0.innerHTML = textContent;
      div1_nodes.forEach(detach);
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "modal-action");
      attr(div1, "class", "modal-box flex flex-col pointer-events-auto");
      attr(dialog, "class", "fixed top-0 w-full h-full z-10 bg-transparent place-items-center content-center pointer-events-none");
    },
    m(target, anchor) {
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div1);
      mount_component(dndsingle, div1, null);
      append_hydration(div1, t0);
      append_hydration(div1, div0);
      ctx[13](dialog);
      current = true;
      if (!mounted) {
        dispose = listen(dialog, "click", stop_propagation(click_handler_2));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const dndsingle_changes = {};
      if (dirty & /*details*/
      8)
        dndsingle_changes.item = /*details*/
        ctx2[3];
      if (dirty & /*context*/
      1)
        dndsingle_changes.editable = /*context*/
        ctx2[0].editable;
      if (dirty & /*context, details*/
      9)
        dndsingle_changes.class = "w-full " + /*context*/
        (ctx2[0].editable ? "min-h-[50px]" : "") + " " + /*details*/
        (ctx2[3] === void 0 ? "border border-dashed" : "");
      if (dirty & /*$$scope, context, item*/
      393217) {
        dndsingle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dndsingle.$set(dndsingle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dndsingle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dndsingle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(dialog);
      }
      destroy_component(dndsingle);
      ctx[13](null);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$1(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      context: (
        /*context*/
        ctx[0]
      ),
      settings: (
        /*details*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty & /*context*/
      1)
        widget_changes.context = /*context*/
        ctx2[0];
      if (dirty & /*details*/
      8)
        widget_changes.settings = /*details*/
        ctx2[3];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_default_slot$1(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      context: (
        /*context*/
        ctx[0]
      ),
      settings: (
        /*item*/
        ctx[17]
      )
    }
  });
  widget.$on(
    "settings",
    /*settings_handler_1*/
    ctx[11]
  );
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty & /*context*/
      1)
        widget_changes.context = /*context*/
        ctx2[0];
      if (dirty & /*item*/
      131072)
        widget_changes.settings = /*item*/
        ctx2[17];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_fragment$4(ctx) {
  let current_block_type_index;
  let if_block0;
  let t2;
  let current_block_type_index_1;
  let if_block1;
  let if_block1_anchor;
  let current;
  const if_block_creators = [create_if_block_2$1, create_if_block_3$1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*context*/
      ctx2[0].editable
    )
      return 0;
    if (
      /*summary*/
      ctx2[2] !== void 0
    )
      return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  const if_block_creators_1 = [create_if_block$2, create_else_block$2];
  const if_blocks_1 = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*context*/
      ctx2[0].editable
    )
      return 0;
    return 1;
  }
  current_block_type_index_1 = select_block_type_1(ctx);
  if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t2 = space();
      if_block1.c();
      if_block1_anchor = empty();
    },
    l(nodes) {
      if (if_block0)
        if_block0.l(nodes);
      t2 = claim_space(nodes);
      if_block1.l(nodes);
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_hydration(target, t2, anchor);
      if_blocks_1[current_block_type_index_1].m(target, anchor);
      insert_hydration(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block0) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block0 = if_blocks[current_block_type_index];
          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block0.c();
          } else {
            if_block0.p(ctx2, dirty);
          }
          transition_in(if_block0, 1);
          if_block0.m(t2.parentNode, t2);
        } else {
          if_block0 = null;
        }
      }
      let previous_block_index_1 = current_block_type_index_1;
      current_block_type_index_1 = select_block_type_1(ctx2);
      if (current_block_type_index_1 === previous_block_index_1) {
        if_blocks_1[current_block_type_index_1].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
          if_blocks_1[previous_block_index_1] = null;
        });
        check_outros();
        if_block1 = if_blocks_1[current_block_type_index_1];
        if (!if_block1) {
          if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(if_block1_anchor);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
      if_blocks_1[current_block_type_index_1].d(detaching);
    }
  };
}
const click_handler_2 = (e2) => {
};
function instance$4($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  let { context } = $$props;
  const dispatch = createEventDispatcher();
  let modal;
  let summary;
  let details;
  function onSettings(_settings) {
    $$invalidate(2, summary = _settings.summary);
    $$invalidate(3, details = _settings.details);
  }
  function onSummaryItem(_item) {
    $$invalidate(2, summary = _item ? { ..._item } : void 0);
    $$invalidate(6, settings = { ...settings, summary });
    dispatch("settings", settings);
  }
  function onDetailsItem(_item) {
    $$invalidate(3, details = _item ? { ..._item } : void 0);
    $$invalidate(6, settings = { ...settings, details });
    dispatch("settings", settings);
  }
  const click_handler = (e2) => modal.show();
  const settings_handler = (e2) => onSummaryItem(e2.detail);
  const item_handler = (e2) => onSummaryItem(e2.detail);
  const click_handler_1 = (e2) => modal.show();
  const settings_handler_1 = (e2) => onDetailsItem(e2.detail);
  const item_handler_1 = (e2) => onDetailsItem(e2.detail);
  function dialog_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(1, modal);
    });
  }
  function dialog_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(1, modal);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(6, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(0, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    64) {
      onSettings(settings);
    }
  };
  return [
    context,
    modal,
    summary,
    details,
    onSummaryItem,
    onDetailsItem,
    settings,
    click_handler,
    settings_handler,
    item_handler,
    click_handler_1,
    settings_handler_1,
    item_handler_1,
    dialog_binding,
    dialog_binding_1
  ];
}
class DialogWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$4, create_fragment$4, safe_not_equal, { settings: 6, context: 0 });
  }
}
const info = {
  type: "dialog",
  label: "Dialog",
  icon: mdiApplication,
  category: "component",
  widget: DialogWidget,
  editor: DialogEditor,
  scopes: [],
  create: () => ({ id: v4(), type: "dialog", version: 1 }),
  migration: (e2) => e2
};
const widgets = [
  info$l,
  info$k,
  info$j,
  info$h,
  info$f,
  info$e,
  info$d,
  info$c,
  info$b,
  info$g,
  info$a,
  info$9,
  info$8,
  info$7,
  //StatisticInfo,
  info$6,
  info$5,
  info$3,
  info$4,
  info$1,
  info$i,
  info
];
const categories = [
  { id: "layout", label: "Layouts" },
  { id: "logic", label: "Logic" },
  { id: "component", label: "Components" }
];
function findInfo(type) {
  return widgets.find((widget) => widget.type === type);
}
function findLabel(type) {
  var _a2;
  return (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.label;
}
function findWidget(type) {
  var _a2;
  const component = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.widget;
  if (component !== void 0) {
    return component;
  }
  return info$2.widget;
}
function findEditor(type) {
  var _a2;
  const editor = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.editor;
  if (editor !== void 0) {
    return editor;
  }
  return info$2.editor;
}
function get_each_context$2(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[19] = list[i2];
  child_ctx[21] = i2;
  return child_ctx;
}
function get_each_context_1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[22] = list[i2];
  return child_ctx;
}
function get_each_context_2(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[22] = list[i2];
  return child_ctx;
}
function create_else_block$1(ctx) {
  let div;
  let textContent = `<span class="text-warning italic">No templates found.</span>`;
  return {
    c() {
      div = element("div");
      div.innerHTML = textContent;
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-12bssw1")
        div.innerHTML = textContent;
      this.h();
    },
    h() {
      attr(div, "class", "w-full p-2");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block$1(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let dndzone_action;
  let current;
  let mounted;
  let dispose;
  let each_value_2 = ensure_array_like(
    /*templateItems*/
    ctx[1]
  );
  const get_key = (ctx2) => (
    /*item*/
    ctx2[22].id
  );
  for (let i2 = 0; i2 < each_value_2.length; i2 += 1) {
    let child_ctx = get_each_context_2(ctx, each_value_2, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block_2(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div_nodes);
      }
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "w-full p-2");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone.call(null, div, {
            items: (
              /*templateItems*/
              ctx[1]
            ),
            flipDurationMs: flipDurationMs$1,
            centreDraggedOnCursor: true,
            dropFromOthersDisabled: true
          })),
          listen(
            div,
            "consider",
            /*consider_handler*/
            ctx[9]
          ),
          listen(
            div,
            "finalize",
            /*finalize_handler*/
            ctx[10]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*getTemplateLabel, templateItems*/
      18) {
        each_value_2 = ensure_array_like(
          /*templateItems*/
          ctx2[1]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value_2, each_1_lookup, div, outro_and_destroy_block, create_each_block_2, null, get_each_context_2);
        check_outros();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & /*templateItems*/
      2)
        dndzone_action.update.call(null, {
          items: (
            /*templateItems*/
            ctx2[1]
          ),
          flipDurationMs: flipDurationMs$1,
          centreDraggedOnCursor: true,
          dropFromOthersDisabled: true
        });
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_2.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_each_block_2(key_1, ctx) {
  let div;
  let icon;
  let t0;
  let span;
  let t1_value = (
    /*getTemplateLabel*/
    ctx[4](
      /*item*/
      ctx[22].templateId
    ) + ""
  );
  let t1;
  let t2;
  let current;
  icon = new Icon({ props: { data: mdiPlay } });
  return {
    key: key_1,
    first: null,
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(icon.$$.fragment, div_nodes);
      t0 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", {});
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex flex-row py-1");
      this.first = div;
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(icon, div, null);
      append_hydration(div, t0);
      append_hydration(div, span);
      append_hydration(span, t1);
      append_hydration(div, t2);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & /*templateItems*/
      2) && t1_value !== (t1_value = /*getTemplateLabel*/
      ctx[4](
        /*item*/
        ctx[22].templateId
      ) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
    }
  };
}
function create_each_block_1(key_1, ctx) {
  let div;
  let icon;
  let t0;
  let span;
  let t1_value = (
    /*getWidgetLabel*/
    ctx[3](
      /*item*/
      ctx[22].type
    ) + ""
  );
  let t1;
  let current;
  icon = new Icon({
    props: {
      data: (
        /*getWidgetIcon*/
        ctx[2](
          /*item*/
          ctx[22].type
        )
      )
    }
  });
  return {
    key: key_1,
    first: null,
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(icon.$$.fragment, div_nodes);
      t0 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "ml-2");
      attr(div, "class", "flex flex-row py-1");
      this.first = div;
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(icon, div, null);
      append_hydration(div, t0);
      append_hydration(div, span);
      append_hydration(span, t1);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const icon_changes = {};
      if (dirty & /*widgetItems*/
      1)
        icon_changes.data = /*getWidgetIcon*/
        ctx[2](
          /*item*/
          ctx[22].type
        );
      icon.$set(icon_changes);
      if ((!current || dirty & /*widgetItems*/
      1) && t1_value !== (t1_value = /*getWidgetLabel*/
      ctx[3](
        /*item*/
        ctx[22].type
      ) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
    }
  };
}
function create_each_block$2(ctx) {
  let h23;
  let t0_value = categories[
    /*index*/
    ctx[21]
  ].label + "";
  let t0;
  let t1;
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let t2;
  let dndzone_action;
  let current;
  let mounted;
  let dispose;
  let each_value_1 = ensure_array_like(
    /*items*/
    ctx[19]
  );
  const get_key = (ctx2) => (
    /*item*/
    ctx2[22].id
  );
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    let child_ctx = get_each_context_1(ctx, each_value_1, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block_1(key, child_ctx));
  }
  function consider_handler_1(...args) {
    return (
      /*consider_handler_1*/
      ctx[11](
        /*index*/
        ctx[21],
        ...args
      )
    );
  }
  function finalize_handler_1(...args) {
    return (
      /*finalize_handler_1*/
      ctx[12](
        /*index*/
        ctx[21],
        ...args
      )
    );
  }
  return {
    c() {
      h23 = element("h2");
      t0 = text(t0_value);
      t1 = space();
      div = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t2 = space();
      this.h();
    },
    l(nodes) {
      h23 = claim_element(nodes, "H2", { class: true });
      var h2_nodes = children(h23);
      t0 = claim_text(h2_nodes, t0_value);
      h2_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div_nodes);
      }
      t2 = claim_space(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h23, "class", "text-xl");
      attr(div, "class", "w-full p-2");
    },
    m(target, anchor) {
      insert_hydration(target, h23, anchor);
      append_hydration(h23, t0);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div, null);
        }
      }
      append_hydration(div, t2);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone.call(null, div, {
            items: (
              /*items*/
              ctx[19]
            ),
            flipDurationMs: flipDurationMs$1,
            centreDraggedOnCursor: true,
            dropFromOthersDisabled: true
          })),
          listen(div, "consider", consider_handler_1),
          listen(div, "finalize", finalize_handler_1)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*getWidgetLabel, widgetItems, getWidgetIcon*/
      13) {
        each_value_1 = ensure_array_like(
          /*items*/
          ctx[19]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, div, outro_and_destroy_block, create_each_block_1, t2, get_each_context_1);
        check_outros();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & /*widgetItems*/
      1)
        dndzone_action.update.call(null, {
          items: (
            /*items*/
            ctx[19]
          ),
          flipDurationMs: flipDurationMs$1,
          centreDraggedOnCursor: true,
          dropFromOthersDisabled: true
        });
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(h23);
        detach(t1);
        detach(div);
      }
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment$3(ctx) {
  let div;
  let h23;
  let textContent = "Templates";
  let t1;
  let current_block_type_index;
  let if_block;
  let t2;
  let current;
  const if_block_creators = [create_if_block$1, create_else_block$1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*templateItems*/
      ctx2[1].length > 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let each_value = ensure_array_like(
    /*widgetItems*/
    ctx[0]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$2(get_each_context$2(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      div = element("div");
      h23 = element("h2");
      h23.textContent = textContent;
      t1 = space();
      if_block.c();
      t2 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      h23 = claim_element(div_nodes, "H2", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(h23) !== "svelte-rbacbu")
        h23.textContent = textContent;
      t1 = claim_space(div_nodes);
      if_block.l(div_nodes);
      t2 = claim_space(div_nodes);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div_nodes);
      }
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h23, "class", "text-xl");
      attr(div, "class", "w-full h-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, h23);
      append_hydration(div, t1);
      if_blocks[current_block_type_index].m(div, null);
      append_hydration(div, t2);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, t2);
      }
      if (dirty & /*widgetItems, flipDurationMs, considerDndWidgets, finalizeDndWidgets, getWidgetLabel, getWidgetIcon*/
      109) {
        each_value = ensure_array_like(
          /*widgetItems*/
          ctx2[0]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$2(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$2(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(div, null);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      transition_out(if_block);
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      destroy_each(each_blocks, detaching);
    }
  };
}
const flipDurationMs$1 = 300;
function instance$3($$self, $$props, $$invalidate) {
  let $templates;
  component_subscribe($$self, templates, ($$value) => $$invalidate(13, $templates = $$value));
  const dispatch = createEventDispatcher();
  let widgetItems = getWidgets();
  let templateItems = getTemplates($templates);
  function getWidgets() {
    return categories.map((c2) => widgets.filter((w2) => w2.category === c2.id && w2.type !== info$5.type && !w2.deprecated).map((w2) => w2.create()));
  }
  function getTemplates(_templates) {
    let result;
    result = Object.values(_templates).map((template) => {
      const settings = info$5.create();
      settings.templateId = template.id;
      return settings;
    });
    return result;
  }
  function getWidgetIcon(type) {
    const info2 = findInfo(type);
    return (info2 == null ? void 0 : info2.icon) ?? mdiHelp;
  }
  function getWidgetLabel(type) {
    const info2 = findInfo(type);
    return (info2 == null ? void 0 : info2.label) ?? "Unkown";
  }
  function getTemplateLabel(templateId) {
    const info2 = $templates[templateId];
    return (info2 == null ? void 0 : info2.title) ?? "Unkown";
  }
  function considerDndWidgets(_category, _items, trigger) {
    handleDndWidgets(_category, _items, trigger, false);
  }
  function finalizeDndWidgets(_category, _items, trigger) {
    handleDndWidgets(_category, _items, trigger, true);
  }
  function handleDndWidgets(_category, _items, trigger, finalize) {
    const index2 = widgetItems[_category].findIndex((i2) => !_items.some((w2) => w2.id === i2.id));
    if (index2 > -1) {
      const item = widgetItems[_category][index2];
      $$invalidate(0, widgetItems[_category][index2] = findInfo(item.type).create(), widgetItems);
      $$invalidate(0, widgetItems = [...widgetItems]);
    }
    if (trigger === "dragStarted") {
      dispatch("dragging", true);
    } else if (finalize) {
      dispatch("dragging", false);
    }
  }
  function considerDndTemplates(_items, trigger) {
    handleDndTemplates(_items, trigger, false);
  }
  function finalizeDndTemplates(_items, trigger) {
    handleDndTemplates(_items, trigger, true);
  }
  function handleDndTemplates(_items, trigger, finalize) {
    const index2 = templateItems.findIndex((i2) => !_items.some((w2) => w2.id === i2.id));
    if (index2 > -1) {
      const item = templateItems[index2];
      const settings = info$5.create();
      settings.templateId = item.templateId;
      $$invalidate(1, templateItems[index2] = settings, templateItems);
      $$invalidate(1, templateItems = [...templateItems]);
    }
    if (trigger === "dragStarted") {
      dispatch("dragging", true);
    } else if (finalize) {
      dispatch("dragging", false);
    }
  }
  const consider_handler = (e2) => considerDndTemplates(e2.detail.items, e2.detail.info.trigger);
  const finalize_handler = (e2) => finalizeDndTemplates(e2.detail.items, e2.detail.info.trigger);
  const consider_handler_1 = (index2, e2) => considerDndWidgets(index2, e2.detail.items, e2.detail.info.trigger);
  const finalize_handler_1 = (index2, e2) => finalizeDndWidgets(index2, e2.detail.items, e2.detail.info.trigger);
  return [
    widgetItems,
    templateItems,
    getWidgetIcon,
    getWidgetLabel,
    getTemplateLabel,
    considerDndWidgets,
    finalizeDndWidgets,
    considerDndTemplates,
    finalizeDndTemplates,
    consider_handler,
    finalize_handler,
    consider_handler_1,
    finalize_handler_1
  ];
}
class WidgetTypeList extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$3, create_fragment$3, safe_not_equal, {});
  }
}
function create_fragment$2(ctx) {
  let div;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(
        div,
        "class",
        /*classes*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
      if (!mounted) {
        dispose = action_destroyer(dndzone.call(null, div, {
          items: (
            /*empty*/
            ctx[1]
          ),
          flipDurationMs,
          morphDisabled: false,
          dropTargetStyle: (
            /*dropTargetStyle*/
            ctx[3]
          ),
          dropTargetClasses: (
            /*dropTargetClasses*/
            ctx[2]
          ),
          centreDraggedOnCursor: true
        }));
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*classes*/
      1) {
        attr(
          div,
          "class",
          /*classes*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
const flipDurationMs = 300;
function instance$2($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { class: classes = "" } = $$props;
  let empty2 = [];
  const dropTargetClasses = ["border-error", "border-2", "visible"];
  const dropTargetStyle = {};
  $$self.$$set = ($$props2) => {
    if ("class" in $$props2)
      $$invalidate(0, classes = $$props2.class);
    if ("$$scope" in $$props2)
      $$invalidate(4, $$scope = $$props2.$$scope);
  };
  return [classes, empty2, dropTargetClasses, dropTargetStyle, $$scope, slots];
}
class DndTrash extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$2, create_fragment$2, safe_not_equal, { class: 0 });
  }
}
function get_each_context$1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[34] = list[i2];
  return child_ctx;
}
function create_if_block_4(ctx) {
  let div;
  let button;
  let icon;
  let t0;
  let t1;
  let dndtrash;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: mdiWidgets } });
  dndtrash = new DndTrash({
    props: {
      class: "btn btn-square btn-ghost",
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      button = element("button");
      create_component(icon.$$.fragment);
      t0 = text("\r\n                        Widgets");
      t1 = space();
      create_component(dndtrash.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      button = claim_element(div_nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      t0 = claim_text(button_nodes, "\r\n                        Widgets");
      button_nodes.forEach(detach);
      t1 = claim_space(div_nodes);
      claim_component(dndtrash.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(button, "class", "btn btn-square btn-ghost");
      attr(div, "class", "navbar-center gap-2");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, button);
      mount_component(icon, button, null);
      append_hydration(button, t0);
      append_hydration(div, t1);
      mount_component(dndtrash, div, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[20]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const dndtrash_changes = {};
      if (dirty[1] & /*$$scope*/
      1) {
        dndtrash_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dndtrash.$set(dndtrash_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      transition_in(dndtrash.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      transition_out(dndtrash.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
      destroy_component(dndtrash);
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot_1(ctx) {
  let icon;
  let t2;
  let current;
  icon = new Icon({ props: { data: mdiTrashCan } });
  return {
    c() {
      create_component(icon.$$.fragment);
      t2 = text("\r\n                        Trash");
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
      t2 = claim_text(nodes, "\r\n                        Trash");
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      insert_hydration(target, t2, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_3(ctx) {
  let div;
  let ul;
  let li0;
  let t0;
  let li1;
  let a3;
  let icon;
  let t1;
  let t2;
  let t3;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: (
    /*settingsIcon*/
    ctx[3]
  ) } });
  let each_value = ensure_array_like(
    /*breadcrumbs*/
    ctx[8]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$1(get_each_context$1(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      div = element("div");
      ul = element("ul");
      li0 = element("li");
      t0 = space();
      li1 = element("li");
      a3 = element("a");
      create_component(icon.$$.fragment);
      t1 = space();
      t2 = text(
        /*settingsTitle*/
        ctx[4]
      );
      t3 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      ul = claim_element(div_nodes, "UL", {});
      var ul_nodes = children(ul);
      li0 = claim_element(ul_nodes, "LI", {});
      children(li0).forEach(detach);
      t0 = claim_space(ul_nodes);
      li1 = claim_element(ul_nodes, "LI", {});
      var li1_nodes = children(li1);
      a3 = claim_element(li1_nodes, "A", {});
      var a_nodes = children(a3);
      claim_component(icon.$$.fragment, a_nodes);
      t1 = claim_space(a_nodes);
      t2 = claim_text(
        a_nodes,
        /*settingsTitle*/
        ctx[4]
      );
      a_nodes.forEach(detach);
      li1_nodes.forEach(detach);
      t3 = claim_space(ul_nodes);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(ul_nodes);
      }
      ul_nodes.forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "w-full text-sm breadcrumbs bg-base-200 px-2");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, ul);
      append_hydration(ul, li0);
      append_hydration(ul, t0);
      append_hydration(ul, li1);
      append_hydration(li1, a3);
      mount_component(icon, a3, null);
      append_hydration(a3, t1);
      append_hydration(a3, t2);
      append_hydration(ul, t3);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(ul, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = listen(
          a3,
          "click",
          /*click_handler_4*/
          ctx[24]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[0] & /*settingsIcon*/
      8)
        icon_changes.data = /*settingsIcon*/
        ctx2[3];
      icon.$set(icon_changes);
      if (!current || dirty[0] & /*settingsTitle*/
      16)
        set_data(
          t2,
          /*settingsTitle*/
          ctx2[4]
        );
      if (dirty[0] & /*select, breadcrumbs*/
      4352) {
        each_value = ensure_array_like(
          /*breadcrumbs*/
          ctx2[8]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$1(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$1(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(ul, null);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$1(ctx) {
  var _a2;
  let li;
  let a3;
  let icon;
  let t0;
  let t1_value = findLabel(
    /*b*/
    ctx[34].settings.type
  ) + "";
  let t1;
  let t2;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({
    props: {
      data: (_a2 = findInfo(
        /*b*/
        ctx[34].settings.type
      )) == null ? void 0 : _a2.icon
    }
  });
  function click_handler_5() {
    return (
      /*click_handler_5*/
      ctx[25](
        /*b*/
        ctx[34]
      )
    );
  }
  return {
    c() {
      li = element("li");
      a3 = element("a");
      create_component(icon.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
    },
    l(nodes) {
      li = claim_element(nodes, "LI", {});
      var li_nodes = children(li);
      a3 = claim_element(li_nodes, "A", {});
      var a_nodes = children(a3);
      claim_component(icon.$$.fragment, a_nodes);
      t0 = claim_space(a_nodes);
      t1 = claim_text(a_nodes, t1_value);
      a_nodes.forEach(detach);
      t2 = claim_space(li_nodes);
      li_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, li, anchor);
      append_hydration(li, a3);
      mount_component(icon, a3, null);
      append_hydration(a3, t0);
      append_hydration(a3, t1);
      append_hydration(li, t2);
      current = true;
      if (!mounted) {
        dispose = listen(a3, "click", click_handler_5);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      var _a3;
      ctx = new_ctx;
      const icon_changes = {};
      if (dirty[0] & /*breadcrumbs*/
      256)
        icon_changes.data = (_a3 = findInfo(
          /*b*/
          ctx[34].settings.type
        )) == null ? void 0 : _a3.icon;
      icon.$set(icon_changes);
      if ((!current || dirty[0] & /*breadcrumbs*/
      256) && t1_value !== (t1_value = findLabel(
        /*b*/
        ctx[34].settings.type
      ) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(li);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot(ctx) {
  let widget;
  let current;
  widget = new Widget({
    props: {
      settings: (
        /*item*/
        ctx[33]
      ),
      context: (
        /*context*/
        ctx[10]
      )
    }
  });
  widget.$on(
    "settings",
    /*settings_handler*/
    ctx[26]
  );
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const widget_changes = {};
      if (dirty[1] & /*item*/
      4)
        widget_changes.settings = /*item*/
        ctx2[33];
      if (dirty[0] & /*context*/
      1024)
        widget_changes.context = /*context*/
        ctx2[10];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_if_block_1(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_2, create_else_block];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*breadcrumb*/
      ctx2[9] !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_if_block(ctx) {
  let widgettypelist;
  let current;
  widgettypelist = new WidgetTypeList({});
  widgettypelist.$on(
    "dragging",
    /*dragging_handler*/
    ctx[29]
  );
  return {
    c() {
      create_component(widgettypelist.$$.fragment);
    },
    l(nodes) {
      claim_component(widgettypelist.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widgettypelist, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(widgettypelist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widgettypelist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widgettypelist, detaching);
    }
  };
}
function create_else_block(ctx) {
  let div;
  let t0;
  let t1;
  let t2;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[18].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[31],
    null
  );
  return {
    c() {
      div = element("div");
      t0 = text(
        /*settingsTitle*/
        ctx[4]
      );
      t1 = text(" settings");
      t2 = space();
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      t0 = claim_text(
        div_nodes,
        /*settingsTitle*/
        ctx[4]
      );
      t1 = claim_text(div_nodes, " settings");
      div_nodes.forEach(detach);
      t2 = claim_space(nodes);
      if (default_slot)
        default_slot.l(nodes);
      this.h();
    },
    h() {
      attr(div, "class", "text-lg text-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, t0);
      append_hydration(div, t1);
      insert_hydration(target, t2, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (!current || dirty[0] & /*settingsTitle*/
      16)
        set_data(
          t0,
          /*settingsTitle*/
          ctx2[4]
        );
      if (default_slot) {
        if (default_slot.p && (!current || dirty[1] & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[31],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[31]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[31],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_if_block_2(ctx) {
  let div;
  let t0_value = findLabel(
    /*breadcrumb*/
    ctx[9].settings.type
  ) + "";
  let t0;
  let t1;
  let t2;
  let switch_instance;
  let switch_instance_anchor;
  let current;
  var switch_value = findEditor(
    /*breadcrumb*/
    ctx[9].settings.type
  );
  function switch_props(ctx2, dirty) {
    return {
      props: { settings: (
        /*breadcrumb*/
        ctx2[9].settings
      ) }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    switch_instance.$on(
      "settings",
      /*settings_handler_1*/
      ctx[30]
    );
  }
  return {
    c() {
      div = element("div");
      t0 = text(t0_value);
      t1 = text(" settings");
      t2 = space();
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      t0 = claim_text(div_nodes, t0_value);
      t1 = claim_text(div_nodes, " settings");
      div_nodes.forEach(detach);
      t2 = claim_space(nodes);
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "class", "text-lg text-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, t0);
      append_hydration(div, t1);
      insert_hydration(target, t2, anchor);
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty[0] & /*breadcrumb*/
      512) && t0_value !== (t0_value = findLabel(
        /*breadcrumb*/
        ctx2[9].settings.type
      ) + ""))
        set_data(t0, t0_value);
      if (dirty[0] & /*breadcrumb*/
      512 && switch_value !== (switch_value = findEditor(
        /*breadcrumb*/
        ctx2[9].settings.type
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          switch_instance.$on(
            "settings",
            /*settings_handler_1*/
            ctx2[30]
          );
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty[0] & /*breadcrumb*/
        512)
          switch_instance_changes.settings = /*breadcrumb*/
          ctx2[9].settings;
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
        detach(switch_instance_anchor);
      }
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function create_fragment$1(ctx) {
  let div10;
  let input;
  let t0;
  let div7;
  let div4;
  let div1;
  let label0;
  let icon0;
  let t1;
  let div0;
  let button0;
  let t2_value = (
    /*title*/
    (ctx[1] ?? "") + ""
  );
  let t2;
  let t3;
  let t4;
  let div3;
  let div2;
  let button1;
  let icon1;
  let t5;
  let button2;
  let icon2;
  let t6;
  let button3;
  let icon3;
  let t7;
  let t8;
  let t9;
  let t10;
  let div6;
  let div5;
  let dndsingle;
  let t11;
  let div9;
  let label1;
  let t12;
  let div8;
  let current_block_type_index;
  let if_block2;
  let current;
  let mounted;
  let dispose;
  icon0 = new Icon({ props: { data: mdiMenu } });
  let if_block0 = !/*preview*/
  ctx[5] && create_if_block_4(ctx);
  icon1 = new Icon({ props: { data: mdiMagnify } });
  icon2 = new Icon({ props: { data: mdiPencil } });
  icon3 = new Icon({ props: { data: mdiFloppy } });
  let if_block1 = !/*preview*/
  ctx[5] && create_if_block_3(ctx);
  dndsingle = new DndSingle({
    props: {
      editable: (
        /*context*/
        ctx[10].editable
      ),
      item: (
        /*root*/
        ctx[0]
      ),
      $$slots: {
        default: [
          create_default_slot,
          ({ item }) => ({ 33: item }),
          ({ item }) => [0, item ? 4 : 0]
        ]
      },
      $$scope: { ctx }
    }
  });
  dndsingle.$on(
    "item",
    /*item_handler*/
    ctx[27]
  );
  const if_block_creators = [create_if_block, create_if_block_1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*drawerContent*/
      ctx2[7] === "widgets"
    )
      return 0;
    if (
      /*drawerContent*/
      ctx2[7] === "settings"
    )
      return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      div10 = element("div");
      input = element("input");
      t0 = space();
      div7 = element("div");
      div4 = element("div");
      div1 = element("div");
      label0 = element("label");
      create_component(icon0.$$.fragment);
      t1 = space();
      div0 = element("div");
      button0 = element("button");
      t2 = text(t2_value);
      t3 = space();
      if (if_block0)
        if_block0.c();
      t4 = space();
      div3 = element("div");
      div2 = element("div");
      button1 = element("button");
      create_component(icon1.$$.fragment);
      t5 = space();
      button2 = element("button");
      create_component(icon2.$$.fragment);
      t6 = space();
      button3 = element("button");
      create_component(icon3.$$.fragment);
      t7 = space();
      t8 = text(
        /*saveTitle*/
        ctx[2]
      );
      t9 = space();
      if (if_block1)
        if_block1.c();
      t10 = space();
      div6 = element("div");
      div5 = element("div");
      create_component(dndsingle.$$.fragment);
      t11 = space();
      div9 = element("div");
      label1 = element("label");
      t12 = space();
      div8 = element("div");
      if (if_block2)
        if_block2.c();
      this.h();
    },
    l(nodes) {
      div10 = claim_element(nodes, "DIV", { class: true });
      var div10_nodes = children(div10);
      input = claim_element(div10_nodes, "INPUT", { id: true, type: true, class: true });
      t0 = claim_space(div10_nodes);
      div7 = claim_element(div10_nodes, "DIV", { class: true });
      var div7_nodes = children(div7);
      div4 = claim_element(div7_nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      div1 = claim_element(div4_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      label0 = claim_element(div1_nodes, "LABEL", {
        for: true,
        "aria-label": true,
        class: true
      });
      var label0_nodes = children(label0);
      claim_component(icon0.$$.fragment, label0_nodes);
      label0_nodes.forEach(detach);
      t1 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      button0 = claim_element(div0_nodes, "BUTTON", { class: true });
      var button0_nodes = children(button0);
      t2 = claim_text(button0_nodes, t2_value);
      button0_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t3 = claim_space(div4_nodes);
      if (if_block0)
        if_block0.l(div4_nodes);
      t4 = claim_space(div4_nodes);
      div3 = claim_element(div4_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      button1 = claim_element(div2_nodes, "BUTTON", { class: true });
      var button1_nodes = children(button1);
      claim_component(icon1.$$.fragment, button1_nodes);
      button1_nodes.forEach(detach);
      t5 = claim_space(div2_nodes);
      button2 = claim_element(div2_nodes, "BUTTON", { class: true });
      var button2_nodes = children(button2);
      claim_component(icon2.$$.fragment, button2_nodes);
      button2_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      t6 = claim_space(div3_nodes);
      button3 = claim_element(div3_nodes, "BUTTON", { class: true });
      var button3_nodes = children(button3);
      claim_component(icon3.$$.fragment, button3_nodes);
      t7 = claim_space(button3_nodes);
      t8 = claim_text(
        button3_nodes,
        /*saveTitle*/
        ctx[2]
      );
      button3_nodes.forEach(detach);
      div3_nodes.forEach(detach);
      div4_nodes.forEach(detach);
      t9 = claim_space(div7_nodes);
      if (if_block1)
        if_block1.l(div7_nodes);
      t10 = claim_space(div7_nodes);
      div6 = claim_element(div7_nodes, "DIV", { class: true });
      var div6_nodes = children(div6);
      div5 = claim_element(div6_nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      claim_component(dndsingle.$$.fragment, div5_nodes);
      div5_nodes.forEach(detach);
      div6_nodes.forEach(detach);
      div7_nodes.forEach(detach);
      t11 = claim_space(div10_nodes);
      div9 = claim_element(div10_nodes, "DIV", { class: true });
      var div9_nodes = children(div9);
      label1 = claim_element(div9_nodes, "LABEL", {
        for: true,
        "aria-label": true,
        class: true
      });
      children(label1).forEach(detach);
      t12 = claim_space(div9_nodes);
      div8 = claim_element(div9_nodes, "DIV", { class: true });
      var div8_nodes = children(div8);
      if (if_block2)
        if_block2.l(div8_nodes);
      div8_nodes.forEach(detach);
      div9_nodes.forEach(detach);
      div10_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(input, "id", "toolbar-drawer");
      attr(input, "type", "checkbox");
      attr(input, "class", "drawer-toggle");
      attr(label0, "for", "main-drawer");
      attr(label0, "aria-label", "close sidebar");
      attr(label0, "class", "btn btn-square btn-ghost");
      attr(button0, "class", "btn btn-ghost text-xl");
      attr(div0, "class", "hidden md:block");
      attr(div1, "class", "navbar-start");
      attr(button1, "class", "btn join-item");
      toggle_class(
        button1,
        "btn-secondary",
        /*preview*/
        ctx[5]
      );
      attr(button2, "class", "btn join-item");
      toggle_class(button2, "btn-secondary", !/*preview*/
      ctx[5]);
      attr(div2, "class", "join mr-2");
      attr(button3, "class", "btn btn-square btn-primary");
      attr(div3, "class", "navbar-end");
      attr(div4, "class", "navbar bg-base-200 flex-none");
      attr(div5, "class", "w-full");
      attr(div6, "class", "flex flex-row justify-center p-2");
      attr(div7, "class", "drawer-content");
      attr(label1, "for", "toolbar-drawer");
      attr(label1, "aria-label", "close sidebar");
      attr(label1, "class", "drawer-overlay");
      attr(div8, "class", "w-full max-w-xs min-h-full bg-base-200 p-2");
      attr(div9, "class", "drawer-side z-[1000]");
      attr(div10, "class", "drawer");
    },
    m(target, anchor) {
      insert_hydration(target, div10, anchor);
      append_hydration(div10, input);
      input.checked = /*drawerOpen*/
      ctx[6];
      append_hydration(div10, t0);
      append_hydration(div10, div7);
      append_hydration(div7, div4);
      append_hydration(div4, div1);
      append_hydration(div1, label0);
      mount_component(icon0, label0, null);
      append_hydration(div1, t1);
      append_hydration(div1, div0);
      append_hydration(div0, button0);
      append_hydration(button0, t2);
      append_hydration(div4, t3);
      if (if_block0)
        if_block0.m(div4, null);
      append_hydration(div4, t4);
      append_hydration(div4, div3);
      append_hydration(div3, div2);
      append_hydration(div2, button1);
      mount_component(icon1, button1, null);
      append_hydration(div2, t5);
      append_hydration(div2, button2);
      mount_component(icon2, button2, null);
      append_hydration(div3, t6);
      append_hydration(div3, button3);
      mount_component(icon3, button3, null);
      append_hydration(button3, t7);
      append_hydration(button3, t8);
      append_hydration(div7, t9);
      if (if_block1)
        if_block1.m(div7, null);
      append_hydration(div7, t10);
      append_hydration(div7, div6);
      append_hydration(div6, div5);
      mount_component(dndsingle, div5, null);
      append_hydration(div10, t11);
      append_hydration(div10, div9);
      append_hydration(div9, label1);
      append_hydration(div9, t12);
      append_hydration(div9, div8);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div8, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "change",
            /*input_change_handler*/
            ctx[19]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[21]
          ),
          listen(
            button2,
            "click",
            /*click_handler_2*/
            ctx[22]
          ),
          listen(
            button3,
            "click",
            /*click_handler_3*/
            ctx[23]
          ),
          listen(
            div6,
            "click",
            /*click_handler_6*/
            ctx[28]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*drawerOpen*/
      64) {
        input.checked = /*drawerOpen*/
        ctx2[6];
      }
      if ((!current || dirty[0] & /*title*/
      2) && t2_value !== (t2_value = /*title*/
      (ctx2[1] ?? "") + ""))
        set_data(t2, t2_value);
      if (!/*preview*/
      ctx2[5]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*preview*/
          32) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_4(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div4, t4);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*preview*/
      32) {
        toggle_class(
          button1,
          "btn-secondary",
          /*preview*/
          ctx2[5]
        );
      }
      if (!current || dirty[0] & /*preview*/
      32) {
        toggle_class(button2, "btn-secondary", !/*preview*/
        ctx2[5]);
      }
      if (!current || dirty[0] & /*saveTitle*/
      4)
        set_data(
          t8,
          /*saveTitle*/
          ctx2[2]
        );
      if (!/*preview*/
      ctx2[5]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*preview*/
          32) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_3(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div7, t10);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      const dndsingle_changes = {};
      if (dirty[0] & /*context*/
      1024)
        dndsingle_changes.editable = /*context*/
        ctx2[10].editable;
      if (dirty[0] & /*root*/
      1)
        dndsingle_changes.item = /*root*/
        ctx2[0];
      if (dirty[0] & /*context*/
      1024 | dirty[1] & /*$$scope, item*/
      5) {
        dndsingle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dndsingle.$set(dndsingle_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block2) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block2 = if_blocks[current_block_type_index];
          if (!if_block2) {
            if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block2.c();
          } else {
            if_block2.p(ctx2, dirty);
          }
          transition_in(if_block2, 1);
          if_block2.m(div8, null);
        } else {
          if_block2 = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon0.$$.fragment, local);
      transition_in(if_block0);
      transition_in(icon1.$$.fragment, local);
      transition_in(icon2.$$.fragment, local);
      transition_in(icon3.$$.fragment, local);
      transition_in(if_block1);
      transition_in(dndsingle.$$.fragment, local);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(icon0.$$.fragment, local);
      transition_out(if_block0);
      transition_out(icon1.$$.fragment, local);
      transition_out(icon2.$$.fragment, local);
      transition_out(icon3.$$.fragment, local);
      transition_out(if_block1);
      transition_out(dndsingle.$$.fragment, local);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div10);
      }
      destroy_component(icon0);
      if (if_block0)
        if_block0.d();
      destroy_component(icon1);
      destroy_component(icon2);
      destroy_component(icon3);
      if (if_block1)
        if_block1.d();
      destroy_component(dndsingle);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$1($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  const dispatch = createEventDispatcher();
  let { title } = $$props;
  let { root } = $$props;
  let { saveTitle = "Save" } = $$props;
  let { settingsIcon } = $$props;
  let { settingsTitle } = $$props;
  let preview = false;
  let drawerOpen = false;
  let drawerContent = "settings";
  let breadcrumbs = [];
  let breadcrumb;
  let context;
  function save() {
    dispatch("save");
  }
  function select(_breadcrumb) {
    $$invalidate(9, breadcrumb = _breadcrumb);
    $$invalidate(7, drawerContent = "settings");
    $$invalidate(6, drawerOpen = true);
  }
  function onPreview(_preview) {
    $$invalidate(5, preview = _preview);
  }
  function onBreadrumbs(_breadcrumbs) {
    $$invalidate(8, breadcrumbs = _breadcrumbs);
    if (breadcrumbs.length > 0) {
      $$invalidate(9, breadcrumb = breadcrumbs[breadcrumbs.length - 1]);
    } else {
      $$invalidate(9, breadcrumb = void 0);
    }
    $$invalidate(7, drawerContent = "settings");
    $$invalidate(6, drawerOpen = true);
  }
  function onDragging(dragging) {
    if (dragging) {
      $$invalidate(6, drawerOpen = false);
    }
  }
  function onRoot(_root) {
    $$invalidate(0, root = _root);
    dispatch("root", root);
  }
  function updateWidget(updated) {
    breadcrumb.update(updated);
  }
  function input_change_handler() {
    drawerOpen = this.checked;
    $$invalidate(6, drawerOpen);
  }
  const click_handler = () => {
    $$invalidate(7, drawerContent = "widgets");
    $$invalidate(6, drawerOpen = !drawerOpen);
  };
  const click_handler_1 = () => onPreview(true);
  const click_handler_22 = () => onPreview(false);
  const click_handler_3 = () => save();
  const click_handler_4 = () => select(void 0);
  const click_handler_5 = (b2) => select(b2);
  const settings_handler = (e2) => onRoot(e2.detail);
  const item_handler = (e2) => onRoot(e2.detail);
  const click_handler_6 = () => onBreadrumbs([]);
  const dragging_handler = (e2) => onDragging(e2.detail);
  const settings_handler_1 = (e2) => updateWidget(e2.detail);
  $$self.$$set = ($$props2) => {
    if ("title" in $$props2)
      $$invalidate(1, title = $$props2.title);
    if ("root" in $$props2)
      $$invalidate(0, root = $$props2.root);
    if ("saveTitle" in $$props2)
      $$invalidate(2, saveTitle = $$props2.saveTitle);
    if ("settingsIcon" in $$props2)
      $$invalidate(3, settingsIcon = $$props2.settingsIcon);
    if ("settingsTitle" in $$props2)
      $$invalidate(4, settingsTitle = $$props2.settingsTitle);
    if ("$$scope" in $$props2)
      $$invalidate(31, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*preview*/
    32) {
      $$invalidate(10, context = {
        editable: !preview,
        readonly: true,
        breadcrumbs: [],
        select: onBreadrumbs
      });
    }
  };
  return [
    root,
    title,
    saveTitle,
    settingsIcon,
    settingsTitle,
    preview,
    drawerOpen,
    drawerContent,
    breadcrumbs,
    breadcrumb,
    context,
    save,
    select,
    onPreview,
    onBreadrumbs,
    onDragging,
    onRoot,
    updateWidget,
    slots,
    input_change_handler,
    click_handler,
    click_handler_1,
    click_handler_22,
    click_handler_3,
    click_handler_4,
    click_handler_5,
    settings_handler,
    item_handler,
    click_handler_6,
    dragging_handler,
    settings_handler_1,
    $$scope
  ];
}
class WidgetEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$1,
      create_fragment$1,
      safe_not_equal,
      {
        title: 1,
        root: 0,
        saveTitle: 2,
        settingsIcon: 3,
        settingsTitle: 4
      },
      null,
      [-1, -1]
    );
  }
}
function get_each_context(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i2];
  return child_ctx;
}
function create_each_block(ctx) {
  let button;
  let icon;
  let t0;
  let div1;
  let span0;
  let t1_value = (
    /*item*/
    ctx[11].title + ""
  );
  let t1;
  let t2;
  let div0;
  let span1;
  let t3;
  let t4_value = (
    /*item*/
    ctx[11].dashboards.length + ""
  );
  let t4;
  let t5;
  let span2;
  let t6;
  let t7_value = (
    /*item*/
    ctx[11].templates.length + ""
  );
  let t7;
  let t8;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({ props: { data: mdiDatabase } });
  function click_handler() {
    return (
      /*click_handler*/
      ctx[7](
        /*item*/
        ctx[11]
      )
    );
  }
  return {
    c() {
      button = element("button");
      create_component(icon.$$.fragment);
      t0 = space();
      div1 = element("div");
      span0 = element("span");
      t1 = text(t1_value);
      t2 = space();
      div0 = element("div");
      span1 = element("span");
      t3 = text("Dashboards: ");
      t4 = text(t4_value);
      t5 = space();
      span2 = element("span");
      t6 = text("Templates: ");
      t7 = text(t7_value);
      t8 = space();
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { class: true });
      var button_nodes = children(button);
      claim_component(icon.$$.fragment, button_nodes);
      t0 = claim_space(button_nodes);
      div1 = claim_element(button_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      span0 = claim_element(div1_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t1 = claim_text(span0_nodes, t1_value);
      span0_nodes.forEach(detach);
      t2 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span1 = claim_element(div0_nodes, "SPAN", {});
      var span1_nodes = children(span1);
      t3 = claim_text(span1_nodes, "Dashboards: ");
      t4 = claim_text(span1_nodes, t4_value);
      span1_nodes.forEach(detach);
      t5 = claim_space(div0_nodes);
      span2 = claim_element(div0_nodes, "SPAN", {});
      var span2_nodes = children(span2);
      t6 = claim_text(span2_nodes, "Templates: ");
      t7 = claim_text(span2_nodes, t7_value);
      span2_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t8 = claim_space(button_nodes);
      button_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span0, "class", "text-left text-lg");
      attr(div0, "class", "flex flex-col text-right");
      attr(div1, "class", "flex flex-row flex-grow justify-between");
      attr(button, "class", "btn btn-ghost w-full my-2 flex flex-row");
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      mount_component(icon, button, null);
      append_hydration(button, t0);
      append_hydration(button, div1);
      append_hydration(div1, span0);
      append_hydration(span0, t1);
      append_hydration(div1, t2);
      append_hydration(div1, div0);
      append_hydration(div0, span1);
      append_hydration(span1, t3);
      append_hydration(span1, t4);
      append_hydration(div0, t5);
      append_hydration(div0, span2);
      append_hydration(span2, t6);
      append_hydration(span2, t7);
      append_hydration(button, t8);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & /*sorted*/
      4) && t1_value !== (t1_value = /*item*/
      ctx[11].title + ""))
        set_data(t1, t1_value);
      if ((!current || dirty & /*sorted*/
      4) && t4_value !== (t4_value = /*item*/
      ctx[11].dashboards.length + ""))
        set_data(t4, t4_value);
      if ((!current || dirty & /*sorted*/
      4) && t7_value !== (t7_value = /*item*/
      ctx[11].templates.length + ""))
        set_data(t7, t7_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment(ctx) {
  let dialog;
  let div3;
  let div0;
  let t0;
  let t1;
  let div1;
  let t2;
  let div2;
  let current;
  let each_value = ensure_array_like(
    /*sorted*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block(get_each_context(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      dialog = element("dialog");
      div3 = element("div");
      div0 = element("div");
      t0 = text(
        /*title*/
        ctx[0]
      );
      t1 = space();
      div1 = element("div");
      t2 = space();
      div2 = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      dialog = claim_element(nodes, "DIALOG", { class: true });
      var dialog_nodes = children(dialog);
      div3 = claim_element(dialog_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      div0 = claim_element(div3_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      t0 = claim_text(
        div0_nodes,
        /*title*/
        ctx[0]
      );
      div0_nodes.forEach(detach);
      t1 = claim_space(div3_nodes);
      div1 = claim_element(div3_nodes, "DIV", { class: true });
      children(div1).forEach(detach);
      t2 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div2_nodes);
      }
      div2_nodes.forEach(detach);
      div3_nodes.forEach(detach);
      dialog_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "text-2xl mb-4");
      attr(div1, "class", "divider divider-neutral my-1");
      attr(div2, "class", "flex-grow overflow-y-auto");
      attr(div3, "class", "modal-box flex flex-col");
      attr(dialog, "class", "modal");
    },
    m(target, anchor) {
      insert_hydration(target, dialog, anchor);
      append_hydration(dialog, div3);
      append_hydration(div3, div0);
      append_hydration(div0, t0);
      append_hydration(div3, t1);
      append_hydration(div3, div1);
      append_hydration(div3, t2);
      append_hydration(div3, div2);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div2, null);
        }
      }
      ctx[8](dialog);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*title*/
      1)
        set_data(
          t0,
          /*title*/
          ctx2[0]
        );
      if (dirty & /*select, sorted*/
      12) {
        each_value = ensure_array_like(
          /*sorted*/
          ctx2[2]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(div2, null);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(dialog);
      }
      destroy_each(each_blocks, detaching);
      ctx[8](null);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let flatStores;
  let sorted;
  let $stores;
  component_subscribe($$self, stores, ($$value) => $$invalidate(6, $stores = $$value));
  let { open = false } = $$props;
  let { title = "Select store" } = $$props;
  const dispatch = createEventDispatcher();
  let modal;
  function onOpen(_open) {
    if (_open) {
      modal.show();
    }
  }
  function select(item) {
    $$invalidate(4, open = false);
    modal.close();
    dispatch("storeId", item.id);
  }
  const click_handler = (item) => select(item);
  function dialog_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      modal = $$value;
      $$invalidate(1, modal);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("open" in $$props2)
      $$invalidate(4, open = $$props2.open);
    if ("title" in $$props2)
      $$invalidate(0, title = $$props2.title);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$stores*/
    64) {
      $$invalidate(5, flatStores = Object.values($stores ?? {}));
    }
    if ($$self.$$.dirty & /*flatStores*/
    32) {
      $$invalidate(2, sorted = (flatStores ?? []).sort((a3, b2) => {
        if (a3.title === b2.title)
          return 0;
        if (a3.title < b2.title)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*open*/
    16) {
      onOpen(open);
    }
  };
  return [
    title,
    modal,
    sorted,
    select,
    open,
    flatStores,
    $stores,
    click_handler,
    dialog_binding
  ];
}
class StoreDialog extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { open: 4, title: 0 });
  }
}
export {
  IconPicker as I,
  StoreDialog as S,
  TextPicker as T,
  Widget as W,
  info$5 as a,
  WidgetEditor as b,
  saveTemplate as c,
  deleteDashboard as d,
  info$e as i,
  saveDashboard as s
};
