var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var _a, _b;
import { s as safe_not_equal, a as space, c as claim_space, i as insert_hydration, d as detach, y as component_subscribe, r as createEventDispatcher, f as element, e as empty, g as claim_element, u as get_svelte_dataset, j as attr, l as text, m as claim_text, n as set_data, v as noop$1, h as children, D as append_hydration, F as src_url_equal, p as binding_callbacks, w as add_flush_callback, E as destroy_each, G as toggle_class, H as set_input_value, I as listen, J as run_all, K as assign$1, L as exclude_internal_props, M as to_number, N as bubble, O as stop_propagation, o as onMount, q as construct_svelte_component, k as set_style, P as onDestroy, Q as current_component, R as set_attributes, b as afterUpdate, S as action_destroyer, T as is_function, z as create_slot, A as update_slot_base, B as get_all_dirty_from_scope, C as get_slot_changes } from "../chunks/scheduler.99f41ece.js";
import { S as SvelteComponent, i as init, b as create_component, d as claim_component, m as mount_component, a as transition_in, t as transition_out, e as destroy_component, g as group_outros, c as check_outros, f as bind } from "../chunks/index.9afee857.js";
import { B as Button, I as Input, L as List, e as ensure_array_like, a as Icon, t as twMerge, v as v4, u as update_keyed_each, o as outro_and_destroy_block, d as dashboards } from "../chunks/index.f78c737d.js";
import { g as devices, b as homey, s as scopes, v as variables, e as dashboards$1, i as flowFolders, k as advancedFlows, j as basicFlows, l as insights, m as goto, w as webhookUrl, o as webhookId } from "../chunks/homey.a0b15e9a.js";
import { e as base, j as derived, w as writable } from "../chunks/singletons.cdd7f699.js";
import { p as page } from "../chunks/stores.282c5873.js";
import { P as Portal, M as Modal, e as editing, T as Toggle$1, a as Divider, c as grid, d as dashboard } from "../chunks/index.ccaf0ab1.js";
import { h as handle_promise, u as update_await_block_branch } from "../chunks/await_block.b8b398c9.js";
import { I as IconButton, D as Drawer } from "../chunks/IconButton.86113afb.js";
import { g as mdiDelete, h as mdiClose, l as lookup, i as mdiHelp, j as mdiMinus, k as mdiAlert, n as mdiArrowRight, a as mdiPlus, o as mdiContentSave, p as mdiVariable, q as mdiTune, r as mdiMeterElectric, d as mdiViewDashboard, s as mdiPlay, t as mdiImageFrame, u as mdiImage, v as mdiChartLine, w as mdiTextBoxEdit, x as mdiArrowLeftRight, c as mdiCog, y as mdiLock, z as mdiLockOpenVariant, A as mdiCursorMove, B as mdiArrowTopLeftBottomRight } from "../chunks/index.af04791b.js";
import { B as ButtonGroup, S as Select, I as InputNumber, A as Accordion, T as TextArea } from "../chunks/index.d6894ec0.js";
import { T as Tabs, C as Card } from "../chunks/index.3bbaafa3.js";
function formatNumber$1(number, { notation = "standard", style = "decimal", minimumFractionDigits = void 0, maximumFractionDigits = void 0 }) {
  const formatter = Intl.NumberFormat("en-US", {
    notation,
    currency: style === "currency" ? "USD" : void 0,
    style,
    minimumFractionDigits: minimumFractionDigits ? minimumFractionDigits : style === "currency" ? 2 : minimumFractionDigits,
    maximumFractionDigits: maximumFractionDigits ? maximumFractionDigits : style === "currency" ? 2 : maximumFractionDigits
  });
  return formatter.format(number);
}
function get_each_context$k(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[21] = list[i2];
  return child_ctx;
}
function create_else_block$t(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*placeholder*/
        ctx[1]
      );
    },
    l(nodes) {
      t2 = claim_text(
        nodes,
        /*placeholder*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*placeholder*/
      2)
        set_data(
          t2,
          /*placeholder*/
          ctx2[1]
        );
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_2$k(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Device not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Device not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_1$u(ctx) {
  let promise;
  let t0;
  let span;
  let t1_value = (
    /*selected*/
    ctx[3].name + ""
  );
  let t1;
  let t2;
  let iconbutton;
  let current;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block_1$1,
    then: create_then_block_1$1,
    catch: create_catch_block_1$1,
    value: 24
  };
  handle_promise(promise = /*$homey*/
  ctx[6].baseUrl, info);
  iconbutton = new IconButton({ props: { data: mdiDelete, size: "14px" } });
  iconbutton.$on(
    "click",
    /*click_handler*/
    ctx[12]
  );
  return {
    c() {
      info.block.c();
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      create_component(iconbutton.$$.fragment);
      this.h();
    },
    l(nodes) {
      info.block.l(nodes);
      t0 = claim_space(nodes);
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      t2 = claim_space(nodes);
      claim_component(iconbutton.$$.fragment, nodes);
      this.h();
    },
    h() {
      attr(span, "class", "mr-auto");
    },
    m(target, anchor) {
      info.block.m(target, info.anchor = anchor);
      info.mount = () => t0.parentNode;
      info.anchor = t0;
      insert_hydration(target, t0, anchor);
      insert_hydration(target, span, anchor);
      append_hydration(span, t1);
      insert_hydration(target, t2, anchor);
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty & /*$homey*/
      64 && promise !== (promise = /*$homey*/
      ctx[6].baseUrl) && handle_promise(promise, info))
        ;
      else {
        update_await_block_branch(info, ctx, dirty);
      }
      if ((!current || dirty & /*selected*/
      8) && t1_value !== (t1_value = /*selected*/
      ctx[3].name + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(span);
        detach(t2);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_catch_block_1$1(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block_1$1(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
      this.h();
    },
    h() {
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[24] + /*selected*/
      ctx[3].iconObj.url))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*selected*/
      ctx[3].name);
      attr(img, "class", "h-6 w-6 mr-2 dark:invert");
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$homey, selected*/
      72 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[24] + /*selected*/
      ctx2[3].iconObj.url)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*selected*/
      8 && img_alt_value !== (img_alt_value = /*selected*/
      ctx2[3].name)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block_1$1(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_default_slot_4$9(ctx) {
  let span;
  let textContent = "Device:";
  let t1;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$u, create_if_block_2$k, create_else_block$t];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*selected*/
      ctx2[3] !== void 0
    )
      return 0;
    if (
      /*deviceId*/
      ctx2[0] !== void 0
    )
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
      t1 = space();
      if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1i9wifi")
        span.textContent = textContent;
      t1 = claim_space(nodes);
      if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      attr(span, "class", "mr-1");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      insert_hydration(target, t1, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
        detach(t1);
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_if_block$H(ctx) {
  let modal;
  let current;
  modal = new Modal({
    props: {
      handleClose: (
        /*func*/
        ctx[17]
      ),
      $$slots: { content: [create_content_slot$9] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal.$$.fragment);
    },
    l(nodes) {
      claim_component(modal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_changes = {};
      if (dirty & /*open*/
      16)
        modal_changes.handleClose = /*func*/
        ctx2[17];
      if (dirty & /*$$scope, filtered, $homey, search, open*/
      33554548) {
        modal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal.$set(modal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal, detaching);
    }
  };
}
function create_catch_block$3(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block$3(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
      this.h();
    },
    h() {
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[24] + /*device*/
      ctx[21].iconObj.url))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*device*/
      ctx[21].name);
      attr(img, "class", "h-6 w-6 mr-2 dark:invert");
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$homey, filtered*/
      96 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[24] + /*device*/
      ctx2[21].iconObj.url)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*filtered*/
      32 && img_alt_value !== (img_alt_value = /*device*/
      ctx2[21].name)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block$3(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_default_slot_3$a(ctx) {
  let promise;
  let t0;
  let t1_value = (
    /*device*/
    ctx[21].name + ""
  );
  let t1;
  let t2;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$3,
    then: create_then_block$3,
    catch: create_catch_block$3,
    value: 24
  };
  handle_promise(promise = /*$homey*/
  ctx[6].baseUrl, info);
  return {
    c() {
      info.block.c();
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
    },
    l(nodes) {
      info.block.l(nodes);
      t0 = claim_space(nodes);
      t1 = claim_text(nodes, t1_value);
      t2 = claim_space(nodes);
    },
    m(target, anchor) {
      info.block.m(target, info.anchor = anchor);
      info.mount = () => t0.parentNode;
      info.anchor = t0;
      insert_hydration(target, t0, anchor);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, t2, anchor);
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty & /*$homey*/
      64 && promise !== (promise = /*$homey*/
      ctx[6].baseUrl) && handle_promise(promise, info))
        ;
      else {
        update_await_block_branch(info, ctx, dirty);
      }
      if (dirty & /*filtered*/
      32 && t1_value !== (t1_value = /*device*/
      ctx[21].name + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_title_slot$7(ctx) {
  let list_item_content_title;
  let current;
  list_item_content_title = new List.Item.Content.Title({
    props: {
      slot: "title",
      class: "flex",
      $$slots: { default: [create_default_slot_3$a] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content_title.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content_title.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content_title, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_title_changes = {};
      if (dirty & /*$$scope, filtered, $homey*/
      33554528) {
        list_item_content_title_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content_title.$set(list_item_content_title_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content_title.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content_title.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content_title, detaching);
    }
  };
}
function create_content_slot_1$5(ctx) {
  let list_item_content;
  let current;
  list_item_content = new List.Item.Content({
    props: {
      slot: "content",
      $$slots: { title: [create_title_slot$7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_changes = {};
      if (dirty & /*$$scope, filtered, $homey*/
      33554528) {
        list_item_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content.$set(list_item_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content, detaching);
    }
  };
}
function create_each_block$k(ctx) {
  let list_item;
  let current;
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[16](
        /*device*/
        ctx[21]
      )
    );
  }
  list_item = new List.Item({
    props: {
      class: "cursor-pointer",
      $$slots: { content: [create_content_slot_1$5] },
      $$scope: { ctx }
    }
  });
  list_item.$on("click", click_handler_3);
  return {
    c() {
      create_component(list_item.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const list_item_changes = {};
      if (dirty & /*$$scope, filtered, $homey*/
      33554528) {
        list_item_changes.$$scope = { dirty, ctx };
      }
      list_item.$set(list_item_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item, detaching);
    }
  };
}
function create_default_slot_2$a(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*filtered*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$k(get_each_context$k(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*onDevice, filtered, $homey*/
      224) {
        each_value = ensure_array_like(
          /*filtered*/
          ctx2[5]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$k(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$k(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_1$g(ctx) {
  let div1;
  let div0;
  let iconbutton;
  let t0;
  let div2;
  let input;
  let updating_value;
  let t1;
  let div3;
  let list;
  let current;
  iconbutton = new IconButton({ props: { data: mdiClose } });
  iconbutton.$on(
    "click",
    /*click_handler_2*/
    ctx[14]
  );
  function input_value_binding(value) {
    ctx[15](value);
  }
  let input_props = { name: "search", placeholder: "Search" };
  if (
    /*search*/
    ctx[2] !== void 0
  ) {
    input_props.value = /*search*/
    ctx[2];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  list = new List({
    props: {
      $$slots: { default: [create_default_slot_2$a] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      create_component(iconbutton.$$.fragment);
      t0 = space();
      div2 = element("div");
      create_component(input.$$.fragment);
      t1 = space();
      div3 = element("div");
      create_component(list.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(iconbutton.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", {});
      var div2_nodes = children(div2);
      claim_component(input.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      claim_component(list.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "absolute -top-4 -right-5 z-10");
      attr(div1, "class", "relative w-full");
      attr(div3, "class", "flex-grow overflow-auto");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      mount_component(iconbutton, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(input, div2, null);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div3, anchor);
      mount_component(list, div3, null);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (!updating_value && dirty & /*search*/
      4) {
        updating_value = true;
        input_changes.value = /*search*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      const list_changes = {};
      if (dirty & /*$$scope, filtered, $homey*/
      33554528) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      transition_in(input.$$.fragment, local);
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      transition_out(input.$$.fragment, local);
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t0);
        detach(div2);
        detach(t1);
        detach(div3);
      }
      destroy_component(iconbutton);
      destroy_component(input);
      destroy_component(list);
    }
  };
}
function create_body_slot$7(ctx) {
  let modal_content_body;
  let current;
  modal_content_body = new Modal.Content.Body({
    props: {
      slot: "body",
      class: "h-full",
      $$slots: { default: [create_default_slot_1$g] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content_body.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content_body.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content_body, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_body_changes = {};
      if (dirty & /*$$scope, filtered, $homey, search, open*/
      33554548) {
        modal_content_body_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content_body.$set(modal_content_body_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content_body.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content_body.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content_body, detaching);
    }
  };
}
function create_content_slot$9(ctx) {
  let modal_content;
  let current;
  modal_content = new Modal.Content({
    props: {
      slot: "content",
      $$slots: { body: [create_body_slot$7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_changes = {};
      if (dirty & /*$$scope, filtered, $homey, search, open*/
      33554548) {
        modal_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content.$set(modal_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content, detaching);
    }
  };
}
function create_default_slot$k(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*open*/
    ctx[4] && create_if_block$H(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*open*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*open*/
          16) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$H(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment$T(ctx) {
  let button;
  let t2;
  let portal;
  let current;
  button = new Button({
    props: {
      class: "w-full justify-start border border-border",
      $$slots: { default: [create_default_slot_4$9] },
      $$scope: { ctx }
    }
  });
  button.$on(
    "click",
    /*click_handler_1*/
    ctx[13]
  );
  portal = new Portal({
    props: {
      $$slots: { default: [create_default_slot$k] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
      t2 = space();
      create_component(portal.$$.fragment);
    },
    l(nodes) {
      claim_component(button.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(portal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(portal, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const button_changes = {};
      if (dirty & /*$$scope, deviceId, selected, $homey, placeholder*/
      33554507) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
      const portal_changes = {};
      if (dirty & /*$$scope, open, filtered, $homey, search*/
      33554548) {
        portal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      portal.$set(portal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      transition_in(portal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      transition_out(portal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(button, detaching);
      destroy_component(portal, detaching);
    }
  };
}
function instance$R($$self, $$props, $$invalidate) {
  let flatDevices;
  let sorted;
  let $devices;
  let $homey;
  component_subscribe($$self, devices, ($$value) => $$invalidate(11, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(6, $homey = $$value));
  let { deviceId } = $$props;
  let { placeholder = "Select device" } = $$props;
  let { deviceFilter = void 0 } = $$props;
  const dispatch = createEventDispatcher();
  let open = false;
  let search = "";
  let filtered = [];
  let selected;
  function filterDevices(value, s3) {
    const normalized = value.toLowerCase();
    if (value.length > 0) {
      $$invalidate(5, filtered = sorted.filter((d3) => d3.name.toLowerCase().includes(normalized)));
    } else {
      $$invalidate(5, filtered = sorted);
    }
  }
  function onDevice(device) {
    $$invalidate(0, deviceId = device.id);
    $$invalidate(4, open = false);
    dispatch("deviceId", deviceId);
  }
  function onSelected(device) {
    dispatch("device", device);
  }
  const click_handler = () => $$invalidate(0, deviceId = void 0);
  const click_handler_1 = () => $$invalidate(4, open = true);
  const click_handler_2 = () => $$invalidate(4, open = false);
  function input_value_binding(value) {
    search = value;
    $$invalidate(2, search);
  }
  const click_handler_3 = (device) => onDevice(device);
  const func = () => $$invalidate(4, open = false);
  $$self.$$set = ($$props2) => {
    if ("deviceId" in $$props2)
      $$invalidate(0, deviceId = $$props2.deviceId);
    if ("placeholder" in $$props2)
      $$invalidate(1, placeholder = $$props2.placeholder);
    if ("deviceFilter" in $$props2)
      $$invalidate(8, deviceFilter = $$props2.deviceFilter);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$devices, deviceFilter*/
    2304) {
      $$invalidate(10, flatDevices = Object.values($devices).filter((device) => deviceFilter ? deviceFilter(device) : true));
    }
    if ($$self.$$.dirty & /*flatDevices*/
    1024) {
      $$invalidate(9, sorted = (flatDevices ?? []).sort((a3, b2) => {
        if (a3.name === b2.name)
          return 0;
        if (a3.name < b2.name)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*deviceId, flatDevices*/
    1025) {
      $$invalidate(3, selected = deviceId !== void 0 ? flatDevices.find((d3) => d3.id === deviceId) : void 0);
    }
    if ($$self.$$.dirty & /*search, sorted*/
    516) {
      filterDevices(search);
    }
    if ($$self.$$.dirty & /*selected*/
    8) {
      onSelected(selected);
    }
  };
  return [
    deviceId,
    placeholder,
    search,
    selected,
    open,
    filtered,
    $homey,
    onDevice,
    deviceFilter,
    sorted,
    flatDevices,
    $devices,
    click_handler,
    click_handler_1,
    click_handler_2,
    input_value_binding,
    click_handler_3,
    func
  ];
}
class DevicePicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$R, create_fragment$T, safe_not_equal, {
      deviceId: 0,
      placeholder: 1,
      deviceFilter: 8
    });
  }
}
function get_each_context$j(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[23] = list[i2];
  return child_ctx;
}
function create_else_block$s(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*placeholder*/
        ctx[1]
      );
    },
    l(nodes) {
      t2 = claim_text(
        nodes,
        /*placeholder*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*placeholder*/
      2)
        set_data(
          t2,
          /*placeholder*/
          ctx2[1]
        );
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_4$6(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Capability not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Capability not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_2$j(ctx) {
  var _a2;
  let t0;
  let span;
  let t1_value = (
    /*selected*/
    ctx[3].title + ""
  );
  let t1;
  let t2;
  let iconbutton;
  let current;
  let if_block = (
    /*selected*/
    ((_a2 = ctx[3].capability.iconObj) == null ? void 0 : _a2.url) && create_if_block_3$b(ctx)
  );
  iconbutton = new IconButton({ props: { data: mdiDelete, size: "14px" } });
  iconbutton.$on(
    "click",
    /*click_handler*/
    ctx[14]
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      create_component(iconbutton.$$.fragment);
      this.h();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t0 = claim_space(nodes);
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      t2 = claim_space(nodes);
      claim_component(iconbutton.$$.fragment, nodes);
      this.h();
    },
    h() {
      attr(span, "class", "mr-auto");
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, span, anchor);
      append_hydration(span, t1);
      insert_hydration(target, t2, anchor);
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3;
      if (
        /*selected*/
        (_a3 = ctx2[3].capability.iconObj) == null ? void 0 : _a3.url
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_3$b(ctx2);
          if_block.c();
          if_block.m(t0.parentNode, t0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if ((!current || dirty & /*selected*/
      8) && t1_value !== (t1_value = /*selected*/
      ctx2[3].title + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(span);
        detach(t2);
      }
      if (if_block)
        if_block.d(detaching);
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_if_block_3$b(ctx) {
  let await_block_anchor;
  let promise;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block_1,
    then: create_then_block_1,
    catch: create_catch_block_1,
    value: 26
  };
  handle_promise(promise = /*$homey*/
  ctx[6].baseUrl, info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    l(nodes) {
      await_block_anchor = empty();
      info.block.l(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty & /*$homey*/
      64 && promise !== (promise = /*$homey*/
      ctx[6].baseUrl) && handle_promise(promise, info))
        ;
      else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_catch_block_1(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block_1(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
      this.h();
    },
    h() {
      var _a2;
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[26] + /*selected*/
      ((_a2 = ctx[3].capability.iconObj) == null ? void 0 : _a2.url)))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*selected*/
      ctx[3].title);
      attr(img, "class", "h-6 w-6 mr-2 dark:invert");
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      var _a2;
      if (dirty & /*$homey, selected*/
      72 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[26] + /*selected*/
      ((_a2 = ctx2[3].capability.iconObj) == null ? void 0 : _a2.url))) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*selected*/
      8 && img_alt_value !== (img_alt_value = /*selected*/
      ctx2[3].title)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block_1(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_default_slot_5$6(ctx) {
  let span;
  let textContent = "Capability:";
  let t1;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_2$j, create_if_block_4$6, create_else_block$s];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*selected*/
      ctx2[3]
    )
      return 0;
    if (
      /*capabilityUri*/
      ctx2[0] !== void 0
    )
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
      t1 = space();
      if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-mx50i2")
        span.textContent = textContent;
      t1 = claim_space(nodes);
      if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      attr(span, "class", "mr-1");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      insert_hydration(target, t1, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
        detach(t1);
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_if_block$G(ctx) {
  let modal;
  let current;
  modal = new Modal({
    props: {
      handleClose: (
        /*func*/
        ctx[19]
      ),
      $$slots: { content: [create_content_slot$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal.$$.fragment);
    },
    l(nodes) {
      claim_component(modal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_changes = {};
      if (dirty & /*open*/
      16)
        modal_changes.handleClose = /*func*/
        ctx2[19];
      if (dirty & /*$$scope, filtered, $homey, search, open*/
      134217844) {
        modal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal.$set(modal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal, detaching);
    }
  };
}
function create_catch_block$2(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block$2(ctx) {
  var _a2, _b2;
  let if_block_anchor;
  let if_block = (
    /*item*/
    ((_b2 = (_a2 = ctx[23].capability) == null ? void 0 : _a2.iconObj) == null ? void 0 : _b2.url) && create_if_block_1$t(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      var _a3, _b3;
      if (
        /*item*/
        (_b3 = (_a3 = ctx2[23].capability) == null ? void 0 : _a3.iconObj) == null ? void 0 : _b3.url
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_1$t(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_1$t(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
      this.h();
    },
    h() {
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[26] + /*item*/
      ctx[23].capability.iconObj.url))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*item*/
      ctx[23].capability.title);
      attr(img, "class", "h-6 w-6 mr-2 dark:invert");
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$homey, filtered*/
      96 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[26] + /*item*/
      ctx2[23].capability.iconObj.url)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*filtered*/
      32 && img_alt_value !== (img_alt_value = /*item*/
      ctx2[23].capability.title)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block$2(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_default_slot_4$8(ctx) {
  let promise;
  let t0;
  let t1_value = (
    /*item*/
    ctx[23].device.name + ""
  );
  let t1;
  let t2;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$2,
    then: create_then_block$2,
    catch: create_catch_block$2,
    value: 26
  };
  handle_promise(promise = /*$homey*/
  ctx[6].baseUrl, info);
  return {
    c() {
      info.block.c();
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
    },
    l(nodes) {
      info.block.l(nodes);
      t0 = claim_space(nodes);
      t1 = claim_text(nodes, t1_value);
      t2 = claim_space(nodes);
    },
    m(target, anchor) {
      info.block.m(target, info.anchor = anchor);
      info.mount = () => t0.parentNode;
      info.anchor = t0;
      insert_hydration(target, t0, anchor);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, t2, anchor);
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty & /*$homey*/
      64 && promise !== (promise = /*$homey*/
      ctx[6].baseUrl) && handle_promise(promise, info))
        ;
      else {
        update_await_block_branch(info, ctx, dirty);
      }
      if (dirty & /*filtered*/
      32 && t1_value !== (t1_value = /*item*/
      ctx[23].device.name + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_title_slot$6(ctx) {
  let list_item_content_title;
  let current;
  list_item_content_title = new List.Item.Content.Title({
    props: {
      slot: "title",
      class: "flex",
      $$slots: { default: [create_default_slot_4$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content_title.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content_title.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content_title, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_title_changes = {};
      if (dirty & /*$$scope, filtered, $homey*/
      134217824) {
        list_item_content_title_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content_title.$set(list_item_content_title_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content_title.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content_title.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content_title, detaching);
    }
  };
}
function create_default_slot_3$9(ctx) {
  var _a2, _b2;
  let span0;
  let t0_value = (
    /*item*/
    ctx[23].capability.title + ""
  );
  let t0;
  let t1;
  let span1;
  let t2_value = (
    /*item*/
    ((_a2 = ctx[23].capability) == null ? void 0 : _a2.value) + ""
  );
  let t2;
  let t3;
  let t4_value = (
    /*item*/
    (((_b2 = ctx[23].capability) == null ? void 0 : _b2.units) ?? "") + ""
  );
  let t4;
  let t5;
  return {
    c() {
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      span1 = element("span");
      t2 = text(t2_value);
      t3 = space();
      t4 = text(t4_value);
      t5 = space();
    },
    l(nodes) {
      span0 = claim_element(nodes, "SPAN", {});
      var span0_nodes = children(span0);
      t0 = claim_text(span0_nodes, t0_value);
      span0_nodes.forEach(detach);
      t1 = claim_space(nodes);
      span1 = claim_element(nodes, "SPAN", {});
      var span1_nodes = children(span1);
      t2 = claim_text(span1_nodes, t2_value);
      t3 = claim_space(span1_nodes);
      t4 = claim_text(span1_nodes, t4_value);
      span1_nodes.forEach(detach);
      t5 = claim_space(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, span0, anchor);
      append_hydration(span0, t0);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, span1, anchor);
      append_hydration(span1, t2);
      append_hydration(span1, t3);
      append_hydration(span1, t4);
      insert_hydration(target, t5, anchor);
    },
    p(ctx2, dirty) {
      var _a3, _b3;
      if (dirty & /*filtered*/
      32 && t0_value !== (t0_value = /*item*/
      ctx2[23].capability.title + ""))
        set_data(t0, t0_value);
      if (dirty & /*filtered*/
      32 && t2_value !== (t2_value = /*item*/
      ((_a3 = ctx2[23].capability) == null ? void 0 : _a3.value) + ""))
        set_data(t2, t2_value);
      if (dirty & /*filtered*/
      32 && t4_value !== (t4_value = /*item*/
      (((_b3 = ctx2[23].capability) == null ? void 0 : _b3.units) ?? "") + ""))
        set_data(t4, t4_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span0);
        detach(t1);
        detach(span1);
        detach(t5);
      }
    }
  };
}
function create_description_slot$3(ctx) {
  let list_item_content_description;
  let current;
  list_item_content_description = new List.Item.Content.Description({
    props: {
      slot: "description",
      class: "w-full flex justify-between",
      $$slots: { default: [create_default_slot_3$9] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content_description.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content_description.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content_description, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_description_changes = {};
      if (dirty & /*$$scope, filtered*/
      134217760) {
        list_item_content_description_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content_description.$set(list_item_content_description_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content_description.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content_description.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content_description, detaching);
    }
  };
}
function create_content_slot_1$4(ctx) {
  let list_item_content;
  let current;
  list_item_content = new List.Item.Content({
    props: {
      slot: "content",
      $$slots: {
        description: [create_description_slot$3],
        title: [create_title_slot$6]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_changes = {};
      if (dirty & /*$$scope, filtered, $homey*/
      134217824) {
        list_item_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content.$set(list_item_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content, detaching);
    }
  };
}
function create_each_block$j(ctx) {
  let list_item;
  let current;
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[18](
        /*item*/
        ctx[23]
      )
    );
  }
  list_item = new List.Item({
    props: {
      class: "cursor-pointer",
      $$slots: { content: [create_content_slot_1$4] },
      $$scope: { ctx }
    }
  });
  list_item.$on("click", click_handler_3);
  return {
    c() {
      create_component(list_item.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const list_item_changes = {};
      if (dirty & /*$$scope, filtered, $homey*/
      134217824) {
        list_item_changes.$$scope = { dirty, ctx };
      }
      list_item.$set(list_item_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item, detaching);
    }
  };
}
function create_default_slot_2$9(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*filtered*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$j(get_each_context$j(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*onItem, filtered, $homey*/
      224) {
        each_value = ensure_array_like(
          /*filtered*/
          ctx2[5]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$j(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$j(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_1$f(ctx) {
  let div1;
  let div0;
  let iconbutton;
  let t0;
  let div2;
  let input;
  let updating_value;
  let t1;
  let div3;
  let list;
  let current;
  iconbutton = new IconButton({ props: { data: mdiClose } });
  iconbutton.$on(
    "click",
    /*click_handler_2*/
    ctx[16]
  );
  function input_value_binding(value) {
    ctx[17](value);
  }
  let input_props = { name: "search", placeholder: "Search" };
  if (
    /*search*/
    ctx[2] !== void 0
  ) {
    input_props.value = /*search*/
    ctx[2];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  list = new List({
    props: {
      $$slots: { default: [create_default_slot_2$9] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      create_component(iconbutton.$$.fragment);
      t0 = space();
      div2 = element("div");
      create_component(input.$$.fragment);
      t1 = space();
      div3 = element("div");
      create_component(list.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(iconbutton.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", {});
      var div2_nodes = children(div2);
      claim_component(input.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      claim_component(list.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "absolute -top-4 -right-5 z-10");
      attr(div1, "class", "relative w-full");
      attr(div3, "class", "flex-grow overflow-auto");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      mount_component(iconbutton, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(input, div2, null);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div3, anchor);
      mount_component(list, div3, null);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (!updating_value && dirty & /*search*/
      4) {
        updating_value = true;
        input_changes.value = /*search*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      const list_changes = {};
      if (dirty & /*$$scope, filtered, $homey*/
      134217824) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      transition_in(input.$$.fragment, local);
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      transition_out(input.$$.fragment, local);
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t0);
        detach(div2);
        detach(t1);
        detach(div3);
      }
      destroy_component(iconbutton);
      destroy_component(input);
      destroy_component(list);
    }
  };
}
function create_body_slot$6(ctx) {
  let modal_content_body;
  let current;
  modal_content_body = new Modal.Content.Body({
    props: {
      slot: "body",
      class: "h-full flex flex-col",
      $$slots: { default: [create_default_slot_1$f] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content_body.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content_body.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content_body, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_body_changes = {};
      if (dirty & /*$$scope, filtered, $homey, search, open*/
      134217844) {
        modal_content_body_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content_body.$set(modal_content_body_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content_body.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content_body.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content_body, detaching);
    }
  };
}
function create_content_slot$8(ctx) {
  let modal_content;
  let current;
  modal_content = new Modal.Content({
    props: {
      slot: "content",
      $$slots: { body: [create_body_slot$6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_changes = {};
      if (dirty & /*$$scope, filtered, $homey, search, open*/
      134217844) {
        modal_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content.$set(modal_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content, detaching);
    }
  };
}
function create_default_slot$j(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*open*/
    ctx[4] && create_if_block$G(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*open*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*open*/
          16) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$G(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment$S(ctx) {
  let button;
  let t2;
  let portal;
  let current;
  button = new Button({
    props: {
      class: "w-full justify-start border border-border",
      $$slots: { default: [create_default_slot_5$6] },
      $$scope: { ctx }
    }
  });
  button.$on(
    "click",
    /*click_handler_1*/
    ctx[15]
  );
  portal = new Portal({
    props: {
      $$slots: { default: [create_default_slot$j] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
      t2 = space();
      create_component(portal.$$.fragment);
    },
    l(nodes) {
      claim_component(button.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(portal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(portal, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const button_changes = {};
      if (dirty & /*$$scope, capabilityUri, selected, $homey, placeholder*/
      134217803) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
      const portal_changes = {};
      if (dirty & /*$$scope, open, filtered, $homey, search*/
      134217844) {
        portal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      portal.$set(portal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      transition_in(portal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      transition_out(portal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(button, detaching);
      destroy_component(portal, detaching);
    }
  };
}
function instance$Q($$self, $$props, $$invalidate) {
  let flatDevices;
  let flatCapabilities;
  let sorted;
  let $devices;
  let $homey;
  component_subscribe($$self, devices, ($$value) => $$invalidate(13, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(6, $homey = $$value));
  let { capabilityUri } = $$props;
  let { placeholder = "Select capability" } = $$props;
  let { deviceFilter = void 0 } = $$props;
  let { capabilityFilter: capabilityFilter2 = void 0 } = $$props;
  const dispatch = createEventDispatcher();
  let open = false;
  let search = "";
  let filtered = [];
  let selected;
  function filterCapabilities(value, s3) {
    const normalized = value.toLowerCase();
    if (value.length > 0) {
      $$invalidate(5, filtered = sorted.filter((d3) => d3.search.includes(normalized)));
    } else {
      $$invalidate(5, filtered = sorted);
    }
  }
  function onItem(item) {
    $$invalidate(0, capabilityUri = item.uri);
    $$invalidate(4, open = false);
    dispatch("capabilityUri", capabilityUri);
  }
  function onSelected(item) {
    dispatch("device", item == null ? void 0 : item.device);
    dispatch("capability", item == null ? void 0 : item.capability);
  }
  const click_handler = () => $$invalidate(0, capabilityUri = void 0);
  const click_handler_1 = () => $$invalidate(4, open = true);
  const click_handler_2 = () => $$invalidate(4, open = false);
  function input_value_binding(value) {
    search = value;
    $$invalidate(2, search);
  }
  const click_handler_3 = (item) => onItem(item);
  const func = () => $$invalidate(4, open = false);
  $$self.$$set = ($$props2) => {
    if ("capabilityUri" in $$props2)
      $$invalidate(0, capabilityUri = $$props2.capabilityUri);
    if ("placeholder" in $$props2)
      $$invalidate(1, placeholder = $$props2.placeholder);
    if ("deviceFilter" in $$props2)
      $$invalidate(8, deviceFilter = $$props2.deviceFilter);
    if ("capabilityFilter" in $$props2)
      $$invalidate(9, capabilityFilter2 = $$props2.capabilityFilter);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$devices, deviceFilter*/
    8448) {
      $$invalidate(12, flatDevices = Object.values($devices ?? {}).filter((device) => deviceFilter ? deviceFilter(device) : true));
    }
    if ($$self.$$.dirty & /*flatDevices, capabilityFilter*/
    4608) {
      $$invalidate(11, flatCapabilities = flatDevices.flatMap((device) => Object.values(device.capabilitiesObj ?? {}).filter((capability) => capabilityFilter2 ? capabilityFilter2(capability) : true).map((capability) => ({
        device,
        capability,
        uri: device.uri + ":" + capability.id,
        title: device.name + " - " + capability.title,
        search: (device.name + " " + capability.title).toLowerCase()
      }))));
    }
    if ($$self.$$.dirty & /*flatCapabilities*/
    2048) {
      $$invalidate(10, sorted = (flatCapabilities ?? []).sort((a3, b2) => {
        if (a3.title === b2.title)
          return 0;
        if (a3.title < b2.title)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*capabilityUri, flatCapabilities*/
    2049) {
      $$invalidate(3, selected = capabilityUri !== void 0 ? flatCapabilities.find((c2) => c2.uri === capabilityUri) ?? void 0 : void 0);
    }
    if ($$self.$$.dirty & /*search, sorted*/
    1028) {
      filterCapabilities(search);
    }
    if ($$self.$$.dirty & /*selected*/
    8) {
      onSelected(selected);
    }
  };
  return [
    capabilityUri,
    placeholder,
    search,
    selected,
    open,
    filtered,
    $homey,
    onItem,
    deviceFilter,
    capabilityFilter2,
    sorted,
    flatCapabilities,
    flatDevices,
    $devices,
    click_handler,
    click_handler_1,
    click_handler_2,
    input_value_binding,
    click_handler_3,
    func
  ];
}
class CapabilityPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$Q, create_fragment$S, safe_not_equal, {
      capabilityUri: 0,
      placeholder: 1,
      deviceFilter: 8,
      capabilityFilter: 9
    });
  }
}
function get_each_context$i(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[15] = list[i2];
  return child_ctx;
}
function create_else_block$r(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*placeholder*/
        ctx[1]
      );
    },
    l(nodes) {
      t2 = claim_text(
        nodes,
        /*placeholder*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*placeholder*/
      2)
        set_data(
          t2,
          /*placeholder*/
          ctx2[1]
        );
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_3$a(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Icon not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Icon not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_2$i(ctx) {
  let div;
  let icon_1;
  let t2;
  let iconbutton;
  let current;
  icon_1 = new Icon({
    props: { data: (
      /*selected*/
      ctx[3].icon
    ) }
  });
  iconbutton = new IconButton({ props: { data: mdiDelete, size: "14px" } });
  iconbutton.$on(
    "click",
    /*click_handler*/
    ctx[6]
  );
  return {
    c() {
      div = element("div");
      create_component(icon_1.$$.fragment);
      t2 = space();
      create_component(iconbutton.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(icon_1.$$.fragment, div_nodes);
      t2 = claim_space(div_nodes);
      claim_component(iconbutton.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex justify-between w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(icon_1, div, null);
      append_hydration(div, t2);
      mount_component(iconbutton, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*selected*/
      8)
        icon_1_changes.data = /*selected*/
        ctx2[3].icon;
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon_1);
      destroy_component(iconbutton);
    }
  };
}
function create_default_slot_5$5(ctx) {
  let span;
  let textContent = "Icon:";
  let t1;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_2$i, create_if_block_3$a, create_else_block$r];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*selected*/
      ctx2[3]
    )
      return 0;
    if (
      /*iconId*/
      ctx2[0] !== void 0
    )
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
      t1 = space();
      if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-90k79b")
        span.textContent = textContent;
      t1 = claim_space(nodes);
      if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      attr(span, "class", "mr-1");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      insert_hydration(target, t1, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
        detach(t1);
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_if_block$F(ctx) {
  let modal;
  let current;
  modal = new Modal({
    props: {
      handleClose: (
        /*func*/
        ctx[11]
      ),
      $$slots: { content: [create_content_slot$7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal.$$.fragment);
    },
    l(nodes) {
      claim_component(modal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_changes = {};
      if (dirty & /*open*/
      16)
        modal_changes.handleClose = /*func*/
        ctx2[11];
      if (dirty & /*$$scope, filtered, selected, search, open*/
      262204) {
        modal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal.$set(modal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal, detaching);
    }
  };
}
function create_if_block_1$s(ctx) {
  let div;
  let t0;
  let t1_value = lookup.length + "";
  let t1;
  let t2;
  let t3;
  let t4;
  return {
    c() {
      div = element("div");
      t0 = text("NOTE: There are ");
      t1 = text(t1_value);
      t2 = text(" icons available. Only ");
      t3 = text(limit);
      t4 = text(" are listed until you enter a search string.");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      t0 = claim_text(div_nodes, "NOTE: There are ");
      t1 = claim_text(div_nodes, t1_value);
      t2 = claim_text(div_nodes, " icons available. Only ");
      t3 = claim_text(div_nodes, limit);
      t4 = claim_text(div_nodes, " are listed until you enter a search string.");
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "mt-2 mb-4");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, t0);
      append_hydration(div, t1);
      append_hydration(div, t2);
      append_hydration(div, t3);
      append_hydration(div, t4);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_default_slot_4$7(ctx) {
  let icon_1;
  let t2;
  let current;
  icon_1 = new Icon({ props: { data: (
    /*icon*/
    ctx[15].icon
  ) } });
  return {
    c() {
      create_component(icon_1.$$.fragment);
      t2 = space();
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
      t2 = claim_space(nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      insert_hydration(target, t2, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*filtered*/
      32)
        icon_1_changes.data = /*icon*/
        ctx2[15].icon;
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(icon_1, detaching);
    }
  };
}
function create_title_slot$5(ctx) {
  let list_item_content_title;
  let current;
  list_item_content_title = new List.Item.Content.Title({
    props: {
      slot: "title",
      class: "flex",
      $$slots: { default: [create_default_slot_4$7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content_title.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content_title.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content_title, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_title_changes = {};
      if (dirty & /*$$scope, filtered*/
      262176) {
        list_item_content_title_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content_title.$set(list_item_content_title_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content_title.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content_title.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content_title, detaching);
    }
  };
}
function create_default_slot_3$8(ctx) {
  let span;
  let t0_value = (
    /*icon*/
    ctx[15].id + ""
  );
  let t0;
  let t1;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      span_nodes.forEach(detach);
      t1 = claim_space(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      insert_hydration(target, t1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*filtered*/
      32 && t0_value !== (t0_value = /*icon*/
      ctx2[15].id + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
        detach(t1);
      }
    }
  };
}
function create_description_slot$2(ctx) {
  let list_item_content_description;
  let current;
  list_item_content_description = new List.Item.Content.Description({
    props: {
      slot: "description",
      class: "w-full flex justify-between",
      $$slots: { default: [create_default_slot_3$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content_description.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content_description.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content_description, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_description_changes = {};
      if (dirty & /*$$scope, filtered*/
      262176) {
        list_item_content_description_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content_description.$set(list_item_content_description_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content_description.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content_description.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content_description, detaching);
    }
  };
}
function create_content_slot_1$3(ctx) {
  let list_item_content;
  let current;
  list_item_content = new List.Item.Content({
    props: {
      slot: "content",
      $$slots: {
        description: [create_description_slot$2],
        title: [create_title_slot$5]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_changes = {};
      if (dirty & /*$$scope, filtered*/
      262176) {
        list_item_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content.$set(list_item_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content, detaching);
    }
  };
}
function create_each_block$i(ctx) {
  let list_item;
  let current;
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[10](
        /*icon*/
        ctx[15]
      )
    );
  }
  list_item = new List.Item({
    props: {
      class: "cursor-pointer",
      $$slots: { content: [create_content_slot_1$3] },
      $$scope: { ctx }
    }
  });
  list_item.$on("click", click_handler_3);
  return {
    c() {
      create_component(list_item.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const list_item_changes = {};
      if (dirty & /*$$scope, filtered*/
      262176) {
        list_item_changes.$$scope = { dirty, ctx };
      }
      list_item.$set(list_item_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item, detaching);
    }
  };
}
function create_default_slot_2$8(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*filtered*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$i(get_each_context$i(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*selected, filtered*/
      40) {
        each_value = ensure_array_like(
          /*filtered*/
          ctx2[5]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$i(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$i(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_1$e(ctx) {
  let div1;
  let div0;
  let iconbutton;
  let t0;
  let div2;
  let input;
  let updating_value;
  let t1;
  let t2;
  let div3;
  let list;
  let current;
  iconbutton = new IconButton({ props: { data: mdiClose } });
  iconbutton.$on(
    "click",
    /*click_handler_2*/
    ctx[8]
  );
  function input_value_binding(value) {
    ctx[9](value);
  }
  let input_props = { name: "search", placeholder: "Search" };
  if (
    /*search*/
    ctx[2] !== void 0
  ) {
    input_props.value = /*search*/
    ctx[2];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  let if_block = (
    /*search*/
    ctx[2].length === 0 && create_if_block_1$s()
  );
  list = new List({
    props: {
      $$slots: { default: [create_default_slot_2$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      create_component(iconbutton.$$.fragment);
      t0 = space();
      div2 = element("div");
      create_component(input.$$.fragment);
      t1 = space();
      if (if_block)
        if_block.c();
      t2 = space();
      div3 = element("div");
      create_component(list.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(iconbutton.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", {});
      var div2_nodes = children(div2);
      claim_component(input.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t1 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      claim_component(list.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "absolute -top-4 -right-5 z-10");
      attr(div1, "class", "relative w-full");
      attr(div3, "class", "flex-grow overflow-auto");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      mount_component(iconbutton, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(input, div2, null);
      insert_hydration(target, t1, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, div3, anchor);
      mount_component(list, div3, null);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (!updating_value && dirty & /*search*/
      4) {
        updating_value = true;
        input_changes.value = /*search*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      if (
        /*search*/
        ctx2[2].length === 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_1$s();
          if_block.c();
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      const list_changes = {};
      if (dirty & /*$$scope, filtered, selected*/
      262184) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      transition_in(input.$$.fragment, local);
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      transition_out(input.$$.fragment, local);
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t0);
        detach(div2);
        detach(t1);
        detach(t2);
        detach(div3);
      }
      destroy_component(iconbutton);
      destroy_component(input);
      if (if_block)
        if_block.d(detaching);
      destroy_component(list);
    }
  };
}
function create_body_slot$5(ctx) {
  let modal_content_body;
  let current;
  modal_content_body = new Modal.Content.Body({
    props: {
      slot: "body",
      class: "h-full flex flex-col",
      $$slots: { default: [create_default_slot_1$e] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content_body.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content_body.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content_body, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_body_changes = {};
      if (dirty & /*$$scope, filtered, selected, search, open*/
      262204) {
        modal_content_body_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content_body.$set(modal_content_body_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content_body.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content_body.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content_body, detaching);
    }
  };
}
function create_content_slot$7(ctx) {
  let modal_content;
  let current;
  modal_content = new Modal.Content({
    props: {
      slot: "content",
      $$slots: { body: [create_body_slot$5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_changes = {};
      if (dirty & /*$$scope, filtered, selected, search, open*/
      262204) {
        modal_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content.$set(modal_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content, detaching);
    }
  };
}
function create_default_slot$i(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*open*/
    ctx[4] && create_if_block$F(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*open*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*open*/
          16) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$F(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment$R(ctx) {
  let button;
  let t2;
  let portal;
  let current;
  button = new Button({
    props: {
      class: "w-full justify-start border border-border",
      $$slots: { default: [create_default_slot_5$5] },
      $$scope: { ctx }
    }
  });
  button.$on(
    "click",
    /*click_handler_1*/
    ctx[7]
  );
  portal = new Portal({
    props: {
      $$slots: { default: [create_default_slot$i] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
      t2 = space();
      create_component(portal.$$.fragment);
    },
    l(nodes) {
      claim_component(button.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(portal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(portal, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const button_changes = {};
      if (dirty & /*$$scope, iconId, selected, placeholder*/
      262155) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
      const portal_changes = {};
      if (dirty & /*$$scope, open, filtered, selected, search*/
      262204) {
        portal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      portal.$set(portal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      transition_in(portal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      transition_out(portal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(button, detaching);
      destroy_component(portal, detaching);
    }
  };
}
const limit = 50;
function instance$P($$self, $$props, $$invalidate) {
  let { iconId } = $$props;
  let { placeholder = "Select icon" } = $$props;
  let open = false;
  let search = "";
  let filtered;
  let selected;
  function onIconId(id) {
    $$invalidate(3, selected = id !== void 0 ? lookup.find((icon) => icon.id === id) ?? void 0 : void 0);
  }
  function onSearch(s3) {
    if (s3.length === 0) {
      return lookup.slice(0, limit);
    } else {
      const result = [];
      const normalized = s3.toLowerCase();
      for (let index2 = 0; index2 < lookup.length; index2++) {
        const item = lookup[index2];
        if (item.id.includes(normalized)) {
          result.push(item);
          if (s3.length < 3 && result.length === limit) {
            break;
          }
        }
      }
      return result;
    }
  }
  function onSelected(s3) {
    if ((s3 == null ? void 0 : s3.id) !== iconId) {
      $$invalidate(0, iconId = s3 == null ? void 0 : s3.id);
    }
    $$invalidate(4, open = false);
  }
  const click_handler = () => $$invalidate(0, iconId = void 0);
  const click_handler_1 = () => $$invalidate(4, open = true);
  const click_handler_2 = () => $$invalidate(4, open = false);
  function input_value_binding(value) {
    search = value;
    $$invalidate(2, search);
  }
  const click_handler_3 = (icon) => $$invalidate(3, selected = icon);
  const func = () => $$invalidate(4, open = false);
  $$self.$$set = ($$props2) => {
    if ("iconId" in $$props2)
      $$invalidate(0, iconId = $$props2.iconId);
    if ("placeholder" in $$props2)
      $$invalidate(1, placeholder = $$props2.placeholder);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*search*/
    4) {
      $$invalidate(5, filtered = onSearch(search));
    }
    if ($$self.$$.dirty & /*iconId*/
    1) {
      onIconId(iconId);
    }
    if ($$self.$$.dirty & /*selected*/
    8) {
      onSelected(selected);
    }
  };
  return [
    iconId,
    placeholder,
    search,
    selected,
    open,
    filtered,
    click_handler,
    click_handler_1,
    click_handler_2,
    input_value_binding,
    click_handler_3,
    func
  ];
}
class IconPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$P, create_fragment$R, safe_not_equal, { iconId: 0, placeholder: 1 });
  }
}
function create_if_block$E(ctx) {
  let input;
  let updating_value;
  let current;
  function input_value_binding(value) {
    ctx[7](value);
  }
  let input_props = {
    name: "title",
    placeholder: (
      /*capability*/
      ctx[3].title
    ),
    class: "mt-2"
  };
  if (
    /*title*/
    ctx[1] !== void 0
  ) {
    input_props.value = /*title*/
    ctx[1];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  return {
    c() {
      create_component(input.$$.fragment);
    },
    l(nodes) {
      claim_component(input.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(input, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (dirty & /*capability*/
      8)
        input_changes.placeholder = /*capability*/
        ctx2[3].title;
      if (!updating_value && dirty & /*title*/
      2) {
        updating_value = true;
        input_changes.value = /*title*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(input, detaching);
    }
  };
}
function create_fragment$Q(ctx) {
  let div0;
  let capabilitypicker;
  let updating_capabilityUri;
  let t0;
  let t1;
  let div1;
  let iconpicker;
  let updating_iconId;
  let current;
  function capabilitypicker_capabilityUri_binding(value) {
    ctx[5](value);
  }
  let capabilitypicker_props = {};
  if (
    /*capabilityUri*/
    ctx[0] !== void 0
  ) {
    capabilitypicker_props.capabilityUri = /*capabilityUri*/
    ctx[0];
  }
  capabilitypicker = new CapabilityPicker({ props: capabilitypicker_props });
  binding_callbacks.push(() => bind(capabilitypicker, "capabilityUri", capabilitypicker_capabilityUri_binding));
  capabilitypicker.$on(
    "capability",
    /*capability_handler*/
    ctx[6]
  );
  let if_block = (
    /*capability*/
    ctx[3] && create_if_block$E(ctx)
  );
  function iconpicker_iconId_binding(value) {
    ctx[8](value);
  }
  let iconpicker_props = {};
  if (
    /*iconId*/
    ctx[2] !== void 0
  ) {
    iconpicker_props.iconId = /*iconId*/
    ctx[2];
  }
  iconpicker = new IconPicker({ props: iconpicker_props });
  binding_callbacks.push(() => bind(iconpicker, "iconId", iconpicker_iconId_binding));
  return {
    c() {
      div0 = element("div");
      create_component(capabilitypicker.$$.fragment);
      t0 = space();
      if (if_block)
        if_block.c();
      t1 = space();
      div1 = element("div");
      create_component(iconpicker.$$.fragment);
      this.h();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(capabilitypicker.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      t1 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      claim_component(iconpicker.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mt-2");
      attr(div1, "class", "mt-2");
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(capabilitypicker, div0, null);
      insert_hydration(target, t0, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div1, anchor);
      mount_component(iconpicker, div1, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const capabilitypicker_changes = {};
      if (!updating_capabilityUri && dirty & /*capabilityUri*/
      1) {
        updating_capabilityUri = true;
        capabilitypicker_changes.capabilityUri = /*capabilityUri*/
        ctx2[0];
        add_flush_callback(() => updating_capabilityUri = false);
      }
      capabilitypicker.$set(capabilitypicker_changes);
      if (
        /*capability*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$E(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t1.parentNode, t1);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const iconpicker_changes = {};
      if (!updating_iconId && dirty & /*iconId*/
      4) {
        updating_iconId = true;
        iconpicker_changes.iconId = /*iconId*/
        ctx2[2];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker.$set(iconpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(capabilitypicker.$$.fragment, local);
      transition_in(if_block);
      transition_in(iconpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(capabilitypicker.$$.fragment, local);
      transition_out(if_block);
      transition_out(iconpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(t1);
        detach(div1);
      }
      destroy_component(capabilitypicker);
      if (if_block)
        if_block.d(detaching);
      destroy_component(iconpicker);
    }
  };
}
function instance$O($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let capabilityUri;
  let title;
  let iconId;
  let capability;
  function onSettings(s3) {
    $$invalidate(0, capabilityUri = s3 == null ? void 0 : s3.capabilityUri);
    $$invalidate(1, title = s3 == null ? void 0 : s3.title);
    $$invalidate(2, iconId = s3 == null ? void 0 : s3.iconId);
  }
  function onCapability(id) {
    if (id !== settings.capabilityUri) {
      dispatch("settings", { ...settings, capabilityUri: id });
    }
  }
  function onTitle(t2) {
    const value = t2 !== void 0 && t2.length > 0 ? t2 : void 0;
    if (value !== settings.title) {
      dispatch("settings", { ...settings, title: value });
    }
  }
  function onIcon(id) {
    if (id !== settings.iconId) {
      dispatch("settings", { ...settings, iconId: id });
    }
  }
  function capabilitypicker_capabilityUri_binding(value) {
    capabilityUri = value;
    $$invalidate(0, capabilityUri);
  }
  const capability_handler = (c2) => $$invalidate(3, capability = c2.detail);
  function input_value_binding(value) {
    title = value;
    $$invalidate(1, title);
  }
  function iconpicker_iconId_binding(value) {
    iconId = value;
    $$invalidate(2, iconId);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(4, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    16) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*capabilityUri*/
    1) {
      onCapability(capabilityUri);
    }
    if ($$self.$$.dirty & /*title*/
    2) {
      onTitle(title);
    }
    if ($$self.$$.dirty & /*iconId*/
    4) {
      onIcon(iconId);
    }
  };
  return [
    capabilityUri,
    title,
    iconId,
    capability,
    settings,
    capabilitypicker_capabilityUri_binding,
    capability_handler,
    input_value_binding,
    iconpicker_iconId_binding
  ];
}
class CapabilityEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$O, create_fragment$Q, safe_not_equal, { settings: 4 });
  }
}
function get_each_context$h(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[18] = list[i2];
  child_ctx[20] = i2;
  return child_ctx;
}
function create_if_block$D(ctx) {
  let div;
  let each_value = ensure_array_like(Array(
    /*steps*/
    ctx[6]
  ));
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$h(get_each_context$h(ctx, each_value, i2));
  }
  return {
    c() {
      div = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div_nodes);
      }
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "w-full flex justify-between text-xs");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div, null);
        }
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*step, steps*/
      72) {
        each_value = ensure_array_like(Array(
          /*steps*/
          ctx2[6]
        ));
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$h(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block$h(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(div, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block$h(ctx) {
  let span;
  let t0_value = formatNumber$1(
    /*i*/
    ctx[20] * /*step*/
    ctx[3] / 100,
    { style: "percent" }
  ) + "";
  let t0;
  let t1;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = text(" |");
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_text(span_nodes, " |");
      span_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*step*/
      8 && t0_value !== (t0_value = formatNumber$1(
        /*i*/
        ctx2[20] * /*step*/
        ctx2[3] / 100,
        { style: "percent" }
      ) + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$P(ctx) {
  let div;
  let input;
  let t2;
  let div_style_value;
  let mounted;
  let dispose;
  let if_block = (
    /*showStep*/
    ctx[4] && create_if_block$D(ctx)
  );
  return {
    c() {
      div = element("div");
      input = element("input");
      t2 = space();
      if (if_block)
        if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true, style: true });
      var div_nodes = children(div);
      input = claim_element(div_nodes, "INPUT", {
        type: true,
        min: true,
        max: true,
        step: true,
        class: true
      });
      t2 = claim_space(div_nodes);
      if (if_block)
        if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(input, "type", "range");
      attr(
        input,
        "min",
        /*min*/
        ctx[1]
      );
      attr(
        input,
        "max",
        /*max*/
        ctx[2]
      );
      attr(
        input,
        "step",
        /*step*/
        ctx[3]
      );
      input.disabled = /*disabled*/
      ctx[5];
      attr(
        input,
        "class",
        /*finalClass*/
        ctx[7]
      );
      toggle_class(
        input,
        "default",
        /*disabled*/
        ctx[5]
      );
      attr(
        div,
        "class",
        /*finalContainerClass*/
        ctx[8]
      );
      attr(div, "style", div_style_value = /*$$props*/
      ctx[9].style);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, input);
      set_input_value(
        input,
        /*value*/
        ctx[0]
      );
      append_hydration(div, t2);
      if (if_block)
        if_block.m(div, null);
      if (!mounted) {
        dispose = [
          listen(
            input,
            "change",
            /*input_change_input_handler*/
            ctx[16]
          ),
          listen(
            input,
            "input",
            /*input_change_input_handler*/
            ctx[16]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*min*/
      2) {
        attr(
          input,
          "min",
          /*min*/
          ctx2[1]
        );
      }
      if (dirty & /*max*/
      4) {
        attr(
          input,
          "max",
          /*max*/
          ctx2[2]
        );
      }
      if (dirty & /*step*/
      8) {
        attr(
          input,
          "step",
          /*step*/
          ctx2[3]
        );
      }
      if (dirty & /*disabled*/
      32) {
        input.disabled = /*disabled*/
        ctx2[5];
      }
      if (dirty & /*finalClass*/
      128) {
        attr(
          input,
          "class",
          /*finalClass*/
          ctx2[7]
        );
      }
      if (dirty & /*value*/
      1) {
        set_input_value(
          input,
          /*value*/
          ctx2[0]
        );
      }
      if (dirty & /*finalClass, disabled*/
      160) {
        toggle_class(
          input,
          "default",
          /*disabled*/
          ctx2[5]
        );
      }
      if (
        /*showStep*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$D(ctx2);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*finalContainerClass*/
      256) {
        attr(
          div,
          "class",
          /*finalContainerClass*/
          ctx2[8]
        );
      }
      if (dirty & /*$$props*/
      512 && div_style_value !== (div_style_value = /*$$props*/
      ctx2[9].style)) {
        attr(div, "style", div_style_value);
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
const containerClass = "w-full ";
function instance$N($$self, $$props, $$invalidate) {
  let finalContainerClass;
  let finalClass;
  let { value = 0 } = $$props;
  let { min = 0 } = $$props;
  let { max = 100 } = $$props;
  let { step = 1 } = $$props;
  let { showStep = false } = $$props;
  let { type = "info" } = $$props;
  let { disabled = false } = $$props;
  let steps2 = 0;
  if (showStep) {
    steps2 = max / step + 1;
  }
  let defaultClass = "[&::-moz-range-thumb]:cursor-pointer ";
  defaultClass += "[&::-moz-range-thumb]:rounded-full ";
  defaultClass += "[&::-moz-range-thumb]:top-2/4 ";
  defaultClass += "[&::-moz-range-thumb]:translate-y-[-50%] ";
  defaultClass += "[&::-moz-range-thumb]:h-4 ";
  defaultClass += "[&::-moz-range-thumb]:w-4 ";
  defaultClass += "[&::-moz-range-thumb]:border-none ";
  defaultClass += "[&::-moz-range-thumb]:relative ";
  defaultClass += "[&::-moz-range-thumb]:bg-content ";
  defaultClass += "[&::-moz-range-thumb]:[&::-webkit-appearance]:none ";
  defaultClass += "[&::-moz-range-thumb]:bg-surface ";
  defaultClass += "[&::-webkit-slider-thumb]:top-2/4 ";
  defaultClass += "[&::-webkit-slider-thumb]:translate-y-[-50%] ";
  defaultClass += "[&::-webkit-slider-thumb]:cursor-pointer ";
  defaultClass += "[&::-webkit-slider-thumb]:border-none ";
  defaultClass += "[&::-webkit-slider-thumb]:rounded-full ";
  defaultClass += "[&::-webkit-slider-thumb]:[&::-webkit-appearance]:none ";
  defaultClass += "[&::-webkit-slider-thumb]:relative ";
  defaultClass += "[&::-webkit-slider-thumb]:h-4 ";
  defaultClass += "[&::-webkit-slider-thumb]:w-4 ";
  defaultClass += "[&::-webkit-slider-thumb]:bg-content ";
  defaultClass += "[&::-webkit-slider-thumb]:appearance-none ";
  defaultClass += "[&::-webkit-slider-thumb]:bg-surface ";
  defaultClass += "[&::-moz-range-track]:h-6 ";
  defaultClass += "[&::-moz-range-track]:w-full ";
  defaultClass += "[&::-moz-range-track]:rounded-lg ";
  defaultClass += "[&::-moz-range-track]:mr-2 ";
  defaultClass += "[&::-moz-range-track]:rounded-lg ";
  defaultClass += "[&::-webkit-slider-runnable-track]:h-6 ";
  defaultClass += "[&::-webkit-slider-runnable-track]:w-full ";
  defaultClass += "[&::-webkit-slider-runnable-track]:rounded-lg ";
  defaultClass += "[&::-webkit-slider-runnable-track]:mr-2 ";
  defaultClass += "[&::-webkit-slider-runnable-track]:rounded-lg ";
  defaultClass += "[&::-webkit-slider-thumb]:ml-1 ";
  defaultClass += "[&::-moz-range-thumb]:ml-1 ";
  defaultClass += 'before:content-[""] ';
  defaultClass += "before:bg-default ";
  defaultClass += "before:w-full ";
  defaultClass += "before:h-2 ";
  defaultClass += "before:rounded-lg ";
  defaultClass += "before:top-2/4 ";
  defaultClass += "before:translate-y-[-50%] ";
  defaultClass += "before:absolute ";
  defaultClass += "relative ";
  defaultClass += "rounded-3xl ";
  defaultClass += "bg-transparent ";
  defaultClass += "overflow-hidden ";
  defaultClass += "w-full ";
  defaultClass += "appearance-none ";
  defaultClass += "[&::-webkit-slider-thumb]:ring-4 ";
  defaultClass += "[&::-moz-range-thumb]:ring-4 ";
  let infoProgressClass = "[&::-webkit-slider-thumb]:text-info ";
  infoProgressClass += "[&::-moz-range-thumb]:text-info ";
  infoProgressClass += "[&::-webkit-slider-thumb]:shadow-inset-info ";
  infoProgressClass += "[&::-moz-range-thumb]:shadow-inset-info ";
  infoProgressClass += "[&::-webkit-slider-thumb]:ring-info ";
  infoProgressClass += "[&::-moz-range-thumb]:ring-info ";
  infoProgressClass += "[&::-webkit-slider-thumb]:shadow-[var(--focus-shadow),0_0)] ";
  infoProgressClass += "[&::-moz-range-thumb]:shadow-[var(--focus-shadow),0_0)] ";
  infoProgressClass += "[&::-webkit-slider-thumb]:shadow-[calc(100rem_*_-1_-_0.5rem)_0_0_100rem] ";
  infoProgressClass += "[&::-moz-range-thumb]:shadow-[calc(100rem_*_-1_-_0.5rem)_0_0_100rem] ";
  let warnProgressClass = "[&::-webkit-slider-thumb]:text-warn ";
  warnProgressClass += "[&::-moz-range-thumb]:text-warn ";
  warnProgressClass += "[&::-webkit-slider-thumb]:shadow-inset-warn ";
  warnProgressClass += "[&::-moz-range-thumb]:shadow-inset-warn ";
  warnProgressClass += "[&::-webkit-slider-thumb]:ring-warn ";
  warnProgressClass += "[&::-moz-range-thumb]:ring-warn ";
  warnProgressClass += "[&::-webkit-slider-thumb]:shadow-[var(--focus-shadow),0_0)] ";
  warnProgressClass += "[&::-moz-range-thumb]:shadow-[var(--focus-shadow),0_0)] ";
  warnProgressClass += "[&::-webkit-slider-thumb]:shadow-[calc(100rem_*_-1_-_0.5rem)_0_0_100rem] ";
  warnProgressClass += "[&::-moz-range-thumb]:shadow-[calc(100rem_*_-1_-_0.5rem)_0_0_100rem] ";
  let errorProgressClass = "[&::-webkit-slider-thumb]:text-error ";
  errorProgressClass += "[&::-moz-range-thumb]:text-error ";
  errorProgressClass += "[&::-webkit-slider-thumb]:shadow-inset-error ";
  errorProgressClass += "[&::-moz-range-thumb]:shadow-inset-error ";
  errorProgressClass += "[&::-webkit-slider-thumb]:ring-error ";
  errorProgressClass += "[&::-moz-range-thumb]:ring-error ";
  errorProgressClass += "[&::-webkit-slider-thumb]:shadow-[var(--focus-shadow),0_0)] ";
  errorProgressClass += "[&::-moz-range-thumb]:shadow-[var(--focus-shadow),0_0)] ";
  errorProgressClass += "[&::-webkit-slider-thumb]:shadow-[calc(100rem_*_-1_-_0.5rem)_0_0_100rem] ";
  errorProgressClass += "[&::-moz-range-thumb]:shadow-[calc(100rem_*_-1_-_0.5rem)_0_0_100rem] ";
  let successProgressClass = "[&::-webkit-slider-thumb]:text-success ";
  successProgressClass += "[&::-moz-range-thumb]:text-success ";
  successProgressClass += "[&::-webkit-slider-thumb]:shadow-inset-success ";
  successProgressClass += "[&::-moz-range-thumb]:shadow-inset-success ";
  successProgressClass += "[&::-webkit-slider-thumb]:ring-success ";
  successProgressClass += "[&::-moz-range-thumb]:ring-success ";
  successProgressClass += "[&::-webkit-slider-thumb]:shadow-[var(--focus-shadow),0_0)] ";
  successProgressClass += "[&::-moz-range-thumb]:shadow-[var(--focus-shadow),0_0)] ";
  successProgressClass += "[&::-webkit-slider-thumb]:shadow-[calc(100rem_*_-1_-_0.5rem)_0_0_100rem] ";
  successProgressClass += "[&::-moz-range-thumb]:shadow-[calc(100rem_*_-1_-_0.5rem)_0_0_100rem] ";
  function input_change_input_handler() {
    value = to_number(this.value);
    $$invalidate(0, value);
  }
  $$self.$$set = ($$new_props) => {
    $$invalidate(9, $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props)));
    if ("value" in $$new_props)
      $$invalidate(0, value = $$new_props.value);
    if ("min" in $$new_props)
      $$invalidate(1, min = $$new_props.min);
    if ("max" in $$new_props)
      $$invalidate(2, max = $$new_props.max);
    if ("step" in $$new_props)
      $$invalidate(3, step = $$new_props.step);
    if ("showStep" in $$new_props)
      $$invalidate(4, showStep = $$new_props.showStep);
    if ("type" in $$new_props)
      $$invalidate(10, type = $$new_props.type);
    if ("disabled" in $$new_props)
      $$invalidate(5, disabled = $$new_props.disabled);
  };
  $$self.$$.update = () => {
    $$invalidate(8, finalContainerClass = twMerge(containerClass, $$props.class));
    $$invalidate(7, finalClass = twMerge(
      defaultClass,
      type === "info" && !disabled ? infoProgressClass : false,
      type === "warn" && !disabled ? warnProgressClass : false,
      type === "error" && !disabled ? errorProgressClass : false,
      type === "success" && !disabled ? successProgressClass : false,
      // type === undefined && color === undefined && !disabled ? defaultProgressClass : false,
      // color !== undefined && !disabled ? customProgressClass : false,
      $$props.class
    ));
  };
  $$props = exclude_internal_props($$props);
  return [
    value,
    min,
    max,
    step,
    showStep,
    disabled,
    steps2,
    finalClass,
    finalContainerClass,
    $$props,
    type,
    defaultClass,
    infoProgressClass,
    warnProgressClass,
    errorProgressClass,
    successProgressClass,
    input_change_input_handler
  ];
}
class Slider extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$N, create_fragment$P, safe_not_equal, {
      value: 0,
      min: 1,
      max: 2,
      step: 3,
      showStep: 4,
      type: 10,
      disabled: 5
    });
  }
}
function create_if_block$C(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$r, create_else_block$q];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$q(ctx) {
  var _a2;
  let div3;
  let div1;
  let div0;
  let h12;
  let t0_value = (
    /*formatValue*/
    (ctx[5](
      /*value*/
      ctx[3]
    ) ?? "...") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (((_a2 = ctx[1]) == null ? void 0 : _a2.units) ?? "%") + ""
  );
  let t2;
  let t3;
  let span0;
  let t4_value = (
    /*settings*/
    (ctx[0].title ?? /*capability*/
    ctx[1].title) + ""
  );
  let t4;
  let t5;
  let div2;
  let span1;
  let t6_value = (
    /*formatValue*/
    ctx[5](
      /*capability*/
      ctx[1].min
    ) + ""
  );
  let t6;
  let t7;
  let t8_value = (
    /*capability*/
    (ctx[1].units ?? "%") + ""
  );
  let t8;
  let t9;
  let slider;
  let updating_value;
  let t10;
  let span2;
  let t11_value = (
    /*formatValue*/
    ctx[5](
      /*capability*/
      ctx[1].max
    ) + ""
  );
  let t11;
  let t12;
  let t13_value = (
    /*capability*/
    (ctx[1].units ?? "%") + ""
  );
  let t13;
  let current;
  function slider_value_binding(value) {
    ctx[9](value);
  }
  let slider_props = {
    class: "w-full",
    min: (
      /*capability*/
      ctx[1].min
    ),
    max: (
      /*capability*/
      ctx[1].max
    ),
    step: (
      /*capability*/
      ctx[1].step ?? Math.pow(
        0.1,
        /*capability*/
        ctx[1].decimals
      )
    ),
    disabled: (
      /*disabled*/
      ctx[4]
    )
  };
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    slider_props.value = /*value*/
    ctx[3];
  }
  slider = new Slider({ props: slider_props });
  binding_callbacks.push(() => bind(slider, "value", slider_value_binding));
  return {
    c() {
      div3 = element("div");
      div1 = element("div");
      div0 = element("div");
      h12 = element("h1");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      t3 = space();
      span0 = element("span");
      t4 = text(t4_value);
      t5 = space();
      div2 = element("div");
      span1 = element("span");
      t6 = text(t6_value);
      t7 = space();
      t8 = text(t8_value);
      t9 = space();
      create_component(slider.$$.fragment);
      t10 = space();
      span2 = element("span");
      t11 = text(t11_value);
      t12 = space();
      t13 = text(t13_value);
      this.h();
    },
    l(nodes) {
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      div1 = claim_element(div3_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      h12 = claim_element(div0_nodes, "H1", {});
      var h1_nodes = children(h12);
      t0 = claim_text(h1_nodes, t0_value);
      t1 = claim_space(h1_nodes);
      t2 = claim_text(h1_nodes, t2_value);
      h1_nodes.forEach(detach);
      t3 = claim_space(div0_nodes);
      span0 = claim_element(div0_nodes, "SPAN", {});
      var span0_nodes = children(span0);
      t4 = claim_text(span0_nodes, t4_value);
      span0_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t5 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      span1 = claim_element(div2_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      t6 = claim_text(span1_nodes, t6_value);
      t7 = claim_space(span1_nodes);
      t8 = claim_text(span1_nodes, t8_value);
      span1_nodes.forEach(detach);
      t9 = claim_space(div2_nodes);
      claim_component(slider.$$.fragment, div2_nodes);
      t10 = claim_space(div2_nodes);
      span2 = claim_element(div2_nodes, "SPAN", { class: true });
      var span2_nodes = children(span2);
      t11 = claim_text(span2_nodes, t11_value);
      t12 = claim_space(span2_nodes);
      t13 = claim_text(span2_nodes, t13_value);
      span2_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "flex flex-col items-center");
      attr(div1, "class", "mx-auto");
      attr(span1, "class", "whitespace-nowrap mr-4");
      attr(span2, "class", "whitespace-nowrap ml-4");
      attr(div2, "class", "flex flex-row mt-4");
      attr(div3, "class", "flex flex-col w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div3, anchor);
      append_hydration(div3, div1);
      append_hydration(div1, div0);
      append_hydration(div0, h12);
      append_hydration(h12, t0);
      append_hydration(h12, t1);
      append_hydration(h12, t2);
      append_hydration(div0, t3);
      append_hydration(div0, span0);
      append_hydration(span0, t4);
      append_hydration(div3, t5);
      append_hydration(div3, div2);
      append_hydration(div2, span1);
      append_hydration(span1, t6);
      append_hydration(span1, t7);
      append_hydration(span1, t8);
      append_hydration(div2, t9);
      mount_component(slider, div2, null);
      append_hydration(div2, t10);
      append_hydration(div2, span2);
      append_hydration(span2, t11);
      append_hydration(span2, t12);
      append_hydration(span2, t13);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3;
      if ((!current || dirty & /*value*/
      8) && t0_value !== (t0_value = /*formatValue*/
      (ctx2[5](
        /*value*/
        ctx2[3]
      ) ?? "...") + ""))
        set_data(t0, t0_value);
      if ((!current || dirty & /*capability*/
      2) && t2_value !== (t2_value = /*capability*/
      (((_a3 = ctx2[1]) == null ? void 0 : _a3.units) ?? "%") + ""))
        set_data(t2, t2_value);
      if ((!current || dirty & /*settings, capability*/
      3) && t4_value !== (t4_value = /*settings*/
      (ctx2[0].title ?? /*capability*/
      ctx2[1].title) + ""))
        set_data(t4, t4_value);
      if ((!current || dirty & /*capability*/
      2) && t6_value !== (t6_value = /*formatValue*/
      ctx2[5](
        /*capability*/
        ctx2[1].min
      ) + ""))
        set_data(t6, t6_value);
      if ((!current || dirty & /*capability*/
      2) && t8_value !== (t8_value = /*capability*/
      (ctx2[1].units ?? "%") + ""))
        set_data(t8, t8_value);
      const slider_changes = {};
      if (dirty & /*capability*/
      2)
        slider_changes.min = /*capability*/
        ctx2[1].min;
      if (dirty & /*capability*/
      2)
        slider_changes.max = /*capability*/
        ctx2[1].max;
      if (dirty & /*capability*/
      2)
        slider_changes.step = /*capability*/
        ctx2[1].step ?? Math.pow(
          0.1,
          /*capability*/
          ctx2[1].decimals
        );
      if (dirty & /*disabled*/
      16)
        slider_changes.disabled = /*disabled*/
        ctx2[4];
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        slider_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      slider.$set(slider_changes);
      if ((!current || dirty & /*capability*/
      2) && t11_value !== (t11_value = /*formatValue*/
      ctx2[5](
        /*capability*/
        ctx2[1].max
      ) + ""))
        set_data(t11, t11_value);
      if ((!current || dirty & /*capability*/
      2) && t13_value !== (t13_value = /*capability*/
      (ctx2[1].units ?? "%") + ""))
        set_data(t13, t13_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(slider.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(slider.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      destroy_component(slider);
    }
  };
}
function create_if_block_1$r(ctx) {
  let span;
  let t0_value = (
    /*formatValue*/
    (ctx[5](
      /*value*/
      ctx[3]
    ) ?? "...") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (ctx[1].units ?? "%") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      8 && t0_value !== (t0_value = /*formatValue*/
      (ctx2[5](
        /*value*/
        ctx2[3]
      ) ?? "...") + ""))
        set_data(t0, t0_value);
      if (dirty & /*capability*/
      2 && t2_value !== (t2_value = /*capability*/
      (ctx2[1].units ?? "%") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$O(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*capability*/
    ctx[1] !== void 0 && create_if_block$C(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[1] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$C(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$M($$self, $$props, $$invalidate) {
  let disabled;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(8, $editing = $$value));
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let value;
  function onCapability(c2) {
    $$invalidate(3, value = c2.value);
  }
  async function onValue(v) {
    if (v !== (capability == null ? void 0 : capability.value)) {
      if (!disabled) {
        await setCapabilityValue(v);
      }
    }
  }
  function formatValue(v) {
    if (v === null || v === void 0) {
      return v;
    }
    if (capability.units === "%" || !capability.units) {
      return (100 / (capability.max - capability.min) * v).toFixed(0);
    }
    return v.toFixed(capability.decimals);
  }
  async function setCapabilityValue(v) {
    await device.setCapabilityValue({
      deviceId: device.id,
      capabilityId: capability.id,
      value: v
    });
  }
  function slider_value_binding(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(6, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(1, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(7, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    384) {
      $$invalidate(4, disabled = !controllable || $editing);
    }
    if ($$self.$$.dirty & /*capability*/
    2) {
      onCapability(capability);
    }
    if ($$self.$$.dirty & /*value*/
    8) {
      onValue(value);
    }
  };
  return [
    settings,
    capability,
    mode,
    value,
    disabled,
    formatValue,
    device,
    controllable,
    $editing,
    slider_value_binding
  ];
}
let Slider_1$1 = class Slider_1 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$M, create_fragment$O, safe_not_equal, {
      settings: 0,
      device: 6,
      capability: 1,
      controllable: 7,
      mode: 2
    });
  }
};
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
var MILLISECONDS_IN_HOUR = 36e5;
function addHours(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
}
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function startOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}
var MILLISECONDS_IN_DAY$1 = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY$1);
}
var MILLISECONDS_IN_MINUTE = 6e4;
function addMinutes(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
}
function addQuarters(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var months = amount * 3;
  return addMonths(dirtyDate, months);
}
function addSeconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * 1e3);
}
function addWeeks(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var days = amount * 7;
  return addDays(dirtyDate, days);
}
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}
function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}
function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() - dateRight.getFullYear();
}
function compareLocalAsc(dateLeft, dateRight) {
  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
function differenceInDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareLocalAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
  dateLeft.setDate(dateLeft.getDate() - sign2 * difference);
  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign2);
  var result = sign2 * (difference - isLastDayNotFull);
  return result === 0 ? 0 : result;
}
function differenceInMilliseconds(dateLeft, dateRight) {
  requiredArgs(2, arguments);
  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
}
var roundingMap = {
  ceil: Math.ceil,
  round: Math.round,
  floor: Math.floor,
  trunc: function trunc(value) {
    return value < 0 ? Math.ceil(value) : Math.floor(value);
  }
  // Math.trunc is not supported by IE
};
var defaultRoundingMethod = "trunc";
function getRoundingMethod(method) {
  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
}
function differenceInHours(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInMinutes(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function isLastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return endOfDay(date).getTime() === endOfMonth(date).getTime();
}
function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
  var result;
  if (difference < 1) {
    result = 0;
  } else {
    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
      dateLeft.setDate(30);
    }
    dateLeft.setMonth(dateLeft.getMonth() - sign2 * difference);
    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign2;
    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
      isLastMonthNotFull = false;
    }
    result = sign2 * (difference - Number(isLastMonthNotFull));
  }
  return result === 0 ? 0 : result;
}
function differenceInQuarters(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMonths(dateLeft, dateRight) / 3;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInSeconds(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1e3;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInWeeks(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInDays(dateLeft, dateRight) / 7;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function differenceInYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight));
  dateLeft.setFullYear(1584);
  dateRight.setFullYear(1584);
  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign2;
  var result = sign2 * (difference - Number(isLastYearNotFull));
  return result === 0 ? 0 : result;
}
function startOfMinute(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setSeconds(0, 0);
  return date;
}
function startOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3;
  date.setMonth(month, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function endOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  date.setFullYear(year + 1, 0, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date = /* @__PURE__ */ new Date(0);
  date.setFullYear(cleanDate.getFullYear(), 0, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function endOfHour(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMinutes(59, 59, 999);
  return date;
}
function endOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfMinute(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setSeconds(59, 999);
  return date;
}
function endOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3 + 3;
  date.setMonth(month, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfSecond(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMilliseconds(999);
  return date;
}
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}
var MILLISECONDS_IN_WEEK$1 = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
function addLeadingZeros(number, targetLength) {
  var sign2 = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign2 + output;
}
var formatters$3 = {
  // Year
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
const formatters$4 = formatters$3;
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters$1 = {
  // Era
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return formatters$4.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return formatters$4.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return formatters$4.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return formatters$4.h(date, token);
  },
  // Hour [0-23]
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return formatters$4.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return formatters$4.m(date, token);
  },
  // Second
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return formatters$4.s(date, token);
  },
  // Fraction of second
  S: function S2(date, token) {
    return formatters$4.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign2 + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign2 + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign2 = offset > 0 ? "-" : "+";
    return sign2 + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign2 + hours + delimiter + minutes;
}
const formatters$2 = formatters$1;
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
const longFormatters$1 = longFormatters;
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}
var formatDistanceLocale$1 = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance$3 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$1[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
const formatDistance$4 = formatDistance$3;
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}
var dateFormats$2 = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats$2 = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats$2 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong$4 = {
  date: buildFormatLongFn({
    formats: dateFormats$2,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats$2,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$2,
    defaultWidth: "full"
  })
};
const formatLong$5 = formatLong$4;
var formatRelativeLocale$1 = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative$2 = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale$1[token];
};
const formatRelative$3 = formatRelative$2;
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index2 = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index2];
  };
}
var eraValues$1 = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues$1 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues$1 = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues$1 = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues$1 = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber$1 = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize$2 = {
  ordinalNumber: ordinalNumber$1,
  era: buildLocalizeFn({
    values: eraValues$1,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues$1,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
const localize$3 = localize$2;
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
var matchOrdinalNumberPattern$1 = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$1 = /\d+/i;
var matchEraPatterns$1 = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns$1 = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns$1 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns$1 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1 = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns$1 = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$1 = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns$1 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$1 = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns$1 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match$2 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1,
    parsePattern: parseOrdinalNumberPattern$1,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index2) {
      return index2 + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$1,
    defaultParseWidth: "any"
  })
};
const match$3 = match$2;
var locale$3 = {
  code: "en-US",
  formatDistance: formatDistance$4,
  formatLong: formatLong$5,
  formatRelative: formatRelative$3,
  localize: localize$3,
  match: match$3,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
const enUS = locale$3;
var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp$1 = /^'([^]*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;
var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : enUS;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp$1).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp$1).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString$1(substring);
    }
    var formatter = formatters$2[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString$1(input) {
  var matched = input.match(escapedStringRegExp$1);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp$1, "'");
}
function assign(target, object) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      target[property] = object[property];
    }
  }
  return target;
}
function cloneObject(object) {
  return assign({}, object);
}
var MINUTES_IN_DAY = 1440;
var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
var MINUTES_IN_MONTH = 43200;
var MINUTES_IN_TWO_MONTHS = 86400;
function formatDistance$2(dirtyDate, dirtyBaseDate, options) {
  var _ref, _options$locale;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : enUS;
  if (!locale2.formatDistance) {
    throw new RangeError("locale must contain formatDistance property");
  }
  var comparison = compareAsc(dirtyDate, dirtyBaseDate);
  if (isNaN(comparison)) {
    throw new RangeError("Invalid time value");
  }
  var localizeOptions = assign(cloneObject(options), {
    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),
    comparison
  });
  var dateLeft;
  var dateRight;
  if (comparison > 0) {
    dateLeft = toDate(dirtyBaseDate);
    dateRight = toDate(dirtyDate);
  } else {
    dateLeft = toDate(dirtyDate);
    dateRight = toDate(dirtyBaseDate);
  }
  var seconds = differenceInSeconds(dateRight, dateLeft);
  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1e3;
  var minutes = Math.round((seconds - offsetInSeconds) / 60);
  var months;
  if (minutes < 2) {
    if (options !== null && options !== void 0 && options.includeSeconds) {
      if (seconds < 5) {
        return locale2.formatDistance("lessThanXSeconds", 5, localizeOptions);
      } else if (seconds < 10) {
        return locale2.formatDistance("lessThanXSeconds", 10, localizeOptions);
      } else if (seconds < 20) {
        return locale2.formatDistance("lessThanXSeconds", 20, localizeOptions);
      } else if (seconds < 40) {
        return locale2.formatDistance("halfAMinute", 0, localizeOptions);
      } else if (seconds < 60) {
        return locale2.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale2.formatDistance("xMinutes", 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale2.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale2.formatDistance("xMinutes", minutes, localizeOptions);
      }
    }
  } else if (minutes < 45) {
    return locale2.formatDistance("xMinutes", minutes, localizeOptions);
  } else if (minutes < 90) {
    return locale2.formatDistance("aboutXHours", 1, localizeOptions);
  } else if (minutes < MINUTES_IN_DAY) {
    var hours = Math.round(minutes / 60);
    return locale2.formatDistance("aboutXHours", hours, localizeOptions);
  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
    return locale2.formatDistance("xDays", 1, localizeOptions);
  } else if (minutes < MINUTES_IN_MONTH) {
    var days = Math.round(minutes / MINUTES_IN_DAY);
    return locale2.formatDistance("xDays", days, localizeOptions);
  } else if (minutes < MINUTES_IN_TWO_MONTHS) {
    months = Math.round(minutes / MINUTES_IN_MONTH);
    return locale2.formatDistance("aboutXMonths", months, localizeOptions);
  }
  months = differenceInMonths(dateRight, dateLeft);
  if (months < 12) {
    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
    return locale2.formatDistance("xMonths", nearestMonth, localizeOptions);
  } else {
    var monthsSinceStartOfYear = months % 12;
    var years = Math.floor(months / 12);
    if (monthsSinceStartOfYear < 3) {
      return locale2.formatDistance("aboutXYears", years, localizeOptions);
    } else if (monthsSinceStartOfYear < 9) {
      return locale2.formatDistance("overXYears", years, localizeOptions);
    } else {
      return locale2.formatDistance("almostXYears", years + 1, localizeOptions);
    }
  }
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i2 = 0;
      var F = function F2() {
      };
      return {
        s: F,
        n: function n() {
          if (i2 >= o.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o[i2++]
          };
        },
        e: function e2(_e) {
          throw _e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function s3() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e2(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null)
          it["return"]();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _classCallCheck(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /* @__PURE__ */ function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = /* @__PURE__ */ function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = /* @__PURE__ */ function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = /* @__PURE__ */ new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);
var Parser = /* @__PURE__ */ function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run(dateString, token, match2, options) {
      var result = this.parse(dateString, token, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();
var EraParser = /* @__PURE__ */ function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign2 = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign2 * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex$1(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
var YearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback5 = function valueCallback6(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback5);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback5);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback5);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);
var LocalWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback5 = function valueCallback6(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback5);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback5);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback5);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);
var ISOWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = /* @__PURE__ */ new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);
var ExtendedYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);
var QuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);
var StandAloneQuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);
var MonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback5 = function valueCallback6(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback5);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback5);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback5);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);
var StandAloneMonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback5 = function valueCallback6(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback5);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback5);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback5);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
var LocalWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
var ISOWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);
var DayOfYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var DayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);
var LocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback5 = function valueCallback6(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback5);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback5);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);
var StandAloneLocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback5 = function valueCallback6(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback5);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback5);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var ISODayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback5 = function valueCallback6(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback5);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback5);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback5);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback5);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);
var AMPMParser = /* @__PURE__ */ function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);
var AMPMMidnightParser = /* @__PURE__ */ function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);
var DayPeriodParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);
var Hour1to12Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);
var Hour0to23Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);
var Hour0To11Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);
var Hour1To24Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);
var MinuteParser = /* @__PURE__ */ function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);
var SecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);
var FractionOfSecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback5 = function valueCallback6(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback5);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);
var ISOTimezoneWithZParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);
var ISOTimezoneParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);
var TimestampSecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);
var TimestampMillisecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function parse$1(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : enUS;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters$1) {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens), _step;
  try {
    var _loop = function _loop2() {
      var token = _step.value;
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser = parsers[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function(usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser.run(dateString, token, locale2.match, subFnOptions);
        if (!parseResult) {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString(token);
        }
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if (_typeof(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a3, b2) {
    return b2 - a3;
  }).filter(function(priority, index2, array) {
    return array.indexOf(priority) === index2;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a3, b2) {
      return b2.subPriority - a3.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign(flags, result[1]);
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}
function startOfHour(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMinutes(0, 0, 0);
  return date;
}
function startOfSecond(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMilliseconds(0);
  return date;
}
function parseISO(argument, options) {
  var _options$additionalDi;
  requiredArgs(1, arguments);
  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date;
  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date || isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var timestamp = date.getTime();
  var time = 0;
  var offset;
  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);
    if (isNaN(offset)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time);
    var result = /* @__PURE__ */ new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time + offset);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear(dateString, additionalDigits) {
  var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex);
  if (!captures)
    return {
      year: NaN,
      restDateString: ""
    };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null)
    return /* @__PURE__ */ new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures)
    return /* @__PURE__ */ new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = /* @__PURE__ */ new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures)
    return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z")
    return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures)
    return 0;
  var sign2 = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign2 * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = /* @__PURE__ */ new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}
function getIcon(id) {
  const icon = lookup.find((i2) => i2.id === id);
  return (icon == null ? void 0 : icon.icon) ?? mdiHelp;
}
function create_if_block$B(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$q, create_else_block_2$3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block_2$3(ctx) {
  let div;
  let t0;
  let h3;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? /*capability*/
    ctx[1].title) + ""
  );
  let t1;
  let t2;
  let t3;
  let show_if;
  let current_block_type_index;
  let if_block2;
  let current;
  let if_block0 = (
    /*settings*/
    ctx[0].iconId !== void 0 && create_if_block_11$1(ctx)
  );
  let if_block1 = (
    /*capability*/
    ctx[1].lastUpdated && create_if_block_10$1(ctx)
  );
  const if_block_creators = [create_if_block_6$3, create_if_block_8$1, create_if_block_9$1, create_else_block_4];
  const if_blocks = [];
  function select_block_type_3(ctx2, dirty) {
    if (dirty & /*capability*/
    2)
      show_if = null;
    if (show_if == null)
      show_if = !!/*capability*/
      ctx2[1].id.startsWith("alarm_");
    if (show_if)
      return 0;
    if (
      /*capability*/
      ctx2[1].type === "boolean"
    )
      return 1;
    if (
      /*capability*/
      ctx2[1].type === "enum"
    )
      return 2;
    return 3;
  }
  current_block_type_index = select_block_type_3(ctx, -1);
  if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      h3 = element("h3");
      t1 = text(t1_value);
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      if_block2.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (if_block0)
        if_block0.l(div_nodes);
      t0 = claim_space(div_nodes);
      h3 = claim_element(div_nodes, "H3", {});
      var h3_nodes = children(h3);
      t1 = claim_text(h3_nodes, t1_value);
      h3_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      if (if_block1)
        if_block1.l(div_nodes);
      t3 = claim_space(div_nodes);
      if_block2.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex items-center w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (if_block0)
        if_block0.m(div, null);
      append_hydration(div, t0);
      append_hydration(div, h3);
      append_hydration(h3, t1);
      append_hydration(div, t2);
      if (if_block1)
        if_block1.m(div, null);
      append_hydration(div, t3);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*settings*/
        ctx2[0].iconId !== void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*settings*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_11$1(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*settings, capability*/
      3) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? /*capability*/
      ctx2[1].title) + ""))
        set_data(t1, t1_value);
      if (
        /*capability*/
        ctx2[1].lastUpdated
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_10$1(ctx2);
          if_block1.c();
          if_block1.m(div, t3);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_3(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block2 = if_blocks[current_block_type_index];
        if (!if_block2) {
          if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block2.c();
        } else {
          if_block2.p(ctx2, dirty);
        }
        transition_in(if_block2, 1);
        if_block2.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_if_block_1$q(ctx) {
  let show_if;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_2$h, create_if_block_4$5, create_if_block_5$5, create_else_block_1$b];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (dirty & /*capability*/
    2)
      show_if = null;
    if (show_if == null)
      show_if = !!/*capability*/
      ctx2[1].id.startsWith("alarm_");
    if (show_if)
      return 0;
    if (
      /*capability*/
      ctx2[1].type === "boolean"
    )
      return 1;
    if (
      /*capability*/
      ctx2[1].type === "enum"
    )
      return 2;
    return 3;
  }
  current_block_type_index = select_block_type_1(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_if_block_11$1(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      ),
      class: "mr-1"
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_10$1(ctx) {
  let span;
  let t0;
  let t1_value = formatDistance$2(new Date(
    /*capability*/
    ctx[1].lastUpdated
  ), /* @__PURE__ */ new Date(), { addSuffix: true }) + "";
  let t1;
  return {
    c() {
      span = element("span");
      t0 = text("- ");
      t1 = text(t1_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, "- ");
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "font-extralight ml-2 text-xs mr-auto");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*capability*/
      2 && t1_value !== (t1_value = formatDistance$2(new Date(
        /*capability*/
        ctx2[1].lastUpdated
      ), /* @__PURE__ */ new Date(), { addSuffix: true }) + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_else_block_4(ctx) {
  var _a2;
  let h12;
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (((_a2 = ctx[1]) == null ? void 0 : _a2.units) ?? "") + ""
  );
  let t2;
  return {
    c() {
      h12 = element("h1");
      t0 = text(
        /*value*/
        ctx[3]
      );
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", { class: true });
      var h1_nodes = children(h12);
      t0 = claim_text(
        h1_nodes,
        /*value*/
        ctx[3]
      );
      t1 = claim_space(h1_nodes);
      t2 = claim_text(h1_nodes, t2_value);
      h1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h12, "class", "whitespace-nowrap");
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, t0);
      append_hydration(h12, t1);
      append_hydration(h12, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*value*/
      8)
        set_data(
          t0,
          /*value*/
          ctx2[3]
        );
      if (dirty & /*capability*/
      2 && t2_value !== (t2_value = /*capability*/
      (((_a3 = ctx2[1]) == null ? void 0 : _a3.units) ?? "") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_if_block_9$1(ctx) {
  var _a2;
  let h12;
  let t_value = (
    /*capability*/
    (((_a2 = ctx[1].values.find(
      /*func_1*/
      ctx[7]
    )) == null ? void 0 : _a2.title) ?? /*value*/
    ctx[3]) + ""
  );
  let t2;
  return {
    c() {
      h12 = element("h1");
      t2 = text(t_value);
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", {});
      var h1_nodes = children(h12);
      t2 = claim_text(h1_nodes, t_value);
      h1_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*capability, value*/
      10 && t_value !== (t_value = /*capability*/
      (((_a3 = ctx2[1].values.find(
        /*func_1*/
        ctx2[7]
      )) == null ? void 0 : _a3.title) ?? /*value*/
      ctx2[3]) + ""))
        set_data(t2, t_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_if_block_8$1(ctx) {
  let h12;
  let t_value = (
    /*value*/
    ctx[3] ? "Yes" : "No"
  );
  let t2;
  return {
    c() {
      h12 = element("h1");
      t2 = text(t_value);
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", {});
      var h1_nodes = children(h12);
      t2 = claim_text(h1_nodes, t_value);
      h1_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      8 && t_value !== (t_value = /*value*/
      ctx2[3] ? "Yes" : "No"))
        set_data(t2, t_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_if_block_6$3(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_7$1, create_else_block_3$1];
  const if_blocks = [];
  function select_block_type_4(ctx2, dirty) {
    if (
      /*value*/
      ctx2[3]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_4(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_4(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block_3$1(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMinus } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_7$1(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: { class: "bg-warn-icon", data: mdiAlert }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_else_block_1$b(ctx) {
  var _a2;
  let span;
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (((_a2 = ctx[1]) == null ? void 0 : _a2.units) ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(
        /*value*/
        ctx[3]
      );
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(
        span_nodes,
        /*value*/
        ctx[3]
      );
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*value*/
      8)
        set_data(
          t0,
          /*value*/
          ctx2[3]
        );
      if (dirty & /*capability*/
      2 && t2_value !== (t2_value = /*capability*/
      (((_a3 = ctx2[1]) == null ? void 0 : _a3.units) ?? "") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_5$5(ctx) {
  var _a2;
  let span;
  let t_value = (
    /*capability*/
    (((_a2 = ctx[1].values.find(
      /*func*/
      ctx[6]
    )) == null ? void 0 : _a2.title) ?? /*value*/
    ctx[3]) + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*capability, value*/
      10 && t_value !== (t_value = /*capability*/
      (((_a3 = ctx2[1].values.find(
        /*func*/
        ctx2[6]
      )) == null ? void 0 : _a3.title) ?? /*value*/
      ctx2[3]) + ""))
        set_data(t2, t_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_4$5(ctx) {
  let span;
  let t_value = (
    /*value*/
    ctx[3] ? "Yes" : "No"
  );
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      8 && t_value !== (t_value = /*value*/
      ctx2[3] ? "Yes" : "No"))
        set_data(t2, t_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_2$h(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_3$9, create_else_block$p];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*value*/
      ctx2[3]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_2(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$p(ctx) {
  let icon;
  let current;
  icon = new Icon({ props: { data: mdiMinus } });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_3$9(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: { class: "bg-warn-icon", data: mdiAlert }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_fragment$N(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*capability*/
    ctx[1] !== void 0 && create_if_block$B(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[1] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$B(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$L($$self, $$props, $$invalidate) {
  let value;
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  const func = (v) => v.id === value;
  const func_1 = (v) => v.id === value;
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(4, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(1, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(5, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*capability*/
    2) {
      $$invalidate(3, value = capability == null ? void 0 : capability.value);
    }
  };
  return [settings, capability, mode, value, device, controllable, func, func_1];
}
class Sensor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$L, create_fragment$N, safe_not_equal, {
      settings: 0,
      device: 4,
      capability: 1,
      controllable: 5,
      mode: 2
    });
  }
}
function create_if_block_1$p(ctx) {
  let span;
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      data: (
        /*currentIconTrue*/
        ctx[7]
      ),
      color: (
        /*colorTrue*/
        ctx[2] ?? /*color*/
        ctx[1] ?? defaultColor$3
      )
    }
  });
  return {
    c() {
      span = element("span");
      create_component(icon_1.$$.fragment);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      claim_component(icon_1.$$.fragment, span_nodes);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "text-sm absolute left-0.5 flex items-center justify-center h-4 w-4");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      mount_component(icon_1, span, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconTrue*/
      128)
        icon_1_changes.data = /*currentIconTrue*/
        ctx2[7];
      if (dirty & /*colorTrue, color*/
      6)
        icon_1_changes.color = /*colorTrue*/
        ctx2[2] ?? /*color*/
        ctx2[1] ?? defaultColor$3;
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(icon_1);
    }
  };
}
function create_if_block$A(ctx) {
  let span;
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      data: (
        /*currentIconFalse*/
        ctx[6]
      ),
      color: (
        /*colorFalse*/
        ctx[3] ?? /*color*/
        ctx[1] ?? defaultColor$3
      )
    }
  });
  return {
    c() {
      span = element("span");
      create_component(icon_1.$$.fragment);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      claim_component(icon_1.$$.fragment, span_nodes);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "text-sm absolute right-0.5 flex items-center justify-center h-4 w-4");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      mount_component(icon_1, span, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconFalse*/
      64)
        icon_1_changes.data = /*currentIconFalse*/
        ctx2[6];
      if (dirty & /*colorFalse, color*/
      10)
        icon_1_changes.color = /*colorFalse*/
        ctx2[3] ?? /*color*/
        ctx2[1] ?? defaultColor$3;
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(icon_1);
    }
  };
}
function create_fragment$M(ctx) {
  let div1;
  let div0;
  let button;
  let span;
  let span_class_value;
  let t0;
  let t1;
  let div0_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*currentIconTrue*/
    ctx[7] !== void 0 && create_if_block_1$p(ctx)
  );
  let if_block1 = (
    /*currentIconFalse*/
    ctx[6] !== void 0 && create_if_block$A(ctx)
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      button = element("button");
      span = element("span");
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      button = claim_element(div0_nodes, "BUTTON", {
        "aria-label": true,
        type: true,
        class: true
      });
      var button_nodes = children(button);
      span = claim_element(button_nodes, "SPAN", { "aria-hidden": true, class: true });
      children(span).forEach(detach);
      t0 = claim_space(button_nodes);
      if (if_block0)
        if_block0.l(button_nodes);
      t1 = claim_space(button_nodes);
      if (if_block1)
        if_block1.l(button_nodes);
      button_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "aria-hidden", "true");
      attr(span, "class", span_class_value = "relative z-10 inline-block bg-surface h-5 w-5 rounded-full shadow transform transition-transform ease-in-out duration-150 border border-border " + /*translate*/
      ctx[4]);
      attr(button, "aria-label", "toggle");
      attr(button, "type", "button");
      attr(button, "class", "relative inline-flex items-center justify-between flex-shrink-0 h-full w-full border-2 border-transparent rounded-full cursor-pointer ease-in-out outline-none focus:outline-none");
      toggle_class(
        button,
        "bg-default",
        /*value*/
        ctx[0] !== true
      );
      toggle_class(
        button,
        "bg-primary",
        /*value*/
        ctx[0] === true
      );
      attr(div0, "class", div0_class_value = "border relative inline-flex flex-shrink-0 h-[1.6rem] rounded-full cursor-pointer outline-none focus:outline-none " + /*width*/
      ctx[5]);
      toggle_class(
        div0,
        "border-border",
        /*value*/
        ctx[0] !== true
      );
      toggle_class(
        div0,
        "border-primary",
        /*value*/
        ctx[0] === true
      );
      attr(div1, "class", "flex items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      append_hydration(div0, button);
      append_hydration(button, span);
      append_hydration(button, t0);
      if (if_block0)
        if_block0.m(button, null);
      append_hydration(button, t1);
      if (if_block1)
        if_block1.m(button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[13]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*translate*/
      16 && span_class_value !== (span_class_value = "relative z-10 inline-block bg-surface h-5 w-5 rounded-full shadow transform transition-transform ease-in-out duration-150 border border-border " + /*translate*/
      ctx2[4])) {
        attr(span, "class", span_class_value);
      }
      if (
        /*currentIconTrue*/
        ctx2[7] !== void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*currentIconTrue*/
          128) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$p(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(button, t1);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*currentIconFalse*/
        ctx2[6] !== void 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*currentIconFalse*/
          64) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$A(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(button, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*value*/
      1) {
        toggle_class(
          button,
          "bg-default",
          /*value*/
          ctx2[0] !== true
        );
      }
      if (!current || dirty & /*value*/
      1) {
        toggle_class(
          button,
          "bg-primary",
          /*value*/
          ctx2[0] === true
        );
      }
      if (!current || dirty & /*width*/
      32 && div0_class_value !== (div0_class_value = "border relative inline-flex flex-shrink-0 h-[1.6rem] rounded-full cursor-pointer outline-none focus:outline-none " + /*width*/
      ctx2[5])) {
        attr(div0, "class", div0_class_value);
      }
      if (!current || dirty & /*width, value*/
      33) {
        toggle_class(
          div0,
          "border-border",
          /*value*/
          ctx2[0] !== true
        );
      }
      if (!current || dirty & /*width, value*/
      33) {
        toggle_class(
          div0,
          "border-primary",
          /*value*/
          ctx2[0] === true
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      dispose();
    }
  };
}
const defaultColor$3 = "currentColor";
function instance$K($$self, $$props, $$invalidate) {
  let currentIconTrue;
  let currentIconFalse;
  let width;
  let translate;
  let { value } = $$props;
  let { disabled = false } = $$props;
  let { icon = void 0 } = $$props;
  let { iconTrue = void 0 } = $$props;
  let { iconFalse = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  let { colorTrue = void 0 } = $$props;
  let { colorFalse = void 0 } = $$props;
  function setValue(v) {
    if (!disabled) {
      $$invalidate(0, value = v === true);
    }
  }
  const click_handler = () => setValue(!value);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(9, disabled = $$props2.disabled);
    if ("icon" in $$props2)
      $$invalidate(10, icon = $$props2.icon);
    if ("iconTrue" in $$props2)
      $$invalidate(11, iconTrue = $$props2.iconTrue);
    if ("iconFalse" in $$props2)
      $$invalidate(12, iconFalse = $$props2.iconFalse);
    if ("color" in $$props2)
      $$invalidate(1, color2 = $$props2.color);
    if ("colorTrue" in $$props2)
      $$invalidate(2, colorTrue = $$props2.colorTrue);
    if ("colorFalse" in $$props2)
      $$invalidate(3, colorFalse = $$props2.colorFalse);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*iconTrue, icon*/
    3072) {
      $$invalidate(7, currentIconTrue = iconTrue ?? icon ? getIcon(iconTrue ?? icon ?? "") : void 0);
    }
    if ($$self.$$.dirty & /*iconFalse, icon*/
    5120) {
      $$invalidate(6, currentIconFalse = iconFalse ?? icon ? getIcon(iconFalse ?? icon ?? "") : void 0);
    }
    if ($$self.$$.dirty & /*iconTrue, icon, iconFalse*/
    7168) {
      $$invalidate(5, width = (iconTrue ?? icon) || (iconFalse ?? icon) ? "w-[48px]" : "w-[2.8rem]");
    }
    if ($$self.$$.dirty & /*value, iconTrue, icon, iconFalse*/
    7169) {
      $$invalidate(4, translate = value === true && ((iconTrue ?? icon) || (iconFalse ?? icon)) ? "translate-x-[calc(100%+0.1rem)]" : value !== true ? "translate-x-[0.1rem]" : "translate-x-[calc(100%-0.1rem)]");
    }
  };
  return [
    value,
    color2,
    colorTrue,
    colorFalse,
    translate,
    width,
    currentIconFalse,
    currentIconTrue,
    setValue,
    disabled,
    icon,
    iconTrue,
    iconFalse,
    click_handler
  ];
}
class Toggle extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$K, create_fragment$M, safe_not_equal, {
      value: 0,
      disabled: 9,
      icon: 10,
      iconTrue: 11,
      iconFalse: 12,
      color: 1,
      colorTrue: 2,
      colorFalse: 3
    });
  }
}
function create_if_block$z(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$o, create_else_block$o];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$o(ctx) {
  let div;
  let t0;
  let h3;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? /*capability*/
    ctx[1].title) + ""
  );
  let t1;
  let t2;
  let span;
  let t3_value = formatDistance$2(new Date(
    /*capability*/
    ctx[1].lastUpdated
  ), /* @__PURE__ */ new Date(), { addSuffix: true }) + "";
  let t3;
  let t4;
  let toggle;
  let updating_value;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*settings*/
    ctx[0].iconId !== void 0 && create_if_block_2$g(ctx)
  );
  function toggle_value_binding_1(value) {
    ctx[10](value);
  }
  let toggle_props = {};
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    toggle_props.value = /*value*/
    ctx[3];
  }
  toggle = new Toggle({ props: toggle_props });
  binding_callbacks.push(() => bind(toggle, "value", toggle_value_binding_1));
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      t0 = space();
      h3 = element("h3");
      t1 = text(t1_value);
      t2 = space();
      span = element("span");
      t3 = text(t3_value);
      t4 = space();
      create_component(toggle.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (if_block)
        if_block.l(div_nodes);
      t0 = claim_space(div_nodes);
      h3 = claim_element(div_nodes, "H3", {});
      var h3_nodes = children(h3);
      t1 = claim_text(h3_nodes, t1_value);
      h3_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t3 = claim_text(span_nodes, t3_value);
      span_nodes.forEach(detach);
      t4 = claim_space(div_nodes);
      claim_component(toggle.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "font-extralight ml-2 text-xs mr-auto");
      attr(div, "class", "flex items-center w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      append_hydration(div, t0);
      append_hydration(div, h3);
      append_hydration(h3, t1);
      append_hydration(div, t2);
      append_hydration(div, span);
      append_hydration(span, t3);
      append_hydration(div, t4);
      mount_component(toggle, div, null);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", stop_propagation(
          /*click_handler_1*/
          ctx[8]
        ));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*settings*/
        ctx2[0].iconId !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*settings*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_2$g(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*settings, capability*/
      3) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? /*capability*/
      ctx2[1].title) + ""))
        set_data(t1, t1_value);
      if ((!current || dirty & /*capability*/
      2) && t3_value !== (t3_value = formatDistance$2(new Date(
        /*capability*/
        ctx2[1].lastUpdated
      ), /* @__PURE__ */ new Date(), { addSuffix: true }) + ""))
        set_data(t3, t3_value);
      const toggle_changes = {};
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        toggle_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
      destroy_component(toggle);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$o(ctx) {
  let div;
  let toggle;
  let updating_value;
  let current;
  let mounted;
  let dispose;
  function toggle_value_binding(value) {
    ctx[9](value);
  }
  let toggle_props = {};
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    toggle_props.value = /*value*/
    ctx[3];
  }
  toggle = new Toggle({ props: toggle_props });
  binding_callbacks.push(() => bind(toggle, "value", toggle_value_binding));
  return {
    c() {
      div = element("div");
      create_component(toggle.$$.fragment);
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      claim_component(toggle.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(toggle, div, null);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", stop_propagation(
          /*click_handler*/
          ctx[7]
        ));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        toggle_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(toggle);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$g(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      ),
      class: "mr-1"
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_fragment$L(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*capability*/
    ctx[1] !== void 0 && create_if_block$z(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[1] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$z(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$J($$self, $$props, $$invalidate) {
  let disabled;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(6, $editing = $$value));
  createEventDispatcher();
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let value;
  function onCapability(c2) {
    $$invalidate(3, value = c2.value);
  }
  async function onValue(v) {
    if (v !== (capability == null ? void 0 : capability.value)) {
      if (!disabled) {
        await setCapabilityValue(v);
      } else {
        $$invalidate(3, value = !v);
      }
    }
  }
  async function setCapabilityValue(value2) {
    await device.setCapabilityValue({
      deviceId: device.id,
      capabilityId: capability.id,
      value: value2
    });
  }
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function click_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function toggle_value_binding(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  function toggle_value_binding_1(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(4, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(1, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(5, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    96) {
      disabled = !controllable || $editing;
    }
    if ($$self.$$.dirty & /*capability*/
    2) {
      onCapability(capability);
    }
    if ($$self.$$.dirty & /*value*/
    8) {
      onValue(value);
    }
  };
  return [
    settings,
    capability,
    mode,
    value,
    device,
    controllable,
    $editing,
    click_handler,
    click_handler_1,
    toggle_value_binding,
    toggle_value_binding_1
  ];
}
class Toggle_1 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$J, create_fragment$L, safe_not_equal, {
      settings: 0,
      device: 4,
      capability: 1,
      controllable: 5,
      mode: 2
    });
  }
}
function create_if_block$y(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_1$n, create_else_block$n];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          div,
          "click",
          /*click_handler_2*/
          ctx[10]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      mounted = false;
      dispose();
    }
  };
}
function create_else_block$n(ctx) {
  let div;
  let button;
  let current;
  button = new Button({
    props: {
      size: "xl",
      type: "primary",
      disabled: (
        /*disabled*/
        ctx[4]
      ),
      $$slots: { default: [create_default_slot_1$d] },
      $$scope: { ctx }
    }
  });
  button.$on(
    "click",
    /*click_handler_1*/
    ctx[9]
  );
  return {
    c() {
      div = element("div");
      create_component(button.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(button.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex justify-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(button, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const button_changes = {};
      if (dirty & /*disabled*/
      16)
        button_changes.disabled = /*disabled*/
        ctx2[4];
      if (dirty & /*$$scope, settings, capability*/
      4099) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(button);
    }
  };
}
function create_if_block_1$n(ctx) {
  let button;
  let current;
  button = new Button({
    props: {
      type: "primary",
      disabled: (
        /*disabled*/
        ctx[4]
      ),
      $$slots: { default: [create_default_slot$h] },
      $$scope: { ctx }
    }
  });
  button.$on(
    "click",
    /*click_handler*/
    ctx[8]
  );
  return {
    c() {
      create_component(button.$$.fragment);
    },
    l(nodes) {
      claim_component(button.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const button_changes = {};
      if (dirty & /*disabled*/
      16)
        button_changes.disabled = /*disabled*/
        ctx2[4];
      if (dirty & /*$$scope, settings, capability*/
      4099) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(button, detaching);
    }
  };
}
function create_default_slot_1$d(ctx) {
  let t_value = (
    /*settings*/
    (ctx[0].title ?? /*capability*/
    ctx[1].title) + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*settings, capability*/
      3 && t_value !== (t_value = /*settings*/
      (ctx2[0].title ?? /*capability*/
      ctx2[1].title) + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot$h(ctx) {
  let t_value = (
    /*settings*/
    (ctx[0].title ?? /*capability*/
    ctx[1].title) + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*settings, capability*/
      3 && t_value !== (t_value = /*settings*/
      (ctx2[0].title ?? /*capability*/
      ctx2[1].title) + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_fragment$K(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*capability*/
    ctx[1] && create_if_block$y(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$y(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$I($$self, $$props, $$invalidate) {
  let disabled;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(3, $editing = $$value));
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  async function setValue(value) {
    await setCapabilityValue(value);
  }
  async function setCapabilityValue(value) {
    await device.setCapabilityValue({
      deviceId: device.id,
      capabilityId: capability.id,
      value
    });
  }
  const click_handler = () => setValue(true);
  const click_handler_1 = () => setValue(true);
  const click_handler_2 = (e2) => {
    if (!$editing) {
      e2.stopPropagation();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(6, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(1, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(7, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    136) {
      $$invalidate(4, disabled = !controllable || $editing);
    }
  };
  return [
    settings,
    capability,
    mode,
    $editing,
    disabled,
    setValue,
    device,
    controllable,
    click_handler,
    click_handler_1,
    click_handler_2
  ];
}
class Button_1 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$I, create_fragment$K, safe_not_equal, {
      settings: 0,
      device: 6,
      capability: 1,
      controllable: 7,
      mode: 2
    });
  }
}
function get_each_context$g(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i2];
  return child_ctx;
}
function create_if_block$x(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$m, create_else_block$m];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[1] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$m(ctx) {
  let div1;
  let div0;
  let t0;
  let t1;
  let t2;
  let t3;
  let current;
  let if_block0 = (
    /*measureTemperature*/
    ctx[6] !== void 0 && create_if_block_6$2(ctx)
  );
  let if_block1 = (
    /*measureTemperature*/
    ctx[6] !== void 0 && /*targetTemperature*/
    ctx[4] !== void 0 && create_if_block_5$4()
  );
  let if_block2 = (
    /*targetTemperature*/
    ctx[4] !== void 0 && create_if_block_4$4(ctx)
  );
  let if_block3 = (
    /*thermostatMode*/
    ctx[3] !== void 0 && create_if_block_3$8(ctx)
  );
  let if_block4 = (
    /*targetTemperature*/
    ctx[4] !== void 0 && create_if_block_2$f(ctx)
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      if (if_block1)
        if_block1.c();
      t1 = space();
      if (if_block2)
        if_block2.c();
      t2 = space();
      if (if_block3)
        if_block3.c();
      t3 = space();
      if (if_block4)
        if_block4.c();
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      if (if_block0)
        if_block0.l(div0_nodes);
      t0 = claim_space(div0_nodes);
      if (if_block1)
        if_block1.l(div0_nodes);
      t1 = claim_space(div0_nodes);
      if (if_block2)
        if_block2.l(div0_nodes);
      div0_nodes.forEach(detach);
      t2 = claim_space(div1_nodes);
      if (if_block3)
        if_block3.l(div1_nodes);
      t3 = claim_space(div1_nodes);
      if (if_block4)
        if_block4.l(div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "flex flex-row mx-auto");
      attr(div1, "class", "flex flex-col w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      if (if_block0)
        if_block0.m(div0, null);
      append_hydration(div0, t0);
      if (if_block1)
        if_block1.m(div0, null);
      append_hydration(div0, t1);
      if (if_block2)
        if_block2.m(div0, null);
      append_hydration(div1, t2);
      if (if_block3)
        if_block3.m(div1, null);
      append_hydration(div1, t3);
      if (if_block4)
        if_block4.m(div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*measureTemperature*/
        ctx2[6] !== void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_6$2(ctx2);
          if_block0.c();
          if_block0.m(div0, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*measureTemperature*/
        ctx2[6] !== void 0 && /*targetTemperature*/
        ctx2[4] !== void 0
      ) {
        if (if_block1) {
          if (dirty & /*measureTemperature, targetTemperature*/
          80) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_5$4();
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div0, t1);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*targetTemperature*/
        ctx2[4] !== void 0
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2 = create_if_block_4$4(ctx2);
          if_block2.c();
          if_block2.m(div0, null);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if (
        /*thermostatMode*/
        ctx2[3] !== void 0
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty & /*thermostatMode*/
          8) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block_3$8(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(div1, t3);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
      if (
        /*targetTemperature*/
        ctx2[4] !== void 0
      ) {
        if (if_block4) {
          if_block4.p(ctx2, dirty);
          if (dirty & /*targetTemperature*/
          16) {
            transition_in(if_block4, 1);
          }
        } else {
          if_block4 = create_if_block_2$f(ctx2);
          if_block4.c();
          transition_in(if_block4, 1);
          if_block4.m(div1, null);
        }
      } else if (if_block4) {
        group_outros();
        transition_out(if_block4, 1, 1, () => {
          if_block4 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      transition_in(if_block3);
      transition_in(if_block4);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      transition_out(if_block3);
      transition_out(if_block4);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
      if (if_block4)
        if_block4.d();
    }
  };
}
function create_if_block_1$m(ctx) {
  let span;
  let t0_value = (
    /*capability*/
    (ctx[0].value ?? "...") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (ctx[0].units ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*capability*/
      1 && t0_value !== (t0_value = /*capability*/
      (ctx2[0].value ?? "...") + ""))
        set_data(t0, t0_value);
      if (dirty & /*capability*/
      1 && t2_value !== (t2_value = /*capability*/
      (ctx2[0].units ?? "") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_6$2(ctx) {
  var _a2;
  let div;
  let h12;
  let t0_value = (
    /*measureTemperature*/
    (ctx[6].value ?? "...") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*measureTemperature*/
    (((_a2 = ctx[6]) == null ? void 0 : _a2.units) ?? "") + ""
  );
  let t2;
  let t3;
  let span;
  let textContent = "Current temperature";
  return {
    c() {
      div = element("div");
      h12 = element("h1");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      t3 = space();
      span = element("span");
      span.textContent = textContent;
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      h12 = claim_element(div_nodes, "H1", {});
      var h1_nodes = children(h12);
      t0 = claim_text(h1_nodes, t0_value);
      t1 = claim_space(h1_nodes);
      t2 = claim_text(h1_nodes, t2_value);
      h1_nodes.forEach(detach);
      t3 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1tacf37")
        span.textContent = textContent;
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex flex-col items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, h12);
      append_hydration(h12, t0);
      append_hydration(h12, t1);
      append_hydration(h12, t2);
      append_hydration(div, t3);
      append_hydration(div, span);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*measureTemperature*/
      64 && t0_value !== (t0_value = /*measureTemperature*/
      (ctx2[6].value ?? "...") + ""))
        set_data(t0, t0_value);
      if (dirty & /*measureTemperature*/
      64 && t2_value !== (t2_value = /*measureTemperature*/
      (((_a3 = ctx2[6]) == null ? void 0 : _a3.units) ?? "") + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_5$4(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      size: "48px",
      data: mdiArrowRight,
      class: "ml-4 mr-4"
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_4$4(ctx) {
  var _a2;
  let div;
  let h12;
  let t0_value = (
    /*targetValue*/
    (ctx[2] ?? "...") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*targetTemperature*/
    (((_a2 = ctx[4]) == null ? void 0 : _a2.units) ?? "") + ""
  );
  let t2;
  let t3;
  let span;
  let textContent = "Target temperature";
  return {
    c() {
      div = element("div");
      h12 = element("h1");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      t3 = space();
      span = element("span");
      span.textContent = textContent;
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      h12 = claim_element(div_nodes, "H1", {});
      var h1_nodes = children(h12);
      t0 = claim_text(h1_nodes, t0_value);
      t1 = claim_space(h1_nodes);
      t2 = claim_text(h1_nodes, t2_value);
      h1_nodes.forEach(detach);
      t3 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-151ohot")
        span.textContent = textContent;
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex flex-col items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, h12);
      append_hydration(h12, t0);
      append_hydration(h12, t1);
      append_hydration(h12, t2);
      append_hydration(div, t3);
      append_hydration(div, span);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*targetValue*/
      4 && t0_value !== (t0_value = /*targetValue*/
      (ctx2[2] ?? "...") + ""))
        set_data(t0, t0_value);
      if (dirty & /*targetTemperature*/
      16 && t2_value !== (t2_value = /*targetTemperature*/
      (((_a3 = ctx2[4]) == null ? void 0 : _a3.units) ?? "") + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_3$8(ctx) {
  let buttongroup;
  let current;
  buttongroup = new ButtonGroup({
    props: {
      class: "mx-auto mt-4 mb-4",
      $$slots: { default: [create_default_slot$g] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(buttongroup.$$.fragment);
    },
    l(nodes) {
      claim_component(buttongroup.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(buttongroup, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const buttongroup_changes = {};
      if (dirty & /*$$scope, thermostatMode*/
      8388616) {
        buttongroup_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup.$set(buttongroup_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(buttongroup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(buttongroup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(buttongroup, detaching);
    }
  };
}
function create_default_slot_1$c(ctx) {
  let t0_value = (
    /*value*/
    ctx[20].title + ""
  );
  let t0;
  let t1;
  return {
    c() {
      t0 = text(t0_value);
      t1 = space();
    },
    l(nodes) {
      t0 = claim_text(nodes, t0_value);
      t1 = claim_space(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, t0, anchor);
      insert_hydration(target, t1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*thermostatMode*/
      8 && t0_value !== (t0_value = /*value*/
      ctx2[20].title + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
    }
  };
}
function create_each_block$g(ctx) {
  let buttongroup_button;
  let current;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[13](
        /*value*/
        ctx[20]
      )
    );
  }
  buttongroup_button = new ButtonGroup.Button({
    props: {
      active: (
        /*thermostatMode*/
        ctx[3].value === /*value*/
        ctx[20].id
      ),
      $$slots: { default: [create_default_slot_1$c] },
      $$scope: { ctx }
    }
  });
  buttongroup_button.$on("click", click_handler);
  return {
    c() {
      create_component(buttongroup_button.$$.fragment);
    },
    l(nodes) {
      claim_component(buttongroup_button.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(buttongroup_button, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const buttongroup_button_changes = {};
      if (dirty & /*thermostatMode*/
      8)
        buttongroup_button_changes.active = /*thermostatMode*/
        ctx[3].value === /*value*/
        ctx[20].id;
      if (dirty & /*$$scope, thermostatMode*/
      8388616) {
        buttongroup_button_changes.$$scope = { dirty, ctx };
      }
      buttongroup_button.$set(buttongroup_button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(buttongroup_button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(buttongroup_button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(buttongroup_button, detaching);
    }
  };
}
function create_default_slot$g(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*thermostatMode*/
    ctx[3].values
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$g(get_each_context$g(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*thermostatMode, setMode*/
      136) {
        each_value = ensure_array_like(
          /*thermostatMode*/
          ctx2[3].values
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$g(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$g(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_2$f(ctx) {
  let div;
  let span0;
  let t0_value = (
    /*targetTemperature*/
    ctx[4].min + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*targetTemperature*/
    (ctx[4].units ?? "") + ""
  );
  let t2;
  let t3;
  let slider;
  let updating_value;
  let t4;
  let span1;
  let t5_value = (
    /*targetTemperature*/
    ctx[4].max + ""
  );
  let t5;
  let t6;
  let t7_value = (
    /*targetTemperature*/
    (ctx[4].units ?? "") + ""
  );
  let t7;
  let current;
  function slider_value_binding(value) {
    ctx[14](value);
  }
  let slider_props = {
    class: "w-full",
    min: (
      /*targetTemperature*/
      ctx[4].min
    ),
    max: (
      /*targetTemperature*/
      ctx[4].max
    ),
    step: (
      /*targetTemperature*/
      ctx[4].step
    ),
    disabled: (
      /*disabled*/
      ctx[5]
    )
  };
  if (
    /*targetValue*/
    ctx[2] !== void 0
  ) {
    slider_props.value = /*targetValue*/
    ctx[2];
  }
  slider = new Slider({ props: slider_props });
  binding_callbacks.push(() => bind(slider, "value", slider_value_binding));
  return {
    c() {
      div = element("div");
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      t3 = space();
      create_component(slider.$$.fragment);
      t4 = space();
      span1 = element("span");
      t5 = text(t5_value);
      t6 = space();
      t7 = text(t7_value);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      span0 = claim_element(div_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t0 = claim_text(span0_nodes, t0_value);
      t1 = claim_space(span0_nodes);
      t2 = claim_text(span0_nodes, t2_value);
      span0_nodes.forEach(detach);
      t3 = claim_space(div_nodes);
      claim_component(slider.$$.fragment, div_nodes);
      t4 = claim_space(div_nodes);
      span1 = claim_element(div_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      t5 = claim_text(span1_nodes, t5_value);
      t6 = claim_space(span1_nodes);
      t7 = claim_text(span1_nodes, t7_value);
      span1_nodes.forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span0, "class", "whitespace-nowrap mr-4");
      attr(span1, "class", "whitespace-nowrap ml-4");
      attr(div, "class", "flex flex-row mt-4");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, span0);
      append_hydration(span0, t0);
      append_hydration(span0, t1);
      append_hydration(span0, t2);
      append_hydration(div, t3);
      mount_component(slider, div, null);
      append_hydration(div, t4);
      append_hydration(div, span1);
      append_hydration(span1, t5);
      append_hydration(span1, t6);
      append_hydration(span1, t7);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & /*targetTemperature*/
      16) && t0_value !== (t0_value = /*targetTemperature*/
      ctx2[4].min + ""))
        set_data(t0, t0_value);
      if ((!current || dirty & /*targetTemperature*/
      16) && t2_value !== (t2_value = /*targetTemperature*/
      (ctx2[4].units ?? "") + ""))
        set_data(t2, t2_value);
      const slider_changes = {};
      if (dirty & /*targetTemperature*/
      16)
        slider_changes.min = /*targetTemperature*/
        ctx2[4].min;
      if (dirty & /*targetTemperature*/
      16)
        slider_changes.max = /*targetTemperature*/
        ctx2[4].max;
      if (dirty & /*targetTemperature*/
      16)
        slider_changes.step = /*targetTemperature*/
        ctx2[4].step;
      if (dirty & /*disabled*/
      32)
        slider_changes.disabled = /*disabled*/
        ctx2[5];
      if (!updating_value && dirty & /*targetValue*/
      4) {
        updating_value = true;
        slider_changes.value = /*targetValue*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      slider.$set(slider_changes);
      if ((!current || dirty & /*targetTemperature*/
      16) && t5_value !== (t5_value = /*targetTemperature*/
      ctx2[4].max + ""))
        set_data(t5, t5_value);
      if ((!current || dirty & /*targetTemperature*/
      16) && t7_value !== (t7_value = /*targetTemperature*/
      (ctx2[4].units ?? "") + ""))
        set_data(t7, t7_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(slider.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(slider.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(slider);
    }
  };
}
function create_fragment$J(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*capability*/
    ctx[0] !== void 0 && create_if_block$x(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[0] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$x(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$H($$self, $$props, $$invalidate) {
  let disabled;
  let postfix;
  let measureTemperature;
  let targetTemperature;
  let thermostatMode;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(12, $editing = $$value));
  const dispatcher = createEventDispatcher();
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let targetValue;
  onMount(() => {
    onThermostatMode(thermostatMode);
  });
  function onTargetTemperature(c2) {
    $$invalidate(2, targetValue = c2.value);
  }
  function onThermostatMode(c2) {
    if (thermostatMode === void 0) {
      return;
    }
    if (c2.value === "cool") {
      dispatcher("style", "bg-gradient-to-r from-cyan-400 to-cyan-600 border-none");
    } else if (c2.value === "heat") {
      dispatcher("style", "bg-gradient-to-r from-orange-400 to-orange-600 border-none");
    } else if (c2.value === "auto") {
      dispatcher("style", "bg-gradient-to-r from-cyan-400 to-orange-600 border-none");
    } else {
      dispatcher("style", "");
    }
  }
  function onTargetValue(v) {
    if (capability.setable && v !== (capability == null ? void 0 : capability.value)) {
      if (!disabled) {
        setCapabilityValue(capability.id, v);
      }
    }
  }
  async function setMode(value) {
    $$invalidate(3, thermostatMode.value = value, thermostatMode);
    await setCapabilityValue(thermostatMode.id, value);
  }
  async function setCapabilityValue(capabilityId, value) {
    await device.setCapabilityValue({ deviceId: device.id, capabilityId, value });
  }
  const click_handler = (value) => setMode(value.id);
  function slider_value_binding(value) {
    targetValue = value;
    $$invalidate(2, targetValue);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(8, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(9, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(0, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(10, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(1, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    5120) {
      $$invalidate(5, disabled = !controllable || $editing);
    }
    if ($$self.$$.dirty & /*capability*/
    1) {
      $$invalidate(11, postfix = capability.id.indexOf(".") > -1 ? capability.id.slice(capability.id.indexOf(".")) : "");
    }
    if ($$self.$$.dirty & /*capability, postfix, device*/
    2561) {
      $$invalidate(6, measureTemperature = capability.id === "measure_temperature" + postfix ? capability : device.capabilitiesObj["measure_temperature" + postfix]);
    }
    if ($$self.$$.dirty & /*capability, postfix, device*/
    2561) {
      $$invalidate(4, targetTemperature = capability.id === "target_temperature" + postfix ? capability : device.capabilitiesObj["target_temperature" + postfix]);
    }
    if ($$self.$$.dirty & /*capability, postfix, device*/
    2561) {
      $$invalidate(3, thermostatMode = capability.id === "thermostat_mode" + postfix ? capability : device.capabilitiesObj["thermostat_mode" + postfix]);
    }
    if ($$self.$$.dirty & /*targetTemperature*/
    16) {
      onTargetTemperature(targetTemperature);
    }
    if ($$self.$$.dirty & /*thermostatMode*/
    8) {
      onThermostatMode(thermostatMode);
    }
    if ($$self.$$.dirty & /*targetValue*/
    4) {
      onTargetValue(targetValue);
    }
  };
  return [
    capability,
    mode,
    targetValue,
    thermostatMode,
    targetTemperature,
    disabled,
    measureTemperature,
    setMode,
    settings,
    device,
    controllable,
    postfix,
    $editing,
    click_handler,
    slider_value_binding
  ];
}
class Thermostat extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$H, create_fragment$J, safe_not_equal, {
      settings: 8,
      device: 9,
      capability: 0,
      controllable: 10,
      mode: 1
    });
  }
}
function get_each_context$f(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i2];
  return child_ctx;
}
function create_if_block$w(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$l, create_else_block$l];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[1] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$l(ctx) {
  let div;
  let list;
  let current;
  list = new List({
    props: {
      $$slots: { default: [create_default_slot$f] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(list.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(list.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex flex-col w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(list, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const list_changes = {};
      if (dirty & /*$$scope, capability, value*/
      16389) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(list);
    }
  };
}
function create_if_block_1$l(ctx) {
  let span;
  let t0_value = (
    /*capability*/
    (ctx[0].value ?? "...") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (ctx[0].units ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*capability*/
      1 && t0_value !== (t0_value = /*capability*/
      (ctx2[0].value ?? "...") + ""))
        set_data(t0, t0_value);
      if (dirty & /*capability*/
      1 && t2_value !== (t2_value = /*capability*/
      (ctx2[0].units ?? "") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_else_block_1$a(ctx) {
  let t_value = (
    /*option*/
    ctx[11].title + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    l(nodes) {
      t2 = claim_text(nodes, t_value);
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*capability*/
      1 && t_value !== (t_value = /*option*/
      ctx2[11].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_2$e(ctx) {
  let b2;
  let t_value = (
    /*option*/
    ctx[11].title + ""
  );
  let t2;
  return {
    c() {
      b2 = element("b");
      t2 = text(t_value);
    },
    l(nodes) {
      b2 = claim_element(nodes, "B", {});
      var b_nodes = children(b2);
      t2 = claim_text(b_nodes, t_value);
      b_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, b2, anchor);
      append_hydration(b2, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*capability*/
      1 && t_value !== (t_value = /*option*/
      ctx2[11].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(b2);
      }
    }
  };
}
function create_default_slot_1$b(ctx) {
  let t2;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*option*/
      ctx2[11].id === /*value*/
      ctx2[2]
    )
      return create_if_block_2$e;
    return create_else_block_1$a;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      t2 = space();
    },
    l(nodes) {
      if_block.l(nodes);
      t2 = claim_space(nodes);
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(t2.parentNode, t2);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      if_block.d(detaching);
    }
  };
}
function create_title_slot$4(ctx) {
  let list_item_content_title;
  let current;
  list_item_content_title = new List.Item.Content.Title({
    props: {
      slot: "title",
      class: "mx-auto",
      $$slots: { default: [create_default_slot_1$b] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content_title.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content_title.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content_title, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_title_changes = {};
      if (dirty & /*$$scope, capability, value*/
      16389) {
        list_item_content_title_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content_title.$set(list_item_content_title_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content_title.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content_title.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content_title, detaching);
    }
  };
}
function create_content_slot$6(ctx) {
  let list_item_content;
  let current;
  list_item_content = new List.Item.Content({
    props: {
      slot: "content",
      $$slots: { title: [create_title_slot$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_changes = {};
      if (dirty & /*$$scope, capability, value*/
      16389) {
        list_item_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content.$set(list_item_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content, detaching);
    }
  };
}
function create_each_block$f(ctx) {
  let list_item;
  let current;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[7](
        /*option*/
        ctx[11]
      )
    );
  }
  list_item = new List.Item({
    props: {
      class: "cursor-pointer",
      $$slots: { content: [create_content_slot$6] },
      $$scope: { ctx }
    }
  });
  list_item.$on("click", click_handler);
  return {
    c() {
      create_component(list_item.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const list_item_changes = {};
      if (dirty & /*$$scope, capability, value*/
      16389) {
        list_item_changes.$$scope = { dirty, ctx };
      }
      list_item.$set(list_item_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item, detaching);
    }
  };
}
function create_default_slot$f(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*capability*/
    ctx[0].values
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$f(get_each_context$f(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*value, capability*/
      5) {
        each_value = ensure_array_like(
          /*capability*/
          ctx2[0].values
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$f(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$f(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment$I(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*capability*/
    ctx[0] !== void 0 && create_if_block$w(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*capability*/
        ctx2[0] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$w(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$G($$self, $$props, $$invalidate) {
  let disabled;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(6, $editing = $$value));
  let { settings } = $$props;
  let { device } = $$props;
  let { capability } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let value;
  onMount(() => {
    $$invalidate(2, value = capability.value);
  });
  async function onValue(v) {
    if (capability.setable && v !== (capability == null ? void 0 : capability.value) && v !== void 0) {
      if (!disabled) {
        await setCapabilityValue(v);
      }
    }
  }
  async function setCapabilityValue(value2) {
    await device.setCapabilityValue({
      deviceId: device.id,
      capabilityId: capability.id,
      value: value2
    });
  }
  const click_handler = (option) => $$invalidate(2, value = option.id);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(3, settings = $$props2.settings);
    if ("device" in $$props2)
      $$invalidate(4, device = $$props2.device);
    if ("capability" in $$props2)
      $$invalidate(0, capability = $$props2.capability);
    if ("controllable" in $$props2)
      $$invalidate(5, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(1, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    96) {
      disabled = !controllable || $editing;
    }
    if ($$self.$$.dirty & /*value*/
    4) {
      onValue(value);
    }
  };
  return [
    capability,
    mode,
    value,
    settings,
    device,
    controllable,
    $editing,
    click_handler
  ];
}
class Picker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$G, create_fragment$I, safe_not_equal, {
      settings: 3,
      device: 4,
      capability: 0,
      controllable: 5,
      mode: 1
    });
  }
}
function create_else_block$k(ctx) {
  let span;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].capabilityUri !== void 0
    )
      return create_if_block_3$7;
    return create_else_block_1$9;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      span = element("span");
      if_block.c();
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      if_block.l(span_nodes);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "w-full h-8 overflow-hidden overflow-ellipsis font-extralight");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      if_block.m(span, null);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(span, null);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      if_block.d();
    }
  };
}
function create_if_block$v(ctx) {
  let div;
  let t2;
  let switch_instance;
  let current;
  let if_block = (
    /*context*/
    ctx[1].mode === "card" && create_if_block_1$k(ctx)
  );
  var switch_value = (
    /*getComponent*/
    ctx[5](
      /*capability*/
      ctx[3]
    )
  );
  function switch_props(ctx2, dirty) {
    return {
      props: {
        settings: (
          /*settings*/
          ctx2[0]
        ),
        device: (
          /*device*/
          ctx2[2]
        ),
        capability: (
          /*capability*/
          ctx2[3]
        ),
        controllable: (
          /*controllable*/
          ctx2[4]
        ),
        mode: (
          /*context*/
          ctx2[1].mode
        )
      }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
  }
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      t2 = space();
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (if_block)
        if_block.l(div_nodes);
      t2 = claim_space(div_nodes);
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex items-center justify-between w-full pl-1 pr-1 leading-normal cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      append_hydration(div, t2);
      if (switch_instance)
        mount_component(switch_instance, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*context*/
        ctx2[1].mode === "card"
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*context*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$k(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, t2);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (dirty & /*capability*/
      8 && switch_value !== (switch_value = /*getComponent*/
      ctx2[5](
        /*capability*/
        ctx2[3]
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, div, null);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty & /*settings*/
        1)
          switch_instance_changes.settings = /*settings*/
          ctx2[0];
        if (dirty & /*device*/
        4)
          switch_instance_changes.device = /*device*/
          ctx2[2];
        if (dirty & /*capability*/
        8)
          switch_instance_changes.capability = /*capability*/
          ctx2[3];
        if (dirty & /*controllable*/
        16)
          switch_instance_changes.controllable = /*controllable*/
          ctx2[4];
        if (dirty & /*context*/
        2)
          switch_instance_changes.mode = /*context*/
          ctx2[1].mode;
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
      if (switch_instance)
        destroy_component(switch_instance);
    }
  };
}
function create_else_block_1$9(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Capability not configured");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Capability not configured");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_3$7(ctx) {
  let if_block_anchor;
  function select_block_type_2(ctx2, dirty) {
    if (
      /*capability*/
      ctx2[3] === void 0
    )
      return create_if_block_4$3;
    if (
      /*device*/
      ctx2[2] === void 0
    )
      return create_if_block_5$3;
  }
  let current_block_type = select_block_type_2(ctx);
  let if_block = current_block_type && current_block_type(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_2(ctx2))) {
        if (if_block)
          if_block.d(1);
        if_block = current_block_type && current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) {
        if_block.d(detaching);
      }
    }
  };
}
function create_if_block_5$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Device not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Device not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_4$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Capability not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Capability not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_1$k(ctx) {
  let t0;
  let div;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? /*capability*/
    ctx[3].title) + ""
  );
  let t1;
  let current;
  let if_block = (
    /*settings*/
    ctx[0].iconId !== void 0 && create_if_block_2$d(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      t0 = space();
      div = element("div");
      t1 = text(t1_value);
      this.h();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t0 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      t1 = claim_text(div_nodes, t1_value);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "font-extralight overflow-hidden overflow-ellipsis whitespace-nowrap flex-grow");
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div, anchor);
      append_hydration(div, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*settings*/
        ctx2[0].iconId !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*settings*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_2$d(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t0.parentNode, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*settings, capability*/
      9) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? /*capability*/
      ctx2[3].title) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_2$d(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      ),
      class: "mr-1"
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_fragment$H(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$v, create_else_block$k];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*device*/
      ctx2[2] !== void 0 && /*capability*/
      ctx2[3] !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$F($$self, $$props, $$invalidate) {
  let latestDevice;
  let controllable;
  let $scopes;
  let $devices;
  component_subscribe($$self, scopes, ($$value) => $$invalidate(9, $scopes = $$value));
  component_subscribe($$self, devices, ($$value) => $$invalidate(10, $devices = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  let deviceId = "";
  let capabilityId = "";
  let device;
  let capability;
  function onSettings(s3) {
    if (s3.capabilityUri) {
      const segments = s3.capabilityUri.split(":");
      $$invalidate(6, deviceId = segments[2]);
      $$invalidate(7, capabilityId = segments[3]);
    }
  }
  function onDevice(d3) {
    if (device !== void 0 && device.off !== void 0) {
      device.off("capability", updateCapability);
    }
    if (d3 !== void 0) {
      $$invalidate(2, device = d3);
      if (device.on !== void 0) {
        device.on("capability", updateCapability);
      }
    }
  }
  function updateCapability(event) {
    if (device !== void 0 && event.capabilityId === capabilityId) {
      $$invalidate(3, capability = device.capabilitiesObj[event.capabilityId]);
    }
  }
  function getComponent(capability2) {
    if (device !== void 0) {
      for (var component of device.ui.components) {
        if (component.capabilities.includes(capability2.id)) {
          switch (component.id) {
            case "slider":
              return Slider_1$1;
            case "toggle":
              return Toggle_1;
            case "button":
              return Button_1;
            case "thermostat":
              return Thermostat;
            case "picker":
              return Picker;
            case "battery":
            case "color":
            case "media":
            case "ternary":
            case "sensor":
            default:
              return Sensor;
          }
        }
      }
    }
    return Sensor;
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(1, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*$devices, deviceId*/
    1088) {
      $$invalidate(8, latestDevice = $devices[deviceId]);
    }
    if ($$self.$$.dirty & /*latestDevice, capabilityId*/
    384) {
      $$invalidate(3, capability = latestDevice && capabilityId ? latestDevice.capabilitiesObj[capabilityId] : void 0);
    }
    if ($$self.$$.dirty & /*$scopes*/
    512) {
      $$invalidate(4, controllable = $scopes.includes("homey") || $scopes.includes("homey.device") || $scopes.includes("homey.device.control"));
    }
    if ($$self.$$.dirty & /*latestDevice*/
    256) {
      onDevice(latestDevice);
    }
  };
  return [
    settings,
    context,
    device,
    capability,
    controllable,
    getComponent,
    deviceId,
    capabilityId,
    latestDevice,
    $scopes,
    $devices
  ];
}
class CapabilityWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$F, create_fragment$H, safe_not_equal, { settings: 0, context: 1 });
  }
}
function create$3() {
  return {
    id: v4(),
    type: "capability",
    version: 5
  };
}
function migrate$4(settings) {
  while (settings.version !== 5) {
    settings = migrateOnce$4(settings);
  }
  return settings;
}
function migrateOnce$4(settings) {
  switch (settings.version) {
    case 5:
      return settings;
    case 4:
      return migrate_v4_v5$1(settings);
    case 3:
      return migrate_v3_v4$1(settings);
    case 2:
      return migrate_v2_v3$1(settings);
    case 1:
    default:
      return migrate_v1_v2$3(settings);
  }
}
function migrate_v4_v5$1(v42) {
  const settings = {
    id: v42.id,
    type: v42.type,
    version: 5,
    capabilityUri: "homey:device:" + v42.deviceId + ":" + v42.capabilityId,
    title: v42.title,
    iconId: v42.iconId
  };
  return settings;
}
function migrate_v3_v4$1(v3) {
  return { ...v3, version: 4 };
}
function migrate_v2_v3$1(v2) {
  var _a2;
  const settings = {
    id: v2.id,
    type: v2.type,
    version: 3,
    deviceId: v2.deviceId,
    capabilities: ((_a2 = v2.capabilityIds) == null ? void 0 : _a2.map((id) => ({ capabilityId: id, title: void 0 }))) ?? []
  };
  return settings;
}
function migrate_v1_v2$3(v1) {
  const settings = {
    id: v1.id,
    type: v1.type,
    version: 2,
    deviceId: v1.deviceId,
    capabilityIds: v1.capabilityId ? [v1.capabilityId] : []
  };
  return settings;
}
function create_else_block_1$8(ctx) {
  var _a2;
  let current_block_type_index;
  let if_block;
  let t0;
  let span;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? /*device*/
    ((_a2 = ctx[1]) == null ? void 0 : _a2.name)) + ""
  );
  let t1;
  let current;
  const if_block_creators = [create_if_block_2$c, create_else_block_2$2];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].iconId !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_2(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      this.h();
    },
    l(nodes) {
      if_block.l(nodes);
      t0 = claim_space(nodes);
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "w-full overflow-hidden overflow-ellipsis");
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, span, anchor);
      append_hydration(span, t1);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3;
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(t0.parentNode, t0);
      }
      if ((!current || dirty & /*settings, device*/
      3) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? /*device*/
      ((_a3 = ctx2[1]) == null ? void 0 : _a3.name)) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(span);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_if_block$u(ctx) {
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    var _a2;
    if (
      /*settings*/
      ((_a2 = ctx2[0]) == null ? void 0 : _a2.deviceId) !== void 0
    )
      return create_if_block_1$j;
    return create_else_block$j;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_else_block_2$2(ctx) {
  let await_block_anchor;
  let promise;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block$1,
    then: create_then_block$1,
    catch: create_catch_block$1,
    value: 5
  };
  handle_promise(promise = /*$homey*/
  ctx[2].baseUrl, info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    l(nodes) {
      await_block_anchor = empty();
      info.block.l(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty & /*$homey*/
      4 && promise !== (promise = /*$homey*/
      ctx[2].baseUrl) && handle_promise(promise, info))
        ;
      else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_if_block_2$c(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      ),
      class: "m-1",
      size: "32px"
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_catch_block$1(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block$1(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
      this.h();
    },
    h() {
      var _a2, _b2;
      attr(img, "class", "w-8 h-8 m-1 dark:invert");
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[5] + /*device*/
      ((_a2 = ctx[1]) == null ? void 0 : _a2.iconObj.url)))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*device*/
      (_b2 = ctx[1]) == null ? void 0 : _b2.icon);
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      var _a2, _b2;
      if (dirty & /*$homey, device*/
      6 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[5] + /*device*/
      ((_a2 = ctx2[1]) == null ? void 0 : _a2.iconObj.url))) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*device*/
      2 && img_alt_value !== (img_alt_value = /*device*/
      (_b2 = ctx2[1]) == null ? void 0 : _b2.icon)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("...");
    },
    l(nodes) {
      t2 = claim_text(nodes, "...");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_else_block$j(ctx) {
  let span;
  let textContent = "Device not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1lpomex")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$j(ctx) {
  let span;
  let textContent = "Device not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-izam8p")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$G(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block$u, create_else_block_1$8];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*device*/
      ctx2[1] === void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$E($$self, $$props, $$invalidate) {
  let $devices;
  let $homey;
  component_subscribe($$self, devices, ($$value) => $$invalidate(4, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(2, $homey = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  let device;
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(3, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$devices, settings*/
    17) {
      $$invalidate(1, device = $devices[settings.deviceId ?? ""]);
    }
  };
  return [settings, device, $homey, context, $devices];
}
class DeviceWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$E, create_fragment$G, safe_not_equal, { settings: 0, context: 3 });
  }
}
function create_if_block$t(ctx) {
  let div0;
  let input;
  let updating_value;
  let t2;
  let div1;
  let iconpicker;
  let updating_iconId;
  let current;
  function input_value_binding(value) {
    ctx[7](value);
  }
  let input_props = {
    name: "title",
    placeholder: (
      /*device*/
      ctx[3].name
    )
  };
  if (
    /*title*/
    ctx[1] !== void 0
  ) {
    input_props.value = /*title*/
    ctx[1];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  function iconpicker_iconId_binding(value) {
    ctx[8](value);
  }
  let iconpicker_props = {};
  if (
    /*iconId*/
    ctx[2] !== void 0
  ) {
    iconpicker_props.iconId = /*iconId*/
    ctx[2];
  }
  iconpicker = new IconPicker({ props: iconpicker_props });
  binding_callbacks.push(() => bind(iconpicker, "iconId", iconpicker_iconId_binding));
  return {
    c() {
      div0 = element("div");
      create_component(input.$$.fragment);
      t2 = space();
      div1 = element("div");
      create_component(iconpicker.$$.fragment);
      this.h();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(input.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t2 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      claim_component(iconpicker.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mt-2");
      attr(div1, "class", "mt-2");
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(input, div0, null);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, div1, anchor);
      mount_component(iconpicker, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (dirty & /*device*/
      8)
        input_changes.placeholder = /*device*/
        ctx2[3].name;
      if (!updating_value && dirty & /*title*/
      2) {
        updating_value = true;
        input_changes.value = /*title*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      const iconpicker_changes = {};
      if (!updating_iconId && dirty & /*iconId*/
      4) {
        updating_iconId = true;
        iconpicker_changes.iconId = /*iconId*/
        ctx2[2];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker.$set(iconpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      transition_in(iconpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      transition_out(iconpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t2);
        detach(div1);
      }
      destroy_component(input);
      destroy_component(iconpicker);
    }
  };
}
function create_fragment$F(ctx) {
  let div;
  let devicepicker;
  let updating_deviceId;
  let t2;
  let if_block_anchor;
  let current;
  function devicepicker_deviceId_binding(value) {
    ctx[6](value);
  }
  let devicepicker_props = {};
  if (
    /*deviceId*/
    ctx[0] !== void 0
  ) {
    devicepicker_props.deviceId = /*deviceId*/
    ctx[0];
  }
  devicepicker = new DevicePicker({ props: devicepicker_props });
  binding_callbacks.push(() => bind(devicepicker, "deviceId", devicepicker_deviceId_binding));
  let if_block = (
    /*device*/
    ctx[3] && create_if_block$t(ctx)
  );
  return {
    c() {
      div = element("div");
      create_component(devicepicker.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      claim_component(devicepicker.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      t2 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(devicepicker, div, null);
      insert_hydration(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const devicepicker_changes = {};
      if (!updating_deviceId && dirty & /*deviceId*/
      1) {
        updating_deviceId = true;
        devicepicker_changes.deviceId = /*deviceId*/
        ctx2[0];
        add_flush_callback(() => updating_deviceId = false);
      }
      devicepicker.$set(devicepicker_changes);
      if (
        /*device*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*device*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$t(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(devicepicker.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(devicepicker.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
        detach(if_block_anchor);
      }
      destroy_component(devicepicker);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$D($$self, $$props, $$invalidate) {
  let $devices;
  component_subscribe($$self, devices, ($$value) => $$invalidate(5, $devices = $$value));
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let deviceId;
  let title;
  let iconId;
  let device;
  function onSettings(s3) {
    $$invalidate(0, deviceId = s3 == null ? void 0 : s3.deviceId);
    $$invalidate(1, title = s3 == null ? void 0 : s3.title);
    $$invalidate(2, iconId = s3 == null ? void 0 : s3.iconId);
  }
  function onDevice(id) {
    if (id !== settings.deviceId) {
      dispatch("settings", {
        ...settings,
        deviceId: id,
        capabilityId: void 0
      });
    }
  }
  function onTitle(t2) {
    const value = t2 !== void 0 && t2.length > 0 ? t2 : void 0;
    if (value !== settings.title) {
      dispatch("settings", { ...settings, title: value });
    }
  }
  function onIcon(id) {
    if (id !== settings.iconId) {
      dispatch("settings", { ...settings, iconId: id });
    }
  }
  function devicepicker_deviceId_binding(value) {
    deviceId = value;
    $$invalidate(0, deviceId);
  }
  function input_value_binding(value) {
    title = value;
    $$invalidate(1, title);
  }
  function iconpicker_iconId_binding(value) {
    iconId = value;
    $$invalidate(2, iconId);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(4, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    16) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*deviceId, $devices*/
    33) {
      $$invalidate(3, device = deviceId ? $devices[deviceId] : void 0);
    }
    if ($$self.$$.dirty & /*deviceId*/
    1) {
      onDevice(deviceId);
    }
    if ($$self.$$.dirty & /*title*/
    2) {
      onTitle(title);
    }
    if ($$self.$$.dirty & /*iconId*/
    4) {
      onIcon(iconId);
    }
  };
  return [
    deviceId,
    title,
    iconId,
    device,
    settings,
    $devices,
    devicepicker_deviceId_binding,
    input_value_binding,
    iconpicker_iconId_binding
  ];
}
class DeviceEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$D, create_fragment$F, safe_not_equal, { settings: 4 });
  }
}
function create_fragment$E(ctx) {
  let iconbutton0;
  let t0;
  let span;
  let t1;
  let t2;
  let t3_value = (
    /*unit*/
    (ctx[1] ?? "") + ""
  );
  let t3;
  let t4;
  let iconbutton1;
  let current;
  iconbutton0 = new IconButton({ props: { data: mdiPlus } });
  iconbutton0.$on(
    "click",
    /*click_handler*/
    ctx[9]
  );
  iconbutton1 = new IconButton({ props: { data: mdiMinus } });
  iconbutton1.$on(
    "click",
    /*click_handler_1*/
    ctx[10]
  );
  return {
    c() {
      create_component(iconbutton0.$$.fragment);
      t0 = space();
      span = element("span");
      t1 = text(
        /*value*/
        ctx[0]
      );
      t2 = space();
      t3 = text(t3_value);
      t4 = space();
      create_component(iconbutton1.$$.fragment);
      this.h();
    },
    l(nodes) {
      claim_component(iconbutton0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t1 = claim_text(
        span_nodes,
        /*value*/
        ctx[0]
      );
      t2 = claim_space(span_nodes);
      t3 = claim_text(span_nodes, t3_value);
      span_nodes.forEach(detach);
      t4 = claim_space(nodes);
      claim_component(iconbutton1.$$.fragment, nodes);
      this.h();
    },
    h() {
      attr(span, "class", "ml-1 mr-1 whitespace-nowrap");
    },
    m(target, anchor) {
      mount_component(iconbutton0, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, span, anchor);
      append_hydration(span, t1);
      append_hydration(span, t2);
      append_hydration(span, t3);
      insert_hydration(target, t4, anchor);
      mount_component(iconbutton1, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*value*/
      1)
        set_data(
          t1,
          /*value*/
          ctx2[0]
        );
      if ((!current || dirty & /*unit*/
      2) && t3_value !== (t3_value = /*unit*/
      (ctx2[1] ?? "") + ""))
        set_data(t3, t3_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton0.$$.fragment, local);
      transition_in(iconbutton1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton0.$$.fragment, local);
      transition_out(iconbutton1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(span);
        detach(t4);
      }
      destroy_component(iconbutton0, detaching);
      destroy_component(iconbutton1, detaching);
    }
  };
}
function instance$C($$self, $$props, $$invalidate) {
  let { value } = $$props;
  let { disabled } = $$props;
  let { min = void 0 } = $$props;
  let { max = void 0 } = $$props;
  let { step = void 0 } = $$props;
  let { unit = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  function increment() {
    let v = value + (step ?? 1);
    if (max !== void 0 && max !== null && v > max) {
      v = max;
    }
    if (!disabled) {
      $$invalidate(0, value = v);
    }
  }
  function decrement() {
    let v = value - (step ?? 1);
    if (min !== void 0 && min !== null && v > min) {
      v = min;
    }
    if (!disabled) {
      $$invalidate(0, value = v);
    }
  }
  const click_handler = () => decrement();
  const click_handler_1 = () => increment();
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(4, disabled = $$props2.disabled);
    if ("min" in $$props2)
      $$invalidate(5, min = $$props2.min);
    if ("max" in $$props2)
      $$invalidate(6, max = $$props2.max);
    if ("step" in $$props2)
      $$invalidate(7, step = $$props2.step);
    if ("unit" in $$props2)
      $$invalidate(1, unit = $$props2.unit);
    if ("color" in $$props2)
      $$invalidate(8, color2 = $$props2.color);
  };
  return [
    value,
    unit,
    increment,
    decrement,
    disabled,
    min,
    max,
    step,
    color2,
    click_handler,
    click_handler_1
  ];
}
class NumberInput extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$C, create_fragment$E, safe_not_equal, {
      value: 0,
      disabled: 4,
      min: 5,
      max: 6,
      step: 7,
      unit: 1,
      color: 8
    });
  }
}
function create_fragment$D(ctx) {
  let slider;
  let current;
  slider = new Slider({
    props: {
      name: "slider",
      min: (
        /*min*/
        ctx[2]
      ),
      max: (
        /*max*/
        ctx[3]
      ),
      step: (
        /*step*/
        ctx[4]
      ),
      value: (
        /*value*/
        ctx[0]
      ),
      disabled: (
        /*disabled*/
        ctx[1]
      )
    }
  });
  slider.$on(
    "value",
    /*value_handler*/
    ctx[8]
  );
  return {
    c() {
      create_component(slider.$$.fragment);
    },
    l(nodes) {
      claim_component(slider.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(slider, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const slider_changes = {};
      if (dirty & /*min*/
      4)
        slider_changes.min = /*min*/
        ctx2[2];
      if (dirty & /*max*/
      8)
        slider_changes.max = /*max*/
        ctx2[3];
      if (dirty & /*step*/
      16)
        slider_changes.step = /*step*/
        ctx2[4];
      if (dirty & /*value*/
      1)
        slider_changes.value = /*value*/
        ctx2[0];
      if (dirty & /*disabled*/
      2)
        slider_changes.disabled = /*disabled*/
        ctx2[1];
      slider.$set(slider_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(slider.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(slider.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(slider, detaching);
    }
  };
}
function instance$B($$self, $$props, $$invalidate) {
  let { value } = $$props;
  let { disabled } = $$props;
  let { min = void 0 } = $$props;
  let { max = void 0 } = $$props;
  let { step = void 0 } = $$props;
  let { unit = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  function setValue(v) {
    if (!disabled) {
      $$invalidate(0, value = v);
    }
  }
  const value_handler = (e2) => setValue(e2.detail);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
    if ("min" in $$props2)
      $$invalidate(2, min = $$props2.min);
    if ("max" in $$props2)
      $$invalidate(3, max = $$props2.max);
    if ("step" in $$props2)
      $$invalidate(4, step = $$props2.step);
    if ("unit" in $$props2)
      $$invalidate(6, unit = $$props2.unit);
    if ("color" in $$props2)
      $$invalidate(7, color2 = $$props2.color);
  };
  return [value, disabled, min, max, step, setValue, unit, color2, value_handler];
}
class Slider_12 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$B, create_fragment$D, safe_not_equal, {
      value: 0,
      disabled: 1,
      min: 2,
      max: 3,
      step: 4,
      unit: 6,
      color: 7
    });
  }
}
function create_fragment$C(ctx) {
  let switch_instance;
  let updating_value;
  let switch_instance_anchor;
  let current;
  function switch_instance_value_binding(value) {
    ctx[9](value);
  }
  var switch_value = (
    /*component*/
    ctx[7]
  );
  function switch_props(ctx2, dirty) {
    let switch_instance_props = {
      disabled: (
        /*disabled*/
        ctx2[1]
      ),
      min: (
        /*min*/
        ctx2[2]
      ),
      max: (
        /*max*/
        ctx2[3]
      ),
      step: (
        /*step*/
        ctx2[4]
      ),
      color: (
        /*color*/
        ctx2[6]
      ),
      unit: (
        /*unit*/
        ctx2[5]
      )
    };
    if (
      /*value*/
      ctx2[0] !== void 0
    ) {
      switch_instance_props.value = /*value*/
      ctx2[0];
    }
    return { props: switch_instance_props };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    binding_callbacks.push(() => bind(switch_instance, "value", switch_instance_value_binding));
  }
  return {
    c() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*component*/
      128 && switch_value !== (switch_value = /*component*/
      ctx2[7])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          binding_callbacks.push(() => bind(switch_instance, "value", switch_instance_value_binding));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty & /*disabled*/
        2)
          switch_instance_changes.disabled = /*disabled*/
          ctx2[1];
        if (dirty & /*min*/
        4)
          switch_instance_changes.min = /*min*/
          ctx2[2];
        if (dirty & /*max*/
        8)
          switch_instance_changes.max = /*max*/
          ctx2[3];
        if (dirty & /*step*/
        16)
          switch_instance_changes.step = /*step*/
          ctx2[4];
        if (dirty & /*color*/
        64)
          switch_instance_changes.color = /*color*/
          ctx2[6];
        if (dirty & /*unit*/
        32)
          switch_instance_changes.unit = /*unit*/
          ctx2[5];
        if (!updating_value && dirty & /*value*/
        1) {
          updating_value = true;
          switch_instance_changes.value = /*value*/
          ctx2[0];
          add_flush_callback(() => updating_value = false);
        }
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(switch_instance_anchor);
      }
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function instance$A($$self, $$props, $$invalidate) {
  let component;
  let { variant = "slider" } = $$props;
  let { value } = $$props;
  let { disabled } = $$props;
  let { min = void 0 } = $$props;
  let { max = void 0 } = $$props;
  let { step = void 0 } = $$props;
  let { unit = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  function getComponent(v) {
    switch (v) {
      case "input":
        return NumberInput;
      case "slider":
      default:
        return Slider_12;
    }
  }
  function switch_instance_value_binding(value$1) {
    value = value$1;
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("variant" in $$props2)
      $$invalidate(8, variant = $$props2.variant);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
    if ("min" in $$props2)
      $$invalidate(2, min = $$props2.min);
    if ("max" in $$props2)
      $$invalidate(3, max = $$props2.max);
    if ("step" in $$props2)
      $$invalidate(4, step = $$props2.step);
    if ("unit" in $$props2)
      $$invalidate(5, unit = $$props2.unit);
    if ("color" in $$props2)
      $$invalidate(6, color2 = $$props2.color);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*variant*/
    256) {
      $$invalidate(7, component = getComponent(variant));
    }
  };
  return [
    value,
    disabled,
    min,
    max,
    step,
    unit,
    color2,
    component,
    variant,
    switch_instance_value_binding
  ];
}
class Numeric extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$A, create_fragment$C, safe_not_equal, {
      variant: 8,
      value: 0,
      disabled: 1,
      min: 2,
      max: 3,
      step: 4,
      unit: 5,
      color: 6
    });
  }
}
function create_else_block_1$7(ctx) {
  var _a2, _b2, _c, _d, _e, _f, _g, _h, _i;
  let div3;
  let div1;
  let div0;
  let h12;
  let t0;
  let t1;
  let t2_value = (
    /*settings*/
    (((_a2 = ctx[0].number) == null ? void 0 : _a2.unit) ?? "") + ""
  );
  let t2;
  let t3;
  let span0;
  let t4_value = (
    /*settings*/
    (ctx[0].title ?? /*variable*/
    ctx[1].name) + ""
  );
  let t4;
  let t5;
  let div2;
  let span1;
  let t6_value = (
    /*settings*/
    (((_b2 = ctx[0].number) == null ? void 0 : _b2.min) ?? "") + ""
  );
  let t6;
  let t7;
  let t8_value = (
    /*settings*/
    (((_c = ctx[0].number) == null ? void 0 : _c.unit) ?? "") + ""
  );
  let t8;
  let t9;
  let numeric;
  let updating_value;
  let t10;
  let span2;
  let t11_value = (
    /*settings*/
    (((_d = ctx[0].number) == null ? void 0 : _d.max) ?? "") + ""
  );
  let t11;
  let t12;
  let t13_value = (
    /*settings*/
    (((_e = ctx[0].number) == null ? void 0 : _e.unit) ?? "") + ""
  );
  let t13;
  let current;
  function numeric_value_binding_1(value) {
    ctx[8](value);
  }
  let numeric_props = {
    variant: (
      /*settings*/
      (_f = ctx[0].number) == null ? void 0 : _f.variant
    ),
    min: (
      /*settings*/
      (_g = ctx[0].number) == null ? void 0 : _g.min
    ),
    max: (
      /*settings*/
      (_h = ctx[0].number) == null ? void 0 : _h.max
    ),
    step: (
      /*settings*/
      (_i = ctx[0].number) == null ? void 0 : _i.step
    ),
    disabled: (
      /*disabled*/
      ctx[4]
    )
  };
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    numeric_props.value = /*value*/
    ctx[3];
  }
  numeric = new Numeric({ props: numeric_props });
  binding_callbacks.push(() => bind(numeric, "value", numeric_value_binding_1));
  return {
    c() {
      div3 = element("div");
      div1 = element("div");
      div0 = element("div");
      h12 = element("h1");
      t0 = text(
        /*value*/
        ctx[3]
      );
      t1 = space();
      t2 = text(t2_value);
      t3 = space();
      span0 = element("span");
      t4 = text(t4_value);
      t5 = space();
      div2 = element("div");
      span1 = element("span");
      t6 = text(t6_value);
      t7 = space();
      t8 = text(t8_value);
      t9 = space();
      create_component(numeric.$$.fragment);
      t10 = space();
      span2 = element("span");
      t11 = text(t11_value);
      t12 = space();
      t13 = text(t13_value);
      this.h();
    },
    l(nodes) {
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      div1 = claim_element(div3_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      h12 = claim_element(div0_nodes, "H1", {});
      var h1_nodes = children(h12);
      t0 = claim_text(
        h1_nodes,
        /*value*/
        ctx[3]
      );
      t1 = claim_space(h1_nodes);
      t2 = claim_text(h1_nodes, t2_value);
      h1_nodes.forEach(detach);
      t3 = claim_space(div0_nodes);
      span0 = claim_element(div0_nodes, "SPAN", {});
      var span0_nodes = children(span0);
      t4 = claim_text(span0_nodes, t4_value);
      span0_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t5 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      span1 = claim_element(div2_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      t6 = claim_text(span1_nodes, t6_value);
      t7 = claim_space(span1_nodes);
      t8 = claim_text(span1_nodes, t8_value);
      span1_nodes.forEach(detach);
      t9 = claim_space(div2_nodes);
      claim_component(numeric.$$.fragment, div2_nodes);
      t10 = claim_space(div2_nodes);
      span2 = claim_element(div2_nodes, "SPAN", { class: true });
      var span2_nodes = children(span2);
      t11 = claim_text(span2_nodes, t11_value);
      t12 = claim_space(span2_nodes);
      t13 = claim_text(span2_nodes, t13_value);
      span2_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "flex flex-col items-center");
      attr(div1, "class", "mx-auto");
      attr(span1, "class", "whitespace-nowrap mr-4");
      attr(span2, "class", "whitespace-nowrap ml-4");
      attr(div2, "class", "flex flex-row mt-4");
      attr(div3, "class", "flex flex-col w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div3, anchor);
      append_hydration(div3, div1);
      append_hydration(div1, div0);
      append_hydration(div0, h12);
      append_hydration(h12, t0);
      append_hydration(h12, t1);
      append_hydration(h12, t2);
      append_hydration(div0, t3);
      append_hydration(div0, span0);
      append_hydration(span0, t4);
      append_hydration(div3, t5);
      append_hydration(div3, div2);
      append_hydration(div2, span1);
      append_hydration(span1, t6);
      append_hydration(span1, t7);
      append_hydration(span1, t8);
      append_hydration(div2, t9);
      mount_component(numeric, div2, null);
      append_hydration(div2, t10);
      append_hydration(div2, span2);
      append_hydration(span2, t11);
      append_hydration(span2, t12);
      append_hydration(span2, t13);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3, _b3, _c2, _d2, _e2, _f2, _g2, _h2, _i2;
      if (!current || dirty & /*value*/
      8)
        set_data(
          t0,
          /*value*/
          ctx2[3]
        );
      if ((!current || dirty & /*settings*/
      1) && t2_value !== (t2_value = /*settings*/
      (((_a3 = ctx2[0].number) == null ? void 0 : _a3.unit) ?? "") + ""))
        set_data(t2, t2_value);
      if ((!current || dirty & /*settings, variable*/
      3) && t4_value !== (t4_value = /*settings*/
      (ctx2[0].title ?? /*variable*/
      ctx2[1].name) + ""))
        set_data(t4, t4_value);
      if ((!current || dirty & /*settings*/
      1) && t6_value !== (t6_value = /*settings*/
      (((_b3 = ctx2[0].number) == null ? void 0 : _b3.min) ?? "") + ""))
        set_data(t6, t6_value);
      if ((!current || dirty & /*settings*/
      1) && t8_value !== (t8_value = /*settings*/
      (((_c2 = ctx2[0].number) == null ? void 0 : _c2.unit) ?? "") + ""))
        set_data(t8, t8_value);
      const numeric_changes = {};
      if (dirty & /*settings*/
      1)
        numeric_changes.variant = /*settings*/
        (_d2 = ctx2[0].number) == null ? void 0 : _d2.variant;
      if (dirty & /*settings*/
      1)
        numeric_changes.min = /*settings*/
        (_e2 = ctx2[0].number) == null ? void 0 : _e2.min;
      if (dirty & /*settings*/
      1)
        numeric_changes.max = /*settings*/
        (_f2 = ctx2[0].number) == null ? void 0 : _f2.max;
      if (dirty & /*settings*/
      1)
        numeric_changes.step = /*settings*/
        (_g2 = ctx2[0].number) == null ? void 0 : _g2.step;
      if (dirty & /*disabled*/
      16)
        numeric_changes.disabled = /*disabled*/
        ctx2[4];
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        numeric_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      numeric.$set(numeric_changes);
      if ((!current || dirty & /*settings*/
      1) && t11_value !== (t11_value = /*settings*/
      (((_h2 = ctx2[0].number) == null ? void 0 : _h2.max) ?? "") + ""))
        set_data(t11, t11_value);
      if ((!current || dirty & /*settings*/
      1) && t13_value !== (t13_value = /*settings*/
      (((_i2 = ctx2[0].number) == null ? void 0 : _i2.unit) ?? "") + ""))
        set_data(t13, t13_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(numeric.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(numeric.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      destroy_component(numeric);
    }
  };
}
function create_if_block$s(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$i, create_else_block$i];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    var _a2;
    if (
      /*settings*/
      ((_a2 = ctx2[0].number) == null ? void 0 : _a2.variant) === "input"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$i(ctx) {
  var _a2;
  let span;
  let t0;
  let t1;
  let t2_value = (
    /*settings*/
    (((_a2 = ctx[0].number) == null ? void 0 : _a2.unit) ?? "") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(
        /*value*/
        ctx[3]
      );
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(
        span_nodes,
        /*value*/
        ctx[3]
      );
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty & /*value*/
      8)
        set_data(
          t0,
          /*value*/
          ctx2[3]
        );
      if (dirty & /*settings*/
      1 && t2_value !== (t2_value = /*settings*/
      (((_a3 = ctx2[0].number) == null ? void 0 : _a3.unit) ?? "") + ""))
        set_data(t2, t2_value);
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$i(ctx) {
  var _a2, _b2, _c, _d;
  let numeric;
  let updating_value;
  let current;
  function numeric_value_binding(value) {
    ctx[7](value);
  }
  let numeric_props = {
    variant: (
      /*settings*/
      (_a2 = ctx[0].number) == null ? void 0 : _a2.variant
    ),
    min: (
      /*settings*/
      (_b2 = ctx[0].number) == null ? void 0 : _b2.min
    ),
    max: (
      /*settings*/
      (_c = ctx[0].number) == null ? void 0 : _c.max
    ),
    step: (
      /*settings*/
      (_d = ctx[0].number) == null ? void 0 : _d.step
    ),
    unit: "%",
    disabled: (
      /*disabled*/
      ctx[4]
    )
  };
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    numeric_props.value = /*value*/
    ctx[3];
  }
  numeric = new Numeric({ props: numeric_props });
  binding_callbacks.push(() => bind(numeric, "value", numeric_value_binding));
  return {
    c() {
      create_component(numeric.$$.fragment);
    },
    l(nodes) {
      claim_component(numeric.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(numeric, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3, _b3, _c2, _d2;
      const numeric_changes = {};
      if (dirty & /*settings*/
      1)
        numeric_changes.variant = /*settings*/
        (_a3 = ctx2[0].number) == null ? void 0 : _a3.variant;
      if (dirty & /*settings*/
      1)
        numeric_changes.min = /*settings*/
        (_b3 = ctx2[0].number) == null ? void 0 : _b3.min;
      if (dirty & /*settings*/
      1)
        numeric_changes.max = /*settings*/
        (_c2 = ctx2[0].number) == null ? void 0 : _c2.max;
      if (dirty & /*settings*/
      1)
        numeric_changes.step = /*settings*/
        (_d2 = ctx2[0].number) == null ? void 0 : _d2.step;
      if (dirty & /*disabled*/
      16)
        numeric_changes.disabled = /*disabled*/
        ctx2[4];
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        numeric_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      numeric.$set(numeric_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(numeric.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(numeric.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(numeric, detaching);
    }
  };
}
function create_fragment$B(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$s, create_else_block_1$7];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$z($$self, $$props, $$invalidate) {
  let disabled;
  let $homey;
  let $editing;
  component_subscribe($$self, homey, ($$value) => $$invalidate(9, $homey = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(6, $editing = $$value));
  let { settings } = $$props;
  let { variable } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let value;
  function onVariable(c2) {
    $$invalidate(3, value = c2.value);
  }
  async function onValue(v) {
    if (v !== (variable == null ? void 0 : variable.value)) {
      if (!disabled) {
        await setVariableValue(v);
      }
    }
  }
  async function setVariableValue(value2) {
    await $homey.logic.updateVariable({
      id: variable.id,
      variable: { value: value2 }
    });
  }
  function numeric_value_binding(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  function numeric_value_binding_1(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("variable" in $$props2)
      $$invalidate(1, variable = $$props2.variable);
    if ("controllable" in $$props2)
      $$invalidate(5, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    96) {
      $$invalidate(4, disabled = !controllable || $editing);
    }
    if ($$self.$$.dirty & /*variable*/
    2) {
      onVariable(variable);
    }
    if ($$self.$$.dirty & /*value*/
    8) {
      onValue(value);
    }
  };
  return [
    settings,
    variable,
    mode,
    value,
    disabled,
    controllable,
    $editing,
    numeric_value_binding,
    numeric_value_binding_1
  ];
}
class NumberVariable extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$z, create_fragment$B, safe_not_equal, {
      settings: 0,
      variable: 1,
      controllable: 5,
      mode: 2
    });
  }
}
function create_else_block$h(ctx) {
  let iconbutton;
  let current;
  iconbutton = new IconButton({
    props: {
      data: (
        /*currentIconFalse*/
        ctx[3]
      ),
      color: (
        /*currentColorFalse*/
        ctx[1]
      )
    }
  });
  iconbutton.$on(
    "click",
    /*click_handler_1*/
    ctx[14]
  );
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    l(nodes) {
      claim_component(iconbutton.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const iconbutton_changes = {};
      if (dirty & /*currentIconFalse*/
      8)
        iconbutton_changes.data = /*currentIconFalse*/
        ctx2[3];
      if (dirty & /*currentColorFalse*/
      2)
        iconbutton_changes.color = /*currentColorFalse*/
        ctx2[1];
      iconbutton.$set(iconbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_if_block$r(ctx) {
  let iconbutton;
  let current;
  iconbutton = new IconButton({
    props: {
      data: (
        /*currentIconTrue*/
        ctx[4]
      ),
      color: (
        /*currentColorTrue*/
        ctx[2]
      )
    }
  });
  iconbutton.$on(
    "click",
    /*click_handler*/
    ctx[13]
  );
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    l(nodes) {
      claim_component(iconbutton.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const iconbutton_changes = {};
      if (dirty & /*currentIconTrue*/
      16)
        iconbutton_changes.data = /*currentIconTrue*/
        ctx2[4];
      if (dirty & /*currentColorTrue*/
      4)
        iconbutton_changes.color = /*currentColorTrue*/
        ctx2[2];
      iconbutton.$set(iconbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_fragment$A(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$r, create_else_block$h];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*value*/
      ctx2[0] === true
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
const defaultIcon$2 = "help";
const defaultColor$2 = "text-content";
function instance$y($$self, $$props, $$invalidate) {
  let currentIconTrue;
  let currentIconFalse;
  let currentColorTrue;
  let currentColorFalse;
  let { value } = $$props;
  let { disabled } = $$props;
  let { icon = void 0 } = $$props;
  let { iconTrue = void 0 } = $$props;
  let { iconFalse = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  let { colorTrue = void 0 } = $$props;
  let { colorFalse = void 0 } = $$props;
  function setValue(v) {
    if (!disabled) {
      $$invalidate(0, value = v);
    }
  }
  const click_handler = () => setValue(false);
  const click_handler_1 = () => setValue(true);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(6, disabled = $$props2.disabled);
    if ("icon" in $$props2)
      $$invalidate(7, icon = $$props2.icon);
    if ("iconTrue" in $$props2)
      $$invalidate(8, iconTrue = $$props2.iconTrue);
    if ("iconFalse" in $$props2)
      $$invalidate(9, iconFalse = $$props2.iconFalse);
    if ("color" in $$props2)
      $$invalidate(10, color2 = $$props2.color);
    if ("colorTrue" in $$props2)
      $$invalidate(11, colorTrue = $$props2.colorTrue);
    if ("colorFalse" in $$props2)
      $$invalidate(12, colorFalse = $$props2.colorFalse);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*iconTrue, icon*/
    384) {
      $$invalidate(4, currentIconTrue = getIcon(iconTrue ?? icon ?? defaultIcon$2));
    }
    if ($$self.$$.dirty & /*iconFalse, icon*/
    640) {
      $$invalidate(3, currentIconFalse = getIcon(iconFalse ?? icon ?? defaultIcon$2));
    }
    if ($$self.$$.dirty & /*colorTrue, color*/
    3072) {
      $$invalidate(2, currentColorTrue = colorTrue ?? color2 ?? defaultColor$2);
    }
    if ($$self.$$.dirty & /*colorFalse, color*/
    5120) {
      $$invalidate(1, currentColorFalse = colorFalse ?? color2 ?? defaultColor$2);
    }
  };
  return [
    value,
    currentColorFalse,
    currentColorTrue,
    currentIconFalse,
    currentIconTrue,
    setValue,
    disabled,
    icon,
    iconTrue,
    iconFalse,
    color2,
    colorTrue,
    colorFalse,
    click_handler,
    click_handler_1
  ];
}
class IconButton_1 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$y, create_fragment$A, safe_not_equal, {
      value: 0,
      disabled: 6,
      icon: 7,
      iconTrue: 8,
      iconFalse: 9,
      color: 10,
      colorTrue: 11,
      colorFalse: 12
    });
  }
}
function create_else_block_1$6(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconTrue*/
        ctx[5]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconTrue*/
      32)
        icon_1_changes.data = /*currentIconTrue*/
        ctx2[5];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_if_block_1$h(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconTrue*/
        ctx[5]
      ),
      color: (
        /*currentColorTrue*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconTrue*/
      32)
        icon_1_changes.data = /*currentIconTrue*/
        ctx2[5];
      if (dirty & /*currentColorTrue*/
      8)
        icon_1_changes.color = /*currentColorTrue*/
        ctx2[3];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_else_block$g(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconFalse*/
        ctx[4]
      ),
      color: (
        /*currentColorFalse*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconFalse*/
      16)
        icon_1_changes.data = /*currentIconFalse*/
        ctx2[4];
      if (dirty & /*currentColorFalse*/
      4)
        icon_1_changes.color = /*currentColorFalse*/
        ctx2[2];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_if_block$q(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconFalse*/
        ctx[4]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconFalse*/
      16)
        icon_1_changes.data = /*currentIconFalse*/
        ctx2[4];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_fragment$z(ctx) {
  let div;
  let button0;
  let current_block_type_index;
  let if_block0;
  let t2;
  let button1;
  let current_block_type_index_1;
  let if_block1;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_1$h, create_else_block_1$6];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*value*/
      ctx2[0] === true
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const if_block_creators_1 = [create_if_block$q, create_else_block$g];
  const if_blocks_1 = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*value*/
      ctx2[0] === true
    )
      return 0;
    return 1;
  }
  current_block_type_index_1 = select_block_type_1(ctx);
  if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
  return {
    c() {
      div = element("div");
      button0 = element("button");
      if_block0.c();
      t2 = space();
      button1 = element("button");
      if_block1.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      button0 = claim_element(div_nodes, "BUTTON", { type: true, class: true });
      var button0_nodes = children(button0);
      if_block0.l(button0_nodes);
      button0_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      button1 = claim_element(div_nodes, "BUTTON", { type: true, class: true });
      var button1_nodes = children(button1);
      if_block1.l(button1_nodes);
      button1_nodes.forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(button0, "type", "button");
      attr(button0, "class", "inline-flex items-center justify-center px-2 py-1 text-sm font-medium text-content first-of-type:rounded-l-md last-of-type:rounded-r-md bg-surface");
      toggle_class(button0, "hover:bg-hover", !/*disabled*/
      ctx[1]);
      attr(button1, "type", "button");
      attr(button1, "class", "inline-flex items-center justify-center px-2 py-1 text-sm font-medium text-content first-of-type:rounded-l-md last-of-type:rounded-r-md bg-surface hover:bg-hover");
      toggle_class(button1, "hover:bg-hover", !/*disabled*/
      ctx[1]);
      attr(div, "class", "flex flex-row border border-border rounded-md divide-x divide-border");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, button0);
      if_blocks[current_block_type_index].m(button0, null);
      append_hydration(div, t2);
      append_hydration(div, button1);
      if_blocks_1[current_block_type_index_1].m(button1, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[13]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[14]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(button0, null);
      }
      if (!current || dirty & /*disabled*/
      2) {
        toggle_class(button0, "hover:bg-hover", !/*disabled*/
        ctx2[1]);
      }
      let previous_block_index_1 = current_block_type_index_1;
      current_block_type_index_1 = select_block_type_1(ctx2);
      if (current_block_type_index_1 === previous_block_index_1) {
        if_blocks_1[current_block_type_index_1].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
          if_blocks_1[previous_block_index_1] = null;
        });
        check_outros();
        if_block1 = if_blocks_1[current_block_type_index_1];
        if (!if_block1) {
          if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(button1, null);
      }
      if (!current || dirty & /*disabled*/
      2) {
        toggle_class(button1, "hover:bg-hover", !/*disabled*/
        ctx2[1]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      if_blocks_1[current_block_type_index_1].d();
      mounted = false;
      run_all(dispose);
    }
  };
}
const defaultIcon$1 = "help";
const defaultColor$1 = "text-content";
function instance$x($$self, $$props, $$invalidate) {
  let currentIconTrue;
  let currentIconFalse;
  let currentColorTrue;
  let currentColorFalse;
  let { value } = $$props;
  let { disabled } = $$props;
  let { icon = void 0 } = $$props;
  let { iconTrue = void 0 } = $$props;
  let { iconFalse = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  let { colorTrue = void 0 } = $$props;
  let { colorFalse = void 0 } = $$props;
  function setValue(v) {
    if (!disabled) {
      $$invalidate(0, value = v);
    }
  }
  const click_handler = () => setValue(true);
  const click_handler_1 = () => setValue(false);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
    if ("icon" in $$props2)
      $$invalidate(7, icon = $$props2.icon);
    if ("iconTrue" in $$props2)
      $$invalidate(8, iconTrue = $$props2.iconTrue);
    if ("iconFalse" in $$props2)
      $$invalidate(9, iconFalse = $$props2.iconFalse);
    if ("color" in $$props2)
      $$invalidate(10, color2 = $$props2.color);
    if ("colorTrue" in $$props2)
      $$invalidate(11, colorTrue = $$props2.colorTrue);
    if ("colorFalse" in $$props2)
      $$invalidate(12, colorFalse = $$props2.colorFalse);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*iconTrue, icon*/
    384) {
      $$invalidate(5, currentIconTrue = getIcon(iconTrue ?? icon ?? defaultIcon$1));
    }
    if ($$self.$$.dirty & /*iconFalse, icon*/
    640) {
      $$invalidate(4, currentIconFalse = getIcon(iconFalse ?? icon ?? defaultIcon$1));
    }
    if ($$self.$$.dirty & /*colorTrue, color*/
    3072) {
      $$invalidate(3, currentColorTrue = colorTrue ?? color2 ?? defaultColor$1);
    }
    if ($$self.$$.dirty & /*colorFalse, color*/
    5120) {
      $$invalidate(2, currentColorFalse = colorFalse ?? color2 ?? defaultColor$1);
    }
  };
  return [
    value,
    disabled,
    currentColorFalse,
    currentColorTrue,
    currentIconFalse,
    currentIconTrue,
    setValue,
    icon,
    iconTrue,
    iconFalse,
    color2,
    colorTrue,
    colorFalse,
    click_handler,
    click_handler_1
  ];
}
class IconGroupHorizontal extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$x, create_fragment$z, safe_not_equal, {
      value: 0,
      disabled: 1,
      icon: 7,
      iconTrue: 8,
      iconFalse: 9,
      color: 10,
      colorTrue: 11,
      colorFalse: 12
    });
  }
}
function create_else_block_1$5(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconTrue*/
        ctx[5]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconTrue*/
      32)
        icon_1_changes.data = /*currentIconTrue*/
        ctx2[5];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_if_block_1$g(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconTrue*/
        ctx[5]
      ),
      color: (
        /*currentColorTrue*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconTrue*/
      32)
        icon_1_changes.data = /*currentIconTrue*/
        ctx2[5];
      if (dirty & /*currentColorTrue*/
      8)
        icon_1_changes.color = /*currentColorTrue*/
        ctx2[3];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_else_block$f(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconFalse*/
        ctx[4]
      ),
      color: (
        /*currentColorFalse*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconFalse*/
      16)
        icon_1_changes.data = /*currentIconFalse*/
        ctx2[4];
      if (dirty & /*currentColorFalse*/
      4)
        icon_1_changes.color = /*currentColorFalse*/
        ctx2[2];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_if_block$p(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      slot: "icon",
      data: (
        /*currentIconFalse*/
        ctx[4]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    l(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*currentIconFalse*/
      16)
        icon_1_changes.data = /*currentIconFalse*/
        ctx2[4];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_fragment$y(ctx) {
  let div;
  let button0;
  let current_block_type_index;
  let if_block0;
  let t2;
  let button1;
  let current_block_type_index_1;
  let if_block1;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_1$g, create_else_block_1$5];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*value*/
      ctx2[0] === true
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const if_block_creators_1 = [create_if_block$p, create_else_block$f];
  const if_blocks_1 = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*value*/
      ctx2[0] === true
    )
      return 0;
    return 1;
  }
  current_block_type_index_1 = select_block_type_1(ctx);
  if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
  return {
    c() {
      div = element("div");
      button0 = element("button");
      if_block0.c();
      t2 = space();
      button1 = element("button");
      if_block1.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      button0 = claim_element(div_nodes, "BUTTON", { type: true, class: true });
      var button0_nodes = children(button0);
      if_block0.l(button0_nodes);
      button0_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      button1 = claim_element(div_nodes, "BUTTON", { type: true, class: true });
      var button1_nodes = children(button1);
      if_block1.l(button1_nodes);
      button1_nodes.forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(button0, "type", "button");
      attr(button0, "class", "inline-flex items-center justify-center px-1 py-2 text-sm font-medium text-content first-of-type:rounded-t-md last-of-type:rounded-b-md bg-surface");
      toggle_class(button0, "hover:bg-hover", !/*disabled*/
      ctx[1]);
      attr(button1, "type", "button");
      attr(button1, "class", "inline-flex items-center justify-center px-1 py-2 text-sm font-medium text-content first-of-type:rounded-t-md last-of-type:rounded-b-md bg-surface");
      toggle_class(button1, "hover:bg-hover", !/*disabled*/
      ctx[1]);
      attr(div, "class", "flex flex-col border border-border rounded-md divide-y divide-border");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, button0);
      if_blocks[current_block_type_index].m(button0, null);
      append_hydration(div, t2);
      append_hydration(div, button1);
      if_blocks_1[current_block_type_index_1].m(button1, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[13]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[14]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(button0, null);
      }
      if (!current || dirty & /*disabled*/
      2) {
        toggle_class(button0, "hover:bg-hover", !/*disabled*/
        ctx2[1]);
      }
      let previous_block_index_1 = current_block_type_index_1;
      current_block_type_index_1 = select_block_type_1(ctx2);
      if (current_block_type_index_1 === previous_block_index_1) {
        if_blocks_1[current_block_type_index_1].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
          if_blocks_1[previous_block_index_1] = null;
        });
        check_outros();
        if_block1 = if_blocks_1[current_block_type_index_1];
        if (!if_block1) {
          if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(button1, null);
      }
      if (!current || dirty & /*disabled*/
      2) {
        toggle_class(button1, "hover:bg-hover", !/*disabled*/
        ctx2[1]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      if_blocks_1[current_block_type_index_1].d();
      mounted = false;
      run_all(dispose);
    }
  };
}
const defaultIcon = "help";
const defaultColor = "text-content";
function instance$w($$self, $$props, $$invalidate) {
  let currentIconTrue;
  let currentIconFalse;
  let currentColorTrue;
  let currentColorFalse;
  let { value } = $$props;
  let { disabled } = $$props;
  let { icon = void 0 } = $$props;
  let { iconTrue = void 0 } = $$props;
  let { iconFalse = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  let { colorTrue = void 0 } = $$props;
  let { colorFalse = void 0 } = $$props;
  function setValue(v) {
    if (!disabled) {
      $$invalidate(0, value = v);
    }
  }
  const click_handler = () => setValue(true);
  const click_handler_1 = () => setValue(false);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
    if ("icon" in $$props2)
      $$invalidate(7, icon = $$props2.icon);
    if ("iconTrue" in $$props2)
      $$invalidate(8, iconTrue = $$props2.iconTrue);
    if ("iconFalse" in $$props2)
      $$invalidate(9, iconFalse = $$props2.iconFalse);
    if ("color" in $$props2)
      $$invalidate(10, color2 = $$props2.color);
    if ("colorTrue" in $$props2)
      $$invalidate(11, colorTrue = $$props2.colorTrue);
    if ("colorFalse" in $$props2)
      $$invalidate(12, colorFalse = $$props2.colorFalse);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*iconTrue, icon*/
    384) {
      $$invalidate(5, currentIconTrue = getIcon(iconTrue ?? icon ?? defaultIcon));
    }
    if ($$self.$$.dirty & /*iconFalse, icon*/
    640) {
      $$invalidate(4, currentIconFalse = getIcon(iconFalse ?? icon ?? defaultIcon));
    }
    if ($$self.$$.dirty & /*colorTrue, color*/
    3072) {
      $$invalidate(3, currentColorTrue = colorTrue ?? color2 ?? defaultColor);
    }
    if ($$self.$$.dirty & /*colorFalse, color*/
    5120) {
      $$invalidate(2, currentColorFalse = colorFalse ?? color2 ?? defaultColor);
    }
  };
  return [
    value,
    disabled,
    currentColorFalse,
    currentColorTrue,
    currentIconFalse,
    currentIconTrue,
    setValue,
    icon,
    iconTrue,
    iconFalse,
    color2,
    colorTrue,
    colorFalse,
    click_handler,
    click_handler_1
  ];
}
class IconGroupVertical extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$w, create_fragment$y, safe_not_equal, {
      value: 0,
      disabled: 1,
      icon: 7,
      iconTrue: 8,
      iconFalse: 9,
      color: 10,
      colorTrue: 11,
      colorFalse: 12
    });
  }
}
function create_fragment$x(ctx) {
  let switch_instance;
  let updating_value;
  let switch_instance_anchor;
  let current;
  function switch_instance_value_binding(value) {
    ctx[10](value);
  }
  var switch_value = (
    /*component*/
    ctx[8]
  );
  function switch_props(ctx2, dirty) {
    let switch_instance_props = {
      disabled: (
        /*disabled*/
        ctx2[1]
      ),
      icon: (
        /*icon*/
        ctx2[2]
      ),
      iconTrue: (
        /*iconTrue*/
        ctx2[3]
      ),
      iconFalse: (
        /*iconFalse*/
        ctx2[4]
      ),
      color: (
        /*color*/
        ctx2[5]
      ),
      colorTrue: (
        /*colorTrue*/
        ctx2[6]
      ),
      colorFalse: (
        /*colorFalse*/
        ctx2[7]
      )
    };
    if (
      /*value*/
      ctx2[0] !== void 0
    ) {
      switch_instance_props.value = /*value*/
      ctx2[0];
    }
    return { props: switch_instance_props };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    binding_callbacks.push(() => bind(switch_instance, "value", switch_instance_value_binding));
  }
  return {
    c() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*component*/
      256 && switch_value !== (switch_value = /*component*/
      ctx2[8])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          binding_callbacks.push(() => bind(switch_instance, "value", switch_instance_value_binding));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty & /*disabled*/
        2)
          switch_instance_changes.disabled = /*disabled*/
          ctx2[1];
        if (dirty & /*icon*/
        4)
          switch_instance_changes.icon = /*icon*/
          ctx2[2];
        if (dirty & /*iconTrue*/
        8)
          switch_instance_changes.iconTrue = /*iconTrue*/
          ctx2[3];
        if (dirty & /*iconFalse*/
        16)
          switch_instance_changes.iconFalse = /*iconFalse*/
          ctx2[4];
        if (dirty & /*color*/
        32)
          switch_instance_changes.color = /*color*/
          ctx2[5];
        if (dirty & /*colorTrue*/
        64)
          switch_instance_changes.colorTrue = /*colorTrue*/
          ctx2[6];
        if (dirty & /*colorFalse*/
        128)
          switch_instance_changes.colorFalse = /*colorFalse*/
          ctx2[7];
        if (!updating_value && dirty & /*value*/
        1) {
          updating_value = true;
          switch_instance_changes.value = /*value*/
          ctx2[0];
          add_flush_callback(() => updating_value = false);
        }
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(switch_instance_anchor);
      }
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function instance$v($$self, $$props, $$invalidate) {
  let component;
  let { variant = "toggle" } = $$props;
  let { value } = $$props;
  let { disabled } = $$props;
  let { icon = void 0 } = $$props;
  let { iconTrue = void 0 } = $$props;
  let { iconFalse = void 0 } = $$props;
  let { color: color2 = void 0 } = $$props;
  let { colorTrue = void 0 } = $$props;
  let { colorFalse = void 0 } = $$props;
  function getComponent(v) {
    switch (v) {
      case "icon-button":
        return IconButton_1;
      case "icon-group-horizontal":
        return IconGroupHorizontal;
      case "icon-group-vertical":
        return IconGroupVertical;
      case "toggle":
      default:
        return Toggle;
    }
  }
  function switch_instance_value_binding(value$1) {
    value = value$1;
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("variant" in $$props2)
      $$invalidate(9, variant = $$props2.variant);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
    if ("icon" in $$props2)
      $$invalidate(2, icon = $$props2.icon);
    if ("iconTrue" in $$props2)
      $$invalidate(3, iconTrue = $$props2.iconTrue);
    if ("iconFalse" in $$props2)
      $$invalidate(4, iconFalse = $$props2.iconFalse);
    if ("color" in $$props2)
      $$invalidate(5, color2 = $$props2.color);
    if ("colorTrue" in $$props2)
      $$invalidate(6, colorTrue = $$props2.colorTrue);
    if ("colorFalse" in $$props2)
      $$invalidate(7, colorFalse = $$props2.colorFalse);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*variant*/
    512) {
      $$invalidate(8, component = getComponent(variant));
    }
  };
  return [
    value,
    disabled,
    icon,
    iconTrue,
    iconFalse,
    color2,
    colorTrue,
    colorFalse,
    component,
    variant,
    switch_instance_value_binding
  ];
}
let Boolean$1 = class Boolean2 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$v, create_fragment$x, safe_not_equal, {
      variant: 9,
      value: 0,
      disabled: 1,
      icon: 2,
      iconTrue: 3,
      iconFalse: 4,
      color: 5,
      colorTrue: 6,
      colorFalse: 7
    });
  }
};
function create_else_block$e(ctx) {
  var _a2, _b2, _c, _d, _e, _f, _g;
  let div1;
  let h3;
  let t0_value = (
    /*settings*/
    (ctx[0].title ?? /*variable*/
    ctx[1].name) + ""
  );
  let t0;
  let t1;
  let div0;
  let t2;
  let boolean;
  let updating_value;
  let current;
  function boolean_value_binding_1(value) {
    ctx[8](value);
  }
  let boolean_props = {
    variant: (
      /*settings*/
      (_a2 = ctx[0].boolean) == null ? void 0 : _a2.variant
    ),
    color: (
      /*settings*/
      (_b2 = ctx[0].boolean) == null ? void 0 : _b2.color
    ),
    colorTrue: (
      /*settings*/
      (_c = ctx[0].boolean) == null ? void 0 : _c.colorTrue
    ),
    colorFalse: (
      /*settings*/
      (_d = ctx[0].boolean) == null ? void 0 : _d.colorFalse
    ),
    icon: (
      /*settings*/
      (_e = ctx[0].boolean) == null ? void 0 : _e.iconId
    ),
    iconTrue: (
      /*settings*/
      (_f = ctx[0].boolean) == null ? void 0 : _f.iconTrueId
    ),
    iconFalse: (
      /*settings*/
      (_g = ctx[0].boolean) == null ? void 0 : _g.iconFalseId
    ),
    disabled: (
      /*disabled*/
      ctx[5]
    )
  };
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    boolean_props.value = /*value*/
    ctx[3];
  }
  boolean = new Boolean$1({ props: boolean_props });
  binding_callbacks.push(() => bind(boolean, "value", boolean_value_binding_1));
  return {
    c() {
      div1 = element("div");
      h3 = element("h3");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      t2 = space();
      create_component(boolean.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      h3 = claim_element(div1_nodes, "H3", {});
      var h3_nodes = children(h3);
      t0 = claim_text(h3_nodes, t0_value);
      h3_nodes.forEach(detach);
      t1 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      children(div0).forEach(detach);
      t2 = claim_space(div1_nodes);
      claim_component(boolean.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mx-auto");
      attr(div1, "class", "flex flex-row items-center w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, h3);
      append_hydration(h3, t0);
      append_hydration(div1, t1);
      append_hydration(div1, div0);
      append_hydration(div1, t2);
      mount_component(boolean, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3, _b3, _c2, _d2, _e2, _f2, _g2;
      if ((!current || dirty & /*settings, variable*/
      3) && t0_value !== (t0_value = /*settings*/
      (ctx2[0].title ?? /*variable*/
      ctx2[1].name) + ""))
        set_data(t0, t0_value);
      const boolean_changes = {};
      if (dirty & /*settings*/
      1)
        boolean_changes.variant = /*settings*/
        (_a3 = ctx2[0].boolean) == null ? void 0 : _a3.variant;
      if (dirty & /*settings*/
      1)
        boolean_changes.color = /*settings*/
        (_b3 = ctx2[0].boolean) == null ? void 0 : _b3.color;
      if (dirty & /*settings*/
      1)
        boolean_changes.colorTrue = /*settings*/
        (_c2 = ctx2[0].boolean) == null ? void 0 : _c2.colorTrue;
      if (dirty & /*settings*/
      1)
        boolean_changes.colorFalse = /*settings*/
        (_d2 = ctx2[0].boolean) == null ? void 0 : _d2.colorFalse;
      if (dirty & /*settings*/
      1)
        boolean_changes.icon = /*settings*/
        (_e2 = ctx2[0].boolean) == null ? void 0 : _e2.iconId;
      if (dirty & /*settings*/
      1)
        boolean_changes.iconTrue = /*settings*/
        (_f2 = ctx2[0].boolean) == null ? void 0 : _f2.iconTrueId;
      if (dirty & /*settings*/
      1)
        boolean_changes.iconFalse = /*settings*/
        (_g2 = ctx2[0].boolean) == null ? void 0 : _g2.iconFalseId;
      if (dirty & /*disabled*/
      32)
        boolean_changes.disabled = /*disabled*/
        ctx2[5];
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        boolean_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      boolean.$set(boolean_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(boolean.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(boolean.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(boolean);
    }
  };
}
function create_if_block$o(ctx) {
  var _a2, _b2, _c, _d, _e, _f, _g;
  let boolean;
  let updating_value;
  let current;
  function boolean_value_binding(value) {
    ctx[7](value);
  }
  let boolean_props = {
    variant: (
      /*settings*/
      (_a2 = ctx[0].boolean) == null ? void 0 : _a2.variant
    ),
    color: (
      /*settings*/
      (_b2 = ctx[0].boolean) == null ? void 0 : _b2.color
    ),
    colorTrue: (
      /*settings*/
      (_c = ctx[0].boolean) == null ? void 0 : _c.colorTrue
    ),
    colorFalse: (
      /*settings*/
      (_d = ctx[0].boolean) == null ? void 0 : _d.colorFalse
    ),
    icon: (
      /*settings*/
      (_e = ctx[0].boolean) == null ? void 0 : _e.iconId
    ),
    iconTrue: (
      /*settings*/
      (_f = ctx[0].boolean) == null ? void 0 : _f.iconTrueId
    ),
    iconFalse: (
      /*settings*/
      (_g = ctx[0].boolean) == null ? void 0 : _g.iconFalseId
    ),
    disabled: (
      /*disabled*/
      ctx[5]
    )
  };
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    boolean_props.value = /*value*/
    ctx[3];
  }
  boolean = new Boolean$1({ props: boolean_props });
  binding_callbacks.push(() => bind(boolean, "value", boolean_value_binding));
  return {
    c() {
      create_component(boolean.$$.fragment);
    },
    l(nodes) {
      claim_component(boolean.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(boolean, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3, _b3, _c2, _d2, _e2, _f2, _g2;
      const boolean_changes = {};
      if (dirty & /*settings*/
      1)
        boolean_changes.variant = /*settings*/
        (_a3 = ctx2[0].boolean) == null ? void 0 : _a3.variant;
      if (dirty & /*settings*/
      1)
        boolean_changes.color = /*settings*/
        (_b3 = ctx2[0].boolean) == null ? void 0 : _b3.color;
      if (dirty & /*settings*/
      1)
        boolean_changes.colorTrue = /*settings*/
        (_c2 = ctx2[0].boolean) == null ? void 0 : _c2.colorTrue;
      if (dirty & /*settings*/
      1)
        boolean_changes.colorFalse = /*settings*/
        (_d2 = ctx2[0].boolean) == null ? void 0 : _d2.colorFalse;
      if (dirty & /*settings*/
      1)
        boolean_changes.icon = /*settings*/
        (_e2 = ctx2[0].boolean) == null ? void 0 : _e2.iconId;
      if (dirty & /*settings*/
      1)
        boolean_changes.iconTrue = /*settings*/
        (_f2 = ctx2[0].boolean) == null ? void 0 : _f2.iconTrueId;
      if (dirty & /*settings*/
      1)
        boolean_changes.iconFalse = /*settings*/
        (_g2 = ctx2[0].boolean) == null ? void 0 : _g2.iconFalseId;
      if (dirty & /*disabled*/
      32)
        boolean_changes.disabled = /*disabled*/
        ctx2[5];
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        boolean_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      boolean.$set(boolean_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(boolean.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(boolean.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(boolean, detaching);
    }
  };
}
function create_fragment$w(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block$o, create_else_block$e];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      toggle_class(
        div,
        "w-full",
        /*mode*/
        ctx[2] === "view"
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          div,
          "click",
          /*click_handler*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      if (!current || dirty & /*mode*/
      4) {
        toggle_class(
          div,
          "w-full",
          /*mode*/
          ctx2[2] === "view"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      mounted = false;
      dispose();
    }
  };
}
function instance$u($$self, $$props, $$invalidate) {
  let disabled;
  let $homey;
  let $editing;
  component_subscribe($$self, homey, ($$value) => $$invalidate(10, $homey = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(4, $editing = $$value));
  let { settings } = $$props;
  let { variable } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let value;
  function onVariable(c2) {
    $$invalidate(3, value = !!c2.value);
  }
  async function onValue(v) {
    if (v !== (variable == null ? void 0 : variable.value)) {
      if (!disabled) {
        await setVariableValue(v);
      } else {
        $$invalidate(3, value = !v);
      }
    }
  }
  async function setVariableValue(value2) {
    await $homey.logic.updateVariable({
      id: variable.id,
      variable: { value: value2 }
    });
  }
  function boolean_value_binding(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  function boolean_value_binding_1(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  const click_handler = (e2) => {
    if (!$editing) {
      e2.stopPropagation();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("variable" in $$props2)
      $$invalidate(1, variable = $$props2.variable);
    if ("controllable" in $$props2)
      $$invalidate(6, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    80) {
      $$invalidate(5, disabled = !controllable || $editing);
    }
    if ($$self.$$.dirty & /*variable*/
    2) {
      onVariable(variable);
    }
    if ($$self.$$.dirty & /*value*/
    8) {
      onValue(value);
    }
  };
  return [
    settings,
    variable,
    mode,
    value,
    $editing,
    disabled,
    controllable,
    boolean_value_binding,
    boolean_value_binding_1,
    click_handler
  ];
}
class BooleanVariable extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$u, create_fragment$w, safe_not_equal, {
      settings: 0,
      variable: 1,
      controllable: 6,
      mode: 2
    });
  }
}
function create_else_block$d(ctx) {
  let div1;
  let h3;
  let t0_value = (
    /*settings*/
    (ctx[0].title ?? /*variable*/
    ctx[1].name) + ""
  );
  let t0;
  let t1;
  let div0;
  let t2;
  let iconbutton;
  let t3;
  let input;
  let updating_value;
  let current;
  iconbutton = new IconButton({ props: { data: mdiContentSave } });
  iconbutton.$on(
    "click",
    /*click_handler*/
    ctx[8]
  );
  function input_value_binding(value) {
    ctx[9](value);
  }
  let input_props = {
    name: "text",
    disabled: (
      /*disabled*/
      ctx[4]
    )
  };
  if (
    /*value*/
    ctx[3] !== void 0
  ) {
    input_props.value = /*value*/
    ctx[3];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  return {
    c() {
      div1 = element("div");
      h3 = element("h3");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      t2 = space();
      create_component(iconbutton.$$.fragment);
      t3 = space();
      create_component(input.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      h3 = claim_element(div1_nodes, "H3", {});
      var h3_nodes = children(h3);
      t0 = claim_text(h3_nodes, t0_value);
      h3_nodes.forEach(detach);
      t1 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      children(div0).forEach(detach);
      t2 = claim_space(div1_nodes);
      claim_component(iconbutton.$$.fragment, div1_nodes);
      t3 = claim_space(div1_nodes);
      claim_component(input.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mx-auto");
      attr(div1, "class", "flex flex-row items-center w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, h3);
      append_hydration(h3, t0);
      append_hydration(div1, t1);
      append_hydration(div1, div0);
      append_hydration(div1, t2);
      mount_component(iconbutton, div1, null);
      append_hydration(div1, t3);
      mount_component(input, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & /*settings, variable*/
      3) && t0_value !== (t0_value = /*settings*/
      (ctx2[0].title ?? /*variable*/
      ctx2[1].name) + ""))
        set_data(t0, t0_value);
      const input_changes = {};
      if (dirty & /*disabled*/
      16)
        input_changes.disabled = /*disabled*/
        ctx2[4];
      if (!updating_value && dirty & /*value*/
      8) {
        updating_value = true;
        input_changes.value = /*value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      transition_in(input.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      transition_out(input.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(iconbutton);
      destroy_component(input);
    }
  };
}
function create_if_block$n(ctx) {
  let span;
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(
        /*value*/
        ctx[3]
      );
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(
        span_nodes,
        /*value*/
        ctx[3]
      );
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      8)
        set_data(
          t2,
          /*value*/
          ctx2[3]
        );
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$v(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block$n, create_else_block$d];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mode*/
      ctx2[2] === "card"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      toggle_class(
        div,
        "w-full",
        /*mode*/
        ctx[2] === "view"
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      if (!current || dirty & /*mode*/
      4) {
        toggle_class(
          div,
          "w-full",
          /*mode*/
          ctx2[2] === "view"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$t($$self, $$props, $$invalidate) {
  let disabled;
  let $homey;
  let $editing;
  component_subscribe($$self, homey, ($$value) => $$invalidate(10, $homey = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(7, $editing = $$value));
  let { settings } = $$props;
  let { variable } = $$props;
  let { controllable } = $$props;
  let { mode } = $$props;
  let value;
  function onVariable(c2) {
    $$invalidate(3, value = c2.value);
  }
  async function saveValue() {
    if (value !== (variable == null ? void 0 : variable.value)) {
      if (!disabled) {
        await setVariableValue(value);
      }
    }
  }
  async function setVariableValue(value2) {
    await $homey.logic.updateVariable({
      id: variable.id,
      variable: { value: value2 }
    });
  }
  const click_handler = () => saveValue();
  function input_value_binding(value$1) {
    value = value$1;
    $$invalidate(3, value);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("variable" in $$props2)
      $$invalidate(1, variable = $$props2.variable);
    if ("controllable" in $$props2)
      $$invalidate(6, controllable = $$props2.controllable);
    if ("mode" in $$props2)
      $$invalidate(2, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*controllable, $editing*/
    192) {
      $$invalidate(4, disabled = !controllable || $editing);
    }
    if ($$self.$$.dirty & /*variable*/
    2) {
      onVariable(variable);
    }
  };
  return [
    settings,
    variable,
    mode,
    value,
    disabled,
    saveValue,
    controllable,
    $editing,
    click_handler,
    input_value_binding
  ];
}
class TextVariable extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$t, create_fragment$v, safe_not_equal, {
      settings: 0,
      variable: 1,
      controllable: 6,
      mode: 2
    });
  }
}
function create_else_block_1$4(ctx) {
  let span;
  function select_block_type_2(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].variableId !== void 0
    )
      return create_if_block_5$2;
    return create_else_block_2$1;
  }
  let current_block_type = select_block_type_2(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      span = element("span");
      if_block.c();
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      if_block.l(span_nodes);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "w-full h-8 overflow-hidden overflow-ellipsis font-extralight");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      if_block.m(span, null);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_2(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(span, null);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      if_block.d();
    }
  };
}
function create_if_block$m(ctx) {
  let div;
  let t2;
  let current_block_type_index;
  let if_block1;
  let current;
  let if_block0 = (
    /*context*/
    ctx[1].mode === "card" && create_if_block_3$6(ctx)
  );
  const if_block_creators = [create_if_block_1$f, create_if_block_2$b, create_else_block$c];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*variable*/
      ctx2[2].type === "number"
    )
      return 0;
    if (
      /*variable*/
      ctx2[2].type === "boolean"
    )
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if (if_block0)
        if_block0.c();
      t2 = space();
      if_block1.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (if_block0)
        if_block0.l(div_nodes);
      t2 = claim_space(div_nodes);
      if_block1.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex items-center justify-between w-full pl-1 pr-1 leading-normal cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (if_block0)
        if_block0.m(div, null);
      append_hydration(div, t2);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*context*/
        ctx2[1].mode === "card"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*context*/
          2) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_3$6(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t2);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0)
        if_block0.d();
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_else_block_2$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Variable not configured");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Variable not configured");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_5$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Variable not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Variable not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_3$6(ctx) {
  let t0;
  let div;
  let t1_value = (
    /*settings*/
    (ctx[0].title ?? /*variable*/
    ctx[2].name) + ""
  );
  let t1;
  let current;
  let if_block = (
    /*settings*/
    ctx[0].iconId !== void 0 && create_if_block_4$2(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      t0 = space();
      div = element("div");
      t1 = text(t1_value);
      this.h();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t0 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      t1 = claim_text(div_nodes, t1_value);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "font-extralight overflow-hidden overflow-ellipsis whitespace-nowrap flex-grow");
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div, anchor);
      append_hydration(div, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*settings*/
        ctx2[0].iconId !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*settings*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_4$2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t0.parentNode, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*settings, variable*/
      5) && t1_value !== (t1_value = /*settings*/
      (ctx2[0].title ?? /*variable*/
      ctx2[2].name) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_4$2(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      ),
      class: "mr-1"
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_else_block$c(ctx) {
  let textvariable;
  let current;
  textvariable = new TextVariable({
    props: {
      settings: (
        /*settings*/
        ctx[0]
      ),
      variable: (
        /*variable*/
        ctx[2]
      ),
      controllable: (
        /*controllable*/
        ctx[3]
      ),
      mode: (
        /*context*/
        ctx[1].mode
      )
    }
  });
  return {
    c() {
      create_component(textvariable.$$.fragment);
    },
    l(nodes) {
      claim_component(textvariable.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(textvariable, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const textvariable_changes = {};
      if (dirty & /*settings*/
      1)
        textvariable_changes.settings = /*settings*/
        ctx2[0];
      if (dirty & /*variable*/
      4)
        textvariable_changes.variable = /*variable*/
        ctx2[2];
      if (dirty & /*controllable*/
      8)
        textvariable_changes.controllable = /*controllable*/
        ctx2[3];
      if (dirty & /*context*/
      2)
        textvariable_changes.mode = /*context*/
        ctx2[1].mode;
      textvariable.$set(textvariable_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textvariable.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textvariable.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(textvariable, detaching);
    }
  };
}
function create_if_block_2$b(ctx) {
  let booleanvariable;
  let current;
  booleanvariable = new BooleanVariable({
    props: {
      settings: (
        /*settings*/
        ctx[0]
      ),
      variable: (
        /*variable*/
        ctx[2]
      ),
      controllable: (
        /*controllable*/
        ctx[3]
      ),
      mode: (
        /*context*/
        ctx[1].mode
      )
    }
  });
  return {
    c() {
      create_component(booleanvariable.$$.fragment);
    },
    l(nodes) {
      claim_component(booleanvariable.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(booleanvariable, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const booleanvariable_changes = {};
      if (dirty & /*settings*/
      1)
        booleanvariable_changes.settings = /*settings*/
        ctx2[0];
      if (dirty & /*variable*/
      4)
        booleanvariable_changes.variable = /*variable*/
        ctx2[2];
      if (dirty & /*controllable*/
      8)
        booleanvariable_changes.controllable = /*controllable*/
        ctx2[3];
      if (dirty & /*context*/
      2)
        booleanvariable_changes.mode = /*context*/
        ctx2[1].mode;
      booleanvariable.$set(booleanvariable_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(booleanvariable.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(booleanvariable.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(booleanvariable, detaching);
    }
  };
}
function create_if_block_1$f(ctx) {
  let numbervariable;
  let current;
  numbervariable = new NumberVariable({
    props: {
      settings: (
        /*settings*/
        ctx[0]
      ),
      variable: (
        /*variable*/
        ctx[2]
      ),
      controllable: (
        /*controllable*/
        ctx[3]
      ),
      mode: (
        /*context*/
        ctx[1].mode
      )
    }
  });
  return {
    c() {
      create_component(numbervariable.$$.fragment);
    },
    l(nodes) {
      claim_component(numbervariable.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(numbervariable, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const numbervariable_changes = {};
      if (dirty & /*settings*/
      1)
        numbervariable_changes.settings = /*settings*/
        ctx2[0];
      if (dirty & /*variable*/
      4)
        numbervariable_changes.variable = /*variable*/
        ctx2[2];
      if (dirty & /*controllable*/
      8)
        numbervariable_changes.controllable = /*controllable*/
        ctx2[3];
      if (dirty & /*context*/
      2)
        numbervariable_changes.mode = /*context*/
        ctx2[1].mode;
      numbervariable.$set(numbervariable_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(numbervariable.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(numbervariable.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(numbervariable, detaching);
    }
  };
}
function create_fragment$u(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$m, create_else_block_1$4];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*variable*/
      ctx2[2] !== void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$s($$self, $$props, $$invalidate) {
  let controllable;
  let $scopes;
  let $variables;
  component_subscribe($$self, scopes, ($$value) => $$invalidate(5, $scopes = $$value));
  component_subscribe($$self, variables, ($$value) => $$invalidate(6, $variables = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  let variableId = "";
  let variable;
  function onSettings(s3) {
    $$invalidate(4, variableId = s3.variableId ?? "");
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(1, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*$variables, variableId*/
    80) {
      $$invalidate(2, variable = $variables[variableId]);
    }
    if ($$self.$$.dirty & /*$scopes*/
    32) {
      $$invalidate(3, controllable = $scopes.includes("homey") || $scopes.includes("homey.logic"));
    }
  };
  return [settings, context, variable, controllable, variableId, $scopes, $variables];
}
class VariableWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$s, create_fragment$u, safe_not_equal, { settings: 0, context: 1 });
  }
}
function get_each_context$e(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i2];
  return child_ctx;
}
function create_else_block$b(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*placeholder*/
        ctx[1]
      );
    },
    l(nodes) {
      t2 = claim_text(
        nodes,
        /*placeholder*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*placeholder*/
      2)
        set_data(
          t2,
          /*placeholder*/
          ctx2[1]
        );
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_2$a(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Variable not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Variable not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_1$e(ctx) {
  let icon;
  let t0;
  let span;
  let t1_value = (
    /*selected*/
    ctx[3].name + ""
  );
  let t1;
  let t2;
  let iconbutton;
  let current;
  icon = new Icon({
    props: { data: mdiVariable, class: "h-6 w-6 mr-2" }
  });
  iconbutton = new IconButton({ props: { data: mdiDelete, size: "14px" } });
  iconbutton.$on(
    "click",
    /*click_handler*/
    ctx[11]
  );
  return {
    c() {
      create_component(icon.$$.fragment);
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      create_component(iconbutton.$$.fragment);
      this.h();
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
      t0 = claim_space(nodes);
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      t2 = claim_space(nodes);
      claim_component(iconbutton.$$.fragment, nodes);
      this.h();
    },
    h() {
      attr(span, "class", "mr-auto");
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, span, anchor);
      append_hydration(span, t1);
      insert_hydration(target, t2, anchor);
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & /*selected*/
      8) && t1_value !== (t1_value = /*selected*/
      ctx2[3].name + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(span);
        detach(t2);
      }
      destroy_component(icon, detaching);
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_default_slot_4$6(ctx) {
  let span;
  let textContent = "Variable:";
  let t1;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$e, create_if_block_2$a, create_else_block$b];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*selected*/
      ctx2[3] !== void 0
    )
      return 0;
    if (
      /*variableId*/
      ctx2[0] !== void 0
    )
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
      t1 = space();
      if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-mi5ci4")
        span.textContent = textContent;
      t1 = claim_space(nodes);
      if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      attr(span, "class", "mr-1");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      insert_hydration(target, t1, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
        detach(t1);
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_if_block$l(ctx) {
  let modal;
  let current;
  modal = new Modal({
    props: {
      handleClose: (
        /*func*/
        ctx[16]
      ),
      $$slots: { content: [create_content_slot$5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal.$$.fragment);
    },
    l(nodes) {
      claim_component(modal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_changes = {};
      if (dirty & /*open*/
      16)
        modal_changes.handleClose = /*func*/
        ctx2[16];
      if (dirty & /*$$scope, filtered, search, open*/
      8388660) {
        modal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal.$set(modal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal, detaching);
    }
  };
}
function create_default_slot_3$7(ctx) {
  let icon;
  let t0;
  let t1_value = (
    /*variable*/
    ctx[20].name + ""
  );
  let t1;
  let t2;
  let current;
  icon = new Icon({
    props: { data: mdiVariable, class: "h-6 w-6 mr-2" }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
      t0 = claim_space(nodes);
      t1 = claim_text(nodes, t1_value);
      t2 = claim_space(nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, t2, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & /*filtered*/
      32) && t1_value !== (t1_value = /*variable*/
      ctx2[20].name + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
      }
      destroy_component(icon, detaching);
    }
  };
}
function create_title_slot$3(ctx) {
  let list_item_content_title;
  let current;
  list_item_content_title = new List.Item.Content.Title({
    props: {
      slot: "title",
      class: "flex",
      $$slots: { default: [create_default_slot_3$7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content_title.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content_title.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content_title, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_title_changes = {};
      if (dirty & /*$$scope, filtered*/
      8388640) {
        list_item_content_title_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content_title.$set(list_item_content_title_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content_title.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content_title.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content_title, detaching);
    }
  };
}
function create_content_slot_1$2(ctx) {
  let list_item_content;
  let current;
  list_item_content = new List.Item.Content({
    props: {
      slot: "content",
      $$slots: { title: [create_title_slot$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_changes = {};
      if (dirty & /*$$scope, filtered*/
      8388640) {
        list_item_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content.$set(list_item_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content, detaching);
    }
  };
}
function create_each_block$e(ctx) {
  let list_item;
  let current;
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[15](
        /*variable*/
        ctx[20]
      )
    );
  }
  list_item = new List.Item({
    props: {
      class: "cursor-pointer",
      $$slots: { content: [create_content_slot_1$2] },
      $$scope: { ctx }
    }
  });
  list_item.$on("click", click_handler_3);
  return {
    c() {
      create_component(list_item.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const list_item_changes = {};
      if (dirty & /*$$scope, filtered*/
      8388640) {
        list_item_changes.$$scope = { dirty, ctx };
      }
      list_item.$set(list_item_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item, detaching);
    }
  };
}
function create_default_slot_2$7(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*filtered*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$e(get_each_context$e(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*onVariable, filtered*/
      96) {
        each_value = ensure_array_like(
          /*filtered*/
          ctx2[5]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$e(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$e(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_1$a(ctx) {
  let div1;
  let div0;
  let iconbutton;
  let t0;
  let div2;
  let input;
  let updating_value;
  let t1;
  let div3;
  let list;
  let current;
  iconbutton = new IconButton({ props: { data: mdiClose } });
  iconbutton.$on(
    "click",
    /*click_handler_2*/
    ctx[13]
  );
  function input_value_binding(value) {
    ctx[14](value);
  }
  let input_props = { name: "search", placeholder: "Search" };
  if (
    /*search*/
    ctx[2] !== void 0
  ) {
    input_props.value = /*search*/
    ctx[2];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  list = new List({
    props: {
      $$slots: { default: [create_default_slot_2$7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      create_component(iconbutton.$$.fragment);
      t0 = space();
      div2 = element("div");
      create_component(input.$$.fragment);
      t1 = space();
      div3 = element("div");
      create_component(list.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(iconbutton.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", {});
      var div2_nodes = children(div2);
      claim_component(input.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      claim_component(list.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "absolute -top-4 -right-5 z-10");
      attr(div1, "class", "relative w-full");
      attr(div3, "class", "flex-grow overflow-auto");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      mount_component(iconbutton, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(input, div2, null);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div3, anchor);
      mount_component(list, div3, null);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (!updating_value && dirty & /*search*/
      4) {
        updating_value = true;
        input_changes.value = /*search*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      const list_changes = {};
      if (dirty & /*$$scope, filtered*/
      8388640) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      transition_in(input.$$.fragment, local);
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      transition_out(input.$$.fragment, local);
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t0);
        detach(div2);
        detach(t1);
        detach(div3);
      }
      destroy_component(iconbutton);
      destroy_component(input);
      destroy_component(list);
    }
  };
}
function create_body_slot$4(ctx) {
  let modal_content_body;
  let current;
  modal_content_body = new Modal.Content.Body({
    props: {
      slot: "body",
      class: "h-full",
      $$slots: { default: [create_default_slot_1$a] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content_body.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content_body.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content_body, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_body_changes = {};
      if (dirty & /*$$scope, filtered, search, open*/
      8388660) {
        modal_content_body_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content_body.$set(modal_content_body_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content_body.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content_body.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content_body, detaching);
    }
  };
}
function create_content_slot$5(ctx) {
  let modal_content;
  let current;
  modal_content = new Modal.Content({
    props: {
      slot: "content",
      $$slots: { body: [create_body_slot$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_changes = {};
      if (dirty & /*$$scope, filtered, search, open*/
      8388660) {
        modal_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content.$set(modal_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content, detaching);
    }
  };
}
function create_default_slot$e(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*open*/
    ctx[4] && create_if_block$l(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*open*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*open*/
          16) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$l(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment$t(ctx) {
  let button;
  let t2;
  let portal;
  let current;
  button = new Button({
    props: {
      class: "w-full justify-start border border-border",
      $$slots: { default: [create_default_slot_4$6] },
      $$scope: { ctx }
    }
  });
  button.$on(
    "click",
    /*click_handler_1*/
    ctx[12]
  );
  portal = new Portal({
    props: {
      $$slots: { default: [create_default_slot$e] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
      t2 = space();
      create_component(portal.$$.fragment);
    },
    l(nodes) {
      claim_component(button.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(portal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(portal, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const button_changes = {};
      if (dirty & /*$$scope, variableId, selected, placeholder*/
      8388619) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
      const portal_changes = {};
      if (dirty & /*$$scope, open, filtered, search*/
      8388660) {
        portal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      portal.$set(portal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      transition_in(portal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      transition_out(portal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(button, detaching);
      destroy_component(portal, detaching);
    }
  };
}
function instance$r($$self, $$props, $$invalidate) {
  let flatVariables;
  let sorted;
  let $variables;
  component_subscribe($$self, variables, ($$value) => $$invalidate(10, $variables = $$value));
  let { variableId } = $$props;
  let { placeholder = "Select variable" } = $$props;
  let { variableFilter = void 0 } = $$props;
  const dispatch = createEventDispatcher();
  let open = false;
  let search = "";
  let filtered = [];
  let selected;
  function filterVariables(value, s3) {
    const normalized = value.toLowerCase();
    if (value.length > 0) {
      $$invalidate(5, filtered = sorted.filter((v) => v.name.toLowerCase().includes(normalized)));
    } else {
      $$invalidate(5, filtered = sorted);
    }
  }
  function onVariable(variable) {
    $$invalidate(0, variableId = variable.id);
    $$invalidate(4, open = false);
    dispatch("variableId", variableId);
  }
  function onSelected(variable) {
    dispatch("variable", variable);
  }
  const click_handler = () => $$invalidate(0, variableId = void 0);
  const click_handler_1 = () => $$invalidate(4, open = true);
  const click_handler_2 = () => $$invalidate(4, open = false);
  function input_value_binding(value) {
    search = value;
    $$invalidate(2, search);
  }
  const click_handler_3 = (variable) => onVariable(variable);
  const func = () => $$invalidate(4, open = false);
  $$self.$$set = ($$props2) => {
    if ("variableId" in $$props2)
      $$invalidate(0, variableId = $$props2.variableId);
    if ("placeholder" in $$props2)
      $$invalidate(1, placeholder = $$props2.placeholder);
    if ("variableFilter" in $$props2)
      $$invalidate(7, variableFilter = $$props2.variableFilter);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$variables, variableFilter*/
    1152) {
      $$invalidate(9, flatVariables = Object.values($variables).filter((variable) => variableFilter ? variableFilter(variable) : true));
    }
    if ($$self.$$.dirty & /*flatVariables*/
    512) {
      $$invalidate(8, sorted = (flatVariables ?? []).sort((a3, b2) => {
        if (a3.name === b2.name)
          return 0;
        if (a3.name < b2.name)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*variableId, flatVariables*/
    513) {
      $$invalidate(3, selected = variableId !== void 0 ? flatVariables.find((d3) => d3.id === variableId) : void 0);
    }
    if ($$self.$$.dirty & /*search, sorted*/
    260) {
      filterVariables(search);
    }
    if ($$self.$$.dirty & /*selected*/
    8) {
      onSelected(selected);
    }
  };
  return [
    variableId,
    placeholder,
    search,
    selected,
    open,
    filtered,
    onVariable,
    variableFilter,
    sorted,
    flatVariables,
    $variables,
    click_handler,
    click_handler_1,
    click_handler_2,
    input_value_binding,
    click_handler_3,
    func
  ];
}
class VariablePicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$r, create_fragment$t, safe_not_equal, {
      variableId: 0,
      placeholder: 1,
      variableFilter: 7
    });
  }
}
const Slate = [
  "#f8fafc",
  "#f1f5f9",
  "#e2e8f0",
  "#cbd5e1",
  "#94a3b8",
  "#64748b",
  "#475569",
  "#334155",
  "#1e293b",
  "#0f172a",
  "#020617"
];
const Gray = [
  "#f9fafb",
  "#f3f4f6",
  "#e5e7eb",
  "#d1d5db",
  "#9ca3af",
  "#6b7280",
  "#4b5563",
  "#374151",
  "#1f2937",
  "#111827",
  "#030712"
];
const Zinc = [
  "#fafafa",
  "#f4f4f5",
  "#e4e4e7",
  "#d4d4d8",
  "#a1a1aa",
  "#71717a",
  "#52525b",
  "#3f3f46",
  "#27272a",
  "#18181b",
  "#09090b"
];
const Neutral = [
  "#fafafa",
  "#f5f5f5",
  "#e5e5e5",
  "#d4d4d4",
  "#a3a3a3",
  "#737373",
  "#525252",
  "#404040",
  "#262626",
  "#171717",
  "#0a0a0a"
];
const Stone = [
  "#fafaf9",
  "#f5f5f4",
  "#e7e5e4",
  "#d6d3d1",
  "#a8a29e",
  "#78716c",
  "#57534e",
  "#44403c",
  "#292524",
  "#1c1917",
  "#0c0a09"
];
const Red = [
  "#fef2f2",
  "#fee2e2",
  "#fecaca",
  "#fca5a5",
  "#f87171",
  "#ef4444",
  "#dc2626",
  "#b91c1c",
  "#991b1b",
  "#7f1d1d",
  "#450a0a"
];
const Orange = [
  "#fff7ed",
  "#ffedd5",
  "#fed7aa",
  "#fdba74",
  "#fb923c",
  "#f97316",
  "#ea580c",
  "#c2410c",
  "#9a3412",
  "#7c2d12",
  "#431407"
];
const Amber = [
  "#fffbeb",
  "#fef3c7",
  "#fde68a",
  "#fcd34d",
  "#fbbf24",
  "#f59e0b",
  "#d97706",
  "#b45309",
  "#92400e",
  "#78350f",
  "#451a03"
];
const Yellow = [
  "#fefce8",
  "#fef9c3",
  "#fef08a",
  "#fde047",
  "#facc15",
  "#eab308",
  "#ca8a04",
  "#a16207",
  "#854d0e",
  "#713f12",
  "#422006"
];
const Lime = [
  "#f7fee7",
  "#ecfccb",
  "#d9f99d",
  "#bef264",
  "#a3e635",
  "#84cc16",
  "#65a30d",
  "#4d7c0f",
  "#3f6212",
  "#365314",
  "#1a2e05"
];
const Green = [
  "#f0fdf4",
  "#dcfce7",
  "#bbf7d0",
  "#86efac",
  "#4ade80",
  "#22c55e",
  "#16a34a",
  "#15803d",
  "#166534",
  "#14532d",
  "#052e16"
];
const Emerald = [
  "#ecfdf5",
  "#d1fae5",
  "#a7f3d0",
  "#6ee7b7",
  "#34d399",
  "#10b981",
  "#059669",
  "#047857",
  "#065f46",
  "#064e3b",
  "#022c22"
];
const Teal = [
  "#f0fdfa",
  "#ccfbf1",
  "#99f6e4",
  "#5eead4",
  "#2dd4bf",
  "#14b8a6",
  "#0d9488",
  "#0f766e",
  "#115e59",
  "#134e4a",
  "#042f2e"
];
const Cyan = [
  "#ecfeff",
  "#cffafe",
  "#a5f3fc",
  "#67e8f9",
  "#22d3ee",
  "#06b6d4",
  "#0891b2",
  "#0e7490",
  "#155e75",
  "#164e63",
  "#083344"
];
const Sky = [
  "#f0f9ff",
  "#e0f2fe",
  "#bae6fd",
  "#7dd3fc",
  "#38bdf8",
  "#0ea5e9",
  "#0284c7",
  "#0369a1",
  "#075985",
  "#0c4a6e",
  "#082f49"
];
const Blue = [
  "#eff6ff",
  "#dbeafe",
  "#bfdbfe",
  "#93c5fd",
  "#60a5fa",
  "#3b82f6",
  "#2563eb",
  "#1d4ed8",
  "#1e40af",
  "#1e3a8a",
  "#172554"
];
const Indigo = [
  "#eef2ff",
  "#e0e7ff",
  "#c7d2fe",
  "#a5b4fc",
  "#818cf8",
  "#6366f1",
  "#4f46e5",
  "#4338ca",
  "#3730a3",
  "#312e81",
  "#1e1b4b"
];
const Violet = [
  "#f5f3ff",
  "#ede9fe",
  "#ddd6fe",
  "#c4b5fd",
  "#a78bfa",
  "#8b5cf6",
  "#7c3aed",
  "#6d28d9",
  "#5b21b6",
  "#4c1d95",
  "#2e1065"
];
const Purple = [
  "#faf5ff",
  "#f3e8ff",
  "#e9d5ff",
  "#d8b4fe",
  "#c084fc",
  "#a855f7",
  "#9333ea",
  "#7e22ce",
  "#6b21a8",
  "#581c87",
  "#3b0764"
];
const Fuchsia = [
  "#fdf4ff",
  "#fae8ff",
  "#f5d0fe",
  "#f0abfc",
  "#e879f9",
  "#d946ef",
  "#c026d3",
  "#a21caf",
  "#86198f",
  "#701a75",
  "#4a044e"
];
const Pink = [
  "#fdf2f8",
  "#fce7f3",
  "#fbcfe8",
  "#f9a8d4",
  "#f472b6",
  "#ec4899",
  "#db2777",
  "#be185d",
  "#9d174d",
  "#831843",
  "#500724"
];
const Rose = [
  "#fff1f2",
  "#ffe4e6",
  "#fecdd3",
  "#fda4af",
  "#fb7185",
  "#f43f5e",
  "#e11d48",
  "#be123c",
  "#9f1239",
  "#881337",
  "#4c0519"
];
const TailwindColors = {
  Slate,
  Gray,
  Zinc,
  Neutral,
  Stone,
  Red,
  Orange,
  Amber,
  Yellow,
  Lime,
  Green,
  Emerald,
  Teal,
  Cyan,
  Sky,
  Blue,
  Indigo,
  Violet,
  Purple,
  Fuchsia,
  Pink,
  Rose
};
function get_each_context$d(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i2];
  return child_ctx;
}
function get_each_context_1$6(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[17] = list[i2];
  child_ctx[19] = i2;
  return child_ctx;
}
function create_if_block$k(ctx) {
  let modal;
  let current;
  modal = new Modal({
    props: {
      handleClose: (
        /*func*/
        ctx[11]
      ),
      $$slots: { content: [create_content_slot$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal.$$.fragment);
    },
    l(nodes) {
      claim_component(modal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_changes = {};
      if (dirty & /*open*/
      2)
        modal_changes.handleClose = /*func*/
        ctx2[11];
      if (dirty & /*$$scope, names, alpha, open*/
      1048590) {
        modal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal.$set(modal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal, detaching);
    }
  };
}
function create_each_block_1$6(ctx) {
  let button;
  let t2;
  let mounted;
  let dispose;
  function click_handler_2() {
    return (
      /*click_handler_2*/
      ctx[10](
        /*color*/
        ctx[17]
      )
    );
  }
  return {
    c() {
      button = element("button");
      t2 = text(" \r\n                                        ");
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { style: true, class: true });
      var button_nodes = children(button);
      t2 = claim_text(button_nodes, " \r\n                                        ");
      button_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_style(
        button,
        "background-color",
        /*color*/
        ctx[17]
      );
      set_style(
        button,
        "opacity",
        /*alpha*/
        ctx[2] * 100 + "%"
      );
      attr(button, "class", "w-10 h-8");
      toggle_class(
        button,
        "mx-2",
        /*i*/
        ctx[19] === 5
      );
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, t2);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_2);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*names*/
      8) {
        set_style(
          button,
          "background-color",
          /*color*/
          ctx[17]
        );
      }
      if (dirty & /*alpha*/
      4) {
        set_style(
          button,
          "opacity",
          /*alpha*/
          ctx[2] * 100 + "%"
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$d(ctx) {
  let div1;
  let span;
  let t0_value = (
    /*name*/
    ctx[14] + ""
  );
  let t0;
  let t1;
  let div0;
  let t2;
  let each_value_1 = ensure_array_like(
    /*getColors*/
    ctx[4](
      /*name*/
      ctx[14]
    )
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1$6(get_each_context_1$6(ctx, each_value_1, i2));
  }
  return {
    c() {
      div1 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t2 = space();
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      span = claim_element(div1_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      span_nodes.forEach(detach);
      t1 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", {});
      var div0_nodes = children(div0);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div0_nodes);
      }
      div0_nodes.forEach(detach);
      t2 = claim_space(div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "font-thin");
      attr(div1, "class", "flex flex-row w-full justify-between");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, span);
      append_hydration(span, t0);
      append_hydration(div1, t1);
      append_hydration(div1, div0);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div0, null);
        }
      }
      append_hydration(div1, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*names*/
      8 && t0_value !== (t0_value = /*name*/
      ctx2[14] + ""))
        set_data(t0, t0_value);
      if (dirty & /*getColors, names, alpha, selectColor*/
      60) {
        each_value_1 = ensure_array_like(
          /*getColors*/
          ctx2[4](
            /*name*/
            ctx2[14]
          )
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$6(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block_1$6(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(div0, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_1$9(ctx) {
  let div1;
  let div0;
  let iconbutton;
  let t0;
  let div3;
  let div2;
  let span;
  let textContent = "Opacity";
  let input;
  let t2;
  let current;
  let mounted;
  let dispose;
  iconbutton = new IconButton({ props: { data: mdiClose } });
  iconbutton.$on(
    "click",
    /*click_handler_1*/
    ctx[8]
  );
  let each_value = ensure_array_like(
    /*names*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$d(get_each_context$d(ctx, each_value, i2));
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      create_component(iconbutton.$$.fragment);
      t0 = space();
      div3 = element("div");
      div2 = element("div");
      span = element("span");
      span.textContent = textContent;
      input = element("input");
      t2 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(iconbutton.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      span = claim_element(div2_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-hcmr85")
        span.textContent = textContent;
      input = claim_element(div2_nodes, "INPUT", {
        type: true,
        min: true,
        max: true,
        step: true,
        class: true
      });
      div2_nodes.forEach(detach);
      t2 = claim_space(div3_nodes);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div3_nodes);
      }
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "absolute -top-4 -right-5 z-10");
      attr(div1, "class", "relative w-full");
      attr(input, "type", "range");
      attr(input, "min", "0");
      attr(input, "max", "1");
      attr(input, "step", "0.01");
      attr(input, "class", "w-[440px] mx-2");
      attr(div2, "class", "flex flex-row w-full justify-between mb-4");
      attr(div3, "class", "flex-grow overflow-auto");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      mount_component(iconbutton, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div3, anchor);
      append_hydration(div3, div2);
      append_hydration(div2, span);
      append_hydration(div2, input);
      set_input_value(
        input,
        /*alpha*/
        ctx[2]
      );
      append_hydration(div3, t2);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div3, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "change",
            /*input_change_input_handler*/
            ctx[9]
          ),
          listen(
            input,
            "input",
            /*input_change_input_handler*/
            ctx[9]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*alpha*/
      4) {
        set_input_value(
          input,
          /*alpha*/
          ctx2[2]
        );
      }
      if (dirty & /*getColors, names, alpha, selectColor*/
      60) {
        each_value = ensure_array_like(
          /*names*/
          ctx2[3]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$d(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block$d(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(div3, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t0);
        detach(div3);
      }
      destroy_component(iconbutton);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_body_slot$3(ctx) {
  let modal_content_body;
  let current;
  modal_content_body = new Modal.Content.Body({
    props: {
      slot: "body",
      class: "h-full flex flex-col",
      $$slots: { default: [create_default_slot_1$9] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content_body.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content_body.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content_body, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_body_changes = {};
      if (dirty & /*$$scope, names, alpha, open*/
      1048590) {
        modal_content_body_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content_body.$set(modal_content_body_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content_body.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content_body.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content_body, detaching);
    }
  };
}
function create_content_slot$4(ctx) {
  let modal_content;
  let current;
  modal_content = new Modal.Content({
    props: {
      slot: "content",
      $$slots: { body: [create_body_slot$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_changes = {};
      if (dirty & /*$$scope, names, alpha, open*/
      1048590) {
        modal_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content.$set(modal_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content, detaching);
    }
  };
}
function create_default_slot$d(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*open*/
    ctx[1] && create_if_block$k(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*open*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*open*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$k(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment$s(ctx) {
  let button;
  let t0;
  let t1;
  let portal;
  let current;
  let mounted;
  let dispose;
  portal = new Portal({
    props: {
      $$slots: { default: [create_default_slot$d] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      button = element("button");
      t0 = text(" ");
      t1 = space();
      create_component(portal.$$.fragment);
      this.h();
    },
    l(nodes) {
      button = claim_element(nodes, "BUTTON", { style: true, class: true });
      var button_nodes = children(button);
      t0 = claim_text(button_nodes, " ");
      button_nodes.forEach(detach);
      t1 = claim_space(nodes);
      claim_component(portal.$$.fragment, nodes);
      this.h();
    },
    h() {
      set_style(
        button,
        "background-color",
        /*value*/
        ctx[0]
      );
      set_style(
        button,
        "opacity",
        /*alpha*/
        ctx[2] * 100
      );
      attr(button, "class", "w-10 h-10 rounded-md border-solid");
      toggle_class(
        button,
        "border-border",
        /*value*/
        ctx[0] === void 0
      );
      toggle_class(
        button,
        "border-2",
        /*value*/
        ctx[0] === void 0
      );
    },
    m(target, anchor) {
      insert_hydration(target, button, anchor);
      append_hydration(button, t0);
      insert_hydration(target, t1, anchor);
      mount_component(portal, target, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[7]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*value*/
      1) {
        set_style(
          button,
          "background-color",
          /*value*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*alpha*/
      4) {
        set_style(
          button,
          "opacity",
          /*alpha*/
          ctx2[2] * 100
        );
      }
      if (!current || dirty & /*value, undefined*/
      1) {
        toggle_class(
          button,
          "border-border",
          /*value*/
          ctx2[0] === void 0
        );
      }
      if (!current || dirty & /*value, undefined*/
      1) {
        toggle_class(
          button,
          "border-2",
          /*value*/
          ctx2[0] === void 0
        );
      }
      const portal_changes = {};
      if (dirty & /*$$scope, open, names, alpha*/
      1048590) {
        portal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      portal.$set(portal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(portal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(portal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t1);
      }
      destroy_component(portal, detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance$q($$self, $$props, $$invalidate) {
  let names2;
  let { value } = $$props;
  let { mode = "rgb" } = $$props;
  let open = false;
  let alpha2 = 1;
  function onValue(_value) {
    if (_value !== void 0) {
      if (mode === "rgba") {
        var result = /^rgba\((.+),(.+),(.+),(.+)\)$/i.exec(_value);
        const r = parseInt(result[1]);
        const g = parseInt(result[2]);
        const b2 = parseInt(result[3]);
        const a3 = parseFloat(result[4]);
        "#" + r.toString(16) + g.toString(16) + b2.toString(16);
        $$invalidate(2, alpha2 = a3);
      }
    } else {
      $$invalidate(2, alpha2 = 1);
    }
  }
  function getColors(name) {
    return TailwindColors[name];
  }
  function selectColor(color2) {
    if (mode === "rgb") {
      $$invalidate(0, value = color2);
    } else {
      const r = parseInt(color2.slice(1, 3), 16);
      const g = parseInt(color2.slice(3, 5), 16);
      const b2 = parseInt(color2.slice(5, 7), 16);
      $$invalidate(0, value = "rgba(" + r + "," + g + "," + b2 + "," + alpha2 + ")");
    }
    $$invalidate(1, open = false);
  }
  const click_handler = () => $$invalidate(1, open = true);
  const click_handler_1 = () => $$invalidate(1, open = false);
  function input_change_input_handler() {
    alpha2 = to_number(this.value);
    $$invalidate(2, alpha2);
  }
  const click_handler_2 = (color2) => selectColor(color2);
  const func = () => $$invalidate(1, open = false);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("mode" in $$props2)
      $$invalidate(6, mode = $$props2.mode);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value*/
    1) {
      onValue(value);
    }
  };
  $$invalidate(3, names2 = Object.keys(TailwindColors));
  return [
    value,
    open,
    alpha2,
    names2,
    getColors,
    selectColor,
    mode,
    click_handler,
    click_handler_1,
    input_change_input_handler,
    click_handler_2,
    func
  ];
}
class ColorPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$q, create_fragment$s, safe_not_equal, { value: 0, mode: 6 });
  }
}
function create_else_block$a(ctx) {
  let input;
  let current;
  input = new Input({
    props: {
      name: "value",
      value: "base",
      readonly: true
    }
  });
  return {
    c() {
      create_component(input.$$.fragment);
    },
    l(nodes) {
      claim_component(input.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(input, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(input, detaching);
    }
  };
}
function create_if_block$j(ctx) {
  let input;
  let updating_value;
  let current;
  function input_value_binding(value) {
    ctx[10](value);
  }
  let input_props = {
    name: "value",
    error: (
      /*error*/
      ctx[4]
    ),
    class: "mt-0"
  };
  if (
    /*_value*/
    ctx[3] !== void 0
  ) {
    input_props.value = /*_value*/
    ctx[3];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  return {
    c() {
      create_component(input.$$.fragment);
    },
    l(nodes) {
      claim_component(input.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(input, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (dirty & /*error*/
      16)
        input_changes.error = /*error*/
        ctx2[4];
      if (!updating_value && dirty & /*_value*/
      8) {
        updating_value = true;
        input_changes.value = /*_value*/
        ctx2[3];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(input, detaching);
    }
  };
}
function create_fragment$r(ctx) {
  let div;
  let colorpicker;
  let updating_value;
  let t2;
  let current_block_type_index;
  let if_block;
  let current;
  function colorpicker_value_binding(value) {
    ctx[9](value);
  }
  let colorpicker_props = { mode: (
    /*colorMode*/
    ctx[0]
  ) };
  if (
    /*_color*/
    ctx[2] !== void 0
  ) {
    colorpicker_props.value = /*_color*/
    ctx[2];
  }
  colorpicker = new ColorPicker({ props: colorpicker_props });
  binding_callbacks.push(() => bind(colorpicker, "value", colorpicker_value_binding));
  const if_block_creators = [create_if_block$j, create_else_block$a];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!/*base*/
    ctx2[1])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      create_component(colorpicker.$$.fragment);
      t2 = space();
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(colorpicker.$$.fragment, div_nodes);
      t2 = claim_space(div_nodes);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex flex-row justify-between my-2 flex-grow mr-2 h-11 items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(colorpicker, div, null);
      append_hydration(div, t2);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const colorpicker_changes = {};
      if (dirty & /*colorMode*/
      1)
        colorpicker_changes.mode = /*colorMode*/
        ctx2[0];
      if (!updating_value && dirty & /*_color*/
      4) {
        updating_value = true;
        colorpicker_changes.value = /*_color*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      colorpicker.$set(colorpicker_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(colorpicker.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(colorpicker.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(colorpicker);
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$p($$self, $$props, $$invalidate) {
  let { color: color2 } = $$props;
  let { value } = $$props;
  let { colorMode } = $$props;
  let { base: base2 } = $$props;
  let { min } = $$props;
  let { max } = $$props;
  let _color;
  let _value;
  let error = void 0;
  const dispatch = createEventDispatcher();
  function onChanges(c2, v) {
    if (c2 !== _color)
      $$invalidate(2, _color = c2);
    if (v.toString() !== _value)
      $$invalidate(3, _value = v.toString());
  }
  function onColor(c2) {
    dispatch("color", c2);
  }
  function onValue(v) {
    const num = Number.parseFloat(v);
    if (Number.isNaN(num)) {
      $$invalidate(4, error = v + " is not a valid number");
    } else if (num < min) {
      $$invalidate(4, error = "Must be greater than " + min);
    } else if (num > max) {
      $$invalidate(4, error = "Must be less or equal to " + max);
    } else {
      $$invalidate(4, error = void 0);
      dispatch("value", num);
    }
  }
  function colorpicker_value_binding(value2) {
    _color = value2;
    $$invalidate(2, _color);
  }
  function input_value_binding(value2) {
    _value = value2;
    $$invalidate(3, _value);
  }
  $$self.$$set = ($$props2) => {
    if ("color" in $$props2)
      $$invalidate(5, color2 = $$props2.color);
    if ("value" in $$props2)
      $$invalidate(6, value = $$props2.value);
    if ("colorMode" in $$props2)
      $$invalidate(0, colorMode = $$props2.colorMode);
    if ("base" in $$props2)
      $$invalidate(1, base2 = $$props2.base);
    if ("min" in $$props2)
      $$invalidate(7, min = $$props2.min);
    if ("max" in $$props2)
      $$invalidate(8, max = $$props2.max);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*color, value*/
    96) {
      onChanges(color2, value);
    }
    if ($$self.$$.dirty & /*_color*/
    4) {
      onColor(_color);
    }
    if ($$self.$$.dirty & /*_value*/
    8) {
      onValue(_value);
    }
  };
  return [
    colorMode,
    base2,
    _color,
    _value,
    error,
    color2,
    value,
    min,
    max,
    colorpicker_value_binding,
    input_value_binding
  ];
}
class ThresholdLineEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$p, create_fragment$r, safe_not_equal, {
      color: 5,
      value: 6,
      colorMode: 0,
      base: 1,
      min: 7,
      max: 8
    });
  }
}
function get_each_context$c(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i2];
  child_ctx[16] = i2;
  return child_ctx;
}
function create_else_block$9(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "w-8 h-8");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block$i(ctx) {
  let iconbutton;
  let current;
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[12](
        /*threshold*/
        ctx[14]
      )
    );
  }
  iconbutton = new IconButton({ props: { data: mdiDelete } });
  iconbutton.$on("click", click_handler_1);
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    l(nodes) {
      claim_component(iconbutton.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_each_block$c(key_1, ctx) {
  let div;
  let thresholdlineeditor;
  let t0;
  let current_block_type_index;
  let if_block;
  let t1;
  let current;
  function value_handler(...args) {
    return (
      /*value_handler*/
      ctx[10](
        /*threshold*/
        ctx[14],
        ...args
      )
    );
  }
  function color_handler(...args) {
    return (
      /*color_handler*/
      ctx[11](
        /*threshold*/
        ctx[14],
        ...args
      )
    );
  }
  thresholdlineeditor = new ThresholdLineEditor({
    props: {
      value: (
        /*threshold*/
        ctx[14].value
      ),
      color: (
        /*threshold*/
        ctx[14].color
      ),
      colorMode: (
        /*colorMode*/
        ctx[0]
      ),
      min: (
        /*min*/
        ctx[1]
      ),
      max: (
        /*max*/
        ctx[2]
      ),
      base: (
        /*i*/
        ctx[16] === /*sorted*/
        ctx[3].length - 1
      )
    }
  });
  thresholdlineeditor.$on("value", value_handler);
  thresholdlineeditor.$on("color", color_handler);
  const if_block_creators = [create_if_block$i, create_else_block$9];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*i*/
      ctx2[16] !== /*sorted*/
      ctx2[3].length - 1
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    key: key_1,
    first: null,
    c() {
      div = element("div");
      create_component(thresholdlineeditor.$$.fragment);
      t0 = space();
      if_block.c();
      t1 = space();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(thresholdlineeditor.$$.fragment, div_nodes);
      t0 = claim_space(div_nodes);
      if_block.l(div_nodes);
      t1 = claim_space(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex flex-row justify-between items-center my-2");
      this.first = div;
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(thresholdlineeditor, div, null);
      append_hydration(div, t0);
      if_blocks[current_block_type_index].m(div, null);
      append_hydration(div, t1);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const thresholdlineeditor_changes = {};
      if (dirty & /*sorted*/
      8)
        thresholdlineeditor_changes.value = /*threshold*/
        ctx[14].value;
      if (dirty & /*sorted*/
      8)
        thresholdlineeditor_changes.color = /*threshold*/
        ctx[14].color;
      if (dirty & /*colorMode*/
      1)
        thresholdlineeditor_changes.colorMode = /*colorMode*/
        ctx[0];
      if (dirty & /*min*/
      2)
        thresholdlineeditor_changes.min = /*min*/
        ctx[1];
      if (dirty & /*max*/
      4)
        thresholdlineeditor_changes.max = /*max*/
        ctx[2];
      if (dirty & /*sorted*/
      8)
        thresholdlineeditor_changes.base = /*i*/
        ctx[16] === /*sorted*/
        ctx[3].length - 1;
      thresholdlineeditor.$set(thresholdlineeditor_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, t1);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(thresholdlineeditor.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(thresholdlineeditor.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(thresholdlineeditor);
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_fragment$q(ctx) {
  let div;
  let iconbutton;
  let t0;
  let span;
  let textContent = "Add threshold";
  let t2;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  iconbutton = new IconButton({ props: { data: mdiPlus } });
  iconbutton.$on(
    "click",
    /*click_handler*/
    ctx[9]
  );
  let each_value = ensure_array_like(
    /*sorted*/
    ctx[3]
  );
  const get_key = (ctx2) => (
    /*threshold*/
    ctx2[14].id
  );
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$c(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$c(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      create_component(iconbutton.$$.fragment);
      t0 = space();
      span = element("span");
      span.textContent = textContent;
      t2 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(iconbutton.$$.fragment, div_nodes);
      t0 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-j834yi")
        span.textContent = textContent;
      div_nodes.forEach(detach);
      t2 = claim_space(nodes);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "class", "flex flex-row justify-between items-center my-2");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(iconbutton, div, null);
      append_hydration(div, t0);
      append_hydration(div, span);
      insert_hydration(target, t2, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*remove, sorted, colorMode, min, max, setValue, setColor*/
      191) {
        each_value = ensure_array_like(
          /*sorted*/
          ctx2[3]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$c, each_1_anchor, get_each_context$c);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
        detach(each_1_anchor);
      }
      destroy_component(iconbutton);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d(detaching);
      }
    }
  };
}
function instance$o($$self, $$props, $$invalidate) {
  let sorted;
  let { thresholds } = $$props;
  let { colorMode } = $$props;
  let { min = Number.MIN_SAFE_INTEGER } = $$props;
  let { max = Number.MAX_SAFE_INTEGER } = $$props;
  function setColor(threshold, color2) {
    let copy = [...sorted];
    const index2 = copy.findIndex((t2) => t2.id === threshold.id);
    copy[index2] = { ...threshold, color: color2 };
    $$invalidate(8, thresholds = copy);
  }
  function setValue(threshold, value) {
    let copy = [...sorted];
    const index2 = copy.findIndex((t2) => t2.id === threshold.id);
    copy[index2] = { ...threshold, value };
    $$invalidate(8, thresholds = copy);
  }
  function add() {
    let value = 0;
    const first = sorted[0];
    if (first.value !== min) {
      value = first.value;
    }
    const threshold = {
      id: v4(),
      color: colorMode + "(255,255,255" + (colorMode === "rgba" ? ",1" : "") + ")",
      value: value + 1
    };
    $$invalidate(8, thresholds = [threshold, ...sorted]);
  }
  function remove(threshold) {
    $$invalidate(8, thresholds = thresholds == null ? void 0 : thresholds.filter((t2) => t2.id !== threshold.id));
  }
  function createBase() {
    const threshold = {
      id: v4(),
      color: colorMode + "(255,255,255" + (colorMode === "rgba" ? ",1" : "") + ")",
      value: min
    };
    $$invalidate(8, thresholds = [threshold]);
    return thresholds;
  }
  const click_handler = () => add();
  const value_handler = (threshold, e2) => setValue(threshold, e2.detail);
  const color_handler = (threshold, e2) => setColor(threshold, e2.detail);
  const click_handler_1 = (threshold) => remove(threshold);
  $$self.$$set = ($$props2) => {
    if ("thresholds" in $$props2)
      $$invalidate(8, thresholds = $$props2.thresholds);
    if ("colorMode" in $$props2)
      $$invalidate(0, colorMode = $$props2.colorMode);
    if ("min" in $$props2)
      $$invalidate(1, min = $$props2.min);
    if ("max" in $$props2)
      $$invalidate(2, max = $$props2.max);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*thresholds*/
    256) {
      $$invalidate(3, sorted = (thresholds ?? createBase()).sort((a3, b2) => {
        if (a3.value === b2.value)
          return 0;
        if (a3.value > b2.value)
          return -1;
        return 1;
      }));
    }
  };
  return [
    colorMode,
    min,
    max,
    sorted,
    setColor,
    setValue,
    add,
    remove,
    thresholds,
    click_handler,
    value_handler,
    color_handler,
    click_handler_1
  ];
}
class ThresholdEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$o, create_fragment$q, safe_not_equal, {
      thresholds: 8,
      colorMode: 0,
      min: 1,
      max: 2
    });
  }
}
function get_each_context_1$5(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[41] = list[i2];
  return child_ctx;
}
function get_each_context$b(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[41] = list[i2];
  return child_ctx;
}
function create_if_block$h(ctx) {
  let input;
  let updating_value;
  let t2;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  function input_value_binding(value) {
    ctx[21](value);
  }
  let input_props = {
    name: "title",
    placeholder: (
      /*variable*/
      ctx[14].name
    ),
    class: "mt-2"
  };
  if (
    /*title*/
    ctx[1] !== void 0
  ) {
    input_props.value = /*title*/
    ctx[1];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  const if_block_creators = [create_if_block_1$d, create_if_block_2$9];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*variable*/
      ctx2[14].type === "boolean"
    )
      return 0;
    if (
      /*variable*/
      ctx2[14].type === "number"
    )
      return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      create_component(input.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      claim_component(input.$$.fragment, nodes);
      t2 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(input, target, anchor);
      insert_hydration(target, t2, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (dirty[0] & /*variable*/
      16384)
        input_changes.placeholder = /*variable*/
        ctx2[14].name;
      if (!updating_value && dirty[0] & /*title*/
      2) {
        updating_value = true;
        input_changes.value = /*title*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(if_block_anchor);
      }
      destroy_component(input, detaching);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
}
function create_if_block_2$9(ctx) {
  let div0;
  let select;
  let updating_value;
  let t0;
  let div1;
  let inputnumber0;
  let updating_value_1;
  let t1;
  let div2;
  let inputnumber1;
  let updating_value_2;
  let t2;
  let div3;
  let inputnumber2;
  let updating_value_3;
  let t3;
  let div4;
  let input;
  let updating_value_4;
  let current;
  function select_value_binding_1(value) {
    ctx[29](value);
  }
  let select_props = {
    placeholder: "Variant",
    name: "variant",
    $$slots: { options: [create_options_slot_1$3] },
    $$scope: { ctx }
  };
  if (
    /*numberVariant*/
    ctx[9] !== void 0
  ) {
    select_props.value = /*numberVariant*/
    ctx[9];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding_1));
  function inputnumber0_value_binding(value) {
    ctx[30](value);
  }
  let inputnumber0_props = { name: "min", placeholder: "Min" };
  if (
    /*numberMin*/
    ctx[10] !== void 0
  ) {
    inputnumber0_props.value = /*numberMin*/
    ctx[10];
  }
  inputnumber0 = new InputNumber({ props: inputnumber0_props });
  binding_callbacks.push(() => bind(inputnumber0, "value", inputnumber0_value_binding));
  function inputnumber1_value_binding(value) {
    ctx[31](value);
  }
  let inputnumber1_props = { name: "max", placeholder: "Max" };
  if (
    /*numberMax*/
    ctx[11] !== void 0
  ) {
    inputnumber1_props.value = /*numberMax*/
    ctx[11];
  }
  inputnumber1 = new InputNumber({ props: inputnumber1_props });
  binding_callbacks.push(() => bind(inputnumber1, "value", inputnumber1_value_binding));
  function inputnumber2_value_binding(value) {
    ctx[32](value);
  }
  let inputnumber2_props = { name: "step", placeholder: "Step" };
  if (
    /*numberStep*/
    ctx[12] !== void 0
  ) {
    inputnumber2_props.value = /*numberStep*/
    ctx[12];
  }
  inputnumber2 = new InputNumber({ props: inputnumber2_props });
  binding_callbacks.push(() => bind(inputnumber2, "value", inputnumber2_value_binding));
  function input_value_binding_1(value) {
    ctx[33](value);
  }
  let input_props = { name: "unit", placeholder: "Unit" };
  if (
    /*numberUnit*/
    ctx[13] !== void 0
  ) {
    input_props.value = /*numberUnit*/
    ctx[13];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding_1));
  return {
    c() {
      div0 = element("div");
      create_component(select.$$.fragment);
      t0 = space();
      div1 = element("div");
      create_component(inputnumber0.$$.fragment);
      t1 = space();
      div2 = element("div");
      create_component(inputnumber1.$$.fragment);
      t2 = space();
      div3 = element("div");
      create_component(inputnumber2.$$.fragment);
      t3 = space();
      div4 = element("div");
      create_component(input.$$.fragment);
      this.h();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(select.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      claim_component(inputnumber0.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      claim_component(inputnumber1.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t2 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      claim_component(inputnumber2.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      t3 = claim_space(nodes);
      div4 = claim_element(nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      claim_component(input.$$.fragment, div4_nodes);
      div4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mt-1");
      attr(div1, "class", "mt-1");
      attr(div2, "class", "mt-1");
      attr(div3, "class", "mt-1");
      attr(div4, "class", "mt-1");
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(select, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div1, anchor);
      mount_component(inputnumber0, div1, null);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(inputnumber1, div2, null);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, div3, anchor);
      mount_component(inputnumber2, div3, null);
      insert_hydration(target, t3, anchor);
      insert_hydration(target, div4, anchor);
      mount_component(input, div4, null);
      current = true;
    },
    p(ctx2, dirty) {
      const select_changes = {};
      if (dirty[1] & /*$$scope*/
      32768) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty[0] & /*numberVariant*/
      512) {
        updating_value = true;
        select_changes.value = /*numberVariant*/
        ctx2[9];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
      const inputnumber0_changes = {};
      if (!updating_value_1 && dirty[0] & /*numberMin*/
      1024) {
        updating_value_1 = true;
        inputnumber0_changes.value = /*numberMin*/
        ctx2[10];
        add_flush_callback(() => updating_value_1 = false);
      }
      inputnumber0.$set(inputnumber0_changes);
      const inputnumber1_changes = {};
      if (!updating_value_2 && dirty[0] & /*numberMax*/
      2048) {
        updating_value_2 = true;
        inputnumber1_changes.value = /*numberMax*/
        ctx2[11];
        add_flush_callback(() => updating_value_2 = false);
      }
      inputnumber1.$set(inputnumber1_changes);
      const inputnumber2_changes = {};
      if (!updating_value_3 && dirty[0] & /*numberStep*/
      4096) {
        updating_value_3 = true;
        inputnumber2_changes.value = /*numberStep*/
        ctx2[12];
        add_flush_callback(() => updating_value_3 = false);
      }
      inputnumber2.$set(inputnumber2_changes);
      const input_changes = {};
      if (!updating_value_4 && dirty[0] & /*numberUnit*/
      8192) {
        updating_value_4 = true;
        input_changes.value = /*numberUnit*/
        ctx2[13];
        add_flush_callback(() => updating_value_4 = false);
      }
      input.$set(input_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      transition_in(inputnumber0.$$.fragment, local);
      transition_in(inputnumber1.$$.fragment, local);
      transition_in(inputnumber2.$$.fragment, local);
      transition_in(input.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      transition_out(inputnumber0.$$.fragment, local);
      transition_out(inputnumber1.$$.fragment, local);
      transition_out(inputnumber2.$$.fragment, local);
      transition_out(input.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(div1);
        detach(t1);
        detach(div2);
        detach(t2);
        detach(div3);
        detach(t3);
        detach(div4);
      }
      destroy_component(select);
      destroy_component(inputnumber0);
      destroy_component(inputnumber1);
      destroy_component(inputnumber2);
      destroy_component(input);
    }
  };
}
function create_if_block_1$d(ctx) {
  let div0;
  let select;
  let updating_value;
  let t0;
  let div1;
  let iconpicker0;
  let updating_iconId;
  let t1;
  let div2;
  let iconpicker1;
  let updating_iconId_1;
  let t2;
  let div3;
  let iconpicker2;
  let updating_iconId_2;
  let t3;
  let div4;
  let colorpicker0;
  let updating_value_1;
  let t4;
  let span0;
  let textContent = "Default color";
  let t6;
  let div5;
  let colorpicker1;
  let updating_value_2;
  let t7;
  let span1;
  let textContent_1 = "True color";
  let t9;
  let div6;
  let colorpicker2;
  let updating_value_3;
  let t10;
  let span2;
  let textContent_2 = "False color";
  let current;
  function select_value_binding(value) {
    ctx[22](value);
  }
  let select_props = {
    placeholder: "Variant",
    name: "variant",
    $$slots: { options: [create_options_slot$5] },
    $$scope: { ctx }
  };
  if (
    /*booleanVariant*/
    ctx[2] !== void 0
  ) {
    select_props.value = /*booleanVariant*/
    ctx[2];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  function iconpicker0_iconId_binding(value) {
    ctx[23](value);
  }
  let iconpicker0_props = { placeholder: "Default icon" };
  if (
    /*booleanIconId*/
    ctx[3] !== void 0
  ) {
    iconpicker0_props.iconId = /*booleanIconId*/
    ctx[3];
  }
  iconpicker0 = new IconPicker({ props: iconpicker0_props });
  binding_callbacks.push(() => bind(iconpicker0, "iconId", iconpicker0_iconId_binding));
  function iconpicker1_iconId_binding(value) {
    ctx[24](value);
  }
  let iconpicker1_props = { placeholder: "True icon" };
  if (
    /*booleanIconTrueId*/
    ctx[4] !== void 0
  ) {
    iconpicker1_props.iconId = /*booleanIconTrueId*/
    ctx[4];
  }
  iconpicker1 = new IconPicker({ props: iconpicker1_props });
  binding_callbacks.push(() => bind(iconpicker1, "iconId", iconpicker1_iconId_binding));
  function iconpicker2_iconId_binding(value) {
    ctx[25](value);
  }
  let iconpicker2_props = { placeholder: "False icon" };
  if (
    /*booleanIconFalseId*/
    ctx[5] !== void 0
  ) {
    iconpicker2_props.iconId = /*booleanIconFalseId*/
    ctx[5];
  }
  iconpicker2 = new IconPicker({ props: iconpicker2_props });
  binding_callbacks.push(() => bind(iconpicker2, "iconId", iconpicker2_iconId_binding));
  function colorpicker0_value_binding(value) {
    ctx[26](value);
  }
  let colorpicker0_props = { mode: "rgba" };
  if (
    /*booleanColor*/
    ctx[6] !== void 0
  ) {
    colorpicker0_props.value = /*booleanColor*/
    ctx[6];
  }
  colorpicker0 = new ColorPicker({ props: colorpicker0_props });
  binding_callbacks.push(() => bind(colorpicker0, "value", colorpicker0_value_binding));
  function colorpicker1_value_binding(value) {
    ctx[27](value);
  }
  let colorpicker1_props = { mode: "rgba" };
  if (
    /*booleanColorTrue*/
    ctx[7] !== void 0
  ) {
    colorpicker1_props.value = /*booleanColorTrue*/
    ctx[7];
  }
  colorpicker1 = new ColorPicker({ props: colorpicker1_props });
  binding_callbacks.push(() => bind(colorpicker1, "value", colorpicker1_value_binding));
  function colorpicker2_value_binding(value) {
    ctx[28](value);
  }
  let colorpicker2_props = { mode: "rgba" };
  if (
    /*booleanColorFalse*/
    ctx[8] !== void 0
  ) {
    colorpicker2_props.value = /*booleanColorFalse*/
    ctx[8];
  }
  colorpicker2 = new ColorPicker({ props: colorpicker2_props });
  binding_callbacks.push(() => bind(colorpicker2, "value", colorpicker2_value_binding));
  return {
    c() {
      div0 = element("div");
      create_component(select.$$.fragment);
      t0 = space();
      div1 = element("div");
      create_component(iconpicker0.$$.fragment);
      t1 = space();
      div2 = element("div");
      create_component(iconpicker1.$$.fragment);
      t2 = space();
      div3 = element("div");
      create_component(iconpicker2.$$.fragment);
      t3 = space();
      div4 = element("div");
      create_component(colorpicker0.$$.fragment);
      t4 = space();
      span0 = element("span");
      span0.textContent = textContent;
      t6 = space();
      div5 = element("div");
      create_component(colorpicker1.$$.fragment);
      t7 = space();
      span1 = element("span");
      span1.textContent = textContent_1;
      t9 = space();
      div6 = element("div");
      create_component(colorpicker2.$$.fragment);
      t10 = space();
      span2 = element("span");
      span2.textContent = textContent_2;
      this.h();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(select.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      claim_component(iconpicker0.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      claim_component(iconpicker1.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t2 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      claim_component(iconpicker2.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      t3 = claim_space(nodes);
      div4 = claim_element(nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      claim_component(colorpicker0.$$.fragment, div4_nodes);
      t4 = claim_space(div4_nodes);
      span0 = claim_element(div4_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span0) !== "svelte-ggqmuo")
        span0.textContent = textContent;
      div4_nodes.forEach(detach);
      t6 = claim_space(nodes);
      div5 = claim_element(nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      claim_component(colorpicker1.$$.fragment, div5_nodes);
      t7 = claim_space(div5_nodes);
      span1 = claim_element(div5_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span1) !== "svelte-1pdc09d")
        span1.textContent = textContent_1;
      div5_nodes.forEach(detach);
      t9 = claim_space(nodes);
      div6 = claim_element(nodes, "DIV", { class: true });
      var div6_nodes = children(div6);
      claim_component(colorpicker2.$$.fragment, div6_nodes);
      t10 = claim_space(div6_nodes);
      span2 = claim_element(div6_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span2) !== "svelte-14kosby")
        span2.textContent = textContent_2;
      div6_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "mt-1");
      attr(div1, "class", "mt-1");
      attr(div2, "class", "mt-1");
      attr(div3, "class", "mt-1");
      attr(div4, "class", "mt-1");
      attr(div5, "class", "mt-1");
      attr(div6, "class", "mt-1");
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(select, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div1, anchor);
      mount_component(iconpicker0, div1, null);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(iconpicker1, div2, null);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, div3, anchor);
      mount_component(iconpicker2, div3, null);
      insert_hydration(target, t3, anchor);
      insert_hydration(target, div4, anchor);
      mount_component(colorpicker0, div4, null);
      append_hydration(div4, t4);
      append_hydration(div4, span0);
      insert_hydration(target, t6, anchor);
      insert_hydration(target, div5, anchor);
      mount_component(colorpicker1, div5, null);
      append_hydration(div5, t7);
      append_hydration(div5, span1);
      insert_hydration(target, t9, anchor);
      insert_hydration(target, div6, anchor);
      mount_component(colorpicker2, div6, null);
      append_hydration(div6, t10);
      append_hydration(div6, span2);
      current = true;
    },
    p(ctx2, dirty) {
      const select_changes = {};
      if (dirty[1] & /*$$scope*/
      32768) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty[0] & /*booleanVariant*/
      4) {
        updating_value = true;
        select_changes.value = /*booleanVariant*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
      const iconpicker0_changes = {};
      if (!updating_iconId && dirty[0] & /*booleanIconId*/
      8) {
        updating_iconId = true;
        iconpicker0_changes.iconId = /*booleanIconId*/
        ctx2[3];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker0.$set(iconpicker0_changes);
      const iconpicker1_changes = {};
      if (!updating_iconId_1 && dirty[0] & /*booleanIconTrueId*/
      16) {
        updating_iconId_1 = true;
        iconpicker1_changes.iconId = /*booleanIconTrueId*/
        ctx2[4];
        add_flush_callback(() => updating_iconId_1 = false);
      }
      iconpicker1.$set(iconpicker1_changes);
      const iconpicker2_changes = {};
      if (!updating_iconId_2 && dirty[0] & /*booleanIconFalseId*/
      32) {
        updating_iconId_2 = true;
        iconpicker2_changes.iconId = /*booleanIconFalseId*/
        ctx2[5];
        add_flush_callback(() => updating_iconId_2 = false);
      }
      iconpicker2.$set(iconpicker2_changes);
      const colorpicker0_changes = {};
      if (!updating_value_1 && dirty[0] & /*booleanColor*/
      64) {
        updating_value_1 = true;
        colorpicker0_changes.value = /*booleanColor*/
        ctx2[6];
        add_flush_callback(() => updating_value_1 = false);
      }
      colorpicker0.$set(colorpicker0_changes);
      const colorpicker1_changes = {};
      if (!updating_value_2 && dirty[0] & /*booleanColorTrue*/
      128) {
        updating_value_2 = true;
        colorpicker1_changes.value = /*booleanColorTrue*/
        ctx2[7];
        add_flush_callback(() => updating_value_2 = false);
      }
      colorpicker1.$set(colorpicker1_changes);
      const colorpicker2_changes = {};
      if (!updating_value_3 && dirty[0] & /*booleanColorFalse*/
      256) {
        updating_value_3 = true;
        colorpicker2_changes.value = /*booleanColorFalse*/
        ctx2[8];
        add_flush_callback(() => updating_value_3 = false);
      }
      colorpicker2.$set(colorpicker2_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      transition_in(iconpicker0.$$.fragment, local);
      transition_in(iconpicker1.$$.fragment, local);
      transition_in(iconpicker2.$$.fragment, local);
      transition_in(colorpicker0.$$.fragment, local);
      transition_in(colorpicker1.$$.fragment, local);
      transition_in(colorpicker2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      transition_out(iconpicker0.$$.fragment, local);
      transition_out(iconpicker1.$$.fragment, local);
      transition_out(iconpicker2.$$.fragment, local);
      transition_out(colorpicker0.$$.fragment, local);
      transition_out(colorpicker1.$$.fragment, local);
      transition_out(colorpicker2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(div1);
        detach(t1);
        detach(div2);
        detach(t2);
        detach(div3);
        detach(t3);
        detach(div4);
        detach(t6);
        detach(div5);
        detach(t9);
        detach(div6);
      }
      destroy_component(select);
      destroy_component(iconpicker0);
      destroy_component(iconpicker1);
      destroy_component(iconpicker2);
      destroy_component(colorpicker0);
      destroy_component(colorpicker1);
      destroy_component(colorpicker2);
    }
  };
}
function create_each_block_1$5(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[41]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot_1$8(ctx) {
  let each_1_anchor;
  let current;
  let each_value_1 = ensure_array_like(
    /*numberVariants*/
    ctx[16]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1$5(get_each_context_1$5(ctx, each_value_1, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*numberVariants*/
      65536) {
        each_value_1 = ensure_array_like(
          /*numberVariants*/
          ctx2[16]
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$5(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_1$5(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot_1$3(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      class: "max-h-96 overflow-auto",
      $$slots: { default: [create_default_slot_1$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty[1] & /*$$scope*/
      32768) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_each_block$b(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[41]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot$c(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*booleanVariants*/
    ctx[15]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$b(get_each_context$b(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*booleanVariants*/
      32768) {
        each_value = ensure_array_like(
          /*booleanVariants*/
          ctx2[15]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$b(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$b(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot$5(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      class: "max-h-96 overflow-auto",
      $$slots: { default: [create_default_slot$c] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty[1] & /*$$scope*/
      32768) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_fragment$p(ctx) {
  let div;
  let variablepicker;
  let updating_variableId;
  let t2;
  let if_block_anchor;
  let current;
  function variablepicker_variableId_binding(value) {
    ctx[19](value);
  }
  let variablepicker_props = {};
  if (
    /*variableId*/
    ctx[0] !== void 0
  ) {
    variablepicker_props.variableId = /*variableId*/
    ctx[0];
  }
  variablepicker = new VariablePicker({ props: variablepicker_props });
  binding_callbacks.push(() => bind(variablepicker, "variableId", variablepicker_variableId_binding));
  variablepicker.$on(
    "variable",
    /*variable_handler*/
    ctx[20]
  );
  let if_block = (
    /*variable*/
    ctx[14] && create_if_block$h(ctx)
  );
  return {
    c() {
      div = element("div");
      create_component(variablepicker.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(variablepicker.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      t2 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "class", "mt-2");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(variablepicker, div, null);
      insert_hydration(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const variablepicker_changes = {};
      if (!updating_variableId && dirty[0] & /*variableId*/
      1) {
        updating_variableId = true;
        variablepicker_changes.variableId = /*variableId*/
        ctx2[0];
        add_flush_callback(() => updating_variableId = false);
      }
      variablepicker.$set(variablepicker_changes);
      if (
        /*variable*/
        ctx2[14]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*variable*/
          16384) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$h(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(variablepicker.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(variablepicker.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
        detach(if_block_anchor);
      }
      destroy_component(variablepicker);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$n($$self, $$props, $$invalidate) {
  let $variables;
  component_subscribe($$self, variables, ($$value) => $$invalidate(34, $variables = $$value));
  const booleanVariants = [
    { value: "toggle", label: "Toggle" },
    {
      value: "icon-button",
      label: "Icon button"
    },
    {
      value: "icon-group-horizontal",
      label: "Icon group horizontal"
    },
    {
      value: "icon-group-vertical",
      label: "Icon group vertical"
    }
  ];
  const numberVariants = [{ value: "slider", label: "Slider" }, { value: "input", label: "Input" }];
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let variableId;
  let title;
  let booleanVariant;
  let booleanIconId;
  let booleanIconTrueId;
  let booleanIconFalseId;
  let booleanColor;
  let booleanColorTrue;
  let booleanColorFalse;
  let numberVariant;
  let numberMin;
  let numberMax;
  let numberStep;
  let numberUnit;
  let numberThresholds;
  let variable;
  function onSettings(s3) {
    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k;
    $$invalidate(0, variableId = s3 == null ? void 0 : s3.variableId);
    $$invalidate(1, title = s3 == null ? void 0 : s3.title);
    $$invalidate(2, booleanVariant = booleanVariants.find((v) => {
      var _a3;
      return v.value === (((_a3 = s3.boolean) == null ? void 0 : _a3.variant) ?? "toggle");
    }));
    $$invalidate(3, booleanIconId = (_a2 = s3.boolean) == null ? void 0 : _a2.iconId);
    $$invalidate(4, booleanIconTrueId = (_b2 = s3.boolean) == null ? void 0 : _b2.iconTrueId);
    $$invalidate(5, booleanIconFalseId = (_c = s3.boolean) == null ? void 0 : _c.iconFalseId);
    $$invalidate(6, booleanColor = (_d = s3.boolean) == null ? void 0 : _d.color);
    $$invalidate(7, booleanColorTrue = (_e = s3.boolean) == null ? void 0 : _e.colorTrue);
    $$invalidate(8, booleanColorFalse = (_f = s3.boolean) == null ? void 0 : _f.colorFalse);
    $$invalidate(9, numberVariant = numberVariants.find((v) => {
      var _a3;
      return v.value === (((_a3 = s3.number) == null ? void 0 : _a3.variant) ?? "slider");
    }));
    $$invalidate(10, numberMin = (_g = s3.number) == null ? void 0 : _g.min);
    $$invalidate(11, numberMax = (_h = s3.number) == null ? void 0 : _h.max);
    $$invalidate(12, numberStep = (_i = s3.number) == null ? void 0 : _i.step);
    $$invalidate(13, numberUnit = (_j = s3.number) == null ? void 0 : _j.unit);
    $$invalidate(18, numberThresholds = (_k = s3.number) == null ? void 0 : _k.thresholds);
    $$invalidate(14, variable = $variables[variableId ?? ""]);
  }
  function onVariableId(id) {
    if (id !== settings.variableId) {
      dispatch("settings", { ...settings, variableId: id });
    }
  }
  function onTitle(t2) {
    const value = t2 !== void 0 && t2.length > 0 ? t2 : void 0;
    if (value !== settings.title) {
      dispatch("settings", { ...settings, title: value });
    }
  }
  function onBoolean(variant, iconId, iconTrueId, iconFalseId, color2, colorTrue, colorFalse) {
    const boolean = {
      variant: variant.value,
      iconId,
      iconTrueId,
      iconFalseId,
      color: color2,
      colorTrue,
      colorFalse
    };
    if (JSON.stringify(boolean) !== JSON.stringify(settings.boolean)) {
      dispatch("settings", { ...settings, boolean });
    }
  }
  function onNumber(variant, min, max, step, unit, thresholds) {
    const number = {
      variant: variant.value,
      min,
      max,
      step,
      unit,
      thresholds
    };
    if (JSON.stringify(number) !== JSON.stringify(settings.number)) {
      dispatch("settings", { ...settings, number });
    }
  }
  function variablepicker_variableId_binding(value) {
    variableId = value;
    $$invalidate(0, variableId);
  }
  const variable_handler = (e2) => $$invalidate(14, variable = e2.detail);
  function input_value_binding(value) {
    title = value;
    $$invalidate(1, title);
  }
  function select_value_binding(value) {
    booleanVariant = value;
    $$invalidate(2, booleanVariant);
  }
  function iconpicker0_iconId_binding(value) {
    booleanIconId = value;
    $$invalidate(3, booleanIconId);
  }
  function iconpicker1_iconId_binding(value) {
    booleanIconTrueId = value;
    $$invalidate(4, booleanIconTrueId);
  }
  function iconpicker2_iconId_binding(value) {
    booleanIconFalseId = value;
    $$invalidate(5, booleanIconFalseId);
  }
  function colorpicker0_value_binding(value) {
    booleanColor = value;
    $$invalidate(6, booleanColor);
  }
  function colorpicker1_value_binding(value) {
    booleanColorTrue = value;
    $$invalidate(7, booleanColorTrue);
  }
  function colorpicker2_value_binding(value) {
    booleanColorFalse = value;
    $$invalidate(8, booleanColorFalse);
  }
  function select_value_binding_1(value) {
    numberVariant = value;
    $$invalidate(9, numberVariant);
  }
  function inputnumber0_value_binding(value) {
    numberMin = value;
    $$invalidate(10, numberMin);
  }
  function inputnumber1_value_binding(value) {
    numberMax = value;
    $$invalidate(11, numberMax);
  }
  function inputnumber2_value_binding(value) {
    numberStep = value;
    $$invalidate(12, numberStep);
  }
  function input_value_binding_1(value) {
    numberUnit = value;
    $$invalidate(13, numberUnit);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(17, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*settings*/
    131072) {
      onSettings(settings);
    }
    if ($$self.$$.dirty[0] & /*variableId*/
    1) {
      onVariableId(variableId);
    }
    if ($$self.$$.dirty[0] & /*title*/
    2) {
      onTitle(title);
    }
    if ($$self.$$.dirty[0] & /*booleanVariant, booleanIconId, booleanIconTrueId, booleanIconFalseId, booleanColor, booleanColorTrue, booleanColorFalse*/
    508) {
      onBoolean(booleanVariant, booleanIconId, booleanIconTrueId, booleanIconFalseId, booleanColor, booleanColorTrue, booleanColorFalse);
    }
    if ($$self.$$.dirty[0] & /*numberVariant, numberMin, numberMax, numberStep, numberUnit, numberThresholds*/
    278016) {
      onNumber(numberVariant, numberMin, numberMax, numberStep, numberUnit, numberThresholds);
    }
  };
  return [
    variableId,
    title,
    booleanVariant,
    booleanIconId,
    booleanIconTrueId,
    booleanIconFalseId,
    booleanColor,
    booleanColorTrue,
    booleanColorFalse,
    numberVariant,
    numberMin,
    numberMax,
    numberStep,
    numberUnit,
    variable,
    booleanVariants,
    numberVariants,
    settings,
    numberThresholds,
    variablepicker_variableId_binding,
    variable_handler,
    input_value_binding,
    select_value_binding,
    iconpicker0_iconId_binding,
    iconpicker1_iconId_binding,
    iconpicker2_iconId_binding,
    colorpicker0_value_binding,
    colorpicker1_value_binding,
    colorpicker2_value_binding,
    select_value_binding_1,
    inputnumber0_value_binding,
    inputnumber1_value_binding,
    inputnumber2_value_binding,
    input_value_binding_1
  ];
}
class VariableEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$n, create_fragment$p, safe_not_equal, { settings: 17 }, null, [-1, -1]);
  }
}
function create$2() {
  return {
    id: v4(),
    type: "variable",
    version: 2
  };
}
function migrate$3(settings) {
  while (settings.version !== 2) {
    settings = migrateOnce$3(settings);
  }
  return settings;
}
function migrateOnce$3(settings) {
  switch (settings.version) {
    case 2:
      return settings;
    case 1:
    default:
      return migrate_v1_v2$2(settings);
  }
}
function migrate_v1_v2$2(v1) {
  const settings = {
    id: v1.id,
    type: v1.type,
    version: 2,
    variableId: v1.variableId,
    title: v1.title
  };
  if (v1.number) {
    settings.number = {
      min: v1.number.min,
      max: v1.number.max,
      step: v1.number.step,
      unit: v1.number.unit
    };
  }
  if (v1.iconId) {
    settings.boolean = {
      iconId: v1.iconId
    };
  }
  return settings;
}
function get_each_context$a(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i2];
  return child_ctx;
}
function get_each_context_1$4(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i2];
  return child_ctx;
}
function create_each_block_1$4(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[16]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_option_changes = {};
      if (dirty & /*dashboards*/
      8)
        select_options_option_changes.option = /*option*/
        ctx2[16];
      select_options_option.$set(select_options_option_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot_1$7(ctx) {
  let each_1_anchor;
  let current;
  let each_value_1 = ensure_array_like(
    /*dashboards*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboards*/
      8) {
        each_value_1 = ensure_array_like(
          /*dashboards*/
          ctx2[3]
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$4(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_1$4(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot_1$2(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      $$slots: { default: [create_default_slot_1$7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty & /*$$scope, dashboards*/
      2097160) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_each_block$a(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[16]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot$b(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*sizes*/
    ctx[4]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$a(get_each_context$a(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*sizes*/
      16) {
        each_value = ensure_array_like(
          /*sizes*/
          ctx2[4]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$a(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$a(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot$4(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      $$slots: { default: [create_default_slot$b] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty & /*$$scope*/
      2097152) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_fragment$o(ctx) {
  let select0;
  let updating_value;
  let t0;
  let select1;
  let updating_value_1;
  let t1;
  let div;
  let iconpicker;
  let updating_iconId;
  let current;
  function select0_value_binding(value) {
    ctx[8](value);
  }
  let select0_props = {
    placeholder: "Dashboard",
    name: "dashboard",
    $$slots: { options: [create_options_slot_1$2] },
    $$scope: { ctx }
  };
  if (
    /*dashboard*/
    ctx[1] !== void 0
  ) {
    select0_props.value = /*dashboard*/
    ctx[1];
  }
  select0 = new Select({ props: select0_props });
  binding_callbacks.push(() => bind(select0, "value", select0_value_binding));
  function select1_value_binding(value) {
    ctx[9](value);
  }
  let select1_props = {
    placeholder: "Font size",
    name: "size",
    class: "mt-2",
    $$slots: { options: [create_options_slot$4] },
    $$scope: { ctx }
  };
  if (
    /*size*/
    ctx[0] !== void 0
  ) {
    select1_props.value = /*size*/
    ctx[0];
  }
  select1 = new Select({ props: select1_props });
  binding_callbacks.push(() => bind(select1, "value", select1_value_binding));
  function iconpicker_iconId_binding(value) {
    ctx[10](value);
  }
  let iconpicker_props = {};
  if (
    /*iconId*/
    ctx[2] !== void 0
  ) {
    iconpicker_props.iconId = /*iconId*/
    ctx[2];
  }
  iconpicker = new IconPicker({ props: iconpicker_props });
  binding_callbacks.push(() => bind(iconpicker, "iconId", iconpicker_iconId_binding));
  return {
    c() {
      create_component(select0.$$.fragment);
      t0 = space();
      create_component(select1.$$.fragment);
      t1 = space();
      div = element("div");
      create_component(iconpicker.$$.fragment);
      this.h();
    },
    l(nodes) {
      claim_component(select0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(select1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(iconpicker.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "mt-2");
    },
    m(target, anchor) {
      mount_component(select0, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(select1, target, anchor);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div, anchor);
      mount_component(iconpicker, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const select0_changes = {};
      if (dirty & /*$$scope, dashboards*/
      2097160) {
        select0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty & /*dashboard*/
      2) {
        updating_value = true;
        select0_changes.value = /*dashboard*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      select0.$set(select0_changes);
      const select1_changes = {};
      if (dirty & /*$$scope*/
      2097152) {
        select1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value_1 && dirty & /*size*/
      1) {
        updating_value_1 = true;
        select1_changes.value = /*size*/
        ctx2[0];
        add_flush_callback(() => updating_value_1 = false);
      }
      select1.$set(select1_changes);
      const iconpicker_changes = {};
      if (!updating_iconId && dirty & /*iconId*/
      4) {
        updating_iconId = true;
        iconpicker_changes.iconId = /*iconId*/
        ctx2[2];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker.$set(iconpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select0.$$.fragment, local);
      transition_in(select1.$$.fragment, local);
      transition_in(iconpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select0.$$.fragment, local);
      transition_out(select1.$$.fragment, local);
      transition_out(iconpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(div);
      }
      destroy_component(select0, detaching);
      destroy_component(select1, detaching);
      destroy_component(iconpicker);
    }
  };
}
function instance$m($$self, $$props, $$invalidate) {
  let dashboards$2;
  let $localDashboards;
  let $homeyDashboards;
  component_subscribe($$self, dashboards, ($$value) => $$invalidate(6, $localDashboards = $$value));
  component_subscribe($$self, dashboards$1, ($$value) => $$invalidate(7, $homeyDashboards = $$value));
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let size;
  let dashboard2;
  let iconId;
  const sizes = [
    { value: "", label: "Text" },
    ...[...Array(6).keys()].map((key) => ({
      value: "" + (key + 1),
      label: "" + (key + 1)
    }))
  ];
  function onSettings(s3) {
    $$invalidate(1, dashboard2 = dashboards$2.find((d3) => d3.value === settings.dashboardId));
    $$invalidate(0, size = sizes.find((s22) => s22.value === (settings.size ?? "")));
    $$invalidate(2, iconId = settings.iconId);
  }
  function onDashboard(option) {
    if (option === void 0 || option.value === settings.dashboardId) {
      return;
    }
    dispatch("settings", { ...settings, dashboardId: option.value });
  }
  function onSize(option) {
    if (option === void 0 || Number(option.value) === settings.size) {
      return;
    }
    dispatch("settings", { ...settings, size: Number(option.value) });
  }
  function onIcon(id) {
    if (id === settings.iconId) {
      return;
    }
    dispatch("settings", { ...settings, iconId: id });
  }
  function select0_value_binding(value) {
    dashboard2 = value;
    $$invalidate(1, dashboard2);
  }
  function select1_value_binding(value) {
    size = value;
    $$invalidate(0, size);
  }
  function iconpicker_iconId_binding(value) {
    iconId = value;
    $$invalidate(2, iconId);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(5, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$homeyDashboards, $localDashboards*/
    192) {
      $$invalidate(3, dashboards$2 = Object.values({ ...$homeyDashboards, ...$localDashboards }).map((d3) => ({ value: d3.id, label: d3.title })));
    }
    if ($$self.$$.dirty & /*settings*/
    32) {
      onSettings();
    }
    if ($$self.$$.dirty & /*dashboard*/
    2) {
      onDashboard(dashboard2);
    }
    if ($$self.$$.dirty & /*size*/
    1) {
      onSize(size);
    }
    if ($$self.$$.dirty & /*iconId*/
    4) {
      onIcon(iconId);
    }
  };
  return [
    size,
    dashboard2,
    iconId,
    dashboards$2,
    sizes,
    settings,
    $localDashboards,
    $homeyDashboards,
    select0_value_binding,
    select1_value_binding,
    iconpicker_iconId_binding
  ];
}
class DashboardLinkEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$m, create_fragment$o, safe_not_equal, { settings: 5 });
  }
}
function create_else_block$8(ctx) {
  let div;
  let t2;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*settings*/
    ctx[0].iconId !== void 0 && create_if_block_15(ctx)
  );
  function select_block_type_1(ctx2, dirty) {
    if (
      /*dashboard*/
      ctx2[3] !== void 0
    )
      return create_if_block_1$c;
    return create_else_block_3;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block1 = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      if (if_block0)
        if_block0.c();
      t2 = space();
      if_block1.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (if_block0)
        if_block0.l(div_nodes);
      t2 = claim_space(div_nodes);
      if_block1.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "w-full h-full flex justify-center items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (if_block0)
        if_block0.m(div, null);
      append_hydration(div, t2);
      if_block1.m(div, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          div,
          "click",
          /*click_handler*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*settings*/
        ctx2[0].iconId !== void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*settings*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_15(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t2);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div, null);
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0)
        if_block0.d();
      if_block1.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$g(ctx) {
  let span;
  let textContent = "Dashboard not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1sl1c9x")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_15(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId
      ),
      class: "mr-1"
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    l(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*settings*/
      1)
        icon_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_else_block_3(ctx) {
  let span;
  let textContent = "Dashboard not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-pyg9ol")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$c(ctx) {
  let if_block_anchor;
  function select_block_type_2(ctx2, dirty) {
    if (
      /*$editing*/
      ctx2[4]
    )
      return create_if_block_2$8;
    if (
      /*size*/
      ctx2[2] == 1
    )
      return create_if_block_9;
    if (
      /*size*/
      ctx2[2] == 2
    )
      return create_if_block_10;
    if (
      /*size*/
      ctx2[2] == 3
    )
      return create_if_block_11;
    if (
      /*size*/
      ctx2[2] == 4
    )
      return create_if_block_12;
    if (
      /*size*/
      ctx2[2] == 5
    )
      return create_if_block_13;
    if (
      /*size*/
      ctx2[2] == 6
    )
      return create_if_block_14;
    return create_else_block_2;
  }
  let current_block_type = select_block_type_2(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_2(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_else_block_2(ctx) {
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      a3 = claim_element(nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
    },
    m(target, anchor) {
      insert_hydration(target, a3, anchor);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(a3);
      }
    }
  };
}
function create_if_block_14(ctx) {
  let h6;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h6 = element("h6");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h6 = claim_element(nodes, "H6", { class: true });
      var h6_nodes = children(h6);
      a3 = claim_element(h6_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h6_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h6, "class", "no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h6, anchor);
      append_hydration(h6, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h6);
      }
    }
  };
}
function create_if_block_13(ctx) {
  let h5;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h5 = element("h5");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h5 = claim_element(nodes, "H5", { class: true });
      var h5_nodes = children(h5);
      a3 = claim_element(h5_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h5_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h5, "class", "no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h5, anchor);
      append_hydration(h5, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h5);
      }
    }
  };
}
function create_if_block_12(ctx) {
  let h4;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h4 = element("h4");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h4 = claim_element(nodes, "H4", { class: true });
      var h4_nodes = children(h4);
      a3 = claim_element(h4_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h4, "class", "no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h4, anchor);
      append_hydration(h4, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h4);
      }
    }
  };
}
function create_if_block_11(ctx) {
  let h3;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h3 = element("h3");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h3 = claim_element(nodes, "H3", { class: true });
      var h3_nodes = children(h3);
      a3 = claim_element(h3_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h3, "class", "no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h3, anchor);
      append_hydration(h3, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h3);
      }
    }
  };
}
function create_if_block_10(ctx) {
  let h23;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h23 = element("h2");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h23 = claim_element(nodes, "H2", { class: true });
      var h2_nodes = children(h23);
      a3 = claim_element(h2_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h23, "class", "no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h23, anchor);
      append_hydration(h23, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h23);
      }
    }
  };
}
function create_if_block_9(ctx) {
  let h12;
  let a3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      h12 = element("h1");
      a3 = element("a");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", { class: true });
      var h1_nodes = children(h12);
      a3 = claim_element(h1_nodes, "A", { href: true });
      var a_nodes = children(a3);
      t2 = claim_text(a_nodes, t_value);
      a_nodes.forEach(detach);
      h1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a3, "href", a_href_value = base + "/board?id=" + /*dashboard*/
      ctx[3].id);
      attr(h12, "class", "no-margin");
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, a3);
      append_hydration(a3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
      if (dirty & /*dashboard*/
      8 && a_href_value !== (a_href_value = base + "/board?id=" + /*dashboard*/
      ctx2[3].id)) {
        attr(a3, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_if_block_2$8(ctx) {
  let if_block_anchor;
  function select_block_type_3(ctx2, dirty) {
    if (
      /*size*/
      ctx2[2] == 1
    )
      return create_if_block_3$5;
    if (
      /*size*/
      ctx2[2] == 2
    )
      return create_if_block_4$1;
    if (
      /*size*/
      ctx2[2] == 3
    )
      return create_if_block_5$1;
    if (
      /*size*/
      ctx2[2] == 4
    )
      return create_if_block_6$1;
    if (
      /*size*/
      ctx2[2] == 5
    )
      return create_if_block_7;
    if (
      /*size*/
      ctx2[2] == 6
    )
      return create_if_block_8;
    return create_else_block_1$3;
  }
  let current_block_type = select_block_type_3(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_3(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_else_block_1$3(ctx) {
  let div;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      t2 = claim_text(div_nodes, t_value);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_8(ctx) {
  let h6;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h6 = element("h6");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h6 = claim_element(nodes, "H6", { class: true });
      var h6_nodes = children(h6);
      t2 = claim_text(h6_nodes, t_value);
      h6_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h6, "class", "no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h6, anchor);
      append_hydration(h6, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h6);
      }
    }
  };
}
function create_if_block_7(ctx) {
  let h5;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h5 = element("h5");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h5 = claim_element(nodes, "H5", { class: true });
      var h5_nodes = children(h5);
      t2 = claim_text(h5_nodes, t_value);
      h5_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h5, "class", "no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h5, anchor);
      append_hydration(h5, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h5);
      }
    }
  };
}
function create_if_block_6$1(ctx) {
  let h4;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h4 = element("h4");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h4 = claim_element(nodes, "H4", { class: true });
      var h4_nodes = children(h4);
      t2 = claim_text(h4_nodes, t_value);
      h4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h4, "class", "no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h4, anchor);
      append_hydration(h4, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h4);
      }
    }
  };
}
function create_if_block_5$1(ctx) {
  let h3;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h3 = element("h3");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h3 = claim_element(nodes, "H3", { class: true });
      var h3_nodes = children(h3);
      t2 = claim_text(h3_nodes, t_value);
      h3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h3, "class", "no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h3, anchor);
      append_hydration(h3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h3);
      }
    }
  };
}
function create_if_block_4$1(ctx) {
  let h23;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h23 = element("h2");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h23 = claim_element(nodes, "H2", { class: true });
      var h2_nodes = children(h23);
      t2 = claim_text(h2_nodes, t_value);
      h2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h23, "class", "no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h23, anchor);
      append_hydration(h23, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h23);
      }
    }
  };
}
function create_if_block_3$5(ctx) {
  let h12;
  let t_value = (
    /*dashboard*/
    ctx[3].title + ""
  );
  let t2;
  return {
    c() {
      h12 = element("h1");
      t2 = text(t_value);
      this.h();
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", { class: true });
      var h1_nodes = children(h12);
      t2 = claim_text(h1_nodes, t_value);
      h1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h12, "class", "no-margin cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*dashboard*/
      8 && t_value !== (t_value = /*dashboard*/
      ctx2[3].title + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_fragment$n(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$g, create_else_block$8];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*dashboardId*/
      ctx2[1] === void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$l($$self, $$props, $$invalidate) {
  let dashboardId;
  let dashboards$2;
  let dashboard2;
  let size;
  let $localDashboards;
  let $homeyDashboards;
  let $editing;
  component_subscribe($$self, dashboards, ($$value) => $$invalidate(7, $localDashboards = $$value));
  component_subscribe($$self, dashboards$1, ($$value) => $$invalidate(8, $homeyDashboards = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(4, $editing = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  const click_handler = (e2) => {
    if (!$editing) {
      e2.stopPropagation();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(5, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(1, dashboardId = settings == null ? void 0 : settings.dashboardId);
    }
    if ($$self.$$.dirty & /*$homeyDashboards, $localDashboards*/
    384) {
      $$invalidate(6, dashboards$2 = { ...$homeyDashboards, ...$localDashboards });
    }
    if ($$self.$$.dirty & /*dashboardId, dashboards*/
    66) {
      $$invalidate(3, dashboard2 = dashboardId !== void 0 ? dashboards$2[dashboardId] : void 0);
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(2, size = settings == null ? void 0 : settings.size);
    }
  };
  return [
    settings,
    dashboardId,
    size,
    dashboard2,
    $editing,
    context,
    dashboards$2,
    $localDashboards,
    $homeyDashboards,
    click_handler
  ];
}
class DashboardLinkWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$l, create_fragment$n, safe_not_equal, { settings: 0, context: 5 });
  }
}
function get_each_context$9(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[19] = list[i2];
  return child_ctx;
}
function create_else_block$7(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*placeholder*/
        ctx[1]
      );
    },
    l(nodes) {
      t2 = claim_text(
        nodes,
        /*placeholder*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*placeholder*/
      2)
        set_data(
          t2,
          /*placeholder*/
          ctx2[1]
        );
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_2$7(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Flow not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Flow not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_1$b(ctx) {
  let div;
  let span;
  let t0_value = (
    /*selected*/
    ctx[5].folders + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*selected*/
    ctx[5].flow.name + ""
  );
  let t2;
  let t3;
  let iconbutton;
  let current;
  iconbutton = new IconButton({ props: { data: mdiDelete, size: "14px" } });
  iconbutton.$on(
    "click",
    /*click_handler*/
    ctx[9]
  );
  return {
    c() {
      div = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = text(" - ");
      t2 = text(t2_value);
      t3 = space();
      create_component(iconbutton.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      span = claim_element(div_nodes, "SPAN", {});
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_text(span_nodes, " - ");
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      t3 = claim_space(div_nodes);
      claim_component(iconbutton.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex justify-between w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, span);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
      append_hydration(div, t3);
      mount_component(iconbutton, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & /*selected*/
      32) && t0_value !== (t0_value = /*selected*/
      ctx2[5].folders + ""))
        set_data(t0, t0_value);
      if ((!current || dirty & /*selected*/
      32) && t2_value !== (t2_value = /*selected*/
      ctx2[5].flow.name + ""))
        set_data(t2, t2_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(iconbutton);
    }
  };
}
function create_default_slot_5$4(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$b, create_if_block_2$7, create_else_block$7];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*selected*/
      ctx2[5] !== void 0
    )
      return 0;
    if (
      /*flowId*/
      ctx2[0] !== void 0
    )
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_if_block$f(ctx) {
  let modal;
  let current;
  modal = new Modal({
    props: {
      handleClose: (
        /*func*/
        ctx[14]
      ),
      $$slots: { content: [create_content_slot$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal.$$.fragment);
    },
    l(nodes) {
      claim_component(modal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_changes = {};
      if (dirty & /*open*/
      8)
        modal_changes.handleClose = /*func*/
        ctx2[14];
      if (dirty & /*$$scope, filtered, search, open*/
      4194332) {
        modal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal.$set(modal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal, detaching);
    }
  };
}
function create_default_slot_4$5(ctx) {
  let t0_value = (
    /*item*/
    ctx[19].folders + ""
  );
  let t0;
  let t1;
  return {
    c() {
      t0 = text(t0_value);
      t1 = space();
    },
    l(nodes) {
      t0 = claim_text(nodes, t0_value);
      t1 = claim_space(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, t0, anchor);
      insert_hydration(target, t1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*filtered*/
      16 && t0_value !== (t0_value = /*item*/
      ctx2[19].folders + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
    }
  };
}
function create_title_slot$2(ctx) {
  let list_item_content_title;
  let current;
  list_item_content_title = new List.Item.Content.Title({
    props: {
      slot: "title",
      class: "flex",
      $$slots: { default: [create_default_slot_4$5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content_title.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content_title.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content_title, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_title_changes = {};
      if (dirty & /*$$scope, filtered*/
      4194320) {
        list_item_content_title_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content_title.$set(list_item_content_title_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content_title.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content_title.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content_title, detaching);
    }
  };
}
function create_default_slot_3$6(ctx) {
  let t0_value = (
    /*item*/
    ctx[19].flow.name + ""
  );
  let t0;
  let t1;
  return {
    c() {
      t0 = text(t0_value);
      t1 = space();
    },
    l(nodes) {
      t0 = claim_text(nodes, t0_value);
      t1 = claim_space(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, t0, anchor);
      insert_hydration(target, t1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*filtered*/
      16 && t0_value !== (t0_value = /*item*/
      ctx2[19].flow.name + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
    }
  };
}
function create_description_slot$1(ctx) {
  let list_item_content_description;
  let current;
  list_item_content_description = new List.Item.Content.Description({
    props: {
      slot: "description",
      $$slots: { default: [create_default_slot_3$6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content_description.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content_description.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content_description, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_description_changes = {};
      if (dirty & /*$$scope, filtered*/
      4194320) {
        list_item_content_description_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content_description.$set(list_item_content_description_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content_description.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content_description.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content_description, detaching);
    }
  };
}
function create_content_slot_1$1(ctx) {
  let list_item_content;
  let current;
  list_item_content = new List.Item.Content({
    props: {
      slot: "content",
      $$slots: {
        description: [create_description_slot$1],
        title: [create_title_slot$2]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_changes = {};
      if (dirty & /*$$scope, filtered*/
      4194320) {
        list_item_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content.$set(list_item_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content, detaching);
    }
  };
}
function create_each_block$9(ctx) {
  let list_item;
  let current;
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[13](
        /*item*/
        ctx[19]
      )
    );
  }
  list_item = new List.Item({
    props: {
      class: "cursor-pointer",
      $$slots: { content: [create_content_slot_1$1] },
      $$scope: { ctx }
    }
  });
  list_item.$on("click", click_handler_3);
  return {
    c() {
      create_component(list_item.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const list_item_changes = {};
      if (dirty & /*$$scope, filtered*/
      4194320) {
        list_item_changes.$$scope = { dirty, ctx };
      }
      list_item.$set(list_item_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item, detaching);
    }
  };
}
function create_default_slot_2$6(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*filtered*/
    ctx[4]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$9(get_each_context$9(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*onFlow, filtered*/
      80) {
        each_value = ensure_array_like(
          /*filtered*/
          ctx2[4]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$9(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$9(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_1$6(ctx) {
  let div1;
  let div0;
  let iconbutton;
  let t0;
  let div2;
  let input;
  let updating_value;
  let t1;
  let div3;
  let list;
  let current;
  iconbutton = new IconButton({ props: { data: mdiClose } });
  iconbutton.$on(
    "click",
    /*click_handler_2*/
    ctx[11]
  );
  function input_value_binding(value) {
    ctx[12](value);
  }
  let input_props = { name: "search", placeholder: "Search" };
  if (
    /*search*/
    ctx[2] !== void 0
  ) {
    input_props.value = /*search*/
    ctx[2];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  list = new List({
    props: {
      $$slots: { default: [create_default_slot_2$6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      create_component(iconbutton.$$.fragment);
      t0 = space();
      div2 = element("div");
      create_component(input.$$.fragment);
      t1 = space();
      div3 = element("div");
      create_component(list.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(iconbutton.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", {});
      var div2_nodes = children(div2);
      claim_component(input.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      claim_component(list.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "absolute -top-4 -right-5 z-10");
      attr(div1, "class", "relative w-full");
      attr(div3, "class", "flex-grow overflow-auto");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      mount_component(iconbutton, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(input, div2, null);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div3, anchor);
      mount_component(list, div3, null);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (!updating_value && dirty & /*search*/
      4) {
        updating_value = true;
        input_changes.value = /*search*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      const list_changes = {};
      if (dirty & /*$$scope, filtered*/
      4194320) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      transition_in(input.$$.fragment, local);
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      transition_out(input.$$.fragment, local);
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t0);
        detach(div2);
        detach(t1);
        detach(div3);
      }
      destroy_component(iconbutton);
      destroy_component(input);
      destroy_component(list);
    }
  };
}
function create_body_slot$2(ctx) {
  let modal_content_body;
  let current;
  modal_content_body = new Modal.Content.Body({
    props: {
      slot: "body",
      class: "h-full flex flex-col",
      $$slots: { default: [create_default_slot_1$6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content_body.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content_body.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content_body, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_body_changes = {};
      if (dirty & /*$$scope, filtered, search, open*/
      4194332) {
        modal_content_body_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content_body.$set(modal_content_body_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content_body.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content_body.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content_body, detaching);
    }
  };
}
function create_content_slot$3(ctx) {
  let modal_content;
  let current;
  modal_content = new Modal.Content({
    props: {
      slot: "content",
      $$slots: { body: [create_body_slot$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_changes = {};
      if (dirty & /*$$scope, filtered, search, open*/
      4194332) {
        modal_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content.$set(modal_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content, detaching);
    }
  };
}
function create_default_slot$a(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*open*/
    ctx[3] && create_if_block$f(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*open*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*open*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$f(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment$m(ctx) {
  let button;
  let t2;
  let portal;
  let current;
  button = new Button({
    props: {
      class: "w-full justify-start border border-border",
      $$slots: { default: [create_default_slot_5$4] },
      $$scope: { ctx }
    }
  });
  button.$on(
    "click",
    /*click_handler_1*/
    ctx[10]
  );
  portal = new Portal({
    props: {
      $$slots: { default: [create_default_slot$a] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
      t2 = space();
      create_component(portal.$$.fragment);
    },
    l(nodes) {
      claim_component(button.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(portal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(portal, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const button_changes = {};
      if (dirty & /*$$scope, flowId, selected, placeholder*/
      4194339) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
      const portal_changes = {};
      if (dirty & /*$$scope, open, filtered, search*/
      4194332) {
        portal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      portal.$set(portal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      transition_in(portal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      transition_out(portal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(button, detaching);
      destroy_component(portal, detaching);
    }
  };
}
function instance$k($$self, $$props, $$invalidate) {
  let sorted;
  let $flowFolders;
  component_subscribe($$self, flowFolders, ($$value) => $$invalidate(15, $flowFolders = $$value));
  let { flowId } = $$props;
  let { flows = [] } = $$props;
  let { placeholder = "Select flow" } = $$props;
  const dispatch = createEventDispatcher();
  let open = false;
  let search = "";
  let filtered = [];
  let selected;
  function filterFlows(value, s3) {
    const normalized = value.toLowerCase();
    if (value.length > 0) {
      $$invalidate(4, filtered = sorted.filter((d3) => d3.searchString.includes(normalized)));
    } else {
      $$invalidate(4, filtered = sorted);
    }
  }
  function onFlow(flow) {
    $$invalidate(0, flowId = flow.id);
    $$invalidate(3, open = false);
    dispatch("flowId", flowId);
  }
  function getFolders(folderId) {
    const folder = $flowFolders[folderId];
    if ((folder == null ? void 0 : folder.parent) !== void 0 && folder.parent !== null) {
      return getFolders(folder.parent) + "/" + folder.name;
    }
    return (folder == null ? void 0 : folder.name) ?? "";
  }
  const click_handler = () => $$invalidate(0, flowId = void 0);
  const click_handler_1 = () => $$invalidate(3, open = true);
  const click_handler_2 = () => $$invalidate(3, open = false);
  function input_value_binding(value) {
    search = value;
    $$invalidate(2, search);
  }
  const click_handler_3 = (item) => onFlow(item.flow);
  const func = () => $$invalidate(3, open = false);
  $$self.$$set = ($$props2) => {
    if ("flowId" in $$props2)
      $$invalidate(0, flowId = $$props2.flowId);
    if ("flows" in $$props2)
      $$invalidate(7, flows = $$props2.flows);
    if ("placeholder" in $$props2)
      $$invalidate(1, placeholder = $$props2.placeholder);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*flows*/
    128) {
      $$invalidate(8, sorted = (flows ?? []).map((flow) => {
        const folders = getFolders(flow.folder);
        return {
          flow,
          folders,
          searchString: `${folders} - ${flow.name}`.toLowerCase()
        };
      }).sort((a3, b2) => {
        if (a3.searchString === b2.searchString)
          return 0;
        if (a3.searchString < b2.searchString)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*flowId, sorted*/
    257) {
      $$invalidate(5, selected = flowId !== void 0 ? sorted.find((f) => f.flow.id === flowId) : void 0);
    }
    if ($$self.$$.dirty & /*search, sorted*/
    260) {
      filterFlows(search);
    }
  };
  return [
    flowId,
    placeholder,
    search,
    open,
    filtered,
    selected,
    onFlow,
    flows,
    sorted,
    click_handler,
    click_handler_1,
    click_handler_2,
    input_value_binding,
    click_handler_3,
    func
  ];
}
class FlowPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$k, create_fragment$m, safe_not_equal, { flowId: 0, flows: 7, placeholder: 1 });
  }
}
function create_fragment$l(ctx) {
  let flowpicker;
  let updating_flowId;
  let t2;
  let div;
  let iconpicker;
  let updating_iconId;
  let current;
  function flowpicker_flowId_binding(value) {
    ctx[6](value);
  }
  let flowpicker_props = { flows: (
    /*flows*/
    ctx[2]
  ) };
  if (
    /*flowId*/
    ctx[0] !== void 0
  ) {
    flowpicker_props.flowId = /*flowId*/
    ctx[0];
  }
  flowpicker = new FlowPicker({ props: flowpicker_props });
  binding_callbacks.push(() => bind(flowpicker, "flowId", flowpicker_flowId_binding));
  function iconpicker_iconId_binding(value) {
    ctx[7](value);
  }
  let iconpicker_props = {};
  if (
    /*iconId*/
    ctx[1] !== void 0
  ) {
    iconpicker_props.iconId = /*iconId*/
    ctx[1];
  }
  iconpicker = new IconPicker({ props: iconpicker_props });
  binding_callbacks.push(() => bind(iconpicker, "iconId", iconpicker_iconId_binding));
  return {
    c() {
      create_component(flowpicker.$$.fragment);
      t2 = space();
      div = element("div");
      create_component(iconpicker.$$.fragment);
      this.h();
    },
    l(nodes) {
      claim_component(flowpicker.$$.fragment, nodes);
      t2 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(iconpicker.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "mt-2");
    },
    m(target, anchor) {
      mount_component(flowpicker, target, anchor);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, div, anchor);
      mount_component(iconpicker, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const flowpicker_changes = {};
      if (dirty & /*flows*/
      4)
        flowpicker_changes.flows = /*flows*/
        ctx2[2];
      if (!updating_flowId && dirty & /*flowId*/
      1) {
        updating_flowId = true;
        flowpicker_changes.flowId = /*flowId*/
        ctx2[0];
        add_flush_callback(() => updating_flowId = false);
      }
      flowpicker.$set(flowpicker_changes);
      const iconpicker_changes = {};
      if (!updating_iconId && dirty & /*iconId*/
      2) {
        updating_iconId = true;
        iconpicker_changes.iconId = /*iconId*/
        ctx2[1];
        add_flush_callback(() => updating_iconId = false);
      }
      iconpicker.$set(iconpicker_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(flowpicker.$$.fragment, local);
      transition_in(iconpicker.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(flowpicker.$$.fragment, local);
      transition_out(iconpicker.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(div);
      }
      destroy_component(flowpicker, detaching);
      destroy_component(iconpicker);
    }
  };
}
function instance$j($$self, $$props, $$invalidate) {
  let flows;
  let $advancedFlows;
  let $basicFlows;
  component_subscribe($$self, advancedFlows, ($$value) => $$invalidate(4, $advancedFlows = $$value));
  component_subscribe($$self, basicFlows, ($$value) => $$invalidate(5, $basicFlows = $$value));
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let flowId;
  let iconId;
  function onSettings(s3) {
    $$invalidate(0, flowId = s3 == null ? void 0 : s3.flowId);
    $$invalidate(1, iconId = s3 == null ? void 0 : s3.iconId);
  }
  function onFlow(value) {
    if (value === void 0 || value === settings.flowId) {
      return;
    }
    $$invalidate(3, settings.flowId = value, settings);
    dispatch("settings", settings);
  }
  function onIcon(id) {
    if (id !== settings.iconId) {
      dispatch("settings", { ...settings, iconId: id });
    }
  }
  function flowpicker_flowId_binding(value) {
    flowId = value;
    $$invalidate(0, flowId);
  }
  function iconpicker_iconId_binding(value) {
    iconId = value;
    $$invalidate(1, iconId);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(3, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$basicFlows, $advancedFlows*/
    48) {
      $$invalidate(2, flows = Object.values($basicFlows).concat(Object.values($advancedFlows)).filter((f) => f.triggerable).sort((a3, b2) => {
        if (a3.name === b2.name)
          return 0;
        if (a3.name < b2.name)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*settings*/
    8) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*flowId*/
    1) {
      onFlow(flowId);
    }
    if ($$self.$$.dirty & /*iconId*/
    2) {
      onIcon(iconId);
    }
  };
  return [
    flowId,
    iconId,
    flows,
    settings,
    $advancedFlows,
    $basicFlows,
    flowpicker_flowId_binding,
    iconpicker_iconId_binding
  ];
}
class FlowEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$j, create_fragment$l, safe_not_equal, { settings: 3 });
  }
}
function create_else_block_1$2(ctx) {
  let div1;
  let iconbutton;
  let t0;
  let div0;
  let t1_value = (
    /*flow*/
    ctx[1].name + ""
  );
  let t1;
  let current;
  iconbutton = new IconButton({
    props: {
      data: getIcon(
        /*settings*/
        ctx[0].iconId ?? "play"
      ),
      class: "my-auto ml-1 bg-primary text-primary-content",
      size: "60px"
    }
  });
  iconbutton.$on(
    "click",
    /*click_handler*/
    ctx[6]
  );
  return {
    c() {
      div1 = element("div");
      create_component(iconbutton.$$.fragment);
      t0 = space();
      div0 = element("div");
      t1 = text(t1_value);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      claim_component(iconbutton.$$.fragment, div1_nodes);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      t1 = claim_text(div0_nodes, t1_value);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "my-auto ml-3 mr-1");
      attr(div1, "class", "flex content-center h-full");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      mount_component(iconbutton, div1, null);
      append_hydration(div1, t0);
      append_hydration(div1, div0);
      append_hydration(div0, t1);
      current = true;
    },
    p(ctx2, dirty) {
      const iconbutton_changes = {};
      if (dirty & /*settings*/
      1)
        iconbutton_changes.data = getIcon(
          /*settings*/
          ctx2[0].iconId ?? "play"
        );
      iconbutton.$set(iconbutton_changes);
      if ((!current || dirty & /*flow*/
      2) && t1_value !== (t1_value = /*flow*/
      ctx2[1].name + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(iconbutton);
    }
  };
}
function create_if_block$e(ctx) {
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].flowId === void 0
    )
      return create_if_block_1$a;
    return create_else_block$6;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_else_block$6(ctx) {
  let span;
  let textContent = "Flow not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1p1sfrn")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$a(ctx) {
  let span;
  let textContent = "Flow not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-75f8s3")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$k(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$e, create_else_block_1$2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*flow*/
      ctx2[1] === void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$i($$self, $$props, $$invalidate) {
  let flow;
  let $homey;
  let $advancedFlows;
  let $basicFlows;
  let $editing;
  component_subscribe($$self, homey, ($$value) => $$invalidate(7, $homey = $$value));
  component_subscribe($$self, advancedFlows, ($$value) => $$invalidate(4, $advancedFlows = $$value));
  component_subscribe($$self, basicFlows, ($$value) => $$invalidate(5, $basicFlows = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(8, $editing = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  async function triggerFlow() {
    if (!$editing && flow !== void 0) {
      if ($basicFlows[flow.id]) {
        await $homey.flow.triggerFlow({ id: flow.id });
      } else if ($advancedFlows[flow.id]) {
        await $homey.flow.triggerAdvancedFlow({ id: flow.id });
      }
    }
  }
  const click_handler = () => triggerFlow();
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(3, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings, $basicFlows, $advancedFlows*/
    49) {
      $$invalidate(1, flow = (settings == null ? void 0 : settings.flowId) !== void 0 ? $basicFlows[settings.flowId] ?? $advancedFlows[settings.flowId] : void 0);
    }
  };
  return [
    settings,
    flow,
    triggerFlow,
    context,
    $advancedFlows,
    $basicFlows,
    click_handler
  ];
}
class FlowWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$i, create_fragment$k, safe_not_equal, { settings: 0, context: 3 });
  }
}
function create_else_block$5(ctx) {
  let div;
  let iframe;
  let iframe_title_value;
  let iframe_src_value;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      iframe = element("iframe");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      iframe = claim_element(div_nodes, "IFRAME", {
        style: true,
        title: true,
        src: true,
        sandbox: true
      });
      children(iframe).forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(
        iframe,
        "style",
        /*style*/
        ctx[2]
      );
      attr(iframe, "title", iframe_title_value = /*settings*/
      ctx[0].url);
      if (!src_url_equal(iframe.src, iframe_src_value = /*settings*/
      ctx[0].url))
        attr(iframe, "src", iframe_src_value);
      attr(
        iframe,
        "sandbox",
        /*sandbox*/
        ctx[1]
      );
      attr(div, "class", "w-full h-full flex justify-center items-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, iframe);
      if (!mounted) {
        dispose = listen(
          div,
          "click",
          /*click_handler*/
          ctx[5]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*style*/
      4) {
        attr(
          iframe,
          "style",
          /*style*/
          ctx2[2]
        );
      }
      if (dirty & /*settings*/
      1 && iframe_title_value !== (iframe_title_value = /*settings*/
      ctx2[0].url)) {
        attr(iframe, "title", iframe_title_value);
      }
      if (dirty & /*settings*/
      1 && !src_url_equal(iframe.src, iframe_src_value = /*settings*/
      ctx2[0].url)) {
        attr(iframe, "src", iframe_src_value);
      }
      if (dirty & /*sandbox*/
      2) {
        attr(
          iframe,
          "sandbox",
          /*sandbox*/
          ctx2[1]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$d(ctx) {
  let span;
  let textContent = "Iframe not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-dnotqz")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$j(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].url === void 0
    )
      return create_if_block$d;
    return create_else_block$5;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function getSize(s3) {
  let result = "";
  if (s3.width) {
    result += "width: " + s3.width + "px;";
  } else {
    result += "width: 100%;";
  }
  if (s3.height) {
    result += "height: " + s3.height + "px;";
  } else {
    result += "height: 100%;";
  }
  return result;
}
function getSandbox(s3) {
  let result = "";
  if (s3.allowForms) {
    result += "allow-forms ";
  }
  if (s3.allowModals) {
    result += "allow-modals ";
  }
  if (s3.allowOrientationLock) {
    result += "allow-orientation-lock ";
  }
  if (s3.allowPopups) {
    result += "allow-popups ";
  }
  if (s3.allowPopupsToEscapeSandbox) {
    result += "allow-popups-to-escape-sandbox ";
  }
  if (s3.allowPresentation) {
    result += "allow-presentation ";
  }
  if (s3.allowSameOrigin) {
    result += "allow-same-origin ";
  }
  if (s3.allowScripts) {
    result += "allow-scripts ";
  }
  if (s3.allowTopNavigation) {
    result += "allow-top-navigation ";
  }
  if (s3.allowTopLevelNavigationByUserActivation) {
    result += "allow-top-navigation-by-user-activation ";
  }
  return result;
}
function instance$h($$self, $$props, $$invalidate) {
  let style;
  let sandbox;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(3, $editing = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  const click_handler = (e2) => {
    if (!$editing) {
      e2.stopPropagation();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(4, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(2, style = getSize(settings));
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(1, sandbox = getSandbox(settings));
    }
  };
  return [settings, sandbox, style, $editing, context, click_handler];
}
class IframeWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$h, create_fragment$j, safe_not_equal, { settings: 0, context: 4 });
  }
}
function create_fragment$i(ctx) {
  let input;
  let updating_value;
  let t0;
  let inputnumber0;
  let updating_value_1;
  let t1;
  let inputnumber1;
  let updating_value_2;
  let t2;
  let p;
  let textContent = "The iframe is by default completly sandboxed. This means that it cannot run scripts or escape the sandbox. \r\n    Most likely you will have to enable one of more of these in order to make your content work properly. \r\n    This reduces security, so only do it for sources you trust.";
  let t4;
  let div0;
  let span0;
  let textContent_1 = "Allows to run scripts";
  let t6;
  let toggle0;
  let updating_on;
  let t7;
  let div1;
  let span1;
  let textContent_2 = "Allows form submission";
  let t9;
  let toggle1;
  let updating_on_1;
  let t10;
  let div2;
  let span2;
  let textContent_3 = "Allows to open modal windows";
  let t12;
  let toggle2;
  let updating_on_2;
  let t13;
  let div3;
  let span3;
  let textContent_4 = "Allows to lock the screen orientation";
  let t15;
  let toggle3;
  let updating_on_3;
  let t16;
  let div4;
  let span4;
  let textContent_5 = "Allows to use the Pointer Lock API";
  let t18;
  let toggle4;
  let updating_on_4;
  let t19;
  let div5;
  let span5;
  let textContent_6 = "Allows popups";
  let t21;
  let toggle5;
  let updating_on_5;
  let t22;
  let div6;
  let span6;
  let textContent_7 = "Allows popups to open new windows without inheriting the sandboxing";
  let t24;
  let toggle6;
  let updating_on_6;
  let t25;
  let div7;
  let span7;
  let textContent_8 = "Allows to start a presentation session";
  let t27;
  let toggle7;
  let updating_on_7;
  let t28;
  let div8;
  let span8;
  let textContent_9 = "Allows the iframe content to be treated as being from the same origin";
  let t30;
  let toggle8;
  let updating_on_8;
  let t31;
  let div9;
  let span9;
  let textContent_10 = "Allows the iframe content to navigate its top-level browsing context";
  let t33;
  let toggle9;
  let updating_on_9;
  let t34;
  let div10;
  let span10;
  let textContent_11 = "Allows the iframe content to navigate its top-level browsing context, but only if initiated by user";
  let t36;
  let toggle10;
  let updating_on_10;
  let current;
  function input_value_binding(value) {
    ctx[15](value);
  }
  let input_props = { name: "url", placeholder: "Url" };
  if (
    /*url*/
    ctx[0] !== void 0
  ) {
    input_props.value = /*url*/
    ctx[0];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  function inputnumber0_value_binding(value) {
    ctx[16](value);
  }
  let inputnumber0_props = { name: "height", placeholder: "Height" };
  if (
    /*height*/
    ctx[1] !== void 0
  ) {
    inputnumber0_props.value = /*height*/
    ctx[1];
  }
  inputnumber0 = new InputNumber({ props: inputnumber0_props });
  binding_callbacks.push(() => bind(inputnumber0, "value", inputnumber0_value_binding));
  function inputnumber1_value_binding(value) {
    ctx[17](value);
  }
  let inputnumber1_props = { name: "width", placeholder: "Width" };
  if (
    /*width*/
    ctx[2] !== void 0
  ) {
    inputnumber1_props.value = /*width*/
    ctx[2];
  }
  inputnumber1 = new InputNumber({ props: inputnumber1_props });
  binding_callbacks.push(() => bind(inputnumber1, "value", inputnumber1_value_binding));
  function toggle0_on_binding(value) {
    ctx[18](value);
  }
  let toggle0_props = { name: "allowScripts" };
  if (
    /*allowScripts*/
    ctx[11] !== void 0
  ) {
    toggle0_props.on = /*allowScripts*/
    ctx[11];
  }
  toggle0 = new Toggle$1({ props: toggle0_props });
  binding_callbacks.push(() => bind(toggle0, "on", toggle0_on_binding));
  function toggle1_on_binding(value) {
    ctx[19](value);
  }
  let toggle1_props = { name: "allowForms" };
  if (
    /*allowForms*/
    ctx[3] !== void 0
  ) {
    toggle1_props.on = /*allowForms*/
    ctx[3];
  }
  toggle1 = new Toggle$1({ props: toggle1_props });
  binding_callbacks.push(() => bind(toggle1, "on", toggle1_on_binding));
  function toggle2_on_binding(value) {
    ctx[20](value);
  }
  let toggle2_props = { name: "allowModals" };
  if (
    /*allowModals*/
    ctx[4] !== void 0
  ) {
    toggle2_props.on = /*allowModals*/
    ctx[4];
  }
  toggle2 = new Toggle$1({ props: toggle2_props });
  binding_callbacks.push(() => bind(toggle2, "on", toggle2_on_binding));
  function toggle3_on_binding(value) {
    ctx[21](value);
  }
  let toggle3_props = { name: "allowOrientationLock" };
  if (
    /*allowOrientationLock*/
    ctx[5] !== void 0
  ) {
    toggle3_props.on = /*allowOrientationLock*/
    ctx[5];
  }
  toggle3 = new Toggle$1({ props: toggle3_props });
  binding_callbacks.push(() => bind(toggle3, "on", toggle3_on_binding));
  function toggle4_on_binding(value) {
    ctx[22](value);
  }
  let toggle4_props = { name: "allowPointerLock" };
  if (
    /*allowPointerLock*/
    ctx[6] !== void 0
  ) {
    toggle4_props.on = /*allowPointerLock*/
    ctx[6];
  }
  toggle4 = new Toggle$1({ props: toggle4_props });
  binding_callbacks.push(() => bind(toggle4, "on", toggle4_on_binding));
  function toggle5_on_binding(value) {
    ctx[23](value);
  }
  let toggle5_props = { name: "allowPopups" };
  if (
    /*allowPopups*/
    ctx[7] !== void 0
  ) {
    toggle5_props.on = /*allowPopups*/
    ctx[7];
  }
  toggle5 = new Toggle$1({ props: toggle5_props });
  binding_callbacks.push(() => bind(toggle5, "on", toggle5_on_binding));
  function toggle6_on_binding(value) {
    ctx[24](value);
  }
  let toggle6_props = { name: "allowPopupsToEscapeSandbox" };
  if (
    /*allowPopupsToEscapeSandbox*/
    ctx[8] !== void 0
  ) {
    toggle6_props.on = /*allowPopupsToEscapeSandbox*/
    ctx[8];
  }
  toggle6 = new Toggle$1({ props: toggle6_props });
  binding_callbacks.push(() => bind(toggle6, "on", toggle6_on_binding));
  function toggle7_on_binding(value) {
    ctx[25](value);
  }
  let toggle7_props = { name: "allowPresentation" };
  if (
    /*allowPresentation*/
    ctx[9] !== void 0
  ) {
    toggle7_props.on = /*allowPresentation*/
    ctx[9];
  }
  toggle7 = new Toggle$1({ props: toggle7_props });
  binding_callbacks.push(() => bind(toggle7, "on", toggle7_on_binding));
  function toggle8_on_binding(value) {
    ctx[26](value);
  }
  let toggle8_props = { name: "allowSameOrigin" };
  if (
    /*allowSameOrigin*/
    ctx[10] !== void 0
  ) {
    toggle8_props.on = /*allowSameOrigin*/
    ctx[10];
  }
  toggle8 = new Toggle$1({ props: toggle8_props });
  binding_callbacks.push(() => bind(toggle8, "on", toggle8_on_binding));
  function toggle9_on_binding(value) {
    ctx[27](value);
  }
  let toggle9_props = { name: "allowTopNavigation" };
  if (
    /*allowTopNavigation*/
    ctx[12] !== void 0
  ) {
    toggle9_props.on = /*allowTopNavigation*/
    ctx[12];
  }
  toggle9 = new Toggle$1({ props: toggle9_props });
  binding_callbacks.push(() => bind(toggle9, "on", toggle9_on_binding));
  function toggle10_on_binding(value) {
    ctx[28](value);
  }
  let toggle10_props = {
    name: "allowTopLevelNavigationByUserActivation"
  };
  if (
    /*allowTopLevelNavigationByUserActivation*/
    ctx[13] !== void 0
  ) {
    toggle10_props.on = /*allowTopLevelNavigationByUserActivation*/
    ctx[13];
  }
  toggle10 = new Toggle$1({ props: toggle10_props });
  binding_callbacks.push(() => bind(toggle10, "on", toggle10_on_binding));
  return {
    c() {
      create_component(input.$$.fragment);
      t0 = space();
      create_component(inputnumber0.$$.fragment);
      t1 = space();
      create_component(inputnumber1.$$.fragment);
      t2 = space();
      p = element("p");
      p.textContent = textContent;
      t4 = space();
      div0 = element("div");
      span0 = element("span");
      span0.textContent = textContent_1;
      t6 = space();
      create_component(toggle0.$$.fragment);
      t7 = space();
      div1 = element("div");
      span1 = element("span");
      span1.textContent = textContent_2;
      t9 = space();
      create_component(toggle1.$$.fragment);
      t10 = space();
      div2 = element("div");
      span2 = element("span");
      span2.textContent = textContent_3;
      t12 = space();
      create_component(toggle2.$$.fragment);
      t13 = space();
      div3 = element("div");
      span3 = element("span");
      span3.textContent = textContent_4;
      t15 = space();
      create_component(toggle3.$$.fragment);
      t16 = space();
      div4 = element("div");
      span4 = element("span");
      span4.textContent = textContent_5;
      t18 = space();
      create_component(toggle4.$$.fragment);
      t19 = space();
      div5 = element("div");
      span5 = element("span");
      span5.textContent = textContent_6;
      t21 = space();
      create_component(toggle5.$$.fragment);
      t22 = space();
      div6 = element("div");
      span6 = element("span");
      span6.textContent = textContent_7;
      t24 = space();
      create_component(toggle6.$$.fragment);
      t25 = space();
      div7 = element("div");
      span7 = element("span");
      span7.textContent = textContent_8;
      t27 = space();
      create_component(toggle7.$$.fragment);
      t28 = space();
      div8 = element("div");
      span8 = element("span");
      span8.textContent = textContent_9;
      t30 = space();
      create_component(toggle8.$$.fragment);
      t31 = space();
      div9 = element("div");
      span9 = element("span");
      span9.textContent = textContent_10;
      t33 = space();
      create_component(toggle9.$$.fragment);
      t34 = space();
      div10 = element("div");
      span10 = element("span");
      span10.textContent = textContent_11;
      t36 = space();
      create_component(toggle10.$$.fragment);
      this.h();
    },
    l(nodes) {
      claim_component(input.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(inputnumber0.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(inputnumber1.$$.fragment, nodes);
      t2 = claim_space(nodes);
      p = claim_element(nodes, "P", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(p) !== "svelte-1ju21ka")
        p.textContent = textContent;
      t4 = claim_space(nodes);
      div0 = claim_element(nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span0) !== "svelte-2541to")
        span0.textContent = textContent_1;
      t6 = claim_space(div0_nodes);
      claim_component(toggle0.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t7 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      span1 = claim_element(div1_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span1) !== "svelte-11o05pe")
        span1.textContent = textContent_2;
      t9 = claim_space(div1_nodes);
      claim_component(toggle1.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach);
      t10 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      span2 = claim_element(div2_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span2) !== "svelte-qphhsf")
        span2.textContent = textContent_3;
      t12 = claim_space(div2_nodes);
      claim_component(toggle2.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t13 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      span3 = claim_element(div3_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span3) !== "svelte-odqcvl")
        span3.textContent = textContent_4;
      t15 = claim_space(div3_nodes);
      claim_component(toggle3.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      t16 = claim_space(nodes);
      div4 = claim_element(nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      span4 = claim_element(div4_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span4) !== "svelte-9kpiyn")
        span4.textContent = textContent_5;
      t18 = claim_space(div4_nodes);
      claim_component(toggle4.$$.fragment, div4_nodes);
      div4_nodes.forEach(detach);
      t19 = claim_space(nodes);
      div5 = claim_element(nodes, "DIV", { class: true });
      var div5_nodes = children(div5);
      span5 = claim_element(div5_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span5) !== "svelte-1x4jwn1")
        span5.textContent = textContent_6;
      t21 = claim_space(div5_nodes);
      claim_component(toggle5.$$.fragment, div5_nodes);
      div5_nodes.forEach(detach);
      t22 = claim_space(nodes);
      div6 = claim_element(nodes, "DIV", { class: true });
      var div6_nodes = children(div6);
      span6 = claim_element(div6_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span6) !== "svelte-shw1gw")
        span6.textContent = textContent_7;
      t24 = claim_space(div6_nodes);
      claim_component(toggle6.$$.fragment, div6_nodes);
      div6_nodes.forEach(detach);
      t25 = claim_space(nodes);
      div7 = claim_element(nodes, "DIV", { class: true });
      var div7_nodes = children(div7);
      span7 = claim_element(div7_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span7) !== "svelte-oon48y")
        span7.textContent = textContent_8;
      t27 = claim_space(div7_nodes);
      claim_component(toggle7.$$.fragment, div7_nodes);
      div7_nodes.forEach(detach);
      t28 = claim_space(nodes);
      div8 = claim_element(nodes, "DIV", { class: true });
      var div8_nodes = children(div8);
      span8 = claim_element(div8_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span8) !== "svelte-4wa5n")
        span8.textContent = textContent_9;
      t30 = claim_space(div8_nodes);
      claim_component(toggle8.$$.fragment, div8_nodes);
      div8_nodes.forEach(detach);
      t31 = claim_space(nodes);
      div9 = claim_element(nodes, "DIV", { class: true });
      var div9_nodes = children(div9);
      span9 = claim_element(div9_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span9) !== "svelte-augxwc")
        span9.textContent = textContent_10;
      t33 = claim_space(div9_nodes);
      claim_component(toggle9.$$.fragment, div9_nodes);
      div9_nodes.forEach(detach);
      t34 = claim_space(nodes);
      div10 = claim_element(nodes, "DIV", { class: true });
      var div10_nodes = children(div10);
      span10 = claim_element(div10_nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span10) !== "svelte-g4y7yl")
        span10.textContent = textContent_11;
      t36 = claim_space(div10_nodes);
      claim_component(toggle10.$$.fragment, div10_nodes);
      div10_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(p, "class", "m-4");
      attr(div0, "class", "w-full flex flex-row justify-between items-center mt-2");
      attr(div1, "class", "w-full flex flex-row justify-between items-center mt-2");
      attr(div2, "class", "w-full flex flex-row justify-between items-center mt-2");
      attr(div3, "class", "w-full flex flex-row justify-between items-center mt-2");
      attr(div4, "class", "w-full flex flex-row justify-between items-center mt-2");
      attr(div5, "class", "w-full flex flex-row justify-between items-center mt-2");
      attr(div6, "class", "w-full flex flex-row justify-between items-center mt-2");
      attr(div7, "class", "w-full flex flex-row justify-between items-center mt-2");
      attr(div8, "class", "w-full flex flex-row justify-between items-center mt-2");
      attr(div9, "class", "w-full flex flex-row justify-between items-center mt-2");
      attr(div10, "class", "w-full flex flex-row justify-between items-center mt-2");
    },
    m(target, anchor) {
      mount_component(input, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(inputnumber0, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(inputnumber1, target, anchor);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, p, anchor);
      insert_hydration(target, t4, anchor);
      insert_hydration(target, div0, anchor);
      append_hydration(div0, span0);
      append_hydration(div0, t6);
      mount_component(toggle0, div0, null);
      insert_hydration(target, t7, anchor);
      insert_hydration(target, div1, anchor);
      append_hydration(div1, span1);
      append_hydration(div1, t9);
      mount_component(toggle1, div1, null);
      insert_hydration(target, t10, anchor);
      insert_hydration(target, div2, anchor);
      append_hydration(div2, span2);
      append_hydration(div2, t12);
      mount_component(toggle2, div2, null);
      insert_hydration(target, t13, anchor);
      insert_hydration(target, div3, anchor);
      append_hydration(div3, span3);
      append_hydration(div3, t15);
      mount_component(toggle3, div3, null);
      insert_hydration(target, t16, anchor);
      insert_hydration(target, div4, anchor);
      append_hydration(div4, span4);
      append_hydration(div4, t18);
      mount_component(toggle4, div4, null);
      insert_hydration(target, t19, anchor);
      insert_hydration(target, div5, anchor);
      append_hydration(div5, span5);
      append_hydration(div5, t21);
      mount_component(toggle5, div5, null);
      insert_hydration(target, t22, anchor);
      insert_hydration(target, div6, anchor);
      append_hydration(div6, span6);
      append_hydration(div6, t24);
      mount_component(toggle6, div6, null);
      insert_hydration(target, t25, anchor);
      insert_hydration(target, div7, anchor);
      append_hydration(div7, span7);
      append_hydration(div7, t27);
      mount_component(toggle7, div7, null);
      insert_hydration(target, t28, anchor);
      insert_hydration(target, div8, anchor);
      append_hydration(div8, span8);
      append_hydration(div8, t30);
      mount_component(toggle8, div8, null);
      insert_hydration(target, t31, anchor);
      insert_hydration(target, div9, anchor);
      append_hydration(div9, span9);
      append_hydration(div9, t33);
      mount_component(toggle9, div9, null);
      insert_hydration(target, t34, anchor);
      insert_hydration(target, div10, anchor);
      append_hydration(div10, span10);
      append_hydration(div10, t36);
      mount_component(toggle10, div10, null);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (!updating_value && dirty[0] & /*url*/
      1) {
        updating_value = true;
        input_changes.value = /*url*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      const inputnumber0_changes = {};
      if (!updating_value_1 && dirty[0] & /*height*/
      2) {
        updating_value_1 = true;
        inputnumber0_changes.value = /*height*/
        ctx2[1];
        add_flush_callback(() => updating_value_1 = false);
      }
      inputnumber0.$set(inputnumber0_changes);
      const inputnumber1_changes = {};
      if (!updating_value_2 && dirty[0] & /*width*/
      4) {
        updating_value_2 = true;
        inputnumber1_changes.value = /*width*/
        ctx2[2];
        add_flush_callback(() => updating_value_2 = false);
      }
      inputnumber1.$set(inputnumber1_changes);
      const toggle0_changes = {};
      if (!updating_on && dirty[0] & /*allowScripts*/
      2048) {
        updating_on = true;
        toggle0_changes.on = /*allowScripts*/
        ctx2[11];
        add_flush_callback(() => updating_on = false);
      }
      toggle0.$set(toggle0_changes);
      const toggle1_changes = {};
      if (!updating_on_1 && dirty[0] & /*allowForms*/
      8) {
        updating_on_1 = true;
        toggle1_changes.on = /*allowForms*/
        ctx2[3];
        add_flush_callback(() => updating_on_1 = false);
      }
      toggle1.$set(toggle1_changes);
      const toggle2_changes = {};
      if (!updating_on_2 && dirty[0] & /*allowModals*/
      16) {
        updating_on_2 = true;
        toggle2_changes.on = /*allowModals*/
        ctx2[4];
        add_flush_callback(() => updating_on_2 = false);
      }
      toggle2.$set(toggle2_changes);
      const toggle3_changes = {};
      if (!updating_on_3 && dirty[0] & /*allowOrientationLock*/
      32) {
        updating_on_3 = true;
        toggle3_changes.on = /*allowOrientationLock*/
        ctx2[5];
        add_flush_callback(() => updating_on_3 = false);
      }
      toggle3.$set(toggle3_changes);
      const toggle4_changes = {};
      if (!updating_on_4 && dirty[0] & /*allowPointerLock*/
      64) {
        updating_on_4 = true;
        toggle4_changes.on = /*allowPointerLock*/
        ctx2[6];
        add_flush_callback(() => updating_on_4 = false);
      }
      toggle4.$set(toggle4_changes);
      const toggle5_changes = {};
      if (!updating_on_5 && dirty[0] & /*allowPopups*/
      128) {
        updating_on_5 = true;
        toggle5_changes.on = /*allowPopups*/
        ctx2[7];
        add_flush_callback(() => updating_on_5 = false);
      }
      toggle5.$set(toggle5_changes);
      const toggle6_changes = {};
      if (!updating_on_6 && dirty[0] & /*allowPopupsToEscapeSandbox*/
      256) {
        updating_on_6 = true;
        toggle6_changes.on = /*allowPopupsToEscapeSandbox*/
        ctx2[8];
        add_flush_callback(() => updating_on_6 = false);
      }
      toggle6.$set(toggle6_changes);
      const toggle7_changes = {};
      if (!updating_on_7 && dirty[0] & /*allowPresentation*/
      512) {
        updating_on_7 = true;
        toggle7_changes.on = /*allowPresentation*/
        ctx2[9];
        add_flush_callback(() => updating_on_7 = false);
      }
      toggle7.$set(toggle7_changes);
      const toggle8_changes = {};
      if (!updating_on_8 && dirty[0] & /*allowSameOrigin*/
      1024) {
        updating_on_8 = true;
        toggle8_changes.on = /*allowSameOrigin*/
        ctx2[10];
        add_flush_callback(() => updating_on_8 = false);
      }
      toggle8.$set(toggle8_changes);
      const toggle9_changes = {};
      if (!updating_on_9 && dirty[0] & /*allowTopNavigation*/
      4096) {
        updating_on_9 = true;
        toggle9_changes.on = /*allowTopNavigation*/
        ctx2[12];
        add_flush_callback(() => updating_on_9 = false);
      }
      toggle9.$set(toggle9_changes);
      const toggle10_changes = {};
      if (!updating_on_10 && dirty[0] & /*allowTopLevelNavigationByUserActivation*/
      8192) {
        updating_on_10 = true;
        toggle10_changes.on = /*allowTopLevelNavigationByUserActivation*/
        ctx2[13];
        add_flush_callback(() => updating_on_10 = false);
      }
      toggle10.$set(toggle10_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      transition_in(inputnumber0.$$.fragment, local);
      transition_in(inputnumber1.$$.fragment, local);
      transition_in(toggle0.$$.fragment, local);
      transition_in(toggle1.$$.fragment, local);
      transition_in(toggle2.$$.fragment, local);
      transition_in(toggle3.$$.fragment, local);
      transition_in(toggle4.$$.fragment, local);
      transition_in(toggle5.$$.fragment, local);
      transition_in(toggle6.$$.fragment, local);
      transition_in(toggle7.$$.fragment, local);
      transition_in(toggle8.$$.fragment, local);
      transition_in(toggle9.$$.fragment, local);
      transition_in(toggle10.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      transition_out(inputnumber0.$$.fragment, local);
      transition_out(inputnumber1.$$.fragment, local);
      transition_out(toggle0.$$.fragment, local);
      transition_out(toggle1.$$.fragment, local);
      transition_out(toggle2.$$.fragment, local);
      transition_out(toggle3.$$.fragment, local);
      transition_out(toggle4.$$.fragment, local);
      transition_out(toggle5.$$.fragment, local);
      transition_out(toggle6.$$.fragment, local);
      transition_out(toggle7.$$.fragment, local);
      transition_out(toggle8.$$.fragment, local);
      transition_out(toggle9.$$.fragment, local);
      transition_out(toggle10.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(p);
        detach(t4);
        detach(div0);
        detach(t7);
        detach(div1);
        detach(t10);
        detach(div2);
        detach(t13);
        detach(div3);
        detach(t16);
        detach(div4);
        detach(t19);
        detach(div5);
        detach(t22);
        detach(div6);
        detach(t25);
        detach(div7);
        detach(t28);
        detach(div8);
        detach(t31);
        detach(div9);
        detach(t34);
        detach(div10);
      }
      destroy_component(input, detaching);
      destroy_component(inputnumber0, detaching);
      destroy_component(inputnumber1, detaching);
      destroy_component(toggle0);
      destroy_component(toggle1);
      destroy_component(toggle2);
      destroy_component(toggle3);
      destroy_component(toggle4);
      destroy_component(toggle5);
      destroy_component(toggle6);
      destroy_component(toggle7);
      destroy_component(toggle8);
      destroy_component(toggle9);
      destroy_component(toggle10);
    }
  };
}
function instance$g($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let url;
  let height;
  let width;
  let allowForms;
  let allowModals;
  let allowOrientationLock;
  let allowPointerLock;
  let allowPopups;
  let allowPopupsToEscapeSandbox;
  let allowPresentation;
  let allowSameOrigin;
  let allowScripts;
  let allowTopNavigation;
  let allowTopLevelNavigationByUserActivation;
  function onSettings(s3) {
    $$invalidate(0, url = s3 == null ? void 0 : s3.url);
    $$invalidate(1, height = s3 == null ? void 0 : s3.height);
    $$invalidate(2, width = s3 == null ? void 0 : s3.width);
    $$invalidate(3, allowForms = s3 == null ? void 0 : s3.allowForms);
    $$invalidate(4, allowModals = s3 == null ? void 0 : s3.allowModals);
    $$invalidate(5, allowOrientationLock = s3 == null ? void 0 : s3.allowOrientationLock);
    $$invalidate(6, allowPointerLock = s3 == null ? void 0 : s3.allowPointerLock);
    $$invalidate(7, allowPopups = s3 == null ? void 0 : s3.allowPopups);
    $$invalidate(8, allowPopupsToEscapeSandbox = s3 == null ? void 0 : s3.allowPopupsToEscapeSandbox);
    $$invalidate(9, allowPresentation = s3 == null ? void 0 : s3.allowPresentation);
    $$invalidate(10, allowSameOrigin = s3 == null ? void 0 : s3.allowSameOrigin);
    $$invalidate(11, allowScripts = s3 == null ? void 0 : s3.allowScripts);
    $$invalidate(12, allowTopNavigation = s3 == null ? void 0 : s3.allowTopNavigation);
    $$invalidate(13, allowTopLevelNavigationByUserActivation = s3 == null ? void 0 : s3.allowTopLevelNavigationByUserActivation);
  }
  function onChange(_url, _height, _width, _allowForms, _allowModals, _allowOrientationLock, _allowPointerLock, _allowPopups, _allowPopupsToEscapeSandbox, _allowPresentation, _allowSameOrigin, _allowScripts, _allowTopNavigation, _allowTopLevelNavigationByUserActivation) {
    if (_url !== settings.url || _height !== settings.height || _width !== settings.width || _allowForms !== settings.allowForms || _allowModals !== settings.allowModals || _allowOrientationLock !== settings.allowOrientationLock || _allowPointerLock !== settings.allowPointerLock || _allowPopups !== settings.allowPopups || _allowPopupsToEscapeSandbox !== settings.allowPopupsToEscapeSandbox || _allowPresentation !== settings.allowPresentation || _allowSameOrigin !== settings.allowSameOrigin || _allowScripts !== settings.allowScripts || _allowTopNavigation !== settings.allowTopNavigation || _allowTopLevelNavigationByUserActivation !== settings.allowTopLevelNavigationByUserActivation) {
      dispatch("settings", {
        ...settings,
        url: _url,
        height: _height,
        width: _width,
        allowForms: _allowForms,
        allowModals: _allowModals,
        allowOrientationLock: _allowOrientationLock,
        allowPointerLock: _allowPointerLock,
        allowPopups: _allowPopups,
        allowPopupsToEscapeSandbox: _allowPopupsToEscapeSandbox,
        allowPresentation: _allowPresentation,
        allowSameOrigin: _allowSameOrigin,
        allowScripts: _allowScripts,
        allowTopNavigation: _allowTopNavigation,
        allowTopLevelNavigationByUserActivation: _allowTopLevelNavigationByUserActivation
      });
    }
  }
  function input_value_binding(value) {
    url = value;
    $$invalidate(0, url);
  }
  function inputnumber0_value_binding(value) {
    height = value;
    $$invalidate(1, height);
  }
  function inputnumber1_value_binding(value) {
    width = value;
    $$invalidate(2, width);
  }
  function toggle0_on_binding(value) {
    allowScripts = value;
    $$invalidate(11, allowScripts);
  }
  function toggle1_on_binding(value) {
    allowForms = value;
    $$invalidate(3, allowForms);
  }
  function toggle2_on_binding(value) {
    allowModals = value;
    $$invalidate(4, allowModals);
  }
  function toggle3_on_binding(value) {
    allowOrientationLock = value;
    $$invalidate(5, allowOrientationLock);
  }
  function toggle4_on_binding(value) {
    allowPointerLock = value;
    $$invalidate(6, allowPointerLock);
  }
  function toggle5_on_binding(value) {
    allowPopups = value;
    $$invalidate(7, allowPopups);
  }
  function toggle6_on_binding(value) {
    allowPopupsToEscapeSandbox = value;
    $$invalidate(8, allowPopupsToEscapeSandbox);
  }
  function toggle7_on_binding(value) {
    allowPresentation = value;
    $$invalidate(9, allowPresentation);
  }
  function toggle8_on_binding(value) {
    allowSameOrigin = value;
    $$invalidate(10, allowSameOrigin);
  }
  function toggle9_on_binding(value) {
    allowTopNavigation = value;
    $$invalidate(12, allowTopNavigation);
  }
  function toggle10_on_binding(value) {
    allowTopLevelNavigationByUserActivation = value;
    $$invalidate(13, allowTopLevelNavigationByUserActivation);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(14, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*settings*/
    16384) {
      onSettings(settings);
    }
    if ($$self.$$.dirty[0] & /*url, height, width, allowForms, allowModals, allowOrientationLock, allowPointerLock, allowPopups, allowPopupsToEscapeSandbox, allowPresentation, allowSameOrigin, allowScripts, allowTopNavigation, allowTopLevelNavigationByUserActivation*/
    16383) {
      onChange(url, height, width, allowForms, allowModals, allowOrientationLock, allowPointerLock, allowPopups, allowPopupsToEscapeSandbox, allowPresentation, allowSameOrigin, allowScripts, allowTopNavigation, allowTopLevelNavigationByUserActivation);
    }
  };
  return [
    url,
    height,
    width,
    allowForms,
    allowModals,
    allowOrientationLock,
    allowPointerLock,
    allowPopups,
    allowPopupsToEscapeSandbox,
    allowPresentation,
    allowSameOrigin,
    allowScripts,
    allowTopNavigation,
    allowTopLevelNavigationByUserActivation,
    settings,
    input_value_binding,
    inputnumber0_value_binding,
    inputnumber1_value_binding,
    toggle0_on_binding,
    toggle1_on_binding,
    toggle2_on_binding,
    toggle3_on_binding,
    toggle4_on_binding,
    toggle5_on_binding,
    toggle6_on_binding,
    toggle7_on_binding,
    toggle8_on_binding,
    toggle9_on_binding,
    toggle10_on_binding
  ];
}
class IframeEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$g, create_fragment$i, safe_not_equal, { settings: 14 }, null, [-1, -1]);
  }
}
function create_else_block_1$1(ctx) {
  let t2;
  let await_block_anchor;
  let promise;
  let if_block = !/*hideTitle*/
  ctx[5] && create_if_block_3$4(ctx);
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    value: 11
  };
  handle_promise(promise = /*$homey*/
  ctx[7].baseUrl, info);
  return {
    c() {
      if (if_block)
        if_block.c();
      t2 = space();
      await_block_anchor = empty();
      info.block.c();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
      await_block_anchor = empty();
      info.block.l(nodes);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (!/*hideTitle*/
      ctx[5]) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block_3$4(ctx);
          if_block.c();
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      info.ctx = ctx;
      if (dirty & /*$homey*/
      128 && promise !== (promise = /*$homey*/
      ctx[7].baseUrl) && handle_promise(promise, info))
        ;
      else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(await_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_if_block$c(ctx) {
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*device*/
      ctx2[1] === void 0 && /*settings*/
      ctx2[0].deviceId !== void 0
    )
      return create_if_block_1$9;
    if (
      /*image*/
      ctx2[6] === void 0 && /*settings*/
      ctx2[0].imageId !== void 0
    )
      return create_if_block_2$6;
    return create_else_block$4;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_if_block_3$4(ctx) {
  var _a2, _b2;
  let div2;
  let div0;
  let t0_value = (
    /*device*/
    ((_a2 = ctx[1]) == null ? void 0 : _a2.name) + ""
  );
  let t0;
  let t1;
  let div1;
  let t2_value = (
    /*image*/
    ((_b2 = ctx[6]) == null ? void 0 : _b2.title) + ""
  );
  let t2;
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      div2 = claim_element(nodes, "DIV", { class: true, style: true });
      var div2_nodes = children(div2);
      div0 = claim_element(div2_nodes, "DIV", {});
      var div0_nodes = children(div0);
      t0 = claim_text(div0_nodes, t0_value);
      div0_nodes.forEach(detach);
      t1 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      t2 = claim_text(div1_nodes, t2_value);
      div1_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div1, "class", "ml-4 font-extralight");
      attr(div2, "class", "flex pl-2 pb-2 absolute left-0 bottom-0 w-full");
      set_style(
        div2,
        "color",
        /*fontColor*/
        ctx[4]
      );
      toggle_class(
        div2,
        "backdrop-blur",
        /*fontBlur*/
        ctx[3]
      );
    },
    m(target, anchor) {
      insert_hydration(target, div2, anchor);
      append_hydration(div2, div0);
      append_hydration(div0, t0);
      append_hydration(div2, t1);
      append_hydration(div2, div1);
      append_hydration(div1, t2);
    },
    p(ctx2, dirty) {
      var _a3, _b3;
      if (dirty & /*device*/
      2 && t0_value !== (t0_value = /*device*/
      ((_a3 = ctx2[1]) == null ? void 0 : _a3.name) + ""))
        set_data(t0, t0_value);
      if (dirty & /*image*/
      64 && t2_value !== (t2_value = /*image*/
      ((_b3 = ctx2[6]) == null ? void 0 : _b3.title) + ""))
        set_data(t2, t2_value);
      if (dirty & /*fontColor*/
      16) {
        set_style(
          div2,
          "color",
          /*fontColor*/
          ctx2[4]
        );
      }
      if (dirty & /*fontBlur*/
      8) {
        toggle_class(
          div2,
          "backdrop-blur",
          /*fontBlur*/
          ctx2[3]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
    }
  };
}
function create_catch_block(ctx) {
  return {
    c: noop$1,
    l: noop$1,
    m: noop$1,
    p: noop$1,
    d: noop$1
  };
}
function create_then_block(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      this.h();
    },
    l(nodes) {
      img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
      this.h();
    },
    h() {
      attr(img, "class", "w-full h-full");
      if (!src_url_equal(img.src, img_src_value = /*url*/
      ctx[11] + /*image*/
      ctx[6].imageObj.url + "?v=" + /*refreshSlug*/
      ctx[2]))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*image*/
      ctx[6].title + " refreshed: " + /*refreshSlug*/
      ctx[2]);
    },
    m(target, anchor) {
      insert_hydration(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$homey, image, refreshSlug*/
      196 && !src_url_equal(img.src, img_src_value = /*url*/
      ctx2[11] + /*image*/
      ctx2[6].imageObj.url + "?v=" + /*refreshSlug*/
      ctx2[2])) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*image, refreshSlug*/
      68 && img_alt_value !== (img_alt_value = /*image*/
      ctx2[6].title + " refreshed: " + /*refreshSlug*/
      ctx2[2])) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_pending_block(ctx) {
  let t2;
  return {
    c() {
      t2 = text("...");
    },
    l(nodes) {
      t2 = claim_text(nodes, "...");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_else_block$4(ctx) {
  let span;
  let textContent = "Image not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1wts2m6")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_2$6(ctx) {
  let span;
  let textContent = "Image not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1be1s2m")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$9(ctx) {
  let span;
  let textContent = "Device not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-izam8p")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$h(ctx) {
  let div;
  function select_block_type(ctx2, dirty) {
    if (
      /*device*/
      ctx2[1] === void 0 || /*image*/
      ctx2[6] === void 0
    )
      return create_if_block$c;
    return create_else_block_1$1;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "relative w-full h-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_block.m(div, null);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_block.d();
    }
  };
}
function instance$f($$self, $$props, $$invalidate) {
  let device;
  let image;
  let hideTitle;
  let fontColor;
  let fontBlur;
  let $devices;
  let $homey;
  component_subscribe($$self, devices, ($$value) => $$invalidate(10, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(7, $homey = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  let refreshSlug = 0;
  let refreshClear;
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(8, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$devices, settings*/
    1025) {
      $$invalidate(1, device = $devices[settings.deviceId ?? ""]);
    }
    if ($$self.$$.dirty & /*device, settings*/
    3) {
      $$invalidate(6, image = device == null ? void 0 : device.images.find((image2) => image2.id === settings.imageId));
    }
    if ($$self.$$.dirty & /*refreshClear, settings*/
    513) {
      {
        if (refreshClear !== void 0)
          clearInterval(refreshClear);
        if (settings.refresh !== void 0 && settings.refresh > 0) {
          $$invalidate(9, refreshClear = setInterval(
            () => {
              $$invalidate(2, refreshSlug = Date.now());
            },
            settings.refresh * 1e3
          ));
        }
      }
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(5, hideTitle = (settings == null ? void 0 : settings.hideTitle) ?? false);
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(4, fontColor = (settings == null ? void 0 : settings.fontColor) ? settings.fontColor : "black");
    }
    if ($$self.$$.dirty & /*settings*/
    1) {
      $$invalidate(3, fontBlur = (settings == null ? void 0 : settings.fontBlur) ?? false);
    }
  };
  return [
    settings,
    device,
    refreshSlug,
    fontBlur,
    fontColor,
    hideTitle,
    image,
    $homey,
    context,
    refreshClear,
    $devices
  ];
}
class ImageWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$f, create_fragment$h, safe_not_equal, { settings: 0, context: 8 });
  }
}
function get_each_context$8(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[26] = list[i2];
  return child_ctx;
}
function get_each_context_1$3(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[26] = list[i2];
  return child_ctx;
}
function get_each_context_2$1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[26] = list[i2];
  return child_ctx;
}
function create_if_block_1$8(ctx) {
  let select;
  let updating_value;
  let current;
  function select_value_binding(value) {
    ctx[12](value);
  }
  let select_props = {
    placeholder: "Image",
    name: "imageId",
    $$slots: { options: [create_options_slot_2$1] },
    $$scope: { ctx }
  };
  if (
    /*imageId*/
    ctx[1] !== void 0
  ) {
    select_props.value = /*imageId*/
    ctx[1];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  return {
    c() {
      create_component(select.$$.fragment);
    },
    l(nodes) {
      claim_component(select.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_changes = {};
      if (dirty[0] & /*images*/
      64 | dirty[1] & /*$$scope*/
      4) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty[0] & /*imageId*/
      2) {
        updating_value = true;
        select_changes.value = /*imageId*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select, detaching);
    }
  };
}
function create_each_block_2$1(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[26]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_option_changes = {};
      if (dirty[0] & /*images*/
      64)
        select_options_option_changes.option = /*option*/
        ctx2[26];
      select_options_option.$set(select_options_option_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot_4$4(ctx) {
  let each_1_anchor;
  let current;
  let each_value_2 = ensure_array_like(
    /*images*/
    ctx[6]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_2.length; i2 += 1) {
    each_blocks[i2] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*images*/
      64) {
        each_value_2 = ensure_array_like(
          /*images*/
          ctx2[6]
        );
        let i2;
        for (i2 = 0; i2 < each_value_2.length; i2 += 1) {
          const child_ctx = get_each_context_2$1(ctx2, each_value_2, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_2$1(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_2.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_2.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot_2$1(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      $$slots: { default: [create_default_slot_4$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty[0] & /*images*/
      64 | dirty[1] & /*$$scope*/
      4) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_each_block_1$3(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[26]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot_3$5(ctx) {
  let each_1_anchor;
  let current;
  let each_value_1 = ensure_array_like(
    /*refreshOptions*/
    ctx[7]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*refreshOptions*/
      128) {
        each_value_1 = ensure_array_like(
          /*refreshOptions*/
          ctx2[7]
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$3(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_1$3(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot_1$1(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      $$slots: { default: [create_default_slot_3$5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty[1] & /*$$scope*/
      4) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_default_slot_2$5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Hide title");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Hide title");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_label_slot_1$2(ctx) {
  let toggle_contentright_label;
  let current;
  toggle_contentright_label = new Toggle$1.ContentRight.Label({
    props: {
      slot: "label",
      $$slots: { default: [create_default_slot_2$5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(toggle_contentright_label.$$.fragment);
    },
    l(nodes) {
      claim_component(toggle_contentright_label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(toggle_contentright_label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_contentright_label_changes = {};
      if (dirty[1] & /*$$scope*/
      4) {
        toggle_contentright_label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      toggle_contentright_label.$set(toggle_contentright_label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle_contentright_label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle_contentright_label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle_contentright_label, detaching);
    }
  };
}
function create_content_right_slot_1(ctx) {
  let toggle_contentright;
  let current;
  toggle_contentright = new Toggle$1.ContentRight({
    props: {
      slot: "content-right",
      $$slots: { label: [create_label_slot_1$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(toggle_contentright.$$.fragment);
    },
    l(nodes) {
      claim_component(toggle_contentright.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(toggle_contentright, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_contentright_changes = {};
      if (dirty[1] & /*$$scope*/
      4) {
        toggle_contentright_changes.$$scope = { dirty, ctx: ctx2 };
      }
      toggle_contentright.$set(toggle_contentright_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle_contentright.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle_contentright.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle_contentright, detaching);
    }
  };
}
function create_if_block$b(ctx) {
  let toggle;
  let updating_on;
  let t2;
  let select;
  let updating_value;
  let current;
  function toggle_on_binding_1(value) {
    ctx[15](value);
  }
  let toggle_props = {
    name: "fontBlur",
    $$slots: {
      "content-right": [create_content_right_slot$1]
    },
    $$scope: { ctx }
  };
  if (
    /*fontBlur*/
    ctx[5] !== void 0
  ) {
    toggle_props.on = /*fontBlur*/
    ctx[5];
  }
  toggle = new Toggle$1({ props: toggle_props });
  binding_callbacks.push(() => bind(toggle, "on", toggle_on_binding_1));
  function select_value_binding_2(value) {
    ctx[16](value);
  }
  let select_props = {
    placeholder: "Font color",
    name: "fontColor",
    $$slots: { options: [create_options_slot$3] },
    $$scope: { ctx }
  };
  if (
    /*fontColor*/
    ctx[4] !== void 0
  ) {
    select_props.value = /*fontColor*/
    ctx[4];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding_2));
  return {
    c() {
      create_component(toggle.$$.fragment);
      t2 = space();
      create_component(select.$$.fragment);
    },
    l(nodes) {
      claim_component(toggle.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(select.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(select, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty[1] & /*$$scope*/
      4) {
        toggle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_on && dirty[0] & /*fontBlur*/
      32) {
        updating_on = true;
        toggle_changes.on = /*fontBlur*/
        ctx2[5];
        add_flush_callback(() => updating_on = false);
      }
      toggle.$set(toggle_changes);
      const select_changes = {};
      if (dirty[1] & /*$$scope*/
      4) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty[0] & /*fontColor*/
      16) {
        updating_value = true;
        select_changes.value = /*fontColor*/
        ctx2[4];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      transition_in(select.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      transition_out(select.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(toggle, detaching);
      destroy_component(select, detaching);
    }
  };
}
function create_default_slot_1$5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Blur background");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Blur background");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_label_slot$3(ctx) {
  let toggle_contentright_label;
  let current;
  toggle_contentright_label = new Toggle$1.ContentRight.Label({
    props: {
      slot: "label",
      $$slots: { default: [create_default_slot_1$5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(toggle_contentright_label.$$.fragment);
    },
    l(nodes) {
      claim_component(toggle_contentright_label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(toggle_contentright_label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_contentright_label_changes = {};
      if (dirty[1] & /*$$scope*/
      4) {
        toggle_contentright_label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      toggle_contentright_label.$set(toggle_contentright_label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle_contentright_label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle_contentright_label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle_contentright_label, detaching);
    }
  };
}
function create_content_right_slot$1(ctx) {
  let toggle_contentright;
  let current;
  toggle_contentright = new Toggle$1.ContentRight({
    props: {
      slot: "content-right",
      $$slots: { label: [create_label_slot$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(toggle_contentright.$$.fragment);
    },
    l(nodes) {
      claim_component(toggle_contentright.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(toggle_contentright, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_contentright_changes = {};
      if (dirty[1] & /*$$scope*/
      4) {
        toggle_contentright_changes.$$scope = { dirty, ctx: ctx2 };
      }
      toggle_contentright.$set(toggle_contentright_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle_contentright.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle_contentright.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle_contentright, detaching);
    }
  };
}
function create_each_block$8(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[26]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot$9(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*colorOptions*/
    ctx[8]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$8(get_each_context$8(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*colorOptions*/
      256) {
        each_value = ensure_array_like(
          /*colorOptions*/
          ctx2[8]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$8(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$8(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot$3(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      $$slots: { default: [create_default_slot$9] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty[1] & /*$$scope*/
      4) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_fragment$g(ctx) {
  let devicepicker;
  let updating_deviceId;
  let t0;
  let div;
  let t1;
  let select;
  let updating_value;
  let t2;
  let toggle;
  let updating_on;
  let t3;
  let if_block1_anchor;
  let current;
  function devicepicker_deviceId_binding(value) {
    ctx[11](value);
  }
  let devicepicker_props = { deviceFilter: (
    /*deviceFilter*/
    ctx[9]
  ) };
  if (
    /*deviceId*/
    ctx[0] !== void 0
  ) {
    devicepicker_props.deviceId = /*deviceId*/
    ctx[0];
  }
  devicepicker = new DevicePicker({ props: devicepicker_props });
  binding_callbacks.push(() => bind(devicepicker, "deviceId", devicepicker_deviceId_binding));
  let if_block0 = (
    /*deviceId*/
    ctx[0] && create_if_block_1$8(ctx)
  );
  function select_value_binding_1(value) {
    ctx[13](value);
  }
  let select_props = {
    placeholder: "Refresh every",
    name: "refresh",
    $$slots: { options: [create_options_slot_1$1] },
    $$scope: { ctx }
  };
  if (
    /*refresh*/
    ctx[2] !== void 0
  ) {
    select_props.value = /*refresh*/
    ctx[2];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding_1));
  function toggle_on_binding(value) {
    ctx[14](value);
  }
  let toggle_props = {
    name: "hideTitle",
    $$slots: {
      "content-right": [create_content_right_slot_1]
    },
    $$scope: { ctx }
  };
  if (
    /*hideTitle*/
    ctx[3] !== void 0
  ) {
    toggle_props.on = /*hideTitle*/
    ctx[3];
  }
  toggle = new Toggle$1({ props: toggle_props });
  binding_callbacks.push(() => bind(toggle, "on", toggle_on_binding));
  let if_block1 = !/*hideTitle*/
  ctx[3] && create_if_block$b(ctx);
  return {
    c() {
      create_component(devicepicker.$$.fragment);
      t0 = space();
      div = element("div");
      if (if_block0)
        if_block0.c();
      t1 = space();
      create_component(select.$$.fragment);
      t2 = space();
      create_component(toggle.$$.fragment);
      t3 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    l(nodes) {
      claim_component(devicepicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      if (if_block0)
        if_block0.l(div_nodes);
      div_nodes.forEach(detach);
      t1 = claim_space(nodes);
      claim_component(select.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(toggle.$$.fragment, nodes);
      t3 = claim_space(nodes);
      if (if_block1)
        if_block1.l(nodes);
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      mount_component(devicepicker, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div, anchor);
      if (if_block0)
        if_block0.m(div, null);
      insert_hydration(target, t1, anchor);
      mount_component(select, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(toggle, target, anchor);
      insert_hydration(target, t3, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert_hydration(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const devicepicker_changes = {};
      if (!updating_deviceId && dirty[0] & /*deviceId*/
      1) {
        updating_deviceId = true;
        devicepicker_changes.deviceId = /*deviceId*/
        ctx2[0];
        add_flush_callback(() => updating_deviceId = false);
      }
      devicepicker.$set(devicepicker_changes);
      if (
        /*deviceId*/
        ctx2[0]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*deviceId*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$8(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, null);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      const select_changes = {};
      if (dirty[1] & /*$$scope*/
      4) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty[0] & /*refresh*/
      4) {
        updating_value = true;
        select_changes.value = /*refresh*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
      const toggle_changes = {};
      if (dirty[1] & /*$$scope*/
      4) {
        toggle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_on && dirty[0] & /*hideTitle*/
      8) {
        updating_on = true;
        toggle_changes.on = /*hideTitle*/
        ctx2[3];
        add_flush_callback(() => updating_on = false);
      }
      toggle.$set(toggle_changes);
      if (!/*hideTitle*/
      ctx2[3]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*hideTitle*/
          8) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$b(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(devicepicker.$$.fragment, local);
      transition_in(if_block0);
      transition_in(select.$$.fragment, local);
      transition_in(toggle.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(devicepicker.$$.fragment, local);
      transition_out(if_block0);
      transition_out(select.$$.fragment, local);
      transition_out(toggle.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(if_block1_anchor);
      }
      destroy_component(devicepicker, detaching);
      if (if_block0)
        if_block0.d();
      destroy_component(select, detaching);
      destroy_component(toggle, detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
function instance$e($$self, $$props, $$invalidate) {
  let $devices;
  component_subscribe($$self, devices, ($$value) => $$invalidate(17, $devices = $$value));
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  const refreshOptions = [
    { value: "0", label: "Never" },
    { value: "1", label: "1 second" },
    { value: "5", label: "5 seconds" },
    { value: "15", label: "15 seconds" },
    { value: "30", label: "30 seconds" },
    { value: "60", label: "1 minute" },
    { value: "300", label: "5 minutes" },
    { value: "600", label: "10 minutes" },
    { value: "1800", label: "30 minutes" },
    { value: "3600", label: "1 hour" },
    { value: "21600", label: "6 hour" },
    { value: "43200", label: "12 hour" },
    { value: "86400", label: "24 hour" }
  ];
  const colorOptions = [
    { value: "black", label: "Black" },
    { value: "white", label: "White" },
    { value: "red", label: "Red" },
    { value: "green", label: "Green" },
    { value: "blue", label: "Blue" }
  ];
  let deviceId;
  let imageId;
  let refresh;
  let hideTitle;
  let fontColor;
  let fontBlur;
  const deviceFilter = (device) => device.images.length > 0;
  let images = [];
  function onSettings(s3) {
    $$invalidate(0, deviceId = settings == null ? void 0 : settings.deviceId);
    if (deviceId) {
      const image = ($devices[deviceId].images ?? []).find((i2) => i2.id === (settings == null ? void 0 : settings.imageId));
      if (image !== void 0) {
        $$invalidate(1, imageId = { value: image.id, label: image.title });
      }
    }
    $$invalidate(2, refresh = refreshOptions.find((r) => Number(r.value) === ((settings == null ? void 0 : settings.refresh) ?? 0)) ?? refreshOptions[0]);
    $$invalidate(3, hideTitle = (settings == null ? void 0 : settings.hideTitle) ?? false);
    $$invalidate(4, fontColor = colorOptions.find((c2) => c2.value === ((settings == null ? void 0 : settings.fontColor) ?? "black")) ?? colorOptions[0]);
    $$invalidate(5, fontBlur = (settings == null ? void 0 : settings.fontBlur) ?? false);
  }
  function onDevice(value) {
    if (value === void 0) {
      return;
    }
    $$invalidate(6, images = $devices[value].images.map((i2) => ({ value: i2.id, label: i2.title })));
    if (value === settings.deviceId) {
      return;
    }
    $$invalidate(1, imageId = void 0);
    const s3 = { ...settings, deviceId, imageId };
    dispatch("settings", s3);
  }
  function onImage(option) {
    if (option === void 0 || option.value === settings.imageId) {
      return;
    }
    const s3 = { ...settings, imageId: option.value };
    dispatch("settings", s3);
  }
  function onRefresh(option) {
    if (Number(option.value) !== settings.refresh) {
      const s3 = {
        ...settings,
        refresh: Number(option.value)
      };
      dispatch("settings", s3);
    }
  }
  function onHideTitle(value) {
    if (value !== settings.hideTitle) {
      const s3 = { ...settings, hideTitle: value };
      dispatch("settings", s3);
    }
  }
  function onFontColor(option) {
    if (option.value !== settings.fontColor) {
      const s3 = { ...settings, fontColor: option.value };
      dispatch("settings", s3);
    }
  }
  function onFontBlur(value) {
    if (value !== settings.fontBlur) {
      const s3 = { ...settings, fontBlur: value };
      dispatch("settings", s3);
    }
  }
  function devicepicker_deviceId_binding(value) {
    deviceId = value;
    $$invalidate(0, deviceId);
  }
  function select_value_binding(value) {
    imageId = value;
    $$invalidate(1, imageId);
  }
  function select_value_binding_1(value) {
    refresh = value;
    $$invalidate(2, refresh);
  }
  function toggle_on_binding(value) {
    hideTitle = value;
    $$invalidate(3, hideTitle);
  }
  function toggle_on_binding_1(value) {
    fontBlur = value;
    $$invalidate(5, fontBlur);
  }
  function select_value_binding_2(value) {
    fontColor = value;
    $$invalidate(4, fontColor);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(10, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*settings*/
    1024) {
      onSettings();
    }
    if ($$self.$$.dirty[0] & /*deviceId*/
    1) {
      onDevice(deviceId);
    }
    if ($$self.$$.dirty[0] & /*imageId*/
    2) {
      onImage(imageId);
    }
    if ($$self.$$.dirty[0] & /*refresh*/
    4) {
      onRefresh(refresh);
    }
    if ($$self.$$.dirty[0] & /*hideTitle*/
    8) {
      onHideTitle(hideTitle);
    }
    if ($$self.$$.dirty[0] & /*fontColor*/
    16) {
      onFontColor(fontColor);
    }
    if ($$self.$$.dirty[0] & /*fontBlur*/
    32) {
      onFontBlur(fontBlur);
    }
  };
  return [
    deviceId,
    imageId,
    refresh,
    hideTitle,
    fontColor,
    fontBlur,
    images,
    refreshOptions,
    colorOptions,
    deviceFilter,
    settings,
    devicepicker_deviceId_binding,
    select_value_binding,
    select_value_binding_1,
    toggle_on_binding,
    toggle_on_binding_1,
    select_value_binding_2
  ];
}
class ImageEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$e, create_fragment$g, safe_not_equal, { settings: 10 }, null, [-1, -1]);
  }
}
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */
function round$1(v) {
  return v + 0.5 | 0;
}
const lim = (v, l, h3) => Math.max(Math.min(v, h3), l);
function p2b(v) {
  return lim(round$1(v * 2.55), 0, 255);
}
function n2b(v) {
  return lim(round$1(v * 255), 0, 255);
}
function b2n(v) {
  return lim(round$1(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
  return lim(round$1(v * 100), 0, 100);
}
const map$1 = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };
const hex = [..."0123456789ABCDEF"];
const h1 = (b2) => hex[b2 & 15];
const h22 = (b2) => hex[(b2 & 240) >> 4] + hex[b2 & 15];
const eq = (b2) => (b2 & 240) >> 4 === (b2 & 15);
const isShort = (v) => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
function hexParse(str) {
  var len = str.length;
  var ret;
  if (str[0] === "#") {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map$1[str[1]] * 17,
        g: 255 & map$1[str[2]] * 17,
        b: 255 & map$1[str[3]] * 17,
        a: len === 5 ? map$1[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map$1[str[1]] << 4 | map$1[str[2]],
        g: map$1[str[3]] << 4 | map$1[str[4]],
        b: map$1[str[5]] << 4 | map$1[str[6]],
        a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
      };
    }
  }
  return ret;
}
const alpha = (a3, f) => a3 < 255 ? f(a3) : "";
function hexString(v) {
  var f = isShort(v) ? h1 : h22;
  return v ? "#" + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : void 0;
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h3, s3, l) {
  const a3 = s3 * Math.min(l, 1 - l);
  const f = (n, k2 = (n + h3 / 30) % 12) => l - a3 * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
  return [f(0), f(8), f(4)];
}
function hsv2rgbn(h3, s3, v) {
  const f = (n, k2 = (n + h3 / 60) % 6) => v - v * s3 * Math.max(Math.min(k2, 4 - k2, 1), 0);
  return [f(5), f(3), f(1)];
}
function hwb2rgbn(h3, w2, b2) {
  const rgb = hsl2rgbn(h3, 1, 0.5);
  let i2;
  if (w2 + b2 > 1) {
    i2 = 1 / (w2 + b2);
    w2 *= i2;
    b2 *= i2;
  }
  for (i2 = 0; i2 < 3; i2++) {
    rgb[i2] *= 1 - w2 - b2;
    rgb[i2] += w2;
  }
  return rgb;
}
function hueValue(r, g, b2, d3, max) {
  if (r === max) {
    return (g - b2) / d3 + (g < b2 ? 6 : 0);
  }
  if (g === max) {
    return (b2 - r) / d3 + 2;
  }
  return (r - g) / d3 + 4;
}
function rgb2hsl(v) {
  const range = 255;
  const r = v.r / range;
  const g = v.g / range;
  const b2 = v.b / range;
  const max = Math.max(r, g, b2);
  const min = Math.min(r, g, b2);
  const l = (max + min) / 2;
  let h3, s3, d3;
  if (max !== min) {
    d3 = max - min;
    s3 = l > 0.5 ? d3 / (2 - max - min) : d3 / (max + min);
    h3 = hueValue(r, g, b2, d3, max);
    h3 = h3 * 60 + 0.5;
  }
  return [h3 | 0, s3 || 0, l];
}
function calln(f, a3, b2, c2) {
  return (Array.isArray(a3) ? f(a3[0], a3[1], a3[2]) : f(a3, b2, c2)).map(n2b);
}
function hsl2rgb(h3, s3, l) {
  return calln(hsl2rgbn, h3, s3, l);
}
function hwb2rgb(h3, w2, b2) {
  return calln(hwb2rgbn, h3, w2, b2);
}
function hsv2rgb(h3, s3, v) {
  return calln(hsv2rgbn, h3, s3, v);
}
function hue(h3) {
  return (h3 % 360 + 360) % 360;
}
function hueParse(str) {
  const m3 = HUE_RE.exec(str);
  let a3 = 255;
  let v;
  if (!m3) {
    return;
  }
  if (m3[5] !== v) {
    a3 = m3[6] ? p2b(+m3[5]) : n2b(+m3[5]);
  }
  const h3 = hue(+m3[2]);
  const p1 = +m3[3] / 100;
  const p2 = +m3[4] / 100;
  if (m3[1] === "hwb") {
    v = hwb2rgb(h3, p1, p2);
  } else if (m3[1] === "hsv") {
    v = hsv2rgb(h3, p1, p2);
  } else {
    v = hsl2rgb(h3, p1, p2);
  }
  return {
    r: v[0],
    g: v[1],
    b: v[2],
    a: a3
  };
}
function rotate(v, deg) {
  var h3 = rgb2hsl(v);
  h3[0] = hue(h3[0] + deg);
  h3 = hsl2rgb(h3);
  v.r = h3[0];
  v.g = h3[1];
  v.b = h3[2];
}
function hslString(v) {
  if (!v) {
    return;
  }
  const a3 = rgb2hsl(v);
  const h3 = a3[0];
  const s3 = n2p(a3[1]);
  const l = n2p(a3[2]);
  return v.a < 255 ? `hsla(${h3}, ${s3}%, ${l}%, ${b2n(v.a)})` : `hsl(${h3}, ${s3}%, ${l}%)`;
}
const map$2 = {
  x: "dark",
  Z: "light",
  Y: "re",
  X: "blu",
  W: "gr",
  V: "medium",
  U: "slate",
  A: "ee",
  T: "ol",
  S: "or",
  B: "ra",
  C: "lateg",
  D: "ights",
  R: "in",
  Q: "turquois",
  E: "hi",
  P: "ro",
  O: "al",
  N: "le",
  M: "de",
  L: "yello",
  F: "en",
  K: "ch",
  G: "arks",
  H: "ea",
  I: "ightg",
  J: "wh"
};
const names$1 = {
  OiceXe: "f0f8ff",
  antiquewEte: "faebd7",
  aqua: "ffff",
  aquamarRe: "7fffd4",
  azuY: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "0",
  blanKedOmond: "ffebcd",
  Xe: "ff",
  XeviTet: "8a2be2",
  bPwn: "a52a2a",
  burlywood: "deb887",
  caMtXe: "5f9ea0",
  KartYuse: "7fff00",
  KocTate: "d2691e",
  cSO: "ff7f50",
  cSnflowerXe: "6495ed",
  cSnsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "ffff",
  xXe: "8b",
  xcyan: "8b8b",
  xgTMnPd: "b8860b",
  xWay: "a9a9a9",
  xgYF: "6400",
  xgYy: "a9a9a9",
  xkhaki: "bdb76b",
  xmagFta: "8b008b",
  xTivegYF: "556b2f",
  xSange: "ff8c00",
  xScEd: "9932cc",
  xYd: "8b0000",
  xsOmon: "e9967a",
  xsHgYF: "8fbc8f",
  xUXe: "483d8b",
  xUWay: "2f4f4f",
  xUgYy: "2f4f4f",
  xQe: "ced1",
  xviTet: "9400d3",
  dAppRk: "ff1493",
  dApskyXe: "bfff",
  dimWay: "696969",
  dimgYy: "696969",
  dodgerXe: "1e90ff",
  fiYbrick: "b22222",
  flSOwEte: "fffaf0",
  foYstWAn: "228b22",
  fuKsia: "ff00ff",
  gaRsbSo: "dcdcdc",
  ghostwEte: "f8f8ff",
  gTd: "ffd700",
  gTMnPd: "daa520",
  Way: "808080",
  gYF: "8000",
  gYFLw: "adff2f",
  gYy: "808080",
  honeyMw: "f0fff0",
  hotpRk: "ff69b4",
  RdianYd: "cd5c5c",
  Rdigo: "4b0082",
  ivSy: "fffff0",
  khaki: "f0e68c",
  lavFMr: "e6e6fa",
  lavFMrXsh: "fff0f5",
  lawngYF: "7cfc00",
  NmoncEffon: "fffacd",
  ZXe: "add8e6",
  ZcSO: "f08080",
  Zcyan: "e0ffff",
  ZgTMnPdLw: "fafad2",
  ZWay: "d3d3d3",
  ZgYF: "90ee90",
  ZgYy: "d3d3d3",
  ZpRk: "ffb6c1",
  ZsOmon: "ffa07a",
  ZsHgYF: "20b2aa",
  ZskyXe: "87cefa",
  ZUWay: "778899",
  ZUgYy: "778899",
  ZstAlXe: "b0c4de",
  ZLw: "ffffe0",
  lime: "ff00",
  limegYF: "32cd32",
  lRF: "faf0e6",
  magFta: "ff00ff",
  maPon: "800000",
  VaquamarRe: "66cdaa",
  VXe: "cd",
  VScEd: "ba55d3",
  VpurpN: "9370db",
  VsHgYF: "3cb371",
  VUXe: "7b68ee",
  VsprRggYF: "fa9a",
  VQe: "48d1cc",
  VviTetYd: "c71585",
  midnightXe: "191970",
  mRtcYam: "f5fffa",
  mistyPse: "ffe4e1",
  moccasR: "ffe4b5",
  navajowEte: "ffdead",
  navy: "80",
  Tdlace: "fdf5e6",
  Tive: "808000",
  TivedBb: "6b8e23",
  Sange: "ffa500",
  SangeYd: "ff4500",
  ScEd: "da70d6",
  pOegTMnPd: "eee8aa",
  pOegYF: "98fb98",
  pOeQe: "afeeee",
  pOeviTetYd: "db7093",
  papayawEp: "ffefd5",
  pHKpuff: "ffdab9",
  peru: "cd853f",
  pRk: "ffc0cb",
  plum: "dda0dd",
  powMrXe: "b0e0e6",
  purpN: "800080",
  YbeccapurpN: "663399",
  Yd: "ff0000",
  Psybrown: "bc8f8f",
  PyOXe: "4169e1",
  saddNbPwn: "8b4513",
  sOmon: "fa8072",
  sandybPwn: "f4a460",
  sHgYF: "2e8b57",
  sHshell: "fff5ee",
  siFna: "a0522d",
  silver: "c0c0c0",
  skyXe: "87ceeb",
  UXe: "6a5acd",
  UWay: "708090",
  UgYy: "708090",
  snow: "fffafa",
  sprRggYF: "ff7f",
  stAlXe: "4682b4",
  tan: "d2b48c",
  teO: "8080",
  tEstN: "d8bfd8",
  tomato: "ff6347",
  Qe: "40e0d0",
  viTet: "ee82ee",
  JHt: "f5deb3",
  wEte: "ffffff",
  wEtesmoke: "f5f5f5",
  Lw: "ffff00",
  LwgYF: "9acd32"
};
function unpack() {
  const unpacked = {};
  const keys = Object.keys(names$1);
  const tkeys = Object.keys(map$2);
  let i2, j, k2, ok, nk;
  for (i2 = 0; i2 < keys.length; i2++) {
    ok = nk = keys[i2];
    for (j = 0; j < tkeys.length; j++) {
      k2 = tkeys[j];
      nk = nk.replace(k2, map$2[k2]);
    }
    k2 = parseInt(names$1[ok], 16);
    unpacked[nk] = [k2 >> 16 & 255, k2 >> 8 & 255, k2 & 255];
  }
  return unpacked;
}
let names;
function nameParse(str) {
  if (!names) {
    names = unpack();
    names.transparent = [0, 0, 0, 0];
  }
  const a3 = names[str.toLowerCase()];
  return a3 && {
    r: a3[0],
    g: a3[1],
    b: a3[2],
    a: a3.length === 4 ? a3[3] : 255
  };
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
  const m3 = RGB_RE.exec(str);
  let a3 = 255;
  let r, g, b2;
  if (!m3) {
    return;
  }
  if (m3[7] !== r) {
    const v = +m3[7];
    a3 = m3[8] ? p2b(v) : lim(v * 255, 0, 255);
  }
  r = +m3[1];
  g = +m3[3];
  b2 = +m3[5];
  r = 255 & (m3[2] ? p2b(r) : lim(r, 0, 255));
  g = 255 & (m3[4] ? p2b(g) : lim(g, 0, 255));
  b2 = 255 & (m3[6] ? p2b(b2) : lim(b2, 0, 255));
  return {
    r,
    g,
    b: b2,
    a: a3
  };
}
function rgbString(v) {
  return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);
}
const to = (v) => v <= 31308e-7 ? v * 12.92 : Math.pow(v, 1 / 2.4) * 1.055 - 0.055;
const from = (v) => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
function interpolate$1(rgb1, rgb2, t2) {
  const r = from(b2n(rgb1.r));
  const g = from(b2n(rgb1.g));
  const b2 = from(b2n(rgb1.b));
  return {
    r: n2b(to(r + t2 * (from(b2n(rgb2.r)) - r))),
    g: n2b(to(g + t2 * (from(b2n(rgb2.g)) - g))),
    b: n2b(to(b2 + t2 * (from(b2n(rgb2.b)) - b2))),
    a: rgb1.a + t2 * (rgb2.a - rgb1.a)
  };
}
function modHSL(v, i2, ratio) {
  if (v) {
    let tmp = rgb2hsl(v);
    tmp[i2] = Math.max(0, Math.min(tmp[i2] + tmp[i2] * ratio, i2 === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v.r = tmp[0];
    v.g = tmp[1];
    v.b = tmp[2];
  }
}
function clone$1(v, proto) {
  return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
  var v = { r: 0, g: 0, b: 0, a: 255 };
  if (Array.isArray(input)) {
    if (input.length >= 3) {
      v = { r: input[0], g: input[1], b: input[2], a: 255 };
      if (input.length > 3) {
        v.a = n2b(input[3]);
      }
    }
  } else {
    v = clone$1(input, { r: 0, g: 0, b: 0, a: 1 });
    v.a = n2b(v.a);
  }
  return v;
}
function functionParse(str) {
  if (str.charAt(0) === "r") {
    return rgbParse(str);
  }
  return hueParse(str);
}
class Color {
  constructor(input) {
    if (input instanceof Color) {
      return input;
    }
    const type = typeof input;
    let v;
    if (type === "object") {
      v = fromObject(input);
    } else if (type === "string") {
      v = hexParse(input) || nameParse(input) || functionParse(input);
    }
    this._rgb = v;
    this._valid = !!v;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
    var v = clone$1(this._rgb);
    if (v) {
      v.a = b2n(v.a);
    }
    return v;
  }
  set rgb(obj) {
    this._rgb = fromObject(obj);
  }
  rgbString() {
    return this._valid ? rgbString(this._rgb) : void 0;
  }
  hexString() {
    return this._valid ? hexString(this._rgb) : void 0;
  }
  hslString() {
    return this._valid ? hslString(this._rgb) : void 0;
  }
  mix(color2, weight) {
    if (color2) {
      const c1 = this.rgb;
      const c2 = color2.rgb;
      let w2;
      const p = weight === w2 ? 0.5 : weight;
      const w3 = 2 * p - 1;
      const a3 = c1.a - c2.a;
      const w1 = ((w3 * a3 === -1 ? w3 : (w3 + a3) / (1 + w3 * a3)) + 1) / 2;
      w2 = 1 - w1;
      c1.r = 255 & w1 * c1.r + w2 * c2.r + 0.5;
      c1.g = 255 & w1 * c1.g + w2 * c2.g + 0.5;
      c1.b = 255 & w1 * c1.b + w2 * c2.b + 0.5;
      c1.a = p * c1.a + (1 - p) * c2.a;
      this.rgb = c1;
    }
    return this;
  }
  interpolate(color2, t2) {
    if (color2) {
      this._rgb = interpolate$1(this._rgb, color2._rgb, t2);
    }
    return this;
  }
  clone() {
    return new Color(this.rgb);
  }
  alpha(a3) {
    this._rgb.a = n2b(a3);
    return this;
  }
  clearer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 - ratio;
    return this;
  }
  greyscale() {
    const rgb = this._rgb;
    const val = round$1(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    rgb.r = rgb.g = rgb.b = val;
    return this;
  }
  opaquer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 + ratio;
    return this;
  }
  negate() {
    const v = this._rgb;
    v.r = 255 - v.r;
    v.g = 255 - v.g;
    v.b = 255 - v.b;
    return this;
  }
  lighten(ratio) {
    modHSL(this._rgb, 2, ratio);
    return this;
  }
  darken(ratio) {
    modHSL(this._rgb, 2, -ratio);
    return this;
  }
  saturate(ratio) {
    modHSL(this._rgb, 1, ratio);
    return this;
  }
  desaturate(ratio) {
    modHSL(this._rgb, 1, -ratio);
    return this;
  }
  rotate(deg) {
    rotate(this._rgb, deg);
    return this;
  }
}
/*!
 * Chart.js v4.4.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 */
function noop() {
}
const uid = (() => {
  let id = 0;
  return () => id++;
})();
function isNullOrUndef(value) {
  return value === null || typeof value === "undefined";
}
function isArray(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }
  const type = Object.prototype.toString.call(value);
  if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") {
    return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
function isNumberFinite(value) {
  return (typeof value === "number" || value instanceof Number) && isFinite(+value);
}
function finiteOrDefault(value, defaultValue) {
  return isNumberFinite(value) ? value : defaultValue;
}
function valueOrDefault(value, defaultValue) {
  return typeof value === "undefined" ? defaultValue : value;
}
const toPercentage = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : +value / dimension;
const toDimension = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === "function") {
    return fn.apply(thisArg, args);
  }
}
function each(loopable, fn, thisArg, reverse) {
  let i2, len, keys;
  if (isArray(loopable)) {
    len = loopable.length;
    if (reverse) {
      for (i2 = len - 1; i2 >= 0; i2--) {
        fn.call(thisArg, loopable[i2], i2);
      }
    } else {
      for (i2 = 0; i2 < len; i2++) {
        fn.call(thisArg, loopable[i2], i2);
      }
    }
  } else if (isObject(loopable)) {
    keys = Object.keys(loopable);
    len = keys.length;
    for (i2 = 0; i2 < len; i2++) {
      fn.call(thisArg, loopable[keys[i2]], keys[i2]);
    }
  }
}
function _elementsEqual(a0, a1) {
  let i2, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i2 = 0, ilen = a0.length; i2 < ilen; ++i2) {
    v0 = a0[i2];
    v1 = a1[i2];
    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }
  return true;
}
function clone(source) {
  if (isArray(source)) {
    return source.map(clone);
  }
  if (isObject(source)) {
    const target = /* @__PURE__ */ Object.create(null);
    const keys = Object.keys(source);
    const klen = keys.length;
    let k2 = 0;
    for (; k2 < klen; ++k2) {
      target[keys[k2]] = clone(source[keys[k2]]);
    }
    return target;
  }
  return source;
}
function isValidKey(key) {
  return [
    "__proto__",
    "prototype",
    "constructor"
  ].indexOf(key) === -1;
}
function _merger(key, target, source, options) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    merge(tval, sval, options);
  } else {
    target[key] = clone(sval);
  }
}
function merge(target, source, options) {
  const sources = isArray(source) ? source : [
    source
  ];
  const ilen = sources.length;
  if (!isObject(target)) {
    return target;
  }
  options = options || {};
  const merger = options.merger || _merger;
  let current;
  for (let i2 = 0; i2 < ilen; ++i2) {
    current = sources[i2];
    if (!isObject(current)) {
      continue;
    }
    const keys = Object.keys(current);
    for (let k2 = 0, klen = keys.length; k2 < klen; ++k2) {
      merger(keys[k2], target, current, options);
    }
  }
  return target;
}
function mergeIf(target, source) {
  return merge(target, source, {
    merger: _mergerIf
  });
}
function _mergerIf(key, target, source) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
    target[key] = clone(sval);
  }
}
const keyResolvers = {
  // Chart.helpers.core resolveObjectKey should resolve empty key to root object
  "": (v) => v,
  // default resolvers
  x: (o) => o.x,
  y: (o) => o.y
};
function _splitKey(key) {
  const parts = key.split(".");
  const keys = [];
  let tmp = "";
  for (const part of parts) {
    tmp += part;
    if (tmp.endsWith("\\")) {
      tmp = tmp.slice(0, -1) + ".";
    } else {
      keys.push(tmp);
      tmp = "";
    }
  }
  return keys;
}
function _getKeyResolver(key) {
  const keys = _splitKey(key);
  return (obj) => {
    for (const k2 of keys) {
      if (k2 === "") {
        break;
      }
      obj = obj && obj[k2];
    }
    return obj;
  };
}
function resolveObjectKey(obj, key) {
  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
  return resolver(obj);
}
function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value) => typeof value !== "undefined";
const isFunction = (value) => typeof value === "function";
const setsEqual = (a3, b2) => {
  if (a3.size !== b2.size) {
    return false;
  }
  for (const item of a3) {
    if (!b2.has(item)) {
      return false;
    }
  }
  return true;
};
function _isClickEvent(e2) {
  return e2.type === "mouseup" || e2.type === "click" || e2.type === "contextmenu";
}
const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function almostEquals(x2, y3, epsilon) {
  return Math.abs(x2 - y3) < epsilon;
}
function niceNum(range) {
  const roundedRange = Math.round(range);
  range = almostEquals(range, roundedRange, range / 1e3) ? roundedRange : range;
  const niceRange = Math.pow(10, Math.floor(log10(range)));
  const fraction = range / niceRange;
  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
  return niceFraction * niceRange;
}
function _factorize(value) {
  const result = [];
  const sqrt = Math.sqrt(value);
  let i2;
  for (i2 = 1; i2 < sqrt; i2++) {
    if (value % i2 === 0) {
      result.push(i2);
      result.push(value / i2);
    }
  }
  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }
  result.sort((a3, b2) => a3 - b2).pop();
  return result;
}
function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}
function almostWhole(x2, epsilon) {
  const rounded = Math.round(x2);
  return rounded - epsilon <= x2 && rounded + epsilon >= x2;
}
function _setMinAndMaxByKey(array, target, property) {
  let i2, ilen, value;
  for (i2 = 0, ilen = array.length; i2 < ilen; i2++) {
    value = array[i2][property];
    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}
function toRadians(degrees) {
  return degrees * (PI / 180);
}
function toDegrees(radians) {
  return radians * (180 / PI);
}
function _decimalPlaces(x2) {
  if (!isNumberFinite(x2)) {
    return;
  }
  let e2 = 1;
  let p = 0;
  while (Math.round(x2 * e2) / e2 !== x2) {
    e2 *= 10;
    p++;
  }
  return p;
}
function getAngleFromPoint(centrePoint, anglePoint) {
  const distanceFromXCenter = anglePoint.x - centrePoint.x;
  const distanceFromYCenter = anglePoint.y - centrePoint.y;
  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
  if (angle < -0.5 * PI) {
    angle += TAU;
  }
  return {
    angle,
    distance: radialDistanceFromCenter
  };
}
function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _angleDiff(a3, b2) {
  return (a3 - b2 + PITAU) % TAU - PI;
}
function _normalizeAngle(a3) {
  return (a3 % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
  const a3 = _normalizeAngle(angle);
  const s3 = _normalizeAngle(start);
  const e2 = _normalizeAngle(end);
  const angleToStart = _normalizeAngle(s3 - a3);
  const angleToEnd = _normalizeAngle(e2 - a3);
  const startToAngle = _normalizeAngle(a3 - s3);
  const endToAngle = _normalizeAngle(a3 - e2);
  return a3 === s3 || a3 === e2 || sameAngleIsFullCircle && s3 === e2 || angleToStart > angleToEnd && startToAngle < endToAngle;
}
function _limitValue(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function _int16Range(value) {
  return _limitValue(value, -32768, 32767);
}
function _isBetween(value, start, end, epsilon = 1e-6) {
  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table, value, cmp) {
  cmp = cmp || ((index2) => table[index2] < value);
  let hi = table.length - 1;
  let lo = 0;
  let mid;
  while (hi - lo > 1) {
    mid = lo + hi >> 1;
    if (cmp(mid)) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return {
    lo,
    hi
  };
}
const _lookupByKey = (table, key, value, last) => _lookup(table, value, last ? (index2) => {
  const ti = table[index2][key];
  return ti < value || ti === value && table[index2 + 1][key] === value;
} : (index2) => table[index2][key] < value);
const _rlookupByKey = (table, key, value) => _lookup(table, value, (index2) => table[index2][key] >= value);
function _filterBetween(values, min, max) {
  let start = 0;
  let end = values.length;
  while (start < end && values[start] < min) {
    start++;
  }
  while (end > start && values[end - 1] > max) {
    end--;
  }
  return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const arrayEvents = [
  "push",
  "pop",
  "shift",
  "splice",
  "unshift"
];
function listenArrayEvents(array, listener) {
  if (array._chartjs) {
    array._chartjs.listeners.push(listener);
    return;
  }
  Object.defineProperty(array, "_chartjs", {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [
        listener
      ]
    }
  });
  arrayEvents.forEach((key) => {
    const method = "_onData" + _capitalize(key);
    const base2 = array[key];
    Object.defineProperty(array, key, {
      configurable: true,
      enumerable: false,
      value(...args) {
        const res = base2.apply(this, args);
        array._chartjs.listeners.forEach((object) => {
          if (typeof object[method] === "function") {
            object[method](...args);
          }
        });
        return res;
      }
    });
  });
}
function unlistenArrayEvents(array, listener) {
  const stub = array._chartjs;
  if (!stub) {
    return;
  }
  const listeners = stub.listeners;
  const index2 = listeners.indexOf(listener);
  if (index2 !== -1) {
    listeners.splice(index2, 1);
  }
  if (listeners.length > 0) {
    return;
  }
  arrayEvents.forEach((key) => {
    delete array[key];
  });
  delete array._chartjs;
}
function _arrayUnique(items) {
  const set2 = new Set(items);
  if (set2.size === items.length) {
    return items;
  }
  return Array.from(set2);
}
const requestAnimFrame = function() {
  if (typeof window === "undefined") {
    return function(callback2) {
      return callback2();
    };
  }
  return window.requestAnimationFrame;
}();
function throttled(fn, thisArg) {
  let argsToUse = [];
  let ticking = false;
  return function(...args) {
    argsToUse = args;
    if (!ticking) {
      ticking = true;
      requestAnimFrame.call(window, () => {
        ticking = false;
        fn.apply(thisArg, argsToUse);
      });
    }
  };
}
function debounce(fn, delay) {
  let timeout;
  return function(...args) {
    if (delay) {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay, args);
    } else {
      fn.apply(this, args);
    }
    return delay;
  };
}
const _toLeftRightCenter = (align) => align === "start" ? "left" : align === "end" ? "right" : "center";
const _alignStartEnd = (align, start, end) => align === "start" ? start : align === "end" ? end : (start + end) / 2;
const _textX = (align, left, right, rtl) => {
  const check = rtl ? "left" : "right";
  return align === check ? right : align === "center" ? (left + right) / 2 : left;
};
function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
  const pointCount = points.length;
  let start = 0;
  let count = pointCount;
  if (meta._sorted) {
    const { iScale, _parsed } = meta;
    const axis = iScale.axis;
    const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
    if (minDefined) {
      start = _limitValue(Math.min(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, axis, min).lo,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo
      ), 0, pointCount - 1);
    }
    if (maxDefined) {
      count = _limitValue(Math.max(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1
      ), start, pointCount) - start;
    } else {
      count = pointCount - start;
    }
  }
  return {
    start,
    count
  };
}
function _scaleRangesChanged(meta) {
  const { xScale, yScale, _scaleRanges } = meta;
  const newRanges = {
    xmin: xScale.min,
    xmax: xScale.max,
    ymin: yScale.min,
    ymax: yScale.max
  };
  if (!_scaleRanges) {
    meta._scaleRanges = newRanges;
    return true;
  }
  const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
  Object.assign(_scaleRanges, newRanges);
  return changed;
}
const atEdge = (t2) => t2 === 0 || t2 === 1;
const elasticIn = (t2, s3, p) => -(Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 - s3) * TAU / p));
const elasticOut = (t2, s3, p) => Math.pow(2, -10 * t2) * Math.sin((t2 - s3) * TAU / p) + 1;
const effects = {
  linear: (t2) => t2,
  easeInQuad: (t2) => t2 * t2,
  easeOutQuad: (t2) => -t2 * (t2 - 2),
  easeInOutQuad: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 : -0.5 * (--t2 * (t2 - 2) - 1),
  easeInCubic: (t2) => t2 * t2 * t2,
  easeOutCubic: (t2) => (t2 -= 1) * t2 * t2 + 1,
  easeInOutCubic: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 + 2),
  easeInQuart: (t2) => t2 * t2 * t2 * t2,
  easeOutQuart: (t2) => -((t2 -= 1) * t2 * t2 * t2 - 1),
  easeInOutQuart: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 : -0.5 * ((t2 -= 2) * t2 * t2 * t2 - 2),
  easeInQuint: (t2) => t2 * t2 * t2 * t2 * t2,
  easeOutQuint: (t2) => (t2 -= 1) * t2 * t2 * t2 * t2 + 1,
  easeInOutQuint: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2),
  easeInSine: (t2) => -Math.cos(t2 * HALF_PI) + 1,
  easeOutSine: (t2) => Math.sin(t2 * HALF_PI),
  easeInOutSine: (t2) => -0.5 * (Math.cos(PI * t2) - 1),
  easeInExpo: (t2) => t2 === 0 ? 0 : Math.pow(2, 10 * (t2 - 1)),
  easeOutExpo: (t2) => t2 === 1 ? 1 : -Math.pow(2, -10 * t2) + 1,
  easeInOutExpo: (t2) => atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * Math.pow(2, 10 * (t2 * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t2 * 2 - 1)) + 2),
  easeInCirc: (t2) => t2 >= 1 ? t2 : -(Math.sqrt(1 - t2 * t2) - 1),
  easeOutCirc: (t2) => Math.sqrt(1 - (t2 -= 1) * t2),
  easeInOutCirc: (t2) => (t2 /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t2 * t2) - 1) : 0.5 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1),
  easeInElastic: (t2) => atEdge(t2) ? t2 : elasticIn(t2, 0.075, 0.3),
  easeOutElastic: (t2) => atEdge(t2) ? t2 : elasticOut(t2, 0.075, 0.3),
  easeInOutElastic(t2) {
    const s3 = 0.1125;
    const p = 0.45;
    return atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * elasticIn(t2 * 2, s3, p) : 0.5 + 0.5 * elasticOut(t2 * 2 - 1, s3, p);
  },
  easeInBack(t2) {
    const s3 = 1.70158;
    return t2 * t2 * ((s3 + 1) * t2 - s3);
  },
  easeOutBack(t2) {
    const s3 = 1.70158;
    return (t2 -= 1) * t2 * ((s3 + 1) * t2 + s3) + 1;
  },
  easeInOutBack(t2) {
    let s3 = 1.70158;
    if ((t2 /= 0.5) < 1) {
      return 0.5 * (t2 * t2 * (((s3 *= 1.525) + 1) * t2 - s3));
    }
    return 0.5 * ((t2 -= 2) * t2 * (((s3 *= 1.525) + 1) * t2 + s3) + 2);
  },
  easeInBounce: (t2) => 1 - effects.easeOutBounce(1 - t2),
  easeOutBounce(t2) {
    const m3 = 7.5625;
    const d3 = 2.75;
    if (t2 < 1 / d3) {
      return m3 * t2 * t2;
    }
    if (t2 < 2 / d3) {
      return m3 * (t2 -= 1.5 / d3) * t2 + 0.75;
    }
    if (t2 < 2.5 / d3) {
      return m3 * (t2 -= 2.25 / d3) * t2 + 0.9375;
    }
    return m3 * (t2 -= 2.625 / d3) * t2 + 0.984375;
  },
  easeInOutBounce: (t2) => t2 < 0.5 ? effects.easeInBounce(t2 * 2) * 0.5 : effects.easeOutBounce(t2 * 2 - 1) * 0.5 + 0.5
};
function isPatternOrGradient(value) {
  if (value && typeof value === "object") {
    const type = value.toString();
    return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
  }
  return false;
}
function color(value) {
  return isPatternOrGradient(value) ? value : new Color(value);
}
function getHoverColor(value) {
  return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
}
const numbers = [
  "x",
  "y",
  "borderWidth",
  "radius",
  "tension"
];
const colors$1 = [
  "color",
  "borderColor",
  "backgroundColor"
];
function applyAnimationsDefaults(defaults2) {
  defaults2.set("animation", {
    delay: void 0,
    duration: 1e3,
    easing: "easeOutQuart",
    fn: void 0,
    from: void 0,
    loop: void 0,
    to: void 0,
    type: void 0
  });
  defaults2.describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (name) => name !== "onProgress" && name !== "onComplete" && name !== "fn"
  });
  defaults2.set("animations", {
    colors: {
      type: "color",
      properties: colors$1
    },
    numbers: {
      type: "number",
      properties: numbers
    }
  });
  defaults2.describe("animations", {
    _fallback: "animation"
  });
  defaults2.set("transitions", {
    active: {
      animation: {
        duration: 400
      }
    },
    resize: {
      animation: {
        duration: 0
      }
    },
    show: {
      animations: {
        colors: {
          from: "transparent"
        },
        visible: {
          type: "boolean",
          duration: 0
        }
      }
    },
    hide: {
      animations: {
        colors: {
          to: "transparent"
        },
        visible: {
          type: "boolean",
          easing: "linear",
          fn: (v) => v | 0
        }
      }
    }
  });
}
function applyLayoutsDefaults(defaults2) {
  defaults2.set("layout", {
    autoPadding: true,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
}
const intlCache = /* @__PURE__ */ new Map();
function getNumberFormat(locale2, options) {
  options = options || {};
  const cacheKey = locale2 + JSON.stringify(options);
  let formatter = intlCache.get(cacheKey);
  if (!formatter) {
    formatter = new Intl.NumberFormat(locale2, options);
    intlCache.set(cacheKey, formatter);
  }
  return formatter;
}
function formatNumber(num, locale2, options) {
  return getNumberFormat(locale2, options).format(num);
}
const formatters = {
  values(value) {
    return isArray(value) ? value : "" + value;
  },
  numeric(tickValue, index2, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const locale2 = this.chart.options.locale;
    let notation;
    let delta = tickValue;
    if (ticks.length > 1) {
      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
      if (maxTick < 1e-4 || maxTick > 1e15) {
        notation = "scientific";
      }
      delta = calculateDelta(tickValue, ticks);
    }
    const logDelta = log10(Math.abs(delta));
    const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
    const options = {
      notation,
      minimumFractionDigits: numDecimal,
      maximumFractionDigits: numDecimal
    };
    Object.assign(options, this.options.ticks.format);
    return formatNumber(tickValue, locale2, options);
  },
  logarithmic(tickValue, index2, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const remain = ticks[index2].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
    if ([
      1,
      2,
      3,
      5,
      10,
      15
    ].includes(remain) || index2 > 0.8 * ticks.length) {
      return formatters.numeric.call(this, tickValue, index2, ticks);
    }
    return "";
  }
};
function calculateDelta(tickValue, ticks) {
  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
    delta = tickValue - Math.floor(tickValue);
  }
  return delta;
}
var Ticks = {
  formatters
};
function applyScaleDefaults(defaults2) {
  defaults2.set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    clip: true,
    grace: 0,
    grid: {
      display: true,
      lineWidth: 1,
      drawOnChartArea: true,
      drawTicks: true,
      tickLength: 8,
      tickWidth: (_ctx, options) => options.lineWidth,
      tickColor: (_ctx, options) => options.color,
      offset: false
    },
    border: {
      display: true,
      dash: [],
      dashOffset: 0,
      width: 1
    },
    title: {
      display: false,
      text: "",
      padding: {
        top: 4,
        bottom: 4
      }
    },
    ticks: {
      minRotation: 0,
      maxRotation: 50,
      mirror: false,
      textStrokeWidth: 0,
      textStrokeColor: "",
      padding: 3,
      display: true,
      autoSkip: true,
      autoSkipPadding: 3,
      labelOffset: 0,
      callback: Ticks.formatters.values,
      minor: {},
      major: {},
      align: "center",
      crossAlign: "near",
      showLabelBackdrop: false,
      backdropColor: "rgba(255, 255, 255, 0.75)",
      backdropPadding: 2
    }
  });
  defaults2.route("scale.ticks", "color", "", "color");
  defaults2.route("scale.grid", "color", "", "borderColor");
  defaults2.route("scale.border", "color", "", "borderColor");
  defaults2.route("scale.title", "color", "", "color");
  defaults2.describe("scale", {
    _fallback: false,
    _scriptable: (name) => !name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser",
    _indexable: (name) => name !== "borderDash" && name !== "tickBorderDash" && name !== "dash"
  });
  defaults2.describe("scales", {
    _fallback: "scale"
  });
  defaults2.describe("scale.ticks", {
    _scriptable: (name) => name !== "backdropPadding" && name !== "callback",
    _indexable: (name) => name !== "backdropPadding"
  });
}
const overrides = /* @__PURE__ */ Object.create(null);
const descriptors = /* @__PURE__ */ Object.create(null);
function getScope$1(node, key) {
  if (!key) {
    return node;
  }
  const keys = key.split(".");
  for (let i2 = 0, n = keys.length; i2 < n; ++i2) {
    const k2 = keys[i2];
    node = node[k2] || (node[k2] = /* @__PURE__ */ Object.create(null));
  }
  return node;
}
function set(root, scope, values) {
  if (typeof scope === "string") {
    return merge(getScope$1(root, scope), values);
  }
  return merge(getScope$1(root, ""), scope);
}
class Defaults {
  constructor(_descriptors2, _appliers) {
    this.animation = void 0;
    this.backgroundColor = "rgba(0,0,0,0.1)";
    this.borderColor = "rgba(0,0,0,0.1)";
    this.color = "#666";
    this.datasets = {};
    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
    this.elements = {};
    this.events = [
      "mousemove",
      "mouseout",
      "click",
      "touchstart",
      "touchmove"
    ];
    this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: "normal",
      lineHeight: 1.2,
      weight: null
    };
    this.hover = {};
    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);
    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);
    this.hoverColor = (ctx, options) => getHoverColor(options.color);
    this.indexAxis = "x";
    this.interaction = {
      mode: "nearest",
      intersect: true,
      includeInvisible: false
    };
    this.maintainAspectRatio = true;
    this.onHover = null;
    this.onClick = null;
    this.parsing = true;
    this.plugins = {};
    this.responsive = true;
    this.scale = void 0;
    this.scales = {};
    this.showLine = true;
    this.drawActiveElementsOnTop = true;
    this.describe(_descriptors2);
    this.apply(_appliers);
  }
  set(scope, values) {
    return set(this, scope, values);
  }
  get(scope) {
    return getScope$1(this, scope);
  }
  describe(scope, values) {
    return set(descriptors, scope, values);
  }
  override(scope, values) {
    return set(overrides, scope, values);
  }
  route(scope, name, targetScope, targetName) {
    const scopeObject = getScope$1(this, scope);
    const targetScopeObject = getScope$1(this, targetScope);
    const privateName = "_" + name;
    Object.defineProperties(scopeObject, {
      [privateName]: {
        value: scopeObject[name],
        writable: true
      },
      [name]: {
        enumerable: true,
        get() {
          const local = this[privateName];
          const target = targetScopeObject[targetName];
          if (isObject(local)) {
            return Object.assign({}, target, local);
          }
          return valueOrDefault(local, target);
        },
        set(value) {
          this[privateName] = value;
        }
      }
    });
  }
  apply(appliers) {
    appliers.forEach((apply) => apply(this));
  }
}
var defaults = /* @__PURE__ */ new Defaults({
  _scriptable: (name) => !name.startsWith("on"),
  _indexable: (name) => name !== "events",
  hover: {
    _fallback: "interaction"
  },
  interaction: {
    _scriptable: false,
    _indexable: false
  }
}, [
  applyAnimationsDefaults,
  applyLayoutsDefaults,
  applyScaleDefaults
]);
function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }
  return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
function _measureText(ctx, data, gc, longest, string) {
  let textWidth = data[string];
  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc.push(string);
  }
  if (textWidth > longest) {
    longest = textWidth;
  }
  return longest;
}
function _longestText(ctx, font, arrayOfThings, cache) {
  cache = cache || {};
  let data = cache.data = cache.data || {};
  let gc = cache.garbageCollect = cache.garbageCollect || [];
  if (cache.font !== font) {
    data = cache.data = {};
    gc = cache.garbageCollect = [];
    cache.font = font;
  }
  ctx.save();
  ctx.font = font;
  let longest = 0;
  const ilen = arrayOfThings.length;
  let i2, j, jlen, thing, nestedThing;
  for (i2 = 0; i2 < ilen; i2++) {
    thing = arrayOfThings[i2];
    if (thing !== void 0 && thing !== null && !isArray(thing)) {
      longest = _measureText(ctx, data, gc, longest, thing);
    } else if (isArray(thing)) {
      for (j = 0, jlen = thing.length; j < jlen; j++) {
        nestedThing = thing[j];
        if (nestedThing !== void 0 && nestedThing !== null && !isArray(nestedThing)) {
          longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
      }
    }
  }
  ctx.restore();
  const gcLen = gc.length / 2;
  if (gcLen > arrayOfThings.length) {
    for (i2 = 0; i2 < gcLen; i2++) {
      delete data[gc[i2]];
    }
    gc.splice(0, gcLen);
  }
  return longest;
}
function _alignPixel(chart, pixel, width) {
  const devicePixelRatio = chart.currentDevicePixelRatio;
  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clearCanvas(canvas, ctx) {
  ctx = ctx || canvas.getContext("2d");
  ctx.save();
  ctx.resetTransform();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}
function drawPoint(ctx, options, x2, y3) {
  drawPointLegend(ctx, options, x2, y3, null);
}
function drawPointLegend(ctx, options, x2, y3, w2) {
  let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
  const style = options.pointStyle;
  const rotation = options.rotation;
  const radius = options.radius;
  let rad = (rotation || 0) * RAD_PER_DEG;
  if (style && typeof style === "object") {
    type = style.toString();
    if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
      ctx.save();
      ctx.translate(x2, y3);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }
  if (isNaN(radius) || radius <= 0) {
    return;
  }
  ctx.beginPath();
  switch (style) {
    default:
      if (w2) {
        ctx.ellipse(x2, y3, w2 / 2, radius, 0, 0, TAU);
      } else {
        ctx.arc(x2, y3, radius, 0, TAU);
      }
      ctx.closePath();
      break;
    case "triangle":
      width = w2 ? w2 / 2 : radius;
      ctx.moveTo(x2 + Math.sin(rad) * width, y3 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y3 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y3 - Math.cos(rad) * radius);
      ctx.closePath();
      break;
    case "rectRounded":
      cornerRadius = radius * 0.516;
      size = radius - cornerRadius;
      xOffset = Math.cos(rad + QUARTER_PI) * size;
      xOffsetW = Math.cos(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size);
      yOffset = Math.sin(rad + QUARTER_PI) * size;
      yOffsetW = Math.sin(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size);
      ctx.arc(x2 - xOffsetW, y3 - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
      ctx.arc(x2 + yOffsetW, y3 - xOffset, cornerRadius, rad - HALF_PI, rad);
      ctx.arc(x2 + xOffsetW, y3 + yOffset, cornerRadius, rad, rad + HALF_PI);
      ctx.arc(x2 - yOffsetW, y3 + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
      ctx.closePath();
      break;
    case "rect":
      if (!rotation) {
        size = Math.SQRT1_2 * radius;
        width = w2 ? w2 / 2 : size;
        ctx.rect(x2 - width, y3 - size, 2 * width, 2 * size);
        break;
      }
      rad += QUARTER_PI;
    case "rectRot":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      ctx.closePath();
      break;
    case "crossRot":
      rad += QUARTER_PI;
    case "cross":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      break;
    case "star":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      rad += QUARTER_PI;
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y3 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y3 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y3 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y3 + xOffset);
      break;
    case "line":
      xOffset = w2 ? w2 / 2 : Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x2 - xOffset, y3 - yOffset);
      ctx.lineTo(x2 + xOffset, y3 + yOffset);
      break;
    case "dash":
      ctx.moveTo(x2, y3);
      ctx.lineTo(x2 + Math.cos(rad) * (w2 ? w2 / 2 : radius), y3 + Math.sin(rad) * radius);
      break;
    case false:
      ctx.closePath();
      break;
  }
  ctx.fill();
  if (options.borderWidth > 0) {
    ctx.stroke();
  }
}
function _isPointInArea(point, area, margin) {
  margin = margin || 0.5;
  return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}
function unclipArea(ctx) {
  ctx.restore();
}
function _steppedLineTo(ctx, previous, target, flip, mode) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  if (mode === "middle") {
    const midpoint = (previous.x + target.x) / 2;
    ctx.lineTo(midpoint, previous.y);
    ctx.lineTo(midpoint, target.y);
  } else if (mode === "after" !== !!flip) {
    ctx.lineTo(previous.x, target.y);
  } else {
    ctx.lineTo(target.x, previous.y);
  }
  ctx.lineTo(target.x, target.y);
}
function _bezierCurveTo(ctx, previous, target, flip) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function setRenderOpts(ctx, opts) {
  if (opts.translation) {
    ctx.translate(opts.translation[0], opts.translation[1]);
  }
  if (!isNullOrUndef(opts.rotation)) {
    ctx.rotate(opts.rotation);
  }
  if (opts.color) {
    ctx.fillStyle = opts.color;
  }
  if (opts.textAlign) {
    ctx.textAlign = opts.textAlign;
  }
  if (opts.textBaseline) {
    ctx.textBaseline = opts.textBaseline;
  }
}
function decorateText(ctx, x2, y3, line, opts) {
  if (opts.strikethrough || opts.underline) {
    const metrics = ctx.measureText(line);
    const left = x2 - metrics.actualBoundingBoxLeft;
    const right = x2 + metrics.actualBoundingBoxRight;
    const top = y3 - metrics.actualBoundingBoxAscent;
    const bottom = y3 + metrics.actualBoundingBoxDescent;
    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
    ctx.strokeStyle = ctx.fillStyle;
    ctx.beginPath();
    ctx.lineWidth = opts.decorationWidth || 2;
    ctx.moveTo(left, yDecoration);
    ctx.lineTo(right, yDecoration);
    ctx.stroke();
  }
}
function drawBackdrop(ctx, opts) {
  const oldColor = ctx.fillStyle;
  ctx.fillStyle = opts.color;
  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
  ctx.fillStyle = oldColor;
}
function renderText(ctx, text2, x2, y3, font, opts = {}) {
  const lines = isArray(text2) ? text2 : [
    text2
  ];
  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
  let i2, line;
  ctx.save();
  ctx.font = font.string;
  setRenderOpts(ctx, opts);
  for (i2 = 0; i2 < lines.length; ++i2) {
    line = lines[i2];
    if (opts.backdrop) {
      drawBackdrop(ctx, opts.backdrop);
    }
    if (stroke) {
      if (opts.strokeColor) {
        ctx.strokeStyle = opts.strokeColor;
      }
      if (!isNullOrUndef(opts.strokeWidth)) {
        ctx.lineWidth = opts.strokeWidth;
      }
      ctx.strokeText(line, x2, y3, opts.maxWidth);
    }
    ctx.fillText(line, x2, y3, opts.maxWidth);
    decorateText(ctx, x2, y3, line, opts);
    y3 += Number(font.lineHeight);
  }
  ctx.restore();
}
function addRoundedRectPath(ctx, rect) {
  const { x: x2, y: y3, w: w2, h: h3, radius } = rect;
  ctx.arc(x2 + radius.topLeft, y3 + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
  ctx.lineTo(x2, y3 + h3 - radius.bottomLeft);
  ctx.arc(x2 + radius.bottomLeft, y3 + h3 - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
  ctx.lineTo(x2 + w2 - radius.bottomRight, y3 + h3);
  ctx.arc(x2 + w2 - radius.bottomRight, y3 + h3 - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
  ctx.lineTo(x2 + w2, y3 + radius.topRight);
  ctx.arc(x2 + w2 - radius.topRight, y3 + radius.topRight, radius.topRight, 0, -HALF_PI, true);
  ctx.lineTo(x2 + radius.topLeft, y3);
}
const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
function toLineHeight(value, size) {
  const matches = ("" + value).match(LINE_HEIGHT);
  if (!matches || matches[1] === "normal") {
    return size * 1.2;
  }
  value = +matches[2];
  switch (matches[3]) {
    case "px":
      return value;
    case "%":
      value /= 100;
      break;
  }
  return size * value;
}
const numberOrZero = (v) => +v || 0;
function _readValueToProps(value, props) {
  const ret = {};
  const objProps = isObject(props);
  const keys = objProps ? Object.keys(props) : props;
  const read = isObject(value) ? objProps ? (prop) => valueOrDefault(value[prop], value[props[prop]]) : (prop) => value[prop] : () => value;
  for (const prop of keys) {
    ret[prop] = numberOrZero(read(prop));
  }
  return ret;
}
function toTRBL(value) {
  return _readValueToProps(value, {
    top: "y",
    right: "x",
    bottom: "y",
    left: "x"
  });
}
function toTRBLCorners(value) {
  return _readValueToProps(value, [
    "topLeft",
    "topRight",
    "bottomLeft",
    "bottomRight"
  ]);
}
function toPadding(value) {
  const obj = toTRBL(value);
  obj.width = obj.left + obj.right;
  obj.height = obj.top + obj.bottom;
  return obj;
}
function toFont(options, fallback) {
  options = options || {};
  fallback = fallback || defaults.font;
  let size = valueOrDefault(options.size, fallback.size);
  if (typeof size === "string") {
    size = parseInt(size, 10);
  }
  let style = valueOrDefault(options.style, fallback.style);
  if (style && !("" + style).match(FONT_STYLE)) {
    console.warn('Invalid font style specified: "' + style + '"');
    style = void 0;
  }
  const font = {
    family: valueOrDefault(options.family, fallback.family),
    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
    size,
    style,
    weight: valueOrDefault(options.weight, fallback.weight),
    string: ""
  };
  font.string = toFontString(font);
  return font;
}
function resolve(inputs, context, index2, info) {
  let cacheable = true;
  let i2, ilen, value;
  for (i2 = 0, ilen = inputs.length; i2 < ilen; ++i2) {
    value = inputs[i2];
    if (value === void 0) {
      continue;
    }
    if (context !== void 0 && typeof value === "function") {
      value = value(context);
      cacheable = false;
    }
    if (index2 !== void 0 && isArray(value)) {
      value = value[index2 % value.length];
      cacheable = false;
    }
    if (value !== void 0) {
      if (info && !cacheable) {
        info.cacheable = false;
      }
      return value;
    }
  }
}
function _addGrace(minmax, grace, beginAtZero) {
  const { min, max } = minmax;
  const change = toDimension(grace, (max - min) / 2);
  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;
  return {
    min: keepZero(min, -Math.abs(change)),
    max: keepZero(max, change)
  };
}
function createContext(parentContext, context) {
  return Object.assign(Object.create(parentContext), context);
}
function _createResolver(scopes2, prefixes = [
  ""
], rootScopes, fallback, getTarget = () => scopes2[0]) {
  const finalRootScopes = rootScopes || scopes2;
  if (typeof fallback === "undefined") {
    fallback = _resolve("_fallback", scopes2);
  }
  const cache = {
    [Symbol.toStringTag]: "Object",
    _cacheable: true,
    _scopes: scopes2,
    _rootScopes: finalRootScopes,
    _fallback: fallback,
    _getTarget: getTarget,
    override: (scope) => _createResolver([
      scope,
      ...scopes2
    ], prefixes, finalRootScopes, fallback)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete target._keys;
      delete scopes2[0][prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop) {
      return _cached(target, prop, () => _resolveWithPrefixes(prop, prefixes, scopes2, target));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(scopes2[0]);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return getKeysFromAllScopes(target).includes(prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys(target) {
      return getKeysFromAllScopes(target);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      const storage = target._storage || (target._storage = getTarget());
      target[prop] = storage[prop] = value;
      delete target._keys;
      return true;
    }
  });
}
function _attachContext(proxy, context, subProxy, descriptorDefaults) {
  const cache = {
    _cacheable: false,
    _proxy: proxy,
    _context: context,
    _subProxy: subProxy,
    _stack: /* @__PURE__ */ new Set(),
    _descriptors: _descriptors(proxy, descriptorDefaults),
    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete proxy[prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop, receiver) {
      return _cached(target, prop, () => _resolveWithContext(target, prop, receiver));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
        enumerable: true,
        configurable: true
      } : void 0 : Reflect.getOwnPropertyDescriptor(proxy, prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(proxy);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return Reflect.has(proxy, prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys() {
      return Reflect.ownKeys(proxy);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      proxy[prop] = value;
      delete target[prop];
      return true;
    }
  });
}
function _descriptors(proxy, defaults2 = {
  scriptable: true,
  indexable: true
}) {
  const { _scriptable = defaults2.scriptable, _indexable = defaults2.indexable, _allKeys = defaults2.allKeys } = proxy;
  return {
    allKeys: _allKeys,
    scriptable: _scriptable,
    indexable: _indexable,
    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
  };
}
const readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;
const needsSubResolver = (prop, value) => isObject(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve2) {
  if (Object.prototype.hasOwnProperty.call(target, prop)) {
    return target[prop];
  }
  const value = resolve2();
  target[prop] = value;
  return value;
}
function _resolveWithContext(target, prop, receiver) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  let value = _proxy[prop];
  if (isFunction(value) && descriptors2.isScriptable(prop)) {
    value = _resolveScriptable(prop, value, target, receiver);
  }
  if (isArray(value) && value.length) {
    value = _resolveArray(prop, value, target, descriptors2.isIndexable);
  }
  if (needsSubResolver(prop, value)) {
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors2);
  }
  return value;
}
function _resolveScriptable(prop, getValue, target, receiver) {
  const { _proxy, _context, _subProxy, _stack } = target;
  if (_stack.has(prop)) {
    throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
  }
  _stack.add(prop);
  let value = getValue(_context, _subProxy || receiver);
  _stack.delete(prop);
  if (needsSubResolver(prop, value)) {
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
  }
  return value;
}
function _resolveArray(prop, value, target, isIndexable) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  if (typeof _context.index !== "undefined" && isIndexable(prop)) {
    return value[_context.index % value.length];
  } else if (isObject(value[0])) {
    const arr = value;
    const scopes2 = _proxy._scopes.filter((s3) => s3 !== arr);
    value = [];
    for (const item of arr) {
      const resolver = createSubResolver(scopes2, _proxy, prop, item);
      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors2));
    }
  }
  return value;
}
function resolveFallback(fallback, prop, value) {
  return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent) => key === true ? parent : typeof key === "string" ? resolveObjectKey(parent, key) : void 0;
function addScopes(set2, parentScopes, key, parentFallback, value) {
  for (const parent of parentScopes) {
    const scope = getScope(key, parent);
    if (scope) {
      set2.add(scope);
      const fallback = resolveFallback(scope._fallback, key, value);
      if (typeof fallback !== "undefined" && fallback !== key && fallback !== parentFallback) {
        return fallback;
      }
    } else if (scope === false && typeof parentFallback !== "undefined" && key !== parentFallback) {
      return null;
    }
  }
  return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
  const rootScopes = resolver._rootScopes;
  const fallback = resolveFallback(resolver._fallback, prop, value);
  const allScopes = [
    ...parentScopes,
    ...rootScopes
  ];
  const set2 = /* @__PURE__ */ new Set();
  set2.add(value);
  let key = addScopesFromKey(set2, allScopes, prop, fallback || prop, value);
  if (key === null) {
    return false;
  }
  if (typeof fallback !== "undefined" && fallback !== prop) {
    key = addScopesFromKey(set2, allScopes, fallback, key, value);
    if (key === null) {
      return false;
    }
  }
  return _createResolver(Array.from(set2), [
    ""
  ], rootScopes, fallback, () => subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set2, allScopes, key, fallback, item) {
  while (key) {
    key = addScopes(set2, allScopes, key, fallback, item);
  }
  return key;
}
function subGetTarget(resolver, prop, value) {
  const parent = resolver._getTarget();
  if (!(prop in parent)) {
    parent[prop] = {};
  }
  const target = parent[prop];
  if (isArray(target) && isObject(value)) {
    return value;
  }
  return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes2, proxy) {
  let value;
  for (const prefix of prefixes) {
    value = _resolve(readKey(prefix, prop), scopes2);
    if (typeof value !== "undefined") {
      return needsSubResolver(prop, value) ? createSubResolver(scopes2, proxy, prop, value) : value;
    }
  }
}
function _resolve(key, scopes2) {
  for (const scope of scopes2) {
    if (!scope) {
      continue;
    }
    const value = scope[key];
    if (typeof value !== "undefined") {
      return value;
    }
  }
}
function getKeysFromAllScopes(target) {
  let keys = target._keys;
  if (!keys) {
    keys = target._keys = resolveKeysFromAllScopes(target._scopes);
  }
  return keys;
}
function resolveKeysFromAllScopes(scopes2) {
  const set2 = /* @__PURE__ */ new Set();
  for (const scope of scopes2) {
    for (const key of Object.keys(scope).filter((k2) => !k2.startsWith("_"))) {
      set2.add(key);
    }
  }
  return Array.from(set2);
}
function _parseObjectDataRadialScale(meta, data, start, count) {
  const { iScale } = meta;
  const { key = "r" } = this._parsing;
  const parsed = new Array(count);
  let i2, ilen, index2, item;
  for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
    index2 = i2 + start;
    item = data[index2];
    parsed[i2] = {
      r: iScale.parse(resolveObjectKey(item, key), index2)
    };
  }
  return parsed;
}
const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i2) => i2 < points.length && !points[i2].skip && points[i2];
const getValueAxis = (indexAxis) => indexAxis === "x" ? "y" : "x";
function splineCurve(firstPoint, middlePoint, afterPoint, t2) {
  const previous = firstPoint.skip ? middlePoint : firstPoint;
  const current = middlePoint;
  const next2 = afterPoint.skip ? middlePoint : afterPoint;
  const d01 = distanceBetweenPoints(current, previous);
  const d12 = distanceBetweenPoints(next2, current);
  let s01 = d01 / (d01 + d12);
  let s12 = d12 / (d01 + d12);
  s01 = isNaN(s01) ? 0 : s01;
  s12 = isNaN(s12) ? 0 : s12;
  const fa = t2 * s01;
  const fb = t2 * s12;
  return {
    previous: {
      x: current.x - fa * (next2.x - previous.x),
      y: current.y - fa * (next2.y - previous.y)
    },
    next: {
      x: current.x + fb * (next2.x - previous.x),
      y: current.y + fb * (next2.y - previous.y)
    }
  };
}
function monotoneAdjust(points, deltaK, mK) {
  const pointsLen = points.length;
  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i2 = 0; i2 < pointsLen - 1; ++i2) {
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent || !pointAfter) {
      continue;
    }
    if (almostEquals(deltaK[i2], 0, EPSILON)) {
      mK[i2] = mK[i2 + 1] = 0;
      continue;
    }
    alphaK = mK[i2] / deltaK[i2];
    betaK = mK[i2 + 1] / deltaK[i2];
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    if (squaredMagnitude <= 9) {
      continue;
    }
    tauK = 3 / Math.sqrt(squaredMagnitude);
    mK[i2] = alphaK * tauK * deltaK[i2];
    mK[i2 + 1] = betaK * tauK * deltaK[i2];
  }
}
function monotoneCompute(points, mK, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  let delta, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i2 = 0; i2 < pointsLen; ++i2) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent) {
      continue;
    }
    const iPixel = pointCurrent[indexAxis];
    const vPixel = pointCurrent[valueAxis];
    if (pointBefore) {
      delta = (iPixel - pointBefore[indexAxis]) / 3;
      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i2];
    }
    if (pointAfter) {
      delta = (pointAfter[indexAxis] - iPixel) / 3;
      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i2];
    }
  }
}
function splineCurveMonotone(points, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  const deltaK = Array(pointsLen).fill(0);
  const mK = Array(pointsLen);
  let i2, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (i2 = 0; i2 < pointsLen; ++i2) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent) {
      continue;
    }
    if (pointAfter) {
      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
      deltaK[i2] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
    }
    mK[i2] = !pointBefore ? deltaK[i2] : !pointAfter ? deltaK[i2 - 1] : sign(deltaK[i2 - 1]) !== sign(deltaK[i2]) ? 0 : (deltaK[i2 - 1] + deltaK[i2]) / 2;
  }
  monotoneAdjust(points, deltaK, mK);
  monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
  return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
  let i2, ilen, point, inArea, inAreaPrev;
  let inAreaNext = _isPointInArea(points[0], area);
  for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
    inAreaPrev = inArea;
    inArea = inAreaNext;
    inAreaNext = i2 < ilen - 1 && _isPointInArea(points[i2 + 1], area);
    if (!inArea) {
      continue;
    }
    point = points[i2];
    if (inAreaPrev) {
      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
    }
    if (inAreaNext) {
      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
    }
  }
}
function _updateBezierControlPoints(points, options, area, loop2, indexAxis) {
  let i2, ilen, point, controlPoints;
  if (options.spanGaps) {
    points = points.filter((pt) => !pt.skip);
  }
  if (options.cubicInterpolationMode === "monotone") {
    splineCurveMonotone(points, indexAxis);
  } else {
    let prev = loop2 ? points[points.length - 1] : points[0];
    for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
      point = points[i2];
      controlPoints = splineCurve(prev, point, points[Math.min(i2 + 1, ilen - (loop2 ? 0 : 1)) % ilen], options.tension);
      point.cp1x = controlPoints.previous.x;
      point.cp1y = controlPoints.previous.y;
      point.cp2x = controlPoints.next.x;
      point.cp2y = controlPoints.next.y;
      prev = point;
    }
  }
  if (options.capBezierPoints) {
    capBezierPoints(points, area);
  }
}
function _isDomSupported() {
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function _getParentNode(domNode) {
  let parent = domNode.parentNode;
  if (parent && parent.toString() === "[object ShadowRoot]") {
    parent = parent.host;
  }
  return parent;
}
function parseMaxStyle(styleValue, node, parentProperty) {
  let valueInPixels;
  if (typeof styleValue === "string") {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf("%") !== -1) {
      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }
  return valueInPixels;
}
const getComputedStyle$1 = (element2) => element2.ownerDocument.defaultView.getComputedStyle(element2, null);
function getStyle(el, property) {
  return getComputedStyle$1(el).getPropertyValue(property);
}
const positions = [
  "top",
  "right",
  "bottom",
  "left"
];
function getPositionedStyle(styles, style, suffix) {
  const result = {};
  suffix = suffix ? "-" + suffix : "";
  for (let i2 = 0; i2 < 4; i2++) {
    const pos = positions[i2];
    result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
  }
  result.width = result.left + result.right;
  result.height = result.top + result.bottom;
  return result;
}
const useOffsetPos = (x2, y3, target) => (x2 > 0 || y3 > 0) && (!target || !target.shadowRoot);
function getCanvasPosition(e2, canvas) {
  const touches = e2.touches;
  const source = touches && touches.length ? touches[0] : e2;
  const { offsetX, offsetY } = source;
  let box = false;
  let x2, y3;
  if (useOffsetPos(offsetX, offsetY, e2.target)) {
    x2 = offsetX;
    y3 = offsetY;
  } else {
    const rect = canvas.getBoundingClientRect();
    x2 = source.clientX - rect.left;
    y3 = source.clientY - rect.top;
    box = true;
  }
  return {
    x: x2,
    y: y3,
    box
  };
}
function getRelativePosition(event, chart) {
  if ("native" in event) {
    return event;
  }
  const { canvas, currentDevicePixelRatio } = chart;
  const style = getComputedStyle$1(canvas);
  const borderBox = style.boxSizing === "border-box";
  const paddings = getPositionedStyle(style, "padding");
  const borders = getPositionedStyle(style, "border", "width");
  const { x: x2, y: y3, box } = getCanvasPosition(event, canvas);
  const xOffset = paddings.left + (box && borders.left);
  const yOffset = paddings.top + (box && borders.top);
  let { width, height } = chart;
  if (borderBox) {
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  return {
    x: Math.round((x2 - xOffset) / width * canvas.width / currentDevicePixelRatio),
    y: Math.round((y3 - yOffset) / height * canvas.height / currentDevicePixelRatio)
  };
}
function getContainerSize(canvas, width, height) {
  let maxWidth, maxHeight;
  if (width === void 0 || height === void 0) {
    const container = _getParentNode(canvas);
    if (!container) {
      width = canvas.clientWidth;
      height = canvas.clientHeight;
    } else {
      const rect = container.getBoundingClientRect();
      const containerStyle = getComputedStyle$1(container);
      const containerBorder = getPositionedStyle(containerStyle, "border", "width");
      const containerPadding = getPositionedStyle(containerStyle, "padding");
      width = rect.width - containerPadding.width - containerBorder.width;
      height = rect.height - containerPadding.height - containerBorder.height;
      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
    }
  }
  return {
    width,
    height,
    maxWidth: maxWidth || INFINITY,
    maxHeight: maxHeight || INFINITY
  };
}
const round1 = (v) => Math.round(v * 10) / 10;
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
  const style = getComputedStyle$1(canvas);
  const margins = getPositionedStyle(style, "margin");
  const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
  const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
  let { width, height } = containerSize;
  if (style.boxSizing === "content-box") {
    const borders = getPositionedStyle(style, "border", "width");
    const paddings = getPositionedStyle(style, "padding");
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  width = Math.max(0, width - margins.width);
  height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
  if (width && !height) {
    height = round1(width / 2);
  }
  const maintainHeight = bbWidth !== void 0 || bbHeight !== void 0;
  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
    height = containerSize.height;
    width = round1(Math.floor(height * aspectRatio));
  }
  return {
    width,
    height
  };
}
function retinaScale(chart, forceRatio, forceStyle) {
  const pixelRatio = forceRatio || 1;
  const deviceHeight = Math.floor(chart.height * pixelRatio);
  const deviceWidth = Math.floor(chart.width * pixelRatio);
  chart.height = Math.floor(chart.height);
  chart.width = Math.floor(chart.width);
  const canvas = chart.canvas;
  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
    canvas.style.height = `${chart.height}px`;
    canvas.style.width = `${chart.width}px`;
  }
  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
    chart.currentDevicePixelRatio = pixelRatio;
    canvas.height = deviceHeight;
    canvas.width = deviceWidth;
    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    return true;
  }
  return false;
}
const supportsEventListenerOptions = function() {
  let passiveSupported = false;
  try {
    const options = {
      get passive() {
        passiveSupported = true;
        return false;
      }
    };
    window.addEventListener("test", null, options);
    window.removeEventListener("test", null, options);
  } catch (e2) {
  }
  return passiveSupported;
}();
function readUsedSize(element2, property) {
  const value = getStyle(element2, property);
  const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches ? +matches[1] : void 0;
}
function _pointInLine(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: p1.y + t2 * (p2.y - p1.y)
  };
}
function _steppedInterpolation(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: mode === "middle" ? t2 < 0.5 ? p1.y : p2.y : mode === "after" ? t2 < 1 ? p1.y : p2.y : t2 > 0 ? p2.y : p1.y
  };
}
function _bezierInterpolation(p1, p2, t2, mode) {
  const cp1 = {
    x: p1.cp2x,
    y: p1.cp2y
  };
  const cp2 = {
    x: p2.cp1x,
    y: p2.cp1y
  };
  const a3 = _pointInLine(p1, cp1, t2);
  const b2 = _pointInLine(cp1, cp2, t2);
  const c2 = _pointInLine(cp2, p2, t2);
  const d3 = _pointInLine(a3, b2, t2);
  const e2 = _pointInLine(b2, c2, t2);
  return _pointInLine(d3, e2, t2);
}
const getRightToLeftAdapter = function(rectX, width) {
  return {
    x(x2) {
      return rectX + rectX + width - x2;
    },
    setWidth(w2) {
      width = w2;
    },
    textAlign(align) {
      if (align === "center") {
        return align;
      }
      return align === "right" ? "left" : "right";
    },
    xPlus(x2, value) {
      return x2 - value;
    },
    leftForLtr(x2, itemWidth) {
      return x2 - itemWidth;
    }
  };
};
const getLeftToRightAdapter = function() {
  return {
    x(x2) {
      return x2;
    },
    setWidth(w2) {
    },
    textAlign(align) {
      return align;
    },
    xPlus(x2, value) {
      return x2 + value;
    },
    leftForLtr(x2, _itemWidth) {
      return x2;
    }
  };
};
function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
  let style, original;
  if (direction === "ltr" || direction === "rtl") {
    style = ctx.canvas.style;
    original = [
      style.getPropertyValue("direction"),
      style.getPropertyPriority("direction")
    ];
    style.setProperty("direction", direction, "important");
    ctx.prevTextDirection = original;
  }
}
function restoreTextDirection(ctx, original) {
  if (original !== void 0) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty("direction", original[0], original[1]);
  }
}
function propertyFn(property) {
  if (property === "angle") {
    return {
      between: _angleBetween,
      compare: _angleDiff,
      normalize: _normalizeAngle
    };
  }
  return {
    between: _isBetween,
    compare: (a3, b2) => a3 - b2,
    normalize: (x2) => x2
  };
}
function normalizeSegment({ start, end, count, loop: loop2, style }) {
  return {
    start: start % count,
    end: end % count,
    loop: loop2 && (end - start + 1) % count === 0,
    style
  };
}
function getSegment(segment, points, bounds) {
  const { property, start: startBound, end: endBound } = bounds;
  const { between, normalize: normalize2 } = propertyFn(property);
  const count = points.length;
  let { start, end, loop: loop2 } = segment;
  let i2, ilen;
  if (loop2) {
    start += count;
    end += count;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      if (!between(normalize2(points[start % count][property]), startBound, endBound)) {
        break;
      }
      start--;
      end--;
    }
    start %= count;
    end %= count;
  }
  if (end < start) {
    end += count;
  }
  return {
    start,
    end,
    loop: loop2,
    style: segment.style
  };
}
function _boundSegment(segment, points, bounds) {
  if (!bounds) {
    return [
      segment
    ];
  }
  const { property, start: startBound, end: endBound } = bounds;
  const count = points.length;
  const { compare, between, normalize: normalize2 } = propertyFn(property);
  const { start, end, loop: loop2, style } = getSegment(segment, points, bounds);
  const result = [];
  let inside = false;
  let subStart = null;
  let value, point, prevValue;
  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);
  const shouldStart = () => inside || startIsBefore();
  const shouldStop = () => !inside || endIsBefore();
  for (let i2 = start, prev = start; i2 <= end; ++i2) {
    point = points[i2 % count];
    if (point.skip) {
      continue;
    }
    value = normalize2(point[property]);
    if (value === prevValue) {
      continue;
    }
    inside = between(value, startBound, endBound);
    if (subStart === null && shouldStart()) {
      subStart = compare(value, startBound) === 0 ? i2 : prev;
    }
    if (subStart !== null && shouldStop()) {
      result.push(normalizeSegment({
        start: subStart,
        end: i2,
        loop: loop2,
        count,
        style
      }));
      subStart = null;
    }
    prev = i2;
    prevValue = value;
  }
  if (subStart !== null) {
    result.push(normalizeSegment({
      start: subStart,
      end,
      loop: loop2,
      count,
      style
    }));
  }
  return result;
}
function _boundSegments(line, bounds) {
  const result = [];
  const segments = line.segments;
  for (let i2 = 0; i2 < segments.length; i2++) {
    const sub = _boundSegment(segments[i2], line.points, bounds);
    if (sub.length) {
      result.push(...sub);
    }
  }
  return result;
}
function findStartAndEnd(points, count, loop2, spanGaps) {
  let start = 0;
  let end = count - 1;
  if (loop2 && !spanGaps) {
    while (start < count && !points[start].skip) {
      start++;
    }
  }
  while (start < count && points[start].skip) {
    start++;
  }
  start %= count;
  if (loop2) {
    end += start;
  }
  while (end > start && points[end % count].skip) {
    end--;
  }
  end %= count;
  return {
    start,
    end
  };
}
function solidSegments(points, start, max, loop2) {
  const count = points.length;
  const result = [];
  let last = start;
  let prev = points[start];
  let end;
  for (end = start + 1; end <= max; ++end) {
    const cur = points[end % count];
    if (cur.skip || cur.stop) {
      if (!prev.skip) {
        loop2 = false;
        result.push({
          start: start % count,
          end: (end - 1) % count,
          loop: loop2
        });
        start = last = cur.stop ? end : null;
      }
    } else {
      last = end;
      if (prev.skip) {
        start = end;
      }
    }
    prev = cur;
  }
  if (last !== null) {
    result.push({
      start: start % count,
      end: last % count,
      loop: loop2
    });
  }
  return result;
}
function _computeSegments(line, segmentOptions) {
  const points = line.points;
  const spanGaps = line.options.spanGaps;
  const count = points.length;
  if (!count) {
    return [];
  }
  const loop2 = !!line._loop;
  const { start, end } = findStartAndEnd(points, count, loop2, spanGaps);
  if (spanGaps === true) {
    return splitByStyles(line, [
      {
        start,
        end,
        loop: loop2
      }
    ], points, segmentOptions);
  }
  const max = end < start ? end + count : end;
  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function splitByStyles(line, segments, points, segmentOptions) {
  if (!segmentOptions || !segmentOptions.setContext || !points) {
    return segments;
  }
  return doSplitByStyles(line, segments, points, segmentOptions);
}
function doSplitByStyles(line, segments, points, segmentOptions) {
  const chartContext = line._chart.getContext();
  const baseStyle = readStyle(line.options);
  const { _datasetIndex: datasetIndex, options: { spanGaps } } = line;
  const count = points.length;
  const result = [];
  let prevStyle = baseStyle;
  let start = segments[0].start;
  let i2 = start;
  function addStyle(s3, e2, l, st) {
    const dir = spanGaps ? -1 : 1;
    if (s3 === e2) {
      return;
    }
    s3 += count;
    while (points[s3 % count].skip) {
      s3 -= dir;
    }
    while (points[e2 % count].skip) {
      e2 += dir;
    }
    if (s3 % count !== e2 % count) {
      result.push({
        start: s3 % count,
        end: e2 % count,
        loop: l,
        style: st
      });
      prevStyle = st;
      start = e2 % count;
    }
  }
  for (const segment of segments) {
    start = spanGaps ? start : segment.start;
    let prev = points[start % count];
    let style;
    for (i2 = start + 1; i2 <= segment.end; i2++) {
      const pt = points[i2 % count];
      style = readStyle(segmentOptions.setContext(createContext(chartContext, {
        type: "segment",
        p0: prev,
        p1: pt,
        p0DataIndex: (i2 - 1) % count,
        p1DataIndex: i2 % count,
        datasetIndex
      })));
      if (styleChanged(style, prevStyle)) {
        addStyle(start, i2 - 1, segment.loop, prevStyle);
      }
      prev = pt;
      prevStyle = style;
    }
    if (start < i2 - 1) {
      addStyle(start, i2 - 1, segment.loop, prevStyle);
    }
  }
  return result;
}
function readStyle(options) {
  return {
    backgroundColor: options.backgroundColor,
    borderCapStyle: options.borderCapStyle,
    borderDash: options.borderDash,
    borderDashOffset: options.borderDashOffset,
    borderJoinStyle: options.borderJoinStyle,
    borderWidth: options.borderWidth,
    borderColor: options.borderColor
  };
}
function styleChanged(style, prevStyle) {
  if (!prevStyle) {
    return false;
  }
  const cache = [];
  const replacer = function(key, value) {
    if (!isPatternOrGradient(value)) {
      return value;
    }
    if (!cache.includes(value)) {
      cache.push(value);
    }
    return cache.indexOf(value);
  };
  return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
}
/*!
 * Chart.js v4.4.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 */
class Animator {
  constructor() {
    this._request = null;
    this._charts = /* @__PURE__ */ new Map();
    this._running = false;
    this._lastDate = void 0;
  }
  _notify(chart, anims, date, type) {
    const callbacks = anims.listeners[type];
    const numSteps = anims.duration;
    callbacks.forEach((fn) => fn({
      chart,
      initial: anims.initial,
      numSteps,
      currentStep: Math.min(date - anims.start, numSteps)
    }));
  }
  _refresh() {
    if (this._request) {
      return;
    }
    this._running = true;
    this._request = requestAnimFrame.call(window, () => {
      this._update();
      this._request = null;
      if (this._running) {
        this._refresh();
      }
    });
  }
  _update(date = Date.now()) {
    let remaining = 0;
    this._charts.forEach((anims, chart) => {
      if (!anims.running || !anims.items.length) {
        return;
      }
      const items = anims.items;
      let i2 = items.length - 1;
      let draw2 = false;
      let item;
      for (; i2 >= 0; --i2) {
        item = items[i2];
        if (item._active) {
          if (item._total > anims.duration) {
            anims.duration = item._total;
          }
          item.tick(date);
          draw2 = true;
        } else {
          items[i2] = items[items.length - 1];
          items.pop();
        }
      }
      if (draw2) {
        chart.draw();
        this._notify(chart, anims, date, "progress");
      }
      if (!items.length) {
        anims.running = false;
        this._notify(chart, anims, date, "complete");
        anims.initial = false;
      }
      remaining += items.length;
    });
    this._lastDate = date;
    if (remaining === 0) {
      this._running = false;
    }
  }
  _getAnims(chart) {
    const charts = this._charts;
    let anims = charts.get(chart);
    if (!anims) {
      anims = {
        running: false,
        initial: true,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      };
      charts.set(chart, anims);
    }
    return anims;
  }
  listen(chart, event, cb) {
    this._getAnims(chart).listeners[event].push(cb);
  }
  add(chart, items) {
    if (!items || !items.length) {
      return;
    }
    this._getAnims(chart).items.push(...items);
  }
  has(chart) {
    return this._getAnims(chart).items.length > 0;
  }
  start(chart) {
    const anims = this._charts.get(chart);
    if (!anims) {
      return;
    }
    anims.running = true;
    anims.start = Date.now();
    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
    this._refresh();
  }
  running(chart) {
    if (!this._running) {
      return false;
    }
    const anims = this._charts.get(chart);
    if (!anims || !anims.running || !anims.items.length) {
      return false;
    }
    return true;
  }
  stop(chart) {
    const anims = this._charts.get(chart);
    if (!anims || !anims.items.length) {
      return;
    }
    const items = anims.items;
    let i2 = items.length - 1;
    for (; i2 >= 0; --i2) {
      items[i2].cancel();
    }
    anims.items = [];
    this._notify(chart, anims, Date.now(), "complete");
  }
  remove(chart) {
    return this._charts.delete(chart);
  }
}
var animator = /* @__PURE__ */ new Animator();
const transparent = "transparent";
const interpolators = {
  boolean(from2, to2, factor) {
    return factor > 0.5 ? to2 : from2;
  },
  color(from2, to2, factor) {
    const c0 = color(from2 || transparent);
    const c1 = c0.valid && color(to2 || transparent);
    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to2;
  },
  number(from2, to2, factor) {
    return from2 + (to2 - from2) * factor;
  }
};
class Animation {
  constructor(cfg, target, prop, to2) {
    const currentValue = target[prop];
    to2 = resolve([
      cfg.to,
      to2,
      currentValue,
      cfg.from
    ]);
    const from2 = resolve([
      cfg.from,
      currentValue,
      to2
    ]);
    this._active = true;
    this._fn = cfg.fn || interpolators[cfg.type || typeof from2];
    this._easing = effects[cfg.easing] || effects.linear;
    this._start = Math.floor(Date.now() + (cfg.delay || 0));
    this._duration = this._total = Math.floor(cfg.duration);
    this._loop = !!cfg.loop;
    this._target = target;
    this._prop = prop;
    this._from = from2;
    this._to = to2;
    this._promises = void 0;
  }
  active() {
    return this._active;
  }
  update(cfg, to2, date) {
    if (this._active) {
      this._notify(false);
      const currentValue = this._target[this._prop];
      const elapsed = date - this._start;
      const remain = this._duration - elapsed;
      this._start = date;
      this._duration = Math.floor(Math.max(remain, cfg.duration));
      this._total += elapsed;
      this._loop = !!cfg.loop;
      this._to = resolve([
        cfg.to,
        to2,
        currentValue,
        cfg.from
      ]);
      this._from = resolve([
        cfg.from,
        currentValue,
        to2
      ]);
    }
  }
  cancel() {
    if (this._active) {
      this.tick(Date.now());
      this._active = false;
      this._notify(false);
    }
  }
  tick(date) {
    const elapsed = date - this._start;
    const duration = this._duration;
    const prop = this._prop;
    const from2 = this._from;
    const loop2 = this._loop;
    const to2 = this._to;
    let factor;
    this._active = from2 !== to2 && (loop2 || elapsed < duration);
    if (!this._active) {
      this._target[prop] = to2;
      this._notify(true);
      return;
    }
    if (elapsed < 0) {
      this._target[prop] = from2;
      return;
    }
    factor = elapsed / duration % 2;
    factor = loop2 && factor > 1 ? 2 - factor : factor;
    factor = this._easing(Math.min(1, Math.max(0, factor)));
    this._target[prop] = this._fn(from2, to2, factor);
  }
  wait() {
    const promises = this._promises || (this._promises = []);
    return new Promise((res, rej) => {
      promises.push({
        res,
        rej
      });
    });
  }
  _notify(resolved) {
    const method = resolved ? "res" : "rej";
    const promises = this._promises || [];
    for (let i2 = 0; i2 < promises.length; i2++) {
      promises[i2][method]();
    }
  }
}
class Animations {
  constructor(chart, config) {
    this._chart = chart;
    this._properties = /* @__PURE__ */ new Map();
    this.configure(config);
  }
  configure(config) {
    if (!isObject(config)) {
      return;
    }
    const animationOptions = Object.keys(defaults.animation);
    const animatedProps = this._properties;
    Object.getOwnPropertyNames(config).forEach((key) => {
      const cfg = config[key];
      if (!isObject(cfg)) {
        return;
      }
      const resolved = {};
      for (const option of animationOptions) {
        resolved[option] = cfg[option];
      }
      (isArray(cfg.properties) && cfg.properties || [
        key
      ]).forEach((prop) => {
        if (prop === key || !animatedProps.has(prop)) {
          animatedProps.set(prop, resolved);
        }
      });
    });
  }
  _animateOptions(target, values) {
    const newOptions = values.options;
    const options = resolveTargetOptions(target, newOptions);
    if (!options) {
      return [];
    }
    const animations = this._createAnimations(options, newOptions);
    if (newOptions.$shared) {
      awaitAll(target.options.$animations, newOptions).then(() => {
        target.options = newOptions;
      }, () => {
      });
    }
    return animations;
  }
  _createAnimations(target, values) {
    const animatedProps = this._properties;
    const animations = [];
    const running = target.$animations || (target.$animations = {});
    const props = Object.keys(values);
    const date = Date.now();
    let i2;
    for (i2 = props.length - 1; i2 >= 0; --i2) {
      const prop = props[i2];
      if (prop.charAt(0) === "$") {
        continue;
      }
      if (prop === "options") {
        animations.push(...this._animateOptions(target, values));
        continue;
      }
      const value = values[prop];
      let animation = running[prop];
      const cfg = animatedProps.get(prop);
      if (animation) {
        if (cfg && animation.active()) {
          animation.update(cfg, value, date);
          continue;
        } else {
          animation.cancel();
        }
      }
      if (!cfg || !cfg.duration) {
        target[prop] = value;
        continue;
      }
      running[prop] = animation = new Animation(cfg, target, prop, value);
      animations.push(animation);
    }
    return animations;
  }
  update(target, values) {
    if (this._properties.size === 0) {
      Object.assign(target, values);
      return;
    }
    const animations = this._createAnimations(target, values);
    if (animations.length) {
      animator.add(this._chart, animations);
      return true;
    }
  }
}
function awaitAll(animations, properties) {
  const running = [];
  const keys = Object.keys(properties);
  for (let i2 = 0; i2 < keys.length; i2++) {
    const anim = animations[keys[i2]];
    if (anim && anim.active()) {
      running.push(anim.wait());
    }
  }
  return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
  if (!newOptions) {
    return;
  }
  let options = target.options;
  if (!options) {
    target.options = newOptions;
    return;
  }
  if (options.$shared) {
    target.options = options = Object.assign({}, options, {
      $shared: false,
      $animations: {}
    });
  }
  return options;
}
function scaleClip(scale, allowedOverflow) {
  const opts = scale && scale.options || {};
  const reverse = opts.reverse;
  const min = opts.min === void 0 ? allowedOverflow : 0;
  const max = opts.max === void 0 ? allowedOverflow : 0;
  return {
    start: reverse ? max : min,
    end: reverse ? min : max
  };
}
function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }
  const x2 = scaleClip(xScale, allowedOverflow);
  const y3 = scaleClip(yScale, allowedOverflow);
  return {
    top: y3.end,
    right: x2.end,
    bottom: y3.start,
    left: x2.start
  };
}
function toClip(value) {
  let t2, r, b2, l;
  if (isObject(value)) {
    t2 = value.top;
    r = value.right;
    b2 = value.bottom;
    l = value.left;
  } else {
    t2 = r = b2 = l = value;
  }
  return {
    top: t2,
    right: r,
    bottom: b2,
    left: l,
    disabled: value === false
  };
}
function getSortedDatasetIndices(chart, filterVisible) {
  const keys = [];
  const metasets = chart._getSortedDatasetMetas(filterVisible);
  let i2, ilen;
  for (i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
    keys.push(metasets[i2].index);
  }
  return keys;
}
function applyStack(stack, value, dsIndex, options = {}) {
  const keys = stack.keys;
  const singleMode = options.mode === "single";
  let i2, ilen, datasetIndex, otherValue;
  if (value === null) {
    return;
  }
  for (i2 = 0, ilen = keys.length; i2 < ilen; ++i2) {
    datasetIndex = +keys[i2];
    if (datasetIndex === dsIndex) {
      if (options.all) {
        continue;
      }
      break;
    }
    otherValue = stack.values[datasetIndex];
    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
      value += otherValue;
    }
  }
  return value;
}
function convertObjectDataToArray(data) {
  const keys = Object.keys(data);
  const adata = new Array(keys.length);
  let i2, ilen, key;
  for (i2 = 0, ilen = keys.length; i2 < ilen; ++i2) {
    key = keys[i2];
    adata[i2] = {
      x: key,
      y: data[key]
    };
  }
  return adata;
}
function isStacked(scale, meta) {
  const stacked = scale && scale.options.stacked;
  return stacked || stacked === void 0 && meta.stack !== void 0;
}
function getStackKey(indexScale, valueScale, meta) {
  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
  const { min, max, minDefined, maxDefined } = scale.getUserBounds();
  return {
    min: minDefined ? min : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max : Number.POSITIVE_INFINITY
  };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
  const subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {
    const value = stack[meta.index];
    if (positive && value > 0 || !positive && value < 0) {
      return meta.index;
    }
  }
  return null;
}
function updateStacks(controller, parsed) {
  const { chart, _cachedMeta: meta } = controller;
  const stacks = chart._stacks || (chart._stacks = {});
  const { iScale, vScale, index: datasetIndex } = meta;
  const iAxis = iScale.axis;
  const vAxis = vScale.axis;
  const key = getStackKey(iScale, vScale, meta);
  const ilen = parsed.length;
  let stack;
  for (let i2 = 0; i2 < ilen; ++i2) {
    const item = parsed[i2];
    const { [iAxis]: index2, [vAxis]: value } = item;
    const itemStacks = item._stacks || (item._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index2);
    stack[datasetIndex] = value;
    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
    const visualValues = stack._visualValues || (stack._visualValues = {});
    visualValues[datasetIndex] = value;
  }
}
function getFirstScaleId(chart, axis) {
  const scales2 = chart.scales;
  return Object.keys(scales2).filter((key) => scales2[key].axis === axis).shift();
}
function createDatasetContext(parent, index2) {
  return createContext(parent, {
    active: false,
    dataset: void 0,
    datasetIndex: index2,
    index: index2,
    mode: "default",
    type: "dataset"
  });
}
function createDataContext(parent, index2, element2) {
  return createContext(parent, {
    active: false,
    dataIndex: index2,
    parsed: void 0,
    raw: void 0,
    element: element2,
    index: index2,
    mode: "default",
    type: "data"
  });
}
function clearStacks(meta, items) {
  const datasetIndex = meta.controller.index;
  const axis = meta.vScale && meta.vScale.axis;
  if (!axis) {
    return;
  }
  items = items || meta._parsed;
  for (const parsed of items) {
    const stacks = parsed._stacks;
    if (!stacks || stacks[axis] === void 0 || stacks[axis][datasetIndex] === void 0) {
      return;
    }
    delete stacks[axis][datasetIndex];
    if (stacks[axis]._visualValues !== void 0 && stacks[axis]._visualValues[datasetIndex] !== void 0) {
      delete stacks[axis]._visualValues[datasetIndex];
    }
  }
}
const isDirectUpdateMode = (mode) => mode === "reset" || mode === "none";
const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {
  keys: getSortedDatasetIndices(chart, true),
  values: null
};
class DatasetController {
  constructor(chart, datasetIndex) {
    this.chart = chart;
    this._ctx = chart.ctx;
    this.index = datasetIndex;
    this._cachedDataOpts = {};
    this._cachedMeta = this.getMeta();
    this._type = this._cachedMeta.type;
    this.options = void 0;
    this._parsing = false;
    this._data = void 0;
    this._objectData = void 0;
    this._sharedOptions = void 0;
    this._drawStart = void 0;
    this._drawCount = void 0;
    this.enableOptionSharing = false;
    this.supportsDecimation = false;
    this.$context = void 0;
    this._syncList = [];
    this.datasetElementType = new.target.datasetElementType;
    this.dataElementType = new.target.dataElementType;
    this.initialize();
  }
  initialize() {
    const meta = this._cachedMeta;
    this.configure();
    this.linkScales();
    meta._stacked = isStacked(meta.vScale, meta);
    this.addElements();
    if (this.options.fill && !this.chart.isPluginEnabled("filler")) {
      console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
  }
  updateIndex(datasetIndex) {
    if (this.index !== datasetIndex) {
      clearStacks(this._cachedMeta);
    }
    this.index = datasetIndex;
  }
  linkScales() {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    const chooseId = (axis, x2, y3, r) => axis === "x" ? x2 : axis === "r" ? r : y3;
    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, "x"));
    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, "y"));
    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, "r"));
    const indexAxis = meta.indexAxis;
    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
    meta.xScale = this.getScaleForId(xid);
    meta.yScale = this.getScaleForId(yid);
    meta.rScale = this.getScaleForId(rid);
    meta.iScale = this.getScaleForId(iid);
    meta.vScale = this.getScaleForId(vid);
  }
  getDataset() {
    return this.chart.data.datasets[this.index];
  }
  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }
  getScaleForId(scaleID) {
    return this.chart.scales[scaleID];
  }
  _getOtherScale(scale) {
    const meta = this._cachedMeta;
    return scale === meta.iScale ? meta.vScale : meta.iScale;
  }
  reset() {
    this._update("reset");
  }
  _destroy() {
    const meta = this._cachedMeta;
    if (this._data) {
      unlistenArrayEvents(this._data, this);
    }
    if (meta._stacked) {
      clearStacks(meta);
    }
  }
  _dataCheck() {
    const dataset = this.getDataset();
    const data = dataset.data || (dataset.data = []);
    const _data = this._data;
    if (isObject(data)) {
      this._data = convertObjectDataToArray(data);
    } else if (_data !== data) {
      if (_data) {
        unlistenArrayEvents(_data, this);
        const meta = this._cachedMeta;
        clearStacks(meta);
        meta._parsed = [];
      }
      if (data && Object.isExtensible(data)) {
        listenArrayEvents(data, this);
      }
      this._syncList = [];
      this._data = data;
    }
  }
  addElements() {
    const meta = this._cachedMeta;
    this._dataCheck();
    if (this.datasetElementType) {
      meta.dataset = new this.datasetElementType();
    }
  }
  buildOrUpdateElements(resetNewElements) {
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    let stackChanged = false;
    this._dataCheck();
    const oldStacked = meta._stacked;
    meta._stacked = isStacked(meta.vScale, meta);
    if (meta.stack !== dataset.stack) {
      stackChanged = true;
      clearStacks(meta);
      meta.stack = dataset.stack;
    }
    this._resyncElements(resetNewElements);
    if (stackChanged || oldStacked !== meta._stacked) {
      updateStacks(this, meta._parsed);
    }
  }
  configure() {
    const config = this.chart.config;
    const scopeKeys = config.datasetScopeKeys(this._type);
    const scopes2 = config.getOptionScopes(this.getDataset(), scopeKeys, true);
    this.options = config.createResolver(scopes2, this.getContext());
    this._parsing = this.options.parsing;
    this._cachedDataOpts = {};
  }
  parse(start, count) {
    const { _cachedMeta: meta, _data: data } = this;
    const { iScale, _stacked } = meta;
    const iAxis = iScale.axis;
    let sorted = start === 0 && count === data.length ? true : meta._sorted;
    let prev = start > 0 && meta._parsed[start - 1];
    let i2, cur, parsed;
    if (this._parsing === false) {
      meta._parsed = data;
      meta._sorted = true;
      parsed = data;
    } else {
      if (isArray(data[start])) {
        parsed = this.parseArrayData(meta, data, start, count);
      } else if (isObject(data[start])) {
        parsed = this.parseObjectData(meta, data, start, count);
      } else {
        parsed = this.parsePrimitiveData(meta, data, start, count);
      }
      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
      for (i2 = 0; i2 < count; ++i2) {
        meta._parsed[i2 + start] = cur = parsed[i2];
        if (sorted) {
          if (isNotInOrderComparedToPrev()) {
            sorted = false;
          }
          prev = cur;
        }
      }
      meta._sorted = sorted;
    }
    if (_stacked) {
      updateStacks(this, parsed);
    }
  }
  parsePrimitiveData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = new Array(count);
    let i2, ilen, index2;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      index2 = i2 + start;
      parsed[i2] = {
        [iAxis]: singleScale || iScale.parse(labels[index2], index2),
        [vAxis]: vScale.parse(data[index2], index2)
      };
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const parsed = new Array(count);
    let i2, ilen, index2, item;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      index2 = i2 + start;
      item = data[index2];
      parsed[i2] = {
        x: xScale.parse(item[0], index2),
        y: yScale.parse(item[1], index2)
      };
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const parsed = new Array(count);
    let i2, ilen, index2, item;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      index2 = i2 + start;
      item = data[index2];
      parsed[i2] = {
        x: xScale.parse(resolveObjectKey(item, xAxisKey), index2),
        y: yScale.parse(resolveObjectKey(item, yAxisKey), index2)
      };
    }
    return parsed;
  }
  getParsed(index2) {
    return this._cachedMeta._parsed[index2];
  }
  getDataElement(index2) {
    return this._cachedMeta.data[index2];
  }
  applyStack(scale, parsed, mode) {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const value = parsed[scale.axis];
    const stack = {
      keys: getSortedDatasetIndices(chart, true),
      values: parsed._stacks[scale.axis]._visualValues
    };
    return applyStack(stack, value, meta.index, {
      mode
    });
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    const parsedValue = parsed[scale.axis];
    let value = parsedValue === null ? NaN : parsedValue;
    const values = stack && parsed._stacks[scale.axis];
    if (stack && values) {
      stack.values = values;
      value = applyStack(stack, parsedValue, this._cachedMeta.index);
    }
    range.min = Math.min(range.min, value);
    range.max = Math.max(range.max, value);
  }
  getMinMax(scale, canStack) {
    const meta = this._cachedMeta;
    const _parsed = meta._parsed;
    const sorted = meta._sorted && scale === meta.iScale;
    const ilen = _parsed.length;
    const otherScale = this._getOtherScale(scale);
    const stack = createStack(canStack, meta, this.chart);
    const range = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
    let i2, parsed;
    function _skip() {
      parsed = _parsed[i2];
      const otherValue = parsed[otherScale.axis];
      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
    }
    for (i2 = 0; i2 < ilen; ++i2) {
      if (_skip()) {
        continue;
      }
      this.updateRangeFromParsed(range, scale, parsed, stack);
      if (sorted) {
        break;
      }
    }
    if (sorted) {
      for (i2 = ilen - 1; i2 >= 0; --i2) {
        if (_skip()) {
          continue;
        }
        this.updateRangeFromParsed(range, scale, parsed, stack);
        break;
      }
    }
    return range;
  }
  getAllParsedValues(scale) {
    const parsed = this._cachedMeta._parsed;
    const values = [];
    let i2, ilen, value;
    for (i2 = 0, ilen = parsed.length; i2 < ilen; ++i2) {
      value = parsed[i2][scale.axis];
      if (isNumberFinite(value)) {
        values.push(value);
      }
    }
    return values;
  }
  getMaxOverflow() {
    return false;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const parsed = this.getParsed(index2);
    return {
      label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
      value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
    };
  }
  _update(mode) {
    const meta = this._cachedMeta;
    this.update(mode || "default");
    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
  }
  update(mode) {
  }
  draw() {
    const ctx = this._ctx;
    const chart = this.chart;
    const meta = this._cachedMeta;
    const elements2 = meta.data || [];
    const area = chart.chartArea;
    const active = [];
    const start = this._drawStart || 0;
    const count = this._drawCount || elements2.length - start;
    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
    let i2;
    if (meta.dataset) {
      meta.dataset.draw(ctx, area, start, count);
    }
    for (i2 = start; i2 < start + count; ++i2) {
      const element2 = elements2[i2];
      if (element2.hidden) {
        continue;
      }
      if (element2.active && drawActiveElementsOnTop) {
        active.push(element2);
      } else {
        element2.draw(ctx, area);
      }
    }
    for (i2 = 0; i2 < active.length; ++i2) {
      active[i2].draw(ctx, area);
    }
  }
  getStyle(index2, active) {
    const mode = active ? "active" : "default";
    return index2 === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index2 || 0, mode);
  }
  getContext(index2, active, mode) {
    const dataset = this.getDataset();
    let context;
    if (index2 >= 0 && index2 < this._cachedMeta.data.length) {
      const element2 = this._cachedMeta.data[index2];
      context = element2.$context || (element2.$context = createDataContext(this.getContext(), index2, element2));
      context.parsed = this.getParsed(index2);
      context.raw = dataset.data[index2];
      context.index = context.dataIndex = index2;
    } else {
      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
      context.dataset = dataset;
      context.index = context.datasetIndex = this.index;
    }
    context.active = !!active;
    context.mode = mode;
    return context;
  }
  resolveDatasetElementOptions(mode) {
    return this._resolveElementOptions(this.datasetElementType.id, mode);
  }
  resolveDataElementOptions(index2, mode) {
    return this._resolveElementOptions(this.dataElementType.id, mode, index2);
  }
  _resolveElementOptions(elementType, mode = "default", index2) {
    const active = mode === "active";
    const cache = this._cachedDataOpts;
    const cacheKey = elementType + "-" + mode;
    const cached = cache[cacheKey];
    const sharing = this.enableOptionSharing && defined(index2);
    if (cached) {
      return cloneIfNotShared(cached, sharing);
    }
    const config = this.chart.config;
    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
    const prefixes = active ? [
      `${elementType}Hover`,
      "hover",
      elementType,
      ""
    ] : [
      elementType,
      ""
    ];
    const scopes2 = config.getOptionScopes(this.getDataset(), scopeKeys);
    const names2 = Object.keys(defaults.elements[elementType]);
    const context = () => this.getContext(index2, active, mode);
    const values = config.resolveNamedOptions(scopes2, names2, context, prefixes);
    if (values.$shared) {
      values.$shared = sharing;
      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
    }
    return values;
  }
  _resolveAnimations(index2, transition, active) {
    const chart = this.chart;
    const cache = this._cachedDataOpts;
    const cacheKey = `animation-${transition}`;
    const cached = cache[cacheKey];
    if (cached) {
      return cached;
    }
    let options;
    if (chart.options.animation !== false) {
      const config = this.chart.config;
      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
      const scopes2 = config.getOptionScopes(this.getDataset(), scopeKeys);
      options = config.createResolver(scopes2, this.getContext(index2, active, transition));
    }
    const animations = new Animations(chart, options && options.animations);
    if (options && options._cacheable) {
      cache[cacheKey] = Object.freeze(animations);
    }
    return animations;
  }
  getSharedOptions(options) {
    if (!options.$shared) {
      return;
    }
    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
  }
  includeOptions(mode, sharedOptions) {
    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
  }
  _getSharedOptions(start, mode) {
    const firstOpts = this.resolveDataElementOptions(start, mode);
    const previouslySharedOptions = this._sharedOptions;
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
    this.updateSharedOptions(sharedOptions, mode, firstOpts);
    return {
      sharedOptions,
      includeOptions
    };
  }
  updateElement(element2, index2, properties, mode) {
    if (isDirectUpdateMode(mode)) {
      Object.assign(element2, properties);
    } else {
      this._resolveAnimations(index2, mode).update(element2, properties);
    }
  }
  updateSharedOptions(sharedOptions, mode, newOptions) {
    if (sharedOptions && !isDirectUpdateMode(mode)) {
      this._resolveAnimations(void 0, mode).update(sharedOptions, newOptions);
    }
  }
  _setStyle(element2, index2, mode, active) {
    element2.active = active;
    const options = this.getStyle(index2, active);
    this._resolveAnimations(index2, mode, active).update(element2, {
      options: !active && this.getSharedOptions(options) || options
    });
  }
  removeHoverStyle(element2, datasetIndex, index2) {
    this._setStyle(element2, index2, "active", false);
  }
  setHoverStyle(element2, datasetIndex, index2) {
    this._setStyle(element2, index2, "active", true);
  }
  _removeDatasetHoverStyle() {
    const element2 = this._cachedMeta.dataset;
    if (element2) {
      this._setStyle(element2, void 0, "active", false);
    }
  }
  _setDatasetHoverStyle() {
    const element2 = this._cachedMeta.dataset;
    if (element2) {
      this._setStyle(element2, void 0, "active", true);
    }
  }
  _resyncElements(resetNewElements) {
    const data = this._data;
    const elements2 = this._cachedMeta.data;
    for (const [method, arg1, arg2] of this._syncList) {
      this[method](arg1, arg2);
    }
    this._syncList = [];
    const numMeta = elements2.length;
    const numData = data.length;
    const count = Math.min(numData, numMeta);
    if (count) {
      this.parse(0, count);
    }
    if (numData > numMeta) {
      this._insertElements(numMeta, numData - numMeta, resetNewElements);
    } else if (numData < numMeta) {
      this._removeElements(numData, numMeta - numData);
    }
  }
  _insertElements(start, count, resetNewElements = true) {
    const meta = this._cachedMeta;
    const data = meta.data;
    const end = start + count;
    let i2;
    const move = (arr) => {
      arr.length += count;
      for (i2 = arr.length - 1; i2 >= end; i2--) {
        arr[i2] = arr[i2 - count];
      }
    };
    move(data);
    for (i2 = start; i2 < end; ++i2) {
      data[i2] = new this.dataElementType();
    }
    if (this._parsing) {
      move(meta._parsed);
    }
    this.parse(start, count);
    if (resetNewElements) {
      this.updateElements(data, start, count, "reset");
    }
  }
  updateElements(element2, start, count, mode) {
  }
  _removeElements(start, count) {
    const meta = this._cachedMeta;
    if (this._parsing) {
      const removed = meta._parsed.splice(start, count);
      if (meta._stacked) {
        clearStacks(meta, removed);
      }
    }
    meta.data.splice(start, count);
  }
  _sync(args) {
    if (this._parsing) {
      this._syncList.push(args);
    } else {
      const [method, arg1, arg2] = args;
      this[method](arg1, arg2);
    }
    this.chart._dataChanges.push([
      this.index,
      ...args
    ]);
  }
  _onDataPush() {
    const count = arguments.length;
    this._sync([
      "_insertElements",
      this.getDataset().data.length - count,
      count
    ]);
  }
  _onDataPop() {
    this._sync([
      "_removeElements",
      this._cachedMeta.data.length - 1,
      1
    ]);
  }
  _onDataShift() {
    this._sync([
      "_removeElements",
      0,
      1
    ]);
  }
  _onDataSplice(start, count) {
    if (count) {
      this._sync([
        "_removeElements",
        start,
        count
      ]);
    }
    const newCount = arguments.length - 2;
    if (newCount) {
      this._sync([
        "_insertElements",
        start,
        newCount
      ]);
    }
  }
  _onDataUnshift() {
    this._sync([
      "_insertElements",
      0,
      arguments.length
    ]);
  }
}
__publicField(DatasetController, "defaults", {});
__publicField(DatasetController, "datasetElementType", null);
__publicField(DatasetController, "dataElementType", null);
function getAllScaleValues(scale, type) {
  if (!scale._cache.$bar) {
    const visibleMetas = scale.getMatchingVisibleMetas(type);
    let values = [];
    for (let i2 = 0, ilen = visibleMetas.length; i2 < ilen; i2++) {
      values = values.concat(visibleMetas[i2].controller.getAllParsedValues(scale));
    }
    scale._cache.$bar = _arrayUnique(values.sort((a3, b2) => a3 - b2));
  }
  return scale._cache.$bar;
}
function computeMinSampleSize(meta) {
  const scale = meta.iScale;
  const values = getAllScaleValues(scale, meta.type);
  let min = scale._length;
  let i2, ilen, curr, prev;
  const updateMinAndPrev = () => {
    if (curr === 32767 || curr === -32768) {
      return;
    }
    if (defined(prev)) {
      min = Math.min(min, Math.abs(curr - prev) || min);
    }
    prev = curr;
  };
  for (i2 = 0, ilen = values.length; i2 < ilen; ++i2) {
    curr = scale.getPixelForValue(values[i2]);
    updateMinAndPrev();
  }
  prev = void 0;
  for (i2 = 0, ilen = scale.ticks.length; i2 < ilen; ++i2) {
    curr = scale.getPixelForTick(i2);
    updateMinAndPrev();
  }
  return min;
}
function computeFitCategoryTraits(index2, ruler, options, stackCount) {
  const thickness = options.barThickness;
  let size, ratio;
  if (isNullOrUndef(thickness)) {
    size = ruler.min * options.categoryPercentage;
    ratio = options.barPercentage;
  } else {
    size = thickness * stackCount;
    ratio = 1;
  }
  return {
    chunk: size / stackCount,
    ratio,
    start: ruler.pixels[index2] - size / 2
  };
}
function computeFlexCategoryTraits(index2, ruler, options, stackCount) {
  const pixels = ruler.pixels;
  const curr = pixels[index2];
  let prev = index2 > 0 ? pixels[index2 - 1] : null;
  let next2 = index2 < pixels.length - 1 ? pixels[index2 + 1] : null;
  const percent = options.categoryPercentage;
  if (prev === null) {
    prev = curr - (next2 === null ? ruler.end - ruler.start : next2 - curr);
  }
  if (next2 === null) {
    next2 = curr + curr - prev;
  }
  const start = curr - (curr - Math.min(prev, next2)) / 2 * percent;
  const size = Math.abs(next2 - prev) / 2 * percent;
  return {
    chunk: size / stackCount,
    ratio: options.barPercentage,
    start
  };
}
function parseFloatBar(entry, item, vScale, i2) {
  const startValue = vScale.parse(entry[0], i2);
  const endValue = vScale.parse(entry[1], i2);
  const min = Math.min(startValue, endValue);
  const max = Math.max(startValue, endValue);
  let barStart = min;
  let barEnd = max;
  if (Math.abs(min) > Math.abs(max)) {
    barStart = max;
    barEnd = min;
  }
  item[vScale.axis] = barEnd;
  item._custom = {
    barStart,
    barEnd,
    start: startValue,
    end: endValue,
    min,
    max
  };
}
function parseValue(entry, item, vScale, i2) {
  if (isArray(entry)) {
    parseFloatBar(entry, item, vScale, i2);
  } else {
    item[vScale.axis] = vScale.parse(entry, i2);
  }
  return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
  const iScale = meta.iScale;
  const vScale = meta.vScale;
  const labels = iScale.getLabels();
  const singleScale = iScale === vScale;
  const parsed = [];
  let i2, ilen, item, entry;
  for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
    entry = data[i2];
    item = {};
    item[iScale.axis] = singleScale || iScale.parse(labels[i2], i2);
    parsed.push(parseValue(entry, item, vScale, i2));
  }
  return parsed;
}
function isFloatBar(custom) {
  return custom && custom.barStart !== void 0 && custom.barEnd !== void 0;
}
function barSign(size, vScale, actualBase) {
  if (size !== 0) {
    return sign(size);
  }
  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
  let reverse, start, end, top, bottom;
  if (properties.horizontal) {
    reverse = properties.base > properties.x;
    start = "left";
    end = "right";
  } else {
    reverse = properties.base < properties.y;
    start = "bottom";
    end = "top";
  }
  if (reverse) {
    top = "end";
    bottom = "start";
  } else {
    top = "start";
    bottom = "end";
  }
  return {
    start,
    end,
    reverse,
    top,
    bottom
  };
}
function setBorderSkipped(properties, options, stack, index2) {
  let edge = options.borderSkipped;
  const res = {};
  if (!edge) {
    properties.borderSkipped = res;
    return;
  }
  if (edge === true) {
    properties.borderSkipped = {
      top: true,
      right: true,
      bottom: true,
      left: true
    };
    return;
  }
  const { start, end, reverse, top, bottom } = borderProps(properties);
  if (edge === "middle" && stack) {
    properties.enableBorderRadius = true;
    if ((stack._top || 0) === index2) {
      edge = top;
    } else if ((stack._bottom || 0) === index2) {
      edge = bottom;
    } else {
      res[parseEdge(bottom, start, end, reverse)] = true;
      edge = top;
    }
  }
  res[parseEdge(edge, start, end, reverse)] = true;
  properties.borderSkipped = res;
}
function parseEdge(edge, a3, b2, reverse) {
  if (reverse) {
    edge = swap(edge, a3, b2);
    edge = startEnd(edge, b2, a3);
  } else {
    edge = startEnd(edge, a3, b2);
  }
  return edge;
}
function swap(orig, v1, v2) {
  return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v, start, end) {
  return v === "start" ? start : v === "end" ? end : v;
}
function setInflateAmount(properties, { inflateAmount }, ratio) {
  properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
class BarController extends DatasetController {
  parsePrimitiveData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseArrayData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseObjectData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
    const vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
    const parsed = [];
    let i2, ilen, item, obj;
    for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
      obj = data[i2];
      item = {};
      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i2);
      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i2));
    }
    return parsed;
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    super.updateRangeFromParsed(range, scale, parsed, stack);
    const custom = parsed._custom;
    if (custom && scale === this._cachedMeta.vScale) {
      range.min = Math.min(range.min, custom.min);
      range.max = Math.max(range.max, custom.max);
    }
  }
  getMaxOverflow() {
    return 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const { iScale, vScale } = meta;
    const parsed = this.getParsed(index2);
    const custom = parsed._custom;
    const value = isFloatBar(custom) ? "[" + custom.start + ", " + custom.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
    return {
      label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
      value
    };
  }
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
    const meta = this._cachedMeta;
    meta.stack = this.getDataset().stack;
  }
  update(mode) {
    const meta = this._cachedMeta;
    this.updateElements(meta.data, 0, meta.data.length, mode);
  }
  updateElements(bars, start, count, mode) {
    const reset = mode === "reset";
    const { index: index2, _cachedMeta: { vScale } } = this;
    const base2 = vScale.getBasePixel();
    const horizontal = vScale.isHorizontal();
    const ruler = this._getRuler();
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    for (let i2 = start; i2 < start + count; i2++) {
      const parsed = this.getParsed(i2);
      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {
        base: base2,
        head: base2
      } : this._calculateBarValuePixels(i2);
      const ipixels = this._calculateBarIndexPixels(i2, ruler);
      const stack = (parsed._stacks || {})[vScale.axis];
      const properties = {
        horizontal,
        base: vpixels.base,
        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index2 === stack._top || index2 === stack._bottom,
        x: horizontal ? vpixels.head : ipixels.center,
        y: horizontal ? ipixels.center : vpixels.head,
        height: horizontal ? ipixels.size : Math.abs(vpixels.size),
        width: horizontal ? Math.abs(vpixels.size) : ipixels.size
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, bars[i2].active ? "active" : mode);
      }
      const options = properties.options || bars[i2].options;
      setBorderSkipped(properties, options, stack, index2);
      setInflateAmount(properties, options, ruler.ratio);
      this.updateElement(bars[i2], i2, properties, mode);
    }
  }
  _getStacks(last, dataIndex) {
    const { iScale } = this._cachedMeta;
    const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta) => meta.controller.options.grouped);
    const stacked = iScale.options.stacked;
    const stacks = [];
    const skipNull = (meta) => {
      const parsed = meta.controller.getParsed(dataIndex);
      const val = parsed && parsed[meta.vScale.axis];
      if (isNullOrUndef(val) || isNaN(val)) {
        return true;
      }
    };
    for (const meta of metasets) {
      if (dataIndex !== void 0 && skipNull(meta)) {
        continue;
      }
      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === void 0 && meta.stack === void 0) {
        stacks.push(meta.stack);
      }
      if (meta.index === last) {
        break;
      }
    }
    if (!stacks.length) {
      stacks.push(void 0);
    }
    return stacks;
  }
  _getStackCount(index2) {
    return this._getStacks(void 0, index2).length;
  }
  _getStackIndex(datasetIndex, name, dataIndex) {
    const stacks = this._getStacks(datasetIndex, dataIndex);
    const index2 = name !== void 0 ? stacks.indexOf(name) : -1;
    return index2 === -1 ? stacks.length - 1 : index2;
  }
  _getRuler() {
    const opts = this.options;
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const pixels = [];
    let i2, ilen;
    for (i2 = 0, ilen = meta.data.length; i2 < ilen; ++i2) {
      pixels.push(iScale.getPixelForValue(this.getParsed(i2)[iScale.axis], i2));
    }
    const barThickness = opts.barThickness;
    const min = barThickness || computeMinSampleSize(meta);
    return {
      min,
      pixels,
      start: iScale._startPixel,
      end: iScale._endPixel,
      stackCount: this._getStackCount(),
      scale: iScale,
      grouped: opts.grouped,
      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
    };
  }
  _calculateBarValuePixels(index2) {
    const { _cachedMeta: { vScale, _stacked, index: datasetIndex }, options: { base: baseValue, minBarLength } } = this;
    const actualBase = baseValue || 0;
    const parsed = this.getParsed(index2);
    const custom = parsed._custom;
    const floating = isFloatBar(custom);
    let value = parsed[vScale.axis];
    let start = 0;
    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
    let head, size;
    if (length !== value) {
      start = length - value;
      length = value;
    }
    if (floating) {
      value = custom.barStart;
      length = custom.barEnd - custom.barStart;
      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
        start = 0;
      }
      start += value;
    }
    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;
    let base2 = vScale.getPixelForValue(startValue);
    if (this.chart.getDataVisibility(index2)) {
      head = vScale.getPixelForValue(start + length);
    } else {
      head = base2;
    }
    size = head - base2;
    if (Math.abs(size) < minBarLength) {
      size = barSign(size, vScale, actualBase) * minBarLength;
      if (value === actualBase) {
        base2 -= size / 2;
      }
      const startPixel = vScale.getPixelForDecimal(0);
      const endPixel = vScale.getPixelForDecimal(1);
      const min = Math.min(startPixel, endPixel);
      const max = Math.max(startPixel, endPixel);
      base2 = Math.max(Math.min(base2, max), min);
      head = base2 + size;
      if (_stacked && !floating) {
        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base2);
      }
    }
    if (base2 === vScale.getPixelForValue(actualBase)) {
      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;
      base2 += halfGrid;
      size -= halfGrid;
    }
    return {
      size,
      base: base2,
      head,
      center: head + size / 2
    };
  }
  _calculateBarIndexPixels(index2, ruler) {
    const scale = ruler.scale;
    const options = this.options;
    const skipNull = options.skipNull;
    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);
    let center, size;
    if (ruler.grouped) {
      const stackCount = skipNull ? this._getStackCount(index2) : ruler.stackCount;
      const range = options.barThickness === "flex" ? computeFlexCategoryTraits(index2, ruler, options, stackCount) : computeFitCategoryTraits(index2, ruler, options, stackCount);
      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index2 : void 0);
      center = range.start + range.chunk * stackIndex + range.chunk / 2;
      size = Math.min(maxBarThickness, range.chunk * range.ratio);
    } else {
      center = scale.getPixelForValue(this.getParsed(index2)[scale.axis], index2);
      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
    }
    return {
      base: center - size / 2,
      head: center + size / 2,
      center,
      size
    };
  }
  draw() {
    const meta = this._cachedMeta;
    const vScale = meta.vScale;
    const rects = meta.data;
    const ilen = rects.length;
    let i2 = 0;
    for (; i2 < ilen; ++i2) {
      if (this.getParsed(i2)[vScale.axis] !== null) {
        rects[i2].draw(this._ctx);
      }
    }
  }
}
__publicField(BarController, "id", "bar");
__publicField(BarController, "defaults", {
  datasetElementType: false,
  dataElementType: "bar",
  categoryPercentage: 0.8,
  barPercentage: 0.9,
  grouped: true,
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "base",
        "width",
        "height"
      ]
    }
  }
});
__publicField(BarController, "overrides", {
  scales: {
    _index_: {
      type: "category",
      offset: true,
      grid: {
        offset: true
      }
    },
    _value_: {
      type: "linear",
      beginAtZero: true
    }
  }
});
class BubbleController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
  }
  parsePrimitiveData(meta, data, start, count) {
    const parsed = super.parsePrimitiveData(meta, data, start, count);
    for (let i2 = 0; i2 < parsed.length; i2++) {
      parsed[i2]._custom = this.resolveDataElementOptions(i2 + start).radius;
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const parsed = super.parseArrayData(meta, data, start, count);
    for (let i2 = 0; i2 < parsed.length; i2++) {
      const item = data[start + i2];
      parsed[i2]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i2 + start).radius);
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const parsed = super.parseObjectData(meta, data, start, count);
    for (let i2 = 0; i2 < parsed.length; i2++) {
      const item = data[start + i2];
      parsed[i2]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i2 + start).radius);
    }
    return parsed;
  }
  getMaxOverflow() {
    const data = this._cachedMeta.data;
    let max = 0;
    for (let i2 = data.length - 1; i2 >= 0; --i2) {
      max = Math.max(max, data[i2].size(this.resolveDataElementOptions(i2)) / 2);
    }
    return max > 0 && max;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const labels = this.chart.data.labels || [];
    const { xScale, yScale } = meta;
    const parsed = this.getParsed(index2);
    const x2 = xScale.getLabelForValue(parsed.x);
    const y3 = yScale.getLabelForValue(parsed.y);
    const r = parsed._custom;
    return {
      label: labels[index2] || "",
      value: "(" + x2 + ", " + y3 + (r ? ", " + r : "") + ")"
    };
  }
  update(mode) {
    const points = this._cachedMeta.data;
    this.updateElements(points, 0, points.length, mode);
  }
  updateElements(points, start, count, mode) {
    const reset = mode === "reset";
    const { iScale, vScale } = this._cachedMeta;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    for (let i2 = start; i2 < start + count; i2++) {
      const point = points[i2];
      const parsed = !reset && this.getParsed(i2);
      const properties = {};
      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
      properties.skip = isNaN(iPixel) || isNaN(vPixel);
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
        if (reset) {
          properties.options.radius = 0;
        }
      }
      this.updateElement(point, i2, properties, mode);
    }
  }
  resolveDataElementOptions(index2, mode) {
    const parsed = this.getParsed(index2);
    let values = super.resolveDataElementOptions(index2, mode);
    if (values.$shared) {
      values = Object.assign({}, values, {
        $shared: false
      });
    }
    const radius = values.radius;
    if (mode !== "active") {
      values.radius = 0;
    }
    values.radius += valueOrDefault(parsed && parsed._custom, radius);
    return values;
  }
}
__publicField(BubbleController, "id", "bubble");
__publicField(BubbleController, "defaults", {
  datasetElementType: false,
  dataElementType: "point",
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "borderWidth",
        "radius"
      ]
    }
  }
});
__publicField(BubbleController, "overrides", {
  scales: {
    x: {
      type: "linear"
    },
    y: {
      type: "linear"
    }
  }
});
function getRatioAndOffset(rotation, circumference, cutout) {
  let ratioX = 1;
  let ratioY = 1;
  let offsetX = 0;
  let offsetY = 0;
  if (circumference < TAU) {
    const startAngle = rotation;
    const endAngle = startAngle + circumference;
    const startX = Math.cos(startAngle);
    const startY = Math.sin(startAngle);
    const endX = Math.cos(endAngle);
    const endY = Math.sin(endAngle);
    const calcMax = (angle, a3, b2) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a3, a3 * cutout, b2, b2 * cutout);
    const calcMin = (angle, a3, b2) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a3, a3 * cutout, b2, b2 * cutout);
    const maxX = calcMax(0, startX, endX);
    const maxY = calcMax(HALF_PI, startY, endY);
    const minX = calcMin(PI, startX, endX);
    const minY = calcMin(PI + HALF_PI, startY, endY);
    ratioX = (maxX - minX) / 2;
    ratioY = (maxY - minY) / 2;
    offsetX = -(maxX + minX) / 2;
    offsetY = -(maxY + minY) / 2;
  }
  return {
    ratioX,
    ratioY,
    offsetX,
    offsetY
  };
}
class DoughnutController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.enableOptionSharing = true;
    this.innerRadius = void 0;
    this.outerRadius = void 0;
    this.offsetX = void 0;
    this.offsetY = void 0;
  }
  linkScales() {
  }
  parse(start, count) {
    const data = this.getDataset().data;
    const meta = this._cachedMeta;
    if (this._parsing === false) {
      meta._parsed = data;
    } else {
      let getter = (i3) => +data[i3];
      if (isObject(data[start])) {
        const { key = "value" } = this._parsing;
        getter = (i3) => +resolveObjectKey(data[i3], key);
      }
      let i2, ilen;
      for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
        meta._parsed[i2] = getter(i2);
      }
    }
  }
  _getRotation() {
    return toRadians(this.options.rotation - 90);
  }
  _getCircumference() {
    return toRadians(this.options.circumference);
  }
  _getRotationExtents() {
    let min = TAU;
    let max = -TAU;
    for (let i2 = 0; i2 < this.chart.data.datasets.length; ++i2) {
      if (this.chart.isDatasetVisible(i2) && this.chart.getDatasetMeta(i2).type === this._type) {
        const controller = this.chart.getDatasetMeta(i2).controller;
        const rotation = controller._getRotation();
        const circumference = controller._getCircumference();
        min = Math.min(min, rotation);
        max = Math.max(max, rotation + circumference);
      }
    }
    return {
      rotation: min,
      circumference: max - min
    };
  }
  update(mode) {
    const chart = this.chart;
    const { chartArea } = chart;
    const meta = this._cachedMeta;
    const arcs = meta.data;
    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);
    const chartWeight = this._getRingWeight(this.index);
    const { circumference, rotation } = this._getRotationExtents();
    const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);
    const maxWidth = (chartArea.width - spacing) / ratioX;
    const maxHeight = (chartArea.height - spacing) / ratioY;
    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
    const outerRadius = toDimension(this.options.radius, maxRadius);
    const innerRadius = Math.max(outerRadius * cutout, 0);
    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
    this.offsetX = offsetX * outerRadius;
    this.offsetY = offsetY * outerRadius;
    meta.total = this.calculateTotal();
    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
    this.updateElements(arcs, 0, arcs.length, mode);
  }
  _circumference(i2, reset) {
    const opts = this.options;
    const meta = this._cachedMeta;
    const circumference = this._getCircumference();
    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i2) || meta._parsed[i2] === null || meta.data[i2].hidden) {
      return 0;
    }
    return this.calculateCircumference(meta._parsed[i2] * circumference / TAU);
  }
  updateElements(arcs, start, count, mode) {
    const reset = mode === "reset";
    const chart = this.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const centerX = (chartArea.left + chartArea.right) / 2;
    const centerY = (chartArea.top + chartArea.bottom) / 2;
    const animateScale = reset && animationOpts.animateScale;
    const innerRadius = animateScale ? 0 : this.innerRadius;
    const outerRadius = animateScale ? 0 : this.outerRadius;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    let startAngle = this._getRotation();
    let i2;
    for (i2 = 0; i2 < start; ++i2) {
      startAngle += this._circumference(i2, reset);
    }
    for (i2 = start; i2 < start + count; ++i2) {
      const circumference = this._circumference(i2, reset);
      const arc = arcs[i2];
      const properties = {
        x: centerX + this.offsetX,
        y: centerY + this.offsetY,
        startAngle,
        endAngle: startAngle + circumference,
        circumference,
        outerRadius,
        innerRadius
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, arc.active ? "active" : mode);
      }
      startAngle += circumference;
      this.updateElement(arc, i2, properties, mode);
    }
  }
  calculateTotal() {
    const meta = this._cachedMeta;
    const metaData = meta.data;
    let total = 0;
    let i2;
    for (i2 = 0; i2 < metaData.length; i2++) {
      const value = meta._parsed[i2];
      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i2) && !metaData[i2].hidden) {
        total += Math.abs(value);
      }
    }
    return total;
  }
  calculateCircumference(value) {
    const total = this._cachedMeta.total;
    if (total > 0 && !isNaN(value)) {
      return TAU * (Math.abs(value) / total);
    }
    return 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const chart = this.chart;
    const labels = chart.data.labels || [];
    const value = formatNumber(meta._parsed[index2], chart.options.locale);
    return {
      label: labels[index2] || "",
      value
    };
  }
  getMaxBorderWidth(arcs) {
    let max = 0;
    const chart = this.chart;
    let i2, ilen, meta, controller, options;
    if (!arcs) {
      for (i2 = 0, ilen = chart.data.datasets.length; i2 < ilen; ++i2) {
        if (chart.isDatasetVisible(i2)) {
          meta = chart.getDatasetMeta(i2);
          arcs = meta.data;
          controller = meta.controller;
          break;
        }
      }
    }
    if (!arcs) {
      return 0;
    }
    for (i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
      options = controller.resolveDataElementOptions(i2);
      if (options.borderAlign !== "inner") {
        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
      }
    }
    return max;
  }
  getMaxOffset(arcs) {
    let max = 0;
    for (let i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
      const options = this.resolveDataElementOptions(i2);
      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
    }
    return max;
  }
  _getRingWeightOffset(datasetIndex) {
    let ringWeightOffset = 0;
    for (let i2 = 0; i2 < datasetIndex; ++i2) {
      if (this.chart.isDatasetVisible(i2)) {
        ringWeightOffset += this._getRingWeight(i2);
      }
    }
    return ringWeightOffset;
  }
  _getRingWeight(datasetIndex) {
    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
  }
  _getVisibleDatasetWeightTotal() {
    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
  }
}
__publicField(DoughnutController, "id", "doughnut");
__publicField(DoughnutController, "defaults", {
  datasetElementType: false,
  dataElementType: "arc",
  animation: {
    animateRotate: true,
    animateScale: false
  },
  animations: {
    numbers: {
      type: "number",
      properties: [
        "circumference",
        "endAngle",
        "innerRadius",
        "outerRadius",
        "startAngle",
        "x",
        "y",
        "offset",
        "borderWidth",
        "spacing"
      ]
    }
  },
  cutout: "50%",
  rotation: 0,
  circumference: 360,
  radius: "100%",
  spacing: 0,
  indexAxis: "r"
});
__publicField(DoughnutController, "descriptors", {
  _scriptable: (name) => name !== "spacing",
  _indexable: (name) => name !== "spacing" && !name.startsWith("borderDash") && !name.startsWith("hoverBorderDash")
});
__publicField(DoughnutController, "overrides", {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;
          if (data.labels.length && data.datasets.length) {
            const { labels: { pointStyle, color: color2 } } = chart.legend.options;
            return data.labels.map((label, i2) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i2);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                fontColor: color2,
                lineWidth: style.borderWidth,
                pointStyle,
                hidden: !chart.getDataVisibility(i2),
                index: i2
              };
            });
          }
          return [];
        }
      },
      onClick(e2, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }
    }
  }
});
class LineController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    this.supportsDecimation = true;
    super.initialize();
  }
  update(mode) {
    const meta = this._cachedMeta;
    const { dataset: line, data: points = [], _dataset } = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if (_scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }
    line._chart = this.chart;
    line._datasetIndex = this.index;
    line._decimated = !!_dataset._decimated;
    line.points = points;
    const options = this.resolveDatasetElementOptions(mode);
    if (!this.options.showLine) {
      options.borderWidth = 0;
    }
    options.segment = this.options.segment;
    this.updateElement(line, void 0, {
      animated: !animationsDisabled,
      options
    }, mode);
    this.updateElements(points, start, count, mode);
  }
  updateElements(points, start, count, mode) {
    const reset = mode === "reset";
    const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const { spanGaps, segment } = this.options;
    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
    const end = start + count;
    const pointsCount = points.length;
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i2 = 0; i2 < pointsCount; ++i2) {
      const point = points[i2];
      const properties = directUpdate ? point : {};
      if (i2 < start || i2 >= end) {
        properties.skip = true;
        continue;
      }
      const parsed = this.getParsed(i2);
      const nullData = isNullOrUndef(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i2);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i2);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i2 > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i2];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
      }
      if (!directUpdate) {
        this.updateElement(point, i2, properties, mode);
      }
      prevParsed = parsed;
    }
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    const data = meta.data || [];
    if (!data.length) {
      return border;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }
  draw() {
    const meta = this._cachedMeta;
    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
    super.draw();
  }
}
__publicField(LineController, "id", "line");
__publicField(LineController, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  showLine: true,
  spanGaps: false
});
__publicField(LineController, "overrides", {
  scales: {
    _index_: {
      type: "category"
    },
    _value_: {
      type: "linear"
    }
  }
});
class PolarAreaController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.innerRadius = void 0;
    this.outerRadius = void 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const chart = this.chart;
    const labels = chart.data.labels || [];
    const value = formatNumber(meta._parsed[index2].r, chart.options.locale);
    return {
      label: labels[index2] || "",
      value
    };
  }
  parseObjectData(meta, data, start, count) {
    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
  }
  update(mode) {
    const arcs = this._cachedMeta.data;
    this._updateRadius();
    this.updateElements(arcs, 0, arcs.length, mode);
  }
  getMinMax() {
    const meta = this._cachedMeta;
    const range = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    meta.data.forEach((element2, index2) => {
      const parsed = this.getParsed(index2).r;
      if (!isNaN(parsed) && this.chart.getDataVisibility(index2)) {
        if (parsed < range.min) {
          range.min = parsed;
        }
        if (parsed > range.max) {
          range.max = parsed;
        }
      }
    });
    return range;
  }
  _updateRadius() {
    const chart = this.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
    const outerRadius = Math.max(minSize / 2, 0);
    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
    this.outerRadius = outerRadius - radiusLength * this.index;
    this.innerRadius = this.outerRadius - radiusLength;
  }
  updateElements(arcs, start, count, mode) {
    const reset = mode === "reset";
    const chart = this.chart;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const scale = this._cachedMeta.rScale;
    const centerX = scale.xCenter;
    const centerY = scale.yCenter;
    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;
    let angle = datasetStartAngle;
    let i2;
    const defaultAngle = 360 / this.countVisibleElements();
    for (i2 = 0; i2 < start; ++i2) {
      angle += this._computeAngle(i2, mode, defaultAngle);
    }
    for (i2 = start; i2 < start + count; i2++) {
      const arc = arcs[i2];
      let startAngle = angle;
      let endAngle = angle + this._computeAngle(i2, mode, defaultAngle);
      let outerRadius = chart.getDataVisibility(i2) ? scale.getDistanceFromCenterForValue(this.getParsed(i2).r) : 0;
      angle = endAngle;
      if (reset) {
        if (animationOpts.animateScale) {
          outerRadius = 0;
        }
        if (animationOpts.animateRotate) {
          startAngle = endAngle = datasetStartAngle;
        }
      }
      const properties = {
        x: centerX,
        y: centerY,
        innerRadius: 0,
        outerRadius,
        startAngle,
        endAngle,
        options: this.resolveDataElementOptions(i2, arc.active ? "active" : mode)
      };
      this.updateElement(arc, i2, properties, mode);
    }
  }
  countVisibleElements() {
    const meta = this._cachedMeta;
    let count = 0;
    meta.data.forEach((element2, index2) => {
      if (!isNaN(this.getParsed(index2).r) && this.chart.getDataVisibility(index2)) {
        count++;
      }
    });
    return count;
  }
  _computeAngle(index2, mode, defaultAngle) {
    return this.chart.getDataVisibility(index2) ? toRadians(this.resolveDataElementOptions(index2, mode).angle || defaultAngle) : 0;
  }
}
__publicField(PolarAreaController, "id", "polarArea");
__publicField(PolarAreaController, "defaults", {
  dataElementType: "arc",
  animation: {
    animateRotate: true,
    animateScale: true
  },
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "startAngle",
        "endAngle",
        "innerRadius",
        "outerRadius"
      ]
    }
  },
  indexAxis: "r",
  startAngle: 0
});
__publicField(PolarAreaController, "overrides", {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;
          if (data.labels.length && data.datasets.length) {
            const { labels: { pointStyle, color: color2 } } = chart.legend.options;
            return data.labels.map((label, i2) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i2);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                fontColor: color2,
                lineWidth: style.borderWidth,
                pointStyle,
                hidden: !chart.getDataVisibility(i2),
                index: i2
              };
            });
          }
          return [];
        }
      },
      onClick(e2, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }
    }
  },
  scales: {
    r: {
      type: "radialLinear",
      angleLines: {
        display: false
      },
      beginAtZero: true,
      grid: {
        circular: true
      },
      pointLabels: {
        display: false
      },
      startAngle: 0
    }
  }
});
class PieController extends DoughnutController {
}
__publicField(PieController, "id", "pie");
__publicField(PieController, "defaults", {
  cutout: 0,
  rotation: 0,
  circumference: 360,
  radius: "100%"
});
class RadarController extends DatasetController {
  getLabelAndValue(index2) {
    const vScale = this._cachedMeta.vScale;
    const parsed = this.getParsed(index2);
    return {
      label: vScale.getLabels()[index2],
      value: "" + vScale.getLabelForValue(parsed[vScale.axis])
    };
  }
  parseObjectData(meta, data, start, count) {
    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
  }
  update(mode) {
    const meta = this._cachedMeta;
    const line = meta.dataset;
    const points = meta.data || [];
    const labels = meta.iScale.getLabels();
    line.points = points;
    if (mode !== "resize") {
      const options = this.resolveDatasetElementOptions(mode);
      if (!this.options.showLine) {
        options.borderWidth = 0;
      }
      const properties = {
        _loop: true,
        _fullLoop: labels.length === points.length,
        options
      };
      this.updateElement(line, void 0, properties, mode);
    }
    this.updateElements(points, 0, points.length, mode);
  }
  updateElements(points, start, count, mode) {
    const scale = this._cachedMeta.rScale;
    const reset = mode === "reset";
    for (let i2 = start; i2 < start + count; i2++) {
      const point = points[i2];
      const options = this.resolveDataElementOptions(i2, point.active ? "active" : mode);
      const pointPosition = scale.getPointPositionForValue(i2, this.getParsed(i2).r);
      const x2 = reset ? scale.xCenter : pointPosition.x;
      const y3 = reset ? scale.yCenter : pointPosition.y;
      const properties = {
        x: x2,
        y: y3,
        angle: pointPosition.angle,
        skip: isNaN(x2) || isNaN(y3),
        options
      };
      this.updateElement(point, i2, properties, mode);
    }
  }
}
__publicField(RadarController, "id", "radar");
__publicField(RadarController, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  indexAxis: "r",
  showLine: true,
  elements: {
    line: {
      fill: "start"
    }
  }
});
__publicField(RadarController, "overrides", {
  aspectRatio: 1,
  scales: {
    r: {
      type: "radialLinear"
    }
  }
});
class ScatterController extends DatasetController {
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const labels = this.chart.data.labels || [];
    const { xScale, yScale } = meta;
    const parsed = this.getParsed(index2);
    const x2 = xScale.getLabelForValue(parsed.x);
    const y3 = yScale.getLabelForValue(parsed.y);
    return {
      label: labels[index2] || "",
      value: "(" + x2 + ", " + y3 + ")"
    };
  }
  update(mode) {
    const meta = this._cachedMeta;
    const { data: points = [] } = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if (_scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }
    if (this.options.showLine) {
      if (!this.datasetElementType) {
        this.addElements();
      }
      const { dataset: line, _dataset } = meta;
      line._chart = this.chart;
      line._datasetIndex = this.index;
      line._decimated = !!_dataset._decimated;
      line.points = points;
      const options = this.resolveDatasetElementOptions(mode);
      options.segment = this.options.segment;
      this.updateElement(line, void 0, {
        animated: !animationsDisabled,
        options
      }, mode);
    } else if (this.datasetElementType) {
      delete meta.dataset;
      this.datasetElementType = false;
    }
    this.updateElements(points, start, count, mode);
  }
  addElements() {
    const { showLine } = this.options;
    if (!this.datasetElementType && showLine) {
      this.datasetElementType = this.chart.registry.getElement("line");
    }
    super.addElements();
  }
  updateElements(points, start, count, mode) {
    const reset = mode === "reset";
    const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
    const firstOpts = this.resolveDataElementOptions(start, mode);
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode, sharedOptions);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const { spanGaps, segment } = this.options;
    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i2 = start; i2 < start + count; ++i2) {
      const point = points[i2];
      const parsed = this.getParsed(i2);
      const properties = directUpdate ? point : {};
      const nullData = isNullOrUndef(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i2);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i2);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i2 > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i2];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
      }
      if (!directUpdate) {
        this.updateElement(point, i2, properties, mode);
      }
      prevParsed = parsed;
    }
    this.updateSharedOptions(sharedOptions, mode, firstOpts);
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const data = meta.data || [];
    if (!this.options.showLine) {
      let max = 0;
      for (let i2 = data.length - 1; i2 >= 0; --i2) {
        max = Math.max(max, data[i2].size(this.resolveDataElementOptions(i2)) / 2);
      }
      return max > 0 && max;
    }
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    if (!data.length) {
      return border;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }
}
__publicField(ScatterController, "id", "scatter");
__publicField(ScatterController, "defaults", {
  datasetElementType: false,
  dataElementType: "point",
  showLine: false,
  fill: false
});
__publicField(ScatterController, "overrides", {
  interaction: {
    mode: "point"
  },
  scales: {
    x: {
      type: "linear"
    },
    y: {
      type: "linear"
    }
  }
});
var controllers = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BarController,
  BubbleController,
  DoughnutController,
  LineController,
  PieController,
  PolarAreaController,
  RadarController,
  ScatterController
});
function abstract() {
  throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
class DateAdapterBase {
  constructor(options) {
    __publicField(this, "options");
    this.options = options || {};
  }
  /**
  * Override default date adapter methods.
  * Accepts type parameter to define options type.
  * @example
  * Chart._adapters._date.override<{myAdapterOption: string}>({
  *   init() {
  *     console.log(this.options.myAdapterOption);
  *   }
  * })
  */
  static override(members) {
    Object.assign(DateAdapterBase.prototype, members);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  init() {
  }
  formats() {
    return abstract();
  }
  parse() {
    return abstract();
  }
  format() {
    return abstract();
  }
  add() {
    return abstract();
  }
  diff() {
    return abstract();
  }
  startOf() {
    return abstract();
  }
  endOf() {
    return abstract();
  }
}
var adapters = {
  _date: DateAdapterBase
};
function binarySearch(metaset, axis, value, intersect) {
  const { controller, data, _sorted } = metaset;
  const iScale = controller._cachedMeta.iScale;
  if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
    if (!intersect) {
      return lookupMethod(data, axis, value);
    } else if (controller._sharedOptions) {
      const el = data[0];
      const range = typeof el.getRange === "function" && el.getRange(axis);
      if (range) {
        const start = lookupMethod(data, axis, value - range);
        const end = lookupMethod(data, axis, value + range);
        return {
          lo: start.lo,
          hi: end.hi
        };
      }
    }
  }
  return {
    lo: 0,
    hi: data.length - 1
  };
}
function evaluateInteractionItems(chart, axis, position, handler, intersect) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  const value = position[axis];
  for (let i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
    const { index: index2, data } = metasets[i2];
    const { lo, hi } = binarySearch(metasets[i2], axis, value, intersect);
    for (let j = lo; j <= hi; ++j) {
      const element2 = data[j];
      if (!element2.skip) {
        handler(element2, index2, j);
      }
    }
  }
}
function getDistanceMetricForAxis(axis) {
  const useX = axis.indexOf("x") !== -1;
  const useY = axis.indexOf("y") !== -1;
  return function(pt1, pt2) {
    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}
function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
  const items = [];
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return items;
  }
  const evaluationFunc = function(element2, datasetIndex, index2) {
    if (!includeInvisible && !_isPointInArea(element2, chart.chartArea, 0)) {
      return;
    }
    if (element2.inRange(position.x, position.y, useFinalPosition)) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
    }
  };
  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
  return items;
}
function getNearestRadialItems(chart, position, axis, useFinalPosition) {
  let items = [];
  function evaluationFunc(element2, datasetIndex, index2) {
    const { startAngle, endAngle } = element2.getProps([
      "startAngle",
      "endAngle"
    ], useFinalPosition);
    const { angle } = getAngleFromPoint(element2, {
      x: position.x,
      y: position.y
    });
    if (_angleBetween(angle, startAngle, endAngle)) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  let items = [];
  const distanceMetric = getDistanceMetricForAxis(axis);
  let minDistance = Number.POSITIVE_INFINITY;
  function evaluationFunc(element2, datasetIndex, index2) {
    const inRange2 = element2.inRange(position.x, position.y, useFinalPosition);
    if (intersect && !inRange2) {
      return;
    }
    const center = element2.getCenterPoint(useFinalPosition);
    const pointInArea = !!includeInvisible || chart.isPointInArea(center);
    if (!pointInArea && !inRange2) {
      return;
    }
    const distance = distanceMetric(position, center);
    if (distance < minDistance) {
      items = [
        {
          element: element2,
          datasetIndex,
          index: index2
        }
      ];
      minDistance = distance;
    } else if (distance === minDistance) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return [];
  }
  return axis === "r" && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
  const items = [];
  const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
  let intersectsItem = false;
  evaluateInteractionItems(chart, axis, position, (element2, datasetIndex, index2) => {
    if (element2[rangeMethod](position[axis], useFinalPosition)) {
      items.push({
        element: element2,
        datasetIndex,
        index: index2
      });
      intersectsItem = intersectsItem || element2.inRange(position.x, position.y, useFinalPosition);
    }
  });
  if (intersect && !intersectsItem) {
    return [];
  }
  return items;
}
var Interaction = {
  evaluateInteractionItems,
  modes: {
    index(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "x";
      const includeInvisible = options.includeInvisible || false;
      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      const elements2 = [];
      if (!items.length) {
        return [];
      }
      chart.getSortedVisibleDatasetMetas().forEach((meta) => {
        const index2 = items[0].index;
        const element2 = meta.data[index2];
        if (element2 && !element2.skip) {
          elements2.push({
            element: element2,
            datasetIndex: meta.index,
            index: index2
          });
        }
      });
      return elements2;
    },
    dataset(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      if (items.length > 0) {
        const datasetIndex = items[0].datasetIndex;
        const data = chart.getDatasetMeta(datasetIndex).data;
        items = [];
        for (let i2 = 0; i2 < data.length; ++i2) {
          items.push({
            element: data[i2],
            datasetIndex,
            index: i2
          });
        }
      }
      return items;
    },
    point(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
    },
    nearest(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
    },
    x(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      return getAxisItems(chart, position, "x", options.intersect, useFinalPosition);
    },
    y(chart, e2, options, useFinalPosition) {
      const position = getRelativePosition(e2, chart);
      return getAxisItems(chart, position, "y", options.intersect, useFinalPosition);
    }
  }
};
const STATIC_POSITIONS = [
  "left",
  "top",
  "right",
  "bottom"
];
function filterByPosition(array, position) {
  return array.filter((v) => v.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
  return array.filter((v) => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}
function sortByWeight(array, reverse) {
  return array.sort((a3, b2) => {
    const v0 = reverse ? b2 : a3;
    const v1 = reverse ? a3 : b2;
    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
  });
}
function wrapBoxes(boxes) {
  const layoutBoxes = [];
  let i2, ilen, box, pos, stack, stackWeight;
  for (i2 = 0, ilen = (boxes || []).length; i2 < ilen; ++i2) {
    box = boxes[i2];
    ({ position: pos, options: { stack, stackWeight = 1 } } = box);
    layoutBoxes.push({
      index: i2,
      box,
      pos,
      horizontal: box.isHorizontal(),
      weight: box.weight,
      stack: stack && pos + stack,
      stackWeight
    });
  }
  return layoutBoxes;
}
function buildStacks(layouts2) {
  const stacks = {};
  for (const wrap of layouts2) {
    const { stack, pos, stackWeight } = wrap;
    if (!stack || !STATIC_POSITIONS.includes(pos)) {
      continue;
    }
    const _stack = stacks[stack] || (stacks[stack] = {
      count: 0,
      placed: 0,
      weight: 0,
      size: 0
    });
    _stack.count++;
    _stack.weight += stackWeight;
  }
  return stacks;
}
function setLayoutDims(layouts2, params) {
  const stacks = buildStacks(layouts2);
  const { vBoxMaxWidth, hBoxMaxHeight } = params;
  let i2, ilen, layout;
  for (i2 = 0, ilen = layouts2.length; i2 < ilen; ++i2) {
    layout = layouts2[i2];
    const { fullSize } = layout.box;
    const stack = stacks[layout.stack];
    const factor = stack && layout.stackWeight / stack.weight;
    if (layout.horizontal) {
      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
      layout.height = hBoxMaxHeight;
    } else {
      layout.width = vBoxMaxWidth;
      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
    }
  }
  return stacks;
}
function buildLayoutBoxes(boxes) {
  const layoutBoxes = wrapBoxes(boxes);
  const fullSize = sortByWeight(layoutBoxes.filter((wrap) => wrap.box.fullSize), true);
  const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
  const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
  const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
  const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
  return {
    fullSize,
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, "chartArea"),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}
function getCombinedMax(maxPadding, chartArea, a3, b2) {
  return Math.max(maxPadding[a3], chartArea[a3]) + Math.max(maxPadding[b2], chartArea[b2]);
}
function updateMaxPadding(maxPadding, boxPadding) {
  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
  const { pos, box } = layout;
  const maxPadding = chartArea.maxPadding;
  if (!isObject(pos)) {
    if (layout.size) {
      chartArea[pos] -= layout.size;
    }
    const stack = stacks[layout.stack] || {
      size: 0,
      count: 1
    };
    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
    layout.size = stack.size / stack.count;
    chartArea[pos] += layout.size;
  }
  if (box.getPadding) {
    updateMaxPadding(maxPadding, box.getPadding());
  }
  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
  const widthChanged = newWidth !== chartArea.w;
  const heightChanged = newHeight !== chartArea.h;
  chartArea.w = newWidth;
  chartArea.h = newHeight;
  return layout.horizontal ? {
    same: widthChanged,
    other: heightChanged
  } : {
    same: heightChanged,
    other: widthChanged
  };
}
function handleMaxPadding(chartArea) {
  const maxPadding = chartArea.maxPadding;
  function updatePos(pos) {
    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }
  chartArea.y += updatePos("top");
  chartArea.x += updatePos("left");
  updatePos("right");
  updatePos("bottom");
}
function getMargins(horizontal, chartArea) {
  const maxPadding = chartArea.maxPadding;
  function marginForPositions(positions2) {
    const margin = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    positions2.forEach((pos) => {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }
  return horizontal ? marginForPositions([
    "left",
    "right"
  ]) : marginForPositions([
    "top",
    "bottom"
  ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
  const refitBoxes = [];
  let i2, ilen, layout, box, refit, changed;
  for (i2 = 0, ilen = boxes.length, refit = 0; i2 < ilen; ++i2) {
    layout = boxes[i2];
    box = layout.box;
    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
    const { same, other } = updateDims(chartArea, params, layout, stacks);
    refit |= same && refitBoxes.length;
    changed = changed || other;
    if (!box.fullSize) {
      refitBoxes.push(layout);
    }
  }
  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
  box.top = top;
  box.left = left;
  box.right = left + width;
  box.bottom = top + height;
  box.width = width;
  box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
  const userPadding = params.padding;
  let { x: x2, y: y3 } = chartArea;
  for (const layout of boxes) {
    const box = layout.box;
    const stack = stacks[layout.stack] || {
      count: 1,
      placed: 0,
      weight: 1
    };
    const weight = layout.stackWeight / stack.weight || 1;
    if (layout.horizontal) {
      const width = chartArea.w * weight;
      const height = stack.size || box.height;
      if (defined(stack.start)) {
        y3 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, userPadding.left, y3, params.outerWidth - userPadding.right - userPadding.left, height);
      } else {
        setBoxDims(box, chartArea.left + stack.placed, y3, width, height);
      }
      stack.start = y3;
      stack.placed += width;
      y3 = box.bottom;
    } else {
      const height = chartArea.h * weight;
      const width = stack.size || box.width;
      if (defined(stack.start)) {
        x2 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, x2, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
      } else {
        setBoxDims(box, x2, chartArea.top + stack.placed, width, height);
      }
      stack.start = x2;
      stack.placed += height;
      x2 = box.right;
    }
  }
  chartArea.x = x2;
  chartArea.y = y3;
}
var layouts = {
  addBox(chart, item) {
    if (!chart.boxes) {
      chart.boxes = [];
    }
    item.fullSize = item.fullSize || false;
    item.position = item.position || "top";
    item.weight = item.weight || 0;
    item._layers = item._layers || function() {
      return [
        {
          z: 0,
          draw(chartArea) {
            item.draw(chartArea);
          }
        }
      ];
    };
    chart.boxes.push(item);
  },
  removeBox(chart, layoutItem) {
    const index2 = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    if (index2 !== -1) {
      chart.boxes.splice(index2, 1);
    }
  },
  configure(chart, item, options) {
    item.fullSize = options.fullSize;
    item.position = options.position;
    item.weight = options.weight;
  },
  update(chart, width, height, minPadding) {
    if (!chart) {
      return;
    }
    const padding = toPadding(chart.options.layout.padding);
    const availableWidth = Math.max(width - padding.width, 0);
    const availableHeight = Math.max(height - padding.height, 0);
    const boxes = buildLayoutBoxes(chart.boxes);
    const verticalBoxes = boxes.vertical;
    const horizontalBoxes = boxes.horizontal;
    each(chart.boxes, (box) => {
      if (typeof box.beforeLayout === "function") {
        box.beforeLayout();
      }
    });
    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
    const params = Object.freeze({
      outerWidth: width,
      outerHeight: height,
      padding,
      availableWidth,
      availableHeight,
      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
      hBoxMaxHeight: availableHeight / 2
    });
    const maxPadding = Object.assign({}, padding);
    updateMaxPadding(maxPadding, toPadding(minPadding));
    const chartArea = Object.assign({
      maxPadding,
      w: availableWidth,
      h: availableHeight,
      x: padding.left,
      y: padding.top
    }, padding);
    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
    fitBoxes(boxes.fullSize, chartArea, params, stacks);
    fitBoxes(verticalBoxes, chartArea, params, stacks);
    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
      fitBoxes(verticalBoxes, chartArea, params, stacks);
    }
    handleMaxPadding(chartArea);
    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
    chartArea.x += chartArea.w;
    chartArea.y += chartArea.h;
    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
    chart.chartArea = {
      left: chartArea.left,
      top: chartArea.top,
      right: chartArea.left + chartArea.w,
      bottom: chartArea.top + chartArea.h,
      height: chartArea.h,
      width: chartArea.w
    };
    each(boxes.chartArea, (layout) => {
      const box = layout.box;
      Object.assign(box, chart.chartArea);
      box.update(chartArea.w, chartArea.h, {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      });
    });
  }
};
class BasePlatform {
  acquireContext(canvas, aspectRatio) {
  }
  releaseContext(context) {
    return false;
  }
  addEventListener(chart, type, listener) {
  }
  removeEventListener(chart, type, listener) {
  }
  getDevicePixelRatio() {
    return 1;
  }
  getMaximumSize(element2, width, height, aspectRatio) {
    width = Math.max(0, width || element2.width);
    height = height || element2.height;
    return {
      width,
      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
    };
  }
  isAttached(canvas) {
    return true;
  }
  updateConfig(config) {
  }
}
class BasicPlatform extends BasePlatform {
  acquireContext(item) {
    return item && item.getContext && item.getContext("2d") || null;
  }
  updateConfig(config) {
    config.options.animation = false;
  }
}
const EXPANDO_KEY = "$chartjs";
const EVENT_TYPES = {
  touchstart: "mousedown",
  touchmove: "mousemove",
  touchend: "mouseup",
  pointerenter: "mouseenter",
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointerleave: "mouseout",
  pointerout: "mouseout"
};
const isNullOrEmpty = (value) => value === null || value === "";
function initCanvas(canvas, aspectRatio) {
  const style = canvas.style;
  const renderHeight = canvas.getAttribute("height");
  const renderWidth = canvas.getAttribute("width");
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || "block";
  style.boxSizing = style.boxSizing || "border-box";
  if (isNullOrEmpty(renderWidth)) {
    const displayWidth = readUsedSize(canvas, "width");
    if (displayWidth !== void 0) {
      canvas.width = displayWidth;
    }
  }
  if (isNullOrEmpty(renderHeight)) {
    if (canvas.style.height === "") {
      canvas.height = canvas.width / (aspectRatio || 2);
    } else {
      const displayHeight = readUsedSize(canvas, "height");
      if (displayHeight !== void 0) {
        canvas.height = displayHeight;
      }
    }
  }
  return canvas;
}
const eventListenerOptions = supportsEventListenerOptions ? {
  passive: true
} : false;
function addListener(node, type, listener) {
  node.addEventListener(type, listener, eventListenerOptions);
}
function removeListener(chart, type, listener) {
  chart.canvas.removeEventListener(type, listener, eventListenerOptions);
}
function fromNativeEvent(event, chart) {
  const type = EVENT_TYPES[event.type] || event.type;
  const { x: x2, y: y3 } = getRelativePosition(event, chart);
  return {
    type,
    chart,
    native: event,
    x: x2 !== void 0 ? x2 : null,
    y: y3 !== void 0 ? y3 : null
  };
}
function nodeListContains(nodeList, canvas) {
  for (const node of nodeList) {
    if (node === canvas || node.contains(canvas)) {
      return true;
    }
  }
}
function createAttachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.addedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
function createDetachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.removedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
const drpListeningCharts = /* @__PURE__ */ new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
  const dpr = window.devicePixelRatio;
  if (dpr === oldDevicePixelRatio) {
    return;
  }
  oldDevicePixelRatio = dpr;
  drpListeningCharts.forEach((resize, chart) => {
    if (chart.currentDevicePixelRatio !== dpr) {
      resize();
    }
  });
}
function listenDevicePixelRatioChanges(chart, resize) {
  if (!drpListeningCharts.size) {
    window.addEventListener("resize", onWindowResize);
  }
  drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
  drpListeningCharts.delete(chart);
  if (!drpListeningCharts.size) {
    window.removeEventListener("resize", onWindowResize);
  }
}
function createResizeObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && _getParentNode(canvas);
  if (!container) {
    return;
  }
  const resize = throttled((width, height) => {
    const w2 = container.clientWidth;
    listener(width, height);
    if (w2 < container.clientWidth) {
      listener();
    }
  }, window);
  const observer = new ResizeObserver((entries) => {
    const entry = entries[0];
    const width = entry.contentRect.width;
    const height = entry.contentRect.height;
    if (width === 0 && height === 0) {
      return;
    }
    resize(width, height);
  });
  observer.observe(container);
  listenDevicePixelRatioChanges(chart, resize);
  return observer;
}
function releaseObserver(chart, type, observer) {
  if (observer) {
    observer.disconnect();
  }
  if (type === "resize") {
    unlistenDevicePixelRatioChanges(chart);
  }
}
function createProxyAndListen(chart, type, listener) {
  const canvas = chart.canvas;
  const proxy = throttled((event) => {
    if (chart.ctx !== null) {
      listener(fromNativeEvent(event, chart));
    }
  }, chart);
  addListener(canvas, type, proxy);
  return proxy;
}
class DomPlatform extends BasePlatform {
  acquireContext(canvas, aspectRatio) {
    const context = canvas && canvas.getContext && canvas.getContext("2d");
    if (context && context.canvas === canvas) {
      initCanvas(canvas, aspectRatio);
      return context;
    }
    return null;
  }
  releaseContext(context) {
    const canvas = context.canvas;
    if (!canvas[EXPANDO_KEY]) {
      return false;
    }
    const initial = canvas[EXPANDO_KEY].initial;
    [
      "height",
      "width"
    ].forEach((prop) => {
      const value = initial[prop];
      if (isNullOrUndef(value)) {
        canvas.removeAttribute(prop);
      } else {
        canvas.setAttribute(prop, value);
      }
    });
    const style = initial.style || {};
    Object.keys(style).forEach((key) => {
      canvas.style[key] = style[key];
    });
    canvas.width = canvas.width;
    delete canvas[EXPANDO_KEY];
    return true;
  }
  addEventListener(chart, type, listener) {
    this.removeEventListener(chart, type);
    const proxies = chart.$proxies || (chart.$proxies = {});
    const handlers = {
      attach: createAttachObserver,
      detach: createDetachObserver,
      resize: createResizeObserver
    };
    const handler = handlers[type] || createProxyAndListen;
    proxies[type] = handler(chart, type, listener);
  }
  removeEventListener(chart, type) {
    const proxies = chart.$proxies || (chart.$proxies = {});
    const proxy = proxies[type];
    if (!proxy) {
      return;
    }
    const handlers = {
      attach: releaseObserver,
      detach: releaseObserver,
      resize: releaseObserver
    };
    const handler = handlers[type] || removeListener;
    handler(chart, type, proxy);
    proxies[type] = void 0;
  }
  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }
  getMaximumSize(canvas, width, height, aspectRatio) {
    return getMaximumSize(canvas, width, height, aspectRatio);
  }
  isAttached(canvas) {
    const container = _getParentNode(canvas);
    return !!(container && container.isConnected);
  }
}
function _detectPlatform(canvas) {
  if (!_isDomSupported() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) {
    return BasicPlatform;
  }
  return DomPlatform;
}
let Element$1 = (_a = class {
  constructor() {
    __publicField(this, "x");
    __publicField(this, "y");
    __publicField(this, "active", false);
    __publicField(this, "options");
    __publicField(this, "$animations");
  }
  tooltipPosition(useFinalPosition) {
    const { x: x2, y: y3 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y3
    };
  }
  hasValue() {
    return isNumber(this.x) && isNumber(this.y);
  }
  getProps(props, final) {
    const anims = this.$animations;
    if (!final || !anims) {
      return this;
    }
    const ret = {};
    props.forEach((prop) => {
      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
    });
    return ret;
  }
}, __publicField(_a, "defaults", {}), __publicField(_a, "defaultRoutes"), _a);
function autoSkip(scale, ticks) {
  const tickOpts = scale.options.ticks;
  const determinedMaxTicks = determineMaxTicks(scale);
  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  const numMajorIndices = majorIndices.length;
  const first = majorIndices[0];
  const last = majorIndices[numMajorIndices - 1];
  const newTicks = [];
  if (numMajorIndices > ticksLimit) {
    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
    return newTicks;
  }
  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
  if (numMajorIndices > 0) {
    let i2, ilen;
    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    for (i2 = 0, ilen = numMajorIndices - 1; i2 < ilen; i2++) {
      skip(ticks, newTicks, spacing, majorIndices[i2], majorIndices[i2 + 1]);
    }
    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    return newTicks;
  }
  skip(ticks, newTicks, spacing);
  return newTicks;
}
function determineMaxTicks(scale) {
  const offset = scale.options.offset;
  const tickLength = scale._tickSize();
  const maxScale = scale._length / tickLength + (offset ? 0 : 1);
  const maxChart = scale._maxLength / tickLength;
  return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
  const evenMajorSpacing = getEvenSpacing(majorIndices);
  const spacing = ticks.length / ticksLimit;
  if (!evenMajorSpacing) {
    return Math.max(spacing, 1);
  }
  const factors = _factorize(evenMajorSpacing);
  for (let i2 = 0, ilen = factors.length - 1; i2 < ilen; i2++) {
    const factor = factors[i2];
    if (factor > spacing) {
      return factor;
    }
  }
  return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
  const result = [];
  let i2, ilen;
  for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
    if (ticks[i2].major) {
      result.push(i2);
    }
  }
  return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
  let count = 0;
  let next2 = majorIndices[0];
  let i2;
  spacing = Math.ceil(spacing);
  for (i2 = 0; i2 < ticks.length; i2++) {
    if (i2 === next2) {
      newTicks.push(ticks[i2]);
      count++;
      next2 = majorIndices[count * spacing];
    }
  }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
  const start = valueOrDefault(majorStart, 0);
  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
  let count = 0;
  let length, i2, next2;
  spacing = Math.ceil(spacing);
  if (majorEnd) {
    length = majorEnd - majorStart;
    spacing = length / Math.floor(length / spacing);
  }
  next2 = start;
  while (next2 < 0) {
    count++;
    next2 = Math.round(start + count * spacing);
  }
  for (i2 = Math.max(start, 0); i2 < end; i2++) {
    if (i2 === next2) {
      newTicks.push(ticks[i2]);
      count++;
      next2 = Math.round(start + count * spacing);
    }
  }
}
function getEvenSpacing(arr) {
  const len = arr.length;
  let i2, diff;
  if (len < 2) {
    return false;
  }
  for (diff = arr[0], i2 = 1; i2 < len; ++i2) {
    if (arr[i2] - arr[i2 - 1] !== diff) {
      return false;
    }
  }
  return diff;
}
const reverseAlign = (align) => align === "left" ? "right" : align === "right" ? "left" : align;
const offsetFromEdge = (scale, edge, offset) => edge === "top" || edge === "left" ? scale[edge] + offset : scale[edge] - offset;
const getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);
function sample(arr, numItems) {
  const result = [];
  const increment = arr.length / numItems;
  const len = arr.length;
  let i2 = 0;
  for (; i2 < len; i2 += increment) {
    result.push(arr[Math.floor(i2)]);
  }
  return result;
}
function getPixelForGridLine(scale, index2, offsetGridLines) {
  const length = scale.ticks.length;
  const validIndex2 = Math.min(index2, length - 1);
  const start = scale._startPixel;
  const end = scale._endPixel;
  const epsilon = 1e-6;
  let lineValue = scale.getPixelForTick(validIndex2);
  let offset;
  if (offsetGridLines) {
    if (length === 1) {
      offset = Math.max(lineValue - start, end - lineValue);
    } else if (index2 === 0) {
      offset = (scale.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset = (lineValue - scale.getPixelForTick(validIndex2 - 1)) / 2;
    }
    lineValue += validIndex2 < index2 ? offset : -offset;
    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }
  return lineValue;
}
function garbageCollect(caches, length) {
  each(caches, (cache) => {
    const gc = cache.gc;
    const gcLen = gc.length / 2;
    let i2;
    if (gcLen > length) {
      for (i2 = 0; i2 < gcLen; ++i2) {
        delete cache.data[gc[i2]];
      }
      gc.splice(0, gcLen);
    }
  });
}
function getTickMarkLength(options) {
  return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
  if (!options.display) {
    return 0;
  }
  const font = toFont(options.font, fallback);
  const padding = toPadding(options.padding);
  const lines = isArray(options.text) ? options.text.length : 1;
  return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale) {
  return createContext(parent, {
    scale,
    type: "scale"
  });
}
function createTickContext(parent, index2, tick) {
  return createContext(parent, {
    tick,
    index: index2,
    type: "tick"
  });
}
function titleAlign(align, position, reverse) {
  let ret = _toLeftRightCenter(align);
  if (reverse && position !== "right" || !reverse && position === "right") {
    ret = reverseAlign(ret);
  }
  return ret;
}
function titleArgs(scale, offset, position, align) {
  const { top, left, bottom, right, chart } = scale;
  const { chartArea, scales: scales2 } = chart;
  let rotation = 0;
  let maxWidth, titleX, titleY;
  const height = bottom - top;
  const width = right - left;
  if (scale.isHorizontal()) {
    titleX = _alignStartEnd(align, left, right);
    if (isObject(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleY = scales2[positionAxisID].getPixelForValue(value) + height - offset;
    } else if (position === "center") {
      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
    } else {
      titleY = offsetFromEdge(scale, position, offset);
    }
    maxWidth = right - left;
  } else {
    if (isObject(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleX = scales2[positionAxisID].getPixelForValue(value) - width + offset;
    } else if (position === "center") {
      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
    } else {
      titleX = offsetFromEdge(scale, position, offset);
    }
    titleY = _alignStartEnd(align, bottom, top);
    rotation = position === "left" ? -HALF_PI : HALF_PI;
  }
  return {
    titleX,
    titleY,
    maxWidth,
    rotation
  };
}
class Scale extends Element$1 {
  constructor(cfg) {
    super();
    this.id = cfg.id;
    this.type = cfg.type;
    this.options = void 0;
    this.ctx = cfg.ctx;
    this.chart = cfg.chart;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this.maxWidth = void 0;
    this.maxHeight = void 0;
    this.paddingTop = void 0;
    this.paddingBottom = void 0;
    this.paddingLeft = void 0;
    this.paddingRight = void 0;
    this.axis = void 0;
    this.labelRotation = void 0;
    this.min = void 0;
    this.max = void 0;
    this._range = void 0;
    this.ticks = [];
    this._gridLineItems = null;
    this._labelItems = null;
    this._labelSizes = null;
    this._length = 0;
    this._maxLength = 0;
    this._longestTextCache = {};
    this._startPixel = void 0;
    this._endPixel = void 0;
    this._reversePixels = false;
    this._userMax = void 0;
    this._userMin = void 0;
    this._suggestedMax = void 0;
    this._suggestedMin = void 0;
    this._ticksLength = 0;
    this._borderValue = 0;
    this._cache = {};
    this._dataLimitsCached = false;
    this.$context = void 0;
  }
  init(options) {
    this.options = options.setContext(this.getContext());
    this.axis = options.axis;
    this._userMin = this.parse(options.min);
    this._userMax = this.parse(options.max);
    this._suggestedMin = this.parse(options.suggestedMin);
    this._suggestedMax = this.parse(options.suggestedMax);
  }
  parse(raw, index2) {
    return raw;
  }
  getUserBounds() {
    let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
    return {
      min: finiteOrDefault(_userMin, _suggestedMin),
      max: finiteOrDefault(_userMax, _suggestedMax),
      minDefined: isNumberFinite(_userMin),
      maxDefined: isNumberFinite(_userMax)
    };
  }
  getMinMax(canStack) {
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    let range;
    if (minDefined && maxDefined) {
      return {
        min,
        max
      };
    }
    const metas = this.getMatchingVisibleMetas();
    for (let i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
      range = metas[i2].controller.getMinMax(this, canStack);
      if (!minDefined) {
        min = Math.min(min, range.min);
      }
      if (!maxDefined) {
        max = Math.max(max, range.max);
      }
    }
    min = maxDefined && min > max ? max : min;
    max = minDefined && min > max ? min : max;
    return {
      min: finiteOrDefault(min, finiteOrDefault(max, min)),
      max: finiteOrDefault(max, finiteOrDefault(min, max))
    };
  }
  getPadding() {
    return {
      left: this.paddingLeft || 0,
      top: this.paddingTop || 0,
      right: this.paddingRight || 0,
      bottom: this.paddingBottom || 0
    };
  }
  getTicks() {
    return this.ticks;
  }
  getLabels() {
    const data = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
  }
  getLabelItems(chartArea = this.chart.chartArea) {
    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
    return items;
  }
  beforeLayout() {
    this._cache = {};
    this._dataLimitsCached = false;
  }
  beforeUpdate() {
    callback(this.options.beforeUpdate, [
      this
    ]);
  }
  update(maxWidth, maxHeight, margins) {
    const { beginAtZero, grace, ticks: tickOpts } = this.options;
    const sampleSize = tickOpts.sampleSize;
    this.beforeUpdate();
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, margins);
    this.ticks = null;
    this._labelSizes = null;
    this._gridLineItems = null;
    this._labelItems = null;
    this.beforeSetDimensions();
    this.setDimensions();
    this.afterSetDimensions();
    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
    if (!this._dataLimitsCached) {
      this.beforeDataLimits();
      this.determineDataLimits();
      this.afterDataLimits();
      this._range = _addGrace(this, grace, beginAtZero);
      this._dataLimitsCached = true;
    }
    this.beforeBuildTicks();
    this.ticks = this.buildTicks() || [];
    this.afterBuildTicks();
    const samplingEnabled = sampleSize < this.ticks.length;
    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
    this.configure();
    this.beforeCalculateLabelRotation();
    this.calculateLabelRotation();
    this.afterCalculateLabelRotation();
    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
      this.ticks = autoSkip(this, this.ticks);
      this._labelSizes = null;
      this.afterAutoSkip();
    }
    if (samplingEnabled) {
      this._convertTicksToLabels(this.ticks);
    }
    this.beforeFit();
    this.fit();
    this.afterFit();
    this.afterUpdate();
  }
  configure() {
    let reversePixels = this.options.reverse;
    let startPixel, endPixel;
    if (this.isHorizontal()) {
      startPixel = this.left;
      endPixel = this.right;
    } else {
      startPixel = this.top;
      endPixel = this.bottom;
      reversePixels = !reversePixels;
    }
    this._startPixel = startPixel;
    this._endPixel = endPixel;
    this._reversePixels = reversePixels;
    this._length = endPixel - startPixel;
    this._alignToPixels = this.options.alignToPixels;
  }
  afterUpdate() {
    callback(this.options.afterUpdate, [
      this
    ]);
  }
  beforeSetDimensions() {
    callback(this.options.beforeSetDimensions, [
      this
    ]);
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = 0;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = 0;
      this.bottom = this.height;
    }
    this.paddingLeft = 0;
    this.paddingTop = 0;
    this.paddingRight = 0;
    this.paddingBottom = 0;
  }
  afterSetDimensions() {
    callback(this.options.afterSetDimensions, [
      this
    ]);
  }
  _callHooks(name) {
    this.chart.notifyPlugins(name, this.getContext());
    callback(this.options[name], [
      this
    ]);
  }
  beforeDataLimits() {
    this._callHooks("beforeDataLimits");
  }
  determineDataLimits() {
  }
  afterDataLimits() {
    this._callHooks("afterDataLimits");
  }
  beforeBuildTicks() {
    this._callHooks("beforeBuildTicks");
  }
  buildTicks() {
    return [];
  }
  afterBuildTicks() {
    this._callHooks("afterBuildTicks");
  }
  beforeTickToLabelConversion() {
    callback(this.options.beforeTickToLabelConversion, [
      this
    ]);
  }
  generateTickLabels(ticks) {
    const tickOpts = this.options.ticks;
    let i2, ilen, tick;
    for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
      tick = ticks[i2];
      tick.label = callback(tickOpts.callback, [
        tick.value,
        i2,
        ticks
      ], this);
    }
  }
  afterTickToLabelConversion() {
    callback(this.options.afterTickToLabelConversion, [
      this
    ]);
  }
  beforeCalculateLabelRotation() {
    callback(this.options.beforeCalculateLabelRotation, [
      this
    ]);
  }
  calculateLabelRotation() {
    const options = this.options;
    const tickOpts = options.ticks;
    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
    const minRotation = tickOpts.minRotation || 0;
    const maxRotation = tickOpts.maxRotation;
    let labelRotation = minRotation;
    let tickWidth, maxHeight, maxLabelDiagonal;
    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
      this.labelRotation = minRotation;
      return;
    }
    const labelSizes = this._getLabelSizes();
    const maxLabelWidth = labelSizes.widest.width;
    const maxLabelHeight = labelSizes.highest.height;
    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
    if (maxLabelWidth + 6 > tickWidth) {
      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    }
    this.labelRotation = labelRotation;
  }
  afterCalculateLabelRotation() {
    callback(this.options.afterCalculateLabelRotation, [
      this
    ]);
  }
  afterAutoSkip() {
  }
  beforeFit() {
    callback(this.options.beforeFit, [
      this
    ]);
  }
  fit() {
    const minSize = {
      width: 0,
      height: 0
    };
    const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
    const display = this._isVisible();
    const isHorizontal = this.isHorizontal();
    if (display) {
      const titleHeight = getTitleHeight(titleOpts, chart.options.font);
      if (isHorizontal) {
        minSize.width = this.maxWidth;
        minSize.height = getTickMarkLength(gridOpts) + titleHeight;
      } else {
        minSize.height = this.maxHeight;
        minSize.width = getTickMarkLength(gridOpts) + titleHeight;
      }
      if (tickOpts.display && this.ticks.length) {
        const { first, last, widest, highest } = this._getLabelSizes();
        const tickPadding = tickOpts.padding * 2;
        const angleRadians = toRadians(this.labelRotation);
        const cos = Math.cos(angleRadians);
        const sin = Math.sin(angleRadians);
        if (isHorizontal) {
          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
        } else {
          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
        }
        this._calculatePadding(first, last, sin, cos);
      }
    }
    this._handleMargins();
    if (isHorizontal) {
      this.width = this._length = chart.width - this._margins.left - this._margins.right;
      this.height = minSize.height;
    } else {
      this.width = minSize.width;
      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
    }
  }
  _calculatePadding(first, last, sin, cos) {
    const { ticks: { align, padding }, position } = this.options;
    const isRotated = this.labelRotation !== 0;
    const labelsBelowTicks = position !== "top" && this.axis === "x";
    if (this.isHorizontal()) {
      const offsetLeft = this.getPixelForTick(0) - this.left;
      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
      let paddingLeft = 0;
      let paddingRight = 0;
      if (isRotated) {
        if (labelsBelowTicks) {
          paddingLeft = cos * first.width;
          paddingRight = sin * last.height;
        } else {
          paddingLeft = sin * first.height;
          paddingRight = cos * last.width;
        }
      } else if (align === "start") {
        paddingRight = last.width;
      } else if (align === "end") {
        paddingLeft = first.width;
      } else if (align !== "inner") {
        paddingLeft = first.width / 2;
        paddingRight = last.width / 2;
      }
      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
    } else {
      let paddingTop = last.height / 2;
      let paddingBottom = first.height / 2;
      if (align === "start") {
        paddingTop = 0;
        paddingBottom = first.height;
      } else if (align === "end") {
        paddingTop = last.height;
        paddingBottom = 0;
      }
      this.paddingTop = paddingTop + padding;
      this.paddingBottom = paddingBottom + padding;
    }
  }
  _handleMargins() {
    if (this._margins) {
      this._margins.left = Math.max(this.paddingLeft, this._margins.left);
      this._margins.top = Math.max(this.paddingTop, this._margins.top);
      this._margins.right = Math.max(this.paddingRight, this._margins.right);
      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
    }
  }
  afterFit() {
    callback(this.options.afterFit, [
      this
    ]);
  }
  isHorizontal() {
    const { axis, position } = this.options;
    return position === "top" || position === "bottom" || axis === "x";
  }
  isFullSize() {
    return this.options.fullSize;
  }
  _convertTicksToLabels(ticks) {
    this.beforeTickToLabelConversion();
    this.generateTickLabels(ticks);
    let i2, ilen;
    for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
      if (isNullOrUndef(ticks[i2].label)) {
        ticks.splice(i2, 1);
        ilen--;
        i2--;
      }
    }
    this.afterTickToLabelConversion();
  }
  _getLabelSizes() {
    let labelSizes = this._labelSizes;
    if (!labelSizes) {
      const sampleSize = this.options.ticks.sampleSize;
      let ticks = this.ticks;
      if (sampleSize < ticks.length) {
        ticks = sample(ticks, sampleSize);
      }
      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
    }
    return labelSizes;
  }
  _computeLabelSizes(ticks, length, maxTicksLimit) {
    const { ctx, _longestTextCache: caches } = this;
    const widths = [];
    const heights = [];
    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
    let widestLabelSize = 0;
    let highestLabelSize = 0;
    let i2, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
    for (i2 = 0; i2 < length; i2 += increment) {
      label = ticks[i2].label;
      tickFont = this._resolveTickFontOptions(i2);
      ctx.font = fontString = tickFont.string;
      cache = caches[fontString] = caches[fontString] || {
        data: {},
        gc: []
      };
      lineHeight = tickFont.lineHeight;
      width = height = 0;
      if (!isNullOrUndef(label) && !isArray(label)) {
        width = _measureText(ctx, cache.data, cache.gc, width, label);
        height = lineHeight;
      } else if (isArray(label)) {
        for (j = 0, jlen = label.length; j < jlen; ++j) {
          nestedLabel = label[j];
          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
            height += lineHeight;
          }
        }
      }
      widths.push(width);
      heights.push(height);
      widestLabelSize = Math.max(width, widestLabelSize);
      highestLabelSize = Math.max(height, highestLabelSize);
    }
    garbageCollect(caches, length);
    const widest = widths.indexOf(widestLabelSize);
    const highest = heights.indexOf(highestLabelSize);
    const valueAt = (idx) => ({
      width: widths[idx] || 0,
      height: heights[idx] || 0
    });
    return {
      first: valueAt(0),
      last: valueAt(length - 1),
      widest: valueAt(widest),
      highest: valueAt(highest),
      widths,
      heights
    };
  }
  getLabelForValue(value) {
    return value;
  }
  getPixelForValue(value, index2) {
    return NaN;
  }
  getValueForPixel(pixel) {
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getPixelForDecimal(decimal) {
    if (this._reversePixels) {
      decimal = 1 - decimal;
    }
    const pixel = this._startPixel + decimal * this._length;
    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
  }
  getDecimalForPixel(pixel) {
    const decimal = (pixel - this._startPixel) / this._length;
    return this._reversePixels ? 1 - decimal : decimal;
  }
  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }
  getBaseValue() {
    const { min, max } = this;
    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
  }
  getContext(index2) {
    const ticks = this.ticks || [];
    if (index2 >= 0 && index2 < ticks.length) {
      const tick = ticks[index2];
      return tick.$context || (tick.$context = createTickContext(this.getContext(), index2, tick));
    }
    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
  }
  _tickSize() {
    const optionTicks = this.options.ticks;
    const rot = toRadians(this.labelRotation);
    const cos = Math.abs(Math.cos(rot));
    const sin = Math.abs(Math.sin(rot));
    const labelSizes = this._getLabelSizes();
    const padding = optionTicks.autoSkipPadding || 0;
    const w2 = labelSizes ? labelSizes.widest.width + padding : 0;
    const h3 = labelSizes ? labelSizes.highest.height + padding : 0;
    return this.isHorizontal() ? h3 * cos > w2 * sin ? w2 / cos : h3 / sin : h3 * sin < w2 * cos ? h3 / cos : w2 / sin;
  }
  _isVisible() {
    const display = this.options.display;
    if (display !== "auto") {
      return !!display;
    }
    return this.getMatchingVisibleMetas().length > 0;
  }
  _computeGridLineItems(chartArea) {
    const axis = this.axis;
    const chart = this.chart;
    const options = this.options;
    const { grid: grid2, position, border } = options;
    const offset = grid2.offset;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const ticksLength = ticks.length + (offset ? 1 : 0);
    const tl = getTickMarkLength(grid2);
    const items = [];
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = borderOpts.display ? borderOpts.width : 0;
    const axisHalfWidth = axisWidth / 2;
    const alignBorderValue = function(pixel) {
      return _alignPixel(chart, pixel, axisWidth);
    };
    let borderValue, i2, lineValue, alignedLineValue;
    let tx1, ty1, tx2, ty2, x1, y1, x2, y22;
    if (position === "top") {
      borderValue = alignBorderValue(this.bottom);
      ty1 = this.bottom - tl;
      ty2 = borderValue - axisHalfWidth;
      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
      y22 = chartArea.bottom;
    } else if (position === "bottom") {
      borderValue = alignBorderValue(this.top);
      y1 = chartArea.top;
      y22 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
      ty1 = borderValue + axisHalfWidth;
      ty2 = this.top + tl;
    } else if (position === "left") {
      borderValue = alignBorderValue(this.right);
      tx1 = this.right - tl;
      tx2 = borderValue - axisHalfWidth;
      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
      x2 = chartArea.right;
    } else if (position === "right") {
      borderValue = alignBorderValue(this.left);
      x1 = chartArea.left;
      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
      tx1 = borderValue + axisHalfWidth;
      tx2 = this.left + tl;
    } else if (axis === "x") {
      if (position === "center") {
        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      y1 = chartArea.top;
      y22 = chartArea.bottom;
      ty1 = borderValue + axisHalfWidth;
      ty2 = ty1 + tl;
    } else if (axis === "y") {
      if (position === "center") {
        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      tx1 = borderValue - axisHalfWidth;
      tx2 = tx1 - tl;
      x1 = chartArea.left;
      x2 = chartArea.right;
    }
    const limit2 = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
    const step = Math.max(1, Math.ceil(ticksLength / limit2));
    for (i2 = 0; i2 < ticksLength; i2 += step) {
      const context = this.getContext(i2);
      const optsAtIndex = grid2.setContext(context);
      const optsAtIndexBorder = border.setContext(context);
      const lineWidth = optsAtIndex.lineWidth;
      const lineColor = optsAtIndex.color;
      const borderDash = optsAtIndexBorder.dash || [];
      const borderDashOffset = optsAtIndexBorder.dashOffset;
      const tickWidth = optsAtIndex.tickWidth;
      const tickColor = optsAtIndex.tickColor;
      const tickBorderDash = optsAtIndex.tickBorderDash || [];
      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
      lineValue = getPixelForGridLine(this, i2, offset);
      if (lineValue === void 0) {
        continue;
      }
      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
      if (isHorizontal) {
        tx1 = tx2 = x1 = x2 = alignedLineValue;
      } else {
        ty1 = ty2 = y1 = y22 = alignedLineValue;
      }
      items.push({
        tx1,
        ty1,
        tx2,
        ty2,
        x1,
        y1,
        x2,
        y2: y22,
        width: lineWidth,
        color: lineColor,
        borderDash,
        borderDashOffset,
        tickWidth,
        tickColor,
        tickBorderDash,
        tickBorderDashOffset
      });
    }
    this._ticksLength = ticksLength;
    this._borderValue = borderValue;
    return items;
  }
  _computeLabelItems(chartArea) {
    const axis = this.axis;
    const options = this.options;
    const { position, ticks: optionTicks } = options;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const { align, crossAlign, padding, mirror } = optionTicks;
    const tl = getTickMarkLength(options.grid);
    const tickAndPadding = tl + padding;
    const hTickAndPadding = mirror ? -padding : tickAndPadding;
    const rotation = -toRadians(this.labelRotation);
    const items = [];
    let i2, ilen, tick, label, x2, y3, textAlign, pixel, font, lineHeight, lineCount, textOffset;
    let textBaseline = "middle";
    if (position === "top") {
      y3 = this.bottom - hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === "bottom") {
      y3 = this.top + hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === "left") {
      const ret = this._getYAxisLabelAlignment(tl);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (position === "right") {
      const ret = this._getYAxisLabelAlignment(tl);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (axis === "x") {
      if (position === "center") {
        y3 = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        y3 = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
      }
      textAlign = this._getXAxisLabelAlignment();
    } else if (axis === "y") {
      if (position === "center") {
        x2 = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        x2 = this.chart.scales[positionAxisID].getPixelForValue(value);
      }
      textAlign = this._getYAxisLabelAlignment(tl).textAlign;
    }
    if (axis === "y") {
      if (align === "start") {
        textBaseline = "top";
      } else if (align === "end") {
        textBaseline = "bottom";
      }
    }
    const labelSizes = this._getLabelSizes();
    for (i2 = 0, ilen = ticks.length; i2 < ilen; ++i2) {
      tick = ticks[i2];
      label = tick.label;
      const optsAtIndex = optionTicks.setContext(this.getContext(i2));
      pixel = this.getPixelForTick(i2) + optionTicks.labelOffset;
      font = this._resolveTickFontOptions(i2);
      lineHeight = font.lineHeight;
      lineCount = isArray(label) ? label.length : 1;
      const halfCount = lineCount / 2;
      const color2 = optsAtIndex.color;
      const strokeColor = optsAtIndex.textStrokeColor;
      const strokeWidth = optsAtIndex.textStrokeWidth;
      let tickTextAlign = textAlign;
      if (isHorizontal) {
        x2 = pixel;
        if (textAlign === "inner") {
          if (i2 === ilen - 1) {
            tickTextAlign = !this.options.reverse ? "right" : "left";
          } else if (i2 === 0) {
            tickTextAlign = !this.options.reverse ? "left" : "right";
          } else {
            tickTextAlign = "center";
          }
        }
        if (position === "top") {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = -lineCount * lineHeight + lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
          } else {
            textOffset = -labelSizes.highest.height + lineHeight / 2;
          }
        } else {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
          } else {
            textOffset = labelSizes.highest.height - lineCount * lineHeight;
          }
        }
        if (mirror) {
          textOffset *= -1;
        }
        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
          x2 += lineHeight / 2 * Math.sin(rotation);
        }
      } else {
        y3 = pixel;
        textOffset = (1 - lineCount) * lineHeight / 2;
      }
      let backdrop;
      if (optsAtIndex.showLabelBackdrop) {
        const labelPadding = toPadding(optsAtIndex.backdropPadding);
        const height = labelSizes.heights[i2];
        const width = labelSizes.widths[i2];
        let top = textOffset - labelPadding.top;
        let left = 0 - labelPadding.left;
        switch (textBaseline) {
          case "middle":
            top -= height / 2;
            break;
          case "bottom":
            top -= height;
            break;
        }
        switch (textAlign) {
          case "center":
            left -= width / 2;
            break;
          case "right":
            left -= width;
            break;
        }
        backdrop = {
          left,
          top,
          width: width + labelPadding.width,
          height: height + labelPadding.height,
          color: optsAtIndex.backdropColor
        };
      }
      items.push({
        label,
        font,
        textOffset,
        options: {
          rotation,
          color: color2,
          strokeColor,
          strokeWidth,
          textAlign: tickTextAlign,
          textBaseline,
          translation: [
            x2,
            y3
          ],
          backdrop
        }
      });
    }
    return items;
  }
  _getXAxisLabelAlignment() {
    const { position, ticks } = this.options;
    const rotation = -toRadians(this.labelRotation);
    if (rotation) {
      return position === "top" ? "left" : "right";
    }
    let align = "center";
    if (ticks.align === "start") {
      align = "left";
    } else if (ticks.align === "end") {
      align = "right";
    } else if (ticks.align === "inner") {
      align = "inner";
    }
    return align;
  }
  _getYAxisLabelAlignment(tl) {
    const { position, ticks: { crossAlign, mirror, padding } } = this.options;
    const labelSizes = this._getLabelSizes();
    const tickAndPadding = tl + padding;
    const widest = labelSizes.widest.width;
    let textAlign;
    let x2;
    if (position === "left") {
      if (mirror) {
        x2 = this.right + padding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 += widest;
        }
      } else {
        x2 = this.right - tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 = this.left;
        }
      }
    } else if (position === "right") {
      if (mirror) {
        x2 = this.left + padding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 -= widest;
        }
      } else {
        x2 = this.left + tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 = this.right;
        }
      }
    } else {
      textAlign = "right";
    }
    return {
      textAlign,
      x: x2
    };
  }
  _computeLabelArea() {
    if (this.options.ticks.mirror) {
      return;
    }
    const chart = this.chart;
    const position = this.options.position;
    if (position === "left" || position === "right") {
      return {
        top: 0,
        left: this.left,
        bottom: chart.height,
        right: this.right
      };
    }
    if (position === "top" || position === "bottom") {
      return {
        top: this.top,
        left: 0,
        bottom: this.bottom,
        right: chart.width
      };
    }
  }
  drawBackground() {
    const { ctx, options: { backgroundColor }, left, top, width, height } = this;
    if (backgroundColor) {
      ctx.save();
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(left, top, width, height);
      ctx.restore();
    }
  }
  getLineWidthForValue(value) {
    const grid2 = this.options.grid;
    if (!this._isVisible() || !grid2.display) {
      return 0;
    }
    const ticks = this.ticks;
    const index2 = ticks.findIndex((t2) => t2.value === value);
    if (index2 >= 0) {
      const opts = grid2.setContext(this.getContext(index2));
      return opts.lineWidth;
    }
    return 0;
  }
  drawGrid(chartArea) {
    const grid2 = this.options.grid;
    const ctx = this.ctx;
    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
    let i2, ilen;
    const drawLine = (p1, p2, style) => {
      if (!style.width || !style.color) {
        return;
      }
      ctx.save();
      ctx.lineWidth = style.width;
      ctx.strokeStyle = style.color;
      ctx.setLineDash(style.borderDash || []);
      ctx.lineDashOffset = style.borderDashOffset;
      ctx.beginPath();
      ctx.moveTo(p1.x, p1.y);
      ctx.lineTo(p2.x, p2.y);
      ctx.stroke();
      ctx.restore();
    };
    if (grid2.display) {
      for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
        const item = items[i2];
        if (grid2.drawOnChartArea) {
          drawLine({
            x: item.x1,
            y: item.y1
          }, {
            x: item.x2,
            y: item.y2
          }, item);
        }
        if (grid2.drawTicks) {
          drawLine({
            x: item.tx1,
            y: item.ty1
          }, {
            x: item.tx2,
            y: item.ty2
          }, {
            color: item.tickColor,
            width: item.tickWidth,
            borderDash: item.tickBorderDash,
            borderDashOffset: item.tickBorderDashOffset
          });
        }
      }
    }
  }
  drawBorder() {
    const { chart, ctx, options: { border, grid: grid2 } } = this;
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = border.display ? borderOpts.width : 0;
    if (!axisWidth) {
      return;
    }
    const lastLineWidth = grid2.setContext(this.getContext(0)).lineWidth;
    const borderValue = this._borderValue;
    let x1, x2, y1, y22;
    if (this.isHorizontal()) {
      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
      y1 = y22 = borderValue;
    } else {
      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
      y22 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
      x1 = x2 = borderValue;
    }
    ctx.save();
    ctx.lineWidth = borderOpts.width;
    ctx.strokeStyle = borderOpts.color;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y22);
    ctx.stroke();
    ctx.restore();
  }
  drawLabels(chartArea) {
    const optionTicks = this.options.ticks;
    if (!optionTicks.display) {
      return;
    }
    const ctx = this.ctx;
    const area = this._computeLabelArea();
    if (area) {
      clipArea(ctx, area);
    }
    const items = this.getLabelItems(chartArea);
    for (const item of items) {
      const renderTextOptions = item.options;
      const tickFont = item.font;
      const label = item.label;
      const y3 = item.textOffset;
      renderText(ctx, label, 0, y3, tickFont, renderTextOptions);
    }
    if (area) {
      unclipArea(ctx);
    }
  }
  drawTitle() {
    const { ctx, options: { position, title, reverse } } = this;
    if (!title.display) {
      return;
    }
    const font = toFont(title.font);
    const padding = toPadding(title.padding);
    const align = title.align;
    let offset = font.lineHeight / 2;
    if (position === "bottom" || position === "center" || isObject(position)) {
      offset += padding.bottom;
      if (isArray(title.text)) {
        offset += font.lineHeight * (title.text.length - 1);
      }
    } else {
      offset += padding.top;
    }
    const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position, align);
    renderText(ctx, title.text, 0, 0, font, {
      color: title.color,
      maxWidth,
      rotation,
      textAlign: titleAlign(align, position, reverse),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
  draw(chartArea) {
    if (!this._isVisible()) {
      return;
    }
    this.drawBackground();
    this.drawGrid(chartArea);
    this.drawBorder();
    this.drawTitle();
    this.drawLabels(chartArea);
  }
  _layers() {
    const opts = this.options;
    const tz = opts.ticks && opts.ticks.z || 0;
    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
    const bz = valueOrDefault(opts.border && opts.border.z, 0);
    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
      return [
        {
          z: tz,
          draw: (chartArea) => {
            this.draw(chartArea);
          }
        }
      ];
    }
    return [
      {
        z: gz,
        draw: (chartArea) => {
          this.drawBackground();
          this.drawGrid(chartArea);
          this.drawTitle();
        }
      },
      {
        z: bz,
        draw: () => {
          this.drawBorder();
        }
      },
      {
        z: tz,
        draw: (chartArea) => {
          this.drawLabels(chartArea);
        }
      }
    ];
  }
  getMatchingVisibleMetas(type) {
    const metas = this.chart.getSortedVisibleDatasetMetas();
    const axisID = this.axis + "AxisID";
    const result = [];
    let i2, ilen;
    for (i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
      const meta = metas[i2];
      if (meta[axisID] === this.id && (!type || meta.type === type)) {
        result.push(meta);
      }
    }
    return result;
  }
  _resolveTickFontOptions(index2) {
    const opts = this.options.ticks.setContext(this.getContext(index2));
    return toFont(opts.font);
  }
  _maxDigits() {
    const fontSize = this._resolveTickFontOptions(0).lineHeight;
    return (this.isHorizontal() ? this.width : this.height) / fontSize;
  }
}
class TypedRegistry {
  constructor(type, scope, override) {
    this.type = type;
    this.scope = scope;
    this.override = override;
    this.items = /* @__PURE__ */ Object.create(null);
  }
  isForType(type) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
  }
  register(item) {
    const proto = Object.getPrototypeOf(item);
    let parentScope;
    if (isIChartComponent(proto)) {
      parentScope = this.register(proto);
    }
    const items = this.items;
    const id = item.id;
    const scope = this.scope + "." + id;
    if (!id) {
      throw new Error("class does not have id: " + item);
    }
    if (id in items) {
      return scope;
    }
    items[id] = item;
    registerDefaults(item, scope, parentScope);
    if (this.override) {
      defaults.override(item.id, item.overrides);
    }
    return scope;
  }
  get(id) {
    return this.items[id];
  }
  unregister(item) {
    const items = this.items;
    const id = item.id;
    const scope = this.scope;
    if (id in items) {
      delete items[id];
    }
    if (scope && id in defaults[scope]) {
      delete defaults[scope][id];
      if (this.override) {
        delete overrides[id];
      }
    }
  }
}
function registerDefaults(item, scope, parentScope) {
  const itemDefaults = merge(/* @__PURE__ */ Object.create(null), [
    parentScope ? defaults.get(parentScope) : {},
    defaults.get(scope),
    item.defaults
  ]);
  defaults.set(scope, itemDefaults);
  if (item.defaultRoutes) {
    routeDefaults(scope, item.defaultRoutes);
  }
  if (item.descriptors) {
    defaults.describe(scope, item.descriptors);
  }
}
function routeDefaults(scope, routes) {
  Object.keys(routes).forEach((property) => {
    const propertyParts = property.split(".");
    const sourceName = propertyParts.pop();
    const sourceScope = [
      scope
    ].concat(propertyParts).join(".");
    const parts = routes[property].split(".");
    const targetName = parts.pop();
    const targetScope = parts.join(".");
    defaults.route(sourceScope, sourceName, targetScope, targetName);
  });
}
function isIChartComponent(proto) {
  return "id" in proto && "defaults" in proto;
}
class Registry {
  constructor() {
    this.controllers = new TypedRegistry(DatasetController, "datasets", true);
    this.elements = new TypedRegistry(Element$1, "elements");
    this.plugins = new TypedRegistry(Object, "plugins");
    this.scales = new TypedRegistry(Scale, "scales");
    this._typedRegistries = [
      this.controllers,
      this.scales,
      this.elements
    ];
  }
  add(...args) {
    this._each("register", args);
  }
  remove(...args) {
    this._each("unregister", args);
  }
  addControllers(...args) {
    this._each("register", args, this.controllers);
  }
  addElements(...args) {
    this._each("register", args, this.elements);
  }
  addPlugins(...args) {
    this._each("register", args, this.plugins);
  }
  addScales(...args) {
    this._each("register", args, this.scales);
  }
  getController(id) {
    return this._get(id, this.controllers, "controller");
  }
  getElement(id) {
    return this._get(id, this.elements, "element");
  }
  getPlugin(id) {
    return this._get(id, this.plugins, "plugin");
  }
  getScale(id) {
    return this._get(id, this.scales, "scale");
  }
  removeControllers(...args) {
    this._each("unregister", args, this.controllers);
  }
  removeElements(...args) {
    this._each("unregister", args, this.elements);
  }
  removePlugins(...args) {
    this._each("unregister", args, this.plugins);
  }
  removeScales(...args) {
    this._each("unregister", args, this.scales);
  }
  _each(method, args, typedRegistry) {
    [
      ...args
    ].forEach((arg) => {
      const reg = typedRegistry || this._getRegistryForType(arg);
      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
        this._exec(method, reg, arg);
      } else {
        each(arg, (item) => {
          const itemReg = typedRegistry || this._getRegistryForType(item);
          this._exec(method, itemReg, item);
        });
      }
    });
  }
  _exec(method, registry2, component) {
    const camelMethod = _capitalize(method);
    callback(component["before" + camelMethod], [], component);
    registry2[method](component);
    callback(component["after" + camelMethod], [], component);
  }
  _getRegistryForType(type) {
    for (let i2 = 0; i2 < this._typedRegistries.length; i2++) {
      const reg = this._typedRegistries[i2];
      if (reg.isForType(type)) {
        return reg;
      }
    }
    return this.plugins;
  }
  _get(id, typedRegistry, type) {
    const item = typedRegistry.get(id);
    if (item === void 0) {
      throw new Error('"' + id + '" is not a registered ' + type + ".");
    }
    return item;
  }
}
var registry = /* @__PURE__ */ new Registry();
class PluginService {
  constructor() {
    this._init = [];
  }
  notify(chart, hook, args, filter) {
    if (hook === "beforeInit") {
      this._init = this._createDescriptors(chart, true);
      this._notify(this._init, chart, "install");
    }
    const descriptors2 = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
    const result = this._notify(descriptors2, chart, hook, args);
    if (hook === "afterDestroy") {
      this._notify(descriptors2, chart, "stop");
      this._notify(this._init, chart, "uninstall");
    }
    return result;
  }
  _notify(descriptors2, chart, hook, args) {
    args = args || {};
    for (const descriptor of descriptors2) {
      const plugin = descriptor.plugin;
      const method = plugin[hook];
      const params = [
        chart,
        args,
        descriptor.options
      ];
      if (callback(method, params, plugin) === false && args.cancelable) {
        return false;
      }
    }
    return true;
  }
  invalidate() {
    if (!isNullOrUndef(this._cache)) {
      this._oldCache = this._cache;
      this._cache = void 0;
    }
  }
  _descriptors(chart) {
    if (this._cache) {
      return this._cache;
    }
    const descriptors2 = this._cache = this._createDescriptors(chart);
    this._notifyStateChanges(chart);
    return descriptors2;
  }
  _createDescriptors(chart, all) {
    const config = chart && chart.config;
    const options = valueOrDefault(config.options && config.options.plugins, {});
    const plugins2 = allPlugins(config);
    return options === false && !all ? [] : createDescriptors(chart, plugins2, options, all);
  }
  _notifyStateChanges(chart) {
    const previousDescriptors = this._oldCache || [];
    const descriptors2 = this._cache;
    const diff = (a3, b2) => a3.filter((x2) => !b2.some((y3) => x2.plugin.id === y3.plugin.id));
    this._notify(diff(previousDescriptors, descriptors2), chart, "stop");
    this._notify(diff(descriptors2, previousDescriptors), chart, "start");
  }
}
function allPlugins(config) {
  const localIds = {};
  const plugins2 = [];
  const keys = Object.keys(registry.plugins.items);
  for (let i2 = 0; i2 < keys.length; i2++) {
    plugins2.push(registry.getPlugin(keys[i2]));
  }
  const local = config.plugins || [];
  for (let i2 = 0; i2 < local.length; i2++) {
    const plugin = local[i2];
    if (plugins2.indexOf(plugin) === -1) {
      plugins2.push(plugin);
      localIds[plugin.id] = true;
    }
  }
  return {
    plugins: plugins2,
    localIds
  };
}
function getOpts(options, all) {
  if (!all && options === false) {
    return null;
  }
  if (options === true) {
    return {};
  }
  return options;
}
function createDescriptors(chart, { plugins: plugins2, localIds }, options, all) {
  const result = [];
  const context = chart.getContext();
  for (const plugin of plugins2) {
    const id = plugin.id;
    const opts = getOpts(options[id], all);
    if (opts === null) {
      continue;
    }
    result.push({
      plugin,
      options: pluginOpts(chart.config, {
        plugin,
        local: localIds[id]
      }, opts, context)
    });
  }
  return result;
}
function pluginOpts(config, { plugin, local }, opts, context) {
  const keys = config.pluginScopeKeys(plugin);
  const scopes2 = config.getOptionScopes(opts, keys);
  if (local && plugin.defaults) {
    scopes2.push(plugin.defaults);
  }
  return config.createResolver(scopes2, context, [
    ""
  ], {
    scriptable: false,
    indexable: false,
    allKeys: true
  });
}
function getIndexAxis(type, options) {
  const datasetDefaults = defaults.datasets[type] || {};
  const datasetOptions = (options.datasets || {})[type] || {};
  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
}
function getAxisFromDefaultScaleID(id, indexAxis) {
  let axis = id;
  if (id === "_index_") {
    axis = indexAxis;
  } else if (id === "_value_") {
    axis = indexAxis === "x" ? "y" : "x";
  }
  return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
  return axis === indexAxis ? "_index_" : "_value_";
}
function idMatchesAxis(id) {
  if (id === "x" || id === "y" || id === "r") {
    return id;
  }
}
function axisFromPosition(position) {
  if (position === "top" || position === "bottom") {
    return "x";
  }
  if (position === "left" || position === "right") {
    return "y";
  }
}
function determineAxis(id, ...scaleOptions) {
  if (idMatchesAxis(id)) {
    return id;
  }
  for (const opts of scaleOptions) {
    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());
    if (axis) {
      return axis;
    }
  }
  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);
}
function getAxisFromDataset(id, axis, dataset) {
  if (dataset[axis + "AxisID"] === id) {
    return {
      axis
    };
  }
}
function retrieveAxisFromDatasets(id, config) {
  if (config.data && config.data.datasets) {
    const boundDs = config.data.datasets.filter((d3) => d3.xAxisID === id || d3.yAxisID === id);
    if (boundDs.length) {
      return getAxisFromDataset(id, "x", boundDs[0]) || getAxisFromDataset(id, "y", boundDs[0]);
    }
  }
  return {};
}
function mergeScaleConfig(config, options) {
  const chartDefaults = overrides[config.type] || {
    scales: {}
  };
  const configScales = options.scales || {};
  const chartIndexAxis = getIndexAxis(config.type, options);
  const scales2 = /* @__PURE__ */ Object.create(null);
  Object.keys(configScales).forEach((id) => {
    const scaleConf = configScales[id];
    if (!isObject(scaleConf)) {
      return console.error(`Invalid scale configuration for scale: ${id}`);
    }
    if (scaleConf._proxy) {
      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
    }
    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);
    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
    const defaultScaleOptions = chartDefaults.scales || {};
    scales2[id] = mergeIf(/* @__PURE__ */ Object.create(null), [
      {
        axis
      },
      scaleConf,
      defaultScaleOptions[axis],
      defaultScaleOptions[defaultId]
    ]);
  });
  config.data.datasets.forEach((dataset) => {
    const type = dataset.type || config.type;
    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
    const datasetDefaults = overrides[type] || {};
    const defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach((defaultID) => {
      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
      const id = dataset[axis + "AxisID"] || axis;
      scales2[id] = scales2[id] || /* @__PURE__ */ Object.create(null);
      mergeIf(scales2[id], [
        {
          axis
        },
        configScales[id],
        defaultScaleOptions[defaultID]
      ]);
    });
  });
  Object.keys(scales2).forEach((key) => {
    const scale = scales2[key];
    mergeIf(scale, [
      defaults.scales[scale.type],
      defaults.scale
    ]);
  });
  return scales2;
}
function initOptions(config) {
  const options = config.options || (config.options = {});
  options.plugins = valueOrDefault(options.plugins, {});
  options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
  data = data || {};
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  return data;
}
function initConfig(config) {
  config = config || {};
  config.data = initData(config.data);
  initOptions(config);
  return config;
}
const keyCache = /* @__PURE__ */ new Map();
const keysCached = /* @__PURE__ */ new Set();
function cachedKeys(cacheKey, generate) {
  let keys = keyCache.get(cacheKey);
  if (!keys) {
    keys = generate();
    keyCache.set(cacheKey, keys);
    keysCached.add(keys);
  }
  return keys;
}
const addIfFound = (set2, obj, key) => {
  const opts = resolveObjectKey(obj, key);
  if (opts !== void 0) {
    set2.add(opts);
  }
};
class Config {
  constructor(config) {
    this._config = initConfig(config);
    this._scopeCache = /* @__PURE__ */ new Map();
    this._resolverCache = /* @__PURE__ */ new Map();
  }
  get platform() {
    return this._config.platform;
  }
  get type() {
    return this._config.type;
  }
  set type(type) {
    this._config.type = type;
  }
  get data() {
    return this._config.data;
  }
  set data(data) {
    this._config.data = initData(data);
  }
  get options() {
    return this._config.options;
  }
  set options(options) {
    this._config.options = options;
  }
  get plugins() {
    return this._config.plugins;
  }
  update() {
    const config = this._config;
    this.clearCache();
    initOptions(config);
  }
  clearCache() {
    this._scopeCache.clear();
    this._resolverCache.clear();
  }
  datasetScopeKeys(datasetType) {
    return cachedKeys(datasetType, () => [
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetAnimationScopeKeys(datasetType, transition) {
    return cachedKeys(`${datasetType}.transition.${transition}`, () => [
      [
        `datasets.${datasetType}.transitions.${transition}`,
        `transitions.${transition}`
      ],
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetElementScopeKeys(datasetType, elementType) {
    return cachedKeys(`${datasetType}-${elementType}`, () => [
      [
        `datasets.${datasetType}.elements.${elementType}`,
        `datasets.${datasetType}`,
        `elements.${elementType}`,
        ""
      ]
    ]);
  }
  pluginScopeKeys(plugin) {
    const id = plugin.id;
    const type = this.type;
    return cachedKeys(`${type}-plugin-${id}`, () => [
      [
        `plugins.${id}`,
        ...plugin.additionalOptionScopes || []
      ]
    ]);
  }
  _cachedScopes(mainScope, resetCache) {
    const _scopeCache = this._scopeCache;
    let cache = _scopeCache.get(mainScope);
    if (!cache || resetCache) {
      cache = /* @__PURE__ */ new Map();
      _scopeCache.set(mainScope, cache);
    }
    return cache;
  }
  getOptionScopes(mainScope, keyLists, resetCache) {
    const { options, type } = this;
    const cache = this._cachedScopes(mainScope, resetCache);
    const cached = cache.get(keyLists);
    if (cached) {
      return cached;
    }
    const scopes2 = /* @__PURE__ */ new Set();
    keyLists.forEach((keys) => {
      if (mainScope) {
        scopes2.add(mainScope);
        keys.forEach((key) => addIfFound(scopes2, mainScope, key));
      }
      keys.forEach((key) => addIfFound(scopes2, options, key));
      keys.forEach((key) => addIfFound(scopes2, overrides[type] || {}, key));
      keys.forEach((key) => addIfFound(scopes2, defaults, key));
      keys.forEach((key) => addIfFound(scopes2, descriptors, key));
    });
    const array = Array.from(scopes2);
    if (array.length === 0) {
      array.push(/* @__PURE__ */ Object.create(null));
    }
    if (keysCached.has(keyLists)) {
      cache.set(keyLists, array);
    }
    return array;
  }
  chartOptionScopes() {
    const { options, type } = this;
    return [
      options,
      overrides[type] || {},
      defaults.datasets[type] || {},
      {
        type
      },
      defaults,
      descriptors
    ];
  }
  resolveNamedOptions(scopes2, names2, context, prefixes = [
    ""
  ]) {
    const result = {
      $shared: true
    };
    const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes2, prefixes);
    let options = resolver;
    if (needContext(resolver, names2)) {
      result.$shared = false;
      context = isFunction(context) ? context() : context;
      const subResolver = this.createResolver(scopes2, context, subPrefixes);
      options = _attachContext(resolver, context, subResolver);
    }
    for (const prop of names2) {
      result[prop] = options[prop];
    }
    return result;
  }
  createResolver(scopes2, context, prefixes = [
    ""
  ], descriptorDefaults) {
    const { resolver } = getResolver(this._resolverCache, scopes2, prefixes);
    return isObject(context) ? _attachContext(resolver, context, void 0, descriptorDefaults) : resolver;
  }
}
function getResolver(resolverCache, scopes2, prefixes) {
  let cache = resolverCache.get(scopes2);
  if (!cache) {
    cache = /* @__PURE__ */ new Map();
    resolverCache.set(scopes2, cache);
  }
  const cacheKey = prefixes.join();
  let cached = cache.get(cacheKey);
  if (!cached) {
    const resolver = _createResolver(scopes2, prefixes);
    cached = {
      resolver,
      subPrefixes: prefixes.filter((p) => !p.toLowerCase().includes("hover"))
    };
    cache.set(cacheKey, cached);
  }
  return cached;
}
const hasFunction = (value) => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);
function needContext(proxy, names2) {
  const { isScriptable, isIndexable } = _descriptors(proxy);
  for (const prop of names2) {
    const scriptable = isScriptable(prop);
    const indexable = isIndexable(prop);
    const value = (indexable || scriptable) && proxy[prop];
    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {
      return true;
    }
  }
  return false;
}
var version = "4.4.0";
const KNOWN_POSITIONS = [
  "top",
  "bottom",
  "left",
  "right",
  "chartArea"
];
function positionIsHorizontal(position, axis) {
  return position === "top" || position === "bottom" || KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
}
function compare2Level(l1, l2) {
  return function(a3, b2) {
    return a3[l1] === b2[l1] ? a3[l2] - b2[l2] : a3[l1] - b2[l1];
  };
}
function onAnimationsComplete(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  chart.notifyPlugins("afterRender");
  callback(animationOptions && animationOptions.onComplete, [
    context
  ], chart);
}
function onAnimationProgress(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  callback(animationOptions && animationOptions.onProgress, [
    context
  ], chart);
}
function getCanvas(item) {
  if (_isDomSupported() && typeof item === "string") {
    item = document.getElementById(item);
  } else if (item && item.length) {
    item = item[0];
  }
  if (item && item.canvas) {
    item = item.canvas;
  }
  return item;
}
const instances = {};
const getChart = (key) => {
  const canvas = getCanvas(key);
  return Object.values(instances).filter((c2) => c2.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
  const keys = Object.keys(obj);
  for (const key of keys) {
    const intKey = +key;
    if (intKey >= start) {
      const value = obj[key];
      delete obj[key];
      if (move > 0 || intKey > start) {
        obj[intKey + move] = value;
      }
    }
  }
}
function determineLastEvent(e2, lastEvent, inChartArea, isClick) {
  if (!inChartArea || e2.type === "mouseout") {
    return null;
  }
  if (isClick) {
    return lastEvent;
  }
  return e2;
}
function getSizeForArea(scale, chartArea, field) {
  return scale.options.clip ? scale[field] : chartArea[field];
}
function getDatasetArea(meta, chartArea) {
  const { xScale, yScale } = meta;
  if (xScale && yScale) {
    return {
      left: getSizeForArea(xScale, chartArea, "left"),
      right: getSizeForArea(xScale, chartArea, "right"),
      top: getSizeForArea(yScale, chartArea, "top"),
      bottom: getSizeForArea(yScale, chartArea, "bottom")
    };
  }
  return chartArea;
}
let Chart$1 = (_b = class {
  static register(...items) {
    registry.add(...items);
    invalidatePlugins();
  }
  static unregister(...items) {
    registry.remove(...items);
    invalidatePlugins();
  }
  constructor(item, userConfig) {
    const config = this.config = new Config(userConfig);
    const initialCanvas = getCanvas(item);
    const existingChart = getChart(initialCanvas);
    if (existingChart) {
      throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "' must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused.");
    }
    const options = config.createResolver(config.chartOptionScopes(), this.getContext());
    this.platform = new (config.platform || _detectPlatform(initialCanvas))();
    this.platform.updateConfig(config);
    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
    const canvas = context && context.canvas;
    const height = canvas && canvas.height;
    const width = canvas && canvas.width;
    this.id = uid();
    this.ctx = context;
    this.canvas = canvas;
    this.width = width;
    this.height = height;
    this._options = options;
    this._aspectRatio = this.aspectRatio;
    this._layers = [];
    this._metasets = [];
    this._stacks = void 0;
    this.boxes = [];
    this.currentDevicePixelRatio = void 0;
    this.chartArea = void 0;
    this._active = [];
    this._lastEvent = void 0;
    this._listeners = {};
    this._responsiveListeners = void 0;
    this._sortedMetasets = [];
    this.scales = {};
    this._plugins = new PluginService();
    this.$proxies = {};
    this._hiddenIndices = {};
    this.attached = false;
    this._animationsDisabled = void 0;
    this.$context = void 0;
    this._doResize = debounce((mode) => this.update(mode), options.resizeDelay || 0);
    this._dataChanges = [];
    instances[this.id] = this;
    if (!context || !canvas) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
    animator.listen(this, "complete", onAnimationsComplete);
    animator.listen(this, "progress", onAnimationProgress);
    this._initialize();
    if (this.attached) {
      this.update();
    }
  }
  get aspectRatio() {
    const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;
    if (!isNullOrUndef(aspectRatio)) {
      return aspectRatio;
    }
    if (maintainAspectRatio && _aspectRatio) {
      return _aspectRatio;
    }
    return height ? width / height : null;
  }
  get data() {
    return this.config.data;
  }
  set data(data) {
    this.config.data = data;
  }
  get options() {
    return this._options;
  }
  set options(options) {
    this.config.options = options;
  }
  get registry() {
    return registry;
  }
  _initialize() {
    this.notifyPlugins("beforeInit");
    if (this.options.responsive) {
      this.resize();
    } else {
      retinaScale(this, this.options.devicePixelRatio);
    }
    this.bindEvents();
    this.notifyPlugins("afterInit");
    return this;
  }
  clear() {
    clearCanvas(this.canvas, this.ctx);
    return this;
  }
  stop() {
    animator.stop(this);
    return this;
  }
  resize(width, height) {
    if (!animator.running(this)) {
      this._resize(width, height);
    } else {
      this._resizeBeforeDraw = {
        width,
        height
      };
    }
  }
  _resize(width, height) {
    const options = this.options;
    const canvas = this.canvas;
    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
    const mode = this.width ? "resize" : "attach";
    this.width = newSize.width;
    this.height = newSize.height;
    this._aspectRatio = this.aspectRatio;
    if (!retinaScale(this, newRatio, true)) {
      return;
    }
    this.notifyPlugins("resize", {
      size: newSize
    });
    callback(options.onResize, [
      this,
      newSize
    ], this);
    if (this.attached) {
      if (this._doResize(mode)) {
        this.render();
      }
    }
  }
  ensureScalesHaveIDs() {
    const options = this.options;
    const scalesOptions = options.scales || {};
    each(scalesOptions, (axisOptions, axisID) => {
      axisOptions.id = axisID;
    });
  }
  buildOrUpdateScales() {
    const options = this.options;
    const scaleOpts = options.scales;
    const scales2 = this.scales;
    const updated = Object.keys(scales2).reduce((obj, id) => {
      obj[id] = false;
      return obj;
    }, {});
    let items = [];
    if (scaleOpts) {
      items = items.concat(Object.keys(scaleOpts).map((id) => {
        const scaleOptions = scaleOpts[id];
        const axis = determineAxis(id, scaleOptions);
        const isRadial = axis === "r";
        const isHorizontal = axis === "x";
        return {
          options: scaleOptions,
          dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
          dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
        };
      }));
    }
    each(items, (item) => {
      const scaleOptions = item.options;
      const id = scaleOptions.id;
      const axis = determineAxis(id, scaleOptions);
      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
      if (scaleOptions.position === void 0 || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
        scaleOptions.position = item.dposition;
      }
      updated[id] = true;
      let scale = null;
      if (id in scales2 && scales2[id].type === scaleType) {
        scale = scales2[id];
      } else {
        const scaleClass = registry.getScale(scaleType);
        scale = new scaleClass({
          id,
          type: scaleType,
          ctx: this.ctx,
          chart: this
        });
        scales2[scale.id] = scale;
      }
      scale.init(scaleOptions, options);
    });
    each(updated, (hasUpdated, id) => {
      if (!hasUpdated) {
        delete scales2[id];
      }
    });
    each(scales2, (scale) => {
      layouts.configure(this, scale, scale.options);
      layouts.addBox(this, scale);
    });
  }
  _updateMetasets() {
    const metasets = this._metasets;
    const numData = this.data.datasets.length;
    const numMeta = metasets.length;
    metasets.sort((a3, b2) => a3.index - b2.index);
    if (numMeta > numData) {
      for (let i2 = numData; i2 < numMeta; ++i2) {
        this._destroyDatasetMeta(i2);
      }
      metasets.splice(numData, numMeta - numData);
    }
    this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
  }
  _removeUnreferencedMetasets() {
    const { _metasets: metasets, data: { datasets } } = this;
    if (metasets.length > datasets.length) {
      delete this._stacks;
    }
    metasets.forEach((meta, index2) => {
      if (datasets.filter((x2) => x2 === meta._dataset).length === 0) {
        this._destroyDatasetMeta(index2);
      }
    });
  }
  buildOrUpdateControllers() {
    const newControllers = [];
    const datasets = this.data.datasets;
    let i2, ilen;
    this._removeUnreferencedMetasets();
    for (i2 = 0, ilen = datasets.length; i2 < ilen; i2++) {
      const dataset = datasets[i2];
      let meta = this.getDatasetMeta(i2);
      const type = dataset.type || this.config.type;
      if (meta.type && meta.type !== type) {
        this._destroyDatasetMeta(i2);
        meta = this.getDatasetMeta(i2);
      }
      meta.type = type;
      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
      meta.order = dataset.order || 0;
      meta.index = i2;
      meta.label = "" + dataset.label;
      meta.visible = this.isDatasetVisible(i2);
      if (meta.controller) {
        meta.controller.updateIndex(i2);
        meta.controller.linkScales();
      } else {
        const ControllerClass = registry.getController(type);
        const { datasetElementType, dataElementType } = defaults.datasets[type];
        Object.assign(ControllerClass, {
          dataElementType: registry.getElement(dataElementType),
          datasetElementType: datasetElementType && registry.getElement(datasetElementType)
        });
        meta.controller = new ControllerClass(this, i2);
        newControllers.push(meta.controller);
      }
    }
    this._updateMetasets();
    return newControllers;
  }
  _resetElements() {
    each(this.data.datasets, (dataset, datasetIndex) => {
      this.getDatasetMeta(datasetIndex).controller.reset();
    }, this);
  }
  reset() {
    this._resetElements();
    this.notifyPlugins("reset");
  }
  update(mode) {
    const config = this.config;
    config.update();
    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
    const animsDisabled = this._animationsDisabled = !options.animation;
    this._updateScales();
    this._checkEventBindings();
    this._updateHiddenIndices();
    this._plugins.invalidate();
    if (this.notifyPlugins("beforeUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    const newControllers = this.buildOrUpdateControllers();
    this.notifyPlugins("beforeElementsUpdate");
    let minPadding = 0;
    for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; i2++) {
      const { controller } = this.getDatasetMeta(i2);
      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
      controller.buildOrUpdateElements(reset);
      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
    }
    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
    this._updateLayout(minPadding);
    if (!animsDisabled) {
      each(newControllers, (controller) => {
        controller.reset();
      });
    }
    this._updateDatasets(mode);
    this.notifyPlugins("afterUpdate", {
      mode
    });
    this._layers.sort(compare2Level("z", "_idx"));
    const { _active, _lastEvent } = this;
    if (_lastEvent) {
      this._eventHandler(_lastEvent, true);
    } else if (_active.length) {
      this._updateHoverStyles(_active, _active, true);
    }
    this.render();
  }
  _updateScales() {
    each(this.scales, (scale) => {
      layouts.removeBox(this, scale);
    });
    this.ensureScalesHaveIDs();
    this.buildOrUpdateScales();
  }
  _checkEventBindings() {
    const options = this.options;
    const existingEvents = new Set(Object.keys(this._listeners));
    const newEvents = new Set(options.events);
    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
      this.unbindEvents();
      this.bindEvents();
    }
  }
  _updateHiddenIndices() {
    const { _hiddenIndices } = this;
    const changes = this._getUniformDataChanges() || [];
    for (const { method, start, count } of changes) {
      const move = method === "_removeElements" ? -count : count;
      moveNumericKeys(_hiddenIndices, start, move);
    }
  }
  _getUniformDataChanges() {
    const _dataChanges = this._dataChanges;
    if (!_dataChanges || !_dataChanges.length) {
      return;
    }
    this._dataChanges = [];
    const datasetCount = this.data.datasets.length;
    const makeSet = (idx) => new Set(_dataChanges.filter((c2) => c2[0] === idx).map((c2, i2) => i2 + "," + c2.splice(1).join(",")));
    const changeSet = makeSet(0);
    for (let i2 = 1; i2 < datasetCount; i2++) {
      if (!setsEqual(changeSet, makeSet(i2))) {
        return;
      }
    }
    return Array.from(changeSet).map((c2) => c2.split(",")).map((a3) => ({
      method: a3[1],
      start: +a3[2],
      count: +a3[3]
    }));
  }
  _updateLayout(minPadding) {
    if (this.notifyPlugins("beforeLayout", {
      cancelable: true
    }) === false) {
      return;
    }
    layouts.update(this, this.width, this.height, minPadding);
    const area = this.chartArea;
    const noArea = area.width <= 0 || area.height <= 0;
    this._layers = [];
    each(this.boxes, (box) => {
      if (noArea && box.position === "chartArea") {
        return;
      }
      if (box.configure) {
        box.configure();
      }
      this._layers.push(...box._layers());
    }, this);
    this._layers.forEach((item, index2) => {
      item._idx = index2;
    });
    this.notifyPlugins("afterLayout");
  }
  _updateDatasets(mode) {
    if (this.notifyPlugins("beforeDatasetsUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
      this.getDatasetMeta(i2).controller.configure();
    }
    for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
      this._updateDataset(i2, isFunction(mode) ? mode({
        datasetIndex: i2
      }) : mode);
    }
    this.notifyPlugins("afterDatasetsUpdate", {
      mode
    });
  }
  _updateDataset(index2, mode) {
    const meta = this.getDatasetMeta(index2);
    const args = {
      meta,
      index: index2,
      mode,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetUpdate", args) === false) {
      return;
    }
    meta.controller._update(mode);
    args.cancelable = false;
    this.notifyPlugins("afterDatasetUpdate", args);
  }
  render() {
    if (this.notifyPlugins("beforeRender", {
      cancelable: true
    }) === false) {
      return;
    }
    if (animator.has(this)) {
      if (this.attached && !animator.running(this)) {
        animator.start(this);
      }
    } else {
      this.draw();
      onAnimationsComplete({
        chart: this
      });
    }
  }
  draw() {
    let i2;
    if (this._resizeBeforeDraw) {
      const { width, height } = this._resizeBeforeDraw;
      this._resize(width, height);
      this._resizeBeforeDraw = null;
    }
    this.clear();
    if (this.width <= 0 || this.height <= 0) {
      return;
    }
    if (this.notifyPlugins("beforeDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const layers = this._layers;
    for (i2 = 0; i2 < layers.length && layers[i2].z <= 0; ++i2) {
      layers[i2].draw(this.chartArea);
    }
    this._drawDatasets();
    for (; i2 < layers.length; ++i2) {
      layers[i2].draw(this.chartArea);
    }
    this.notifyPlugins("afterDraw");
  }
  _getSortedDatasetMetas(filterVisible) {
    const metasets = this._sortedMetasets;
    const result = [];
    let i2, ilen;
    for (i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
      const meta = metasets[i2];
      if (!filterVisible || meta.visible) {
        result.push(meta);
      }
    }
    return result;
  }
  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(true);
  }
  _drawDatasets() {
    if (this.notifyPlugins("beforeDatasetsDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const metasets = this.getSortedVisibleDatasetMetas();
    for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
      this._drawDataset(metasets[i2]);
    }
    this.notifyPlugins("afterDatasetsDraw");
  }
  _drawDataset(meta) {
    const ctx = this.ctx;
    const clip = meta._clip;
    const useClip = !clip.disabled;
    const area = getDatasetArea(meta, this.chartArea);
    const args = {
      meta,
      index: meta.index,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetDraw", args) === false) {
      return;
    }
    if (useClip) {
      clipArea(ctx, {
        left: clip.left === false ? 0 : area.left - clip.left,
        right: clip.right === false ? this.width : area.right + clip.right,
        top: clip.top === false ? 0 : area.top - clip.top,
        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
      });
    }
    meta.controller.draw();
    if (useClip) {
      unclipArea(ctx);
    }
    args.cancelable = false;
    this.notifyPlugins("afterDatasetDraw", args);
  }
  isPointInArea(point) {
    return _isPointInArea(point, this.chartArea, this._minPadding);
  }
  getElementsAtEventForMode(e2, mode, options, useFinalPosition) {
    const method = Interaction.modes[mode];
    if (typeof method === "function") {
      return method(this, e2, options, useFinalPosition);
    }
    return [];
  }
  getDatasetMeta(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    const metasets = this._metasets;
    let meta = metasets.filter((x2) => x2 && x2._dataset === dataset).pop();
    if (!meta) {
      meta = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: dataset && dataset.order || 0,
        index: datasetIndex,
        _dataset: dataset,
        _parsed: [],
        _sorted: false
      };
      metasets.push(meta);
    }
    return meta;
  }
  getContext() {
    return this.$context || (this.$context = createContext(null, {
      chart: this,
      type: "chart"
    }));
  }
  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }
  isDatasetVisible(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    if (!dataset) {
      return false;
    }
    const meta = this.getDatasetMeta(datasetIndex);
    return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
  }
  setDatasetVisibility(datasetIndex, visible) {
    const meta = this.getDatasetMeta(datasetIndex);
    meta.hidden = !visible;
  }
  toggleDataVisibility(index2) {
    this._hiddenIndices[index2] = !this._hiddenIndices[index2];
  }
  getDataVisibility(index2) {
    return !this._hiddenIndices[index2];
  }
  _updateVisibility(datasetIndex, dataIndex, visible) {
    const mode = visible ? "show" : "hide";
    const meta = this.getDatasetMeta(datasetIndex);
    const anims = meta.controller._resolveAnimations(void 0, mode);
    if (defined(dataIndex)) {
      meta.data[dataIndex].hidden = !visible;
      this.update();
    } else {
      this.setDatasetVisibility(datasetIndex, visible);
      anims.update(meta, {
        visible
      });
      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : void 0);
    }
  }
  hide(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, false);
  }
  show(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, true);
  }
  _destroyDatasetMeta(datasetIndex) {
    const meta = this._metasets[datasetIndex];
    if (meta && meta.controller) {
      meta.controller._destroy();
    }
    delete this._metasets[datasetIndex];
  }
  _stop() {
    let i2, ilen;
    this.stop();
    animator.remove(this);
    for (i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
      this._destroyDatasetMeta(i2);
    }
  }
  destroy() {
    this.notifyPlugins("beforeDestroy");
    const { canvas, ctx } = this;
    this._stop();
    this.config.clearCache();
    if (canvas) {
      this.unbindEvents();
      clearCanvas(canvas, ctx);
      this.platform.releaseContext(ctx);
      this.canvas = null;
      this.ctx = null;
    }
    delete instances[this.id];
    this.notifyPlugins("afterDestroy");
  }
  toBase64Image(...args) {
    return this.canvas.toDataURL(...args);
  }
  bindEvents() {
    this.bindUserEvents();
    if (this.options.responsive) {
      this.bindResponsiveEvents();
    } else {
      this.attached = true;
    }
  }
  bindUserEvents() {
    const listeners = this._listeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const listener = (e2, x2, y3) => {
      e2.offsetX = x2;
      e2.offsetY = y3;
      this._eventHandler(e2);
    };
    each(this.options.events, (type) => _add(type, listener));
  }
  bindResponsiveEvents() {
    if (!this._responsiveListeners) {
      this._responsiveListeners = {};
    }
    const listeners = this._responsiveListeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const _remove = (type, listener2) => {
      if (listeners[type]) {
        platform.removeEventListener(this, type, listener2);
        delete listeners[type];
      }
    };
    const listener = (width, height) => {
      if (this.canvas) {
        this.resize(width, height);
      }
    };
    let detached;
    const attached = () => {
      _remove("attach", attached);
      this.attached = true;
      this.resize();
      _add("resize", listener);
      _add("detach", detached);
    };
    detached = () => {
      this.attached = false;
      _remove("resize", listener);
      this._stop();
      this._resize(0, 0);
      _add("attach", attached);
    };
    if (platform.isAttached(this.canvas)) {
      attached();
    } else {
      detached();
    }
  }
  unbindEvents() {
    each(this._listeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._listeners = {};
    each(this._responsiveListeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._responsiveListeners = void 0;
  }
  updateHoverStyle(items, mode, enabled) {
    const prefix = enabled ? "set" : "remove";
    let meta, item, i2, ilen;
    if (mode === "dataset") {
      meta = this.getDatasetMeta(items[0].datasetIndex);
      meta.controller["_" + prefix + "DatasetHoverStyle"]();
    }
    for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
      item = items[i2];
      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
      if (controller) {
        controller[prefix + "HoverStyle"](item.element, item.datasetIndex, item.index);
      }
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements) {
    const lastActive = this._active || [];
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("No dataset found at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(active, lastActive);
    if (changed) {
      this._active = active;
      this._lastEvent = null;
      this._updateHoverStyles(active, lastActive);
    }
  }
  notifyPlugins(hook, args, filter) {
    return this._plugins.notify(this, hook, args, filter);
  }
  isPluginEnabled(pluginId) {
    return this._plugins._cache.filter((p) => p.plugin.id === pluginId).length === 1;
  }
  _updateHoverStyles(active, lastActive, replay) {
    const hoverOptions = this.options.hover;
    const diff = (a3, b2) => a3.filter((x2) => !b2.some((y3) => x2.datasetIndex === y3.datasetIndex && x2.index === y3.index));
    const deactivated = diff(lastActive, active);
    const activated = replay ? active : diff(active, lastActive);
    if (deactivated.length) {
      this.updateHoverStyle(deactivated, hoverOptions.mode, false);
    }
    if (activated.length && hoverOptions.mode) {
      this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
  }
  _eventHandler(e2, replay) {
    const args = {
      event: e2,
      replay,
      cancelable: true,
      inChartArea: this.isPointInArea(e2)
    };
    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e2.native.type);
    if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) {
      return;
    }
    const changed = this._handleEvent(e2, replay, args.inChartArea);
    args.cancelable = false;
    this.notifyPlugins("afterEvent", args, eventFilter);
    if (changed || args.changed) {
      this.render();
    }
    return this;
  }
  _handleEvent(e2, replay, inChartArea) {
    const { _active: lastActive = [], options } = this;
    const useFinalPosition = replay;
    const active = this._getActiveElements(e2, lastActive, inChartArea, useFinalPosition);
    const isClick = _isClickEvent(e2);
    const lastEvent = determineLastEvent(e2, this._lastEvent, inChartArea, isClick);
    if (inChartArea) {
      this._lastEvent = null;
      callback(options.onHover, [
        e2,
        active,
        this
      ], this);
      if (isClick) {
        callback(options.onClick, [
          e2,
          active,
          this
        ], this);
      }
    }
    const changed = !_elementsEqual(active, lastActive);
    if (changed || replay) {
      this._active = active;
      this._updateHoverStyles(active, lastActive, replay);
    }
    this._lastEvent = lastEvent;
    return changed;
  }
  _getActiveElements(e2, lastActive, inChartArea, useFinalPosition) {
    if (e2.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const hoverOptions = this.options.hover;
    return this.getElementsAtEventForMode(e2, hoverOptions.mode, hoverOptions, useFinalPosition);
  }
}, __publicField(_b, "defaults", defaults), __publicField(_b, "instances", instances), __publicField(_b, "overrides", overrides), __publicField(_b, "registry", registry), __publicField(_b, "version", version), __publicField(_b, "getChart", getChart), _b);
function invalidatePlugins() {
  return each(Chart$1.instances, (chart) => chart._plugins.invalidate());
}
function clipArc(ctx, element2, endAngle) {
  const { startAngle, pixelMargin, x: x2, y: y3, outerRadius, innerRadius } = element2;
  let angleMargin = pixelMargin / outerRadius;
  ctx.beginPath();
  ctx.arc(x2, y3, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
  if (innerRadius > pixelMargin) {
    angleMargin = pixelMargin / innerRadius;
    ctx.arc(x2, y3, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
  } else {
    ctx.arc(x2, y3, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
  }
  ctx.closePath();
  ctx.clip();
}
function toRadiusCorners(value) {
  return _readValueToProps(value, [
    "outerStart",
    "outerEnd",
    "innerStart",
    "innerEnd"
  ]);
}
function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
  const o = toRadiusCorners(arc.options.borderRadius);
  const halfThickness = (outerRadius - innerRadius) / 2;
  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
  const computeOuterLimit = (val) => {
    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
  };
  return {
    outerStart: computeOuterLimit(o.outerStart),
    outerEnd: computeOuterLimit(o.outerEnd),
    innerStart: _limitValue(o.innerStart, 0, innerLimit),
    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)
  };
}
function rThetaToXY(r, theta, x2, y3) {
  return {
    x: x2 + r * Math.cos(theta),
    y: y3 + r * Math.sin(theta)
  };
}
function pathArc(ctx, element2, offset, spacing, end, circular) {
  const { x: x2, y: y3, startAngle: start, pixelMargin, innerRadius: innerR } = element2;
  const outerRadius = Math.max(element2.outerRadius + spacing + offset - pixelMargin, 0);
  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
  let spacingOffset = 0;
  const alpha2 = end - start;
  if (spacing) {
    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha2 * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha2;
    spacingOffset = (alpha2 - adjustedAngle) / 2;
  }
  const beta = Math.max(1e-3, alpha2 * outerRadius - offset / PI) / outerRadius;
  const angleOffset = (alpha2 - beta) / 2;
  const startAngle = start + angleOffset + spacingOffset;
  const endAngle = end - angleOffset - spacingOffset;
  const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element2, innerRadius, outerRadius, endAngle - startAngle);
  const outerStartAdjustedRadius = outerRadius - outerStart;
  const outerEndAdjustedRadius = outerRadius - outerEnd;
  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
  const innerStartAdjustedRadius = innerRadius + innerStart;
  const innerEndAdjustedRadius = innerRadius + innerEnd;
  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
  ctx.beginPath();
  if (circular) {
    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
    ctx.arc(x2, y3, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
    ctx.arc(x2, y3, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
    if (outerEnd > 0) {
      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
    }
    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x2, y3);
    ctx.lineTo(p4.x, p4.y);
    if (innerEnd > 0) {
      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
    }
    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
    ctx.arc(x2, y3, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
    ctx.arc(x2, y3, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
    if (innerStart > 0) {
      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
    }
    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x2, y3);
    ctx.lineTo(p8.x, p8.y);
    if (outerStart > 0) {
      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x2, y3);
      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
    }
  } else {
    ctx.moveTo(x2, y3);
    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x2;
    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y3;
    ctx.lineTo(outerStartX, outerStartY);
    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x2;
    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y3;
    ctx.lineTo(outerEndX, outerEndY);
  }
  ctx.closePath();
}
function drawArc(ctx, element2, offset, spacing, circular) {
  const { fullCircles, startAngle, circumference } = element2;
  let endAngle = element2.endAngle;
  if (fullCircles) {
    pathArc(ctx, element2, offset, spacing, endAngle, circular);
    for (let i2 = 0; i2 < fullCircles; ++i2) {
      ctx.fill();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  pathArc(ctx, element2, offset, spacing, endAngle, circular);
  ctx.fill();
  return endAngle;
}
function drawBorder(ctx, element2, offset, spacing, circular) {
  const { fullCircles, startAngle, circumference, options } = element2;
  const { borderWidth, borderJoinStyle, borderDash, borderDashOffset } = options;
  const inner = options.borderAlign === "inner";
  if (!borderWidth) {
    return;
  }
  ctx.setLineDash(borderDash || []);
  ctx.lineDashOffset = borderDashOffset;
  if (inner) {
    ctx.lineWidth = borderWidth * 2;
    ctx.lineJoin = borderJoinStyle || "round";
  } else {
    ctx.lineWidth = borderWidth;
    ctx.lineJoin = borderJoinStyle || "bevel";
  }
  let endAngle = element2.endAngle;
  if (fullCircles) {
    pathArc(ctx, element2, offset, spacing, endAngle, circular);
    for (let i2 = 0; i2 < fullCircles; ++i2) {
      ctx.stroke();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  if (inner) {
    clipArc(ctx, element2, endAngle);
  }
  if (!fullCircles) {
    pathArc(ctx, element2, offset, spacing, endAngle, circular);
    ctx.stroke();
  }
}
class ArcElement extends Element$1 {
  constructor(cfg) {
    super();
    __publicField(this, "circumference");
    __publicField(this, "endAngle");
    __publicField(this, "fullCircles");
    __publicField(this, "innerRadius");
    __publicField(this, "outerRadius");
    __publicField(this, "pixelMargin");
    __publicField(this, "startAngle");
    this.options = void 0;
    this.circumference = void 0;
    this.startAngle = void 0;
    this.endAngle = void 0;
    this.innerRadius = void 0;
    this.outerRadius = void 0;
    this.pixelMargin = 0;
    this.fullCircles = 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(chartX, chartY, useFinalPosition) {
    const point = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    const { angle, distance } = getAngleFromPoint(point, {
      x: chartX,
      y: chartY
    });
    const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius",
      "circumference"
    ], useFinalPosition);
    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
    const _circumference = valueOrDefault(circumference, endAngle - startAngle);
    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);
    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);
    return betweenAngles && withinRadius;
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y3, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([
      "x",
      "y",
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius"
    ], useFinalPosition);
    const { offset, spacing } = this.options;
    const halfAngle = (startAngle + endAngle) / 2;
    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
    return {
      x: x2 + Math.cos(halfAngle) * halfRadius,
      y: y3 + Math.sin(halfAngle) * halfRadius
    };
  }
  tooltipPosition(useFinalPosition) {
    return this.getCenterPoint(useFinalPosition);
  }
  draw(ctx) {
    const { options, circumference } = this;
    const offset = (options.offset || 0) / 4;
    const spacing = (options.spacing || 0) / 2;
    const circular = options.circular;
    this.pixelMargin = options.borderAlign === "inner" ? 0.33 : 0;
    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
      return;
    }
    ctx.save();
    const halfAngle = (this.startAngle + this.endAngle) / 2;
    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));
    const radiusOffset = offset * fix;
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    drawArc(ctx, this, radiusOffset, spacing, circular);
    drawBorder(ctx, this, radiusOffset, spacing, circular);
    ctx.restore();
  }
}
__publicField(ArcElement, "id", "arc");
__publicField(ArcElement, "defaults", {
  borderAlign: "center",
  borderColor: "#fff",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: void 0,
  borderRadius: 0,
  borderWidth: 2,
  offset: 0,
  spacing: 0,
  angle: void 0,
  circular: true
});
__publicField(ArcElement, "defaultRoutes", {
  backgroundColor: "backgroundColor"
});
__publicField(ArcElement, "descriptors", {
  _scriptable: true,
  _indexable: (name) => name !== "borderDash"
});
function setStyle(ctx, options, style = options) {
  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);
  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));
  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);
  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);
  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);
  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
  ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
  if (options.stepped) {
    return _steppedLineTo;
  }
  if (options.tension || options.cubicInterpolationMode === "monotone") {
    return _bezierCurveTo;
  }
  return lineTo;
}
function pathVars(points, segment, params = {}) {
  const count = points.length;
  const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;
  const { start: segmentStart, end: segmentEnd } = segment;
  const start = Math.max(paramsStart, segmentStart);
  const end = Math.min(paramsEnd, segmentEnd);
  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
  return {
    count,
    start,
    loop: segment.loop,
    ilen: end < start && !outside ? count + end - start : end - start
  };
}
function pathSegment(ctx, line, segment, params) {
  const { points, options } = line;
  const { count, start, loop: loop2, ilen } = pathVars(points, segment, params);
  const lineMethod = getLineMethod(options);
  let { move = true, reverse } = params || {};
  let i2, point, prev;
  for (i2 = 0; i2 <= ilen; ++i2) {
    point = points[(start + (reverse ? ilen - i2 : i2)) % count];
    if (point.skip) {
      continue;
    } else if (move) {
      ctx.moveTo(point.x, point.y);
      move = false;
    } else {
      lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    prev = point;
  }
  if (loop2) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    lineMethod(ctx, prev, point, reverse, options.stepped);
  }
  return !!loop2;
}
function fastPathSegment(ctx, line, segment, params) {
  const points = line.points;
  const { count, start, ilen } = pathVars(points, segment, params);
  const { move = true, reverse } = params || {};
  let avgX = 0;
  let countX = 0;
  let i2, point, prevX, minY, maxY, lastY;
  const pointIndex = (index2) => (start + (reverse ? ilen - index2 : index2)) % count;
  const drawX = () => {
    if (minY !== maxY) {
      ctx.lineTo(avgX, maxY);
      ctx.lineTo(avgX, minY);
      ctx.lineTo(avgX, lastY);
    }
  };
  if (move) {
    point = points[pointIndex(0)];
    ctx.moveTo(point.x, point.y);
  }
  for (i2 = 0; i2 <= ilen; ++i2) {
    point = points[pointIndex(i2)];
    if (point.skip) {
      continue;
    }
    const x2 = point.x;
    const y3 = point.y;
    const truncX = x2 | 0;
    if (truncX === prevX) {
      if (y3 < minY) {
        minY = y3;
      } else if (y3 > maxY) {
        maxY = y3;
      }
      avgX = (countX * avgX + x2) / ++countX;
    } else {
      drawX();
      ctx.lineTo(x2, y3);
      prevX = truncX;
      countX = 0;
      minY = maxY = y3;
    }
    lastY = y3;
  }
  drawX();
}
function _getSegmentMethod(line) {
  const opts = line.options;
  const borderDash = opts.borderDash && opts.borderDash.length;
  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
  return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
  if (options.stepped) {
    return _steppedInterpolation;
  }
  if (options.tension || options.cubicInterpolationMode === "monotone") {
    return _bezierInterpolation;
  }
  return _pointInLine;
}
function strokePathWithCache(ctx, line, start, count) {
  let path = line._path;
  if (!path) {
    path = line._path = new Path2D();
    if (line.path(path, start, count)) {
      path.closePath();
    }
  }
  setStyle(ctx, line.options);
  ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
  const { segments, options } = line;
  const segmentMethod = _getSegmentMethod(line);
  for (const segment of segments) {
    setStyle(ctx, options, segment.style);
    ctx.beginPath();
    if (segmentMethod(ctx, line, segment, {
      start,
      end: start + count - 1
    })) {
      ctx.closePath();
    }
    ctx.stroke();
  }
}
const usePath2D = typeof Path2D === "function";
function draw(ctx, line, start, count) {
  if (usePath2D && !line.options.segment) {
    strokePathWithCache(ctx, line, start, count);
  } else {
    strokePathDirect(ctx, line, start, count);
  }
}
class LineElement extends Element$1 {
  constructor(cfg) {
    super();
    this.animated = true;
    this.options = void 0;
    this._chart = void 0;
    this._loop = void 0;
    this._fullLoop = void 0;
    this._path = void 0;
    this._points = void 0;
    this._segments = void 0;
    this._decimated = false;
    this._pointsUpdated = false;
    this._datasetIndex = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  updateControlPoints(chartArea, indexAxis) {
    const options = this.options;
    if ((options.tension || options.cubicInterpolationMode === "monotone") && !options.stepped && !this._pointsUpdated) {
      const loop2 = options.spanGaps ? this._loop : this._fullLoop;
      _updateBezierControlPoints(this._points, options, chartArea, loop2, indexAxis);
      this._pointsUpdated = true;
    }
  }
  set points(points) {
    this._points = points;
    delete this._segments;
    delete this._path;
    this._pointsUpdated = false;
  }
  get points() {
    return this._points;
  }
  get segments() {
    return this._segments || (this._segments = _computeSegments(this, this.options.segment));
  }
  first() {
    const segments = this.segments;
    const points = this.points;
    return segments.length && points[segments[0].start];
  }
  last() {
    const segments = this.segments;
    const points = this.points;
    const count = segments.length;
    return count && points[segments[count - 1].end];
  }
  interpolate(point, property) {
    const options = this.options;
    const value = point[property];
    const points = this.points;
    const segments = _boundSegments(this, {
      property,
      start: value,
      end: value
    });
    if (!segments.length) {
      return;
    }
    const result = [];
    const _interpolate = _getInterpolationMethod(options);
    let i2, ilen;
    for (i2 = 0, ilen = segments.length; i2 < ilen; ++i2) {
      const { start, end } = segments[i2];
      const p1 = points[start];
      const p2 = points[end];
      if (p1 === p2) {
        result.push(p1);
        continue;
      }
      const t2 = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
      const interpolated = _interpolate(p1, p2, t2, options.stepped);
      interpolated[property] = point[property];
      result.push(interpolated);
    }
    return result.length === 1 ? result[0] : result;
  }
  pathSegment(ctx, segment, params) {
    const segmentMethod = _getSegmentMethod(this);
    return segmentMethod(ctx, this, segment, params);
  }
  path(ctx, start, count) {
    const segments = this.segments;
    const segmentMethod = _getSegmentMethod(this);
    let loop2 = this._loop;
    start = start || 0;
    count = count || this.points.length - start;
    for (const segment of segments) {
      loop2 &= segmentMethod(ctx, this, segment, {
        start,
        end: start + count - 1
      });
    }
    return !!loop2;
  }
  draw(ctx, chartArea, start, count) {
    const options = this.options || {};
    const points = this.points || [];
    if (points.length && options.borderWidth) {
      ctx.save();
      draw(ctx, this, start, count);
      ctx.restore();
    }
    if (this.animated) {
      this._pointsUpdated = false;
      this._path = void 0;
    }
  }
}
__publicField(LineElement, "id", "line");
__publicField(LineElement, "defaults", {
  borderCapStyle: "butt",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: "miter",
  borderWidth: 3,
  capBezierPoints: true,
  cubicInterpolationMode: "default",
  fill: false,
  spanGaps: false,
  stepped: false,
  tension: 0
});
__publicField(LineElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
__publicField(LineElement, "descriptors", {
  _scriptable: true,
  _indexable: (name) => name !== "borderDash" && name !== "fill"
});
function inRange$1(el, pos, axis, useFinalPosition) {
  const options = el.options;
  const { [axis]: value } = el.getProps([
    axis
  ], useFinalPosition);
  return Math.abs(pos - value) < options.radius + options.hitRadius;
}
class PointElement extends Element$1 {
  constructor(cfg) {
    super();
    __publicField(this, "parsed");
    __publicField(this, "skip");
    __publicField(this, "stop");
    this.options = void 0;
    this.parsed = void 0;
    this.skip = void 0;
    this.stop = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    const options = this.options;
    const { x: x2, y: y3 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return Math.pow(mouseX - x2, 2) + Math.pow(mouseY - y3, 2) < Math.pow(options.hitRadius + options.radius, 2);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange$1(this, mouseX, "x", useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange$1(this, mouseY, "y", useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y3 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y3
    };
  }
  size(options) {
    options = options || this.options || {};
    let radius = options.radius || 0;
    radius = Math.max(radius, radius && options.hoverRadius || 0);
    const borderWidth = radius && options.borderWidth || 0;
    return (radius + borderWidth) * 2;
  }
  draw(ctx, area) {
    const options = this.options;
    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
      return;
    }
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.fillStyle = options.backgroundColor;
    drawPoint(ctx, options, this.x, this.y);
  }
  getRange() {
    const options = this.options || {};
    return options.radius + options.hitRadius;
  }
}
__publicField(PointElement, "id", "point");
/**
* @type {any}
*/
__publicField(PointElement, "defaults", {
  borderWidth: 1,
  hitRadius: 1,
  hoverBorderWidth: 1,
  hoverRadius: 4,
  pointStyle: "circle",
  radius: 3,
  rotation: 0
});
/**
* @type {any}
*/
__publicField(PointElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
function getBarBounds(bar, useFinalPosition) {
  const { x: x2, y: y3, base: base2, width, height } = bar.getProps([
    "x",
    "y",
    "base",
    "width",
    "height"
  ], useFinalPosition);
  let left, right, top, bottom, half;
  if (bar.horizontal) {
    half = height / 2;
    left = Math.min(x2, base2);
    right = Math.max(x2, base2);
    top = y3 - half;
    bottom = y3 + half;
  } else {
    half = width / 2;
    left = x2 - half;
    right = x2 + half;
    top = Math.min(y3, base2);
    bottom = Math.max(y3, base2);
  }
  return {
    left,
    top,
    right,
    bottom
  };
}
function skipOrLimit(skip2, value, min, max) {
  return skip2 ? 0 : _limitValue(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
  const value = bar.options.borderWidth;
  const skip2 = bar.borderSkipped;
  const o = toTRBL(value);
  return {
    t: skipOrLimit(skip2.top, o.top, 0, maxH),
    r: skipOrLimit(skip2.right, o.right, 0, maxW),
    b: skipOrLimit(skip2.bottom, o.bottom, 0, maxH),
    l: skipOrLimit(skip2.left, o.left, 0, maxW)
  };
}
function parseBorderRadius(bar, maxW, maxH) {
  const { enableBorderRadius } = bar.getProps([
    "enableBorderRadius"
  ]);
  const value = bar.options.borderRadius;
  const o = toTRBLCorners(value);
  const maxR = Math.min(maxW, maxH);
  const skip2 = bar.borderSkipped;
  const enableBorder = enableBorderRadius || isObject(value);
  return {
    topLeft: skipOrLimit(!enableBorder || skip2.top || skip2.left, o.topLeft, 0, maxR),
    topRight: skipOrLimit(!enableBorder || skip2.top || skip2.right, o.topRight, 0, maxR),
    bottomLeft: skipOrLimit(!enableBorder || skip2.bottom || skip2.left, o.bottomLeft, 0, maxR),
    bottomRight: skipOrLimit(!enableBorder || skip2.bottom || skip2.right, o.bottomRight, 0, maxR)
  };
}
function boundingRects(bar) {
  const bounds = getBarBounds(bar);
  const width = bounds.right - bounds.left;
  const height = bounds.bottom - bounds.top;
  const border = parseBorderWidth(bar, width / 2, height / 2);
  const radius = parseBorderRadius(bar, width / 2, height / 2);
  return {
    outer: {
      x: bounds.left,
      y: bounds.top,
      w: width,
      h: height,
      radius
    },
    inner: {
      x: bounds.left + border.l,
      y: bounds.top + border.t,
      w: width - border.l - border.r,
      h: height - border.t - border.b,
      radius: {
        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
      }
    }
  };
}
function inRange(bar, x2, y3, useFinalPosition) {
  const skipX = x2 === null;
  const skipY = y3 === null;
  const skipBoth = skipX && skipY;
  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
  return bounds && (skipX || _isBetween(x2, bounds.left, bounds.right)) && (skipY || _isBetween(y3, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
  ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
  const x2 = rect.x !== refRect.x ? -amount : 0;
  const y3 = rect.y !== refRect.y ? -amount : 0;
  const w2 = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x2;
  const h3 = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y3;
  return {
    x: rect.x + x2,
    y: rect.y + y3,
    w: rect.w + w2,
    h: rect.h + h3,
    radius: rect.radius
  };
}
class BarElement extends Element$1 {
  constructor(cfg) {
    super();
    this.options = void 0;
    this.horizontal = void 0;
    this.base = void 0;
    this.width = void 0;
    this.height = void 0;
    this.inflateAmount = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  draw(ctx) {
    const { inflateAmount, options: { borderColor, backgroundColor } } = this;
    const { inner, outer } = boundingRects(this);
    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
    ctx.save();
    if (outer.w !== inner.w || outer.h !== inner.h) {
      ctx.beginPath();
      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
      ctx.clip();
      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
      ctx.fillStyle = borderColor;
      ctx.fill("evenodd");
    }
    ctx.beginPath();
    addRectPath(ctx, inflateRect(inner, inflateAmount));
    ctx.fillStyle = backgroundColor;
    ctx.fill();
    ctx.restore();
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    return inRange(this, mouseX, mouseY, useFinalPosition);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange(this, mouseX, null, useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange(this, null, mouseY, useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y3, base: base2, horizontal } = this.getProps([
      "x",
      "y",
      "base",
      "horizontal"
    ], useFinalPosition);
    return {
      x: horizontal ? (x2 + base2) / 2 : x2,
      y: horizontal ? y3 : (y3 + base2) / 2
    };
  }
  getRange(axis) {
    return axis === "x" ? this.width / 2 : this.height / 2;
  }
}
__publicField(BarElement, "id", "bar");
__publicField(BarElement, "defaults", {
  borderSkipped: "start",
  borderWidth: 0,
  borderRadius: 0,
  inflateAmount: "auto",
  pointStyle: void 0
});
__publicField(BarElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
var elements = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcElement,
  BarElement,
  LineElement,
  PointElement
});
const BORDER_COLORS = [
  "rgb(54, 162, 235)",
  "rgb(255, 99, 132)",
  "rgb(255, 159, 64)",
  "rgb(255, 205, 86)",
  "rgb(75, 192, 192)",
  "rgb(153, 102, 255)",
  "rgb(201, 203, 207)"
  // grey
];
const BACKGROUND_COLORS = /* @__PURE__ */ BORDER_COLORS.map((color2) => color2.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
function getBorderColor(i2) {
  return BORDER_COLORS[i2 % BORDER_COLORS.length];
}
function getBackgroundColor(i2) {
  return BACKGROUND_COLORS[i2 % BACKGROUND_COLORS.length];
}
function colorizeDefaultDataset(dataset, i2) {
  dataset.borderColor = getBorderColor(i2);
  dataset.backgroundColor = getBackgroundColor(i2);
  return ++i2;
}
function colorizeDoughnutDataset(dataset, i2) {
  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i2++));
  return i2;
}
function colorizePolarAreaDataset(dataset, i2) {
  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i2++));
  return i2;
}
function getColorizer(chart) {
  let i2 = 0;
  return (dataset, datasetIndex) => {
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    if (controller instanceof DoughnutController) {
      i2 = colorizeDoughnutDataset(dataset, i2);
    } else if (controller instanceof PolarAreaController) {
      i2 = colorizePolarAreaDataset(dataset, i2);
    } else if (controller) {
      i2 = colorizeDefaultDataset(dataset, i2);
    }
  };
}
function containsColorsDefinitions(descriptors2) {
  let k2;
  for (k2 in descriptors2) {
    if (descriptors2[k2].borderColor || descriptors2[k2].backgroundColor) {
      return true;
    }
  }
  return false;
}
function containsColorsDefinition(descriptor) {
  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);
}
var plugin_colors = {
  id: "colors",
  defaults: {
    enabled: true,
    forceOverride: false
  },
  beforeLayout(chart, _args, options) {
    if (!options.enabled) {
      return;
    }
    const { data: { datasets }, options: chartOptions } = chart.config;
    const { elements: elements2 } = chartOptions;
    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements2 && containsColorsDefinitions(elements2))) {
      return;
    }
    const colorizer = getColorizer(chart);
    datasets.forEach(colorizer);
  }
};
function lttbDecimation(data, start, count, availableWidth, options) {
  const samples = options.samples || availableWidth;
  if (samples >= count) {
    return data.slice(start, start + count);
  }
  const decimated = [];
  const bucketWidth = (count - 2) / (samples - 2);
  let sampledIndex = 0;
  const endIndex = start + count - 1;
  let a3 = start;
  let i2, maxAreaPoint, maxArea, area, nextA;
  decimated[sampledIndex++] = data[a3];
  for (i2 = 0; i2 < samples - 2; i2++) {
    let avgX = 0;
    let avgY = 0;
    let j;
    const avgRangeStart = Math.floor((i2 + 1) * bucketWidth) + 1 + start;
    const avgRangeEnd = Math.min(Math.floor((i2 + 2) * bucketWidth) + 1, count) + start;
    const avgRangeLength = avgRangeEnd - avgRangeStart;
    for (j = avgRangeStart; j < avgRangeEnd; j++) {
      avgX += data[j].x;
      avgY += data[j].y;
    }
    avgX /= avgRangeLength;
    avgY /= avgRangeLength;
    const rangeOffs = Math.floor(i2 * bucketWidth) + 1 + start;
    const rangeTo = Math.min(Math.floor((i2 + 1) * bucketWidth) + 1, count) + start;
    const { x: pointAx, y: pointAy } = data[a3];
    maxArea = area = -1;
    for (j = rangeOffs; j < rangeTo; j++) {
      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
      if (area > maxArea) {
        maxArea = area;
        maxAreaPoint = data[j];
        nextA = j;
      }
    }
    decimated[sampledIndex++] = maxAreaPoint;
    a3 = nextA;
  }
  decimated[sampledIndex++] = data[endIndex];
  return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
  let avgX = 0;
  let countX = 0;
  let i2, point, x2, y3, prevX, minIndex, maxIndex, startIndex, minY, maxY;
  const decimated = [];
  const endIndex = start + count - 1;
  const xMin = data[start].x;
  const xMax = data[endIndex].x;
  const dx = xMax - xMin;
  for (i2 = start; i2 < start + count; ++i2) {
    point = data[i2];
    x2 = (point.x - xMin) / dx * availableWidth;
    y3 = point.y;
    const truncX = x2 | 0;
    if (truncX === prevX) {
      if (y3 < minY) {
        minY = y3;
        minIndex = i2;
      } else if (y3 > maxY) {
        maxY = y3;
        maxIndex = i2;
      }
      avgX = (countX * avgX + point.x) / ++countX;
    } else {
      const lastIndex = i2 - 1;
      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {
        const intermediateIndex1 = Math.min(minIndex, maxIndex);
        const intermediateIndex2 = Math.max(minIndex, maxIndex);
        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex1],
            x: avgX
          });
        }
        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex2],
            x: avgX
          });
        }
      }
      if (i2 > 0 && lastIndex !== startIndex) {
        decimated.push(data[lastIndex]);
      }
      decimated.push(point);
      prevX = truncX;
      countX = 0;
      minY = maxY = y3;
      minIndex = maxIndex = startIndex = i2;
    }
  }
  return decimated;
}
function cleanDecimatedDataset(dataset) {
  if (dataset._decimated) {
    const data = dataset._data;
    delete dataset._decimated;
    delete dataset._data;
    Object.defineProperty(dataset, "data", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: data
    });
  }
}
function cleanDecimatedData(chart) {
  chart.data.datasets.forEach((dataset) => {
    cleanDecimatedDataset(dataset);
  });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
  const pointCount = points.length;
  let start = 0;
  let count;
  const { iScale } = meta;
  const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
  if (minDefined) {
    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);
  }
  if (maxDefined) {
    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;
  } else {
    count = pointCount - start;
  }
  return {
    start,
    count
  };
}
var plugin_decimation = {
  id: "decimation",
  defaults: {
    algorithm: "min-max",
    enabled: false
  },
  beforeElementsUpdate: (chart, args, options) => {
    if (!options.enabled) {
      cleanDecimatedData(chart);
      return;
    }
    const availableWidth = chart.width;
    chart.data.datasets.forEach((dataset, datasetIndex) => {
      const { _data, indexAxis } = dataset;
      const meta = chart.getDatasetMeta(datasetIndex);
      const data = _data || dataset.data;
      if (resolve([
        indexAxis,
        chart.options.indexAxis
      ]) === "y") {
        return;
      }
      if (!meta.controller.supportsDecimation) {
        return;
      }
      const xAxis = chart.scales[meta.xAxisID];
      if (xAxis.type !== "linear" && xAxis.type !== "time") {
        return;
      }
      if (chart.options.parsing) {
        return;
      }
      let { start, count } = getStartAndCountOfVisiblePointsSimplified(meta, data);
      const threshold = options.threshold || 4 * availableWidth;
      if (count <= threshold) {
        cleanDecimatedDataset(dataset);
        return;
      }
      if (isNullOrUndef(_data)) {
        dataset._data = data;
        delete dataset.data;
        Object.defineProperty(dataset, "data", {
          configurable: true,
          enumerable: true,
          get: function() {
            return this._decimated;
          },
          set: function(d3) {
            this._data = d3;
          }
        });
      }
      let decimated;
      switch (options.algorithm) {
        case "lttb":
          decimated = lttbDecimation(data, start, count, availableWidth, options);
          break;
        case "min-max":
          decimated = minMaxDecimation(data, start, count, availableWidth);
          break;
        default:
          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
      }
      dataset._decimated = decimated;
    });
  },
  destroy(chart) {
    cleanDecimatedData(chart);
  }
};
function _segments(line, target, property) {
  const segments = line.segments;
  const points = line.points;
  const tpoints = target.points;
  const parts = [];
  for (const segment of segments) {
    let { start, end } = segment;
    end = _findSegmentEnd(start, end, points);
    const bounds = _getBounds(property, points[start], points[end], segment.loop);
    if (!target.segments) {
      parts.push({
        source: segment,
        target: bounds,
        start: points[start],
        end: points[end]
      });
      continue;
    }
    const targetSegments = _boundSegments(target, bounds);
    for (const tgt of targetSegments) {
      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
      const fillSources = _boundSegment(segment, points, subBounds);
      for (const fillSource of fillSources) {
        parts.push({
          source: fillSource,
          target: tgt,
          start: {
            [property]: _getEdge(bounds, subBounds, "start", Math.max)
          },
          end: {
            [property]: _getEdge(bounds, subBounds, "end", Math.min)
          }
        });
      }
    }
  }
  return parts;
}
function _getBounds(property, first, last, loop2) {
  if (loop2) {
    return;
  }
  let start = first[property];
  let end = last[property];
  if (property === "angle") {
    start = _normalizeAngle(start);
    end = _normalizeAngle(end);
  }
  return {
    property,
    start,
    end
  };
}
function _pointsFromSegments(boundary, line) {
  const { x: x2 = null, y: y3 = null } = boundary || {};
  const linePoints = line.points;
  const points = [];
  line.segments.forEach(({ start, end }) => {
    end = _findSegmentEnd(start, end, linePoints);
    const first = linePoints[start];
    const last = linePoints[end];
    if (y3 !== null) {
      points.push({
        x: first.x,
        y: y3
      });
      points.push({
        x: last.x,
        y: y3
      });
    } else if (x2 !== null) {
      points.push({
        x: x2,
        y: first.y
      });
      points.push({
        x: x2,
        y: last.y
      });
    }
  });
  return points;
}
function _findSegmentEnd(start, end, points) {
  for (; end > start; end--) {
    const point = points[end];
    if (!isNaN(point.x) && !isNaN(point.y)) {
      break;
    }
  }
  return end;
}
function _getEdge(a3, b2, prop, fn) {
  if (a3 && b2) {
    return fn(a3[prop], b2[prop]);
  }
  return a3 ? a3[prop] : b2 ? b2[prop] : 0;
}
function _createBoundaryLine(boundary, line) {
  let points = [];
  let _loop = false;
  if (isArray(boundary)) {
    _loop = true;
    points = boundary;
  } else {
    points = _pointsFromSegments(boundary, line);
  }
  return points.length ? new LineElement({
    points,
    options: {
      tension: 0
    },
    _loop,
    _fullLoop: _loop
  }) : null;
}
function _shouldApplyFill(source) {
  return source && source.fill !== false;
}
function _resolveTarget(sources, index2, propagate) {
  const source = sources[index2];
  let fill2 = source.fill;
  const visited = [
    index2
  ];
  let target;
  if (!propagate) {
    return fill2;
  }
  while (fill2 !== false && visited.indexOf(fill2) === -1) {
    if (!isNumberFinite(fill2)) {
      return fill2;
    }
    target = sources[fill2];
    if (!target) {
      return false;
    }
    if (target.visible) {
      return fill2;
    }
    visited.push(fill2);
    fill2 = target.fill;
  }
  return false;
}
function _decodeFill(line, index2, count) {
  const fill2 = parseFillOption(line);
  if (isObject(fill2)) {
    return isNaN(fill2.value) ? false : fill2;
  }
  let target = parseFloat(fill2);
  if (isNumberFinite(target) && Math.floor(target) === target) {
    return decodeTargetIndex(fill2[0], index2, target, count);
  }
  return [
    "origin",
    "start",
    "end",
    "stack",
    "shape"
  ].indexOf(fill2) >= 0 && fill2;
}
function decodeTargetIndex(firstCh, index2, target, count) {
  if (firstCh === "-" || firstCh === "+") {
    target = index2 + target;
  }
  if (target === index2 || target < 0 || target >= count) {
    return false;
  }
  return target;
}
function _getTargetPixel(fill2, scale) {
  let pixel = null;
  if (fill2 === "start") {
    pixel = scale.bottom;
  } else if (fill2 === "end") {
    pixel = scale.top;
  } else if (isObject(fill2)) {
    pixel = scale.getPixelForValue(fill2.value);
  } else if (scale.getBasePixel) {
    pixel = scale.getBasePixel();
  }
  return pixel;
}
function _getTargetValue(fill2, scale, startValue) {
  let value;
  if (fill2 === "start") {
    value = startValue;
  } else if (fill2 === "end") {
    value = scale.options.reverse ? scale.min : scale.max;
  } else if (isObject(fill2)) {
    value = fill2.value;
  } else {
    value = scale.getBaseValue();
  }
  return value;
}
function parseFillOption(line) {
  const options = line.options;
  const fillOption = options.fill;
  let fill2 = valueOrDefault(fillOption && fillOption.target, fillOption);
  if (fill2 === void 0) {
    fill2 = !!options.backgroundColor;
  }
  if (fill2 === false || fill2 === null) {
    return false;
  }
  if (fill2 === true) {
    return "origin";
  }
  return fill2;
}
function _buildStackLine(source) {
  const { scale, index: index2, line } = source;
  const points = [];
  const segments = line.segments;
  const sourcePoints = line.points;
  const linesBelow = getLinesBelow(scale, index2);
  linesBelow.push(_createBoundaryLine({
    x: null,
    y: scale.bottom
  }, line));
  for (let i2 = 0; i2 < segments.length; i2++) {
    const segment = segments[i2];
    for (let j = segment.start; j <= segment.end; j++) {
      addPointsBelow(points, sourcePoints[j], linesBelow);
    }
  }
  return new LineElement({
    points,
    options: {}
  });
}
function getLinesBelow(scale, index2) {
  const below = [];
  const metas = scale.getMatchingVisibleMetas("line");
  for (let i2 = 0; i2 < metas.length; i2++) {
    const meta = metas[i2];
    if (meta.index === index2) {
      break;
    }
    if (!meta.hidden) {
      below.unshift(meta.dataset);
    }
  }
  return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
  const postponed = [];
  for (let j = 0; j < linesBelow.length; j++) {
    const line = linesBelow[j];
    const { first, last, point } = findPoint(line, sourcePoint, "x");
    if (!point || first && last) {
      continue;
    }
    if (first) {
      postponed.unshift(point);
    } else {
      points.push(point);
      if (!last) {
        break;
      }
    }
  }
  points.push(...postponed);
}
function findPoint(line, sourcePoint, property) {
  const point = line.interpolate(sourcePoint, property);
  if (!point) {
    return {};
  }
  const pointValue = point[property];
  const segments = line.segments;
  const linePoints = line.points;
  let first = false;
  let last = false;
  for (let i2 = 0; i2 < segments.length; i2++) {
    const segment = segments[i2];
    const firstValue = linePoints[segment.start][property];
    const lastValue = linePoints[segment.end][property];
    if (_isBetween(pointValue, firstValue, lastValue)) {
      first = pointValue === firstValue;
      last = pointValue === lastValue;
      break;
    }
  }
  return {
    first,
    last,
    point
  };
}
class simpleArc {
  constructor(opts) {
    this.x = opts.x;
    this.y = opts.y;
    this.radius = opts.radius;
  }
  pathSegment(ctx, bounds, opts) {
    const { x: x2, y: y3, radius } = this;
    bounds = bounds || {
      start: 0,
      end: TAU
    };
    ctx.arc(x2, y3, radius, bounds.end, bounds.start, true);
    return !opts.bounds;
  }
  interpolate(point) {
    const { x: x2, y: y3, radius } = this;
    const angle = point.angle;
    return {
      x: x2 + Math.cos(angle) * radius,
      y: y3 + Math.sin(angle) * radius,
      angle
    };
  }
}
function _getTarget(source) {
  const { chart, fill: fill2, line } = source;
  if (isNumberFinite(fill2)) {
    return getLineByIndex(chart, fill2);
  }
  if (fill2 === "stack") {
    return _buildStackLine(source);
  }
  if (fill2 === "shape") {
    return true;
  }
  const boundary = computeBoundary(source);
  if (boundary instanceof simpleArc) {
    return boundary;
  }
  return _createBoundaryLine(boundary, line);
}
function getLineByIndex(chart, index2) {
  const meta = chart.getDatasetMeta(index2);
  const visible = meta && chart.isDatasetVisible(index2);
  return visible ? meta.dataset : null;
}
function computeBoundary(source) {
  const scale = source.scale || {};
  if (scale.getPointPositionForValue) {
    return computeCircularBoundary(source);
  }
  return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
  const { scale = {}, fill: fill2 } = source;
  const pixel = _getTargetPixel(fill2, scale);
  if (isNumberFinite(pixel)) {
    const horizontal = scale.isHorizontal();
    return {
      x: horizontal ? pixel : null,
      y: horizontal ? null : pixel
    };
  }
  return null;
}
function computeCircularBoundary(source) {
  const { scale, fill: fill2 } = source;
  const options = scale.options;
  const length = scale.getLabels().length;
  const start = options.reverse ? scale.max : scale.min;
  const value = _getTargetValue(fill2, scale, start);
  const target = [];
  if (options.grid.circular) {
    const center = scale.getPointPositionForValue(0, start);
    return new simpleArc({
      x: center.x,
      y: center.y,
      radius: scale.getDistanceFromCenterForValue(value)
    });
  }
  for (let i2 = 0; i2 < length; ++i2) {
    target.push(scale.getPointPositionForValue(i2, value));
  }
  return target;
}
function _drawfill(ctx, source, area) {
  const target = _getTarget(source);
  const { line, scale, axis } = source;
  const lineOpts = line.options;
  const fillOption = lineOpts.fill;
  const color2 = lineOpts.backgroundColor;
  const { above = color2, below = color2 } = fillOption || {};
  if (target && line.points.length) {
    clipArea(ctx, area);
    doFill(ctx, {
      line,
      target,
      above,
      below,
      area,
      scale,
      axis
    });
    unclipArea(ctx);
  }
}
function doFill(ctx, cfg) {
  const { line, target, above, below, area, scale } = cfg;
  const property = line._loop ? "angle" : cfg.axis;
  ctx.save();
  if (property === "x" && below !== above) {
    clipVertical(ctx, target, area.top);
    fill(ctx, {
      line,
      target,
      color: above,
      scale,
      property
    });
    ctx.restore();
    ctx.save();
    clipVertical(ctx, target, area.bottom);
  }
  fill(ctx, {
    line,
    target,
    color: below,
    scale,
    property
  });
  ctx.restore();
}
function clipVertical(ctx, target, clipY) {
  const { segments, points } = target;
  let first = true;
  let lineLoop = false;
  ctx.beginPath();
  for (const segment of segments) {
    const { start, end } = segment;
    const firstPoint = points[start];
    const lastPoint = points[_findSegmentEnd(start, end, points)];
    if (first) {
      ctx.moveTo(firstPoint.x, firstPoint.y);
      first = false;
    } else {
      ctx.lineTo(firstPoint.x, clipY);
      ctx.lineTo(firstPoint.x, firstPoint.y);
    }
    lineLoop = !!target.pathSegment(ctx, segment, {
      move: lineLoop
    });
    if (lineLoop) {
      ctx.closePath();
    } else {
      ctx.lineTo(lastPoint.x, clipY);
    }
  }
  ctx.lineTo(target.first().x, clipY);
  ctx.closePath();
  ctx.clip();
}
function fill(ctx, cfg) {
  const { line, target, property, color: color2, scale } = cfg;
  const segments = _segments(line, target, property);
  for (const { source: src, target: tgt, start, end } of segments) {
    const { style: { backgroundColor = color2 } = {} } = src;
    const notShape = target !== true;
    ctx.save();
    ctx.fillStyle = backgroundColor;
    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));
    ctx.beginPath();
    const lineLoop = !!line.pathSegment(ctx, src);
    let loop2;
    if (notShape) {
      if (lineLoop) {
        ctx.closePath();
      } else {
        interpolatedLineTo(ctx, target, end, property);
      }
      const targetLoop = !!target.pathSegment(ctx, tgt, {
        move: lineLoop,
        reverse: true
      });
      loop2 = lineLoop && targetLoop;
      if (!loop2) {
        interpolatedLineTo(ctx, target, start, property);
      }
    }
    ctx.closePath();
    ctx.fill(loop2 ? "evenodd" : "nonzero");
    ctx.restore();
  }
}
function clipBounds(ctx, scale, bounds) {
  const { top, bottom } = scale.chart.chartArea;
  const { property, start, end } = bounds || {};
  if (property === "x") {
    ctx.beginPath();
    ctx.rect(start, top, end - start, bottom - top);
    ctx.clip();
  }
}
function interpolatedLineTo(ctx, target, point, property) {
  const interpolatedPoint = target.interpolate(point, property);
  if (interpolatedPoint) {
    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
  }
}
var index = {
  id: "filler",
  afterDatasetsUpdate(chart, _args, options) {
    const count = (chart.data.datasets || []).length;
    const sources = [];
    let meta, i2, line, source;
    for (i2 = 0; i2 < count; ++i2) {
      meta = chart.getDatasetMeta(i2);
      line = meta.dataset;
      source = null;
      if (line && line.options && line instanceof LineElement) {
        source = {
          visible: chart.isDatasetVisible(i2),
          index: i2,
          fill: _decodeFill(line, i2, count),
          chart,
          axis: meta.controller.options.indexAxis,
          scale: meta.vScale,
          line
        };
      }
      meta.$filler = source;
      sources.push(source);
    }
    for (i2 = 0; i2 < count; ++i2) {
      source = sources[i2];
      if (!source || source.fill === false) {
        continue;
      }
      source.fill = _resolveTarget(sources, i2, options.propagate);
    }
  },
  beforeDraw(chart, _args, options) {
    const draw2 = options.drawTime === "beforeDraw";
    const metasets = chart.getSortedVisibleDatasetMetas();
    const area = chart.chartArea;
    for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
      const source = metasets[i2].$filler;
      if (!source) {
        continue;
      }
      source.line.updateControlPoints(area, source.axis);
      if (draw2 && source.fill) {
        _drawfill(chart.ctx, source, area);
      }
    }
  },
  beforeDatasetsDraw(chart, _args, options) {
    if (options.drawTime !== "beforeDatasetsDraw") {
      return;
    }
    const metasets = chart.getSortedVisibleDatasetMetas();
    for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
      const source = metasets[i2].$filler;
      if (_shouldApplyFill(source)) {
        _drawfill(chart.ctx, source, chart.chartArea);
      }
    }
  },
  beforeDatasetDraw(chart, args, options) {
    const source = args.meta.$filler;
    if (!_shouldApplyFill(source) || options.drawTime !== "beforeDatasetDraw") {
      return;
    }
    _drawfill(chart.ctx, source, chart.chartArea);
  },
  defaults: {
    propagate: true,
    drawTime: "beforeDatasetDraw"
  }
};
const getBoxSize = (labelOpts, fontSize) => {
  let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
  if (labelOpts.usePointStyle) {
    boxHeight = Math.min(boxHeight, fontSize);
    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
  }
  return {
    boxWidth,
    boxHeight,
    itemHeight: Math.max(fontSize, boxHeight)
  };
};
const itemsEqual = (a3, b2) => a3 !== null && b2 !== null && a3.datasetIndex === b2.datasetIndex && a3.index === b2.index;
class Legend extends Element$1 {
  constructor(config) {
    super();
    this._added = false;
    this.legendHitBoxes = [];
    this._hoveredItem = null;
    this.doughnutMode = false;
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this.legendItems = void 0;
    this.columnSizes = void 0;
    this.lineWidths = void 0;
    this.maxHeight = void 0;
    this.maxWidth = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.height = void 0;
    this.width = void 0;
    this._margins = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight, margins) {
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins;
    this.setDimensions();
    this.buildLabels();
    this.fit();
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = this._margins.left;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = this._margins.top;
      this.bottom = this.height;
    }
  }
  buildLabels() {
    const labelOpts = this.options.labels || {};
    let legendItems = callback(labelOpts.generateLabels, [
      this.chart
    ], this) || [];
    if (labelOpts.filter) {
      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));
    }
    if (labelOpts.sort) {
      legendItems = legendItems.sort((a3, b2) => labelOpts.sort(a3, b2, this.chart.data));
    }
    if (this.options.reverse) {
      legendItems.reverse();
    }
    this.legendItems = legendItems;
  }
  fit() {
    const { options, ctx } = this;
    if (!options.display) {
      this.width = this.height = 0;
      return;
    }
    const labelOpts = options.labels;
    const labelFont = toFont(labelOpts.font);
    const fontSize = labelFont.size;
    const titleHeight = this._computeTitleHeight();
    const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
    let width, height;
    ctx.font = labelFont.string;
    if (this.isHorizontal()) {
      width = this.maxWidth;
      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    } else {
      height = this.maxHeight;
      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
    }
    this.width = Math.min(width, options.maxWidth || this.maxWidth);
    this.height = Math.min(height, options.maxHeight || this.maxHeight);
  }
  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
    const { ctx, maxWidth, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const lineWidths = this.lineWidths = [
      0
    ];
    const lineHeight = itemHeight + padding;
    let totalHeight = titleHeight;
    ctx.textAlign = "left";
    ctx.textBaseline = "middle";
    let row = -1;
    let top = -lineHeight;
    this.legendItems.forEach((legendItem, i2) => {
      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
      if (i2 === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
        totalHeight += lineHeight;
        lineWidths[lineWidths.length - (i2 > 0 ? 0 : 1)] = 0;
        top += lineHeight;
        row++;
      }
      hitboxes[i2] = {
        left: 0,
        top,
        row,
        width: itemWidth,
        height: itemHeight
      };
      lineWidths[lineWidths.length - 1] += itemWidth + padding;
    });
    return totalHeight;
  }
  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
    const { ctx, maxHeight, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const columnSizes = this.columnSizes = [];
    const heightLimit = maxHeight - titleHeight;
    let totalWidth = padding;
    let currentColWidth = 0;
    let currentColHeight = 0;
    let left = 0;
    let col = 0;
    this.legendItems.forEach((legendItem, i2) => {
      const { itemWidth, itemHeight } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
      if (i2 > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
        totalWidth += currentColWidth + padding;
        columnSizes.push({
          width: currentColWidth,
          height: currentColHeight
        });
        left += currentColWidth + padding;
        col++;
        currentColWidth = currentColHeight = 0;
      }
      hitboxes[i2] = {
        left,
        top: currentColHeight,
        col,
        width: itemWidth,
        height: itemHeight
      };
      currentColWidth = Math.max(currentColWidth, itemWidth);
      currentColHeight += itemHeight + padding;
    });
    totalWidth += currentColWidth;
    columnSizes.push({
      width: currentColWidth,
      height: currentColHeight
    });
    return totalWidth;
  }
  adjustHitBoxes() {
    if (!this.options.display) {
      return;
    }
    const titleHeight = this._computeTitleHeight();
    const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
    if (this.isHorizontal()) {
      let row = 0;
      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
      for (const hitbox of hitboxes) {
        if (row !== hitbox.row) {
          row = hitbox.row;
          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
        }
        hitbox.top += this.top + titleHeight + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
        left += hitbox.width + padding;
      }
    } else {
      let col = 0;
      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
      for (const hitbox of hitboxes) {
        if (hitbox.col !== col) {
          col = hitbox.col;
          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
        }
        hitbox.top = top;
        hitbox.left += this.left + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
        top += hitbox.height + padding;
      }
    }
  }
  isHorizontal() {
    return this.options.position === "top" || this.options.position === "bottom";
  }
  draw() {
    if (this.options.display) {
      const ctx = this.ctx;
      clipArea(ctx, this);
      this._draw();
      unclipArea(ctx);
    }
  }
  _draw() {
    const { options: opts, columnSizes, lineWidths, ctx } = this;
    const { align, labels: labelOpts } = opts;
    const defaultColor2 = defaults.color;
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const labelFont = toFont(labelOpts.font);
    const { padding } = labelOpts;
    const fontSize = labelFont.size;
    const halfFontSize = fontSize / 2;
    let cursor;
    this.drawTitle();
    ctx.textAlign = rtlHelper.textAlign("left");
    ctx.textBaseline = "middle";
    ctx.lineWidth = 0.5;
    ctx.font = labelFont.string;
    const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
    const drawLegendBox = function(x2, y3, legendItem) {
      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
        return;
      }
      ctx.save();
      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor2);
      ctx.lineCap = valueOrDefault(legendItem.lineCap, "butt");
      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, "miter");
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor2);
      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
      if (labelOpts.usePointStyle) {
        const drawOptions = {
          radius: boxHeight * Math.SQRT2 / 2,
          pointStyle: legendItem.pointStyle,
          rotation: legendItem.rotation,
          borderWidth: lineWidth
        };
        const centerX = rtlHelper.xPlus(x2, boxWidth / 2);
        const centerY = y3 + halfFontSize;
        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
      } else {
        const yBoxTop = y3 + Math.max((fontSize - boxHeight) / 2, 0);
        const xBoxLeft = rtlHelper.leftForLtr(x2, boxWidth);
        const borderRadius = toTRBLCorners(legendItem.borderRadius);
        ctx.beginPath();
        if (Object.values(borderRadius).some((v) => v !== 0)) {
          addRoundedRectPath(ctx, {
            x: xBoxLeft,
            y: yBoxTop,
            w: boxWidth,
            h: boxHeight,
            radius: borderRadius
          });
        } else {
          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
        }
        ctx.fill();
        if (lineWidth !== 0) {
          ctx.stroke();
        }
      }
      ctx.restore();
    };
    const fillText = function(x2, y3, legendItem) {
      renderText(ctx, legendItem.text, x2, y3 + itemHeight / 2, labelFont, {
        strikethrough: legendItem.hidden,
        textAlign: rtlHelper.textAlign(legendItem.textAlign)
      });
    };
    const isHorizontal = this.isHorizontal();
    const titleHeight = this._computeTitleHeight();
    if (isHorizontal) {
      cursor = {
        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
        y: this.top + padding + titleHeight,
        line: 0
      };
    } else {
      cursor = {
        x: this.left + padding,
        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
        line: 0
      };
    }
    overrideTextDirection(this.ctx, opts.textDirection);
    const lineHeight = itemHeight + padding;
    this.legendItems.forEach((legendItem, i2) => {
      ctx.strokeStyle = legendItem.fontColor;
      ctx.fillStyle = legendItem.fontColor;
      const textWidth = ctx.measureText(legendItem.text).width;
      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
      const width = boxWidth + halfFontSize + textWidth;
      let x2 = cursor.x;
      let y3 = cursor.y;
      rtlHelper.setWidth(this.width);
      if (isHorizontal) {
        if (i2 > 0 && x2 + width + padding > this.right) {
          y3 = cursor.y += lineHeight;
          cursor.line++;
          x2 = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);
        }
      } else if (i2 > 0 && y3 + lineHeight > this.bottom) {
        x2 = cursor.x = x2 + columnSizes[cursor.line].width + padding;
        cursor.line++;
        y3 = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
      }
      const realX = rtlHelper.x(x2);
      drawLegendBox(realX, y3, legendItem);
      x2 = _textX(textAlign, x2 + boxWidth + halfFontSize, isHorizontal ? x2 + width : this.right, opts.rtl);
      fillText(rtlHelper.x(x2), y3, legendItem);
      if (isHorizontal) {
        cursor.x += width + padding;
      } else if (typeof legendItem.text !== "string") {
        const fontLineHeight = labelFont.lineHeight;
        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
      } else {
        cursor.y += lineHeight;
      }
    });
    restoreTextDirection(this.ctx, opts.textDirection);
  }
  drawTitle() {
    const opts = this.options;
    const titleOpts = opts.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    if (!titleOpts.display) {
      return;
    }
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const ctx = this.ctx;
    const position = titleOpts.position;
    const halfFontSize = titleFont.size / 2;
    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
    let y3;
    let left = this.left;
    let maxWidth = this.width;
    if (this.isHorizontal()) {
      maxWidth = Math.max(...this.lineWidths);
      y3 = this.top + topPaddingPlusHalfFontSize;
      left = _alignStartEnd(opts.align, left, this.right - maxWidth);
    } else {
      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
      y3 = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
    }
    const x2 = _alignStartEnd(position, left, left + maxWidth);
    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
    ctx.textBaseline = "middle";
    ctx.strokeStyle = titleOpts.color;
    ctx.fillStyle = titleOpts.color;
    ctx.font = titleFont.string;
    renderText(ctx, titleOpts.text, x2, y3, titleFont);
  }
  _computeTitleHeight() {
    const titleOpts = this.options.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
  }
  _getLegendItemAt(x2, y3) {
    let i2, hitBox, lh;
    if (_isBetween(x2, this.left, this.right) && _isBetween(y3, this.top, this.bottom)) {
      lh = this.legendHitBoxes;
      for (i2 = 0; i2 < lh.length; ++i2) {
        hitBox = lh[i2];
        if (_isBetween(x2, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y3, hitBox.top, hitBox.top + hitBox.height)) {
          return this.legendItems[i2];
        }
      }
    }
    return null;
  }
  handleEvent(e2) {
    const opts = this.options;
    if (!isListened(e2.type, opts)) {
      return;
    }
    const hoveredItem = this._getLegendItemAt(e2.x, e2.y);
    if (e2.type === "mousemove" || e2.type === "mouseout") {
      const previous = this._hoveredItem;
      const sameItem = itemsEqual(previous, hoveredItem);
      if (previous && !sameItem) {
        callback(opts.onLeave, [
          e2,
          previous,
          this
        ], this);
      }
      this._hoveredItem = hoveredItem;
      if (hoveredItem && !sameItem) {
        callback(opts.onHover, [
          e2,
          hoveredItem,
          this
        ], this);
      }
    } else if (hoveredItem) {
      callback(opts.onClick, [
        e2,
        hoveredItem,
        this
      ], this);
    }
  }
}
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
  return {
    itemWidth,
    itemHeight
  };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
  let legendItemText = legendItem.text;
  if (legendItemText && typeof legendItemText !== "string") {
    legendItemText = legendItemText.reduce((a3, b2) => a3.length > b2.length ? a3 : b2);
  }
  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
  let itemHeight = _itemHeight;
  if (typeof legendItem.text !== "string") {
    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
  }
  return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
  const labelHeight = legendItem.text ? legendItem.text.length : 0;
  return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
  if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) {
    return true;
  }
  if (opts.onClick && (type === "click" || type === "mouseup")) {
    return true;
  }
  return false;
}
var plugin_legend = {
  id: "legend",
  _element: Legend,
  start(chart, _args, options) {
    const legend = chart.legend = new Legend({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, legend, options);
    layouts.addBox(chart, legend);
  },
  stop(chart) {
    layouts.removeBox(chart, chart.legend);
    delete chart.legend;
  },
  beforeUpdate(chart, _args, options) {
    const legend = chart.legend;
    layouts.configure(chart, legend, options);
    legend.options = options;
  },
  afterUpdate(chart) {
    const legend = chart.legend;
    legend.buildLabels();
    legend.adjustHitBoxes();
  },
  afterEvent(chart, args) {
    if (!args.replay) {
      chart.legend.handleEvent(args.event);
    }
  },
  defaults: {
    display: true,
    position: "top",
    align: "center",
    fullSize: true,
    reverse: false,
    weight: 1e3,
    onClick(e2, legendItem, legend) {
      const index2 = legendItem.datasetIndex;
      const ci = legend.chart;
      if (ci.isDatasetVisible(index2)) {
        ci.hide(index2);
        legendItem.hidden = true;
      } else {
        ci.show(index2);
        legendItem.hidden = false;
      }
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: (ctx) => ctx.chart.options.color,
      boxWidth: 40,
      padding: 10,
      generateLabels(chart) {
        const datasets = chart.data.datasets;
        const { labels: { usePointStyle, pointStyle, textAlign, color: color2, useBorderRadius, borderRadius } } = chart.legend.options;
        return chart._getSortedDatasetMetas().map((meta) => {
          const style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
          const borderWidth = toPadding(style.borderWidth);
          return {
            text: datasets[meta.index].label,
            fillStyle: style.backgroundColor,
            fontColor: color2,
            hidden: !meta.visible,
            lineCap: style.borderCapStyle,
            lineDash: style.borderDash,
            lineDashOffset: style.borderDashOffset,
            lineJoin: style.borderJoinStyle,
            lineWidth: (borderWidth.width + borderWidth.height) / 4,
            strokeStyle: style.borderColor,
            pointStyle: pointStyle || style.pointStyle,
            rotation: style.rotation,
            textAlign: textAlign || style.textAlign,
            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
            datasetIndex: meta.index
          };
        }, this);
      }
    },
    title: {
      color: (ctx) => ctx.chart.options.color,
      display: false,
      position: "center",
      text: ""
    }
  },
  descriptors: {
    _scriptable: (name) => !name.startsWith("on"),
    labels: {
      _scriptable: (name) => ![
        "generateLabels",
        "filter",
        "sort"
      ].includes(name)
    }
  }
};
class Title extends Element$1 {
  constructor(config) {
    super();
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this._padding = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight) {
    const opts = this.options;
    this.left = 0;
    this.top = 0;
    if (!opts.display) {
      this.width = this.height = this.right = this.bottom = 0;
      return;
    }
    this.width = this.right = maxWidth;
    this.height = this.bottom = maxHeight;
    const lineCount = isArray(opts.text) ? opts.text.length : 1;
    this._padding = toPadding(opts.padding);
    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
    if (this.isHorizontal()) {
      this.height = textSize;
    } else {
      this.width = textSize;
    }
  }
  isHorizontal() {
    const pos = this.options.position;
    return pos === "top" || pos === "bottom";
  }
  _drawArgs(offset) {
    const { top, left, bottom, right, options } = this;
    const align = options.align;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    if (this.isHorizontal()) {
      titleX = _alignStartEnd(align, left, right);
      titleY = top + offset;
      maxWidth = right - left;
    } else {
      if (options.position === "left") {
        titleX = left + offset;
        titleY = _alignStartEnd(align, bottom, top);
        rotation = PI * -0.5;
      } else {
        titleX = right - offset;
        titleY = _alignStartEnd(align, top, bottom);
        rotation = PI * 0.5;
      }
      maxWidth = bottom - top;
    }
    return {
      titleX,
      titleY,
      maxWidth,
      rotation
    };
  }
  draw() {
    const ctx = this.ctx;
    const opts = this.options;
    if (!opts.display) {
      return;
    }
    const fontOpts = toFont(opts.font);
    const lineHeight = fontOpts.lineHeight;
    const offset = lineHeight / 2 + this._padding.top;
    const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
    renderText(ctx, opts.text, 0, 0, fontOpts, {
      color: opts.color,
      maxWidth,
      rotation,
      textAlign: _toLeftRightCenter(opts.align),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
}
function createTitle(chart, titleOpts) {
  const title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}
var plugin_title = {
  id: "title",
  _element: Title,
  start(chart, _args, options) {
    createTitle(chart, options);
  },
  stop(chart) {
    const titleBlock = chart.titleBlock;
    layouts.removeBox(chart, titleBlock);
    delete chart.titleBlock;
  },
  beforeUpdate(chart, _args, options) {
    const title = chart.titleBlock;
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "bold"
    },
    fullSize: true,
    padding: 10,
    position: "top",
    text: "",
    weight: 2e3
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
const map = /* @__PURE__ */ new WeakMap();
var plugin_subtitle = {
  id: "subtitle",
  start(chart, _args, options) {
    const title = new Title({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, title, options);
    layouts.addBox(chart, title);
    map.set(chart, title);
  },
  stop(chart) {
    layouts.removeBox(chart, map.get(chart));
    map.delete(chart);
  },
  beforeUpdate(chart, _args, options) {
    const title = map.get(chart);
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "normal"
    },
    fullSize: true,
    padding: 0,
    position: "top",
    text: "",
    weight: 1500
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
const positioners = {
  average(items) {
    if (!items.length) {
      return false;
    }
    let i2, len;
    let x2 = 0;
    let y3 = 0;
    let count = 0;
    for (i2 = 0, len = items.length; i2 < len; ++i2) {
      const el = items[i2].element;
      if (el && el.hasValue()) {
        const pos = el.tooltipPosition();
        x2 += pos.x;
        y3 += pos.y;
        ++count;
      }
    }
    return {
      x: x2 / count,
      y: y3 / count
    };
  },
  nearest(items, eventPosition) {
    if (!items.length) {
      return false;
    }
    let x2 = eventPosition.x;
    let y3 = eventPosition.y;
    let minDistance = Number.POSITIVE_INFINITY;
    let i2, len, nearestElement;
    for (i2 = 0, len = items.length; i2 < len; ++i2) {
      const el = items[i2].element;
      if (el && el.hasValue()) {
        const center = el.getCenterPoint();
        const d3 = distanceBetweenPoints(eventPosition, center);
        if (d3 < minDistance) {
          minDistance = d3;
          nearestElement = el;
        }
      }
    }
    if (nearestElement) {
      const tp = nearestElement.tooltipPosition();
      x2 = tp.x;
      y3 = tp.y;
    }
    return {
      x: x2,
      y: y3
    };
  }
};
function pushOrConcat(base2, toPush) {
  if (toPush) {
    if (isArray(toPush)) {
      Array.prototype.push.apply(base2, toPush);
    } else {
      base2.push(toPush);
    }
  }
  return base2;
}
function splitNewlines(str) {
  if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
    return str.split("\n");
  }
  return str;
}
function createTooltipItem(chart, item) {
  const { element: element2, datasetIndex, index: index2 } = item;
  const controller = chart.getDatasetMeta(datasetIndex).controller;
  const { label, value } = controller.getLabelAndValue(index2);
  return {
    chart,
    label,
    parsed: controller.getParsed(index2),
    raw: chart.data.datasets[datasetIndex].data[index2],
    formattedValue: value,
    dataset: controller.getDataset(),
    dataIndex: index2,
    datasetIndex,
    element: element2
  };
}
function getTooltipSize(tooltip, options) {
  const ctx = tooltip.chart.ctx;
  const { body, footer, title } = tooltip;
  const { boxWidth, boxHeight } = options;
  const bodyFont = toFont(options.bodyFont);
  const titleFont = toFont(options.titleFont);
  const footerFont = toFont(options.footerFont);
  const titleLineCount = title.length;
  const footerLineCount = footer.length;
  const bodyLineItemCount = body.length;
  const padding = toPadding(options.padding);
  let height = padding.height;
  let width = 0;
  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
  if (titleLineCount) {
    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
  }
  if (combinedBodyLength) {
    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
  }
  if (footerLineCount) {
    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
  }
  let widthPadding = 0;
  const maxLineWidth = function(line) {
    width = Math.max(width, ctx.measureText(line).width + widthPadding);
  };
  ctx.save();
  ctx.font = titleFont.string;
  each(tooltip.title, maxLineWidth);
  ctx.font = bodyFont.string;
  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
  each(body, (bodyItem) => {
    each(bodyItem.before, maxLineWidth);
    each(bodyItem.lines, maxLineWidth);
    each(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = footerFont.string;
  each(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += padding.width;
  return {
    width,
    height
  };
}
function determineYAlign(chart, size) {
  const { y: y3, height } = size;
  if (y3 < height / 2) {
    return "top";
  } else if (y3 > chart.height - height / 2) {
    return "bottom";
  }
  return "center";
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
  const { x: x2, width } = size;
  const caret = options.caretSize + options.caretPadding;
  if (xAlign === "left" && x2 + width + caret > chart.width) {
    return true;
  }
  if (xAlign === "right" && x2 - width - caret < 0) {
    return true;
  }
}
function determineXAlign(chart, options, size, yAlign) {
  const { x: x2, width } = size;
  const { width: chartWidth, chartArea: { left, right } } = chart;
  let xAlign = "center";
  if (yAlign === "center") {
    xAlign = x2 <= (left + right) / 2 ? "left" : "right";
  } else if (x2 <= width / 2) {
    xAlign = "left";
  } else if (x2 >= chartWidth - width / 2) {
    xAlign = "right";
  }
  if (doesNotFitWithAlign(xAlign, chart, options, size)) {
    xAlign = "center";
  }
  return xAlign;
}
function determineAlignment(chart, options, size) {
  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
  return {
    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
    yAlign
  };
}
function alignX(size, xAlign) {
  let { x: x2, width } = size;
  if (xAlign === "right") {
    x2 -= width;
  } else if (xAlign === "center") {
    x2 -= width / 2;
  }
  return x2;
}
function alignY(size, yAlign, paddingAndSize) {
  let { y: y3, height } = size;
  if (yAlign === "top") {
    y3 += paddingAndSize;
  } else if (yAlign === "bottom") {
    y3 -= height + paddingAndSize;
  } else {
    y3 -= height / 2;
  }
  return y3;
}
function getBackgroundPoint(options, size, alignment, chart) {
  const { caretSize, caretPadding, cornerRadius } = options;
  const { xAlign, yAlign } = alignment;
  const paddingAndSize = caretSize + caretPadding;
  const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
  let x2 = alignX(size, xAlign);
  const y3 = alignY(size, yAlign, paddingAndSize);
  if (yAlign === "center") {
    if (xAlign === "left") {
      x2 += paddingAndSize;
    } else if (xAlign === "right") {
      x2 -= paddingAndSize;
    }
  } else if (xAlign === "left") {
    x2 -= Math.max(topLeft, bottomLeft) + caretSize;
  } else if (xAlign === "right") {
    x2 += Math.max(topRight, bottomRight) + caretSize;
  }
  return {
    x: _limitValue(x2, 0, chart.width - size.width),
    y: _limitValue(y3, 0, chart.height - size.height)
  };
}
function getAlignedX(tooltip, align, options) {
  const padding = toPadding(options.padding);
  return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback2) {
  return pushOrConcat([], splitNewlines(callback2));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
  return createContext(parent, {
    tooltip,
    tooltipItems,
    type: "tooltip"
  });
}
function overrideCallbacks(callbacks, context) {
  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
  return override ? callbacks.override(override) : callbacks;
}
const defaultCallbacks = {
  beforeTitle: noop,
  title(tooltipItems) {
    if (tooltipItems.length > 0) {
      const item = tooltipItems[0];
      const labels = item.chart.data.labels;
      const labelCount = labels ? labels.length : 0;
      if (this && this.options && this.options.mode === "dataset") {
        return item.dataset.label || "";
      } else if (item.label) {
        return item.label;
      } else if (labelCount > 0 && item.dataIndex < labelCount) {
        return labels[item.dataIndex];
      }
    }
    return "";
  },
  afterTitle: noop,
  beforeBody: noop,
  beforeLabel: noop,
  label(tooltipItem) {
    if (this && this.options && this.options.mode === "dataset") {
      return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
    }
    let label = tooltipItem.dataset.label || "";
    if (label) {
      label += ": ";
    }
    const value = tooltipItem.formattedValue;
    if (!isNullOrUndef(value)) {
      label += value;
    }
    return label;
  },
  labelColor(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      borderColor: options.borderColor,
      backgroundColor: options.backgroundColor,
      borderWidth: options.borderWidth,
      borderDash: options.borderDash,
      borderDashOffset: options.borderDashOffset,
      borderRadius: 0
    };
  },
  labelTextColor() {
    return this.options.bodyColor;
  },
  labelPointStyle(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      pointStyle: options.pointStyle,
      rotation: options.rotation
    };
  },
  afterLabel: noop,
  afterBody: noop,
  beforeFooter: noop,
  footer: noop,
  afterFooter: noop
};
function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
  const result = callbacks[name].call(ctx, arg);
  if (typeof result === "undefined") {
    return defaultCallbacks[name].call(ctx, arg);
  }
  return result;
}
class Tooltip extends Element$1 {
  constructor(config) {
    super();
    this.opacity = 0;
    this._active = [];
    this._eventPosition = void 0;
    this._size = void 0;
    this._cachedAnimations = void 0;
    this._tooltipItems = [];
    this.$animations = void 0;
    this.$context = void 0;
    this.chart = config.chart;
    this.options = config.options;
    this.dataPoints = void 0;
    this.title = void 0;
    this.beforeBody = void 0;
    this.body = void 0;
    this.afterBody = void 0;
    this.footer = void 0;
    this.xAlign = void 0;
    this.yAlign = void 0;
    this.x = void 0;
    this.y = void 0;
    this.height = void 0;
    this.width = void 0;
    this.caretX = void 0;
    this.caretY = void 0;
    this.labelColors = void 0;
    this.labelPointStyles = void 0;
    this.labelTextColors = void 0;
  }
  initialize(options) {
    this.options = options;
    this._cachedAnimations = void 0;
    this.$context = void 0;
  }
  _resolveAnimations() {
    const cached = this._cachedAnimations;
    if (cached) {
      return cached;
    }
    const chart = this.chart;
    const options = this.options.setContext(this.getContext());
    const opts = options.enabled && chart.options.animation && options.animations;
    const animations = new Animations(this.chart, opts);
    if (opts._cacheable) {
      this._cachedAnimations = Object.freeze(animations);
    }
    return animations;
  }
  getContext() {
    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
  }
  getTitle(context, options) {
    const { callbacks } = options;
    const beforeTitle = invokeCallbackWithFallback(callbacks, "beforeTitle", this, context);
    const title = invokeCallbackWithFallback(callbacks, "title", this, context);
    const afterTitle = invokeCallbackWithFallback(callbacks, "afterTitle", this, context);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    lines = pushOrConcat(lines, splitNewlines(title));
    lines = pushOrConcat(lines, splitNewlines(afterTitle));
    return lines;
  }
  getBeforeBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "beforeBody", this, tooltipItems));
  }
  getBody(tooltipItems, options) {
    const { callbacks } = options;
    const bodyItems = [];
    each(tooltipItems, (context) => {
      const bodyItem = {
        before: [],
        lines: [],
        after: []
      };
      const scoped = overrideCallbacks(callbacks, context);
      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, "beforeLabel", this, context)));
      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, "label", this, context));
      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, "afterLabel", this, context)));
      bodyItems.push(bodyItem);
    });
    return bodyItems;
  }
  getAfterBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "afterBody", this, tooltipItems));
  }
  getFooter(tooltipItems, options) {
    const { callbacks } = options;
    const beforeFooter = invokeCallbackWithFallback(callbacks, "beforeFooter", this, tooltipItems);
    const footer = invokeCallbackWithFallback(callbacks, "footer", this, tooltipItems);
    const afterFooter = invokeCallbackWithFallback(callbacks, "afterFooter", this, tooltipItems);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    lines = pushOrConcat(lines, splitNewlines(footer));
    lines = pushOrConcat(lines, splitNewlines(afterFooter));
    return lines;
  }
  _createItems(options) {
    const active = this._active;
    const data = this.chart.data;
    const labelColors = [];
    const labelPointStyles = [];
    const labelTextColors = [];
    let tooltipItems = [];
    let i2, len;
    for (i2 = 0, len = active.length; i2 < len; ++i2) {
      tooltipItems.push(createTooltipItem(this.chart, active[i2]));
    }
    if (options.filter) {
      tooltipItems = tooltipItems.filter((element2, index2, array) => options.filter(element2, index2, array, data));
    }
    if (options.itemSort) {
      tooltipItems = tooltipItems.sort((a3, b2) => options.itemSort(a3, b2, data));
    }
    each(tooltipItems, (context) => {
      const scoped = overrideCallbacks(options.callbacks, context);
      labelColors.push(invokeCallbackWithFallback(scoped, "labelColor", this, context));
      labelPointStyles.push(invokeCallbackWithFallback(scoped, "labelPointStyle", this, context));
      labelTextColors.push(invokeCallbackWithFallback(scoped, "labelTextColor", this, context));
    });
    this.labelColors = labelColors;
    this.labelPointStyles = labelPointStyles;
    this.labelTextColors = labelTextColors;
    this.dataPoints = tooltipItems;
    return tooltipItems;
  }
  update(changed, replay) {
    const options = this.options.setContext(this.getContext());
    const active = this._active;
    let properties;
    let tooltipItems = [];
    if (!active.length) {
      if (this.opacity !== 0) {
        properties = {
          opacity: 0
        };
      }
    } else {
      const position = positioners[options.position].call(this, active, this._eventPosition);
      tooltipItems = this._createItems(options);
      this.title = this.getTitle(tooltipItems, options);
      this.beforeBody = this.getBeforeBody(tooltipItems, options);
      this.body = this.getBody(tooltipItems, options);
      this.afterBody = this.getAfterBody(tooltipItems, options);
      this.footer = this.getFooter(tooltipItems, options);
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, size);
      const alignment = determineAlignment(this.chart, options, positionAndSize);
      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
      this.xAlign = alignment.xAlign;
      this.yAlign = alignment.yAlign;
      properties = {
        opacity: 1,
        x: backgroundPoint.x,
        y: backgroundPoint.y,
        width: size.width,
        height: size.height,
        caretX: position.x,
        caretY: position.y
      };
    }
    this._tooltipItems = tooltipItems;
    this.$context = void 0;
    if (properties) {
      this._resolveAnimations().update(this, properties);
    }
    if (changed && options.external) {
      options.external.call(this, {
        chart: this.chart,
        tooltip: this,
        replay
      });
    }
  }
  drawCaret(tooltipPoint, ctx, size, options) {
    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
    ctx.lineTo(caretPosition.x1, caretPosition.y1);
    ctx.lineTo(caretPosition.x2, caretPosition.y2);
    ctx.lineTo(caretPosition.x3, caretPosition.y3);
  }
  getCaretPosition(tooltipPoint, size, options) {
    const { xAlign, yAlign } = this;
    const { caretSize, cornerRadius } = options;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
    const { x: ptX, y: ptY } = tooltipPoint;
    const { width, height } = size;
    let x1, x2, x3, y1, y22, y3;
    if (yAlign === "center") {
      y22 = ptY + height / 2;
      if (xAlign === "left") {
        x1 = ptX;
        x2 = x1 - caretSize;
        y1 = y22 + caretSize;
        y3 = y22 - caretSize;
      } else {
        x1 = ptX + width;
        x2 = x1 + caretSize;
        y1 = y22 - caretSize;
        y3 = y22 + caretSize;
      }
      x3 = x1;
    } else {
      if (xAlign === "left") {
        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
      } else if (xAlign === "right") {
        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
      } else {
        x2 = this.caretX;
      }
      if (yAlign === "top") {
        y1 = ptY;
        y22 = y1 - caretSize;
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
      } else {
        y1 = ptY + height;
        y22 = y1 + caretSize;
        x1 = x2 + caretSize;
        x3 = x2 - caretSize;
      }
      y3 = y1;
    }
    return {
      x1,
      x2,
      x3,
      y1,
      y2: y22,
      y3
    };
  }
  drawTitle(pt, ctx, options) {
    const title = this.title;
    const length = title.length;
    let titleFont, titleSpacing, i2;
    if (length) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.titleAlign, options);
      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
      ctx.textBaseline = "middle";
      titleFont = toFont(options.titleFont);
      titleSpacing = options.titleSpacing;
      ctx.fillStyle = options.titleColor;
      ctx.font = titleFont.string;
      for (i2 = 0; i2 < length; ++i2) {
        ctx.fillText(title[i2], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
        pt.y += titleFont.lineHeight + titleSpacing;
        if (i2 + 1 === length) {
          pt.y += options.titleMarginBottom - titleSpacing;
        }
      }
    }
  }
  _drawColorBox(ctx, pt, i2, rtlHelper, options) {
    const labelColor = this.labelColors[i2];
    const labelPointStyle = this.labelPointStyles[i2];
    const { boxHeight, boxWidth } = options;
    const bodyFont = toFont(options.bodyFont);
    const colorX = getAlignedX(this, "left", options);
    const rtlColorX = rtlHelper.x(colorX);
    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
    const colorY = pt.y + yOffSet;
    if (options.usePointStyle) {
      const drawOptions = {
        radius: Math.min(boxWidth, boxHeight) / 2,
        pointStyle: labelPointStyle.pointStyle,
        rotation: labelPointStyle.rotation,
        borderWidth: 1
      };
      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
      const centerY = colorY + boxHeight / 2;
      ctx.strokeStyle = options.multiKeyBackground;
      ctx.fillStyle = options.multiKeyBackground;
      drawPoint(ctx, drawOptions, centerX, centerY);
      ctx.strokeStyle = labelColor.borderColor;
      ctx.fillStyle = labelColor.backgroundColor;
      drawPoint(ctx, drawOptions, centerX, centerY);
    } else {
      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
      ctx.strokeStyle = labelColor.borderColor;
      ctx.setLineDash(labelColor.borderDash || []);
      ctx.lineDashOffset = labelColor.borderDashOffset || 0;
      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
      const borderRadius = toTRBLCorners(labelColor.borderRadius);
      if (Object.values(borderRadius).some((v) => v !== 0)) {
        ctx.beginPath();
        ctx.fillStyle = options.multiKeyBackground;
        addRoundedRectPath(ctx, {
          x: outerX,
          y: colorY,
          w: boxWidth,
          h: boxHeight,
          radius: borderRadius
        });
        ctx.fill();
        ctx.stroke();
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.beginPath();
        addRoundedRectPath(ctx, {
          x: innerX,
          y: colorY + 1,
          w: boxWidth - 2,
          h: boxHeight - 2,
          radius: borderRadius
        });
        ctx.fill();
      } else {
        ctx.fillStyle = options.multiKeyBackground;
        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
      }
    }
    ctx.fillStyle = this.labelTextColors[i2];
  }
  drawBody(pt, ctx, options) {
    const { body } = this;
    const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options;
    const bodyFont = toFont(options.bodyFont);
    let bodyLineHeight = bodyFont.lineHeight;
    let xLinePadding = 0;
    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
    const fillLineOfText = function(line) {
      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
      pt.y += bodyLineHeight + bodySpacing;
    };
    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
    let bodyItem, textColor, lines, i2, j, ilen, jlen;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = "middle";
    ctx.font = bodyFont.string;
    pt.x = getAlignedX(this, bodyAlignForCalculation, options);
    ctx.fillStyle = options.bodyColor;
    each(this.beforeBody, fillLineOfText);
    xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
    for (i2 = 0, ilen = body.length; i2 < ilen; ++i2) {
      bodyItem = body[i2];
      textColor = this.labelTextColors[i2];
      ctx.fillStyle = textColor;
      each(bodyItem.before, fillLineOfText);
      lines = bodyItem.lines;
      if (displayColors && lines.length) {
        this._drawColorBox(ctx, pt, i2, rtlHelper, options);
        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
      }
      for (j = 0, jlen = lines.length; j < jlen; ++j) {
        fillLineOfText(lines[j]);
        bodyLineHeight = bodyFont.lineHeight;
      }
      each(bodyItem.after, fillLineOfText);
    }
    xLinePadding = 0;
    bodyLineHeight = bodyFont.lineHeight;
    each(this.afterBody, fillLineOfText);
    pt.y -= bodySpacing;
  }
  drawFooter(pt, ctx, options) {
    const footer = this.footer;
    const length = footer.length;
    let footerFont, i2;
    if (length) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.footerAlign, options);
      pt.y += options.footerMarginTop;
      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
      ctx.textBaseline = "middle";
      footerFont = toFont(options.footerFont);
      ctx.fillStyle = options.footerColor;
      ctx.font = footerFont.string;
      for (i2 = 0; i2 < length; ++i2) {
        ctx.fillText(footer[i2], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
        pt.y += footerFont.lineHeight + options.footerSpacing;
      }
    }
  }
  drawBackground(pt, ctx, tooltipSize, options) {
    const { xAlign, yAlign } = this;
    const { x: x2, y: y3 } = pt;
    const { width, height } = tooltipSize;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(options.cornerRadius);
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.beginPath();
    ctx.moveTo(x2 + topLeft, y3);
    if (yAlign === "top") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + width - topRight, y3);
    ctx.quadraticCurveTo(x2 + width, y3, x2 + width, y3 + topRight);
    if (yAlign === "center" && xAlign === "right") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + width, y3 + height - bottomRight);
    ctx.quadraticCurveTo(x2 + width, y3 + height, x2 + width - bottomRight, y3 + height);
    if (yAlign === "bottom") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + bottomLeft, y3 + height);
    ctx.quadraticCurveTo(x2, y3 + height, x2, y3 + height - bottomLeft);
    if (yAlign === "center" && xAlign === "left") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2, y3 + topLeft);
    ctx.quadraticCurveTo(x2, y3, x2 + topLeft, y3);
    ctx.closePath();
    ctx.fill();
    if (options.borderWidth > 0) {
      ctx.stroke();
    }
  }
  _updateAnimationTarget(options) {
    const chart = this.chart;
    const anims = this.$animations;
    const animX = anims && anims.x;
    const animY = anims && anims.y;
    if (animX || animY) {
      const position = positioners[options.position].call(this, this._active, this._eventPosition);
      if (!position) {
        return;
      }
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, this._size);
      const alignment = determineAlignment(chart, options, positionAndSize);
      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
      if (animX._to !== point.x || animY._to !== point.y) {
        this.xAlign = alignment.xAlign;
        this.yAlign = alignment.yAlign;
        this.width = size.width;
        this.height = size.height;
        this.caretX = position.x;
        this.caretY = position.y;
        this._resolveAnimations().update(this, point);
      }
    }
  }
  _willRender() {
    return !!this.opacity;
  }
  draw(ctx) {
    const options = this.options.setContext(this.getContext());
    let opacity = this.opacity;
    if (!opacity) {
      return;
    }
    this._updateAnimationTarget(options);
    const tooltipSize = {
      width: this.width,
      height: this.height
    };
    const pt = {
      x: this.x,
      y: this.y
    };
    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
    const padding = toPadding(options.padding);
    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
    if (options.enabled && hasTooltipContent) {
      ctx.save();
      ctx.globalAlpha = opacity;
      this.drawBackground(pt, ctx, tooltipSize, options);
      overrideTextDirection(ctx, options.textDirection);
      pt.y += padding.top;
      this.drawTitle(pt, ctx, options);
      this.drawBody(pt, ctx, options);
      this.drawFooter(pt, ctx, options);
      restoreTextDirection(ctx, options.textDirection);
      ctx.restore();
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements, eventPosition) {
    const lastActive = this._active;
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.chart.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("Cannot find a dataset at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(lastActive, active);
    const positionChanged = this._positionChanged(active, eventPosition);
    if (changed || positionChanged) {
      this._active = active;
      this._eventPosition = eventPosition;
      this._ignoreReplayEvents = true;
      this.update(true);
    }
  }
  handleEvent(e2, replay, inChartArea = true) {
    if (replay && this._ignoreReplayEvents) {
      return false;
    }
    this._ignoreReplayEvents = false;
    const options = this.options;
    const lastActive = this._active || [];
    const active = this._getActiveElements(e2, lastActive, replay, inChartArea);
    const positionChanged = this._positionChanged(active, e2);
    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
    if (changed) {
      this._active = active;
      if (options.enabled || options.external) {
        this._eventPosition = {
          x: e2.x,
          y: e2.y
        };
        this.update(true, replay);
      }
    }
    return changed;
  }
  _getActiveElements(e2, lastActive, replay, inChartArea) {
    const options = this.options;
    if (e2.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const active = this.chart.getElementsAtEventForMode(e2, options.mode, options, replay);
    if (options.reverse) {
      active.reverse();
    }
    return active;
  }
  _positionChanged(active, e2) {
    const { caretX, caretY, options } = this;
    const position = positioners[options.position].call(this, active, e2);
    return position !== false && (caretX !== position.x || caretY !== position.y);
  }
}
__publicField(Tooltip, "positioners", positioners);
var plugin_tooltip = {
  id: "tooltip",
  _element: Tooltip,
  positioners,
  afterInit(chart, _args, options) {
    if (options) {
      chart.tooltip = new Tooltip({
        chart,
        options
      });
    }
  },
  beforeUpdate(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  reset(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  afterDraw(chart) {
    const tooltip = chart.tooltip;
    if (tooltip && tooltip._willRender()) {
      const args = {
        tooltip
      };
      if (chart.notifyPlugins("beforeTooltipDraw", {
        ...args,
        cancelable: true
      }) === false) {
        return;
      }
      tooltip.draw(chart.ctx);
      chart.notifyPlugins("afterTooltipDraw", args);
    }
  },
  afterEvent(chart, args) {
    if (chart.tooltip) {
      const useFinalPosition = args.replay;
      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
        args.changed = true;
      }
    }
  },
  defaults: {
    enabled: true,
    external: null,
    position: "average",
    backgroundColor: "rgba(0,0,0,0.8)",
    titleColor: "#fff",
    titleFont: {
      weight: "bold"
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: "left",
    bodyColor: "#fff",
    bodySpacing: 2,
    bodyFont: {},
    bodyAlign: "left",
    footerColor: "#fff",
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: "bold"
    },
    footerAlign: "left",
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (ctx, opts) => opts.bodyFont.size,
    boxWidth: (ctx, opts) => opts.bodyFont.size,
    multiKeyBackground: "#fff",
    displayColors: true,
    boxPadding: 0,
    borderColor: "rgba(0,0,0,0)",
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: "easeOutQuart"
    },
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "width",
          "height",
          "caretX",
          "caretY"
        ]
      },
      opacity: {
        easing: "linear",
        duration: 200
      }
    },
    callbacks: defaultCallbacks
  },
  defaultRoutes: {
    bodyFont: "font",
    footerFont: "font",
    titleFont: "font"
  },
  descriptors: {
    _scriptable: (name) => name !== "filter" && name !== "itemSort" && name !== "external",
    _indexable: false,
    callbacks: {
      _scriptable: false,
      _indexable: false
    },
    animation: {
      _fallback: false
    },
    animations: {
      _fallback: "animation"
    }
  },
  additionalOptionScopes: [
    "interaction"
  ]
};
var plugins = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  Colors: plugin_colors,
  Decimation: plugin_decimation,
  Filler: index,
  Legend: plugin_legend,
  SubTitle: plugin_subtitle,
  Title: plugin_title,
  Tooltip: plugin_tooltip
});
const addIfString = (labels, raw, index2, addedLabels) => {
  if (typeof raw === "string") {
    index2 = labels.push(raw) - 1;
    addedLabels.unshift({
      index: index2,
      label: raw
    });
  } else if (isNaN(raw)) {
    index2 = null;
  }
  return index2;
};
function findOrAddLabel(labels, raw, index2, addedLabels) {
  const first = labels.indexOf(raw);
  if (first === -1) {
    return addIfString(labels, raw, index2, addedLabels);
  }
  const last = labels.lastIndexOf(raw);
  return first !== last ? index2 : first;
}
const validIndex = (index2, max) => index2 === null ? null : _limitValue(Math.round(index2), 0, max);
function _getLabelForValue(value) {
  const labels = this.getLabels();
  if (value >= 0 && value < labels.length) {
    return labels[value];
  }
  return value;
}
class CategoryScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this._startValue = void 0;
    this._valueRange = 0;
    this._addedLabels = [];
  }
  init(scaleOptions) {
    const added = this._addedLabels;
    if (added.length) {
      const labels = this.getLabels();
      for (const { index: index2, label } of added) {
        if (labels[index2] === label) {
          labels.splice(index2, 1);
        }
      }
      this._addedLabels = [];
    }
    super.init(scaleOptions);
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    const labels = this.getLabels();
    index2 = isFinite(index2) && labels[index2] === raw ? index2 : findOrAddLabel(labels, raw, valueOrDefault(index2, raw), this._addedLabels);
    return validIndex(index2, labels.length - 1);
  }
  determineDataLimits() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this.getMinMax(true);
    if (this.options.bounds === "ticks") {
      if (!minDefined) {
        min = 0;
      }
      if (!maxDefined) {
        max = this.getLabels().length - 1;
      }
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const min = this.min;
    const max = this.max;
    const offset = this.options.offset;
    const ticks = [];
    let labels = this.getLabels();
    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
    this._startValue = this.min - (offset ? 0.5 : 0);
    for (let value = min; value <= max; value++) {
      ticks.push({
        value
      });
    }
    return ticks;
  }
  getLabelForValue(value) {
    return _getLabelForValue.call(this, value);
  }
  configure() {
    super.configure();
    if (!this.isHorizontal()) {
      this._reversePixels = !this._reversePixels;
    }
  }
  getPixelForValue(value) {
    if (typeof value !== "number") {
      value = this.parse(value);
    }
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getValueForPixel(pixel) {
    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
  }
  getBasePixel() {
    return this.bottom;
  }
}
__publicField(CategoryScale, "id", "category");
__publicField(CategoryScale, "defaults", {
  ticks: {
    callback: _getLabelForValue
  }
});
function generateTicks$1(generationOptions, dataRange) {
  const ticks = [];
  const MIN_SPACING = 1e-14;
  const { bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
  const unit = step || 1;
  const maxSpaces = maxTicks - 1;
  const { min: rmin, max: rmax } = dataRange;
  const minDefined = !isNullOrUndef(min);
  const maxDefined = !isNullOrUndef(max);
  const countDefined = !isNullOrUndef(count);
  const minSpacing = (rmax - rmin) / (maxDigits + 1);
  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
  let factor, niceMin, niceMax, numSpaces;
  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
    return [
      {
        value: rmin
      },
      {
        value: rmax
      }
    ];
  }
  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
  if (numSpaces > maxSpaces) {
    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
  }
  if (!isNullOrUndef(precision)) {
    factor = Math.pow(10, precision);
    spacing = Math.ceil(spacing * factor) / factor;
  }
  if (bounds === "ticks") {
    niceMin = Math.floor(rmin / spacing) * spacing;
    niceMax = Math.ceil(rmax / spacing) * spacing;
  } else {
    niceMin = rmin;
    niceMax = rmax;
  }
  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1e3)) {
    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
    spacing = (max - min) / numSpaces;
    niceMin = min;
    niceMax = max;
  } else if (countDefined) {
    niceMin = minDefined ? min : niceMin;
    niceMax = maxDefined ? max : niceMax;
    numSpaces = count - 1;
    spacing = (niceMax - niceMin) / numSpaces;
  } else {
    numSpaces = (niceMax - niceMin) / spacing;
    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1e3)) {
      numSpaces = Math.round(numSpaces);
    } else {
      numSpaces = Math.ceil(numSpaces);
    }
  }
  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));
  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  let j = 0;
  if (minDefined) {
    if (includeBounds && niceMin !== min) {
      ticks.push({
        value: min
      });
      if (niceMin < min) {
        j++;
      }
      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
        j++;
      }
    } else if (niceMin < min) {
      j++;
    }
  }
  for (; j < numSpaces; ++j) {
    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;
    if (maxDefined && tickValue > max) {
      break;
    }
    ticks.push({
      value: tickValue
    });
  }
  if (maxDefined && includeBounds && niceMax !== max) {
    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
      ticks[ticks.length - 1].value = max;
    } else {
      ticks.push({
        value: max
      });
    }
  } else if (!maxDefined || niceMax === max) {
    ticks.push({
      value: niceMax
    });
  }
  return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
  const rad = toRadians(minRotation);
  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 1e-3;
  const length = 0.75 * minSpacing * ("" + value).length;
  return Math.min(minSpacing / ratio, length);
}
class LinearScaleBase extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._endValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) {
      return null;
    }
    return +raw;
  }
  handleTickRangeOptions() {
    const { beginAtZero } = this.options;
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this;
    const setMin = (v) => min = minDefined ? min : v;
    const setMax = (v) => max = maxDefined ? max : v;
    if (beginAtZero) {
      const minSign = sign(min);
      const maxSign = sign(max);
      if (minSign < 0 && maxSign < 0) {
        setMax(0);
      } else if (minSign > 0 && maxSign > 0) {
        setMin(0);
      }
    }
    if (min === max) {
      let offset = max === 0 ? 1 : Math.abs(max * 0.05);
      setMax(max + offset);
      if (!beginAtZero) {
        setMin(min - offset);
      }
    }
    this.min = min;
    this.max = max;
  }
  getTickLimit() {
    const tickOpts = this.options.ticks;
    let { maxTicksLimit, stepSize } = tickOpts;
    let maxTicks;
    if (stepSize) {
      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
      if (maxTicks > 1e3) {
        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
        maxTicks = 1e3;
      }
    } else {
      maxTicks = this.computeTickLimit();
      maxTicksLimit = maxTicksLimit || 11;
    }
    if (maxTicksLimit) {
      maxTicks = Math.min(maxTicksLimit, maxTicks);
    }
    return maxTicks;
  }
  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }
  buildTicks() {
    const opts = this.options;
    const tickOpts = opts.ticks;
    let maxTicks = this.getTickLimit();
    maxTicks = Math.max(2, maxTicks);
    const numericGeneratorOptions = {
      maxTicks,
      bounds: opts.bounds,
      min: opts.min,
      max: opts.max,
      precision: tickOpts.precision,
      step: tickOpts.stepSize,
      count: tickOpts.count,
      maxDigits: this._maxDigits(),
      horizontal: this.isHorizontal(),
      minRotation: tickOpts.minRotation || 0,
      includeBounds: tickOpts.includeBounds !== false
    };
    const dataRange = this._range || this;
    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  configure() {
    const ticks = this.ticks;
    let start = this.min;
    let end = this.max;
    super.configure();
    if (this.options.offset && ticks.length) {
      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
      start -= offset;
      end += offset;
    }
    this._startValue = start;
    this._endValue = end;
    this._valueRange = end - start;
  }
  getLabelForValue(value) {
    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
}
class LinearScale extends LinearScaleBase {
  determineDataLimits() {
    const { min, max } = this.getMinMax(true);
    this.min = isNumberFinite(min) ? min : 0;
    this.max = isNumberFinite(max) ? max : 1;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    const horizontal = this.isHorizontal();
    const length = horizontal ? this.width : this.height;
    const minRotation = toRadians(this.options.ticks.minRotation);
    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 1e-3;
    const tickFont = this._resolveTickFontOptions(0);
    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
  }
  getPixelForValue(value) {
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
  }
}
__publicField(LinearScale, "id", "linear");
__publicField(LinearScale, "defaults", {
  ticks: {
    callback: Ticks.formatters.numeric
  }
});
const log10Floor = (v) => Math.floor(log10(v));
const changeExponent = (v, m3) => Math.pow(10, log10Floor(v) + m3);
function isMajor(tickVal) {
  const remain = tickVal / Math.pow(10, log10Floor(tickVal));
  return remain === 1;
}
function steps(min, max, rangeExp) {
  const rangeStep = Math.pow(10, rangeExp);
  const start = Math.floor(min / rangeStep);
  const end = Math.ceil(max / rangeStep);
  return end - start;
}
function startExp(min, max) {
  const range = max - min;
  let rangeExp = log10Floor(range);
  while (steps(min, max, rangeExp) > 10) {
    rangeExp++;
  }
  while (steps(min, max, rangeExp) < 10) {
    rangeExp--;
  }
  return Math.min(rangeExp, log10Floor(min));
}
function generateTicks(generationOptions, { min, max }) {
  min = finiteOrDefault(generationOptions.min, min);
  const ticks = [];
  const minExp = log10Floor(min);
  let exp = startExp(min, max);
  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
  const stepSize = Math.pow(10, exp);
  const base2 = minExp > exp ? Math.pow(10, minExp) : 0;
  const start = Math.round((min - base2) * precision) / precision;
  const offset = Math.floor((min - base2) / stepSize / 10) * stepSize * 10;
  let significand = Math.floor((start - offset) / Math.pow(10, exp));
  let value = finiteOrDefault(generationOptions.min, Math.round((base2 + offset + significand * Math.pow(10, exp)) * precision) / precision);
  while (value < max) {
    ticks.push({
      value,
      major: isMajor(value),
      significand
    });
    if (significand >= 10) {
      significand = significand < 15 ? 15 : 20;
    } else {
      significand++;
    }
    if (significand >= 20) {
      exp++;
      significand = 2;
      precision = exp >= 0 ? 1 : precision;
    }
    value = Math.round((base2 + offset + significand * Math.pow(10, exp)) * precision) / precision;
  }
  const lastTick = finiteOrDefault(generationOptions.max, value);
  ticks.push({
    value: lastTick,
    major: isMajor(lastTick),
    significand
  });
  return ticks;
}
class LogarithmicScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index2) {
    const value = LinearScaleBase.prototype.parse.apply(this, [
      raw,
      index2
    ]);
    if (value === 0) {
      this._zero = true;
      return void 0;
    }
    return isNumberFinite(value) && value > 0 ? value : null;
  }
  determineDataLimits() {
    const { min, max } = this.getMinMax(true);
    this.min = isNumberFinite(min) ? Math.max(0, min) : null;
    this.max = isNumberFinite(max) ? Math.max(0, max) : null;
    if (this.options.beginAtZero) {
      this._zero = true;
    }
    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {
      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
    }
    this.handleTickRangeOptions();
  }
  handleTickRangeOptions() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let min = this.min;
    let max = this.max;
    const setMin = (v) => min = minDefined ? min : v;
    const setMax = (v) => max = maxDefined ? max : v;
    if (min === max) {
      if (min <= 0) {
        setMin(1);
        setMax(10);
      } else {
        setMin(changeExponent(min, -1));
        setMax(changeExponent(max, 1));
      }
    }
    if (min <= 0) {
      setMin(changeExponent(max, -1));
    }
    if (max <= 0) {
      setMax(changeExponent(min, 1));
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const opts = this.options;
    const generationOptions = {
      min: this._userMin,
      max: this._userMax
    };
    const ticks = generateTicks(generationOptions, this);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  getLabelForValue(value) {
    return value === void 0 ? "0" : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
  configure() {
    const start = this.min;
    super.configure();
    this._startValue = log10(start);
    this._valueRange = log10(this.max) - log10(start);
  }
  getPixelForValue(value) {
    if (value === void 0 || value === 0) {
      value = this.min;
    }
    if (value === null || isNaN(value)) {
      return NaN;
    }
    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    const decimal = this.getDecimalForPixel(pixel);
    return Math.pow(10, this._startValue + decimal * this._valueRange);
  }
}
__publicField(LogarithmicScale, "id", "logarithmic");
__publicField(LogarithmicScale, "defaults", {
  ticks: {
    callback: Ticks.formatters.logarithmic,
    major: {
      enabled: true
    }
  }
});
function getTickBackdropHeight(opts) {
  const tickOpts = opts.ticks;
  if (tickOpts.display && opts.display) {
    const padding = toPadding(tickOpts.backdropPadding);
    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;
  }
  return 0;
}
function measureLabelSize(ctx, font, label) {
  label = isArray(label) ? label : [
    label
  ];
  return {
    w: _longestText(ctx, font.string, label),
    h: label.length * font.lineHeight
  };
}
function determineLimits(angle, pos, size, min, max) {
  if (angle === min || angle === max) {
    return {
      start: pos - size / 2,
      end: pos + size / 2
    };
  } else if (angle < min || angle > max) {
    return {
      start: pos - size,
      end: pos
    };
  }
  return {
    start: pos,
    end: pos + size
  };
}
function fitWithPointLabels(scale) {
  const orig = {
    l: scale.left + scale._padding.left,
    r: scale.right - scale._padding.right,
    t: scale.top + scale._padding.top,
    b: scale.bottom - scale._padding.bottom
  };
  const limits = Object.assign({}, orig);
  const labelSizes = [];
  const padding = [];
  const valueCount = scale._pointLabels.length;
  const pointLabelOpts = scale.options.pointLabels;
  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
  for (let i2 = 0; i2 < valueCount; i2++) {
    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i2));
    padding[i2] = opts.padding;
    const pointPosition = scale.getPointPosition(i2, scale.drawingArea + padding[i2], additionalAngle);
    const plFont = toFont(opts.font);
    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i2]);
    labelSizes[i2] = textSize;
    const angleRadians = _normalizeAngle(scale.getIndexAngle(i2) + additionalAngle);
    const angle = Math.round(toDegrees(angleRadians));
    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    updateLimits(limits, orig, angleRadians, hLimits, vLimits);
  }
  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
  const sin = Math.abs(Math.sin(angle));
  const cos = Math.abs(Math.cos(angle));
  let x2 = 0;
  let y3 = 0;
  if (hLimits.start < orig.l) {
    x2 = (orig.l - hLimits.start) / sin;
    limits.l = Math.min(limits.l, orig.l - x2);
  } else if (hLimits.end > orig.r) {
    x2 = (hLimits.end - orig.r) / sin;
    limits.r = Math.max(limits.r, orig.r + x2);
  }
  if (vLimits.start < orig.t) {
    y3 = (orig.t - vLimits.start) / cos;
    limits.t = Math.min(limits.t, orig.t - y3);
  } else if (vLimits.end > orig.b) {
    y3 = (vLimits.end - orig.b) / cos;
    limits.b = Math.max(limits.b, orig.b + y3);
  }
}
function createPointLabelItem(scale, index2, itemOpts) {
  const outerDistance = scale.drawingArea;
  const { extra, additionalAngle, padding, size } = itemOpts;
  const pointLabelPosition = scale.getPointPosition(index2, outerDistance + extra + padding, additionalAngle);
  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
  const y3 = yForAngle(pointLabelPosition.y, size.h, angle);
  const textAlign = getTextAlignForAngle(angle);
  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
  return {
    visible: true,
    x: pointLabelPosition.x,
    y: y3,
    textAlign,
    left,
    top: y3,
    right: left + size.w,
    bottom: y3 + size.h
  };
}
function isNotOverlapped(item, area) {
  if (!area) {
    return true;
  }
  const { left, top, right, bottom } = item;
  const apexesInArea = _isPointInArea({
    x: left,
    y: top
  }, area) || _isPointInArea({
    x: left,
    y: bottom
  }, area) || _isPointInArea({
    x: right,
    y: top
  }, area) || _isPointInArea({
    x: right,
    y: bottom
  }, area);
  return !apexesInArea;
}
function buildPointLabelItems(scale, labelSizes, padding) {
  const items = [];
  const valueCount = scale._pointLabels.length;
  const opts = scale.options;
  const { centerPointLabels, display } = opts.pointLabels;
  const itemOpts = {
    extra: getTickBackdropHeight(opts) / 2,
    additionalAngle: centerPointLabels ? PI / valueCount : 0
  };
  let area;
  for (let i2 = 0; i2 < valueCount; i2++) {
    itemOpts.padding = padding[i2];
    itemOpts.size = labelSizes[i2];
    const item = createPointLabelItem(scale, i2, itemOpts);
    items.push(item);
    if (display === "auto") {
      item.visible = isNotOverlapped(item, area);
      if (item.visible) {
        area = item;
      }
    }
  }
  return items;
}
function getTextAlignForAngle(angle) {
  if (angle === 0 || angle === 180) {
    return "center";
  } else if (angle < 180) {
    return "left";
  }
  return "right";
}
function leftForTextAlign(x2, w2, align) {
  if (align === "right") {
    x2 -= w2;
  } else if (align === "center") {
    x2 -= w2 / 2;
  }
  return x2;
}
function yForAngle(y3, h3, angle) {
  if (angle === 90 || angle === 270) {
    y3 -= h3 / 2;
  } else if (angle > 270 || angle < 90) {
    y3 -= h3;
  }
  return y3;
}
function drawPointLabelBox(ctx, opts, item) {
  const { left, top, right, bottom } = item;
  const { backdropColor } = opts;
  if (!isNullOrUndef(backdropColor)) {
    const borderRadius = toTRBLCorners(opts.borderRadius);
    const padding = toPadding(opts.backdropPadding);
    ctx.fillStyle = backdropColor;
    const backdropLeft = left - padding.left;
    const backdropTop = top - padding.top;
    const backdropWidth = right - left + padding.width;
    const backdropHeight = bottom - top + padding.height;
    if (Object.values(borderRadius).some((v) => v !== 0)) {
      ctx.beginPath();
      addRoundedRectPath(ctx, {
        x: backdropLeft,
        y: backdropTop,
        w: backdropWidth,
        h: backdropHeight,
        radius: borderRadius
      });
      ctx.fill();
    } else {
      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
    }
  }
}
function drawPointLabels(scale, labelCount) {
  const { ctx, options: { pointLabels } } = scale;
  for (let i2 = labelCount - 1; i2 >= 0; i2--) {
    const item = scale._pointLabelItems[i2];
    if (!item.visible) {
      continue;
    }
    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i2));
    drawPointLabelBox(ctx, optsAtIndex, item);
    const plFont = toFont(optsAtIndex.font);
    const { x: x2, y: y3, textAlign } = item;
    renderText(ctx, scale._pointLabels[i2], x2, y3 + plFont.lineHeight / 2, plFont, {
      color: optsAtIndex.color,
      textAlign,
      textBaseline: "middle"
    });
  }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
  const { ctx } = scale;
  if (circular) {
    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);
  } else {
    let pointPosition = scale.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);
    for (let i2 = 1; i2 < labelCount; i2++) {
      pointPosition = scale.getPointPosition(i2, radius);
      ctx.lineTo(pointPosition.x, pointPosition.y);
    }
  }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
  const ctx = scale.ctx;
  const circular = gridLineOpts.circular;
  const { color: color2, lineWidth } = gridLineOpts;
  if (!circular && !labelCount || !color2 || !lineWidth || radius < 0) {
    return;
  }
  ctx.save();
  ctx.strokeStyle = color2;
  ctx.lineWidth = lineWidth;
  ctx.setLineDash(borderOpts.dash);
  ctx.lineDashOffset = borderOpts.dashOffset;
  ctx.beginPath();
  pathRadiusLine(scale, radius, circular, labelCount);
  ctx.closePath();
  ctx.stroke();
  ctx.restore();
}
function createPointLabelContext(parent, index2, label) {
  return createContext(parent, {
    label,
    index: index2,
    type: "pointLabel"
  });
}
class RadialLinearScale extends LinearScaleBase {
  constructor(cfg) {
    super(cfg);
    this.xCenter = void 0;
    this.yCenter = void 0;
    this.drawingArea = void 0;
    this._pointLabels = [];
    this._pointLabelItems = [];
  }
  setDimensions() {
    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
    const w2 = this.width = this.maxWidth - padding.width;
    const h3 = this.height = this.maxHeight - padding.height;
    this.xCenter = Math.floor(this.left + w2 / 2 + padding.left);
    this.yCenter = Math.floor(this.top + h3 / 2 + padding.top);
    this.drawingArea = Math.floor(Math.min(w2, h3) / 2);
  }
  determineDataLimits() {
    const { min, max } = this.getMinMax(false);
    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;
    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
  }
  generateTickLabels(ticks) {
    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
    this._pointLabels = this.getLabels().map((value, index2) => {
      const label = callback(this.options.pointLabels.callback, [
        value,
        index2
      ], this);
      return label || label === 0 ? label : "";
    }).filter((v, i2) => this.chart.getDataVisibility(i2));
  }
  fit() {
    const opts = this.options;
    if (opts.display && opts.pointLabels.display) {
      fitWithPointLabels(this);
    } else {
      this.setCenterPoint(0, 0, 0, 0);
    }
  }
  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
  }
  getIndexAngle(index2) {
    const angleMultiplier = TAU / (this._pointLabels.length || 1);
    const startAngle = this.options.startAngle || 0;
    return _normalizeAngle(index2 * angleMultiplier + toRadians(startAngle));
  }
  getDistanceFromCenterForValue(value) {
    if (isNullOrUndef(value)) {
      return NaN;
    }
    const scalingFactor = this.drawingArea / (this.max - this.min);
    if (this.options.reverse) {
      return (this.max - value) * scalingFactor;
    }
    return (value - this.min) * scalingFactor;
  }
  getValueForDistanceFromCenter(distance) {
    if (isNullOrUndef(distance)) {
      return NaN;
    }
    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
  }
  getPointLabelContext(index2) {
    const pointLabels = this._pointLabels || [];
    if (index2 >= 0 && index2 < pointLabels.length) {
      const pointLabel = pointLabels[index2];
      return createPointLabelContext(this.getContext(), index2, pointLabel);
    }
  }
  getPointPosition(index2, distanceFromCenter, additionalAngle = 0) {
    const angle = this.getIndexAngle(index2) - HALF_PI + additionalAngle;
    return {
      x: Math.cos(angle) * distanceFromCenter + this.xCenter,
      y: Math.sin(angle) * distanceFromCenter + this.yCenter,
      angle
    };
  }
  getPointPositionForValue(index2, value) {
    return this.getPointPosition(index2, this.getDistanceFromCenterForValue(value));
  }
  getBasePosition(index2) {
    return this.getPointPositionForValue(index2 || 0, this.getBaseValue());
  }
  getPointLabelPosition(index2) {
    const { left, top, right, bottom } = this._pointLabelItems[index2];
    return {
      left,
      top,
      right,
      bottom
    };
  }
  drawBackground() {
    const { backgroundColor, grid: { circular } } = this.options;
    if (backgroundColor) {
      const ctx = this.ctx;
      ctx.save();
      ctx.beginPath();
      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
      ctx.closePath();
      ctx.fillStyle = backgroundColor;
      ctx.fill();
      ctx.restore();
    }
  }
  drawGrid() {
    const ctx = this.ctx;
    const opts = this.options;
    const { angleLines, grid: grid2, border } = opts;
    const labelCount = this._pointLabels.length;
    let i2, offset, position;
    if (opts.pointLabels.display) {
      drawPointLabels(this, labelCount);
    }
    if (grid2.display) {
      this.ticks.forEach((tick, index2) => {
        if (index2 !== 0) {
          offset = this.getDistanceFromCenterForValue(tick.value);
          const context = this.getContext(index2);
          const optsAtIndex = grid2.setContext(context);
          const optsAtIndexBorder = border.setContext(context);
          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
        }
      });
    }
    if (angleLines.display) {
      ctx.save();
      for (i2 = labelCount - 1; i2 >= 0; i2--) {
        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i2));
        const { color: color2, lineWidth } = optsAtIndex;
        if (!lineWidth || !color2) {
          continue;
        }
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = color2;
        ctx.setLineDash(optsAtIndex.borderDash);
        ctx.lineDashOffset = optsAtIndex.borderDashOffset;
        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
        position = this.getPointPosition(i2, offset);
        ctx.beginPath();
        ctx.moveTo(this.xCenter, this.yCenter);
        ctx.lineTo(position.x, position.y);
        ctx.stroke();
      }
      ctx.restore();
    }
  }
  drawBorder() {
  }
  drawLabels() {
    const ctx = this.ctx;
    const opts = this.options;
    const tickOpts = opts.ticks;
    if (!tickOpts.display) {
      return;
    }
    const startAngle = this.getIndexAngle(0);
    let offset, width;
    ctx.save();
    ctx.translate(this.xCenter, this.yCenter);
    ctx.rotate(startAngle);
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    this.ticks.forEach((tick, index2) => {
      if (index2 === 0 && !opts.reverse) {
        return;
      }
      const optsAtIndex = tickOpts.setContext(this.getContext(index2));
      const tickFont = toFont(optsAtIndex.font);
      offset = this.getDistanceFromCenterForValue(this.ticks[index2].value);
      if (optsAtIndex.showLabelBackdrop) {
        ctx.font = tickFont.string;
        width = ctx.measureText(tick.label).width;
        ctx.fillStyle = optsAtIndex.backdropColor;
        const padding = toPadding(optsAtIndex.backdropPadding);
        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
      }
      renderText(ctx, tick.label, 0, -offset, tickFont, {
        color: optsAtIndex.color,
        strokeColor: optsAtIndex.textStrokeColor,
        strokeWidth: optsAtIndex.textStrokeWidth
      });
    });
    ctx.restore();
  }
  drawTitle() {
  }
}
__publicField(RadialLinearScale, "id", "radialLinear");
__publicField(RadialLinearScale, "defaults", {
  display: true,
  animate: true,
  position: "chartArea",
  angleLines: {
    display: true,
    lineWidth: 1,
    borderDash: [],
    borderDashOffset: 0
  },
  grid: {
    circular: false
  },
  startAngle: 0,
  ticks: {
    showLabelBackdrop: true,
    callback: Ticks.formatters.numeric
  },
  pointLabels: {
    backdropColor: void 0,
    backdropPadding: 2,
    display: true,
    font: {
      size: 10
    },
    callback(label) {
      return label;
    },
    padding: 5,
    centerPointLabels: false
  }
});
__publicField(RadialLinearScale, "defaultRoutes", {
  "angleLines.color": "borderColor",
  "pointLabels.color": "color",
  "ticks.color": "color"
});
__publicField(RadialLinearScale, "descriptors", {
  angleLines: {
    _fallback: "grid"
  }
});
const INTERVALS = {
  millisecond: {
    common: true,
    size: 1,
    steps: 1e3
  },
  second: {
    common: true,
    size: 1e3,
    steps: 60
  },
  minute: {
    common: true,
    size: 6e4,
    steps: 60
  },
  hour: {
    common: true,
    size: 36e5,
    steps: 24
  },
  day: {
    common: true,
    size: 864e5,
    steps: 30
  },
  week: {
    common: false,
    size: 6048e5,
    steps: 4
  },
  month: {
    common: true,
    size: 2628e6,
    steps: 12
  },
  quarter: {
    common: false,
    size: 7884e6,
    steps: 4
  },
  year: {
    common: true,
    size: 3154e7
  }
};
const UNITS = /* @__PURE__ */ Object.keys(INTERVALS);
function sorter(a3, b2) {
  return a3 - b2;
}
function parse(scale, input) {
  if (isNullOrUndef(input)) {
    return null;
  }
  const adapter = scale._adapter;
  const { parser, round: round2, isoWeekday } = scale._parseOpts;
  let value = input;
  if (typeof parser === "function") {
    value = parser(value);
  }
  if (!isNumberFinite(value)) {
    value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
  }
  if (value === null) {
    return null;
  }
  if (round2) {
    value = round2 === "week" && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round2);
  }
  return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
  const ilen = UNITS.length;
  for (let i2 = UNITS.indexOf(minUnit); i2 < ilen - 1; ++i2) {
    const interval = INTERVALS[UNITS[i2]];
    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
      return UNITS[i2];
    }
  }
  return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
  for (let i2 = UNITS.length - 1; i2 >= UNITS.indexOf(minUnit); i2--) {
    const unit = UNITS[i2];
    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
      return unit;
    }
  }
  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
  for (let i2 = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i2 < ilen; ++i2) {
    if (INTERVALS[UNITS[i2]].common) {
      return UNITS[i2];
    }
  }
}
function addTick(ticks, time, timestamps) {
  if (!timestamps) {
    ticks[time] = true;
  } else if (timestamps.length) {
    const { lo, hi } = _lookup(timestamps, time);
    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
    ticks[timestamp] = true;
  }
}
function setMajorTicks(scale, ticks, map2, majorUnit) {
  const adapter = scale._adapter;
  const first = +adapter.startOf(ticks[0].value, majorUnit);
  const last = ticks[ticks.length - 1].value;
  let major, index2;
  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    index2 = map2[major];
    if (index2 >= 0) {
      ticks[index2].major = true;
    }
  }
  return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
  const ticks = [];
  const map2 = {};
  const ilen = values.length;
  let i2, value;
  for (i2 = 0; i2 < ilen; ++i2) {
    value = values[i2];
    map2[value] = i2;
    ticks.push({
      value,
      major: false
    });
  }
  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map2, majorUnit);
}
class TimeScale extends Scale {
  constructor(props) {
    super(props);
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
    this._unit = "day";
    this._majorUnit = void 0;
    this._offsets = {};
    this._normalized = false;
    this._parseOpts = void 0;
  }
  init(scaleOpts, opts = {}) {
    const time = scaleOpts.time || (scaleOpts.time = {});
    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
    adapter.init(opts);
    mergeIf(time.displayFormats, adapter.formats());
    this._parseOpts = {
      parser: time.parser,
      round: time.round,
      isoWeekday: time.isoWeekday
    };
    super.init(scaleOpts);
    this._normalized = opts.normalized;
  }
  parse(raw, index2) {
    if (raw === void 0) {
      return null;
    }
    return parse(this, raw);
  }
  beforeLayout() {
    super.beforeLayout();
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }
  determineDataLimits() {
    const options = this.options;
    const adapter = this._adapter;
    const unit = options.time.unit || "day";
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    function _applyBounds(bounds) {
      if (!minDefined && !isNaN(bounds.min)) {
        min = Math.min(min, bounds.min);
      }
      if (!maxDefined && !isNaN(bounds.max)) {
        max = Math.max(max, bounds.max);
      }
    }
    if (!minDefined || !maxDefined) {
      _applyBounds(this._getLabelBounds());
      if (options.bounds !== "ticks" || options.ticks.source !== "labels") {
        _applyBounds(this.getMinMax(false));
      }
    }
    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
    this.min = Math.min(min, max - 1);
    this.max = Math.max(min + 1, max);
  }
  _getLabelBounds() {
    const arr = this.getLabelTimestamps();
    let min = Number.POSITIVE_INFINITY;
    let max = Number.NEGATIVE_INFINITY;
    if (arr.length) {
      min = arr[0];
      max = arr[arr.length - 1];
    }
    return {
      min,
      max
    };
  }
  buildTicks() {
    const options = this.options;
    const timeOpts = options.time;
    const tickOpts = options.ticks;
    const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
    if (options.bounds === "ticks" && timestamps.length) {
      this.min = this._userMin || timestamps[0];
      this.max = this._userMax || timestamps[timestamps.length - 1];
    }
    const min = this.min;
    const max = this.max;
    const ticks = _filterBetween(timestamps, min, max);
    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
    this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? void 0 : determineMajorUnit(this._unit);
    this.initOffsets(timestamps);
    if (options.reverse) {
      ticks.reverse();
    }
    return ticksFromTimestamps(this, ticks, this._majorUnit);
  }
  afterAutoSkip() {
    if (this.options.offsetAfterAutoskip) {
      this.initOffsets(this.ticks.map((tick) => +tick.value));
    }
  }
  initOffsets(timestamps = []) {
    let start = 0;
    let end = 0;
    let first, last;
    if (this.options.offset && timestamps.length) {
      first = this.getDecimalForValue(timestamps[0]);
      if (timestamps.length === 1) {
        start = 1 - first;
      } else {
        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
      }
      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
      if (timestamps.length === 1) {
        end = last;
      } else {
        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
      }
    }
    const limit2 = timestamps.length < 3 ? 0.5 : 0.25;
    start = _limitValue(start, 0, limit2);
    end = _limitValue(end, 0, limit2);
    this._offsets = {
      start,
      end,
      factor: 1 / (start + 1 + end)
    };
  }
  _generate() {
    const adapter = this._adapter;
    const min = this.min;
    const max = this.max;
    const options = this.options;
    const timeOpts = options.time;
    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
    const stepSize = valueOrDefault(options.ticks.stepSize, 1);
    const weekday = minor === "week" ? timeOpts.isoWeekday : false;
    const hasWeekday = isNumber(weekday) || weekday === true;
    const ticks = {};
    let first = min;
    let time, count;
    if (hasWeekday) {
      first = +adapter.startOf(first, "isoWeek", weekday);
    }
    first = +adapter.startOf(first, hasWeekday ? "day" : minor);
    if (adapter.diff(max, min, minor) > 1e5 * stepSize) {
      throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
    }
    const timestamps = options.ticks.source === "data" && this.getDataTimestamps();
    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {
      addTick(ticks, time, timestamps);
    }
    if (time === max || options.bounds === "ticks" || count === 1) {
      addTick(ticks, time, timestamps);
    }
    return Object.keys(ticks).sort(sorter).map((x2) => +x2);
  }
  getLabelForValue(value) {
    const adapter = this._adapter;
    const timeOpts = this.options.time;
    if (timeOpts.tooltipFormat) {
      return adapter.format(value, timeOpts.tooltipFormat);
    }
    return adapter.format(value, timeOpts.displayFormats.datetime);
  }
  format(value, format2) {
    const options = this.options;
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const fmt = format2 || formats[unit];
    return this._adapter.format(value, fmt);
  }
  _tickFormatFunction(time, index2, ticks, format2) {
    const options = this.options;
    const formatter = options.ticks.callback;
    if (formatter) {
      return callback(formatter, [
        time,
        index2,
        ticks
      ], this);
    }
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const majorUnit = this._majorUnit;
    const minorFormat = unit && formats[unit];
    const majorFormat = majorUnit && formats[majorUnit];
    const tick = ticks[index2];
    const major = majorUnit && majorFormat && tick && tick.major;
    return this._adapter.format(time, format2 || (major ? majorFormat : minorFormat));
  }
  generateTickLabels(ticks) {
    let i2, ilen, tick;
    for (i2 = 0, ilen = ticks.length; i2 < ilen; ++i2) {
      tick = ticks[i2];
      tick.label = this._tickFormatFunction(tick.value, i2, ticks);
    }
  }
  getDecimalForValue(value) {
    return value === null ? NaN : (value - this.min) / (this.max - this.min);
  }
  getPixelForValue(value) {
    const offsets = this._offsets;
    const pos = this.getDecimalForValue(value);
    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return this.min + pos * (this.max - this.min);
  }
  _getLabelSize(label) {
    const ticksOpts = this.options.ticks;
    const tickLabelWidth = this.ctx.measureText(label).width;
    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    const cosRotation = Math.cos(angle);
    const sinRotation = Math.sin(angle);
    const tickFontSize = this._resolveTickFontOptions(0).size;
    return {
      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
    };
  }
  _getLabelCapacity(exampleTime) {
    const timeOpts = this.options.time;
    const displayFormats = timeOpts.displayFormats;
    const format2 = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
      exampleTime
    ], this._majorUnit), format2);
    const size = this._getLabelSize(exampleLabel);
    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
    return capacity > 0 ? capacity : 1;
  }
  getDataTimestamps() {
    let timestamps = this._cache.data || [];
    let i2, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const metas = this.getMatchingVisibleMetas();
    if (this._normalized && metas.length) {
      return this._cache.data = metas[0].controller.getAllParsedValues(this);
    }
    for (i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
      timestamps = timestamps.concat(metas[i2].controller.getAllParsedValues(this));
    }
    return this._cache.data = this.normalize(timestamps);
  }
  getLabelTimestamps() {
    const timestamps = this._cache.labels || [];
    let i2, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const labels = this.getLabels();
    for (i2 = 0, ilen = labels.length; i2 < ilen; ++i2) {
      timestamps.push(parse(this, labels[i2]));
    }
    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
  }
  normalize(values) {
    return _arrayUnique(values.sort(sorter));
  }
}
__publicField(TimeScale, "id", "time");
__publicField(TimeScale, "defaults", {
  bounds: "data",
  adapters: {},
  time: {
    parser: false,
    unit: false,
    round: false,
    isoWeekday: false,
    minUnit: "millisecond",
    displayFormats: {}
  },
  ticks: {
    source: "auto",
    callback: false,
    major: {
      enabled: false
    }
  }
});
function interpolate(table, val, reverse) {
  let lo = 0;
  let hi = table.length - 1;
  let prevSource, nextSource, prevTarget, nextTarget;
  if (reverse) {
    if (val >= table[lo].pos && val <= table[hi].pos) {
      ({ lo, hi } = _lookupByKey(table, "pos", val));
    }
    ({ pos: prevSource, time: prevTarget } = table[lo]);
    ({ pos: nextSource, time: nextTarget } = table[hi]);
  } else {
    if (val >= table[lo].time && val <= table[hi].time) {
      ({ lo, hi } = _lookupByKey(table, "time", val));
    }
    ({ time: prevSource, pos: prevTarget } = table[lo]);
    ({ time: nextSource, pos: nextTarget } = table[hi]);
  }
  const span = nextSource - prevSource;
  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
  constructor(props) {
    super(props);
    this._table = [];
    this._minPos = void 0;
    this._tableRange = void 0;
  }
  initOffsets() {
    const timestamps = this._getTimestampsForTable();
    const table = this._table = this.buildLookupTable(timestamps);
    this._minPos = interpolate(table, this.min);
    this._tableRange = interpolate(table, this.max) - this._minPos;
    super.initOffsets(timestamps);
  }
  buildLookupTable(timestamps) {
    const { min, max } = this;
    const items = [];
    const table = [];
    let i2, ilen, prev, curr, next2;
    for (i2 = 0, ilen = timestamps.length; i2 < ilen; ++i2) {
      curr = timestamps[i2];
      if (curr >= min && curr <= max) {
        items.push(curr);
      }
    }
    if (items.length < 2) {
      return [
        {
          time: min,
          pos: 0
        },
        {
          time: max,
          pos: 1
        }
      ];
    }
    for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
      next2 = items[i2 + 1];
      prev = items[i2 - 1];
      curr = items[i2];
      if (Math.round((next2 + prev) / 2) !== curr) {
        table.push({
          time: curr,
          pos: i2 / (ilen - 1)
        });
      }
    }
    return table;
  }
  _generate() {
    const min = this.min;
    const max = this.max;
    let timestamps = super.getDataTimestamps();
    if (!timestamps.includes(min) || !timestamps.length) {
      timestamps.splice(0, 0, min);
    }
    if (!timestamps.includes(max) || timestamps.length === 1) {
      timestamps.push(max);
    }
    return timestamps.sort((a3, b2) => a3 - b2);
  }
  _getTimestampsForTable() {
    let timestamps = this._cache.all || [];
    if (timestamps.length) {
      return timestamps;
    }
    const data = this.getDataTimestamps();
    const label = this.getLabelTimestamps();
    if (data.length && label.length) {
      timestamps = this.normalize(data.concat(label));
    } else {
      timestamps = data.length ? data : label;
    }
    timestamps = this._cache.all = timestamps;
    return timestamps;
  }
  getDecimalForValue(value) {
    return (interpolate(this._table, value) - this._minPos) / this._tableRange;
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
  }
}
__publicField(TimeSeriesScale, "id", "timeseries");
__publicField(TimeSeriesScale, "defaults", TimeScale.defaults);
var scales = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  CategoryScale,
  LinearScale,
  LogarithmicScale,
  RadialLinearScale,
  TimeScale,
  TimeSeriesScale
});
const registerables = [
  controllers,
  elements,
  plugins,
  scales
];
const eventPrefix = /^on/;
const events = [];
Object.keys(globalThis).forEach((key) => {
  if (eventPrefix.test(key)) {
    events.push(key.replace(eventPrefix, ""));
  }
});
function useForwardEvents(getRef) {
  const component = current_component;
  const destructors = [];
  function forward(e2) {
    bubble(component, e2);
  }
  onMount(() => {
    const ref = getRef();
    events.forEach(ref instanceof Element ? (event) => destructors.push(listen(ref, event, forward)) : (event) => destructors.push(ref.$on(event, forward)));
  });
  onDestroy(() => {
    while (destructors.length) {
      destructors.pop()();
    }
  });
}
function create_fragment$f(ctx) {
  let canvas;
  let canvas_levels = [
    /*props*/
    ctx[1]
  ];
  let canvas_data = {};
  for (let i2 = 0; i2 < canvas_levels.length; i2 += 1) {
    canvas_data = assign$1(canvas_data, canvas_levels[i2]);
  }
  return {
    c() {
      canvas = element("canvas");
      this.h();
    },
    l(nodes) {
      canvas = claim_element(nodes, "CANVAS", {});
      children(canvas).forEach(detach);
      this.h();
    },
    h() {
      set_attributes(canvas, canvas_data);
    },
    m(target, anchor) {
      insert_hydration(target, canvas, anchor);
      ctx[8](canvas);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(canvas);
      }
      ctx[8](null);
    }
  };
}
function clean(props) {
  let { data, type, options, plugins: plugins2, children: children2, $$scope, $$slots, ...rest } = props;
  return rest;
}
function instance$d($$self, $$props, $$invalidate) {
  let { type } = $$props;
  let { data = { datasets: [] } } = $$props;
  let { options = {} } = $$props;
  let { plugins: plugins2 = [] } = $$props;
  let { updateMode = void 0 } = $$props;
  let { chart = null } = $$props;
  let canvasRef;
  let props = clean($$props);
  onMount(() => {
    $$invalidate(2, chart = new Chart$1(canvasRef, { type, data, options, plugins: plugins2 }));
  });
  afterUpdate(() => {
    if (!chart)
      return;
    $$invalidate(2, chart.data = data, chart);
    Object.assign(chart.options, options);
    chart.update(updateMode);
  });
  onDestroy(() => {
    if (chart)
      chart.destroy();
    $$invalidate(2, chart = null);
  });
  useForwardEvents(() => canvasRef);
  function canvas_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      canvasRef = $$value;
      $$invalidate(0, canvasRef);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$invalidate(9, $$props = assign$1(assign$1({}, $$props), exclude_internal_props($$new_props)));
    if ("type" in $$new_props)
      $$invalidate(3, type = $$new_props.type);
    if ("data" in $$new_props)
      $$invalidate(4, data = $$new_props.data);
    if ("options" in $$new_props)
      $$invalidate(5, options = $$new_props.options);
    if ("plugins" in $$new_props)
      $$invalidate(6, plugins2 = $$new_props.plugins);
    if ("updateMode" in $$new_props)
      $$invalidate(7, updateMode = $$new_props.updateMode);
    if ("chart" in $$new_props)
      $$invalidate(2, chart = $$new_props.chart);
  };
  $$props = exclude_internal_props($$props);
  return [
    canvasRef,
    props,
    chart,
    type,
    data,
    options,
    plugins2,
    updateMode,
    canvas_binding
  ];
}
class Chart extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$d, create_fragment$f, safe_not_equal, {
      type: 3,
      data: 4,
      options: 5,
      plugins: 6,
      updateMode: 7,
      chart: 2
    });
  }
}
Chart$1.register(...registerables);
/*!
 * chartjs-adapter-date-fns v3.0.0
 * https://www.chartjs.org
 * (c) 2022 chartjs-adapter-date-fns Contributors
 * Released under the MIT license
 */
const FORMATS = {
  datetime: "MMM d, yyyy, h:mm:ss aaaa",
  millisecond: "h:mm:ss.SSS aaaa",
  second: "h:mm:ss aaaa",
  minute: "h:mm aaaa",
  hour: "ha",
  day: "MMM d",
  week: "PP",
  month: "MMM yyyy",
  quarter: "qqq - yyyy",
  year: "yyyy"
};
adapters._date.override({
  _id: "date-fns",
  // DEBUG
  formats: function() {
    return FORMATS;
  },
  parse: function(value, fmt) {
    if (value === null || typeof value === "undefined") {
      return null;
    }
    const type = typeof value;
    if (type === "number" || value instanceof Date) {
      value = toDate(value);
    } else if (type === "string") {
      if (typeof fmt === "string") {
        value = parse$1(value, fmt, /* @__PURE__ */ new Date(), this.options);
      } else {
        value = parseISO(value, this.options);
      }
    }
    return isValid(value) ? value.getTime() : null;
  },
  format: function(time, fmt) {
    return format(time, fmt, this.options);
  },
  add: function(time, amount, unit) {
    switch (unit) {
      case "millisecond":
        return addMilliseconds(time, amount);
      case "second":
        return addSeconds(time, amount);
      case "minute":
        return addMinutes(time, amount);
      case "hour":
        return addHours(time, amount);
      case "day":
        return addDays(time, amount);
      case "week":
        return addWeeks(time, amount);
      case "month":
        return addMonths(time, amount);
      case "quarter":
        return addQuarters(time, amount);
      case "year":
        return addYears(time, amount);
      default:
        return time;
    }
  },
  diff: function(max, min, unit) {
    switch (unit) {
      case "millisecond":
        return differenceInMilliseconds(max, min);
      case "second":
        return differenceInSeconds(max, min);
      case "minute":
        return differenceInMinutes(max, min);
      case "hour":
        return differenceInHours(max, min);
      case "day":
        return differenceInDays(max, min);
      case "week":
        return differenceInWeeks(max, min);
      case "month":
        return differenceInMonths(max, min);
      case "quarter":
        return differenceInQuarters(max, min);
      case "year":
        return differenceInYears(max, min);
      default:
        return 0;
    }
  },
  startOf: function(time, unit, weekday) {
    switch (unit) {
      case "second":
        return startOfSecond(time);
      case "minute":
        return startOfMinute(time);
      case "hour":
        return startOfHour(time);
      case "day":
        return startOfDay(time);
      case "week":
        return startOfWeek(time);
      case "isoWeek":
        return startOfWeek(time, { weekStartsOn: +weekday });
      case "month":
        return startOfMonth(time);
      case "quarter":
        return startOfQuarter(time);
      case "year":
        return startOfYear(time);
      default:
        return time;
    }
  },
  endOf: function(time, unit) {
    switch (unit) {
      case "second":
        return endOfSecond(time);
      case "minute":
        return endOfMinute(time);
      case "hour":
        return endOfHour(time);
      case "day":
        return endOfDay(time);
      case "week":
        return endOfWeek(time);
      case "month":
        return endOfMonth(time);
      case "quarter":
        return endOfQuarter(time);
      case "year":
        return endOfYear(time);
      default:
        return time;
    }
  }
});
const colors = ["rgba(54,162,235,1)", "rgba(255,99,132,1)", "rgba(75,192,192,1)", "rgba(255,159,64,1)", "rgba(153,102,255,1)"];
var dateFormats$1 = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy"
};
var timeFormats$1 = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var dateTimeFormats$1 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong$2 = {
  date: buildFormatLongFn({
    formats: dateFormats$1,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1,
    defaultWidth: "full"
  })
};
const formatLong$3 = formatLong$2;
var locale$2 = {
  code: "en-GB",
  formatDistance: formatDistance$4,
  formatLong: formatLong$3,
  formatRelative: formatRelative$3,
  localize: localize$3,
  match: match$3,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
const enGB = locale$2;
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "mindre enn ett sekund",
    other: "mindre enn {{count}} sekunder"
  },
  xSeconds: {
    one: "ett sekund",
    other: "{{count}} sekunder"
  },
  halfAMinute: "et halvt minutt",
  lessThanXMinutes: {
    one: "mindre enn ett minutt",
    other: "mindre enn {{count}} minutter"
  },
  xMinutes: {
    one: "ett minutt",
    other: "{{count}} minutter"
  },
  aboutXHours: {
    one: "omtrent en time",
    other: "omtrent {{count}} timer"
  },
  xHours: {
    one: "en time",
    other: "{{count}} timer"
  },
  xDays: {
    one: "en dag",
    other: "{{count}} dager"
  },
  aboutXWeeks: {
    one: "omtrent en uke",
    other: "omtrent {{count}} uker"
  },
  xWeeks: {
    one: "en uke",
    other: "{{count}} uker"
  },
  aboutXMonths: {
    one: "omtrent en måned",
    other: "omtrent {{count}} måneder"
  },
  xMonths: {
    one: "en måned",
    other: "{{count}} måneder"
  },
  aboutXYears: {
    one: "omtrent ett år",
    other: "omtrent {{count}} år"
  },
  xYears: {
    one: "ett år",
    other: "{{count}} år"
  },
  overXYears: {
    one: "over ett år",
    other: "over {{count}} år"
  },
  almostXYears: {
    one: "nesten ett år",
    other: "nesten {{count}} år"
  }
};
var formatDistance2 = function formatDistance3(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "om " + result;
    } else {
      return result + " siden";
    }
  }
  return result;
};
const formatDistance$1 = formatDistance2;
var dateFormats = {
  full: "EEEE d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "dd.MM.y"
};
var timeFormats = {
  full: "'kl'. HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var dateTimeFormats = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
const formatLong$1 = formatLong;
var formatRelativeLocale = {
  lastWeek: "'forrige' eeee 'kl.' p",
  yesterday: "'i går kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: "P"
};
var formatRelative2 = function formatRelative3(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
const formatRelative$1 = formatRelative2;
var eraValues = {
  narrow: ["f.Kr.", "e.Kr."],
  abbreviated: ["f.Kr.", "e.Kr."],
  wide: ["før Kristus", "etter Kristus"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des."],
  wide: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"]
};
var dayValues = {
  narrow: ["S", "M", "T", "O", "T", "F", "L"],
  short: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
  abbreviated: ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
  wide: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "midnatt",
    noon: "middag",
    morning: "på morg.",
    afternoon: "på etterm.",
    evening: "på kvelden",
    night: "på natten"
  },
  abbreviated: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "på morg.",
    afternoon: "på etterm.",
    evening: "på kvelden",
    night: "på natten"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "på morgenen",
    afternoon: "på ettermiddagen",
    evening: "på kvelden",
    night: "på natten"
  }
};
var ordinalNumber2 = function ordinalNumber3(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var localize = {
  ordinalNumber: ordinalNumber2,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback2(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide"
  })
};
const localize$1 = localize;
var matchOrdinalNumberPattern = /^(\d+)\.?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
};
var parseEraPatterns = {
  any: [/^f/i, /^e/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtofl]/i,
  short: /^(sø|ma|ti|on|to|fr|lø)/i,
  abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
  wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
};
var parseDayPatterns = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgen/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback3(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback4(index2) {
      return index2 + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
const match$1 = match;
var locale$1 = {
  code: "nb",
  formatDistance: formatDistance$1,
  formatLong: formatLong$1,
  formatRelative: formatRelative$1,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
const noNB = locale$1;
const locale = writable(navigator.language);
const dateFnsLocale = derived(
  locale,
  (l) => {
    switch (l) {
      case "en-US":
        return enUS;
      case "nb":
        return noNB;
      case "en-GB":
      default:
        return enGB;
    }
  },
  enGB
);
function create_else_block$3(ctx) {
  let div;
  let chart_1;
  let updating_chart;
  let current;
  function chart_1_chart_binding(value) {
    ctx[8](value);
  }
  let chart_1_props = {
    type: "line",
    data: (
      /*data*/
      ctx[3]
    ),
    options: (
      /*options*/
      ctx[4]
    ),
    plugins: (
      /*plugins*/
      ctx[5]
    )
  };
  if (
    /*chart*/
    ctx[2] !== void 0
  ) {
    chart_1_props.chart = /*chart*/
    ctx[2];
  }
  chart_1 = new Chart({ props: chart_1_props });
  binding_callbacks.push(() => bind(chart_1, "chart", chart_1_chart_binding));
  return {
    c() {
      div = element("div");
      create_component(chart_1.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(chart_1.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "w-full min-h-0");
      toggle_class(
        div,
        "flex-1",
        /*context*/
        ctx[0].mode !== "view"
      );
      toggle_class(
        div,
        "h-96",
        /*context*/
        ctx[0].mode === "view"
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(chart_1, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const chart_1_changes = {};
      if (dirty & /*data*/
      8)
        chart_1_changes.data = /*data*/
        ctx2[3];
      if (dirty & /*options*/
      16)
        chart_1_changes.options = /*options*/
        ctx2[4];
      if (!updating_chart && dirty & /*chart*/
      4) {
        updating_chart = true;
        chart_1_changes.chart = /*chart*/
        ctx2[2];
        add_flush_callback(() => updating_chart = false);
      }
      chart_1.$set(chart_1_changes);
      if (!current || dirty & /*context*/
      1) {
        toggle_class(
          div,
          "flex-1",
          /*context*/
          ctx2[0].mode !== "view"
        );
      }
      if (!current || dirty & /*context*/
      1) {
        toggle_class(
          div,
          "h-96",
          /*context*/
          ctx2[0].mode === "view"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(chart_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(chart_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(chart_1);
    }
  };
}
function create_if_block$a(ctx) {
  let span;
  let textContent = "Insights not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-a0e9nu")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$e(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$a, create_else_block$3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*series*/
      ctx2[1] === void 0 || /*series*/
      ctx2[1].length === 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function resample(entries, aggregation, sampleRate, decimals) {
  if (aggregation === void 0 || aggregation === "none" || entries.step / 1e3 >= sampleRate) {
    return entries.values.filter((entry) => entry.v !== null && entry.v !== void 0).map((entry) => ({
      x: new Date(entry.t).getTime(),
      y: round(entry.v, decimals)
    }));
  } else {
    const buckets = entries.values.filter((entry) => entry.v !== null && entry.v !== void 0).reduce(
      (timeBuckets, entry) => {
        const time = new Date(entry.t);
        const value = entry.v;
        const timeOfDay = time.getHours() * 3600 + time.getMinutes() * 60 + time.getSeconds();
        const timestamp = time.getTime() - timeOfDay % sampleRate * 1e3;
        const bucket = timeBuckets[timestamp] = timeBuckets[timestamp] ?? [];
        bucket.push(value);
        return timeBuckets;
      },
      {}
    );
    const result = Object.keys(buckets).map((timestamp) => {
      const values = buckets[timestamp];
      switch (aggregation) {
        case "min":
          return {
            x: Number(timestamp),
            y: round(Math.min(...values), decimals)
          };
        case "max":
          return {
            x: Number(timestamp),
            y: round(Math.max(...values), decimals)
          };
        case "sum":
          return {
            x: Number(timestamp),
            y: round(values.reduce((a3, b2) => a3 + b2, 0), decimals)
          };
        case "avg":
          return {
            x: Number(timestamp),
            y: round(values.reduce((a3, b2) => a3 + b2, 0) / values.length, decimals)
          };
        case "first":
          return {
            x: Number(timestamp),
            y: round(values[0], decimals)
          };
        case "last":
          return {
            x: Number(timestamp),
            y: round(values[values.length - 1], decimals)
          };
      }
    });
    return result;
  }
}
function round(value, decimals) {
  if (!decimals) {
    return value;
  }
  return Math.round(value * Math.pow(10, decimals)) / Math.pow(10, decimals);
}
function instance$c($$self, $$props, $$invalidate) {
  let $devices;
  let $homey;
  let $insights;
  let $dateFnsLocale;
  component_subscribe($$self, devices, ($$value) => $$invalidate(12, $devices = $$value));
  component_subscribe($$self, homey, ($$value) => $$invalidate(13, $homey = $$value));
  component_subscribe($$self, insights, ($$value) => $$invalidate(7, $insights = $$value));
  component_subscribe($$self, dateFnsLocale, ($$value) => $$invalidate(14, $dateFnsLocale = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  let resolution;
  let series;
  let timeout;
  let chart;
  let data = { datasets: [] };
  let plugins2 = [
    {
      beforeRender: (context2, options2) => thresholdColors(context2)
    }
  ];
  let options = {
    plugins: {
      legend: {
        display: true,
        labels: { boxWidth: 10, boxHeight: 2 }
      }
    },
    elements: { point: { radius: 0 } },
    scales: {
      x: {
        type: "time",
        time: {
          displayFormats: {
            datetime: "d MMM yyyy, HH:mm:ss",
            millisecond: "HH:mm:ss.SSS",
            second: "HH:mm:ss",
            minute: "HH:mm",
            hour: "HH",
            day: "d MMM",
            week: "w, R",
            month: "MMM yyyy",
            quarter: "qqq - yyyy",
            year: "yyyy"
          }
        },
        adapters: { date: { locale: $dateFnsLocale } }
      }
    },
    responsive: true,
    maintainAspectRatio: false,
    animation: false
  };
  onDestroy(() => {
    if (timeout !== void 0) {
      clearTimeout(timeout);
    }
  });
  async function onSettings(s3) {
    var _a2;
    let load = false;
    if (resolution === void 0 || resolution !== s3.resolution) {
      resolution = s3.resolution ?? "today";
      load = true;
    }
    if (series === void 0 || series.length != ((_a2 = s3.series) == null ? void 0 : _a2.length) || JSON.stringify(series) !== JSON.stringify(s3.series)) {
      if ((s3 == null ? void 0 : s3.series) !== void 0) {
        $$invalidate(1, series = [...s3.series]);
        load = true;
      }
    }
    if (load) {
      reload();
    }
  }
  function onInsights(logs) {
    reload();
  }
  function reload() {
    if (timeout !== void 0) {
      clearTimeout(timeout);
    }
    getEntries();
  }
  async function getEntries() {
    if (series === void 0 || series.length === 0) {
      return;
    }
    const units = series.map((s3) => $insights[s3.insightId]).filter((l) => l !== void 0).map((l) => l.units).filter((value, index2, array) => array.indexOf(value) === index2);
    for (var unit of units) {
      const axis = "y" + unit;
      if (!Object.hasOwn(options.scales, axis)) {
        $$invalidate(
          4,
          options.scales[axis] = {
            title: { text: unit, display: true },
            type: "linear",
            display: "auto"
          },
          options
        );
      }
    }
    let timeoutMs = 999999999;
    try {
      for (var i2 = 0; i2 < series.length; i2++) {
        const t2 = await getTimeSeries(series[i2], i2);
        if (t2 > 0 && t2 < timeoutMs) {
          timeoutMs = t2;
        }
      }
    } catch (e2) {
    }
    if (data.datasets.length > series.length) {
      data.datasets.splice(series.length);
    }
    timeout = setTimeout(
      () => {
        getEntries();
      },
      timeoutMs
    );
    if (chart) {
      chart.update();
    }
  }
  async function getTimeSeries(series2, index2) {
    if (series2.insightId === void 0) {
      return -1;
    }
    const log = $insights[series2.insightId];
    if (log === void 0) {
      return -1;
    }
    const aggregation = series2.aggregation ?? "none";
    const sampleRate = series2.sampleRate ?? 60;
    try {
      const entries = await $homey.insights.getLogEntries({ id: log.id, uri: log.uri, resolution });
      const timeSeries = resample(entries, aggregation, sampleRate, log.decimals);
      const yAxis = "y" + log.units;
      $$invalidate(
        3,
        data.datasets[index2] = {
          label: series2.title ?? getOwnerName(log.ownerUri) + " - " + log.title,
          type: series2.type ?? "line",
          borderThresholds: series2.border,
          backgroundThresholds: series2.background,
          fill: series2.fill,
          data: timeSeries,
          tension: 0.5,
          yAxisID: yAxis,
          stepped: log.type === "boolean" ? true : void 0
        },
        data
      );
      return Math.max(entries.step - entries.updatesIn, 1e4);
    } catch (e2) {
    }
    return 3e4;
  }
  function thresholdColors(context2, options2) {
    context2.data.datasets.forEach((dataset, index2) => {
      const borderThresholds = dataset.borderThresholds;
      const backgroundThresholds = dataset.backgroundThresholds;
      const scale = context2.scales[dataset.yAxisID];
      dataset.borderColor = createGradient(context2, borderThresholds, scale, index2);
      dataset.backgroundColor = createGradient(context2, backgroundThresholds, scale, index2);
    });
  }
  function createGradient(_chart, thresholds, scale, index2) {
    if (_chart === void 0)
      return;
    const { ctx, chartArea } = _chart;
    let gradient = ctx.createLinearGradient(0, _chart.height, 0, 0);
    let previous = void 0;
    if (thresholds !== void 0) {
      for (let i2 = thresholds.length - 1; i2 >= 0; i2--) {
        const threshold = thresholds[i2];
        if (previous === void 0) {
          gradient.addColorStop(0, threshold.color);
        } else {
          const yPos = scale.getPixelForValue(threshold.value);
          const factor = 1 - yPos / _chart.height;
          if (factor < 0 || factor > 1) {
            break;
          }
          gradient.addColorStop(factor, previous.color);
          gradient.addColorStop(factor, threshold.color);
        }
        previous = threshold;
      }
    }
    if (previous !== void 0) {
      gradient.addColorStop(1, previous.color);
    } else {
      return colors[index2 % colors.length];
    }
    return gradient;
  }
  function getOwnerName(uri) {
    var _a2;
    if (uri.startsWith("homey:device:")) {
      const prefix = "homey:device:";
      const id = uri.slice(prefix.length);
      return ((_a2 = $devices[id]) == null ? void 0 : _a2.name) ?? uri;
    } else if (uri.startsWith("homey:manager:apps")) {
      return "Homey Apps";
    } else if (uri.startsWith("homey:manager:system")) {
      return "Homey System";
    } else if (uri.startsWith("homey:manager:weather")) {
      return "Homey Weather";
    } else if (uri.startsWith("homey:manager:logic")) {
      return "Homey Logic";
    } else {
      return uri;
    }
  }
  function chart_1_chart_binding(value) {
    chart = value;
    $$invalidate(2, chart);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(6, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(0, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    64) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*$insights*/
    128) {
      onInsights();
    }
  };
  return [
    context,
    series,
    chart,
    data,
    options,
    plugins2,
    settings,
    $insights,
    chart_1_chart_binding
  ];
}
class InsightWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$c, create_fragment$e, safe_not_equal, { settings: 6, context: 0 });
  }
}
function get_each_context$7(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[18] = list[i2];
  return child_ctx;
}
function create_else_block$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*placeholder*/
        ctx[1]
      );
    },
    l(nodes) {
      t2 = claim_text(
        nodes,
        /*placeholder*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*placeholder*/
      2)
        set_data(
          t2,
          /*placeholder*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_2$5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Insight not found");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Insight not found");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_1$7(ctx) {
  let span;
  let t0_value = (
    /*getOwnerName*/
    ctx[7](
      /*selected*/
      ctx[5].ownerUri
    ) + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*selected*/
    ctx[5].title + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = text(" - ");
      t2 = text(t2_value);
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_text(span_nodes, " - ");
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*selected*/
      32 && t0_value !== (t0_value = /*getOwnerName*/
      ctx2[7](
        /*selected*/
        ctx2[5].ownerUri
      ) + ""))
        set_data(t0, t0_value);
      if (dirty & /*selected*/
      32 && t2_value !== (t2_value = /*selected*/
      ctx2[5].title + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_default_slot_5$3(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (
      /*selected*/
      ctx2[5] !== void 0
    )
      return create_if_block_1$7;
    if (
      /*logId*/
      ctx2[0] !== void 0
    )
      return create_if_block_2$5;
    return create_else_block$2;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_if_block$9(ctx) {
  let modal;
  let current;
  modal = new Modal({
    props: {
      handleClose: (
        /*func*/
        ctx[14]
      ),
      $$slots: { content: [create_content_slot$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal.$$.fragment);
    },
    l(nodes) {
      claim_component(modal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_changes = {};
      if (dirty & /*open*/
      8)
        modal_changes.handleClose = /*func*/
        ctx2[14];
      if (dirty & /*$$scope, filtered, search, open*/
      2097180) {
        modal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal.$set(modal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal, detaching);
    }
  };
}
function create_default_slot_4$3(ctx) {
  let t0_value = (
    /*item*/
    ctx[18].ownerName + ""
  );
  let t0;
  let t1;
  return {
    c() {
      t0 = text(t0_value);
      t1 = space();
    },
    l(nodes) {
      t0 = claim_text(nodes, t0_value);
      t1 = claim_space(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, t0, anchor);
      insert_hydration(target, t1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*filtered*/
      16 && t0_value !== (t0_value = /*item*/
      ctx2[18].ownerName + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
    }
  };
}
function create_title_slot$1(ctx) {
  let list_item_content_title;
  let current;
  list_item_content_title = new List.Item.Content.Title({
    props: {
      slot: "title",
      $$slots: { default: [create_default_slot_4$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content_title.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content_title.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content_title, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_title_changes = {};
      if (dirty & /*$$scope, filtered*/
      2097168) {
        list_item_content_title_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content_title.$set(list_item_content_title_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content_title.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content_title.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content_title, detaching);
    }
  };
}
function create_default_slot_3$4(ctx) {
  let span0;
  let t0_value = (
    /*item*/
    ctx[18].log.title + ""
  );
  let t0;
  let t1;
  let span1;
  let t2_value = (
    /*item*/
    ctx[18].log.lastValue + ""
  );
  let t2;
  let t3;
  let t4_value = (
    /*item*/
    ctx[18].log.units + ""
  );
  let t4;
  let t5;
  return {
    c() {
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      span1 = element("span");
      t2 = text(t2_value);
      t3 = space();
      t4 = text(t4_value);
      t5 = space();
    },
    l(nodes) {
      span0 = claim_element(nodes, "SPAN", {});
      var span0_nodes = children(span0);
      t0 = claim_text(span0_nodes, t0_value);
      span0_nodes.forEach(detach);
      t1 = claim_space(nodes);
      span1 = claim_element(nodes, "SPAN", {});
      var span1_nodes = children(span1);
      t2 = claim_text(span1_nodes, t2_value);
      t3 = claim_space(span1_nodes);
      t4 = claim_text(span1_nodes, t4_value);
      span1_nodes.forEach(detach);
      t5 = claim_space(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, span0, anchor);
      append_hydration(span0, t0);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, span1, anchor);
      append_hydration(span1, t2);
      append_hydration(span1, t3);
      append_hydration(span1, t4);
      insert_hydration(target, t5, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*filtered*/
      16 && t0_value !== (t0_value = /*item*/
      ctx2[18].log.title + ""))
        set_data(t0, t0_value);
      if (dirty & /*filtered*/
      16 && t2_value !== (t2_value = /*item*/
      ctx2[18].log.lastValue + ""))
        set_data(t2, t2_value);
      if (dirty & /*filtered*/
      16 && t4_value !== (t4_value = /*item*/
      ctx2[18].log.units + ""))
        set_data(t4, t4_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span0);
        detach(t1);
        detach(span1);
        detach(t5);
      }
    }
  };
}
function create_description_slot(ctx) {
  let list_item_content_description;
  let current;
  list_item_content_description = new List.Item.Content.Description({
    props: {
      slot: "description",
      class: "w-full flex justify-between",
      $$slots: { default: [create_default_slot_3$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content_description.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content_description.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content_description, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_description_changes = {};
      if (dirty & /*$$scope, filtered*/
      2097168) {
        list_item_content_description_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content_description.$set(list_item_content_description_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content_description.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content_description.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content_description, detaching);
    }
  };
}
function create_content_slot_1(ctx) {
  let list_item_content;
  let current;
  list_item_content = new List.Item.Content({
    props: {
      slot: "content",
      $$slots: {
        description: [create_description_slot],
        title: [create_title_slot$1]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list_item_content.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_item_content_changes = {};
      if (dirty & /*$$scope, filtered*/
      2097168) {
        list_item_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list_item_content.$set(list_item_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item_content, detaching);
    }
  };
}
function create_each_block$7(ctx) {
  let list_item;
  let current;
  function click_handler_2() {
    return (
      /*click_handler_2*/
      ctx[13](
        /*item*/
        ctx[18]
      )
    );
  }
  list_item = new List.Item({
    props: {
      class: "cursor-pointer",
      $$slots: { content: [create_content_slot_1] },
      $$scope: { ctx }
    }
  });
  list_item.$on("click", click_handler_2);
  return {
    c() {
      create_component(list_item.$$.fragment);
    },
    l(nodes) {
      claim_component(list_item.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(list_item, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const list_item_changes = {};
      if (dirty & /*$$scope, filtered*/
      2097168) {
        list_item_changes.$$scope = { dirty, ctx };
      }
      list_item.$set(list_item_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(list_item.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list_item.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list_item, detaching);
    }
  };
}
function create_default_slot_2$4(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*filtered*/
    ctx[4]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$7(get_each_context$7(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*onLog, filtered*/
      80) {
        each_value = ensure_array_like(
          /*filtered*/
          ctx2[4]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$7(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$7(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_1$4(ctx) {
  let div1;
  let div0;
  let iconbutton;
  let t0;
  let div2;
  let input;
  let updating_value;
  let t1;
  let div3;
  let list;
  let current;
  iconbutton = new IconButton({ props: { data: mdiClose } });
  iconbutton.$on(
    "click",
    /*click_handler_1*/
    ctx[11]
  );
  function input_value_binding(value) {
    ctx[12](value);
  }
  let input_props = { name: "search", placeholder: "Search" };
  if (
    /*search*/
    ctx[2] !== void 0
  ) {
    input_props.value = /*search*/
    ctx[2];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  list = new List({
    props: {
      $$slots: { default: [create_default_slot_2$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      create_component(iconbutton.$$.fragment);
      t0 = space();
      div2 = element("div");
      create_component(input.$$.fragment);
      t1 = space();
      div3 = element("div");
      create_component(list.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(iconbutton.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", {});
      var div2_nodes = children(div2);
      claim_component(input.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t1 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      claim_component(list.$$.fragment, div3_nodes);
      div3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "absolute -top-4 -right-5 z-10");
      attr(div1, "class", "relative w-full");
      attr(div3, "class", "flex-grow overflow-auto");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      mount_component(iconbutton, div0, null);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div2, anchor);
      mount_component(input, div2, null);
      insert_hydration(target, t1, anchor);
      insert_hydration(target, div3, anchor);
      mount_component(list, div3, null);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (!updating_value && dirty & /*search*/
      4) {
        updating_value = true;
        input_changes.value = /*search*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      const list_changes = {};
      if (dirty & /*$$scope, filtered*/
      2097168) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      transition_in(input.$$.fragment, local);
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      transition_out(input.$$.fragment, local);
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t0);
        detach(div2);
        detach(t1);
        detach(div3);
      }
      destroy_component(iconbutton);
      destroy_component(input);
      destroy_component(list);
    }
  };
}
function create_body_slot$1(ctx) {
  let modal_content_body;
  let current;
  modal_content_body = new Modal.Content.Body({
    props: {
      slot: "body",
      class: "h-full",
      $$slots: { default: [create_default_slot_1$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content_body.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content_body.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content_body, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_body_changes = {};
      if (dirty & /*$$scope, filtered, search, open*/
      2097180) {
        modal_content_body_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content_body.$set(modal_content_body_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content_body.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content_body.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content_body, detaching);
    }
  };
}
function create_content_slot$2(ctx) {
  let modal_content;
  let current;
  modal_content = new Modal.Content({
    props: {
      slot: "content",
      $$slots: { body: [create_body_slot$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_changes = {};
      if (dirty & /*$$scope, filtered, search, open*/
      2097180) {
        modal_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content.$set(modal_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content, detaching);
    }
  };
}
function create_default_slot$8(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*open*/
    ctx[3] && create_if_block$9(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*open*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*open*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$9(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment$d(ctx) {
  let button;
  let t2;
  let portal;
  let current;
  button = new Button({
    props: {
      class: "w-full justify-start border border-border",
      $$slots: { default: [create_default_slot_5$3] },
      $$scope: { ctx }
    }
  });
  button.$on(
    "click",
    /*click_handler*/
    ctx[10]
  );
  portal = new Portal({
    props: {
      $$slots: { default: [create_default_slot$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
      t2 = space();
      create_component(portal.$$.fragment);
    },
    l(nodes) {
      claim_component(button.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(portal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(portal, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const button_changes = {};
      if (dirty & /*$$scope, selected, logId, placeholder*/
      2097187) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
      const portal_changes = {};
      if (dirty & /*$$scope, open, filtered, search*/
      2097180) {
        portal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      portal.$set(portal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      transition_in(portal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      transition_out(portal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(button, detaching);
      destroy_component(portal, detaching);
    }
  };
}
function instance$b($$self, $$props, $$invalidate) {
  let sorted;
  let $devices;
  component_subscribe($$self, devices, ($$value) => $$invalidate(15, $devices = $$value));
  let { logId } = $$props;
  let { logs = [] } = $$props;
  let { placeholder = "Select log" } = $$props;
  const dispatch = createEventDispatcher();
  let open = false;
  let search = "";
  let filtered = [];
  let selected;
  function filterCapabilities(value, s3) {
    const normalized = value.toLowerCase();
    if (value.length > 0) {
      $$invalidate(4, filtered = sorted.filter((d3) => d3.searchString.includes(normalized)));
    } else {
      $$invalidate(4, filtered = sorted);
    }
  }
  function onLog(log) {
    $$invalidate(0, logId = log.id);
    $$invalidate(3, open = false);
    dispatch("logId", logId);
  }
  function getOwnerName(uri) {
    var _a2;
    if (uri.startsWith("homey:device:")) {
      const prefix = "homey:device:";
      const id = uri.slice(prefix.length);
      return ((_a2 = $devices[id]) == null ? void 0 : _a2.name) ?? uri;
    } else if (uri.startsWith("homey:manager:apps")) {
      return "Homey Apps";
    } else if (uri.startsWith("homey:manager:system")) {
      return "Homey System";
    } else if (uri.startsWith("homey:manager:weather")) {
      return "Homey Weather";
    } else if (uri.startsWith("homey:manager:logic")) {
      return "Homey Logic";
    } else {
      return uri;
    }
  }
  const click_handler = () => $$invalidate(3, open = true);
  const click_handler_1 = () => $$invalidate(3, open = false);
  function input_value_binding(value) {
    search = value;
    $$invalidate(2, search);
  }
  const click_handler_2 = (item) => onLog(item.log);
  const func = () => $$invalidate(3, open = false);
  $$self.$$set = ($$props2) => {
    if ("logId" in $$props2)
      $$invalidate(0, logId = $$props2.logId);
    if ("logs" in $$props2)
      $$invalidate(8, logs = $$props2.logs);
    if ("placeholder" in $$props2)
      $$invalidate(1, placeholder = $$props2.placeholder);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*logs*/
    256) {
      $$invalidate(9, sorted = (logs ?? []).map((log) => {
        const ownerName = getOwnerName(log.ownerUri);
        return {
          log,
          ownerName,
          searchString: `${ownerName} ${log.title}`.toLowerCase()
        };
      }).sort((a3, b2) => {
        if (a3.searchString === b2.searchString)
          return 0;
        if (a3.searchString < b2.searchString)
          return -1;
        return 1;
      }));
    }
    if ($$self.$$.dirty & /*logId, logs*/
    257) {
      $$invalidate(5, selected = logId !== void 0 ? logs.find((d3) => d3.id === logId) : void 0);
    }
    if ($$self.$$.dirty & /*search, sorted*/
    516) {
      filterCapabilities(search);
    }
  };
  return [
    logId,
    placeholder,
    search,
    open,
    filtered,
    selected,
    onLog,
    getOwnerName,
    logs,
    sorted,
    click_handler,
    click_handler_1,
    input_value_binding,
    click_handler_2,
    func
  ];
}
class InsightPicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$b, create_fragment$d, safe_not_equal, { logId: 0, logs: 8, placeholder: 1 });
  }
}
function get_each_context$6(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[30] = list[i2];
  return child_ctx;
}
function get_each_context_1$2(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[30] = list[i2];
  return child_ctx;
}
function get_each_context_2(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[30] = list[i2];
  return child_ctx;
}
function create_each_block_2(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[30]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot_5$2(ctx) {
  let each_1_anchor;
  let current;
  let each_value_2 = ensure_array_like(
    /*types*/
    ctx[10]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_2.length; i2 += 1) {
    each_blocks[i2] = create_each_block_2(get_each_context_2(ctx, each_value_2, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*types*/
      1024) {
        each_value_2 = ensure_array_like(
          /*types*/
          ctx2[10]
        );
        let i2;
        for (i2 = 0; i2 < each_value_2.length; i2 += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_2(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_2.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_2.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot_2(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      class: "max-h-96 overflow-auto",
      $$slots: { default: [create_default_slot_5$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_default_slot_4$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Aggregation");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Aggregation");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_label_slot_2$1(ctx) {
  let divider_label;
  let current;
  divider_label = new Divider.Label({
    props: {
      slot: "label",
      $$slots: { default: [create_default_slot_4$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(divider_label.$$.fragment);
    },
    l(nodes) {
      claim_component(divider_label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(divider_label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const divider_label_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        divider_label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      divider_label.$set(divider_label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(divider_label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(divider_label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(divider_label, detaching);
    }
  };
}
function create_each_block_1$2(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[30]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot_3$3(ctx) {
  let each_1_anchor;
  let current;
  let each_value_1 = ensure_array_like(
    /*aggregations*/
    ctx[8]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*aggregations*/
      256) {
        each_value_1 = ensure_array_like(
          /*aggregations*/
          ctx2[8]
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$2(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_1$2(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot_1(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      class: "max-h-96 overflow-auto",
      $$slots: { default: [create_default_slot_3$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_if_block$8(ctx) {
  let select;
  let updating_value;
  let current;
  function select_value_binding(value) {
    ctx[16](value);
  }
  let select_props = {
    placeholder: "Sample rate",
    name: "sampleRate",
    $$slots: { options: [create_options_slot$2] },
    $$scope: { ctx }
  };
  if (
    /*sampleRate*/
    ctx[7] !== void 0
  ) {
    select_props.value = /*sampleRate*/
    ctx[7];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  return {
    c() {
      create_component(select.$$.fragment);
    },
    l(nodes) {
      claim_component(select.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty[0] & /*sampleRate*/
      128) {
        updating_value = true;
        select_changes.value = /*sampleRate*/
        ctx2[7];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select, detaching);
    }
  };
}
function create_each_block$6(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[30]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot_2$3(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*sampleRates*/
    ctx[9]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$6(get_each_context$6(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*sampleRates*/
      512) {
        each_value = ensure_array_like(
          /*sampleRates*/
          ctx2[9]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$6(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$6(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot$2(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      class: "max-h-96 overflow-auto",
      $$slots: { default: [create_default_slot_2$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_default_slot_1$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Colors");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Colors");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_label_slot_1$1(ctx) {
  let divider_label;
  let current;
  divider_label = new Divider.Label({
    props: {
      slot: "label",
      $$slots: { default: [create_default_slot_1$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(divider_label.$$.fragment);
    },
    l(nodes) {
      claim_component(divider_label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(divider_label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const divider_label_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        divider_label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      divider_label.$set(divider_label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(divider_label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(divider_label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(divider_label, detaching);
    }
  };
}
function create_default_slot$7(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Fill");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Fill");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_label_slot$2(ctx) {
  let toggle_contentleft_label;
  let current;
  toggle_contentleft_label = new Toggle$1.ContentLeft.Label({
    props: {
      slot: "label",
      $$slots: { default: [create_default_slot$7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(toggle_contentleft_label.$$.fragment);
    },
    l(nodes) {
      claim_component(toggle_contentleft_label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(toggle_contentleft_label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_contentleft_label_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        toggle_contentleft_label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      toggle_contentleft_label.$set(toggle_contentleft_label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle_contentleft_label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle_contentleft_label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle_contentleft_label, detaching);
    }
  };
}
function create_content_left_slot(ctx) {
  let toggle_contentleft;
  let current;
  toggle_contentleft = new Toggle$1.ContentLeft({
    props: {
      slot: "content-left",
      $$slots: { label: [create_label_slot$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(toggle_contentleft.$$.fragment);
    },
    l(nodes) {
      claim_component(toggle_contentleft.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(toggle_contentleft, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_contentleft_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        toggle_contentleft_changes.$$scope = { dirty, ctx: ctx2 };
      }
      toggle_contentleft.$set(toggle_contentleft_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle_contentleft.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle_contentleft.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle_contentleft, detaching);
    }
  };
}
function create_fragment$c(ctx) {
  let div1;
  let input;
  let updating_value;
  let t0;
  let select0;
  let updating_value_1;
  let t1;
  let divider0;
  let t2;
  let select1;
  let updating_value_2;
  let t3;
  let t4;
  let divider1;
  let t5;
  let h30;
  let t6_value = (
    /*type*/
    ctx[2].label + " color"
  );
  let t6;
  let t7;
  let thresholdeditor0;
  let updating_thresholds;
  let t8;
  let h31;
  let textContent = "Background color";
  let t10;
  let thresholdeditor1;
  let updating_thresholds_1;
  let t11;
  let div0;
  let toggle;
  let updating_on;
  let current;
  function input_value_binding(value) {
    ctx[13](value);
  }
  let input_props = {
    name: "title",
    placeholder: "Override title"
  };
  if (
    /*title*/
    ctx[1] !== void 0
  ) {
    input_props.value = /*title*/
    ctx[1];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  function select0_value_binding(value) {
    ctx[14](value);
  }
  let select0_props = {
    placeholder: "Type",
    name: "type",
    $$slots: { options: [create_options_slot_2] },
    $$scope: { ctx }
  };
  if (
    /*type*/
    ctx[2] !== void 0
  ) {
    select0_props.value = /*type*/
    ctx[2];
  }
  select0 = new Select({ props: select0_props });
  binding_callbacks.push(() => bind(select0, "value", select0_value_binding));
  divider0 = new Divider({
    props: {
      $$slots: { label: [create_label_slot_2$1] },
      $$scope: { ctx }
    }
  });
  function select1_value_binding(value) {
    ctx[15](value);
  }
  let select1_props = {
    placeholder: "Aggregation",
    name: "aggregation",
    $$slots: { options: [create_options_slot_1] },
    $$scope: { ctx }
  };
  if (
    /*aggregation*/
    ctx[6] !== void 0
  ) {
    select1_props.value = /*aggregation*/
    ctx[6];
  }
  select1 = new Select({ props: select1_props });
  binding_callbacks.push(() => bind(select1, "value", select1_value_binding));
  let if_block = (
    /*series*/
    ctx[0].aggregation !== void 0 && /*series*/
    ctx[0].aggregation !== "none" && create_if_block$8(ctx)
  );
  divider1 = new Divider({
    props: {
      $$slots: { label: [create_label_slot_1$1] },
      $$scope: { ctx }
    }
  });
  function thresholdeditor0_thresholds_binding(value) {
    ctx[17](value);
  }
  let thresholdeditor0_props = { colorMode: "rgba" };
  if (
    /*border*/
    ctx[3] !== void 0
  ) {
    thresholdeditor0_props.thresholds = /*border*/
    ctx[3];
  }
  thresholdeditor0 = new ThresholdEditor({ props: thresholdeditor0_props });
  binding_callbacks.push(() => bind(thresholdeditor0, "thresholds", thresholdeditor0_thresholds_binding));
  function thresholdeditor1_thresholds_binding(value) {
    ctx[18](value);
  }
  let thresholdeditor1_props = { colorMode: "rgba" };
  if (
    /*background*/
    ctx[4] !== void 0
  ) {
    thresholdeditor1_props.thresholds = /*background*/
    ctx[4];
  }
  thresholdeditor1 = new ThresholdEditor({ props: thresholdeditor1_props });
  binding_callbacks.push(() => bind(thresholdeditor1, "thresholds", thresholdeditor1_thresholds_binding));
  function toggle_on_binding(value) {
    ctx[19](value);
  }
  let toggle_props = {
    name: "fill",
    $$slots: {
      "content-left": [create_content_left_slot]
    },
    $$scope: { ctx }
  };
  if (
    /*fill*/
    ctx[5] !== void 0
  ) {
    toggle_props.on = /*fill*/
    ctx[5];
  }
  toggle = new Toggle$1({ props: toggle_props });
  binding_callbacks.push(() => bind(toggle, "on", toggle_on_binding));
  return {
    c() {
      div1 = element("div");
      create_component(input.$$.fragment);
      t0 = space();
      create_component(select0.$$.fragment);
      t1 = space();
      create_component(divider0.$$.fragment);
      t2 = space();
      create_component(select1.$$.fragment);
      t3 = space();
      if (if_block)
        if_block.c();
      t4 = space();
      create_component(divider1.$$.fragment);
      t5 = space();
      h30 = element("h3");
      t6 = text(t6_value);
      t7 = space();
      create_component(thresholdeditor0.$$.fragment);
      t8 = space();
      h31 = element("h3");
      h31.textContent = textContent;
      t10 = space();
      create_component(thresholdeditor1.$$.fragment);
      t11 = space();
      div0 = element("div");
      create_component(toggle.$$.fragment);
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", {});
      var div1_nodes = children(div1);
      claim_component(input.$$.fragment, div1_nodes);
      t0 = claim_space(div1_nodes);
      claim_component(select0.$$.fragment, div1_nodes);
      t1 = claim_space(div1_nodes);
      claim_component(divider0.$$.fragment, div1_nodes);
      t2 = claim_space(div1_nodes);
      claim_component(select1.$$.fragment, div1_nodes);
      t3 = claim_space(div1_nodes);
      if (if_block)
        if_block.l(div1_nodes);
      t4 = claim_space(div1_nodes);
      claim_component(divider1.$$.fragment, div1_nodes);
      t5 = claim_space(div1_nodes);
      h30 = claim_element(div1_nodes, "H3", { class: true });
      var h30_nodes = children(h30);
      t6 = claim_text(h30_nodes, t6_value);
      h30_nodes.forEach(detach);
      t7 = claim_space(div1_nodes);
      claim_component(thresholdeditor0.$$.fragment, div1_nodes);
      t8 = claim_space(div1_nodes);
      h31 = claim_element(div1_nodes, "H3", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(h31) !== "svelte-1is0tyi")
        h31.textContent = textContent;
      t10 = claim_space(div1_nodes);
      claim_component(thresholdeditor1.$$.fragment, div1_nodes);
      t11 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(toggle.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h30, "class", "mb-4");
      attr(h31, "class", "mb-4 mt-4");
      attr(div0, "class", "mt-4");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      mount_component(input, div1, null);
      append_hydration(div1, t0);
      mount_component(select0, div1, null);
      append_hydration(div1, t1);
      mount_component(divider0, div1, null);
      append_hydration(div1, t2);
      mount_component(select1, div1, null);
      append_hydration(div1, t3);
      if (if_block)
        if_block.m(div1, null);
      append_hydration(div1, t4);
      mount_component(divider1, div1, null);
      append_hydration(div1, t5);
      append_hydration(div1, h30);
      append_hydration(h30, t6);
      append_hydration(div1, t7);
      mount_component(thresholdeditor0, div1, null);
      append_hydration(div1, t8);
      append_hydration(div1, h31);
      append_hydration(div1, t10);
      mount_component(thresholdeditor1, div1, null);
      append_hydration(div1, t11);
      append_hydration(div1, div0);
      mount_component(toggle, div0, null);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (!updating_value && dirty[0] & /*title*/
      2) {
        updating_value = true;
        input_changes.value = /*title*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      const select0_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        select0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value_1 && dirty[0] & /*type*/
      4) {
        updating_value_1 = true;
        select0_changes.value = /*type*/
        ctx2[2];
        add_flush_callback(() => updating_value_1 = false);
      }
      select0.$set(select0_changes);
      const divider0_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        divider0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      divider0.$set(divider0_changes);
      const select1_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        select1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value_2 && dirty[0] & /*aggregation*/
      64) {
        updating_value_2 = true;
        select1_changes.value = /*aggregation*/
        ctx2[6];
        add_flush_callback(() => updating_value_2 = false);
      }
      select1.$set(select1_changes);
      if (
        /*series*/
        ctx2[0].aggregation !== void 0 && /*series*/
        ctx2[0].aggregation !== "none"
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*series*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$8(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, t4);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const divider1_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        divider1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      divider1.$set(divider1_changes);
      if ((!current || dirty[0] & /*type*/
      4) && t6_value !== (t6_value = /*type*/
      ctx2[2].label + " color"))
        set_data(t6, t6_value);
      const thresholdeditor0_changes = {};
      if (!updating_thresholds && dirty[0] & /*border*/
      8) {
        updating_thresholds = true;
        thresholdeditor0_changes.thresholds = /*border*/
        ctx2[3];
        add_flush_callback(() => updating_thresholds = false);
      }
      thresholdeditor0.$set(thresholdeditor0_changes);
      const thresholdeditor1_changes = {};
      if (!updating_thresholds_1 && dirty[0] & /*background*/
      16) {
        updating_thresholds_1 = true;
        thresholdeditor1_changes.thresholds = /*background*/
        ctx2[4];
        add_flush_callback(() => updating_thresholds_1 = false);
      }
      thresholdeditor1.$set(thresholdeditor1_changes);
      const toggle_changes = {};
      if (dirty[1] & /*$$scope*/
      64) {
        toggle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_on && dirty[0] & /*fill*/
      32) {
        updating_on = true;
        toggle_changes.on = /*fill*/
        ctx2[5];
        add_flush_callback(() => updating_on = false);
      }
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      transition_in(select0.$$.fragment, local);
      transition_in(divider0.$$.fragment, local);
      transition_in(select1.$$.fragment, local);
      transition_in(if_block);
      transition_in(divider1.$$.fragment, local);
      transition_in(thresholdeditor0.$$.fragment, local);
      transition_in(thresholdeditor1.$$.fragment, local);
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      transition_out(select0.$$.fragment, local);
      transition_out(divider0.$$.fragment, local);
      transition_out(select1.$$.fragment, local);
      transition_out(if_block);
      transition_out(divider1.$$.fragment, local);
      transition_out(thresholdeditor0.$$.fragment, local);
      transition_out(thresholdeditor1.$$.fragment, local);
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(input);
      destroy_component(select0);
      destroy_component(divider0);
      destroy_component(select1);
      if (if_block)
        if_block.d();
      destroy_component(divider1);
      destroy_component(thresholdeditor0);
      destroy_component(thresholdeditor1);
      destroy_component(toggle);
    }
  };
}
function instance$a($$self, $$props, $$invalidate) {
  let { series } = $$props;
  let { index: index2 } = $$props;
  const dispatch = createEventDispatcher();
  const aggregations = [
    { value: "none", label: "No aggregation" },
    { value: "min", label: "Min" },
    { value: "max", label: "Max" },
    { value: "sum", label: "Sum" },
    { value: "avg", label: "Avg" },
    { value: "first", label: "First" },
    { value: "last", label: "Last" }
  ];
  const sampleRates = [
    { value: "10", label: "10 seconds" },
    { value: "20", label: "20 seconds" },
    { value: "30", label: "30 seconds" },
    { value: "60", label: "1 min" },
    { value: "300", label: "5 min" },
    { value: "600", label: "10 min" },
    { value: "900", label: "15 min" },
    { value: "1200", label: "20 min" },
    { value: "1800", label: "30 min" },
    { value: "3600", label: "1 hour" },
    { value: "7200", label: "2 hours" },
    { value: "10800", label: "3 hours" },
    { value: "21600", label: "6 hours" },
    { value: "43200", label: "12 hours" },
    { value: "86400", label: "24 hours" }
  ];
  const types = [{ value: "line", label: "Line" }, { value: "bar", label: "Bar" }];
  let insightId;
  let title;
  let type;
  let border;
  let background;
  let fill2;
  let aggregation;
  let sampleRate;
  function onSeries(s3) {
    $$invalidate(12, insightId = series.insightId);
    $$invalidate(1, title = series.title);
    $$invalidate(2, type = types.find((t2) => t2.value === (series.type ?? "line")));
    $$invalidate(5, fill2 = series.fill ?? false);
    $$invalidate(6, aggregation = aggregations.find((a3) => a3.value === ((series == null ? void 0 : series.aggregation) ?? "none")));
    $$invalidate(7, sampleRate = sampleRates.find((r) => r.value === "" + ((series == null ? void 0 : series.sampleRate) ?? 60)));
    $$invalidate(3, border = s3.border ?? [
      {
        id: v4(),
        color: colors[index2 % colors.length],
        value: Number.MIN_SAFE_INTEGER
      }
    ]);
    $$invalidate(4, background = s3.background ?? [
      {
        id: v4(),
        color: colors[index2 % colors.length],
        value: Number.MIN_SAFE_INTEGER
      }
    ]);
  }
  function onInsight(value) {
    if (value == void 0 || value === series.insightId) {
      return;
    }
    dispatch("series", { ...series, insightId });
  }
  function onTitle(value) {
    if (value === series.title) {
      return;
    }
    dispatch("series", { ...series, title: value });
  }
  function onType(option) {
    if (option == void 0 || option.value === series.type) {
      return;
    }
    dispatch("series", { ...series, type: option.value });
  }
  function onBorder(value) {
    if (value === series.border) {
      return;
    }
    dispatch("series", { ...series, border: value });
  }
  function onBackground(value) {
    if (value === series.background) {
      return;
    }
    dispatch("series", { ...series, background: value });
  }
  function onFill(value) {
    if (value === series.fill) {
      return;
    }
    dispatch("series", { ...series, fill: value });
  }
  function onAggregation(option) {
    if (option == void 0 || option.value === series.aggregation) {
      return;
    }
    dispatch("series", { ...series, aggregation: option.value });
  }
  function onSampleRate(option) {
    if (option == void 0 || Number(option.value) === series.sampleRate) {
      return;
    }
    dispatch("series", {
      ...series,
      sampleRate: Number(option.value)
    });
  }
  function input_value_binding(value) {
    title = value;
    $$invalidate(1, title);
  }
  function select0_value_binding(value) {
    type = value;
    $$invalidate(2, type);
  }
  function select1_value_binding(value) {
    aggregation = value;
    $$invalidate(6, aggregation);
  }
  function select_value_binding(value) {
    sampleRate = value;
    $$invalidate(7, sampleRate);
  }
  function thresholdeditor0_thresholds_binding(value) {
    border = value;
    $$invalidate(3, border);
  }
  function thresholdeditor1_thresholds_binding(value) {
    background = value;
    $$invalidate(4, background);
  }
  function toggle_on_binding(value) {
    fill2 = value;
    $$invalidate(5, fill2);
  }
  $$self.$$set = ($$props2) => {
    if ("series" in $$props2)
      $$invalidate(0, series = $$props2.series);
    if ("index" in $$props2)
      $$invalidate(11, index2 = $$props2.index);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*series*/
    1) {
      onSeries(series);
    }
    if ($$self.$$.dirty[0] & /*insightId*/
    4096) {
      onInsight(insightId);
    }
    if ($$self.$$.dirty[0] & /*title*/
    2) {
      onTitle(title);
    }
    if ($$self.$$.dirty[0] & /*type*/
    4) {
      onType(type);
    }
    if ($$self.$$.dirty[0] & /*border*/
    8) {
      onBorder(border);
    }
    if ($$self.$$.dirty[0] & /*background*/
    16) {
      onBackground(background);
    }
    if ($$self.$$.dirty[0] & /*fill*/
    32) {
      onFill(fill2);
    }
    if ($$self.$$.dirty[0] & /*aggregation*/
    64) {
      onAggregation(aggregation);
    }
    if ($$self.$$.dirty[0] & /*sampleRate*/
    128) {
      onSampleRate(sampleRate);
    }
  };
  return [
    series,
    title,
    type,
    border,
    background,
    fill2,
    aggregation,
    sampleRate,
    aggregations,
    sampleRates,
    types,
    index2,
    insightId,
    input_value_binding,
    select0_value_binding,
    select1_value_binding,
    select_value_binding,
    thresholdeditor0_thresholds_binding,
    thresholdeditor1_thresholds_binding,
    toggle_on_binding
  ];
}
class InsightEditorSeries extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$a, create_fragment$c, safe_not_equal, { series: 0, index: 11 }, null, [-1, -1]);
  }
}
function get_each_context$5(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[22] = list[i2];
  child_ctx[24] = i2;
  return child_ctx;
}
function get_each_context_1$1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[25] = list[i2];
  return child_ctx;
}
function create_each_block_1$1(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[25]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot_3$2(ctx) {
  let each_1_anchor;
  let current;
  let each_value_1 = ensure_array_like(
    /*resolutions*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*resolutions*/
      32) {
        each_value_1 = ensure_array_like(
          /*resolutions*/
          ctx2[5]
        );
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1$1(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block_1$1(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot$1(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      class: "max-h-96 overflow-auto",
      $$slots: { default: [create_default_slot_3$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty & /*$$scope*/
      268435456) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_icon_slot(ctx) {
  let button_icon;
  let current;
  button_icon = new Button.Icon({ props: { slot: "icon", data: mdiDelete } });
  return {
    c() {
      create_component(button_icon.$$.fragment);
    },
    l(nodes) {
      claim_component(button_icon.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(button_icon, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(button_icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button_icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(button_icon, detaching);
    }
  };
}
function create_default_slot_2$2(ctx) {
  let div;
  let button;
  let t0;
  let span;
  let t1_value = (
    /*getLogName*/
    ctx[8](
      /*s*/
      ctx[22].insightId
    ) + ""
  );
  let t1;
  let t2;
  let current;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[15](
        /*i*/
        ctx[24]
      )
    );
  }
  button = new Button({
    props: {
      class: "mr-4",
      $$slots: { icon: [create_icon_slot] },
      $$scope: { ctx }
    }
  });
  button.$on("click", click_handler);
  return {
    c() {
      div = element("div");
      create_component(button.$$.fragment);
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      claim_component(button.$$.fragment, div_nodes);
      t0 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", {});
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      div_nodes.forEach(detach);
      t2 = claim_space(nodes);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(button, div, null);
      append_hydration(div, t0);
      append_hydration(div, span);
      append_hydration(span, t1);
      insert_hydration(target, t2, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const button_changes = {};
      if (dirty & /*$$scope*/
      268435456) {
        button_changes.$$scope = { dirty, ctx };
      }
      button.$set(button_changes);
      if ((!current || dirty & /*series*/
      4) && t1_value !== (t1_value = /*getLogName*/
      ctx[8](
        /*s*/
        ctx[22].insightId
      ) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
      }
      destroy_component(button);
    }
  };
}
function create_title_slot(ctx) {
  let accordion_item_title;
  let current;
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[16](
        /*s*/
        ctx[22]
      )
    );
  }
  accordion_item_title = new Accordion.Item.Title({
    props: {
      slot: "title",
      $$slots: { default: [create_default_slot_2$2] },
      $$scope: { ctx }
    }
  });
  accordion_item_title.$on("click", click_handler_1);
  return {
    c() {
      create_component(accordion_item_title.$$.fragment);
    },
    l(nodes) {
      claim_component(accordion_item_title.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(accordion_item_title, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const accordion_item_title_changes = {};
      if (dirty & /*$$scope, series*/
      268435460) {
        accordion_item_title_changes.$$scope = { dirty, ctx };
      }
      accordion_item_title.$set(accordion_item_title_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(accordion_item_title.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(accordion_item_title.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(accordion_item_title, detaching);
    }
  };
}
function create_default_slot_1$2(ctx) {
  let insighteditorseries;
  let t2;
  let current;
  function series_handler(...args) {
    return (
      /*series_handler*/
      ctx[14](
        /*i*/
        ctx[24],
        ...args
      )
    );
  }
  insighteditorseries = new InsightEditorSeries({
    props: {
      series: (
        /*s*/
        ctx[22]
      ),
      index: (
        /*i*/
        ctx[24]
      )
    }
  });
  insighteditorseries.$on("series", series_handler);
  return {
    c() {
      create_component(insighteditorseries.$$.fragment);
      t2 = space();
    },
    l(nodes) {
      claim_component(insighteditorseries.$$.fragment, nodes);
      t2 = claim_space(nodes);
    },
    m(target, anchor) {
      mount_component(insighteditorseries, target, anchor);
      insert_hydration(target, t2, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const insighteditorseries_changes = {};
      if (dirty & /*series*/
      4)
        insighteditorseries_changes.series = /*s*/
        ctx[22];
      insighteditorseries.$set(insighteditorseries_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(insighteditorseries.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(insighteditorseries.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(insighteditorseries, detaching);
    }
  };
}
function create_content_slot$1(ctx) {
  let accordion_item_content;
  let current;
  accordion_item_content = new Accordion.Item.Content({
    props: {
      slot: "content",
      class: "p-4",
      $$slots: { default: [create_default_slot_1$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(accordion_item_content.$$.fragment);
    },
    l(nodes) {
      claim_component(accordion_item_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(accordion_item_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const accordion_item_content_changes = {};
      if (dirty & /*$$scope, series*/
      268435460) {
        accordion_item_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      accordion_item_content.$set(accordion_item_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(accordion_item_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(accordion_item_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(accordion_item_content, detaching);
    }
  };
}
function create_each_block$5(ctx) {
  let accordion_item;
  let current;
  accordion_item = new Accordion.Item({
    props: {
      open: (
        /*openInsightId*/
        ctx[1] === /*s*/
        ctx[22].insightId
      ),
      class: "overflow-visible",
      $$slots: {
        content: [create_content_slot$1],
        title: [create_title_slot]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(accordion_item.$$.fragment);
    },
    l(nodes) {
      claim_component(accordion_item.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(accordion_item, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const accordion_item_changes = {};
      if (dirty & /*openInsightId, series*/
      6)
        accordion_item_changes.open = /*openInsightId*/
        ctx2[1] === /*s*/
        ctx2[22].insightId;
      if (dirty & /*$$scope, series, openInsightId*/
      268435462) {
        accordion_item_changes.$$scope = { dirty, ctx: ctx2 };
      }
      accordion_item.$set(accordion_item_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(accordion_item.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(accordion_item.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(accordion_item, detaching);
    }
  };
}
function create_default_slot$6(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*series*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$5(get_each_context$5(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*openInsightId, series, onSeries, undefined, getLogName, removeInsight*/
      902) {
        each_value = ensure_array_like(
          /*series*/
          ctx2[2]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$5(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$5(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment$b(ctx) {
  let insightpicker;
  let updating_logId;
  let t0;
  let select;
  let updating_value;
  let t1;
  let accordion;
  let current;
  function insightpicker_logId_binding(value) {
    ctx[11](value);
  }
  let insightpicker_props = {
    logs: Object.values(
      /*$insights*/
      ctx[4]
    ),
    placeholder: "Add insight"
  };
  if (
    /*selectedLogId*/
    ctx[3] !== void 0
  ) {
    insightpicker_props.logId = /*selectedLogId*/
    ctx[3];
  }
  insightpicker = new InsightPicker({ props: insightpicker_props });
  binding_callbacks.push(() => bind(insightpicker, "logId", insightpicker_logId_binding));
  insightpicker.$on(
    "logId",
    /*logId_handler*/
    ctx[12]
  );
  function select_value_binding(value) {
    ctx[13](value);
  }
  let select_props = {
    placeholder: "Resolution",
    name: "resolution",
    class: "mt-4",
    $$slots: { options: [create_options_slot$1] },
    $$scope: { ctx }
  };
  if (
    /*resolution*/
    ctx[0] !== void 0
  ) {
    select_props.value = /*resolution*/
    ctx[0];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  accordion = new Accordion({
    props: {
      class: "mt-4",
      $$slots: { default: [create_default_slot$6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(insightpicker.$$.fragment);
      t0 = space();
      create_component(select.$$.fragment);
      t1 = space();
      create_component(accordion.$$.fragment);
    },
    l(nodes) {
      claim_component(insightpicker.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(select.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(accordion.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(insightpicker, target, anchor);
      insert_hydration(target, t0, anchor);
      mount_component(select, target, anchor);
      insert_hydration(target, t1, anchor);
      mount_component(accordion, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const insightpicker_changes = {};
      if (dirty & /*$insights*/
      16)
        insightpicker_changes.logs = Object.values(
          /*$insights*/
          ctx2[4]
        );
      if (!updating_logId && dirty & /*selectedLogId*/
      8) {
        updating_logId = true;
        insightpicker_changes.logId = /*selectedLogId*/
        ctx2[3];
        add_flush_callback(() => updating_logId = false);
      }
      insightpicker.$set(insightpicker_changes);
      const select_changes = {};
      if (dirty & /*$$scope*/
      268435456) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value && dirty & /*resolution*/
      1) {
        updating_value = true;
        select_changes.value = /*resolution*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      select.$set(select_changes);
      const accordion_changes = {};
      if (dirty & /*$$scope, series, openInsightId*/
      268435462) {
        accordion_changes.$$scope = { dirty, ctx: ctx2 };
      }
      accordion.$set(accordion_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(insightpicker.$$.fragment, local);
      transition_in(select.$$.fragment, local);
      transition_in(accordion.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(insightpicker.$$.fragment, local);
      transition_out(select.$$.fragment, local);
      transition_out(accordion.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(insightpicker, detaching);
      destroy_component(select, detaching);
      destroy_component(accordion, detaching);
    }
  };
}
function instance$9($$self, $$props, $$invalidate) {
  let $devices;
  let $insights;
  component_subscribe($$self, devices, ($$value) => $$invalidate(17, $devices = $$value));
  component_subscribe($$self, insights, ($$value) => $$invalidate(4, $insights = $$value));
  const dispatch = createEventDispatcher();
  const resolutions = [
    { value: "lastHour", label: "Last hour" },
    {
      value: "last6Hours",
      label: "Last 6 hours"
    },
    {
      value: "last24Hours",
      label: "Last 24 hours"
    },
    { value: "last7Days", label: "Last 7 days" },
    {
      value: "last14Days",
      label: "Last 14 days"
    },
    {
      value: "last31Days",
      label: "Last 31 days"
    },
    { value: "today", label: "Today" },
    { value: "thisWeek", label: "This week" },
    { value: "thisMonth", label: "This month" },
    { value: "thisYear", label: "This year" },
    { value: "yesterday", label: "Yesterday" },
    { value: "lastWeek", label: "Last week" },
    { value: "lastMonth", label: "Last month" },
    { value: "lastYear", label: "Last year" },
    {
      value: "last2Years",
      label: "Last 2 years"
    }
  ];
  let { settings } = $$props;
  let openInsightId;
  let resolution;
  let series = [];
  let selectedLogId;
  function onSettings(s3) {
    $$invalidate(0, resolution = resolutions.find((r) => r.value === (settings.resolution ?? "today")));
    $$invalidate(2, series = [...(settings == null ? void 0 : settings.series) ?? []]);
  }
  function onResolution(option) {
    if (option.value === settings.resolution) {
      return;
    }
    dispatch("settings", { ...settings, resolution: option.value });
  }
  function onLog(logId) {
    const updatedSeries = [...series, { insightId: logId }];
    $$invalidate(3, selectedLogId = void 0);
    dispatch("settings", { ...settings, series: updatedSeries });
  }
  function onSeries(index2, s3) {
    const updatedSeries = [...series];
    updatedSeries[index2] = s3;
    dispatch("settings", { ...settings, series: updatedSeries });
  }
  function getLogName(logId) {
    if (logId !== void 0) {
      const log = $insights[logId];
      return getOwnerName(log.ownerUri) + " - " + log.title;
    }
    return "Unknown";
  }
  function getOwnerName(uri) {
    var _a2;
    if (uri.startsWith("homey:device:")) {
      const prefix = "homey:device:";
      const id = uri.slice(prefix.length);
      return ((_a2 = $devices[id]) == null ? void 0 : _a2.name) ?? uri;
    } else if (uri.startsWith("homey:manager:apps")) {
      return "Homey Apps";
    } else if (uri.startsWith("homey:manager:system")) {
      return "Homey System";
    } else if (uri.startsWith("homey:manager:weather")) {
      return "Homey Weather";
    } else if (uri.startsWith("homey:manager:logic")) {
      return "Homey Logic";
    } else {
      return uri;
    }
  }
  function removeInsight(index2) {
    const updatedSeries = [...series.filter((s3, i2) => i2 !== index2)];
    dispatch("settings", { ...settings, series: updatedSeries });
  }
  function insightpicker_logId_binding(value) {
    selectedLogId = value;
    $$invalidate(3, selectedLogId);
  }
  const logId_handler = (e2) => onLog(e2.detail);
  function select_value_binding(value) {
    resolution = value;
    $$invalidate(0, resolution);
  }
  const series_handler = (i2, e2) => onSeries(i2, e2.detail);
  const click_handler = (i2) => removeInsight(i2);
  const click_handler_1 = (s3) => openInsightId !== s3.insightId ? $$invalidate(1, openInsightId = s3.insightId) : $$invalidate(1, openInsightId = void 0);
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(10, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1024) {
      onSettings();
    }
    if ($$self.$$.dirty & /*resolution*/
    1) {
      onResolution(resolution);
    }
  };
  return [
    resolution,
    openInsightId,
    series,
    selectedLogId,
    $insights,
    resolutions,
    onLog,
    onSeries,
    getLogName,
    removeInsight,
    settings,
    insightpicker_logId_binding,
    logId_handler,
    select_value_binding,
    series_handler,
    click_handler,
    click_handler_1
  ];
}
class InsightEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$9, create_fragment$b, safe_not_equal, { settings: 10 });
  }
}
function create$1() {
  return {
    id: v4(),
    type: "insight",
    version: 5
  };
}
function migrate$2(settings) {
  while (settings.version !== 5) {
    settings = migrateOnce$2(settings);
  }
  return settings;
}
function migrateOnce$2(settings) {
  switch (settings.version) {
    case 5:
      return settings;
    case 4:
      return migrate_v4_v5(settings);
    case 3:
      return migrate_v3_v4(settings);
    case 2:
      return migrate_v2_v3(settings);
    case 1:
    default:
      return migrate_v1_v2$1(settings);
  }
}
function migrate_v4_v5(v4$1) {
  const settings = {
    id: v4$1.id,
    type: v4$1.type,
    version: 5,
    resolution: v4$1.resolution,
    series: (v4$1.series ?? []).map((s3) => ({
      insightId: s3.insightId,
      aggregation: s3.aggregation,
      sampleRate: s3.sampleRate,
      title: s3.title,
      type: s3.type,
      fill: s3.fill,
      border: s3.borderColor ? [{ id: v4(), color: s3.borderColor, value: Number.MIN_SAFE_INTEGER }] : void 0,
      background: s3.backgroundColor ? [{ id: v4(), color: s3.backgroundColor, value: Number.MIN_SAFE_INTEGER }] : void 0
    }))
  };
  return settings;
}
function migrate_v3_v4(v3) {
  const settings = {
    id: v3.id,
    type: v3.type,
    version: 4,
    series: (v3.series ?? []).map((s3) => ({ ...s3, type: "line" }))
  };
  return settings;
}
function migrate_v2_v3(v2) {
  const settings = {
    id: v2.id,
    type: v2.type,
    version: 3,
    resolution: v2.resolution,
    series: [{ insightId: v2.insightId, aggregation: v2.aggregation, sampleRate: v2.sampleRate }]
  };
  return settings;
}
function migrate_v1_v2$1(v1) {
  var _a2;
  const settings = {
    id: v1.id,
    type: v1.type,
    version: 2,
    insightId: ((_a2 = v1.insightId) == null ? void 0 : _a2.startsWith("homey:")) ? v1.insightId : "homey:device:" + v1.deviceId + ":" + v1.insightId,
    resolution: v1.resolution,
    aggregation: "none",
    sampleRate: void 0
  };
  return settings;
}
function create_if_block$7(ctx) {
  let input;
  let updating_value;
  let t2;
  let div;
  let toggle;
  let updating_on;
  let current;
  function input_value_binding(value) {
    ctx[7](value);
  }
  let input_props = {
    name: "title",
    placeholder: (
      /*capability*/
      ctx[3].title
    ),
    class: "mt-2"
  };
  if (
    /*title*/
    ctx[2] !== void 0
  ) {
    input_props.value = /*title*/
    ctx[2];
  }
  input = new Input({ props: input_props });
  binding_callbacks.push(() => bind(input, "value", input_value_binding));
  function toggle_on_binding(value) {
    ctx[8](value);
  }
  let toggle_props = {
    name: "hideMinMax",
    $$slots: {
      "content-right": [create_content_right_slot]
    },
    $$scope: { ctx }
  };
  if (
    /*hideMinMax*/
    ctx[0] !== void 0
  ) {
    toggle_props.on = /*hideMinMax*/
    ctx[0];
  }
  toggle = new Toggle$1({ props: toggle_props });
  binding_callbacks.push(() => bind(toggle, "on", toggle_on_binding));
  return {
    c() {
      create_component(input.$$.fragment);
      t2 = space();
      div = element("div");
      create_component(toggle.$$.fragment);
      this.h();
    },
    l(nodes) {
      claim_component(input.$$.fragment, nodes);
      t2 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(toggle.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "pt-4");
    },
    m(target, anchor) {
      mount_component(input, target, anchor);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, div, anchor);
      mount_component(toggle, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (dirty & /*capability*/
      8)
        input_changes.placeholder = /*capability*/
        ctx2[3].title;
      if (!updating_value && dirty & /*title*/
      4) {
        updating_value = true;
        input_changes.value = /*title*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      input.$set(input_changes);
      const toggle_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        toggle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_on && dirty & /*hideMinMax*/
      1) {
        updating_on = true;
        toggle_changes.on = /*hideMinMax*/
        ctx2[0];
        add_flush_callback(() => updating_on = false);
      }
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(div);
      }
      destroy_component(input, detaching);
      destroy_component(toggle);
    }
  };
}
function create_default_slot$5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Hide min max");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Hide min max");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_label_slot$1(ctx) {
  let toggle_contentright_label;
  let current;
  toggle_contentright_label = new Toggle$1.ContentRight.Label({
    props: {
      slot: "label",
      $$slots: { default: [create_default_slot$5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(toggle_contentright_label.$$.fragment);
    },
    l(nodes) {
      claim_component(toggle_contentright_label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(toggle_contentright_label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_contentright_label_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        toggle_contentright_label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      toggle_contentright_label.$set(toggle_contentright_label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle_contentright_label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle_contentright_label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle_contentright_label, detaching);
    }
  };
}
function create_content_right_slot(ctx) {
  let toggle_contentright;
  let current;
  toggle_contentright = new Toggle$1.ContentRight({
    props: {
      slot: "content-right",
      $$slots: { label: [create_label_slot$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(toggle_contentright.$$.fragment);
    },
    l(nodes) {
      claim_component(toggle_contentright.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(toggle_contentright, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_contentright_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        toggle_contentright_changes.$$scope = { dirty, ctx: ctx2 };
      }
      toggle_contentright.$set(toggle_contentright_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle_contentright.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle_contentright.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle_contentright, detaching);
    }
  };
}
function create_fragment$a(ctx) {
  let div;
  let capabilitypicker;
  let updating_capabilityUri;
  let t2;
  let if_block_anchor;
  let current;
  function capabilitypicker_capabilityUri_binding(value) {
    ctx[5](value);
  }
  let capabilitypicker_props = { capabilityFilter };
  if (
    /*capabilityUri*/
    ctx[1] !== void 0
  ) {
    capabilitypicker_props.capabilityUri = /*capabilityUri*/
    ctx[1];
  }
  capabilitypicker = new CapabilityPicker({ props: capabilitypicker_props });
  binding_callbacks.push(() => bind(capabilitypicker, "capabilityUri", capabilitypicker_capabilityUri_binding));
  capabilitypicker.$on(
    "capability",
    /*capability_handler*/
    ctx[6]
  );
  let if_block = (
    /*capability*/
    ctx[3] && create_if_block$7(ctx)
  );
  return {
    c() {
      div = element("div");
      create_component(capabilitypicker.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(capabilitypicker.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      t2 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "class", "mt-2");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(capabilitypicker, div, null);
      insert_hydration(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const capabilitypicker_changes = {};
      if (!updating_capabilityUri && dirty & /*capabilityUri*/
      2) {
        updating_capabilityUri = true;
        capabilitypicker_changes.capabilityUri = /*capabilityUri*/
        ctx2[1];
        add_flush_callback(() => updating_capabilityUri = false);
      }
      capabilitypicker.$set(capabilitypicker_changes);
      if (
        /*capability*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*capability*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$7(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(capabilitypicker.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(capabilitypicker.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
        detach(if_block_anchor);
      }
      destroy_component(capabilitypicker);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function capabilityFilter(capability2) {
  return capability2.setable && capability2.type === "number" && capability2.min !== void 0 && capability2.max !== void 0;
}
function instance$8($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let hideMinMax = false;
  let capabilityUri;
  let title;
  let capability;
  function onSettings(s3) {
    $$invalidate(1, capabilityUri = s3 == null ? void 0 : s3.capabilityUri);
    $$invalidate(2, title = s3 == null ? void 0 : s3.title);
    $$invalidate(0, hideMinMax = (s3 == null ? void 0 : s3.hideMinMax) ?? false);
  }
  function onCapability(id) {
    if (id !== settings.capabilityUri) {
      dispatch("settings", { ...settings, capabilityUri: id });
    }
  }
  function onTitle(t2) {
    const value = t2 !== void 0 && t2.length > 0 ? t2 : void 0;
    if (value !== settings.title) {
      dispatch("settings", { ...settings, title: value });
    }
  }
  function onHideMinMax(hide) {
    if (hide !== settings.hideMinMax) {
      dispatch("settings", { ...settings, hideMinMax: hide });
    }
  }
  function capabilitypicker_capabilityUri_binding(value) {
    capabilityUri = value;
    $$invalidate(1, capabilityUri);
  }
  const capability_handler = (c2) => $$invalidate(3, capability = c2.detail);
  function input_value_binding(value) {
    title = value;
    $$invalidate(2, title);
  }
  function toggle_on_binding(value) {
    hideMinMax = value;
    $$invalidate(0, hideMinMax);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(4, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    16) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*capabilityUri*/
    2) {
      onCapability(capabilityUri);
    }
    if ($$self.$$.dirty & /*title*/
    4) {
      onTitle(title);
    }
    if ($$self.$$.dirty & /*hideMinMax*/
    1) {
      onHideMinMax(hideMinMax);
    }
  };
  return [
    hideMinMax,
    capabilityUri,
    title,
    capability,
    settings,
    capabilitypicker_capabilityUri_binding,
    capability_handler,
    input_value_binding,
    toggle_on_binding
  ];
}
class SliderEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$8, create_fragment$a, safe_not_equal, { settings: 4 });
  }
}
function create_else_block_1(ctx) {
  var _a2, _b2;
  let div4;
  let div1;
  let div0;
  let h12;
  let t0_value = (
    /*formatValue*/
    (ctx[4](
      /*value*/
      ctx[2]
    ) ?? "...") + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (((_a2 = ctx[1]) == null ? void 0 : _a2.units) ?? "%") + ""
  );
  let t2;
  let t3;
  let span;
  let t4_value = (
    /*settings*/
    (((_b2 = ctx[0]) == null ? void 0 : _b2.title) ?? /*capability*/
    ctx[1].title) + ""
  );
  let t4;
  let t5;
  let div3;
  let t6;
  let div2;
  let slider;
  let updating_value;
  let t7;
  let current;
  let mounted;
  let dispose;
  let if_block0 = !/*settings*/
  ctx[0].hideMinMax && create_if_block_3$3(ctx);
  function slider_value_binding(value) {
    ctx[14](value);
  }
  let slider_props = {
    class: "w-full",
    min: (
      /*capability*/
      ctx[1].min
    ),
    max: (
      /*capability*/
      ctx[1].max
    ),
    step: getStep(
      /*capability*/
      ctx[1]
    ),
    disabled: (
      /*disabled*/
      ctx[3]
    )
  };
  if (
    /*value*/
    ctx[2] !== void 0
  ) {
    slider_props.value = /*value*/
    ctx[2];
  }
  slider = new Slider({ props: slider_props });
  binding_callbacks.push(() => bind(slider, "value", slider_value_binding));
  let if_block1 = !/*settings*/
  ctx[0].hideMinMax && create_if_block_2$4(ctx);
  return {
    c() {
      div4 = element("div");
      div1 = element("div");
      div0 = element("div");
      h12 = element("h1");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      t3 = space();
      span = element("span");
      t4 = text(t4_value);
      t5 = space();
      div3 = element("div");
      if (if_block0)
        if_block0.c();
      t6 = space();
      div2 = element("div");
      create_component(slider.$$.fragment);
      t7 = space();
      if (if_block1)
        if_block1.c();
      this.h();
    },
    l(nodes) {
      div4 = claim_element(nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      div1 = claim_element(div4_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      h12 = claim_element(div0_nodes, "H1", {});
      var h1_nodes = children(h12);
      t0 = claim_text(h1_nodes, t0_value);
      t1 = claim_space(h1_nodes);
      t2 = claim_text(h1_nodes, t2_value);
      h1_nodes.forEach(detach);
      t3 = claim_space(div0_nodes);
      span = claim_element(div0_nodes, "SPAN", {});
      var span_nodes = children(span);
      t4 = claim_text(span_nodes, t4_value);
      span_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t5 = claim_space(div4_nodes);
      div3 = claim_element(div4_nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      if (if_block0)
        if_block0.l(div3_nodes);
      t6 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      claim_component(slider.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach);
      t7 = claim_space(div3_nodes);
      if (if_block1)
        if_block1.l(div3_nodes);
      div3_nodes.forEach(detach);
      div4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "flex flex-col items-center");
      attr(div1, "class", "mx-auto");
      attr(div2, "class", "w-full h-full");
      attr(div3, "class", "flex flex-row mt-2");
      attr(div4, "class", "flex flex-col w-full h-full pl-1 pr-1");
    },
    m(target, anchor) {
      insert_hydration(target, div4, anchor);
      append_hydration(div4, div1);
      append_hydration(div1, div0);
      append_hydration(div0, h12);
      append_hydration(h12, t0);
      append_hydration(h12, t1);
      append_hydration(h12, t2);
      append_hydration(div0, t3);
      append_hydration(div0, span);
      append_hydration(span, t4);
      append_hydration(div4, t5);
      append_hydration(div4, div3);
      if (if_block0)
        if_block0.m(div3, null);
      append_hydration(div3, t6);
      append_hydration(div3, div2);
      mount_component(slider, div2, null);
      append_hydration(div3, t7);
      if (if_block1)
        if_block1.m(div3, null);
      current = true;
      if (!mounted) {
        dispose = listen(div2, "click", stop_propagation(
          /*click_handler*/
          ctx[13]
        ));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      var _a3, _b3;
      if ((!current || dirty & /*value*/
      4) && t0_value !== (t0_value = /*formatValue*/
      (ctx2[4](
        /*value*/
        ctx2[2]
      ) ?? "...") + ""))
        set_data(t0, t0_value);
      if ((!current || dirty & /*capability*/
      2) && t2_value !== (t2_value = /*capability*/
      (((_a3 = ctx2[1]) == null ? void 0 : _a3.units) ?? "%") + ""))
        set_data(t2, t2_value);
      if ((!current || dirty & /*settings, capability*/
      3) && t4_value !== (t4_value = /*settings*/
      (((_b3 = ctx2[0]) == null ? void 0 : _b3.title) ?? /*capability*/
      ctx2[1].title) + ""))
        set_data(t4, t4_value);
      if (!/*settings*/
      ctx2[0].hideMinMax) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_3$3(ctx2);
          if_block0.c();
          if_block0.m(div3, t6);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      const slider_changes = {};
      if (dirty & /*capability*/
      2)
        slider_changes.min = /*capability*/
        ctx2[1].min;
      if (dirty & /*capability*/
      2)
        slider_changes.max = /*capability*/
        ctx2[1].max;
      if (dirty & /*capability*/
      2)
        slider_changes.step = getStep(
          /*capability*/
          ctx2[1]
        );
      if (dirty & /*disabled*/
      8)
        slider_changes.disabled = /*disabled*/
        ctx2[3];
      if (!updating_value && dirty & /*value*/
      4) {
        updating_value = true;
        slider_changes.value = /*value*/
        ctx2[2];
        add_flush_callback(() => updating_value = false);
      }
      slider.$set(slider_changes);
      if (!/*settings*/
      ctx2[0].hideMinMax) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_2$4(ctx2);
          if_block1.c();
          if_block1.m(div3, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(slider.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(slider.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div4);
      }
      if (if_block0)
        if_block0.d();
      destroy_component(slider);
      if (if_block1)
        if_block1.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$6(ctx) {
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*settings*/
      ctx2[0].capabilityUri !== void 0
    )
      return create_if_block_1$6;
    return create_else_block$1;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_if_block_3$3(ctx) {
  let span;
  let t0_value = (
    /*formatValue*/
    ctx[4](
      /*capability*/
      ctx[1].min
    ) + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (ctx[1].units ?? "%") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap mr-4");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*capability*/
      2 && t0_value !== (t0_value = /*formatValue*/
      ctx2[4](
        /*capability*/
        ctx2[1].min
      ) + ""))
        set_data(t0, t0_value);
      if (dirty & /*capability*/
      2 && t2_value !== (t2_value = /*capability*/
      (ctx2[1].units ?? "%") + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_2$4(ctx) {
  let span;
  let t0_value = (
    /*formatValue*/
    ctx[4](
      /*capability*/
      ctx[1].max
    ) + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*capability*/
    (ctx[1].units ?? "%") + ""
  );
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      this.h();
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, t0_value);
      t1 = claim_space(span_nodes);
      t2 = claim_text(span_nodes, t2_value);
      span_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(span, "class", "whitespace-nowrap ml-4");
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
      append_hydration(span, t0);
      append_hydration(span, t1);
      append_hydration(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*capability*/
      2 && t0_value !== (t0_value = /*formatValue*/
      ctx2[4](
        /*capability*/
        ctx2[1].max
      ) + ""))
        set_data(t0, t0_value);
      if (dirty & /*capability*/
      2 && t2_value !== (t2_value = /*capability*/
      (ctx2[1].units ?? "%") + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_else_block$1(ctx) {
  let span;
  let textContent = "Slider not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-vs3xzm")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$6(ctx) {
  let span;
  let textContent = "Capability not found";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-yrqful")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$9(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$6, create_else_block_1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*capability*/
      ctx2[1] === void 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function getStep(c2) {
  var value2 = c2.step ?? Math.pow(0.1, c2.decimals);
  if (c2.decimals !== void 0) {
    value2 = Math.round(value2 * Math.pow(10, c2.decimals)) / Math.pow(10, c2.decimals);
  }
  return value2;
}
function instance$7($$self, $$props, $$invalidate) {
  let controllable;
  let disabled;
  let $editing;
  let $scopes;
  let $devices;
  component_subscribe($$self, editing, ($$value) => $$invalidate(10, $editing = $$value));
  component_subscribe($$self, scopes, ($$value) => $$invalidate(11, $scopes = $$value));
  component_subscribe($$self, devices, ($$value) => $$invalidate(12, $devices = $$value));
  let { settings } = $$props;
  let { context } = $$props;
  let deviceId = "";
  let capabilityId = "";
  let device;
  let capability;
  let value;
  function onSettings(_settings) {
    if (_settings.capabilityUri) {
      const segments = _settings.capabilityUri.split(":");
      $$invalidate(6, deviceId = segments[2]);
      $$invalidate(7, capabilityId = segments[3]);
    }
  }
  function onCapability(_capability) {
    $$invalidate(2, value = (_capability == null ? void 0 : _capability.value) ?? 0);
  }
  async function onValue(_value) {
    if (capability !== void 0 && _value !== capability.value) {
      if (!disabled) {
        await setCapabilityValue(_value);
      }
    }
  }
  function formatValue(v) {
    if (v === null || v === void 0 || capability === void 0) {
      return "";
    }
    if (capability.units === "%" || !capability.units) {
      return (100 / (capability.max - capability.min) * v).toFixed(0);
    }
    return v.toFixed(capability.decimals);
  }
  async function setCapabilityValue(_value) {
    if (device && capability) {
      await device.setCapabilityValue({
        deviceId: device.id,
        capabilityId: capability.id,
        value: _value
      });
    }
  }
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function slider_value_binding(value$1) {
    value = value$1;
    $$invalidate(2, value);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(5, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    1) {
      onSettings(settings);
    }
    if ($$self.$$.dirty & /*$devices, deviceId*/
    4160) {
      $$invalidate(8, device = $devices[deviceId]);
    }
    if ($$self.$$.dirty & /*device, capabilityId*/
    384) {
      $$invalidate(1, capability = device && capabilityId ? device.capabilitiesObj[capabilityId] : void 0);
    }
    if ($$self.$$.dirty & /*$scopes*/
    2048) {
      $$invalidate(9, controllable = $scopes.includes("homey") || $scopes.includes("homey.device") || $scopes.includes("homey.device.control"));
    }
    if ($$self.$$.dirty & /*controllable, $editing*/
    1536) {
      $$invalidate(3, disabled = !controllable || $editing);
    }
    if ($$self.$$.dirty & /*capability*/
    2) {
      onCapability(capability);
    }
    if ($$self.$$.dirty & /*value*/
    4) {
      onValue(value);
    }
  };
  return [
    settings,
    capability,
    value,
    disabled,
    formatValue,
    context,
    deviceId,
    capabilityId,
    device,
    controllable,
    $editing,
    $scopes,
    $devices,
    click_handler,
    slider_value_binding
  ];
}
class SliderWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$7, create_fragment$9, safe_not_equal, { settings: 0, context: 5 });
  }
}
function create() {
  return {
    id: v4(),
    type: "slider",
    version: 2
  };
}
function migrate$1(settings) {
  while (settings.version !== 2) {
    settings = migrateOnce$1(settings);
  }
  return settings;
}
function migrateOnce$1(settings) {
  switch (settings.version) {
    case 2:
      return settings;
    case 1:
    default:
      return migrate_v1_v2(settings);
  }
}
function migrate_v1_v2(v1) {
  const settings = {
    id: v1.id,
    type: v1.type,
    version: 2,
    capabilityUri: "homey:device:" + v1.deviceId + ":" + v1.capabilityId,
    title: v1.title,
    hideMinMax: v1.hideMinMax
  };
  return settings;
}
function get_each_context$4(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list[i2];
  return child_ctx;
}
function create_each_block$4(ctx) {
  let select_options_option;
  let current;
  select_options_option = new Select.Options.Option({ props: { option: (
    /*option*/
    ctx[9]
  ) } });
  return {
    c() {
      create_component(select_options_option.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_option.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_option, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(select_options_option.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_option.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_option, detaching);
    }
  };
}
function create_default_slot$4(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*sizes*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$4(get_each_context$4(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*sizes*/
      4) {
        each_value = ensure_array_like(
          /*sizes*/
          ctx2[2]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$4(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$4(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_options_slot(ctx) {
  let select_options_1;
  let current;
  select_options_1 = new Select.Options({
    props: {
      slot: "options",
      $$slots: { default: [create_default_slot$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(select_options_1.$$.fragment);
    },
    l(nodes) {
      claim_component(select_options_1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(select_options_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const select_options_1_changes = {};
      if (dirty & /*$$scope*/
      4096) {
        select_options_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      select_options_1.$set(select_options_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(select_options_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(select_options_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(select_options_1, detaching);
    }
  };
}
function create_fragment$8(ctx) {
  let div;
  let textarea;
  let updating_value;
  let t2;
  let select;
  let updating_value_1;
  let current;
  function textarea_value_binding(value) {
    ctx[4](value);
  }
  let textarea_props = {
    name: "text",
    placeholder: "Text",
    class: "w-full"
  };
  if (
    /*text*/
    ctx[0] !== void 0
  ) {
    textarea_props.value = /*text*/
    ctx[0];
  }
  textarea = new TextArea({ props: textarea_props });
  binding_callbacks.push(() => bind(textarea, "value", textarea_value_binding));
  function select_value_binding(value) {
    ctx[5](value);
  }
  let select_props = {
    placeholder: "Font size",
    name: "size",
    $$slots: { options: [create_options_slot] },
    $$scope: { ctx }
  };
  if (
    /*size*/
    ctx[1] !== void 0
  ) {
    select_props.value = /*size*/
    ctx[1];
  }
  select = new Select({ props: select_props });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  return {
    c() {
      div = element("div");
      create_component(textarea.$$.fragment);
      t2 = space();
      create_component(select.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { style: true });
      var div_nodes = children(div);
      claim_component(textarea.$$.fragment, div_nodes);
      t2 = claim_space(div_nodes);
      claim_component(select.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      set_style(div, "margin-top", "20px");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(textarea, div, null);
      append_hydration(div, t2);
      mount_component(select, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const textarea_changes = {};
      if (!updating_value && dirty & /*text*/
      1) {
        updating_value = true;
        textarea_changes.value = /*text*/
        ctx2[0];
        add_flush_callback(() => updating_value = false);
      }
      textarea.$set(textarea_changes);
      const select_changes = {};
      if (dirty & /*$$scope*/
      4096) {
        select_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_value_1 && dirty & /*size*/
      2) {
        updating_value_1 = true;
        select_changes.value = /*size*/
        ctx2[1];
        add_flush_callback(() => updating_value_1 = false);
      }
      select.$set(select_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textarea.$$.fragment, local);
      transition_in(select.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textarea.$$.fragment, local);
      transition_out(select.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(textarea);
      destroy_component(select);
    }
  };
}
function instance$6($$self, $$props, $$invalidate) {
  let { settings } = $$props;
  const dispatch = createEventDispatcher();
  let text2 = "";
  let size;
  const sizes = [
    { value: "", label: "Text" },
    ...[...Array(6).keys()].map((key) => ({
      value: "" + (key + 1),
      label: "" + (key + 1)
    }))
  ];
  onMount(() => {
    $$invalidate(0, text2 = (settings == null ? void 0 : settings.text) ?? "");
    $$invalidate(1, size = sizes.find((s3) => s3.value === ""));
  });
  function onText(value) {
    if (value === void 0 || value === settings.text) {
      return;
    }
    dispatch("settings", { ...settings, text: value });
  }
  function onSize(option) {
    if (option === void 0 || Number(option.value) === settings.size) {
      return;
    }
    dispatch("settings", { ...settings, size: Number(option.value) });
  }
  function textarea_value_binding(value) {
    text2 = value;
    $$invalidate(0, text2);
  }
  function select_value_binding(value) {
    size = value;
    $$invalidate(1, size);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(3, settings = $$props2.settings);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*text*/
    1) {
      onText(text2);
    }
    if ($$self.$$.dirty & /*size*/
    2) {
      onSize(size);
    }
  };
  return [text2, size, sizes, settings, textarea_value_binding, select_value_binding];
}
class TextEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$6, create_fragment$8, safe_not_equal, { settings: 3 });
  }
}
function create_else_block(ctx) {
  let div;
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(
        /*text*/
        ctx[1]
      );
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      t2 = claim_text(
        div_nodes,
        /*text*/
        ctx[1]
      );
      div_nodes.forEach(detach);
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_6(ctx) {
  let h6;
  let t2;
  return {
    c() {
      h6 = element("h6");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h6 = claim_element(nodes, "H6", { class: true });
      var h6_nodes = children(h6);
      t2 = claim_text(
        h6_nodes,
        /*text*/
        ctx[1]
      );
      h6_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h6, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h6, anchor);
      append_hydration(h6, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h6);
      }
    }
  };
}
function create_if_block_5(ctx) {
  let h5;
  let t2;
  return {
    c() {
      h5 = element("h5");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h5 = claim_element(nodes, "H5", { class: true });
      var h5_nodes = children(h5);
      t2 = claim_text(
        h5_nodes,
        /*text*/
        ctx[1]
      );
      h5_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h5, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h5, anchor);
      append_hydration(h5, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h5);
      }
    }
  };
}
function create_if_block_4(ctx) {
  let h4;
  let t2;
  return {
    c() {
      h4 = element("h4");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h4 = claim_element(nodes, "H4", { class: true });
      var h4_nodes = children(h4);
      t2 = claim_text(
        h4_nodes,
        /*text*/
        ctx[1]
      );
      h4_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h4, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h4, anchor);
      append_hydration(h4, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h4);
      }
    }
  };
}
function create_if_block_3$2(ctx) {
  let h3;
  let t2;
  return {
    c() {
      h3 = element("h3");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h3 = claim_element(nodes, "H3", { class: true });
      var h3_nodes = children(h3);
      t2 = claim_text(
        h3_nodes,
        /*text*/
        ctx[1]
      );
      h3_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h3, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h3, anchor);
      append_hydration(h3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h3);
      }
    }
  };
}
function create_if_block_2$3(ctx) {
  let h23;
  let t2;
  return {
    c() {
      h23 = element("h2");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h23 = claim_element(nodes, "H2", { class: true });
      var h2_nodes = children(h23);
      t2 = claim_text(
        h2_nodes,
        /*text*/
        ctx[1]
      );
      h2_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h23, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h23, anchor);
      append_hydration(h23, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h23);
      }
    }
  };
}
function create_if_block_1$5(ctx) {
  let h12;
  let t2;
  return {
    c() {
      h12 = element("h1");
      t2 = text(
        /*text*/
        ctx[1]
      );
      this.h();
    },
    l(nodes) {
      h12 = claim_element(nodes, "H1", { class: true });
      var h1_nodes = children(h12);
      t2 = claim_text(
        h1_nodes,
        /*text*/
        ctx[1]
      );
      h1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(h12, "class", "m-0");
    },
    m(target, anchor) {
      insert_hydration(target, h12, anchor);
      append_hydration(h12, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      2)
        set_data(
          t2,
          /*text*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h12);
      }
    }
  };
}
function create_if_block$5(ctx) {
  let span;
  let textContent = "Text not configured";
  return {
    c() {
      span = element("span");
      span.textContent = textContent;
    },
    l(nodes) {
      span = claim_element(nodes, "SPAN", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-xcjyi8")
        span.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, span, anchor);
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$7(ctx) {
  let div;
  function select_block_type(ctx2, dirty) {
    if (
      /*text*/
      ctx2[1] === void 0
    )
      return create_if_block$5;
    if (
      /*size*/
      ctx2[0] == 1
    )
      return create_if_block_1$5;
    if (
      /*size*/
      ctx2[0] == 2
    )
      return create_if_block_2$3;
    if (
      /*size*/
      ctx2[0] == 3
    )
      return create_if_block_3$2;
    if (
      /*size*/
      ctx2[0] == 4
    )
      return create_if_block_4;
    if (
      /*size*/
      ctx2[0] == 5
    )
      return create_if_block_5;
    if (
      /*size*/
      ctx2[0] == 6
    )
      return create_if_block_6;
    return create_else_block;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "align-center");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if_block.m(div, null);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
    },
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_block.d();
    }
  };
}
function instance$5($$self, $$props, $$invalidate) {
  let text2;
  let size;
  let { settings } = $$props;
  let { context } = $$props;
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(2, settings = $$props2.settings);
    if ("context" in $$props2)
      $$invalidate(3, context = $$props2.context);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*settings*/
    4) {
      $$invalidate(1, text2 = settings == null ? void 0 : settings.text);
    }
    if ($$self.$$.dirty & /*settings*/
    4) {
      $$invalidate(0, size = settings == null ? void 0 : settings.size);
    }
  };
  return [size, text2, settings, context];
}
class TextWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$5, create_fragment$7, safe_not_equal, { settings: 2, context: 3 });
  }
}
function create_fragment$6(ctx) {
  let div;
  let textContent = "Unknown widget type";
  return {
    c() {
      div = element("div");
      div.textContent = textContent;
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-17e4zkc")
        div.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
class UnknownWidget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$6, safe_not_equal, {});
  }
}
function create_fragment$5(ctx) {
  let div;
  let textContent = "Unknown widget type";
  return {
    c() {
      div = element("div");
      div.textContent = textContent;
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-17e4zkc")
        div.textContent = textContent;
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
class UnknownEditor extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$5, safe_not_equal, {});
  }
}
const widgets = [
  {
    type: "capability",
    label: "Capability",
    icon: mdiTune,
    widget: CapabilityWidget,
    editor: CapabilityEditor,
    view: void 0,
    scopes: [
      { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] }
    ],
    create: create$3,
    migration: migrate$4
  },
  {
    type: "device",
    label: "Device",
    icon: mdiMeterElectric,
    widget: DeviceWidget,
    editor: DeviceEditor,
    view: void 0,
    scopes: [],
    create: () => ({ id: v4(), type: "device", version: 1 }),
    migration: (e2) => e2
  },
  {
    type: "dashboard-link",
    label: "Dashboard",
    icon: mdiViewDashboard,
    widget: DashboardLinkWidget,
    editor: DashboardLinkEditor,
    view: void 0,
    scopes: [],
    create: () => ({ id: v4(), type: "dashboard-link", version: 1 }),
    migration: (e2) => e2
  },
  {
    type: "flow",
    label: "Flow",
    icon: mdiPlay,
    widget: FlowWidget,
    editor: FlowEditor,
    view: void 0,
    scopes: [
      { oneOf: ["homey", "homey.flow", "homey.flow.start"] }
    ],
    create: () => ({ id: v4(), type: "flow", version: 1 }),
    migration: (e2) => e2
  },
  {
    type: "iframe",
    label: "Iframe",
    icon: mdiImageFrame,
    widget: IframeWidget,
    editor: IframeEditor,
    view: void 0,
    scopes: [],
    create: () => ({ id: v4(), type: "iframe", version: 1 }),
    migration: (e2) => e2
  },
  {
    type: "image",
    label: "Image",
    icon: mdiImage,
    widget: ImageWidget,
    editor: ImageEditor,
    view: ImageWidget,
    scopes: [
      { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] }
    ],
    create: () => ({ id: v4(), type: "image", version: 1 }),
    migration: (e2) => e2
  },
  {
    type: "insight",
    label: "Insight",
    icon: mdiChartLine,
    widget: InsightWidget,
    editor: InsightEditor,
    view: void 0,
    scopes: [
      { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] },
      { oneOf: ["homey", "homey.insights.readonly"] }
    ],
    create: create$1,
    migration: migrate$2
  },
  {
    type: "text",
    label: "Text",
    icon: mdiTextBoxEdit,
    widget: TextWidget,
    editor: TextEditor,
    view: void 0,
    scopes: [],
    create: () => ({ id: v4(), type: "text", version: 1 }),
    migration: (e2) => e2
  },
  {
    type: "slider",
    label: "Slider",
    icon: mdiArrowLeftRight,
    widget: SliderWidget,
    editor: SliderEditor,
    view: void 0,
    scopes: [
      { oneOf: ["homey", "homey.device", "homey.device.readonly", "homey.device.control"] }
    ],
    create,
    migration: migrate$1
  },
  {
    type: "variable",
    label: "Variable",
    icon: mdiVariable,
    widget: VariableWidget,
    editor: VariableEditor,
    view: void 0,
    scopes: [
      { oneOf: ["homey", "homey.logic", "homey.logic.readonly"] }
    ],
    create: create$2,
    migration: migrate$3
  }
];
function findWidget(type) {
  var _a2;
  const component = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.widget;
  if (component !== void 0) {
    return component;
  }
  return UnknownWidget;
}
function findEditor(type) {
  var _a2;
  const editor = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.editor;
  if (editor !== void 0) {
    return editor;
  }
  return UnknownEditor;
}
function findMigration(type) {
  var _a2;
  const migration = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.migration;
  return migration;
}
function findCreate(type) {
  var _a2;
  const create2 = (_a2 = widgets.find((widget) => widget.type === type)) == null ? void 0 : _a2.create;
  return create2;
}
const FINALIZE_EVENT_NAME = "finalize";
const CONSIDER_EVENT_NAME = "consider";
function dispatchFinalizeEvent(el, items, info) {
  el.dispatchEvent(
    new CustomEvent(FINALIZE_EVENT_NAME, {
      detail: { items, info }
    })
  );
}
function dispatchConsiderEvent(el, items, info) {
  el.dispatchEvent(
    new CustomEvent(CONSIDER_EVENT_NAME, {
      detail: { items, info }
    })
  );
}
const DRAGGED_ENTERED_EVENT_NAME = "draggedEntered";
const DRAGGED_LEFT_EVENT_NAME = "draggedLeft";
const DRAGGED_OVER_INDEX_EVENT_NAME = "draggedOverIndex";
const DRAGGED_LEFT_DOCUMENT_EVENT_NAME = "draggedLeftDocument";
const DRAGGED_LEFT_TYPES = {
  LEFT_FOR_ANOTHER: "leftForAnother",
  OUTSIDE_OF_ANY: "outsideOfAny"
};
function dispatchDraggedElementEnteredContainer(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(
    new CustomEvent(DRAGGED_ENTERED_EVENT_NAME, {
      detail: { indexObj, draggedEl: draggedEl2 }
    })
  );
}
function dispatchDraggedElementLeftContainerForAnother(containerEl, draggedEl2, theOtherDz) {
  containerEl.dispatchEvent(
    new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
      detail: { draggedEl: draggedEl2, type: DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER, theOtherDz }
    })
  );
}
function dispatchDraggedElementLeftContainerForNone(containerEl, draggedEl2) {
  containerEl.dispatchEvent(
    new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
      detail: { draggedEl: draggedEl2, type: DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY }
    })
  );
}
function dispatchDraggedElementIsOverIndex(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(
    new CustomEvent(DRAGGED_OVER_INDEX_EVENT_NAME, {
      detail: { indexObj, draggedEl: draggedEl2 }
    })
  );
}
function dispatchDraggedLeftDocument(draggedEl2) {
  window.dispatchEvent(
    new CustomEvent(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, {
      detail: { draggedEl: draggedEl2 }
    })
  );
}
const TRIGGERS = {
  DRAG_STARTED: "dragStarted",
  DRAGGED_ENTERED: DRAGGED_ENTERED_EVENT_NAME,
  DRAGGED_ENTERED_ANOTHER: "dragEnteredAnother",
  DRAGGED_OVER_INDEX: DRAGGED_OVER_INDEX_EVENT_NAME,
  DRAGGED_LEFT: DRAGGED_LEFT_EVENT_NAME,
  DRAGGED_LEFT_ALL: "draggedLeftAll",
  DROPPED_INTO_ZONE: "droppedIntoZone",
  DROPPED_INTO_ANOTHER: "droppedIntoAnother",
  DROPPED_OUTSIDE_OF_ANY: "droppedOutsideOfAny",
  DRAG_STOPPED: "dragStopped"
};
const SOURCES = {
  POINTER: "pointer",
  KEYBOARD: "keyboard"
};
const SHADOW_ITEM_MARKER_PROPERTY_NAME = "isDndShadowItem";
const SHADOW_ELEMENT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item-internal";
const SHADOW_ELEMENT_HINT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item-hint";
const SHADOW_PLACEHOLDER_ITEM_ID = "id:dnd-shadow-placeholder-0000";
const DRAGGED_ELEMENT_ID = "dnd-action-dragged-el";
let ITEM_ID_KEY = "id";
let activeDndZoneCount = 0;
function incrementActiveDropZoneCount() {
  activeDndZoneCount++;
}
function decrementActiveDropZoneCount() {
  if (activeDndZoneCount === 0) {
    throw new Error("Bug! trying to decrement when there are no dropzones");
  }
  activeDndZoneCount--;
}
const isOnServer = typeof window === "undefined";
function getBoundingRectNoTransforms(el) {
  let ta;
  const rect = el.getBoundingClientRect();
  const style = getComputedStyle(el);
  const tx = style.transform;
  if (tx) {
    let sx, sy, dx, dy;
    if (tx.startsWith("matrix3d(")) {
      ta = tx.slice(9, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[5];
      dx = +ta[12];
      dy = +ta[13];
    } else if (tx.startsWith("matrix(")) {
      ta = tx.slice(7, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[3];
      dx = +ta[4];
      dy = +ta[5];
    } else {
      return rect;
    }
    const to2 = style.transformOrigin;
    const x2 = rect.x - dx - (1 - sx) * parseFloat(to2);
    const y3 = rect.y - dy - (1 - sy) * parseFloat(to2.slice(to2.indexOf(" ") + 1));
    const w2 = sx ? rect.width / sx : el.offsetWidth;
    const h3 = sy ? rect.height / sy : el.offsetHeight;
    return {
      x: x2,
      y: y3,
      width: w2,
      height: h3,
      top: y3,
      right: x2 + w2,
      bottom: y3 + h3,
      left: x2
    };
  } else {
    return rect;
  }
}
function getAbsoluteRectNoTransforms(el) {
  const rect = getBoundingRectNoTransforms(el);
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function getAbsoluteRect(el) {
  const rect = el.getBoundingClientRect();
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function findCenter(rect) {
  return {
    x: (rect.left + rect.right) / 2,
    y: (rect.top + rect.bottom) / 2
  };
}
function calcDistance(pointA, pointB) {
  return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
}
function isPointInsideRect(point, rect) {
  return point.y <= rect.bottom && point.y >= rect.top && point.x >= rect.left && point.x <= rect.right;
}
function findCenterOfElement(el) {
  return findCenter(getAbsoluteRect(el));
}
function isCenterOfAInsideB(elA, elB) {
  const centerOfA = findCenterOfElement(elA);
  const rectOfB = getAbsoluteRectNoTransforms(elB);
  return isPointInsideRect(centerOfA, rectOfB);
}
function calcDistanceBetweenCenters(elA, elB) {
  const centerOfA = findCenterOfElement(elA);
  const centerOfB = findCenterOfElement(elB);
  return calcDistance(centerOfA, centerOfB);
}
function isElementOffDocument(el) {
  const rect = getAbsoluteRect(el);
  return rect.right < 0 || rect.left > document.documentElement.scrollWidth || rect.bottom < 0 || rect.top > document.documentElement.scrollHeight;
}
function calcInnerDistancesBetweenPointAndSidesOfElement(point, el) {
  const rect = getAbsoluteRect(el);
  if (!isPointInsideRect(point, rect)) {
    return null;
  }
  return {
    top: point.y - rect.top,
    bottom: rect.bottom - point.y,
    left: point.x - rect.left,
    // TODO - figure out what is so special about right (why the rect is too big)
    right: Math.min(rect.right, document.documentElement.clientWidth) - point.x
  };
}
let dzToShadowIndexToRect;
function resetIndexesCache() {
  dzToShadowIndexToRect = /* @__PURE__ */ new Map();
}
resetIndexesCache();
function resetIndexesCacheForDz(dz) {
  dzToShadowIndexToRect.delete(dz);
}
function cacheShadowRect(dz) {
  const shadowElIndex = Array.from(dz.children).findIndex((child) => child.getAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME));
  if (shadowElIndex >= 0) {
    if (!dzToShadowIndexToRect.has(dz)) {
      dzToShadowIndexToRect.set(dz, /* @__PURE__ */ new Map());
    }
    dzToShadowIndexToRect.get(dz).set(shadowElIndex, getAbsoluteRectNoTransforms(dz.children[shadowElIndex]));
    return shadowElIndex;
  }
  return void 0;
}
function findWouldBeIndex(floatingAboveEl, collectionBelowEl) {
  if (!isCenterOfAInsideB(floatingAboveEl, collectionBelowEl)) {
    return null;
  }
  const children2 = collectionBelowEl.children;
  if (children2.length === 0) {
    return { index: 0, isProximityBased: true };
  }
  const shadowElIndex = cacheShadowRect(collectionBelowEl);
  for (let i2 = 0; i2 < children2.length; i2++) {
    if (isCenterOfAInsideB(floatingAboveEl, children2[i2])) {
      const cachedShadowRect = dzToShadowIndexToRect.has(collectionBelowEl) && dzToShadowIndexToRect.get(collectionBelowEl).get(i2);
      if (cachedShadowRect) {
        if (!isPointInsideRect(findCenterOfElement(floatingAboveEl), cachedShadowRect)) {
          return { index: shadowElIndex, isProximityBased: false };
        }
      }
      return { index: i2, isProximityBased: false };
    }
  }
  let minDistanceSoFar = Number.MAX_VALUE;
  let indexOfMin = void 0;
  for (let i2 = 0; i2 < children2.length; i2++) {
    const distance = calcDistanceBetweenCenters(floatingAboveEl, children2[i2]);
    if (distance < minDistanceSoFar) {
      minDistanceSoFar = distance;
      indexOfMin = i2;
    }
  }
  return { index: indexOfMin, isProximityBased: true };
}
const SCROLL_ZONE_PX = 25;
function makeScroller() {
  let scrollingInfo;
  function resetScrolling2() {
    scrollingInfo = { directionObj: void 0, stepPx: 0 };
  }
  resetScrolling2();
  function scrollContainer(containerEl) {
    const { directionObj, stepPx } = scrollingInfo;
    if (directionObj) {
      containerEl.scrollBy(directionObj.x * stepPx, directionObj.y * stepPx);
      window.requestAnimationFrame(() => scrollContainer(containerEl));
    }
  }
  function calcScrollStepPx(distancePx) {
    return SCROLL_ZONE_PX - distancePx;
  }
  function scrollIfNeeded2(pointer, elementToScroll) {
    if (!elementToScroll) {
      return false;
    }
    const distances = calcInnerDistancesBetweenPointAndSidesOfElement(pointer, elementToScroll);
    if (distances === null) {
      resetScrolling2();
      return false;
    }
    const isAlreadyScrolling = !!scrollingInfo.directionObj;
    let [scrollingVertically, scrollingHorizontally] = [false, false];
    if (elementToScroll.scrollHeight > elementToScroll.clientHeight) {
      if (distances.bottom < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = { x: 0, y: 1 };
        scrollingInfo.stepPx = calcScrollStepPx(distances.bottom);
      } else if (distances.top < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = { x: 0, y: -1 };
        scrollingInfo.stepPx = calcScrollStepPx(distances.top);
      }
      if (!isAlreadyScrolling && scrollingVertically) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    if (elementToScroll.scrollWidth > elementToScroll.clientWidth) {
      if (distances.right < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = { x: 1, y: 0 };
        scrollingInfo.stepPx = calcScrollStepPx(distances.right);
      } else if (distances.left < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = { x: -1, y: 0 };
        scrollingInfo.stepPx = calcScrollStepPx(distances.left);
      }
      if (!isAlreadyScrolling && scrollingHorizontally) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    resetScrolling2();
    return false;
  }
  return {
    scrollIfNeeded: scrollIfNeeded2,
    resetScrolling: resetScrolling2
  };
}
function toString(object) {
  return JSON.stringify(object, null, 2);
}
function getDepth(node) {
  if (!node) {
    throw new Error("cannot get depth of a falsy node");
  }
  return _getDepth(node, 0);
}
function _getDepth(node, countSoFar = 0) {
  if (!node.parentElement) {
    return countSoFar - 1;
  }
  return _getDepth(node.parentElement, countSoFar + 1);
}
function areObjectsShallowEqual(objA, objB) {
  if (Object.keys(objA).length !== Object.keys(objB).length) {
    return false;
  }
  for (const keyA in objA) {
    if (!{}.hasOwnProperty.call(objB, keyA) || objB[keyA] !== objA[keyA]) {
      return false;
    }
  }
  return true;
}
function areArraysShallowEqualSameOrder(arrA, arrB) {
  if (arrA.length !== arrB.length) {
    return false;
  }
  for (let i2 = 0; i2 < arrA.length; i2++) {
    if (arrA[i2] !== arrB[i2]) {
      return false;
    }
  }
  return true;
}
const INTERVAL_MS$1 = 200;
const TOLERANCE_PX = 10;
const { scrollIfNeeded: scrollIfNeeded$1, resetScrolling: resetScrolling$1 } = makeScroller();
let next$1;
function observe(draggedEl2, dropZones, intervalMs = INTERVAL_MS$1) {
  let lastDropZoneFound;
  let lastIndexFound;
  let lastIsDraggedInADropZone = false;
  let lastCentrePositionOfDragged;
  const dropZonesFromDeepToShallow = Array.from(dropZones).sort((dz1, dz2) => getDepth(dz2) - getDepth(dz1));
  function andNow() {
    const currentCenterOfDragged = findCenterOfElement(draggedEl2);
    const scrolled = scrollIfNeeded$1(currentCenterOfDragged, lastDropZoneFound);
    if (!scrolled && lastCentrePositionOfDragged && Math.abs(lastCentrePositionOfDragged.x - currentCenterOfDragged.x) < TOLERANCE_PX && Math.abs(lastCentrePositionOfDragged.y - currentCenterOfDragged.y) < TOLERANCE_PX) {
      next$1 = window.setTimeout(andNow, intervalMs);
      return;
    }
    if (isElementOffDocument(draggedEl2)) {
      dispatchDraggedLeftDocument(draggedEl2);
      return;
    }
    lastCentrePositionOfDragged = currentCenterOfDragged;
    let isDraggedInADropZone = false;
    for (const dz of dropZonesFromDeepToShallow) {
      if (scrolled)
        resetIndexesCacheForDz(lastDropZoneFound);
      const indexObj = findWouldBeIndex(draggedEl2, dz);
      if (indexObj === null) {
        continue;
      }
      const { index: index2 } = indexObj;
      isDraggedInADropZone = true;
      if (dz !== lastDropZoneFound) {
        lastDropZoneFound && dispatchDraggedElementLeftContainerForAnother(lastDropZoneFound, draggedEl2, dz);
        dispatchDraggedElementEnteredContainer(dz, indexObj, draggedEl2);
        lastDropZoneFound = dz;
      } else if (index2 !== lastIndexFound) {
        dispatchDraggedElementIsOverIndex(dz, indexObj, draggedEl2);
        lastIndexFound = index2;
      }
      break;
    }
    if (!isDraggedInADropZone && lastIsDraggedInADropZone && lastDropZoneFound) {
      dispatchDraggedElementLeftContainerForNone(lastDropZoneFound, draggedEl2);
      lastDropZoneFound = void 0;
      lastIndexFound = void 0;
      lastIsDraggedInADropZone = false;
    } else {
      lastIsDraggedInADropZone = true;
    }
    next$1 = window.setTimeout(andNow, intervalMs);
  }
  andNow();
}
function unobserve() {
  clearTimeout(next$1);
  resetScrolling$1();
  resetIndexesCache();
}
const INTERVAL_MS = 300;
let mousePosition;
function updateMousePosition(e2) {
  const c2 = e2.touches ? e2.touches[0] : e2;
  mousePosition = { x: c2.clientX, y: c2.clientY };
}
const { scrollIfNeeded, resetScrolling } = makeScroller();
let next;
function loop() {
  if (mousePosition) {
    const scrolled = scrollIfNeeded(mousePosition, document.documentElement);
    if (scrolled)
      resetIndexesCache();
  }
  next = window.setTimeout(loop, INTERVAL_MS);
}
function armWindowScroller() {
  window.addEventListener("mousemove", updateMousePosition);
  window.addEventListener("touchmove", updateMousePosition);
  loop();
}
function disarmWindowScroller() {
  window.removeEventListener("mousemove", updateMousePosition);
  window.removeEventListener("touchmove", updateMousePosition);
  mousePosition = void 0;
  window.clearTimeout(next);
  resetScrolling();
}
function svelteNodeClone(el) {
  const cloned = el.cloneNode(true);
  const values = [];
  const elIsSelect = el.tagName === "SELECT";
  const selects = elIsSelect ? [el] : [...el.querySelectorAll("select")];
  for (const select of selects) {
    values.push(select.value);
  }
  if (selects.length <= 0) {
    return cloned;
  }
  const clonedSelects = elIsSelect ? [cloned] : [...cloned.querySelectorAll("select")];
  for (let i2 = 0; i2 < clonedSelects.length; i2++) {
    const select = clonedSelects[i2];
    const value = values[i2];
    const optionEl = select.querySelector(`option[value="${value}"`);
    if (optionEl) {
      optionEl.setAttribute("selected", true);
    }
  }
  return cloned;
}
const FEATURE_FLAG_NAMES = Object.freeze({
  // This flag exists as a workaround for issue 454 (basically a browser bug) - seems like these rect values take time to update when in grid layout. Setting it to true can cause strange behaviour in the REPL for non-grid zones, see issue 470
  USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT: "USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT"
});
const featureFlagsMap = {
  [FEATURE_FLAG_NAMES.USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT]: false
};
function getFeatureFlag(flagName) {
  if (!FEATURE_FLAG_NAMES[flagName])
    throw new Error(`Can't get non existing feature flag ${flagName}! Supported flags: ${Object.keys(FEATURE_FLAG_NAMES)}`);
  return featureFlagsMap[flagName];
}
const TRANSITION_DURATION_SECONDS = 0.2;
function trs(property) {
  return `${property} ${TRANSITION_DURATION_SECONDS}s ease`;
}
function createDraggedElementFrom(originalElement, positionCenterOnXY) {
  const rect = originalElement.getBoundingClientRect();
  const draggedEl2 = svelteNodeClone(originalElement);
  copyStylesFromTo(originalElement, draggedEl2);
  draggedEl2.id = DRAGGED_ELEMENT_ID;
  draggedEl2.style.position = "fixed";
  let elTopPx = rect.top;
  let elLeftPx = rect.left;
  draggedEl2.style.top = `${elTopPx}px`;
  draggedEl2.style.left = `${elLeftPx}px`;
  if (positionCenterOnXY) {
    const center = findCenter(rect);
    elTopPx -= center.y - positionCenterOnXY.y;
    elLeftPx -= center.x - positionCenterOnXY.x;
    window.setTimeout(() => {
      draggedEl2.style.top = `${elTopPx}px`;
      draggedEl2.style.left = `${elLeftPx}px`;
    }, 0);
  }
  draggedEl2.style.margin = "0";
  draggedEl2.style.boxSizing = "border-box";
  draggedEl2.style.height = `${rect.height}px`;
  draggedEl2.style.width = `${rect.width}px`;
  draggedEl2.style.transition = `${trs("top")}, ${trs("left")}, ${trs("background-color")}, ${trs("opacity")}, ${trs("color")} `;
  window.setTimeout(() => draggedEl2.style.transition += `, ${trs("width")}, ${trs("height")}`, 0);
  draggedEl2.style.zIndex = "9999";
  draggedEl2.style.cursor = "grabbing";
  return draggedEl2;
}
function moveDraggedElementToWasDroppedState(draggedEl2) {
  draggedEl2.style.cursor = "grab";
}
function morphDraggedElementToBeLike(draggedEl2, copyFromEl, currentMouseX, currentMouseY) {
  copyStylesFromTo(copyFromEl, draggedEl2);
  const newRect = copyFromEl.getBoundingClientRect();
  const draggedElRect = draggedEl2.getBoundingClientRect();
  const widthChange = newRect.width - draggedElRect.width;
  const heightChange = newRect.height - draggedElRect.height;
  if (widthChange || heightChange) {
    const relativeDistanceOfMousePointerFromDraggedSides = {
      left: (currentMouseX - draggedElRect.left) / draggedElRect.width,
      top: (currentMouseY - draggedElRect.top) / draggedElRect.height
    };
    if (!getFeatureFlag(FEATURE_FLAG_NAMES.USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT)) {
      draggedEl2.style.height = `${newRect.height}px`;
      draggedEl2.style.width = `${newRect.width}px`;
    }
    draggedEl2.style.left = `${parseFloat(draggedEl2.style.left) - relativeDistanceOfMousePointerFromDraggedSides.left * widthChange}px`;
    draggedEl2.style.top = `${parseFloat(draggedEl2.style.top) - relativeDistanceOfMousePointerFromDraggedSides.top * heightChange}px`;
  }
}
function copyStylesFromTo(copyFromEl, copyToEl) {
  const computedStyle = window.getComputedStyle(copyFromEl);
  Array.from(computedStyle).filter(
    (s3) => s3.startsWith("background") || s3.startsWith("padding") || s3.startsWith("font") || s3.startsWith("text") || s3.startsWith("align") || s3.startsWith("justify") || s3.startsWith("display") || s3.startsWith("flex") || s3.startsWith("border") || s3 === "opacity" || s3 === "color" || s3 === "list-style-type" || // copying with and height to make up for rect update timing issues in some browsers
    getFeatureFlag(FEATURE_FLAG_NAMES.USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT) && (s3 === "width" || s3 === "height")
  ).forEach((s3) => copyToEl.style.setProperty(s3, computedStyle.getPropertyValue(s3), computedStyle.getPropertyPriority(s3)));
}
function styleDraggable(draggableEl, dragDisabled) {
  draggableEl.draggable = false;
  draggableEl.ondragstart = () => false;
  if (!dragDisabled) {
    draggableEl.style.userSelect = "none";
    draggableEl.style.WebkitUserSelect = "none";
    draggableEl.style.cursor = "grab";
  } else {
    draggableEl.style.userSelect = "";
    draggableEl.style.WebkitUserSelect = "";
    draggableEl.style.cursor = "";
  }
}
function hideElement(dragTarget) {
  dragTarget.style.display = "none";
  dragTarget.style.position = "fixed";
  dragTarget.style.zIndex = "-5";
}
function decorateShadowEl(shadowEl) {
  shadowEl.style.visibility = "hidden";
  shadowEl.setAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME, "true");
}
function unDecorateShadowElement(shadowEl) {
  shadowEl.style.visibility = "";
  shadowEl.removeAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
}
function styleActiveDropZones(dropZones, getStyles = () => {
}, getClasses = () => []) {
  dropZones.forEach((dz) => {
    const styles = getStyles(dz);
    Object.keys(styles).forEach((style) => {
      dz.style[style] = styles[style];
    });
    getClasses(dz).forEach((c2) => dz.classList.add(c2));
  });
}
function styleInactiveDropZones(dropZones, getStyles = () => {
}, getClasses = () => []) {
  dropZones.forEach((dz) => {
    const styles = getStyles(dz);
    Object.keys(styles).forEach((style) => {
      dz.style[style] = "";
    });
    getClasses(dz).forEach((c2) => dz.classList.contains(c2) && dz.classList.remove(c2));
  });
}
function preventShrinking(el) {
  const originalMinHeight = el.style.minHeight;
  el.style.minHeight = window.getComputedStyle(el).getPropertyValue("height");
  const originalMinWidth = el.style.minWidth;
  el.style.minWidth = window.getComputedStyle(el).getPropertyValue("width");
  return function undo() {
    el.style.minHeight = originalMinHeight;
    el.style.minWidth = originalMinWidth;
  };
}
const DEFAULT_DROP_ZONE_TYPE$1 = "--any--";
const MIN_OBSERVATION_INTERVAL_MS = 100;
const DISABLED_OBSERVATION_INTERVAL_MS = 20;
const MIN_MOVEMENT_BEFORE_DRAG_START_PX = 3;
const DEFAULT_DROP_TARGET_STYLE$1 = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
const ORIGINAL_DRAGGED_ITEM_MARKER_ATTRIBUTE = "data-is-dnd-original-dragged-item";
let originalDragTarget;
let draggedEl;
let draggedElData;
let draggedElType;
let originDropZone;
let originIndex;
let shadowElData;
let shadowElDropZone;
let dragStartMousePosition;
let currentMousePosition;
let isWorkingOnPreviousDrag = false;
let finalizingPreviousDrag = false;
let unlockOriginDzMinDimensions;
let isDraggedOutsideOfAnyDz = false;
let scheduledForRemovalAfterDrop = [];
const typeToDropZones$1 = /* @__PURE__ */ new Map();
const dzToConfig$1 = /* @__PURE__ */ new Map();
const elToMouseDownListener = /* @__PURE__ */ new WeakMap();
function registerDropZone$1(dropZoneEl, type) {
  if (!typeToDropZones$1.has(type)) {
    typeToDropZones$1.set(type, /* @__PURE__ */ new Set());
  }
  if (!typeToDropZones$1.get(type).has(dropZoneEl)) {
    typeToDropZones$1.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone$1(dropZoneEl, type) {
  typeToDropZones$1.get(type).delete(dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones$1.get(type).size === 0) {
    typeToDropZones$1.delete(type);
  }
}
function watchDraggedElement() {
  armWindowScroller();
  const dropZones = typeToDropZones$1.get(draggedElType);
  for (const dz of dropZones) {
    dz.addEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
    dz.addEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
    dz.addEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
  }
  window.addEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop$1);
  const setIntervalMs = Math.max(...Array.from(dropZones.keys()).map((dz) => dzToConfig$1.get(dz).dropAnimationDurationMs));
  const observationIntervalMs = setIntervalMs === 0 ? DISABLED_OBSERVATION_INTERVAL_MS : Math.max(setIntervalMs, MIN_OBSERVATION_INTERVAL_MS);
  observe(draggedEl, dropZones, observationIntervalMs * 1.07);
}
function unWatchDraggedElement() {
  disarmWindowScroller();
  const dropZones = typeToDropZones$1.get(draggedElType);
  for (const dz of dropZones) {
    dz.removeEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
    dz.removeEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
    dz.removeEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
  }
  window.removeEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop$1);
  unobserve();
}
function findShadowElementIdx(items) {
  return items.findIndex((item) => !!item[SHADOW_ITEM_MARKER_PROPERTY_NAME]);
}
function handleDraggedEntered(e2) {
  let { items, dropFromOthersDisabled } = dzToConfig$1.get(e2.currentTarget);
  if (dropFromOthersDisabled && e2.currentTarget !== originDropZone) {
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  items = items.filter((item) => item[ITEM_ID_KEY] !== shadowElData[ITEM_ID_KEY]);
  if (originDropZone !== e2.currentTarget) {
    const originZoneItems = dzToConfig$1.get(originDropZone).items;
    const newOriginZoneItems = originZoneItems.filter((item) => !item[SHADOW_ITEM_MARKER_PROPERTY_NAME]);
    dispatchConsiderEvent(originDropZone, newOriginZoneItems, {
      trigger: TRIGGERS.DRAGGED_ENTERED_ANOTHER,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  const { index: index2, isProximityBased } = e2.detail.indexObj;
  const shadowElIdx = isProximityBased && index2 === e2.currentTarget.children.length - 1 ? index2 + 1 : index2;
  shadowElDropZone = e2.currentTarget;
  items.splice(shadowElIdx, 0, shadowElData);
  dispatchConsiderEvent(e2.currentTarget, items, { trigger: TRIGGERS.DRAGGED_ENTERED, id: draggedElData[ITEM_ID_KEY], source: SOURCES.POINTER });
}
function handleDraggedLeft(e2) {
  if (!isWorkingOnPreviousDrag)
    return;
  const { items, dropFromOthersDisabled } = dzToConfig$1.get(e2.currentTarget);
  if (dropFromOthersDisabled && e2.currentTarget !== originDropZone && e2.currentTarget !== shadowElDropZone) {
    return;
  }
  const shadowElIdx = findShadowElementIdx(items);
  const shadowItem = items.splice(shadowElIdx, 1)[0];
  shadowElDropZone = void 0;
  const { type, theOtherDz } = e2.detail;
  if (type === DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY || type === DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER && theOtherDz !== originDropZone && dzToConfig$1.get(theOtherDz).dropFromOthersDisabled) {
    isDraggedOutsideOfAnyDz = true;
    shadowElDropZone = originDropZone;
    const originZoneItems = dzToConfig$1.get(originDropZone).items;
    originZoneItems.splice(originIndex, 0, shadowItem);
    dispatchConsiderEvent(originDropZone, originZoneItems, {
      trigger: TRIGGERS.DRAGGED_LEFT_ALL,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  dispatchConsiderEvent(e2.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_LEFT,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedIsOverIndex(e2) {
  const { items, dropFromOthersDisabled } = dzToConfig$1.get(e2.currentTarget);
  if (dropFromOthersDisabled && e2.currentTarget !== originDropZone) {
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  const { index: index2 } = e2.detail.indexObj;
  const shadowElIdx = findShadowElementIdx(items);
  items.splice(shadowElIdx, 1);
  items.splice(index2, 0, shadowElData);
  dispatchConsiderEvent(e2.currentTarget, items, { trigger: TRIGGERS.DRAGGED_OVER_INDEX, id: draggedElData[ITEM_ID_KEY], source: SOURCES.POINTER });
}
function handleMouseMove(e2) {
  e2.preventDefault();
  const c2 = e2.touches ? e2.touches[0] : e2;
  currentMousePosition = { x: c2.clientX, y: c2.clientY };
  draggedEl.style.transform = `translate3d(${currentMousePosition.x - dragStartMousePosition.x}px, ${currentMousePosition.y - dragStartMousePosition.y}px, 0)`;
}
function handleDrop$1() {
  finalizingPreviousDrag = true;
  window.removeEventListener("mousemove", handleMouseMove);
  window.removeEventListener("touchmove", handleMouseMove);
  window.removeEventListener("mouseup", handleDrop$1);
  window.removeEventListener("touchend", handleDrop$1);
  unWatchDraggedElement();
  moveDraggedElementToWasDroppedState(draggedEl);
  if (!shadowElDropZone) {
    shadowElDropZone = originDropZone;
  }
  let { items, type } = dzToConfig$1.get(shadowElDropZone);
  styleInactiveDropZones(
    typeToDropZones$1.get(type),
    (dz) => dzToConfig$1.get(dz).dropTargetStyle,
    (dz) => dzToConfig$1.get(dz).dropTargetClasses
  );
  let shadowElIdx = findShadowElementIdx(items);
  if (shadowElIdx === -1)
    shadowElIdx = originIndex;
  items = items.map((item) => item[SHADOW_ITEM_MARKER_PROPERTY_NAME] ? draggedElData : item);
  function finalizeWithinZone() {
    unlockOriginDzMinDimensions();
    dispatchFinalizeEvent(shadowElDropZone, items, {
      trigger: isDraggedOutsideOfAnyDz ? TRIGGERS.DROPPED_OUTSIDE_OF_ANY : TRIGGERS.DROPPED_INTO_ZONE,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    if (shadowElDropZone !== originDropZone) {
      dispatchFinalizeEvent(originDropZone, dzToConfig$1.get(originDropZone).items, {
        trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
    }
    unDecorateShadowElement(shadowElDropZone.children[shadowElIdx]);
    cleanupPostDrop();
  }
  animateDraggedToFinalPosition(shadowElIdx, finalizeWithinZone);
}
function animateDraggedToFinalPosition(shadowElIdx, callback2) {
  const shadowElRect = getBoundingRectNoTransforms(shadowElDropZone.children[shadowElIdx]);
  const newTransform = {
    x: shadowElRect.left - parseFloat(draggedEl.style.left),
    y: shadowElRect.top - parseFloat(draggedEl.style.top)
  };
  const { dropAnimationDurationMs } = dzToConfig$1.get(shadowElDropZone);
  const transition = `transform ${dropAnimationDurationMs}ms ease`;
  draggedEl.style.transition = draggedEl.style.transition ? draggedEl.style.transition + "," + transition : transition;
  draggedEl.style.transform = `translate3d(${newTransform.x}px, ${newTransform.y}px, 0)`;
  window.setTimeout(callback2, dropAnimationDurationMs);
}
function scheduleDZForRemovalAfterDrop(dz, destroy) {
  scheduledForRemovalAfterDrop.push({ dz, destroy });
  window.requestAnimationFrame(() => {
    hideElement(dz);
    document.body.appendChild(dz);
  });
}
function cleanupPostDrop() {
  draggedEl.remove();
  originalDragTarget.remove();
  if (scheduledForRemovalAfterDrop.length) {
    scheduledForRemovalAfterDrop.forEach(({ dz, destroy }) => {
      destroy();
      dz.remove();
    });
    scheduledForRemovalAfterDrop = [];
  }
  draggedEl = void 0;
  originalDragTarget = void 0;
  draggedElData = void 0;
  draggedElType = void 0;
  originDropZone = void 0;
  originIndex = void 0;
  shadowElData = void 0;
  shadowElDropZone = void 0;
  dragStartMousePosition = void 0;
  currentMousePosition = void 0;
  isWorkingOnPreviousDrag = false;
  finalizingPreviousDrag = false;
  unlockOriginDzMinDimensions = void 0;
  isDraggedOutsideOfAnyDz = false;
}
function dndzone$2(node, options) {
  let initialized = false;
  const config = {
    items: void 0,
    type: void 0,
    flipDurationMs: 0,
    dragDisabled: false,
    morphDisabled: false,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE$1,
    dropTargetClasses: [],
    transformDraggedElement: () => {
    },
    centreDraggedOnCursor: false
  };
  let elToIdx = /* @__PURE__ */ new Map();
  function addMaybeListeners() {
    window.addEventListener("mousemove", handleMouseMoveMaybeDragStart, { passive: false });
    window.addEventListener("touchmove", handleMouseMoveMaybeDragStart, { passive: false, capture: false });
    window.addEventListener("mouseup", handleFalseAlarm, { passive: false });
    window.addEventListener("touchend", handleFalseAlarm, { passive: false });
  }
  function removeMaybeListeners() {
    window.removeEventListener("mousemove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("touchmove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("mouseup", handleFalseAlarm);
    window.removeEventListener("touchend", handleFalseAlarm);
  }
  function handleFalseAlarm() {
    removeMaybeListeners();
    originalDragTarget = void 0;
    dragStartMousePosition = void 0;
    currentMousePosition = void 0;
  }
  function handleMouseMoveMaybeDragStart(e2) {
    e2.preventDefault();
    const c2 = e2.touches ? e2.touches[0] : e2;
    currentMousePosition = { x: c2.clientX, y: c2.clientY };
    if (Math.abs(currentMousePosition.x - dragStartMousePosition.x) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX || Math.abs(currentMousePosition.y - dragStartMousePosition.y) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX) {
      removeMaybeListeners();
      handleDragStart();
    }
  }
  function handleMouseDown(e2) {
    if (e2.target !== e2.currentTarget && (e2.target.value !== void 0 || e2.target.isContentEditable)) {
      return;
    }
    if (e2.button) {
      return;
    }
    if (isWorkingOnPreviousDrag) {
      return;
    }
    e2.stopPropagation();
    const c2 = e2.touches ? e2.touches[0] : e2;
    dragStartMousePosition = { x: c2.clientX, y: c2.clientY };
    currentMousePosition = { ...dragStartMousePosition };
    originalDragTarget = e2.currentTarget;
    addMaybeListeners();
  }
  function handleDragStart() {
    isWorkingOnPreviousDrag = true;
    const currentIdx = elToIdx.get(originalDragTarget);
    originIndex = currentIdx;
    originDropZone = originalDragTarget.parentElement;
    const rootNode = originDropZone.getRootNode();
    const originDropZoneRoot = rootNode.body || rootNode;
    const { items, type, centreDraggedOnCursor } = config;
    draggedElData = { ...items[currentIdx] };
    draggedElType = type;
    shadowElData = { ...draggedElData, [SHADOW_ITEM_MARKER_PROPERTY_NAME]: true, [ITEM_ID_KEY]: SHADOW_PLACEHOLDER_ITEM_ID };
    draggedEl = createDraggedElementFrom(originalDragTarget, centreDraggedOnCursor && currentMousePosition);
    originalDragTarget.setAttribute(ORIGINAL_DRAGGED_ITEM_MARKER_ATTRIBUTE, true);
    function keepOriginalElementInDom() {
      if (!draggedEl.parentElement) {
        originDropZoneRoot.appendChild(draggedEl);
        draggedEl.focus();
        watchDraggedElement();
        hideElement(originalDragTarget);
        originDropZoneRoot.appendChild(originalDragTarget);
      } else {
        window.requestAnimationFrame(keepOriginalElementInDom);
      }
    }
    window.requestAnimationFrame(keepOriginalElementInDom);
    styleActiveDropZones(
      Array.from(typeToDropZones$1.get(config.type)).filter((dz) => dz === originDropZone || !dzToConfig$1.get(dz).dropFromOthersDisabled),
      (dz) => dzToConfig$1.get(dz).dropTargetStyle,
      (dz) => dzToConfig$1.get(dz).dropTargetClasses
    );
    items.splice(currentIdx, 1, shadowElData);
    unlockOriginDzMinDimensions = preventShrinking(originDropZone);
    dispatchConsiderEvent(originDropZone, items, { trigger: TRIGGERS.DRAG_STARTED, id: draggedElData[ITEM_ID_KEY], source: SOURCES.POINTER });
    window.addEventListener("mousemove", handleMouseMove, { passive: false });
    window.addEventListener("touchmove", handleMouseMove, { passive: false, capture: false });
    window.addEventListener("mouseup", handleDrop$1, { passive: false });
    window.addEventListener("touchend", handleDrop$1, { passive: false });
  }
  function configure({
    items = void 0,
    flipDurationMs: dropAnimationDurationMs = 0,
    type: newType = DEFAULT_DROP_ZONE_TYPE$1,
    dragDisabled = false,
    morphDisabled = false,
    dropFromOthersDisabled = false,
    dropTargetStyle = DEFAULT_DROP_TARGET_STYLE$1,
    dropTargetClasses = [],
    transformDraggedElement = () => {
    },
    centreDraggedOnCursor = false
  }) {
    config.dropAnimationDurationMs = dropAnimationDurationMs;
    if (config.type && newType !== config.type) {
      unregisterDropZone$1(node, config.type);
    }
    config.type = newType;
    config.items = [...items];
    config.dragDisabled = dragDisabled;
    config.morphDisabled = morphDisabled;
    config.transformDraggedElement = transformDraggedElement;
    config.centreDraggedOnCursor = centreDraggedOnCursor;
    if (initialized && isWorkingOnPreviousDrag && !finalizingPreviousDrag && (!areObjectsShallowEqual(dropTargetStyle, config.dropTargetStyle) || !areArraysShallowEqualSameOrder(dropTargetClasses, config.dropTargetClasses))) {
      styleInactiveDropZones(
        [node],
        () => config.dropTargetStyle,
        () => dropTargetClasses
      );
      styleActiveDropZones(
        [node],
        () => dropTargetStyle,
        () => dropTargetClasses
      );
    }
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = [...dropTargetClasses];
    function getConfigProp(dz, propName) {
      return dzToConfig$1.get(dz) ? dzToConfig$1.get(dz)[propName] : config[propName];
    }
    if (initialized && isWorkingOnPreviousDrag && config.dropFromOthersDisabled !== dropFromOthersDisabled) {
      if (dropFromOthersDisabled) {
        styleInactiveDropZones(
          [node],
          (dz) => getConfigProp(dz, "dropTargetStyle"),
          (dz) => getConfigProp(dz, "dropTargetClasses")
        );
      } else {
        styleActiveDropZones(
          [node],
          (dz) => getConfigProp(dz, "dropTargetStyle"),
          (dz) => getConfigProp(dz, "dropTargetClasses")
        );
      }
    }
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    dzToConfig$1.set(node, config);
    registerDropZone$1(node, newType);
    const shadowElIdx = findShadowElementIdx(config.items);
    for (let idx = 0; idx < node.children.length; idx++) {
      const draggableEl = node.children[idx];
      styleDraggable(draggableEl, dragDisabled);
      if (idx === shadowElIdx) {
        config.transformDraggedElement(draggedEl, draggedElData, idx);
        if (!morphDisabled) {
          morphDraggedElementToBeLike(draggedEl, draggableEl, currentMousePosition.x, currentMousePosition.y);
        }
        decorateShadowEl(draggableEl);
        continue;
      }
      draggableEl.removeEventListener("mousedown", elToMouseDownListener.get(draggableEl));
      draggableEl.removeEventListener("touchstart", elToMouseDownListener.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("mousedown", handleMouseDown);
        draggableEl.addEventListener("touchstart", handleMouseDown);
        elToMouseDownListener.set(draggableEl, handleMouseDown);
      }
      elToIdx.set(draggableEl, idx);
      if (!initialized) {
        initialized = true;
      }
    }
  }
  configure(options);
  return {
    update: (newOptions) => {
      configure(newOptions);
    },
    destroy: () => {
      function destroyDz() {
        unregisterDropZone$1(node, dzToConfig$1.get(node).type);
        dzToConfig$1.delete(node);
      }
      if (isWorkingOnPreviousDrag && !node.closest(`[${ORIGINAL_DRAGGED_ITEM_MARKER_ATTRIBUTE}]`)) {
        scheduleDZForRemovalAfterDrop(node, destroyDz);
      } else {
        destroyDz();
      }
    }
  };
}
const INSTRUCTION_IDs$1 = {
  DND_ZONE_ACTIVE: "dnd-zone-active",
  DND_ZONE_DRAG_DISABLED: "dnd-zone-drag-disabled"
};
const ID_TO_INSTRUCTION = {
  [INSTRUCTION_IDs$1.DND_ZONE_ACTIVE]: "Tab to one the items and press space-bar or enter to start dragging it",
  [INSTRUCTION_IDs$1.DND_ZONE_DRAG_DISABLED]: "This is a disabled drag and drop list"
};
const ALERT_DIV_ID = "dnd-action-aria-alert";
let alertsDiv;
function initAriaOnBrowser() {
  if (alertsDiv) {
    return;
  }
  alertsDiv = document.createElement("div");
  (function initAlertsDiv() {
    alertsDiv.id = ALERT_DIV_ID;
    alertsDiv.style.position = "fixed";
    alertsDiv.style.bottom = "0";
    alertsDiv.style.left = "0";
    alertsDiv.style.zIndex = "-5";
    alertsDiv.style.opacity = "0";
    alertsDiv.style.height = "0";
    alertsDiv.style.width = "0";
    alertsDiv.setAttribute("role", "alert");
  })();
  document.body.prepend(alertsDiv);
  Object.entries(ID_TO_INSTRUCTION).forEach(([id, txt]) => document.body.prepend(instructionToHiddenDiv(id, txt)));
}
function initAria() {
  if (isOnServer)
    return null;
  if (document.readyState === "complete") {
    initAriaOnBrowser();
  } else {
    window.addEventListener("DOMContentLoaded", initAriaOnBrowser);
  }
  return { ...INSTRUCTION_IDs$1 };
}
function destroyAria() {
  if (isOnServer || !alertsDiv)
    return;
  Object.keys(ID_TO_INSTRUCTION).forEach((id) => {
    var _a2;
    return (_a2 = document.getElementById(id)) == null ? void 0 : _a2.remove();
  });
  alertsDiv.remove();
  alertsDiv = void 0;
}
function instructionToHiddenDiv(id, txt) {
  const div = document.createElement("div");
  div.id = id;
  div.innerHTML = `<p>${txt}</p>`;
  div.style.display = "none";
  div.style.position = "fixed";
  div.style.zIndex = "-5";
  return div;
}
function alertToScreenReader(txt) {
  if (isOnServer)
    return;
  if (!alertsDiv) {
    initAriaOnBrowser();
  }
  alertsDiv.innerHTML = "";
  const alertText = document.createTextNode(txt);
  alertsDiv.appendChild(alertText);
  alertsDiv.style.display = "none";
  alertsDiv.style.display = "inline";
}
const DEFAULT_DROP_ZONE_TYPE = "--any--";
const DEFAULT_DROP_TARGET_STYLE = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
let isDragging = false;
let draggedItemType;
let focusedDz;
let focusedDzLabel = "";
let focusedItem;
let focusedItemId;
let focusedItemLabel = "";
const allDragTargets = /* @__PURE__ */ new WeakSet();
const elToKeyDownListeners = /* @__PURE__ */ new WeakMap();
const elToFocusListeners = /* @__PURE__ */ new WeakMap();
const dzToHandles = /* @__PURE__ */ new Map();
const dzToConfig = /* @__PURE__ */ new Map();
const typeToDropZones = /* @__PURE__ */ new Map();
let INSTRUCTION_IDs;
function registerDropZone(dropZoneEl, type) {
  if (typeToDropZones.size === 0) {
    INSTRUCTION_IDs = initAria();
    window.addEventListener("keydown", globalKeyDownHandler);
    window.addEventListener("click", globalClickHandler);
  }
  if (!typeToDropZones.has(type)) {
    typeToDropZones.set(type, /* @__PURE__ */ new Set());
  }
  if (!typeToDropZones.get(type).has(dropZoneEl)) {
    typeToDropZones.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone(dropZoneEl, type) {
  if (focusedDz === dropZoneEl) {
    handleDrop();
  }
  typeToDropZones.get(type).delete(dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones.get(type).size === 0) {
    typeToDropZones.delete(type);
  }
  if (typeToDropZones.size === 0) {
    window.removeEventListener("keydown", globalKeyDownHandler);
    window.removeEventListener("click", globalClickHandler);
    INSTRUCTION_IDs = void 0;
    destroyAria();
  }
}
function globalKeyDownHandler(e2) {
  if (!isDragging)
    return;
  switch (e2.key) {
    case "Escape": {
      handleDrop();
      break;
    }
  }
}
function globalClickHandler() {
  if (!isDragging)
    return;
  if (!allDragTargets.has(document.activeElement)) {
    handleDrop();
  }
}
function handleZoneFocus(e2) {
  if (!isDragging)
    return;
  const newlyFocusedDz = e2.currentTarget;
  if (newlyFocusedDz === focusedDz)
    return;
  focusedDzLabel = newlyFocusedDz.getAttribute("aria-label") || "";
  const { items: originItems } = dzToConfig.get(focusedDz);
  const originItem = originItems.find((item) => item[ITEM_ID_KEY] === focusedItemId);
  const originIdx = originItems.indexOf(originItem);
  const itemToMove = originItems.splice(originIdx, 1)[0];
  const { items: targetItems, autoAriaDisabled } = dzToConfig.get(newlyFocusedDz);
  if (newlyFocusedDz.getBoundingClientRect().top < focusedDz.getBoundingClientRect().top || newlyFocusedDz.getBoundingClientRect().left < focusedDz.getBoundingClientRect().left) {
    targetItems.push(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader(`Moved item ${focusedItemLabel} to the end of the list ${focusedDzLabel}`);
    }
  } else {
    targetItems.unshift(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader(`Moved item ${focusedItemLabel} to the beginning of the list ${focusedDzLabel}`);
    }
  }
  const dzFrom = focusedDz;
  dispatchFinalizeEvent(dzFrom, originItems, { trigger: TRIGGERS.DROPPED_INTO_ANOTHER, id: focusedItemId, source: SOURCES.KEYBOARD });
  dispatchFinalizeEvent(newlyFocusedDz, targetItems, { trigger: TRIGGERS.DROPPED_INTO_ZONE, id: focusedItemId, source: SOURCES.KEYBOARD });
  focusedDz = newlyFocusedDz;
}
function triggerAllDzsUpdate() {
  dzToHandles.forEach(({ update }, dz) => update(dzToConfig.get(dz)));
}
function handleDrop(dispatchConsider = true) {
  if (!dzToConfig.get(focusedDz).autoAriaDisabled) {
    alertToScreenReader(`Stopped dragging item ${focusedItemLabel}`);
  }
  if (allDragTargets.has(document.activeElement)) {
    document.activeElement.blur();
  }
  if (dispatchConsider) {
    dispatchConsiderEvent(focusedDz, dzToConfig.get(focusedDz).items, {
      trigger: TRIGGERS.DRAG_STOPPED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
  }
  styleInactiveDropZones(
    typeToDropZones.get(draggedItemType),
    (dz) => dzToConfig.get(dz).dropTargetStyle,
    (dz) => dzToConfig.get(dz).dropTargetClasses
  );
  focusedItem = null;
  focusedItemId = null;
  focusedItemLabel = "";
  draggedItemType = null;
  focusedDz = null;
  focusedDzLabel = "";
  isDragging = false;
  triggerAllDzsUpdate();
}
function dndzone$1(node, options) {
  const config = {
    items: void 0,
    type: void 0,
    dragDisabled: false,
    zoneTabIndex: 0,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE,
    dropTargetClasses: [],
    autoAriaDisabled: false
  };
  function swap2(arr, i2, j) {
    if (arr.length <= 1)
      return;
    arr.splice(j, 1, arr.splice(i2, 1, arr[j])[0]);
  }
  function handleKeyDown(e2) {
    switch (e2.key) {
      case "Enter":
      case " ": {
        if ((e2.target.disabled !== void 0 || e2.target.href || e2.target.isContentEditable) && !allDragTargets.has(e2.target)) {
          return;
        }
        e2.preventDefault();
        e2.stopPropagation();
        if (isDragging) {
          handleDrop();
        } else {
          handleDragStart(e2);
        }
        break;
      }
      case "ArrowDown":
      case "ArrowRight": {
        if (!isDragging)
          return;
        e2.preventDefault();
        e2.stopPropagation();
        const { items } = dzToConfig.get(node);
        const children2 = Array.from(node.children);
        const idx = children2.indexOf(e2.currentTarget);
        if (idx < children2.length - 1) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader(`Moved item ${focusedItemLabel} to position ${idx + 2} in the list ${focusedDzLabel}`);
          }
          swap2(items, idx, idx + 1);
          dispatchFinalizeEvent(node, items, { trigger: TRIGGERS.DROPPED_INTO_ZONE, id: focusedItemId, source: SOURCES.KEYBOARD });
        }
        break;
      }
      case "ArrowUp":
      case "ArrowLeft": {
        if (!isDragging)
          return;
        e2.preventDefault();
        e2.stopPropagation();
        const { items } = dzToConfig.get(node);
        const children2 = Array.from(node.children);
        const idx = children2.indexOf(e2.currentTarget);
        if (idx > 0) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader(`Moved item ${focusedItemLabel} to position ${idx} in the list ${focusedDzLabel}`);
          }
          swap2(items, idx, idx - 1);
          dispatchFinalizeEvent(node, items, { trigger: TRIGGERS.DROPPED_INTO_ZONE, id: focusedItemId, source: SOURCES.KEYBOARD });
        }
        break;
      }
    }
  }
  function handleDragStart(e2) {
    setCurrentFocusedItem(e2.currentTarget);
    focusedDz = node;
    draggedItemType = config.type;
    isDragging = true;
    const dropTargets = Array.from(typeToDropZones.get(config.type)).filter((dz) => dz === focusedDz || !dzToConfig.get(dz).dropFromOthersDisabled);
    styleActiveDropZones(
      dropTargets,
      (dz) => dzToConfig.get(dz).dropTargetStyle,
      (dz) => dzToConfig.get(dz).dropTargetClasses
    );
    if (!config.autoAriaDisabled) {
      let msg = `Started dragging item ${focusedItemLabel}. Use the arrow keys to move it within its list ${focusedDzLabel}`;
      if (dropTargets.length > 1) {
        msg += `, or tab to another list in order to move the item into it`;
      }
      alertToScreenReader(msg);
    }
    dispatchConsiderEvent(node, dzToConfig.get(node).items, { trigger: TRIGGERS.DRAG_STARTED, id: focusedItemId, source: SOURCES.KEYBOARD });
    triggerAllDzsUpdate();
  }
  function handleClick(e2) {
    if (!isDragging)
      return;
    if (e2.currentTarget === focusedItem)
      return;
    e2.stopPropagation();
    handleDrop(false);
    handleDragStart(e2);
  }
  function setCurrentFocusedItem(draggableEl) {
    const { items } = dzToConfig.get(node);
    const children2 = Array.from(node.children);
    const focusedItemIdx = children2.indexOf(draggableEl);
    focusedItem = draggableEl;
    focusedItem.tabIndex = 0;
    focusedItemId = items[focusedItemIdx][ITEM_ID_KEY];
    focusedItemLabel = children2[focusedItemIdx].getAttribute("aria-label") || "";
  }
  function configure({
    items = [],
    type: newType = DEFAULT_DROP_ZONE_TYPE,
    dragDisabled = false,
    zoneTabIndex = 0,
    dropFromOthersDisabled = false,
    dropTargetStyle = DEFAULT_DROP_TARGET_STYLE,
    dropTargetClasses = [],
    autoAriaDisabled = false
  }) {
    config.items = [...items];
    config.dragDisabled = dragDisabled;
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    config.zoneTabIndex = zoneTabIndex;
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = dropTargetClasses;
    config.autoAriaDisabled = autoAriaDisabled;
    if (config.type && newType !== config.type) {
      unregisterDropZone(node, config.type);
    }
    config.type = newType;
    registerDropZone(node, newType);
    if (!autoAriaDisabled) {
      node.setAttribute("aria-disabled", dragDisabled);
      node.setAttribute("role", "list");
      node.setAttribute("aria-describedby", dragDisabled ? INSTRUCTION_IDs.DND_ZONE_DRAG_DISABLED : INSTRUCTION_IDs.DND_ZONE_ACTIVE);
    }
    dzToConfig.set(node, config);
    if (isDragging) {
      node.tabIndex = node === focusedDz || focusedItem.contains(node) || config.dropFromOthersDisabled || focusedDz && config.type !== dzToConfig.get(focusedDz).type ? -1 : 0;
    } else {
      node.tabIndex = config.zoneTabIndex;
    }
    node.addEventListener("focus", handleZoneFocus);
    for (let i2 = 0; i2 < node.children.length; i2++) {
      const draggableEl = node.children[i2];
      allDragTargets.add(draggableEl);
      draggableEl.tabIndex = isDragging ? -1 : 0;
      if (!autoAriaDisabled) {
        draggableEl.setAttribute("role", "listitem");
      }
      draggableEl.removeEventListener("keydown", elToKeyDownListeners.get(draggableEl));
      draggableEl.removeEventListener("click", elToFocusListeners.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("keydown", handleKeyDown);
        elToKeyDownListeners.set(draggableEl, handleKeyDown);
        draggableEl.addEventListener("click", handleClick);
        elToFocusListeners.set(draggableEl, handleClick);
      }
      if (isDragging && config.items[i2][ITEM_ID_KEY] === focusedItemId) {
        focusedItem = draggableEl;
        focusedItem.tabIndex = 0;
        draggableEl.focus();
      }
    }
  }
  configure(options);
  const handles = {
    update: (newOptions) => {
      configure(newOptions);
    },
    destroy: () => {
      unregisterDropZone(node, config.type);
      dzToConfig.delete(node);
      dzToHandles.delete(node);
    }
  };
  dzToHandles.set(node, handles);
  return handles;
}
function dndzone(node, options) {
  if (shouldIgnoreZone(node)) {
    return {
      update: () => {
      },
      destroy: () => {
      }
    };
  }
  validateOptions(options);
  const pointerZone = dndzone$2(node, options);
  const keyboardZone = dndzone$1(node, options);
  return {
    update: (newOptions) => {
      validateOptions(newOptions);
      pointerZone.update(newOptions);
      keyboardZone.update(newOptions);
    },
    destroy: () => {
      pointerZone.destroy();
      keyboardZone.destroy();
    }
  };
}
function shouldIgnoreZone(node) {
  return !!node.closest(`[${SHADOW_ELEMENT_HINT_ATTRIBUTE_NAME}="true"]`);
}
function validateOptions(options) {
  const {
    items,
    flipDurationMs,
    type,
    dragDisabled,
    morphDisabled,
    dropFromOthersDisabled,
    zoneTabIndex,
    dropTargetStyle,
    dropTargetClasses,
    transformDraggedElement,
    autoAriaDisabled,
    centreDraggedOnCursor,
    ...rest
  } = options;
  if (Object.keys(rest).length > 0) {
    console.warn(`dndzone will ignore unknown options`, rest);
  }
  if (!items) {
    throw new Error("no 'items' key provided to dndzone");
  }
  const itemWithMissingId = items.find((item) => !{}.hasOwnProperty.call(item, ITEM_ID_KEY));
  if (itemWithMissingId) {
    throw new Error(`missing '${ITEM_ID_KEY}' property for item ${toString(itemWithMissingId)}`);
  }
  if (dropTargetClasses && !Array.isArray(dropTargetClasses)) {
    throw new Error(`dropTargetClasses should be an array but instead it is a ${typeof dropTargetClasses}, ${toString(dropTargetClasses)}`);
  }
  if (zoneTabIndex && !isInt(zoneTabIndex)) {
    throw new Error(`zoneTabIndex should be a number but instead it is a ${typeof zoneTabIndex}, ${toString(zoneTabIndex)}`);
  }
}
function isInt(value) {
  return !isNaN(value) && function(x2) {
    return (x2 | 0) === x2;
  }(parseFloat(value));
}
function get_each_context$3(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[26] = list[i2];
  return child_ctx;
}
function get_each_context_1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[29] = list[i2];
  return child_ctx;
}
function create_if_block$4(ctx) {
  let drawer;
  let updating_open;
  let current;
  function drawer_open_binding(value) {
    ctx[18](value);
  }
  let drawer_props = {
    position: "right",
    size: "md",
    $$slots: { default: [create_default_slot$3] },
    $$scope: { ctx }
  };
  if (
    /*open*/
    ctx[0] !== void 0
  ) {
    drawer_props.open = /*open*/
    ctx[0];
  }
  drawer = new Drawer({ props: drawer_props });
  binding_callbacks.push(() => bind(drawer, "open", drawer_open_binding));
  return {
    c() {
      create_component(drawer.$$.fragment);
    },
    l(nodes) {
      claim_component(drawer.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(drawer, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const drawer_changes = {};
      if (dirty[0] & /*selected, settings, context, mode, item*/
      62 | dirty[1] & /*$$scope*/
      2) {
        drawer_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_open && dirty[0] & /*open*/
      1) {
        updating_open = true;
        drawer_changes.open = /*open*/
        ctx2[0];
        add_flush_callback(() => updating_open = false);
      }
      drawer.$set(drawer_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(drawer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(drawer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(drawer, detaching);
    }
  };
}
function create_if_block_1$4(ctx) {
  let div0;
  let button0;
  let t0;
  let button1;
  let t1;
  let divider0;
  let t2;
  let div1;
  let t3;
  let tabs;
  let t4;
  let divider1;
  let t5;
  let div2;
  let each_blocks = [];
  let each1_lookup = /* @__PURE__ */ new Map();
  let dndzone_action;
  let t6;
  let divider2;
  let t7;
  let if_block_anchor;
  let current;
  let mounted;
  let dispose;
  button0 = new Button({
    props: {
      type: "primary",
      $$slots: { default: [create_default_slot_7] },
      $$scope: { ctx }
    }
  });
  button0.$on(
    "click",
    /*save*/
    ctx[11]
  );
  button1 = new Button({
    props: {
      $$slots: { default: [create_default_slot_6] },
      $$scope: { ctx }
    }
  });
  button1.$on(
    "click",
    /*cancel*/
    ctx[10]
  );
  divider0 = new Divider({
    props: {
      $$slots: { label: [create_label_slot_2] },
      $$scope: { ctx }
    }
  });
  let each_value_1 = ensure_array_like(widgets);
  let each_blocks_1 = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks_1[i2] = create_each_block_1(get_each_context_1(ctx, each_value_1, i2));
  }
  const out = (i2) => transition_out(each_blocks_1[i2], 1, 1, () => {
    each_blocks_1[i2] = null;
  });
  tabs = new Tabs({
    props: {
      currentTab: (
        /*mode*/
        ctx[2]
      ),
      variant: "full-width",
      $$slots: { default: [create_default_slot_3$1] },
      $$scope: { ctx }
    }
  });
  divider1 = new Divider({
    props: {
      $$slots: { label: [create_label_slot_1] },
      $$scope: { ctx }
    }
  });
  let each_value = ensure_array_like(
    /*settings*/
    ctx[5]
  );
  const get_key = (ctx2) => (
    /*s*/
    ctx2[26].id
  );
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$3(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each1_lookup.set(key, each_blocks[i2] = create_each_block$3(key, child_ctx));
  }
  divider2 = new Divider({
    props: {
      $$slots: { label: [create_label_slot] },
      $$scope: { ctx }
    }
  });
  let if_block = (
    /*selected*/
    ctx[3] && create_if_block_2$2(ctx)
  );
  return {
    c() {
      div0 = element("div");
      create_component(button0.$$.fragment);
      t0 = space();
      create_component(button1.$$.fragment);
      t1 = space();
      create_component(divider0.$$.fragment);
      t2 = space();
      div1 = element("div");
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        each_blocks_1[i2].c();
      }
      t3 = space();
      create_component(tabs.$$.fragment);
      t4 = space();
      create_component(divider1.$$.fragment);
      t5 = space();
      div2 = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t6 = space();
      create_component(divider2.$$.fragment);
      t7 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      div0 = claim_element(nodes, "DIV", {});
      var div0_nodes = children(div0);
      claim_component(button0.$$.fragment, div0_nodes);
      t0 = claim_space(div0_nodes);
      claim_component(button1.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t1 = claim_space(nodes);
      claim_component(divider0.$$.fragment, nodes);
      t2 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        each_blocks_1[i2].l(div1_nodes);
      }
      div1_nodes.forEach(detach);
      t3 = claim_space(nodes);
      claim_component(tabs.$$.fragment, nodes);
      t4 = claim_space(nodes);
      claim_component(divider1.$$.fragment, nodes);
      t5 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(div2_nodes);
      }
      div2_nodes.forEach(detach);
      t6 = claim_space(nodes);
      claim_component(divider2.$$.fragment, nodes);
      t7 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      attr(div1, "class", "flex justify-evenly w-full flex-wrap");
      attr(div2, "class", "w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div0, anchor);
      mount_component(button0, div0, null);
      append_hydration(div0, t0);
      mount_component(button1, div0, null);
      insert_hydration(target, t1, anchor);
      mount_component(divider0, target, anchor);
      insert_hydration(target, t2, anchor);
      insert_hydration(target, div1, anchor);
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        if (each_blocks_1[i2]) {
          each_blocks_1[i2].m(div1, null);
        }
      }
      insert_hydration(target, t3, anchor);
      mount_component(tabs, target, anchor);
      insert_hydration(target, t4, anchor);
      mount_component(divider1, target, anchor);
      insert_hydration(target, t5, anchor);
      insert_hydration(target, div2, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div2, null);
        }
      }
      insert_hydration(target, t6, anchor);
      mount_component(divider2, target, anchor);
      insert_hydration(target, t7, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone.call(null, div2, {
            items: (
              /*settings*/
              ctx[5]
            ),
            flipDurationMs: 200
          })),
          listen(
            div2,
            "consider",
            /*handleSort*/
            ctx[7]
          ),
          listen(
            div2,
            "finalize",
            /*handleSort*/
            ctx[7]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const button0_changes = {};
      if (dirty[1] & /*$$scope*/
      2) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty[1] & /*$$scope*/
      2) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const divider0_changes = {};
      if (dirty[1] & /*$$scope*/
      2) {
        divider0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      divider0.$set(divider0_changes);
      if (dirty[0] & /*addWidget*/
      256) {
        each_value_1 = ensure_array_like(widgets);
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i2);
          if (each_blocks_1[i2]) {
            each_blocks_1[i2].p(child_ctx, dirty);
            transition_in(each_blocks_1[i2], 1);
          } else {
            each_blocks_1[i2] = create_each_block_1(child_ctx);
            each_blocks_1[i2].c();
            transition_in(each_blocks_1[i2], 1);
            each_blocks_1[i2].m(div1, null);
          }
        }
        group_outros();
        for (i2 = each_value_1.length; i2 < each_blocks_1.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
      const tabs_changes = {};
      if (dirty[0] & /*mode*/
      4)
        tabs_changes.currentTab = /*mode*/
        ctx2[2];
      if (dirty[0] & /*mode*/
      4 | dirty[1] & /*$$scope*/
      2) {
        tabs_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tabs.$set(tabs_changes);
      const divider1_changes = {};
      if (dirty[1] & /*$$scope*/
      2) {
        divider1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      divider1.$set(divider1_changes);
      if (dirty[0] & /*selected, settings, context, removeWidget*/
      568) {
        each_value = ensure_array_like(
          /*settings*/
          ctx2[5]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each1_lookup, div2, outro_and_destroy_block, create_each_block$3, null, get_each_context$3);
        check_outros();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty[0] & /*settings*/
      32)
        dndzone_action.update.call(null, {
          items: (
            /*settings*/
            ctx2[5]
          ),
          flipDurationMs: 200
        });
      const divider2_changes = {};
      if (dirty[1] & /*$$scope*/
      2) {
        divider2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      divider2.$set(divider2_changes);
      if (
        /*selected*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*selected*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_2$2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      transition_in(divider0.$$.fragment, local);
      for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
        transition_in(each_blocks_1[i2]);
      }
      transition_in(tabs.$$.fragment, local);
      transition_in(divider1.$$.fragment, local);
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      transition_in(divider2.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      transition_out(divider0.$$.fragment, local);
      each_blocks_1 = each_blocks_1.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks_1.length; i2 += 1) {
        transition_out(each_blocks_1[i2]);
      }
      transition_out(tabs.$$.fragment, local);
      transition_out(divider1.$$.fragment, local);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      transition_out(divider2.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t1);
        detach(t2);
        detach(div1);
        detach(t3);
        detach(t4);
        detach(t5);
        detach(div2);
        detach(t6);
        detach(t7);
        detach(if_block_anchor);
      }
      destroy_component(button0);
      destroy_component(button1);
      destroy_component(divider0, detaching);
      destroy_each(each_blocks_1, detaching);
      destroy_component(tabs, detaching);
      destroy_component(divider1, detaching);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d();
      }
      destroy_component(divider2, detaching);
      if (if_block)
        if_block.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot_7(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Save");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Save");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_6(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Cancel");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Cancel");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_label_slot_2(ctx) {
  let divider_label;
  let current;
  divider_label = new Divider.Label({ props: { slot: "label" } });
  return {
    c() {
      create_component(divider_label.$$.fragment);
    },
    l(nodes) {
      claim_component(divider_label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(divider_label, target, anchor);
      current = true;
    },
    p: noop$1,
    i(local) {
      if (current)
        return;
      transition_in(divider_label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(divider_label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(divider_label, detaching);
    }
  };
}
function create_each_block_1(ctx) {
  let div;
  let iconbutton;
  let t0;
  let span;
  let t1_value = (
    /*widget*/
    ctx[29].label + ""
  );
  let t1;
  let t2;
  let current;
  let mounted;
  let dispose;
  iconbutton = new IconButton({ props: { data: (
    /*widget*/
    ctx[29].icon
  ) } });
  function click_handler() {
    return (
      /*click_handler*/
      ctx[12](
        /*widget*/
        ctx[29]
      )
    );
  }
  return {
    c() {
      div = element("div");
      create_component(iconbutton.$$.fragment);
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(iconbutton.$$.fragment, div_nodes);
      t0 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", {});
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach);
      t2 = claim_space(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "flex items-center cursor-pointer");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(iconbutton, div, null);
      append_hydration(div, t0);
      append_hydration(div, span);
      append_hydration(span, t1);
      append_hydration(div, t2);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(iconbutton);
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot_5$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Card");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Card");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_4$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("View");
    },
    l(nodes) {
      t2 = claim_text(nodes, "View");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_3$1(ctx) {
  let tabs_tab0;
  let t2;
  let tabs_tab1;
  let current;
  tabs_tab0 = new Tabs.Tab({
    props: {
      key: "card",
      href: "#card",
      $$slots: { default: [create_default_slot_5$1] },
      $$scope: { ctx }
    }
  });
  tabs_tab0.$on(
    "click",
    /*click_handler_1*/
    ctx[13]
  );
  tabs_tab1 = new Tabs.Tab({
    props: {
      key: "view",
      href: "#view",
      $$slots: { default: [create_default_slot_4$1] },
      $$scope: { ctx }
    }
  });
  tabs_tab1.$on(
    "click",
    /*click_handler_2*/
    ctx[14]
  );
  return {
    c() {
      create_component(tabs_tab0.$$.fragment);
      t2 = space();
      create_component(tabs_tab1.$$.fragment);
    },
    l(nodes) {
      claim_component(tabs_tab0.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(tabs_tab1.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(tabs_tab0, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(tabs_tab1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tabs_tab0_changes = {};
      if (dirty[1] & /*$$scope*/
      2) {
        tabs_tab0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tabs_tab0.$set(tabs_tab0_changes);
      const tabs_tab1_changes = {};
      if (dirty[1] & /*$$scope*/
      2) {
        tabs_tab1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tabs_tab1.$set(tabs_tab1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(tabs_tab0.$$.fragment, local);
      transition_in(tabs_tab1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tabs_tab0.$$.fragment, local);
      transition_out(tabs_tab1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(tabs_tab0, detaching);
      destroy_component(tabs_tab1, detaching);
    }
  };
}
function create_default_slot_2$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Preview");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Preview");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_label_slot_1(ctx) {
  let divider_label;
  let current;
  divider_label = new Divider.Label({
    props: {
      slot: "label",
      $$slots: { default: [create_default_slot_2$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(divider_label.$$.fragment);
    },
    l(nodes) {
      claim_component(divider_label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(divider_label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const divider_label_changes = {};
      if (dirty[1] & /*$$scope*/
      2) {
        divider_label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      divider_label.$set(divider_label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(divider_label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(divider_label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(divider_label, detaching);
    }
  };
}
function create_if_block_3$1(ctx) {
  let div1;
  let switch_instance;
  let t0;
  let div0;
  let iconbutton;
  let t1;
  let current;
  let mounted;
  let dispose;
  var switch_value = findWidget(
    /*s*/
    ctx[26].type
  );
  function switch_props(ctx2, dirty) {
    return {
      props: {
        settings: (
          /*s*/
          ctx2[26]
        ),
        context: (
          /*context*/
          ctx2[4]
        )
      }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
  }
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[15](
        /*s*/
        ctx[26]
      )
    );
  }
  iconbutton = new IconButton({ props: { data: mdiDelete } });
  iconbutton.$on("click", click_handler_3);
  function click_handler_4(...args) {
    return (
      /*click_handler_4*/
      ctx[16](
        /*s*/
        ctx[26],
        ...args
      )
    );
  }
  return {
    c() {
      div1 = element("div");
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      t0 = space();
      div0 = element("div");
      create_component(iconbutton.$$.fragment);
      t1 = space();
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, div1_nodes);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(iconbutton.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      t1 = claim_space(div1_nodes);
      div1_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div0, "class", "flex items-center");
      attr(div1, "class", "w-full flex justify-between");
      toggle_class(
        div1,
        "border-2",
        /*selected*/
        ctx[3] === /*s*/
        ctx[26]
      );
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      if (switch_instance)
        mount_component(switch_instance, div1, null);
      append_hydration(div1, t0);
      append_hydration(div1, div0);
      mount_component(iconbutton, div0, null);
      append_hydration(div1, t1);
      current = true;
      if (!mounted) {
        dispose = listen(div1, "click", click_handler_4);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*settings*/
      32 && switch_value !== (switch_value = findWidget(
        /*s*/
        ctx[26].type
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, div1, t0);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty[0] & /*settings*/
        32)
          switch_instance_changes.settings = /*s*/
          ctx[26];
        if (dirty[0] & /*context*/
        16)
          switch_instance_changes.context = /*context*/
          ctx[4];
        switch_instance.$set(switch_instance_changes);
      }
      if (!current || dirty[0] & /*selected, settings*/
      40) {
        toggle_class(
          div1,
          "border-2",
          /*selected*/
          ctx[3] === /*s*/
          ctx[26]
        );
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (switch_instance)
        destroy_component(switch_instance);
      destroy_component(iconbutton);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$3(key_1, ctx) {
  var _a2;
  let first;
  let if_block_anchor;
  let current;
  let if_block = (
    /*s*/
    ((_a2 = ctx[26]) == null ? void 0 : _a2.type) !== void 0 && create_if_block_3$1(ctx)
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      first = empty();
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      this.first = first;
    },
    m(target, anchor) {
      insert_hydration(target, first, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      var _a3;
      ctx = new_ctx;
      if (
        /*s*/
        ((_a3 = ctx[26]) == null ? void 0 : _a3.type) !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
          if (dirty[0] & /*settings*/
          32) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_3$1(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_default_slot_1$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Settings");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Settings");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_label_slot(ctx) {
  let divider_label;
  let current;
  divider_label = new Divider.Label({
    props: {
      slot: "label",
      $$slots: { default: [create_default_slot_1$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(divider_label.$$.fragment);
    },
    l(nodes) {
      claim_component(divider_label.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(divider_label, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const divider_label_changes = {};
      if (dirty[1] & /*$$scope*/
      2) {
        divider_label_changes.$$scope = { dirty, ctx: ctx2 };
      }
      divider_label.$set(divider_label_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(divider_label.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(divider_label.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(divider_label, detaching);
    }
  };
}
function create_if_block_2$2(ctx) {
  let div;
  let switch_instance;
  let current;
  var switch_value = findEditor(
    /*selected*/
    ctx[3].type
  );
  function switch_props(ctx2, dirty) {
    return { props: { settings: (
      /*selected*/
      ctx2[3]
    ) } };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    switch_instance.$on(
      "settings",
      /*settings_handler*/
      ctx[17]
    );
  }
  return {
    c() {
      div = element("div");
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "mt-5");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (switch_instance)
        mount_component(switch_instance, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*selected*/
      8 && switch_value !== (switch_value = findEditor(
        /*selected*/
        ctx2[3].type
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          switch_instance.$on(
            "settings",
            /*settings_handler*/
            ctx2[17]
          );
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, div, null);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty[0] & /*selected*/
        8)
          switch_instance_changes.settings = /*selected*/
          ctx2[3];
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (switch_instance)
        destroy_component(switch_instance);
    }
  };
}
function create_default_slot$3(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*item*/
    ctx[1] !== void 0 && create_if_block_1$4(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*item*/
        ctx2[1] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*item*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$4(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment$4(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*open*/
    ctx[0] && create_if_block$4(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*open*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*open*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$4(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$4($$self, $$props, $$invalidate) {
  let { open = false } = $$props;
  let { item } = $$props;
  const dispatch = createEventDispatcher();
  let copy;
  let mode = "card";
  let context = {
    mode: "card",
    editing: true,
    select: selectWidget,
    update: updateWidget
  };
  let settings;
  let selected;
  function onOpen(_open) {
    if (_open) {
      $$invalidate(2, mode = "card");
    }
  }
  function onMode(_mode) {
    $$invalidate(3, selected = void 0);
  }
  function onItem(_item) {
    if (_item === void 0) {
      return;
    }
    copy = JSON.parse(JSON.stringify(_item));
    $$invalidate(5, settings = mode === "card" ? copy.card : copy.view);
    $$invalidate(4, context = {
      mode,
      editing: true,
      select: selectWidget,
      update: updateWidget
    });
    if (settings.length > 0) {
      $$invalidate(3, selected = settings[0]);
    }
  }
  function onSelected(_selected) {
    if (_selected !== void 0) {
      $$invalidate(4, context = { ...context });
    }
  }
  function selectWidget(id) {
    $$invalidate(3, selected = settings == null ? void 0 : settings.find((w2) => w2.id === id));
  }
  function updateWidget(_settings) {
    if (settings !== void 0) {
      const index2 = settings.findIndex((s3) => s3.id === _settings.id);
      const settingsCopy = [...settings];
      settingsCopy[index2] = _settings;
      $$invalidate(5, settings = settingsCopy);
      if (mode === "card") {
        copy.card = settings;
      } else {
        copy.view = settings;
      }
      if (selected !== void 0 && selected.id === _settings.id) {
        $$invalidate(3, selected = _settings);
      }
    }
  }
  function handleSort(e2) {
    $$invalidate(5, settings = e2.detail.items);
    if (mode === "card") {
      copy.card = settings;
    } else {
      copy.view = settings;
    }
  }
  function addWidget(type) {
    if (type === void 0 || copy === void 0) {
      return;
    }
    const create2 = findCreate(type);
    if (create2 !== void 0) {
      const widget = create2();
      $$invalidate(5, settings = [...settings, widget]);
      if (mode === "card") {
        copy.card = settings;
      } else {
        copy.view = settings;
      }
      $$invalidate(4, context = { ...context });
    }
  }
  function removeWidget(id) {
    if (copy !== void 0) {
      $$invalidate(5, settings = settings.filter((w2) => w2.id !== id));
      if (mode === "card") {
        copy.card = settings;
      } else {
        copy.view = settings;
      }
      $$invalidate(4, context = { ...context });
      if ((selected == null ? void 0 : selected.id) === id) {
        $$invalidate(3, selected = void 0);
      }
    }
  }
  function cancel() {
    if (item !== void 0) {
      onItem(item);
    }
    $$invalidate(0, open = false);
  }
  function save() {
    dispatch("item", { ...copy });
  }
  const click_handler = (widget) => addWidget(widget.type);
  const click_handler_1 = () => $$invalidate(2, mode = "card");
  const click_handler_2 = () => $$invalidate(2, mode = "view");
  const click_handler_3 = (s3) => removeWidget(s3.id);
  const click_handler_4 = (s3, e2) => context.select(s3.id);
  const settings_handler = (e2) => updateWidget(e2.detail);
  function drawer_open_binding(value) {
    open = value;
    $$invalidate(0, open);
  }
  $$self.$$set = ($$props2) => {
    if ("open" in $$props2)
      $$invalidate(0, open = $$props2.open);
    if ("item" in $$props2)
      $$invalidate(1, item = $$props2.item);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*open*/
    1) {
      onOpen(open);
    }
    if ($$self.$$.dirty[0] & /*mode*/
    4) {
      onMode();
    }
    if ($$self.$$.dirty[0] & /*item*/
    2) {
      onItem(item);
    }
    if ($$self.$$.dirty[0] & /*selected*/
    8) {
      onSelected(selected);
    }
  };
  return [
    open,
    item,
    mode,
    selected,
    context,
    settings,
    updateWidget,
    handleSort,
    addWidget,
    removeWidget,
    cancel,
    save,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    click_handler_4,
    settings_handler,
    drawer_open_binding
  ];
}
class EditWidgetView extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$4, create_fragment$4, safe_not_equal, { open: 0, item: 1 }, null, [-1, -1]);
  }
}
function throttle(func, timeFrame) {
  let lastTime = 0;
  return function(...args) {
    let now = /* @__PURE__ */ new Date();
    if (now - lastTime >= timeFrame) {
      func(...args);
      lastTime = now;
    }
  };
}
function getRowsCount(items, cols) {
  const getItemsMaxHeight = items.map((val) => {
    const item = val[cols];
    return (item && item.y) + (item && item.h) || 0;
  });
  return Math.max(...getItemsMaxHeight, 1);
}
const getColumn = (containerWidth, columns) => {
  const sortColumns = columns.slice().sort((a3, b2) => a3[0] - b2[0]);
  const breakpoint = sortColumns.find((value) => {
    const [width] = value;
    return containerWidth <= width;
  });
  if (breakpoint) {
    return breakpoint[1];
  } else {
    return sortColumns[sortColumns.length - 1][1];
  }
};
function getContainerHeight(items, yPerPx, cols) {
  return getRowsCount(items, cols) * yPerPx;
}
const makeMatrix = (rows, cols) => Array.from(Array(rows), () => new Array(cols));
function makeMatrixFromItems(items, _row, _col) {
  let matrix = makeMatrix(_row, _col);
  for (var i2 = 0; i2 < items.length; i2++) {
    const value = items[i2][_col];
    if (value) {
      const { x: x2, y: y3, h: h3 } = value;
      const id = items[i2].id;
      const w2 = Math.min(_col, value.w);
      for (var j = y3; j < y3 + h3; j++) {
        const row = matrix[j];
        for (var k2 = x2; k2 < x2 + w2; k2++) {
          row[k2] = { ...value, id };
        }
      }
    }
  }
  return matrix;
}
function findCloseBlocks(items, matrix, curObject) {
  const { h: h3, x: x2, y: y3 } = curObject;
  const w2 = Math.min(matrix[0].length, curObject.w);
  const tempR = matrix.slice(y3, y3 + h3);
  let result = [];
  for (var i2 = 0; i2 < tempR.length; i2++) {
    let tempA = tempR[i2].slice(x2, x2 + w2);
    result = [...result, ...tempA.map((val) => val.id && val.id !== curObject.id && val.id).filter(Boolean)];
  }
  return [...new Set(result)];
}
function makeMatrixFromItemsIgnore(items, ignoreList, _row, _col) {
  let matrix = makeMatrix(_row, _col);
  for (var i2 = 0; i2 < items.length; i2++) {
    const value = items[i2][_col];
    const id = items[i2].id;
    const { x: x2, y: y3, h: h3 } = value;
    const w2 = Math.min(_col, value.w);
    if (ignoreList.indexOf(id) === -1) {
      for (var j = y3; j < y3 + h3; j++) {
        const row = matrix[j];
        if (row) {
          for (var k2 = x2; k2 < x2 + w2; k2++) {
            row[k2] = { ...value, id };
          }
        }
      }
    }
  }
  return matrix;
}
function findItemsById(closeBlocks, items) {
  return items.filter((value) => closeBlocks.indexOf(value.id) !== -1);
}
function getItemById(id, items) {
  return items.find((value) => value.id === id);
}
function findFreeSpaceForItem(matrix, item) {
  const cols = matrix[0].length;
  const w2 = Math.min(cols, item.w);
  let xNtime = cols - w2;
  let getMatrixRows = matrix.length;
  for (var i2 = 0; i2 < getMatrixRows; i2++) {
    const row = matrix[i2];
    for (var j = 0; j < xNtime + 1; j++) {
      const sliceA = row.slice(j, j + w2);
      const empty2 = sliceA.every((val) => val === void 0);
      if (empty2) {
        const isEmpty = matrix.slice(i2, i2 + item.h).every((a3) => a3.slice(j, j + w2).every((n) => n === void 0));
        if (isEmpty) {
          return { y: i2, x: j };
        }
      }
    }
  }
  return {
    y: getMatrixRows,
    x: 0
  };
}
const getItem = (item, col) => {
  return { ...item[col], id: item.id };
};
const updateItem = (elements2, active, position, col) => {
  return elements2.map((value) => {
    if (value.id === active.id) {
      return { ...value, [col]: { ...value[col], ...position } };
    }
    return value;
  });
};
function moveItemsAroundItem(active, items, cols, original) {
  const activeItem = getItem(active, cols);
  const ids = items.map((value) => value.id).filter((value) => value !== activeItem.id);
  const els = items.filter((value) => value.id !== activeItem.id);
  let newItems = updateItem(items, active, activeItem, cols);
  let matrix = makeMatrixFromItemsIgnore(newItems, ids, getRowsCount(newItems, cols), cols);
  let tempItems = newItems;
  let exclude = [];
  els.forEach((item) => {
    let position = findFreeSpaceForItem(matrix, item[cols]);
    exclude.push(item.id);
    tempItems = updateItem(tempItems, item, position, cols);
    let getIgnoreItems = ids.filter((value) => exclude.indexOf(value) === -1);
    matrix = makeMatrixFromItemsIgnore(tempItems, getIgnoreItems, getRowsCount(tempItems, cols), cols);
  });
  return tempItems;
}
function moveItem(active, items, cols, original) {
  const item = getItem(active, cols);
  let matrix = makeMatrixFromItemsIgnore(items, [item.id], getRowsCount(items, cols), cols);
  const closeBlocks = findCloseBlocks(items, matrix, item);
  let closeObj = findItemsById(closeBlocks, items);
  const fixed = closeObj.find((value) => value[cols].fixed);
  if (fixed)
    return items;
  items = updateItem(items, active, item, cols);
  matrix = makeMatrixFromItemsIgnore(items, closeBlocks, getRowsCount(items, cols), cols);
  let tempItems = items;
  let tempCloseBlocks = closeBlocks;
  let exclude = [];
  closeObj.forEach((item2) => {
    let position = findFreeSpaceForItem(matrix, item2[cols]);
    exclude.push(item2.id);
    tempItems = updateItem(tempItems, item2, position, cols);
    let getIgnoreItems = tempCloseBlocks.filter((value) => exclude.indexOf(value) === -1);
    matrix = makeMatrixFromItemsIgnore(tempItems, getIgnoreItems, getRowsCount(tempItems, cols), cols);
  });
  return tempItems;
}
function normalize(items, col) {
  let result = items.slice();
  result.forEach((value) => {
    const getItem2 = value[col];
    if (!getItem2.static) {
      result = moveItem(getItem2, result, col, { ...getItem2 });
    }
  });
  return result;
}
function adjust(items, col) {
  let matrix = makeMatrix(getRowsCount(items, col), col);
  const order = items.toSorted((a3, b2) => {
    const aItem = a3[col];
    const bItem = b2[col];
    return aItem.x - bItem.x || aItem.y - bItem.y;
  });
  return order.reduce((acc, item) => {
    let position = findFreeSpaceForItem(matrix, item[col]);
    acc.push({
      ...item,
      [col]: {
        ...item[col],
        ...position
      }
    });
    matrix = makeMatrixFromItems(acc, getRowsCount(acc, col), col);
    return acc;
  }, []);
}
function getUndefinedItems(items, col, breakpoints) {
  return items.map((value) => {
    if (!value[col]) {
      return value.id;
    }
  }).filter(Boolean);
}
function getClosestColumn(items, item, col, breakpoints) {
  return breakpoints.map(([_, column]) => item[column] && column).filter(Boolean).reduce(function(acc, value) {
    const isLower = Math.abs(value - col) < Math.abs(acc - col);
    return isLower ? value : acc;
  });
}
function specifyUndefinedColumns(items, col, breakpoints) {
  let matrix = makeMatrixFromItems(items, getRowsCount(items, col), col);
  const getUndefinedElements = getUndefinedItems(items, col);
  let newItems = [...items];
  getUndefinedElements.forEach((elementId) => {
    const getElement = items.find((item) => item.id === elementId);
    const closestColumn = getClosestColumn(items, getElement, col, breakpoints);
    const position = findFreeSpaceForItem(matrix, getElement[closestColumn]);
    const newItem = {
      ...getElement,
      [col]: {
        ...getElement[closestColumn],
        ...position
      }
    };
    newItems = newItems.map((value) => value.id === elementId ? newItem : value);
    matrix = makeMatrixFromItems(newItems, getRowsCount(newItems, col), col);
  });
  return newItems;
}
const index_svelte_svelte_type_style_lang$1 = "";
const get_default_slot_changes$1 = (dirty) => ({});
const get_default_slot_context$1 = (ctx) => ({
  movePointerDown: (
    /*pointerdown*/
    ctx[18]
  ),
  resizePointerDown: (
    /*resizePointerDown*/
    ctx[19]
  )
});
function create_if_block_1$3(ctx) {
  let div;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "svlt-grid-resizer svelte-1iyj4z4");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (!mounted) {
        dispose = listen(
          div,
          "pointerdown",
          /*resizePointerDown*/
          ctx[19]
        );
        mounted = true;
      }
    },
    p: noop$1,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$3(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true, style: true });
      children(div).forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "svlt-grid-shadow shadow-active svelte-1iyj4z4");
      set_style(
        div,
        "width",
        /*shadow*/
        ctx[12].w * /*xPerPx*/
        ctx[6] - /*gapX*/
        ctx[8] * 2 + "px"
      );
      set_style(
        div,
        "height",
        /*shadow*/
        ctx[12].h * /*yPerPx*/
        ctx[7] - /*gapY*/
        ctx[9] * 2 + "px"
      );
      set_style(div, "transform", "translate(" + /*shadow*/
      (ctx[12].x * /*xPerPx*/
      ctx[6] + /*gapX*/
      ctx[8]) + "px, " + /*shadow*/
      (ctx[12].y * /*yPerPx*/
      ctx[7] + /*gapY*/
      ctx[9]) + "px)");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      ctx[29](div);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*shadow, xPerPx, gapX*/
      4416) {
        set_style(
          div,
          "width",
          /*shadow*/
          ctx2[12].w * /*xPerPx*/
          ctx2[6] - /*gapX*/
          ctx2[8] * 2 + "px"
        );
      }
      if (dirty[0] & /*shadow, yPerPx, gapY*/
      4736) {
        set_style(
          div,
          "height",
          /*shadow*/
          ctx2[12].h * /*yPerPx*/
          ctx2[7] - /*gapY*/
          ctx2[9] * 2 + "px"
        );
      }
      if (dirty[0] & /*shadow, xPerPx, gapX, yPerPx, gapY*/
      5056) {
        set_style(div, "transform", "translate(" + /*shadow*/
        (ctx2[12].x * /*xPerPx*/
        ctx2[6] + /*gapX*/
        ctx2[8]) + "px, " + /*shadow*/
        (ctx2[12].y * /*yPerPx*/
        ctx2[7] + /*gapY*/
        ctx2[9]) + "px)");
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      ctx[29](null);
    }
  };
}
function create_fragment$3(ctx) {
  let div;
  let t0;
  let div_style_value;
  let t1;
  let if_block1_anchor;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[28].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[27],
    get_default_slot_context$1
  );
  let if_block0 = (
    /*resizable*/
    ctx[4] && !/*item*/
    ctx[10].customResizer && create_if_block_1$3(ctx)
  );
  let if_block1 = (
    /*active*/
    (ctx[13] || /*trans*/
    ctx[16]) && create_if_block$3(ctx)
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", {
        draggable: true,
        class: true,
        style: true
      });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      t0 = claim_space(div_nodes);
      if (if_block0)
        if_block0.l(div_nodes);
      div_nodes.forEach(detach);
      t1 = claim_space(nodes);
      if (if_block1)
        if_block1.l(nodes);
      if_block1_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "draggable", false);
      attr(div, "class", "svlt-grid-item svelte-1iyj4z4");
      attr(div, "style", div_style_value = "width: " + /*active*/
      (ctx[13] ? (
        /*newSize*/
        ctx[15].width
      ) : (
        /*width*/
        ctx[0]
      )) + "px; height:" + /*active*/
      (ctx[13] ? (
        /*newSize*/
        ctx[15].height
      ) : (
        /*height*/
        ctx[1]
      )) + "px; " + /*active*/
      (ctx[13] ? `transform: translate(${/*cordDiff*/
      ctx[14].x}px, ${/*cordDiff*/
      ctx[14].y}px);top:${/*rect*/
      ctx[17].top}px;left:${/*rect*/
      ctx[17].left}px;` : (
        /*trans*/
        ctx[16] ? `transform: translate(${/*cordDiff*/
        ctx[14].x}px, ${/*cordDiff*/
        ctx[14].y}px); position:absolute; transition: width 0.2s, height 0.2s;` : `transition: transform 0.2s, opacity 0.2s; transform: translate(${/*left*/
        ctx[2]}px, ${/*top*/
        ctx[3]}px); `
      )));
      toggle_class(
        div,
        "svlt-grid-active",
        /*active*/
        ctx[13] || /*trans*/
        ctx[16] && /*rect*/
        ctx[17]
      );
      toggle_class(
        div,
        "touch-none",
        /*draggable*/
        ctx[5] && !/*item*/
        ctx[10].customDragger
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      append_hydration(div, t0);
      if (if_block0)
        if_block0.m(div, null);
      insert_hydration(target, t1, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert_hydration(target, if_block1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(div, "pointerdown", function() {
          if (is_function(
            /*item*/
            ctx[10] && /*item*/
            ctx[10].customDragger ? null : (
              /*draggable*/
              ctx[5] && /*pointerdown*/
              ctx[18]
            )
          ))
            /*item*/
            (ctx[10] && /*item*/
            ctx[10].customDragger ? null : (
              /*draggable*/
              ctx[5] && /*pointerdown*/
              ctx[18]
            )).apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        134217728)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[27],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[27]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx[27],
              dirty,
              get_default_slot_changes$1
            ),
            get_default_slot_context$1
          );
        }
      }
      if (
        /*resizable*/
        ctx[4] && !/*item*/
        ctx[10].customResizer
      ) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
        } else {
          if_block0 = create_if_block_1$3(ctx);
          if_block0.c();
          if_block0.m(div, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (!current || dirty[0] & /*active, newSize, width, height, cordDiff, rect, trans, left, top*/
      253967 && div_style_value !== (div_style_value = "width: " + /*active*/
      (ctx[13] ? (
        /*newSize*/
        ctx[15].width
      ) : (
        /*width*/
        ctx[0]
      )) + "px; height:" + /*active*/
      (ctx[13] ? (
        /*newSize*/
        ctx[15].height
      ) : (
        /*height*/
        ctx[1]
      )) + "px; " + /*active*/
      (ctx[13] ? `transform: translate(${/*cordDiff*/
      ctx[14].x}px, ${/*cordDiff*/
      ctx[14].y}px);top:${/*rect*/
      ctx[17].top}px;left:${/*rect*/
      ctx[17].left}px;` : (
        /*trans*/
        ctx[16] ? `transform: translate(${/*cordDiff*/
        ctx[14].x}px, ${/*cordDiff*/
        ctx[14].y}px); position:absolute; transition: width 0.2s, height 0.2s;` : `transition: transform 0.2s, opacity 0.2s; transform: translate(${/*left*/
        ctx[2]}px, ${/*top*/
        ctx[3]}px); `
      )))) {
        attr(div, "style", div_style_value);
      }
      if (!current || dirty[0] & /*active, trans, rect*/
      204800) {
        toggle_class(
          div,
          "svlt-grid-active",
          /*active*/
          ctx[13] || /*trans*/
          ctx[16] && /*rect*/
          ctx[17]
        );
      }
      if (!current || dirty[0] & /*draggable, item*/
      1056) {
        toggle_class(
          div,
          "touch-none",
          /*draggable*/
          ctx[5] && !/*item*/
          ctx[10].customDragger
        );
      }
      if (
        /*active*/
        ctx[13] || /*trans*/
        ctx[16]
      ) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
        } else {
          if_block1 = create_if_block$3(ctx);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t1);
        detach(if_block1_anchor);
      }
      if (default_slot)
        default_slot.d(detaching);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance$3($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  const dispatch = createEventDispatcher();
  let { sensor } = $$props;
  let { width } = $$props;
  let { height } = $$props;
  let { left } = $$props;
  let { top } = $$props;
  let { resizable } = $$props;
  let { draggable } = $$props;
  let { id } = $$props;
  let { container } = $$props;
  let { xPerPx } = $$props;
  let { yPerPx } = $$props;
  let { gapX } = $$props;
  let { gapY } = $$props;
  let { item } = $$props;
  let { max } = $$props;
  let { min } = $$props;
  let { cols } = $$props;
  let { nativeContainer } = $$props;
  let shadowElement;
  let shadow = {};
  let active = false;
  let initX, initY;
  let capturePos = { x: 0, y: 0 };
  let cordDiff = { x: 0, y: 0 };
  let newSize = { width, height };
  let trans = false;
  let anima;
  const inActivate = () => {
    const shadowBound = shadowElement.getBoundingClientRect();
    const xdragBound = rect.left + cordDiff.x;
    const ydragBound = rect.top + cordDiff.y;
    $$invalidate(14, cordDiff.x = shadow.x * xPerPx + gapX - (shadowBound.x - xdragBound), cordDiff);
    $$invalidate(14, cordDiff.y = shadow.y * yPerPx + gapY - (shadowBound.y - ydragBound), cordDiff);
    $$invalidate(13, active = false);
    $$invalidate(16, trans = true);
    clearTimeout(anima);
    anima = setTimeout(
      () => {
        $$invalidate(16, trans = false);
      },
      100
    );
    dispatch("pointerup", { id });
  };
  let repaint = (cb, isPointerUp) => {
    dispatch("repaint", { id, shadow, isPointerUp, onUpdate: cb });
  };
  let _scrollTop = 0;
  let containerFrame;
  let rect;
  let scrollElement;
  const getContainerFrame = (element2) => {
    if (element2 === document.documentElement || !element2) {
      const { height: height2, top: top2, right, bottom, left: left2 } = nativeContainer.getBoundingClientRect();
      return {
        top: Math.max(0, top2),
        bottom: Math.min(window.innerHeight, bottom)
      };
    }
    return element2.getBoundingClientRect();
  };
  const getScroller = (element2) => !element2 ? document.documentElement : element2;
  const pointerdown = ({ clientX, clientY, target }) => {
    initX = clientX;
    initY = clientY;
    capturePos = { x: left, y: top };
    $$invalidate(12, shadow = {
      x: item.x,
      y: item.y,
      w: item.w,
      h: item.h
    });
    $$invalidate(15, newSize = { width, height });
    containerFrame = getContainerFrame(container);
    scrollElement = getScroller(container);
    $$invalidate(14, cordDiff = { x: 0, y: 0 });
    $$invalidate(17, rect = target.closest(".svlt-grid-item").getBoundingClientRect());
    $$invalidate(13, active = true);
    $$invalidate(16, trans = false);
    _scrollTop = scrollElement.scrollTop;
    window.addEventListener("pointermove", pointermove);
    window.addEventListener("pointerup", pointerup);
  };
  let sign2 = { x: 0, y: 0 };
  let vel = { x: 0, y: 0 };
  let intervalId = 0;
  const stopAutoscroll = () => {
    clearInterval(intervalId);
    intervalId = false;
    sign2 = { x: 0, y: 0 };
    vel = { x: 0, y: 0 };
  };
  const update = () => {
    const _newScrollTop = scrollElement.scrollTop - _scrollTop;
    const boundX = capturePos.x + cordDiff.x;
    const boundY = capturePos.y + (cordDiff.y + _newScrollTop);
    let gridX = Math.round(boundX / xPerPx);
    let gridY = Math.round(boundY / yPerPx);
    $$invalidate(12, shadow.x = Math.max(Math.min(gridX, cols - shadow.w), 0), shadow);
    $$invalidate(12, shadow.y = Math.max(gridY, 0), shadow);
    if (max.y) {
      $$invalidate(12, shadow.y = Math.min(shadow.y, max.y), shadow);
    }
    repaint();
  };
  const pointermove = (event) => {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    const { clientX, clientY } = event;
    $$invalidate(14, cordDiff = { x: clientX - initX, y: clientY - initY });
    const Y_SENSOR = sensor;
    let velocityTop = Math.max(0, (containerFrame.top + Y_SENSOR - clientY) / Y_SENSOR);
    let velocityBottom = Math.max(0, (clientY - (containerFrame.bottom - Y_SENSOR)) / Y_SENSOR);
    const topSensor = velocityTop > 0 && velocityBottom === 0;
    const bottomSensor = velocityBottom > 0 && velocityTop === 0;
    sign2.y = topSensor ? -1 : bottomSensor ? 1 : 0;
    vel.y = sign2.y === -1 ? velocityTop : velocityBottom;
    if (vel.y > 0) {
      if (!intervalId) {
        intervalId = setInterval(
          () => {
            scrollElement.scrollTop += 2 * (vel.y + Math.sign(vel.y)) * sign2.y;
            update();
          },
          10
        );
      }
    } else if (intervalId) {
      stopAutoscroll();
    } else {
      update();
    }
  };
  const pointerup = (e2) => {
    stopAutoscroll();
    window.removeEventListener("pointerdown", pointerdown);
    window.removeEventListener("pointermove", pointermove);
    window.removeEventListener("pointerup", pointerup);
    repaint(inActivate, true);
  };
  let resizeInitPos = { x: 0, y: 0 };
  let initSize = { width: 0, height: 0 };
  const resizePointerDown = (e2) => {
    e2.stopPropagation();
    const { pageX, pageY } = e2;
    resizeInitPos = { x: pageX, y: pageY };
    initSize = { width, height };
    $$invalidate(14, cordDiff = { x: 0, y: 0 });
    $$invalidate(17, rect = e2.target.closest(".svlt-grid-item").getBoundingClientRect());
    $$invalidate(15, newSize = { width, height });
    $$invalidate(13, active = true);
    $$invalidate(16, trans = false);
    $$invalidate(12, shadow = {
      x: item.x,
      y: item.y,
      w: item.w,
      h: item.h
    });
    containerFrame = getContainerFrame(container);
    scrollElement = getScroller(container);
    window.addEventListener("pointermove", resizePointerMove);
    window.addEventListener("pointerup", resizePointerUp);
  };
  const resizePointerMove = ({ pageX, pageY }) => {
    $$invalidate(15, newSize.width = initSize.width + pageX - resizeInitPos.x, newSize);
    $$invalidate(15, newSize.height = initSize.height + pageY - resizeInitPos.y, newSize);
    let maxWidth = cols - shadow.x;
    maxWidth = Math.min(max.w, maxWidth) || maxWidth;
    $$invalidate(15, newSize.width = Math.max(Math.min(newSize.width, maxWidth * xPerPx - gapX * 2), min.w * xPerPx - gapX * 2), newSize);
    $$invalidate(15, newSize.height = Math.max(newSize.height, min.h * yPerPx - gapY * 2), newSize);
    if (max.h) {
      $$invalidate(15, newSize.height = Math.min(newSize.height, max.h * yPerPx - gapY * 2), newSize);
    }
    $$invalidate(12, shadow.w = Math.round((newSize.width + gapX * 2) / xPerPx), shadow);
    $$invalidate(12, shadow.h = Math.round((newSize.height + gapY * 2) / yPerPx), shadow);
    repaint();
  };
  const resizePointerUp = (e2) => {
    e2.stopPropagation();
    repaint(inActivate, true);
    window.removeEventListener("pointermove", resizePointerMove);
    window.removeEventListener("pointerup", resizePointerUp);
  };
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      shadowElement = $$value;
      $$invalidate(11, shadowElement);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("sensor" in $$props2)
      $$invalidate(20, sensor = $$props2.sensor);
    if ("width" in $$props2)
      $$invalidate(0, width = $$props2.width);
    if ("height" in $$props2)
      $$invalidate(1, height = $$props2.height);
    if ("left" in $$props2)
      $$invalidate(2, left = $$props2.left);
    if ("top" in $$props2)
      $$invalidate(3, top = $$props2.top);
    if ("resizable" in $$props2)
      $$invalidate(4, resizable = $$props2.resizable);
    if ("draggable" in $$props2)
      $$invalidate(5, draggable = $$props2.draggable);
    if ("id" in $$props2)
      $$invalidate(21, id = $$props2.id);
    if ("container" in $$props2)
      $$invalidate(22, container = $$props2.container);
    if ("xPerPx" in $$props2)
      $$invalidate(6, xPerPx = $$props2.xPerPx);
    if ("yPerPx" in $$props2)
      $$invalidate(7, yPerPx = $$props2.yPerPx);
    if ("gapX" in $$props2)
      $$invalidate(8, gapX = $$props2.gapX);
    if ("gapY" in $$props2)
      $$invalidate(9, gapY = $$props2.gapY);
    if ("item" in $$props2)
      $$invalidate(10, item = $$props2.item);
    if ("max" in $$props2)
      $$invalidate(23, max = $$props2.max);
    if ("min" in $$props2)
      $$invalidate(24, min = $$props2.min);
    if ("cols" in $$props2)
      $$invalidate(25, cols = $$props2.cols);
    if ("nativeContainer" in $$props2)
      $$invalidate(26, nativeContainer = $$props2.nativeContainer);
    if ("$$scope" in $$props2)
      $$invalidate(27, $$scope = $$props2.$$scope);
  };
  return [
    width,
    height,
    left,
    top,
    resizable,
    draggable,
    xPerPx,
    yPerPx,
    gapX,
    gapY,
    item,
    shadowElement,
    shadow,
    active,
    cordDiff,
    newSize,
    trans,
    rect,
    pointerdown,
    resizePointerDown,
    sensor,
    id,
    container,
    max,
    min,
    cols,
    nativeContainer,
    $$scope,
    slots,
    div_binding
  ];
}
class MoveResize extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$3,
      create_fragment$3,
      safe_not_equal,
      {
        sensor: 20,
        width: 0,
        height: 1,
        left: 2,
        top: 3,
        resizable: 4,
        draggable: 5,
        id: 21,
        container: 22,
        xPerPx: 6,
        yPerPx: 7,
        gapX: 8,
        gapY: 9,
        item: 10,
        max: 23,
        min: 24,
        cols: 25,
        nativeContainer: 26
      },
      null,
      [-1, -1]
    );
  }
}
const index_svelte_svelte_type_style_lang = "";
function get_each_context$2(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i2];
  child_ctx[30] = i2;
  return child_ctx;
}
const get_default_slot_changes = (dirty) => ({
  movePointerDown: dirty[1] & /*movePointerDown*/
  2,
  resizePointerDown: dirty[1] & /*resizePointerDown*/
  1,
  dataItem: dirty[0] & /*items*/
  1,
  item: dirty[0] & /*items, getComputedCols*/
  17,
  index: dirty[0] & /*items*/
  1
});
const get_default_slot_context = (ctx) => ({
  movePointerDown: (
    /*movePointerDown*/
    ctx[32]
  ),
  resizePointerDown: (
    /*resizePointerDown*/
    ctx[31]
  ),
  dataItem: (
    /*item*/
    ctx[28]
  ),
  item: (
    /*item*/
    ctx[28][
      /*getComputedCols*/
      ctx[4]
    ]
  ),
  index: (
    /*i*/
    ctx[30]
  )
});
function create_if_block$2(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*items*/
    ctx[0]
  );
  const get_key = (ctx2) => (
    /*item*/
    ctx2[28].id
  );
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$2(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$2(key, child_ctx));
  }
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*items, getComputedCols, xPerPx, yPerPx, gapX, gapY, sensor, scroller, container, handleRepaint, pointerup, $$scope*/
      2105213 | dirty[1] & /*movePointerDown, resizePointerDown*/
      3) {
        each_value = ensure_array_like(
          /*items*/
          ctx2[0]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$2, each_1_anchor, get_each_context$2);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d(detaching);
      }
    }
  };
}
function create_if_block_1$2(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[19].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[21],
    get_default_slot_context
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    l(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope, items, getComputedCols*/
        2097169 | dirty[1] & /*movePointerDown, resizePointerDown*/
        3)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[21],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[21]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[21],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_default_slot$2(ctx) {
  let t2;
  let current;
  let if_block = (
    /*item*/
    ctx[28][
      /*getComputedCols*/
      ctx[4]
    ] && create_if_block_1$2(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      t2 = space();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*item*/
        ctx2[28][
          /*getComputedCols*/
          ctx2[4]
        ]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*items, getComputedCols*/
          17) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_each_block$2(key_1, ctx) {
  let first;
  let moveresize;
  let current;
  moveresize = new MoveResize({
    props: {
      id: (
        /*item*/
        ctx[28].id
      ),
      resizable: (
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].resizable
      ),
      draggable: (
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].draggable
      ),
      xPerPx: (
        /*xPerPx*/
        ctx[6]
      ),
      yPerPx: (
        /*yPerPx*/
        ctx[10]
      ),
      width: Math.min(
        /*getComputedCols*/
        ctx[4],
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].w
      ) * /*xPerPx*/
      ctx[6] - /*gapX*/
      ctx[9] * 2,
      height: (
        /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].h) * /*yPerPx*/
        ctx[10] - /*gapY*/
        ctx[8] * 2
      ),
      top: (
        /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].y) * /*yPerPx*/
        ctx[10] + /*gapY*/
        ctx[8]
      ),
      left: (
        /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].x) * /*xPerPx*/
        ctx[6] + /*gapX*/
        ctx[9]
      ),
      item: (
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ]
      ),
      min: (
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].min
      ),
      max: (
        /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].max
      ),
      cols: (
        /*getComputedCols*/
        ctx[4]
      ),
      gapX: (
        /*gapX*/
        ctx[9]
      ),
      gapY: (
        /*gapY*/
        ctx[8]
      ),
      sensor: (
        /*sensor*/
        ctx[3]
      ),
      container: (
        /*scroller*/
        ctx[2]
      ),
      nativeContainer: (
        /*container*/
        ctx[5]
      ),
      $$slots: {
        default: [
          create_default_slot$2,
          ({ resizePointerDown, movePointerDown }) => ({
            31: resizePointerDown,
            32: movePointerDown
          }),
          ({ resizePointerDown, movePointerDown }) => [0, (resizePointerDown ? 1 : 0) | (movePointerDown ? 2 : 0)]
        ]
      },
      $$scope: { ctx }
    }
  });
  moveresize.$on(
    "repaint",
    /*handleRepaint*/
    ctx[12]
  );
  moveresize.$on(
    "pointerup",
    /*pointerup*/
    ctx[11]
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(moveresize.$$.fragment);
      this.h();
    },
    l(nodes) {
      first = empty();
      claim_component(moveresize.$$.fragment, nodes);
      this.h();
    },
    h() {
      this.first = first;
    },
    m(target, anchor) {
      insert_hydration(target, first, anchor);
      mount_component(moveresize, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const moveresize_changes = {};
      if (dirty[0] & /*items*/
      1)
        moveresize_changes.id = /*item*/
        ctx[28].id;
      if (dirty[0] & /*items, getComputedCols*/
      17)
        moveresize_changes.resizable = /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].resizable;
      if (dirty[0] & /*items, getComputedCols*/
      17)
        moveresize_changes.draggable = /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].draggable;
      if (dirty[0] & /*xPerPx*/
      64)
        moveresize_changes.xPerPx = /*xPerPx*/
        ctx[6];
      if (dirty[0] & /*getComputedCols, items, xPerPx, gapX*/
      593)
        moveresize_changes.width = Math.min(
          /*getComputedCols*/
          ctx[4],
          /*item*/
          ctx[28][
            /*getComputedCols*/
            ctx[4]
          ] && /*item*/
          ctx[28][
            /*getComputedCols*/
            ctx[4]
          ].w
        ) * /*xPerPx*/
        ctx[6] - /*gapX*/
        ctx[9] * 2;
      if (dirty[0] & /*items, getComputedCols, gapY*/
      273)
        moveresize_changes.height = /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].h) * /*yPerPx*/
        ctx[10] - /*gapY*/
        ctx[8] * 2;
      if (dirty[0] & /*items, getComputedCols, gapY*/
      273)
        moveresize_changes.top = /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].y) * /*yPerPx*/
        ctx[10] + /*gapY*/
        ctx[8];
      if (dirty[0] & /*items, getComputedCols, xPerPx, gapX*/
      593)
        moveresize_changes.left = /*item*/
        (ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].x) * /*xPerPx*/
        ctx[6] + /*gapX*/
        ctx[9];
      if (dirty[0] & /*items, getComputedCols*/
      17)
        moveresize_changes.item = /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ];
      if (dirty[0] & /*items, getComputedCols*/
      17)
        moveresize_changes.min = /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].min;
      if (dirty[0] & /*items, getComputedCols*/
      17)
        moveresize_changes.max = /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ] && /*item*/
        ctx[28][
          /*getComputedCols*/
          ctx[4]
        ].max;
      if (dirty[0] & /*getComputedCols*/
      16)
        moveresize_changes.cols = /*getComputedCols*/
        ctx[4];
      if (dirty[0] & /*gapX*/
      512)
        moveresize_changes.gapX = /*gapX*/
        ctx[9];
      if (dirty[0] & /*gapY*/
      256)
        moveresize_changes.gapY = /*gapY*/
        ctx[8];
      if (dirty[0] & /*sensor*/
      8)
        moveresize_changes.sensor = /*sensor*/
        ctx[3];
      if (dirty[0] & /*scroller*/
      4)
        moveresize_changes.container = /*scroller*/
        ctx[2];
      if (dirty[0] & /*container*/
      32)
        moveresize_changes.nativeContainer = /*container*/
        ctx[5];
      if (dirty[0] & /*$$scope, items, getComputedCols*/
      2097169 | dirty[1] & /*movePointerDown, resizePointerDown*/
      3) {
        moveresize_changes.$$scope = { dirty, ctx };
      }
      moveresize.$set(moveresize_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(moveresize.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(moveresize.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
      }
      destroy_component(moveresize, detaching);
    }
  };
}
function create_fragment$2(ctx) {
  let div;
  let current;
  let if_block = (
    /*xPerPx*/
    (ctx[6] || !/*fastStart*/
    ctx[1]) && create_if_block$2(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true, style: true });
      var div_nodes = children(div);
      if (if_block)
        if_block.l(div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "svlt-grid-container svelte-1k5vgfu");
      set_style(
        div,
        "height",
        /*containerHeight*/
        ctx[7] + "px"
      );
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      ctx[20](div);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*xPerPx*/
        ctx2[6] || !/*fastStart*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*xPerPx, fastStart*/
          66) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*containerHeight*/
      128) {
        set_style(
          div,
          "height",
          /*containerHeight*/
          ctx2[7] + "px"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
      ctx[20](null);
    }
  };
}
function instance$2($$self, $$props, $$invalidate) {
  let gapX;
  let gapY;
  let containerHeight;
  let { $$slots: slots = {}, $$scope } = $$props;
  const dispatch = createEventDispatcher();
  let { fillSpace = false } = $$props;
  let { items } = $$props;
  let { rowHeight } = $$props;
  let { cols } = $$props;
  let { gap = [10, 10] } = $$props;
  let { fastStart = false } = $$props;
  let { throttleUpdate = 100 } = $$props;
  let { throttleResize = 100 } = $$props;
  let { scroller = void 0 } = $$props;
  let { sensor = 20 } = $$props;
  let getComputedCols;
  let container;
  let xPerPx = 0;
  let yPerPx = rowHeight;
  let containerWidth;
  const pointerup = (ev) => {
    dispatch("pointerup", { id: ev.detail.id, cols: getComputedCols });
  };
  const onResize = throttle(
    () => {
      $$invalidate(0, items = specifyUndefinedColumns(items, getComputedCols, cols));
      dispatch("resize", {
        cols: getComputedCols,
        xPerPx,
        yPerPx,
        width: containerWidth
      });
    },
    throttleUpdate
  );
  onMount(() => {
    const sizeObserver = new ResizeObserver((entries) => {
      requestAnimationFrame(() => {
        let width = entries[0].contentRect.width;
        if (width === containerWidth)
          return;
        $$invalidate(4, getComputedCols = getColumn(width, cols));
        $$invalidate(6, xPerPx = width / getComputedCols);
        if (!containerWidth) {
          $$invalidate(0, items = specifyUndefinedColumns(items, getComputedCols, cols));
          dispatch("mount", { cols: getComputedCols, xPerPx, yPerPx });
        } else {
          onResize();
        }
        containerWidth = width;
      });
    });
    sizeObserver.observe(container);
    return () => sizeObserver.disconnect();
  });
  const updateMatrix = ({ detail }) => {
    let activeItem = getItemById(detail.id, items);
    if (activeItem) {
      activeItem = {
        ...activeItem,
        [getComputedCols]: {
          ...activeItem[getComputedCols],
          ...detail.shadow
        }
      };
      if (fillSpace) {
        $$invalidate(0, items = moveItemsAroundItem(activeItem, items, getComputedCols, getItemById(detail.id, items)));
      } else {
        $$invalidate(0, items = moveItem(activeItem, items, getComputedCols, getItemById(detail.id, items)));
      }
      if (detail.onUpdate)
        detail.onUpdate();
      dispatch("change", {
        unsafeItem: activeItem,
        id: activeItem.id,
        cols: getComputedCols
      });
    }
  };
  const throttleMatrix = throttle(updateMatrix, throttleResize);
  const handleRepaint = ({ detail }) => {
    if (!detail.isPointerUp) {
      throttleMatrix({ detail });
    } else {
      updateMatrix({ detail });
    }
  };
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      container = $$value;
      $$invalidate(5, container);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("fillSpace" in $$props2)
      $$invalidate(13, fillSpace = $$props2.fillSpace);
    if ("items" in $$props2)
      $$invalidate(0, items = $$props2.items);
    if ("rowHeight" in $$props2)
      $$invalidate(14, rowHeight = $$props2.rowHeight);
    if ("cols" in $$props2)
      $$invalidate(15, cols = $$props2.cols);
    if ("gap" in $$props2)
      $$invalidate(16, gap = $$props2.gap);
    if ("fastStart" in $$props2)
      $$invalidate(1, fastStart = $$props2.fastStart);
    if ("throttleUpdate" in $$props2)
      $$invalidate(17, throttleUpdate = $$props2.throttleUpdate);
    if ("throttleResize" in $$props2)
      $$invalidate(18, throttleResize = $$props2.throttleResize);
    if ("scroller" in $$props2)
      $$invalidate(2, scroller = $$props2.scroller);
    if ("sensor" in $$props2)
      $$invalidate(3, sensor = $$props2.sensor);
    if ("$$scope" in $$props2)
      $$invalidate(21, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*gap*/
    65536) {
      $$invalidate(9, [gapX, gapY] = gap, gapX, ($$invalidate(8, gapY), $$invalidate(16, gap)));
    }
    if ($$self.$$.dirty[0] & /*items, getComputedCols*/
    17) {
      $$invalidate(7, containerHeight = getContainerHeight(items, yPerPx, getComputedCols));
    }
  };
  return [
    items,
    fastStart,
    scroller,
    sensor,
    getComputedCols,
    container,
    xPerPx,
    containerHeight,
    gapY,
    gapX,
    yPerPx,
    pointerup,
    handleRepaint,
    fillSpace,
    rowHeight,
    cols,
    gap,
    throttleUpdate,
    throttleResize,
    slots,
    div_binding,
    $$scope
  ];
}
class Grid extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$2,
      create_fragment$2,
      safe_not_equal,
      {
        fillSpace: 13,
        items: 0,
        rowHeight: 14,
        cols: 15,
        gap: 16,
        fastStart: 1,
        throttleUpdate: 17,
        throttleResize: 18,
        scroller: 2,
        sensor: 3
      },
      null,
      [-1, -1]
    );
  }
}
function makeItem(item) {
  const { min = { w: 1, h: 1 }, max } = item;
  return {
    fixed: false,
    resizable: !item.fixed,
    draggable: !item.fixed,
    customDragger: false,
    customResizer: false,
    min: {
      w: Math.max(1, min.w),
      h: Math.max(1, min.h)
    },
    max: { ...max },
    ...item
  };
}
const gridHelp = {
  normalize(items, col) {
    getRowsCount(items, col);
    return normalize(items, col);
  },
  adjust(items, col) {
    return adjust(items, col);
  },
  item(obj) {
    return makeItem(obj);
  },
  findSpace(item, items, cols) {
    let matrix = makeMatrixFromItems(items, getRowsCount(items, cols), cols);
    let position = findFreeSpaceForItem(matrix, item[cols]);
    return position;
  }
};
function get_each_context$1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i2];
  return child_ctx;
}
function create_if_block$1(ctx) {
  let div;
  let iconbutton0;
  let t0;
  let iconbutton1;
  let t1;
  let t2;
  let iconbutton2;
  let t3;
  let if_block1_anchor;
  let current;
  iconbutton0 = new IconButton({ props: { data: mdiCog, size: "18px" } });
  iconbutton0.$on(
    "click",
    /*onEdit*/
    ctx[6]
  );
  iconbutton1 = new IconButton({
    props: {
      data: (
        /*fixed*/
        ctx[1] ? mdiLock : mdiLockOpenVariant
      ),
      size: "18px"
    }
  });
  iconbutton1.$on(
    "click",
    /*onFixed*/
    ctx[7]
  );
  let if_block0 = !/*fixed*/
  ctx[1] && create_if_block_2$1(ctx);
  iconbutton2 = new IconButton({
    props: {
      data: mdiDelete,
      class: "ml-auto",
      color: "red",
      size: "18px"
    }
  });
  iconbutton2.$on(
    "click",
    /*onDelete*/
    ctx[8]
  );
  let if_block1 = !/*fixed*/
  ctx[1] && create_if_block_1$1(ctx);
  return {
    c() {
      div = element("div");
      create_component(iconbutton0.$$.fragment);
      t0 = space();
      create_component(iconbutton1.$$.fragment);
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      create_component(iconbutton2.$$.fragment);
      t3 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(iconbutton0.$$.fragment, div_nodes);
      t0 = claim_space(div_nodes);
      claim_component(iconbutton1.$$.fragment, div_nodes);
      t1 = claim_space(div_nodes);
      if (if_block0)
        if_block0.l(div_nodes);
      t2 = claim_space(div_nodes);
      claim_component(iconbutton2.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      t3 = claim_space(nodes);
      if (if_block1)
        if_block1.l(nodes);
      if_block1_anchor = empty();
      this.h();
    },
    h() {
      attr(div, "class", "absolute z-10 -top-4 left-0 flex w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(iconbutton0, div, null);
      append_hydration(div, t0);
      mount_component(iconbutton1, div, null);
      append_hydration(div, t1);
      if (if_block0)
        if_block0.m(div, null);
      append_hydration(div, t2);
      mount_component(iconbutton2, div, null);
      insert_hydration(target, t3, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert_hydration(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const iconbutton1_changes = {};
      if (dirty & /*fixed*/
      2)
        iconbutton1_changes.data = /*fixed*/
        ctx2[1] ? mdiLock : mdiLockOpenVariant;
      iconbutton1.$set(iconbutton1_changes);
      if (!/*fixed*/
      ctx2[1]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*fixed*/
          2) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_2$1(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t2);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (!/*fixed*/
      ctx2[1]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*fixed*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_1$1(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton0.$$.fragment, local);
      transition_in(iconbutton1.$$.fragment, local);
      transition_in(if_block0);
      transition_in(iconbutton2.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(iconbutton0.$$.fragment, local);
      transition_out(iconbutton1.$$.fragment, local);
      transition_out(if_block0);
      transition_out(iconbutton2.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t3);
        detach(if_block1_anchor);
      }
      destroy_component(iconbutton0);
      destroy_component(iconbutton1);
      if (if_block0)
        if_block0.d();
      destroy_component(iconbutton2);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
function create_if_block_2$1(ctx) {
  let iconbutton;
  let current;
  iconbutton = new IconButton({
    props: {
      data: mdiCursorMove,
      class: "touch-none",
      size: "18px"
    }
  });
  iconbutton.$on("pointerdown", function() {
    if (is_function(
      /*move*/
      ctx[2]
    ))
      ctx[2].apply(this, arguments);
  });
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    l(nodes) {
      claim_component(iconbutton.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_if_block_1$1(ctx) {
  let iconbutton;
  let current;
  iconbutton = new IconButton({
    props: {
      data: mdiArrowTopLeftBottomRight,
      class: "absolute z-10 -right-3 -bottom-3 touch-none",
      size: "18px"
    }
  });
  iconbutton.$on("pointerdown", function() {
    if (is_function(
      /*resize*/
      ctx[3]
    ))
      ctx[3].apply(this, arguments);
  });
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    l(nodes) {
      claim_component(iconbutton.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_each_block$1(key_1, ctx) {
  let first;
  let switch_instance;
  let switch_instance_anchor;
  let current;
  var switch_value = findWidget(
    /*s*/
    ctx[11].type
  );
  function switch_props(ctx2, dirty) {
    return {
      props: {
        settings: (
          /*s*/
          ctx2[11]
        ),
        context: (
          /*context*/
          ctx2[4]
        )
      }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
  }
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
      this.h();
    },
    l(nodes) {
      first = empty();
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
      this.h();
    },
    h() {
      this.first = first;
    },
    m(target, anchor) {
      insert_hydration(target, first, anchor);
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*settings*/
      1 && switch_value !== (switch_value = findWidget(
        /*s*/
        ctx[11].type
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty & /*settings*/
        1)
          switch_instance_changes.settings = /*s*/
          ctx[11];
        if (dirty & /*context*/
        16)
          switch_instance_changes.context = /*context*/
          ctx[4];
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
        detach(switch_instance_anchor);
      }
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function create_default_slot$1(ctx) {
  let t2;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let if_block = (
    /*$editing*/
    ctx[5] && create_if_block$1(ctx)
  );
  let each_value = ensure_array_like(
    /*settings*/
    ctx[0]
  );
  const get_key = (ctx2) => (
    /*s*/
    ctx2[11].id
  );
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$1(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$1(key, child_ctx));
  }
  return {
    c() {
      if (if_block)
        if_block.c();
      t2 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, t2, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$editing*/
        ctx2[5]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$editing*/
          32) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$1(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (dirty & /*settings, context*/
      17) {
        each_value = ensure_array_like(
          /*settings*/
          ctx2[0]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$1, each_1_anchor, get_each_context$1);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      transition_out(if_block);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(each_1_anchor);
      }
      if (if_block)
        if_block.d(detaching);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d(detaching);
      }
    }
  };
}
function create_fragment$1(ctx) {
  let card;
  let current;
  card = new Card({
    props: {
      class: "h-full w-full overflow-hidden flex flex-col",
      $$slots: { default: [create_default_slot$1] },
      $$scope: { ctx }
    }
  });
  card.$on(
    "click",
    /*click_handler*/
    ctx[9]
  );
  return {
    c() {
      create_component(card.$$.fragment);
    },
    l(nodes) {
      claim_component(card.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(card, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const card_changes = {};
      if (dirty & /*$$scope, settings, context, resize, fixed, move, $editing*/
      16447) {
        card_changes.$$scope = { dirty, ctx: ctx2 };
      }
      card.$set(card_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(card.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(card.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(card, detaching);
    }
  };
}
function instance$1($$self, $$props, $$invalidate) {
  let context;
  let $editing;
  component_subscribe($$self, editing, ($$value) => $$invalidate(5, $editing = $$value));
  const dispatch = createEventDispatcher();
  let { settings } = $$props;
  let { fixed } = $$props;
  let { move } = $$props;
  let { resize } = $$props;
  function onEdit() {
    dispatch("edit");
  }
  function onFixed() {
    dispatch("fixed", !fixed);
  }
  function onDelete() {
    dispatch("delete");
  }
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(0, settings = $$props2.settings);
    if ("fixed" in $$props2)
      $$invalidate(1, fixed = $$props2.fixed);
    if ("move" in $$props2)
      $$invalidate(2, move = $$props2.move);
    if ("resize" in $$props2)
      $$invalidate(3, resize = $$props2.resize);
  };
  $$invalidate(4, context = { editing: false, mode: "card" });
  return [
    settings,
    fixed,
    move,
    resize,
    context,
    $editing,
    onEdit,
    onFixed,
    onDelete,
    click_handler
  ];
}
class Widget extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {
      settings: 0,
      fixed: 1,
      move: 2,
      resize: 3
    });
  }
}
function migrate(settings) {
  while (settings.version !== 1) {
    settings = migrateOnce(settings);
  }
  return settings;
}
function migrateOnce(item) {
  switch (item.version) {
    case 1:
      return item;
    case void 0:
    default:
      return migrate_v0_v1(item);
  }
}
function migrate_v0_v1(v0) {
  const item = {
    ...v0,
    version: 1,
    card: [v0.settings],
    view: []
  };
  if (v0.settings.type === "capability") {
    const settings_v3 = migrateCapability(v0.settings);
    const settings_v4 = (settings_v3.capabilities ?? []).map((c2) => ({
      id: v4(),
      type: "capability",
      version: 4,
      deviceId: settings_v3.deviceId,
      capabilityId: c2.capabilityId,
      title: c2.title,
      iconId: void 0
    }));
    const device = {
      id: v4(),
      type: "device",
      version: 1,
      deviceId: settings_v3.deviceId,
      title: void 0,
      iconId: void 0
    };
    item.card = [device, ...settings_v4];
  } else if (v0.settings.type === "slider") {
    const settings_v1 = v0.settings;
    const device = {
      id: v4(),
      type: "device",
      version: 1,
      deviceId: settings_v1.deviceId,
      title: void 0,
      iconId: void 0
    };
    item.card = [device, settings_v1];
  }
  return item;
}
function migrateCapability(settings) {
  while (settings.version < 3) {
    settings = migrateOnce(settings);
  }
  return settings;
}
function get_each_context(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[51] = list[i2];
  return child_ctx;
}
function create_if_block(ctx) {
  let editwidgetview;
  let updating_open;
  let t0;
  let div;
  let t1;
  let grid_1;
  let updating_items;
  let t2;
  let portal;
  let current;
  function editwidgetview_open_binding(value) {
    ctx[26](value);
  }
  let editwidgetview_props = { item: (
    /*editItem*/
    ctx[4]
  ) };
  if (
    /*editOpen*/
    ctx[3] !== void 0
  ) {
    editwidgetview_props.open = /*editOpen*/
    ctx[3];
  }
  editwidgetview = new EditWidgetView({ props: editwidgetview_props });
  binding_callbacks.push(() => bind(editwidgetview, "open", editwidgetview_open_binding));
  editwidgetview.$on(
    "item",
    /*item_handler*/
    ctx[27]
  );
  let if_block = (
    /*$editing*/
    ctx[1] && create_if_block_3(ctx)
  );
  function grid_1_items_binding(value) {
    ctx[35](value);
  }
  let grid_1_props = {
    fastStart: true,
    cols: (
      /*breakpointColumns*/
      ctx[0]
    ),
    gap: (
      /*$grid*/
      ctx[8].gaps
    ),
    rowHeight: 50,
    $$slots: {
      default: [
        create_default_slot_2,
        ({ item, dataItem, movePointerDown, resizePointerDown }) => ({
          54: item,
          55: dataItem,
          56: movePointerDown,
          57: resizePointerDown
        }),
        ({ item, dataItem, movePointerDown, resizePointerDown }) => [
          0,
          (item ? 8388608 : 0) | (dataItem ? 16777216 : 0) | (movePointerDown ? 33554432 : 0) | (resizePointerDown ? 67108864 : 0)
        ]
      ]
    },
    $$scope: { ctx }
  };
  if (
    /*items*/
    ctx[2] !== void 0
  ) {
    grid_1_props.items = /*items*/
    ctx[2];
  }
  grid_1 = new Grid({ props: grid_1_props });
  binding_callbacks.push(() => bind(grid_1, "items", grid_1_items_binding));
  grid_1.$on(
    "mount",
    /*mount_handler*/
    ctx[36]
  );
  grid_1.$on(
    "resize",
    /*resize_handler*/
    ctx[37]
  );
  portal = new Portal({
    props: {
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(editwidgetview.$$.fragment);
      t0 = space();
      div = element("div");
      if (if_block)
        if_block.c();
      t1 = space();
      create_component(grid_1.$$.fragment);
      t2 = space();
      create_component(portal.$$.fragment);
      this.h();
    },
    l(nodes) {
      claim_component(editwidgetview.$$.fragment, nodes);
      t0 = claim_space(nodes);
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (if_block)
        if_block.l(div_nodes);
      div_nodes.forEach(detach);
      t1 = claim_space(nodes);
      claim_component(grid_1.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(portal.$$.fragment, nodes);
      this.h();
    },
    h() {
      attr(div, "class", "flex justify-center");
    },
    m(target, anchor) {
      mount_component(editwidgetview, target, anchor);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      insert_hydration(target, t1, anchor);
      mount_component(grid_1, target, anchor);
      insert_hydration(target, t2, anchor);
      mount_component(portal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const editwidgetview_changes = {};
      if (dirty[0] & /*editItem*/
      16)
        editwidgetview_changes.item = /*editItem*/
        ctx2[4];
      if (!updating_open && dirty[0] & /*editOpen*/
      8) {
        updating_open = true;
        editwidgetview_changes.open = /*editOpen*/
        ctx2[3];
        add_flush_callback(() => updating_open = false);
      }
      editwidgetview.$set(editwidgetview_changes);
      if (
        /*$editing*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*$editing*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_3(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const grid_1_changes = {};
      if (dirty[0] & /*$grid*/
      256)
        grid_1_changes.gap = /*$grid*/
        ctx2[8].gaps;
      if (dirty[1] & /*$$scope, dataItem, item, movePointerDown, resizePointerDown*/
      260046848) {
        grid_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_items && dirty[0] & /*items*/
      4) {
        updating_items = true;
        grid_1_changes.items = /*items*/
        ctx2[2];
        add_flush_callback(() => updating_items = false);
      }
      grid_1.$set(grid_1_changes);
      const portal_changes = {};
      if (dirty[0] & /*viewOpen, viewItem*/
      96 | dirty[1] & /*$$scope*/
      134217728) {
        portal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      portal.$set(portal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(editwidgetview.$$.fragment, local);
      transition_in(if_block);
      transition_in(grid_1.$$.fragment, local);
      transition_in(portal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(editwidgetview.$$.fragment, local);
      transition_out(if_block);
      transition_out(grid_1.$$.fragment, local);
      transition_out(portal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
        detach(t1);
        detach(t2);
      }
      destroy_component(editwidgetview, detaching);
      if (if_block)
        if_block.d();
      destroy_component(grid_1, detaching);
      destroy_component(portal, detaching);
    }
  };
}
function create_if_block_3(ctx) {
  let div;
  let button0;
  let t0;
  let button1;
  let t1;
  let button2;
  let current;
  button0 = new Button({
    props: {
      $$slots: { default: [create_default_slot_5] },
      $$scope: { ctx }
    }
  });
  button0.$on(
    "click",
    /*click_handler*/
    ctx[28]
  );
  button1 = new Button({
    props: {
      $$slots: { default: [create_default_slot_4] },
      $$scope: { ctx }
    }
  });
  button1.$on(
    "click",
    /*click_handler_1*/
    ctx[29]
  );
  button2 = new Button({
    props: {
      $$slots: { default: [create_default_slot_3] },
      $$scope: { ctx }
    }
  });
  button2.$on(
    "click",
    /*click_handler_2*/
    ctx[30]
  );
  return {
    c() {
      div = element("div");
      create_component(button0.$$.fragment);
      t0 = space();
      create_component(button1.$$.fragment);
      t1 = space();
      create_component(button2.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(button0.$$.fragment, div_nodes);
      t0 = claim_space(div_nodes);
      claim_component(button1.$$.fragment, div_nodes);
      t1 = claim_space(div_nodes);
      claim_component(button2.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "ml-4");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(button0, div, null);
      append_hydration(div, t0);
      mount_component(button1, div, null);
      append_hydration(div, t1);
      mount_component(button2, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const button0_changes = {};
      if (dirty[1] & /*$$scope*/
      134217728) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty[1] & /*$$scope*/
      134217728) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty[1] & /*$$scope*/
      134217728) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      transition_in(button2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      transition_out(button2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(button0);
      destroy_component(button1);
      destroy_component(button2);
    }
  };
}
function create_default_slot_5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Add");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Add");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_4(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Save");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Save");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_3(ctx) {
  let t2;
  return {
    c() {
      t2 = text("Cancel");
    },
    l(nodes) {
      t2 = claim_text(nodes, "Cancel");
    },
    m(target, anchor) {
      insert_hydration(target, t2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot_2(ctx) {
  let widget;
  let current;
  function fixed_handler(...args) {
    return (
      /*fixed_handler*/
      ctx[31](
        /*dataItem*/
        ctx[55],
        ...args
      )
    );
  }
  function edit_handler() {
    return (
      /*edit_handler*/
      ctx[32](
        /*dataItem*/
        ctx[55]
      )
    );
  }
  function delete_handler() {
    return (
      /*delete_handler*/
      ctx[33](
        /*dataItem*/
        ctx[55]
      )
    );
  }
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[34](
        /*dataItem*/
        ctx[55]
      )
    );
  }
  widget = new Widget({
    props: {
      settings: (
        /*dataItem*/
        ctx[55].card
      ),
      fixed: (
        /*item*/
        ctx[54].fixed ?? false
      ),
      move: (
        /*movePointerDown*/
        ctx[56]
      ),
      resize: (
        /*resizePointerDown*/
        ctx[57]
      )
    }
  });
  widget.$on("fixed", fixed_handler);
  widget.$on("edit", edit_handler);
  widget.$on("delete", delete_handler);
  widget.$on("click", click_handler_3);
  return {
    c() {
      create_component(widget.$$.fragment);
    },
    l(nodes) {
      claim_component(widget.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(widget, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const widget_changes = {};
      if (dirty[1] & /*dataItem*/
      16777216)
        widget_changes.settings = /*dataItem*/
        ctx[55].card;
      if (dirty[1] & /*item*/
      8388608)
        widget_changes.fixed = /*item*/
        ctx[54].fixed ?? false;
      if (dirty[1] & /*movePointerDown*/
      33554432)
        widget_changes.move = /*movePointerDown*/
        ctx[56];
      if (dirty[1] & /*resizePointerDown*/
      67108864)
        widget_changes.resize = /*resizePointerDown*/
        ctx[57];
      widget.$set(widget_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(widget.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(widget.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(widget, detaching);
    }
  };
}
function create_if_block_1(ctx) {
  let modal;
  let current;
  modal = new Modal({
    props: {
      handleClose: (
        /*func*/
        ctx[39]
      ),
      $$slots: { content: [create_content_slot] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal.$$.fragment);
    },
    l(nodes) {
      claim_component(modal.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_changes = {};
      if (dirty[0] & /*viewOpen*/
      32)
        modal_changes.handleClose = /*func*/
        ctx2[39];
      if (dirty[0] & /*viewItem, viewOpen*/
      96 | dirty[1] & /*$$scope*/
      134217728) {
        modal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal.$set(modal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal, detaching);
    }
  };
}
function create_if_block_2(ctx) {
  var _a2;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*viewItem*/
    ((_a2 = ctx[6].view) == null ? void 0 : _a2.length) > 0 ? (
      /*viewItem*/
      ctx[6].view
    ) : (
      /*viewItem*/
      ctx[6].card
    )
  );
  const get_key = (ctx2) => (
    /*settings*/
    ctx2[51].id
  );
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block(key, child_ctx));
  }
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    l(nodes) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert_hydration(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      var _a3;
      if (dirty[0] & /*viewItem, viewContext*/
      576) {
        each_value = ensure_array_like(
          /*viewItem*/
          ((_a3 = ctx2[6].view) == null ? void 0 : _a3.length) > 0 ? (
            /*viewItem*/
            ctx2[6].view
          ) : (
            /*viewItem*/
            ctx2[6].card
          )
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d(detaching);
      }
    }
  };
}
function create_each_block(key_1, ctx) {
  let first;
  let switch_instance;
  let switch_instance_anchor;
  let current;
  var switch_value = findWidget(
    /*settings*/
    ctx[51].type
  );
  function switch_props(ctx2, dirty) {
    return {
      props: {
        settings: (
          /*settings*/
          ctx2[51]
        ),
        context: (
          /*viewContext*/
          ctx2[9]
        )
      }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
  }
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
      this.h();
    },
    l(nodes) {
      first = empty();
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
      this.h();
    },
    h() {
      this.first = first;
    },
    m(target, anchor) {
      insert_hydration(target, first, anchor);
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*viewItem*/
      64 && switch_value !== (switch_value = findWidget(
        /*settings*/
        ctx[51].type
      ))) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = {};
        if (dirty[0] & /*viewItem*/
        64)
          switch_instance_changes.settings = /*settings*/
          ctx[51];
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
        detach(switch_instance_anchor);
      }
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
}
function create_default_slot_1(ctx) {
  let div1;
  let div0;
  let iconbutton;
  let t2;
  let if_block_anchor;
  let current;
  iconbutton = new IconButton({ props: { data: mdiClose } });
  iconbutton.$on(
    "click",
    /*click_handler_4*/
    ctx[38]
  );
  let if_block = (
    /*viewItem*/
    ctx[6] !== void 0 && create_if_block_2(ctx)
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      create_component(iconbutton.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(iconbutton.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t2 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h() {
      attr(div0, "class", "absolute -top-4 -right-5 z-10");
      attr(div1, "class", "relative w-full");
    },
    m(target, anchor) {
      insert_hydration(target, div1, anchor);
      append_hydration(div1, div0);
      mount_component(iconbutton, div0, null);
      insert_hydration(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*viewItem*/
        ctx2[6] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*viewItem*/
          64) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t2);
        detach(if_block_anchor);
      }
      destroy_component(iconbutton);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_body_slot(ctx) {
  let modal_content_body;
  let current;
  modal_content_body = new Modal.Content.Body({
    props: {
      slot: "body",
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content_body.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content_body.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content_body, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_body_changes = {};
      if (dirty[0] & /*viewItem, viewOpen*/
      96 | dirty[1] & /*$$scope*/
      134217728) {
        modal_content_body_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content_body.$set(modal_content_body_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content_body.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content_body.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content_body, detaching);
    }
  };
}
function create_content_slot(ctx) {
  let modal_content;
  let current;
  modal_content = new Modal.Content({
    props: {
      slot: "content",
      $$slots: { body: [create_body_slot] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal_content.$$.fragment);
    },
    l(nodes) {
      claim_component(modal_content.$$.fragment, nodes);
    },
    m(target, anchor) {
      mount_component(modal_content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const modal_content_changes = {};
      if (dirty[0] & /*viewItem, viewOpen*/
      96 | dirty[1] & /*$$scope*/
      134217728) {
        modal_content_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal_content.$set(modal_content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(modal_content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal_content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal_content, detaching);
    }
  };
}
function create_default_slot(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*viewOpen*/
    ctx[5] && create_if_block_1(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*viewOpen*/
        ctx2[5]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*viewOpen*/
          32) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*$homey*/
    ctx[7] !== void 0 && create_if_block(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$homey*/
        ctx2[7] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*$homey*/
          128) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
const smallBreakpoint = 640;
const mediumBreakpoint = 768;
const largeBreakpoint = 1024;
const xlargeBreakpoint = 1280;
const smallColumns = 6;
const mediumColumns = 12;
const largeColumns = 18;
const xlargeColumns = 24;
function instance($$self, $$props, $$invalidate) {
  let dashboards$2;
  let dashboardId;
  let resolvedDashboard;
  let $homey;
  let $scopes;
  let $devices;
  let $editing;
  let $page;
  let $localDashboards;
  let $homeyDashboards;
  let $grid;
  component_subscribe($$self, homey, ($$value) => $$invalidate(7, $homey = $$value));
  component_subscribe($$self, scopes, ($$value) => $$invalidate(43, $scopes = $$value));
  component_subscribe($$self, devices, ($$value) => $$invalidate(44, $devices = $$value));
  component_subscribe($$self, editing, ($$value) => $$invalidate(1, $editing = $$value));
  component_subscribe($$self, page, ($$value) => $$invalidate(23, $page = $$value));
  component_subscribe($$self, dashboards, ($$value) => $$invalidate(24, $localDashboards = $$value));
  component_subscribe($$self, dashboards$1, ($$value) => $$invalidate(25, $homeyDashboards = $$value));
  component_subscribe($$self, grid, ($$value) => $$invalidate(8, $grid = $$value));
  const breakpoints = [smallBreakpoint, mediumBreakpoint, largeBreakpoint, xlargeBreakpoint];
  const columns = [smallColumns, mediumColumns, largeColumns, xlargeColumns];
  const breakpointColumns = [
    [smallBreakpoint, smallColumns],
    [mediumBreakpoint, mediumColumns],
    [largeBreakpoint, largeColumns],
    [xlargeBreakpoint, xlargeColumns]
  ];
  let items = [];
  let editOpen = false;
  let editItem;
  let viewOpen = false;
  let viewItem;
  let viewContext = {
    mode: "view",
    editing: false,
    select: () => {
    },
    update: () => {
    }
  };
  let dashboard$1;
  let heartbeat;
  onMount(async () => {
    if ($homey === void 0) {
      await goto(base + "/");
    }
    heartbeat = setInterval(() => sendHeartbeat(), 30 * 1e3);
  });
  onDestroy(() => {
    if (heartbeat !== void 0) {
      clearInterval(heartbeat);
    }
  });
  function onDashboard(d3) {
    if (d3 !== void 0 && !$editing && d3.items !== items) {
      dashboard.set(d3);
      dashboard$1 = d3;
      $$invalidate(2, items = migrateWidgets(dashboard$1.items));
    }
  }
  function onEditing(edit) {
    const result = [...items];
    result.forEach((item) => {
      columns.forEach((column) => {
        item[column].draggable = edit && !item[column].fixed;
        item[column].resizable = edit && !item[column].fixed;
        item[column].customDragger = true;
        item[column].customResizer = true;
      });
    });
    $$invalidate(2, items = result);
  }
  function migrateWidgets(i2) {
    const result = [];
    for (let item of i2) {
      let migratedItem = { ...migrate(item) };
      for (let index2 = 0; index2 < migratedItem.card.length; index2++) {
        const settings = migratedItem.card[index2];
        const migration = findMigration(settings.type);
        const migratedSettings = migration !== void 0 ? migration(settings) : settings;
        migratedItem.card[index2] = { ...migratedSettings };
      }
      result.push(migratedItem);
    }
    return result;
  }
  function addWidget() {
    const item = {
      id: v4(),
      version: 1,
      card: [],
      view: []
    };
    $$invalidate(4, editItem = item);
    $$invalidate(3, editOpen = true);
  }
  function editWidget(item) {
    $$invalidate(4, editItem = item);
    $$invalidate(3, editOpen = true);
  }
  function viewWidget(item) {
    $$invalidate(6, viewItem = item);
    $$invalidate(5, viewOpen = true);
  }
  function addItem(item) {
    const result = [...items, item];
    columns.forEach((column) => {
      item[column] = gridHelp.item({
        x: 0,
        y: 0,
        w: 3,
        h: 3,
        resizable: true,
        draggable: true
      });
      const findOutPosition = gridHelp.findSpace(item, result, column);
      item[column] = { ...item[column], ...findOutPosition };
    });
    $$invalidate(2, items = result);
  }
  function removeItem(id) {
    $$invalidate(2, items = items.filter((item) => item.id !== id));
  }
  function setItemSettings(item) {
    $$invalidate(3, editOpen = false);
    const index2 = items.findIndex((i2) => i2.id === item.id);
    if (index2 >= 0) {
      $$invalidate(2, items = [...items]);
      $$invalidate(2, items[index2] = item, items);
    } else {
      addItem(item);
    }
  }
  function setItemFixed(id, fixed) {
    const result = [...items];
    const item = result.find((i2) => i2.id === id);
    if (item) {
      columns.forEach((column) => {
        item[column].fixed = fixed;
        item[column].draggable = !fixed;
        item[column].resizable = !fixed;
      });
    }
    $$invalidate(2, items = result);
  }
  async function saveChanges() {
    if (dashboard$1 === void 0) {
      editing.set(false);
      return;
    } else {
      dashboard$1.items = items;
      if (dashboard$1.source === "localstorage") {
        const d3 = { ...dashboard$1, items: stripGrid(items) };
        dashboards.update(d3);
      } else if (dashboard$1.source === "homey") {
        const settings = { items: stripGrid(items) };
        let success = false;
        const dashboardDevice = Object.values($devices).find((device) => device.data.id === dashboard$1.id);
        if (dashboardDevice !== void 0) {
          dashboardDevice.settings = settings;
        }
        try {
          const url = webhookUrl + webhookId + "?homey=" + $homey.id + "&operation=save_dashboard&dashboardId=" + dashboard$1.id;
          const response = await fetch(url, {
            method: "POST",
            body: JSON.stringify(settings)
          });
          if (response.ok) {
            success = true;
          }
        } catch (e2) {
        }
        if (!success) {
          if ($scopes.includes("homey") || $scopes.includes("homey.app")) {
            try {
              const app = await $homey.apps.getApp({ id: "skogsaas.dashboards" });
              if (app !== void 0) {
                await app.put({
                  path: "/dashboards/" + dashboard$1.id,
                  body: settings
                });
                success = true;
              }
            } catch (e2) {
            }
          }
        }
      }
    }
    editing.set(false);
  }
  function cancelChanges() {
    if (dashboard$1 === void 0) {
      return;
    }
    $$invalidate(2, items = migrateWidgets(dashboard$1.items ?? []));
    editing.set(false);
  }
  function stripGrid(i2) {
    const result = [...i2];
    result.forEach((item) => {
      columns.forEach((column) => {
        delete item[column].draggable;
        delete item[column].resizable;
        delete item[column].customDragger;
        delete item[column].customResizer;
      });
    });
    return result;
  }
  async function sendHeartbeat() {
    let success = false;
    try {
      let url = webhookUrl + webhookId + "?homey=" + $homey.id + "&operation=active_dashboard";
      if (dashboard$1 !== void 0) {
        url += "&dashboardId=" + dashboard$1.id;
      }
      const response = await fetch(url, { method: "POST", body: "" });
      if (response.ok) {
        success = true;
      }
    } catch (e2) {
    }
  }
  function editwidgetview_open_binding(value) {
    editOpen = value;
    $$invalidate(3, editOpen);
  }
  const item_handler = (e2) => setItemSettings(e2.detail);
  const click_handler = () => addWidget();
  const click_handler_1 = () => saveChanges();
  const click_handler_2 = () => cancelChanges();
  const fixed_handler = (dataItem, e2) => setItemFixed(dataItem.id, e2.detail);
  const edit_handler = (dataItem) => editWidget(dataItem);
  const delete_handler = (dataItem) => removeItem(dataItem.id);
  const click_handler_3 = (dataItem) => viewWidget(dataItem);
  function grid_1_items_binding(value) {
    items = value;
    $$invalidate(2, items);
  }
  const mount_handler = (e2) => grid.updateSize(e2.detail);
  const resize_handler = (e2) => grid.updateSize(e2.detail);
  const click_handler_4 = () => $$invalidate(5, viewOpen = false);
  const func = () => $$invalidate(5, viewOpen = false);
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*$homeyDashboards, $localDashboards*/
    50331648) {
      $$invalidate(22, dashboards$2 = { ...$homeyDashboards, ...$localDashboards });
    }
    if ($$self.$$.dirty[0] & /*$page*/
    8388608) {
      $$invalidate(21, dashboardId = $page.url.searchParams.get("id"));
    }
    if ($$self.$$.dirty[0] & /*dashboardId, dashboards*/
    6291456) {
      $$invalidate(20, resolvedDashboard = dashboardId !== null ? dashboards$2[dashboardId] : void 0);
    }
    if ($$self.$$.dirty[0] & /*resolvedDashboard*/
    1048576) {
      onDashboard(resolvedDashboard);
    }
    if ($$self.$$.dirty[0] & /*$editing*/
    2) {
      onEditing($editing);
    }
  };
  return [
    breakpointColumns,
    $editing,
    items,
    editOpen,
    editItem,
    viewOpen,
    viewItem,
    $homey,
    $grid,
    viewContext,
    addWidget,
    editWidget,
    viewWidget,
    removeItem,
    setItemSettings,
    setItemFixed,
    saveChanges,
    cancelChanges,
    breakpoints,
    columns,
    resolvedDashboard,
    dashboardId,
    dashboards$2,
    $page,
    $localDashboards,
    $homeyDashboards,
    editwidgetview_open_binding,
    item_handler,
    click_handler,
    click_handler_1,
    click_handler_2,
    fixed_handler,
    edit_handler,
    delete_handler,
    click_handler_3,
    grid_1_items_binding,
    mount_handler,
    resize_handler,
    click_handler_4,
    func
  ];
}
class Page extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        breakpoints: 18,
        columns: 19,
        breakpointColumns: 0
      },
      null,
      [-1, -1]
    );
  }
  get breakpoints() {
    return this.$$.ctx[18];
  }
  get columns() {
    return this.$$.ctx[19];
  }
  get breakpointColumns() {
    return this.$$.ctx[0];
  }
}
export {
  Page as component
};
